
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001608c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c8  08016290  08016290  00026290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017458  08017458  00030388  2**0
                  CONTENTS
  4 .ARM          00000008  08017458  08017458  00027458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017460  08017460  00030388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017460  08017460  00027460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017464  08017464  00027464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  08017468  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000307d0  20000388  080177f0  00030388  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20030b58  080177f0  00030b58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c1b  00000000  00000000  000303b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005302  00000000  00000000  00061fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022b0  00000000  00000000  000672d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002068  00000000  00000000  00069588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000700c  00000000  00000000  0006b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d64a  00000000  00000000  000725fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011b676  00000000  00000000  0008fc46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ab2bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a330  00000000  00000000  001ab338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000388 	.word	0x20000388
 800021c:	00000000 	.word	0x00000000
 8000220:	08016274 	.word	0x08016274

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000038c 	.word	0x2000038c
 800023c:	08016274 	.word	0x08016274

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f00a f849 	bl	800a6b8 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f00a f844 	bl	800a6b8 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f00a f83f 	bl	800a6b8 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f00a f839 	bl	800a6b8 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f011 fdd4 	bl	8012224 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f94d 	bl	800091c <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20028a84 	.word	0x20028a84
 8000694:	20028a8c 	.word	0x20028a8c

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <SMLCD_Clear+0x38>)
 80006a4:	f00a f808 	bl	800a6b8 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006a8:	2320      	movs	r3, #32
 80006aa:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <SMLCD_Clear+0x3c>)
 80006b8:	f00c fb48 	bl	800cd4c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <SMLCD_Clear+0x38>)
 80006c2:	f009 fff9 	bl	800a6b8 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	20028a8c 	.word	0x20028a8c

080006d8 <SMLCD_Flush>:
	SMLCD_SCS_L;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
void SMLCD_Flush(void) {
 80006d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006dc:	b08a      	sub	sp, #40	; 0x28
 80006de:	af00      	add	r7, sp, #0
 80006e0:	466b      	mov	r3, sp
 80006e2:	4698      	mov	r8, r3
	int commandByte=1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
	int lineByte=1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
	int lineAmount=SCR_H;
 80006ec:	23f0      	movs	r3, #240	; 0xf0
 80006ee:	61bb      	str	r3, [r7, #24]
	int nopBytesPerLine= 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
	int dataBytesPerLine=SCR_W/8;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	613b      	str	r3, [r7, #16]
	int finalNOPByte=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 80006fc:	6a3a      	ldr	r2, [r7, #32]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	441a      	add	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	441a      	add	r2, r3
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	18d6      	adds	r6, r2, r3
 800070e:	1e73      	subs	r3, r6, #1
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4633      	mov	r3, r6
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	f04f 0400 	mov.w	r4, #0
 8000722:	00d4      	lsls	r4, r2, #3
 8000724:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	4633      	mov	r3, r6
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f04f 0400 	mov.w	r4, #0
 800073a:	00d4      	lsls	r4, r2, #3
 800073c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000740:	00cb      	lsls	r3, r1, #3
 8000742:	4633      	mov	r3, r6
 8000744:	3307      	adds	r3, #7
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	ebad 0d03 	sub.w	sp, sp, r3
 800074e:	466b      	mov	r3, sp
 8000750:	3300      	adds	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4632      	mov	r2, r6
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f011 fd6d 	bl	801223a <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 8000760:	4d69      	ldr	r5, [pc, #420]	; (8000908 <SMLCD_Flush+0x230>)
	register uint8_t line = 0;
 8000762:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	int x=0;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2288      	movs	r2, #136	; 0x88
 8000770:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000772:	4b66      	ldr	r3, [pc, #408]	; (800090c <SMLCD_Flush+0x234>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d03b      	beq.n	80007f2 <SMLCD_Flush+0x11a>
 800077a:	2b08      	cmp	r3, #8
 800077c:	d05f      	beq.n	800083e <SMLCD_Flush+0x166>
 800077e:	2b02      	cmp	r3, #2
 8000780:	f040 8084 	bne.w	800088c <SMLCD_Flush+0x1b4>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000784:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000786:	e02f      	b.n	80007e8 <SMLCD_Flush+0x110>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2288      	movs	r2, #136	; 0x88
 800078c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4622      	mov	r2, r4
 8000796:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000798:	2302      	movs	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
 800079c:	e009      	b.n	80007b2 <SMLCD_Flush+0xda>
					transmitBuffer[x]=*ptr;
 800079e:	7829      	ldrb	r1, [r5, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007aa:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	3301      	adds	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	2b33      	cmp	r3, #51	; 0x33
 80007b6:	ddf2      	ble.n	800079e <SMLCD_Flush+0xc6>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007c8:	2201      	movs	r2, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	4850      	ldr	r0, [pc, #320]	; (8000910 <SMLCD_Flush+0x238>)
 80007ce:	f009 ff73 	bl	800a6b8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	b2b2      	uxth	r2, r6
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	484e      	ldr	r0, [pc, #312]	; (8000914 <SMLCD_Flush+0x23c>)
 80007da:	f00c fab7 	bl	800cd4c <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <SMLCD_Flush+0x238>)
 80007e4:	f009 ff68 	bl	800a6b8 <HAL_GPIO_WritePin>
			while (--line > 0) {
 80007e8:	1e63      	subs	r3, r4, #1
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	2c00      	cmp	r4, #0
 80007ee:	d1cb      	bne.n	8000788 <SMLCD_Flush+0xb0>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80007f0:	e084      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 80007f2:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80007f4:	4d48      	ldr	r5, [pc, #288]	; (8000918 <SMLCD_Flush+0x240>)
			while (--line > 0) {
 80007f6:	e01d      	b.n	8000834 <SMLCD_Flush+0x15c>

				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff fef9 	bl	80005f0 <__reverse8bit>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2364      	movs	r3, #100	; 0x64
 8000804:	2201      	movs	r2, #1
 8000806:	4843      	ldr	r0, [pc, #268]	; (8000914 <SMLCD_Flush+0x23c>)
 8000808:	f00c faa0 	bl	800cd4c <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800080c:	2600      	movs	r6, #0
 800080e:	e009      	b.n	8000824 <SMLCD_Flush+0x14c>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000810:	462b      	mov	r3, r5
 8000812:	1e5d      	subs	r5, r3, #1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	483d      	ldr	r0, [pc, #244]	; (8000914 <SMLCD_Flush+0x23c>)
 800081e:	f00c fa95 	bl	800cd4c <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000822:	3601      	adds	r6, #1
 8000824:	2e31      	cmp	r6, #49	; 0x31
 8000826:	d9f3      	bls.n	8000810 <SMLCD_Flush+0x138>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <SMLCD_Flush+0x23c>)
 8000830:	f00c fa8c 	bl	800cd4c <HAL_SPI_Transmit>
			while (--line > 0) {
 8000834:	1e63      	subs	r3, r4, #1
 8000836:	b2dc      	uxtb	r4, r3
 8000838:	2c00      	cmp	r4, #0
 800083a:	d1dd      	bne.n	80007f8 <SMLCD_Flush+0x120>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800083c:	e05e      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_180:
			line = 0;
 800083e:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000840:	4d35      	ldr	r5, [pc, #212]	; (8000918 <SMLCD_Flush+0x240>)
			while (line++ < SCR_H + 1) {
 8000842:	e01d      	b.n	8000880 <SMLCD_Flush+0x1a8>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff fed3 	bl	80005f0 <__reverse8bit>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2201      	movs	r2, #1
 8000852:	4830      	ldr	r0, [pc, #192]	; (8000914 <SMLCD_Flush+0x23c>)
 8000854:	f00c fa7a 	bl	800cd4c <HAL_SPI_Transmit>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000858:	2600      	movs	r6, #0
 800085a:	e009      	b.n	8000870 <SMLCD_Flush+0x198>
					HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 800085c:	462b      	mov	r3, r5
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	2201      	movs	r2, #1
 8000868:	482a      	ldr	r0, [pc, #168]	; (8000914 <SMLCD_Flush+0x23c>)
 800086a:	f00c fa6f 	bl	800cd4c <HAL_SPI_Transmit>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800086e:	3601      	adds	r6, #1
 8000870:	2e31      	cmp	r6, #49	; 0x31
 8000872:	d9f3      	bls.n	800085c <SMLCD_Flush+0x184>
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2201      	movs	r2, #1
 8000878:	2100      	movs	r1, #0
 800087a:	4826      	ldr	r0, [pc, #152]	; (8000914 <SMLCD_Flush+0x23c>)
 800087c:	f00c fa66 	bl	800cd4c <HAL_SPI_Transmit>
			while (line++ < SCR_H + 1) {
 8000880:	4623      	mov	r3, r4
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	b2d4      	uxtb	r4, r2
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d9dc      	bls.n	8000844 <SMLCD_Flush+0x16c>
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 800088a:	e037      	b.n	80008fc <SMLCD_Flush+0x224>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800088c:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800088e:	e02f      	b.n	80008f0 <SMLCD_Flush+0x218>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4622      	mov	r2, r4
 800089e:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
 80008a4:	e009      	b.n	80008ba <SMLCD_Flush+0x1e2>
					transmitBuffer[x]=*ptr;
 80008a6:	7829      	ldrb	r1, [r5, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
					ptr++;
 80008b2:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	3301      	adds	r3, #1
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	2b33      	cmp	r3, #51	; 0x33
 80008be:	ddf2      	ble.n	80008a6 <SMLCD_Flush+0x1ce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <SMLCD_Flush+0x238>)
 80008d6:	f009 feef 	bl	800a6b8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	b2b2      	uxth	r2, r6
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <SMLCD_Flush+0x23c>)
 80008e2:	f00c fa33 	bl	800cd4c <HAL_SPI_Transmit>
				SMLCD_SCS_L;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2110      	movs	r1, #16
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <SMLCD_Flush+0x238>)
 80008ec:	f009 fee4 	bl	800a6b8 <HAL_GPIO_WritePin>
			while (line++ < SCR_H + 1) {
 80008f0:	4623      	mov	r3, r4
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	b2d4      	uxtb	r4, r2
 80008f6:	2bf0      	cmp	r3, #240	; 0xf0
 80008f8:	d9ca      	bls.n	8000890 <SMLCD_Flush+0x1b8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80008fa:	bf00      	nop
 80008fc:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000908:	200003a4 	.word	0x200003a4
 800090c:	20000000 	.word	0x20000000
 8000910:	40021000 	.word	0x40021000
 8000914:	20028a8c 	.word	0x20028a8c
 8000918:	20003283 	.word	0x20003283

0800091c <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0306 	and.w	r3, r3, #6
 800092c:	2b00      	cmp	r3, #0
 800092e:	d007      	beq.n	8000940 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <SMLCD_Orientation+0x44>)
 8000932:	22f0      	movs	r2, #240	; 0xf0
 8000934:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SMLCD_Orientation+0x48>)
 8000938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e006      	b.n	800094e <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SMLCD_Orientation+0x44>)
 8000942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000946:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SMLCD_Orientation+0x48>)
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <SMLCD_Orientation+0x4c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20028a86 	.word	0x20028a86
 8000964:	20028a88 	.word	0x20028a88
 8000968:	20000000 	.word	0x20000000

0800096c <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000970:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <LCD_Clear+0x18>)
 800097a:	f011 fc5e 	bl	801223a <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200003a4 	.word	0x200003a4

08000988 <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000988:	b4b0      	push	{r4, r5, r7}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000990:	4928      	ldr	r1, [pc, #160]	; (8000a34 <LCD_Pixel+0xac>)
 8000992:	7809      	ldrb	r1, [r1, #0]
 8000994:	2904      	cmp	r1, #4
 8000996:	d009      	beq.n	80009ac <LCD_Pixel+0x24>
 8000998:	2908      	cmp	r1, #8
 800099a:	d002      	beq.n	80009a2 <LCD_Pixel+0x1a>
 800099c:	2902      	cmp	r1, #2
 800099e:	d00d      	beq.n	80009bc <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 80009a0:	e010      	b.n	80009c4 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 80009a2:	f240 118f 	movw	r1, #399	; 0x18f
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
			break;
 80009aa:	e00b      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009ac:	4053      	eors	r3, r2
 80009ae:	405a      	eors	r2, r3
 80009b0:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 80009b2:	f240 118f 	movw	r1, #399	; 0x18f
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
			break;
 80009ba:	e003      	b.n	80009c4 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 80009bc:	4053      	eors	r3, r2
 80009be:	405a      	eors	r2, r3
 80009c0:	4053      	eors	r3, r2
			break;
 80009c2:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 80009c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009c8:	fb01 f202 	mul.w	r2, r1, r2
 80009cc:	441a      	add	r2, r3
 80009ce:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 80009d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80009d4:	4294      	cmp	r4, r2
 80009d6:	d829      	bhi.n	8000a2c <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <LCD_Pixel+0xb0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <LCD_Pixel+0x66>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00a      	beq.n	8000a02 <LCD_Pixel+0x7a>
 80009ec:	e013      	b.n	8000a16 <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <LCD_Pixel+0xb4>)
 80009f0:	5d1a      	ldrb	r2, [r3, r4]
 80009f2:	4629      	mov	r1, r5
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <LCD_Pixel+0xb8>)
 80009f6:	5c5b      	ldrb	r3, [r3, r1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <LCD_Pixel+0xb4>)
 80009fe:	551a      	strb	r2, [r3, r4]
			break;
 8000a00:	e015      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a04:	5d1a      	ldrb	r2, [r3, r4]
 8000a06:	4629      	mov	r1, r5
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <LCD_Pixel+0xb8>)
 8000a0a:	5c5b      	ldrb	r3, [r3, r1]
 8000a0c:	4053      	eors	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a12:	551a      	strb	r2, [r3, r4]
			break;
 8000a14:	e00b      	b.n	8000a2e <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a18:	5d1a      	ldrb	r2, [r3, r4]
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LCD_Pixel+0xbc>)
 8000a1e:	5c5b      	ldrb	r3, [r3, r1]
 8000a20:	4013      	ands	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LCD_Pixel+0xb4>)
 8000a26:	551a      	strb	r2, [r3, r4]
			break;
 8000a28:	bf00      	nop
 8000a2a:	e000      	b.n	8000a2e <LCD_Pixel+0xa6>
		return;
 8000a2c:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bcb0      	pop	{r4, r5, r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20028a84 	.word	0x20028a84
 8000a3c:	200003a4 	.word	0x200003a4
 8000a40:	08016960 	.word	0x08016960
 8000a44:	08016958 	.word	0x08016958

08000a48 <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000a48:	b4b0      	push	{r4, r5, r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	4613      	mov	r3, r2
 8000a58:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a60:	fb02 f203 	mul.w	r2, r2, r3
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4413      	add	r3, r2
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <LCD_VLineInt+0xa0>)
 8000a6c:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <LCD_VLineInt+0xa4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d002      	beq.n	8000a84 <LCD_VLineInt+0x3c>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <LCD_VLineInt+0x5a>
 8000a82:	e01d      	b.n	8000ac0 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000a88:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000a8a:	e004      	b.n	8000a96 <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	432b      	orrs	r3, r5
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000a94:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	807a      	strh	r2, [r7, #2]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f5      	bne.n	8000a8c <LCD_VLineInt+0x44>
			}
			break;
 8000aa0:	e01d      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <LCD_VLineInt+0xa8>)
 8000aa6:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000aa8:	e004      	b.n	8000ab4 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000aaa:	7823      	ldrb	r3, [r4, #0]
 8000aac:	406b      	eors	r3, r5
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ab2:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	807a      	strh	r2, [r7, #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f5      	bne.n	8000aaa <LCD_VLineInt+0x62>
			}
			break;
 8000abe:	e00e      	b.n	8000ade <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <LCD_VLineInt+0xac>)
 8000ac4:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000ac6:	e004      	b.n	8000ad2 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000ac8:	7823      	ldrb	r3, [r4, #0]
 8000aca:	402b      	ands	r3, r5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000ad0:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	807a      	strh	r2, [r7, #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1f5      	bne.n	8000ac8 <LCD_VLineInt+0x80>
			}
			break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	200003a4 	.word	0x200003a4
 8000aec:	20028a84 	.word	0x20028a84
 8000af0:	08016960 	.word	0x08016960
 8000af4:	08016958 	.word	0x08016958

08000af8 <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	460b      	mov	r3, r1
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b10:	fb02 f203 	mul.w	r2, r2, r3
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <LCD_HLineInt+0x1c8>)
 8000b1c:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d03a      	beq.n	8000ba2 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000b2c:	f1c6 0308 	rsb	r3, r6, #8
 8000b30:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000b32:	4632      	mov	r2, r6
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <LCD_HLineInt+0x1cc>)
 8000b36:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000b38:	b2b3      	uxth	r3, r6
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d206      	bcs.n	8000b4e <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000b40:	4632      	mov	r2, r6
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	432b      	orrs	r3, r5
 8000b4c:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d002      	beq.n	8000b5c <LCD_HLineInt+0x64>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d00a      	beq.n	8000b70 <LCD_HLineInt+0x78>
 8000b5a:	e013      	b.n	8000b84 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	b25a      	sxtb	r2, r3
 8000b60:	b26b      	sxtb	r3, r5
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	7023      	strb	r3, [r4, #0]
				break;
 8000b6e:	e00e      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	b26b      	sxtb	r3, r5
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	7023      	strb	r3, [r4, #0]
				break;
 8000b82:	e004      	b.n	8000b8e <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000b84:	7823      	ldrb	r3, [r4, #0]
 8000b86:	402b      	ands	r3, r5
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	7023      	strb	r3, [r4, #0]
				break;
 8000b8c:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000b8e:	b2b3      	uxth	r3, r6
 8000b90:	887a      	ldrh	r2, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f0c0 808f 	bcc.w	8000cb6 <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000b98:	3401      	adds	r4, #1
		W -= modulo;
 8000b9a:	b2b3      	uxth	r3, r6
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d92c      	bls.n	8000c02 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000ba8:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <LCD_HLineInt+0xc0>
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d00e      	beq.n	8000bd2 <LCD_HLineInt+0xda>
 8000bb4:	e01a      	b.n	8000bec <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000bb6:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000bb8:	4623      	mov	r3, r4
 8000bba:	1d1c      	adds	r4, r3, #4
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	2b1f      	cmp	r3, #31
 8000bcc:	d8f3      	bhi.n	8000bb6 <LCD_HLineInt+0xbe>
				break;
 8000bce:	e018      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000bd0:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000bd2:	4623      	mov	r3, r4
 8000bd4:	1d1c      	adds	r4, r3, #4
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	3b20      	subs	r3, #32
 8000be0:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d8f3      	bhi.n	8000bd0 <LCD_HLineInt+0xd8>
				break;
 8000be8:	e00b      	b.n	8000c02 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000bea:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000bec:	4623      	mov	r3, r4
 8000bee:	1d1c      	adds	r4, r3, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	3b20      	subs	r3, #32
 8000bf8:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d8f4      	bhi.n	8000bea <LCD_HLineInt+0xf2>
				break;
 8000c00:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d92c      	bls.n	8000c62 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d003      	beq.n	8000c18 <LCD_HLineInt+0x120>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d00d      	beq.n	8000c30 <LCD_HLineInt+0x138>
 8000c14:	e01a      	b.n	8000c4c <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000c16:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000c18:	4623      	mov	r3, r4
 8000c1a:	1c5c      	adds	r4, r3, #1
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	3b08      	subs	r3, #8
 8000c24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d8f4      	bhi.n	8000c16 <LCD_HLineInt+0x11e>
				break;
 8000c2c:	e01a      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000c2e:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000c30:	4623      	mov	r3, r4
 8000c32:	1c5c      	adds	r4, r3, #1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d8f2      	bhi.n	8000c2e <LCD_HLineInt+0x136>
				break;
 8000c48:	e00c      	b.n	8000c64 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000c4a:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	1c5c      	adds	r4, r3, #1
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	3b08      	subs	r3, #8
 8000c58:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d8f4      	bhi.n	8000c4a <LCD_HLineInt+0x152>
				break;
 8000c60:	e000      	b.n	8000c64 <LCD_HLineInt+0x16c>
		}
	}
 8000c62:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d026      	beq.n	8000cb8 <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	f1c3 0308 	rsb	r3, r3, #8
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <LCD_HLineInt+0x1d0>)
 8000c72:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <LCD_HLineInt+0x1d4>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d002      	beq.n	8000c82 <LCD_HLineInt+0x18a>
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d00a      	beq.n	8000c96 <LCD_HLineInt+0x19e>
 8000c80:	e013      	b.n	8000caa <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c82:	7823      	ldrb	r3, [r4, #0]
 8000c84:	b25a      	sxtb	r2, r3
 8000c86:	b26b      	sxtb	r3, r5
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7023      	strb	r3, [r4, #0]
				break;
 8000c94:	e010      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	b26b      	sxtb	r3, r5
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7023      	strb	r3, [r4, #0]
				break;
 8000ca8:	e006      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	402b      	ands	r3, r5
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	7023      	strb	r3, [r4, #0]
				break;
 8000cb2:	bf00      	nop
 8000cb4:	e000      	b.n	8000cb8 <LCD_HLineInt+0x1c0>
			return;
 8000cb6:	bf00      	nop
		}
	}
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	200003a4 	.word	0x200003a4
 8000cc4:	08016968 	.word	0x08016968
 8000cc8:	08016970 	.word	0x08016970
 8000ccc:	20028a84 	.word	0x20028a84

08000cd0 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000cea:	88bd      	ldrh	r5, [r7, #4]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	88bb      	ldrh	r3, [r7, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29c      	uxth	r4, r3
 8000cf4:	e004      	b.n	8000d00 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000cf6:	88fd      	ldrh	r5, [r7, #6]
 8000cf8:	88ba      	ldrh	r2, [r7, #4]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	b29c      	uxth	r4, r3
	}
	L++;
 8000d00:	4623      	mov	r3, r4
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <LCD_HLine+0x9c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d00a      	beq.n	8000d24 <LCD_HLine+0x54>
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d013      	beq.n	8000d3a <LCD_HLine+0x6a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d11f      	bne.n	8000d56 <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe93 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d22:	e01f      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe88 	bl	8000a48 <LCD_VLineInt>
			break;
 8000d38:	e014      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000d3a:	462b      	mov	r3, r5
 8000d3c:	425b      	negs	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	8879      	ldrh	r1, [r7, #2]
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fed2 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d54:	e006      	b.n	8000d64 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4622      	mov	r2, r4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f7ff fecb 	bl	8000af8 <LCD_HLineInt>
			break;
 8000d62:	bf00      	nop
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	20000000 	.word	0x20000000

08000d70 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000d82:	88ba      	ldrh	r2, [r7, #4]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d905      	bls.n	8000d96 <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000d8a:	887d      	ldrh	r5, [r7, #2]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29c      	uxth	r4, r3
 8000d94:	e004      	b.n	8000da0 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000d96:	88bd      	ldrh	r5, [r7, #4]
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29c      	uxth	r4, r3
	}
	L++;
 8000da0:	4623      	mov	r3, r4
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <LCD_VLine+0x9c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d00a      	beq.n	8000dc4 <LCD_VLine+0x54>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d016      	beq.n	8000de0 <LCD_VLine+0x70>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11f      	bne.n	8000df6 <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4622      	mov	r2, r4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f7ff fe9b 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dc2:	e01f      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000dc4:	462b      	mov	r3, r5
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	1b1b      	subs	r3, r3, r4
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88f9      	ldrh	r1, [r7, #6]
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8d 	bl	8000af8 <LCD_HLineInt>
			break;
 8000dde:	e011      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe2a 	bl	8000a48 <LCD_VLineInt>
			break;
 8000df4:	e006      	b.n	8000e04 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4622      	mov	r2, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe23 	bl	8000a48 <LCD_VLineInt>
			break;
 8000e02:	bf00      	nop
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4603      	mov	r3, r0
 8000e24:	80bb      	strh	r3, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	807b      	strh	r3, [r7, #2]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000e2e:	88ba      	ldrh	r2, [r7, #4]
 8000e30:	8879      	ldrh	r1, [r7, #2]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4b 	bl	8000cd0 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000e3a:	883a      	ldrh	r2, [r7, #0]
 8000e3c:	8879      	ldrh	r1, [r7, #2]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff45 	bl	8000cd0 <LCD_HLine>
	if (Y1 > Y2) {
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	883b      	ldrh	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90b      	bls.n	8000e66 <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4053      	eors	r3, r2
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	883a      	ldrh	r2, [r7, #0]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4053      	eors	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000e72:	883a      	ldrh	r2, [r7, #0]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff79 	bl	8000d70 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88b9      	ldrh	r1, [r7, #4]
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff73 	bl	8000d70 <LCD_VLine>
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
	...

08000e94 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000e94:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80bb      	strh	r3, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d90b      	bls.n	8000ed4 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000ebc:	88fa      	ldrh	r2, [r7, #6]
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4053      	eors	r3, r2
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4053      	eors	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000ed4:	88ba      	ldrh	r2, [r7, #4]
 8000ed6:	883b      	ldrh	r3, [r7, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90b      	bls.n	8000ef4 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	883b      	ldrh	r3, [r7, #0]
 8000ee0:	4053      	eors	r3, r2
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4053      	eors	r3, r2
 8000eea:	803b      	strh	r3, [r7, #0]
 8000eec:	88ba      	ldrh	r2, [r7, #4]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	4053      	eors	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000ef4:	4b95      	ldr	r3, [pc, #596]	; (800114c <LCD_FillRect+0x2b8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d011      	beq.n	8000f20 <LCD_FillRect+0x8c>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d002      	beq.n	8000f06 <LCD_FillRect+0x72>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d032      	beq.n	8000f6a <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000f04:	e04a      	b.n	8000f9c <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f16:	3301      	adds	r3, #1
 8000f18:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	80fb      	strh	r3, [r7, #6]
			break;
 8000f1e:	e03d      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	4053      	eors	r3, r2
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4053      	eors	r3, r2
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4053      	eors	r3, r2
 8000f36:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	883a      	ldrh	r2, [r7, #0]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4053      	eors	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f56:	3301      	adds	r3, #1
 8000f58:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000f60:	3301      	adds	r3, #1
 8000f62:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	80fb      	strh	r3, [r7, #6]
			break;
 8000f68:	e018      	b.n	8000f9c <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
 8000f72:	88ba      	ldrh	r2, [r7, #4]
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4053      	eors	r3, r2
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	88fa      	ldrh	r2, [r7, #6]
 8000f7c:	88bb      	ldrh	r3, [r7, #4]
 8000f7e:	4053      	eors	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	883b      	ldrh	r3, [r7, #0]
 8000f86:	4053      	eors	r3, r2
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	883a      	ldrh	r2, [r7, #0]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	4053      	eors	r3, r2
 8000f98:	807b      	strh	r3, [r7, #2]
			break;
 8000f9a:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	4a6b      	ldr	r2, [pc, #428]	; (8001150 <LCD_FillRect+0x2bc>)
 8000fa4:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <LCD_FillRect+0x2c0>)
 8000fae:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	fb02 f203 	mul.w	r2, r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	10db      	asrs	r3, r3, #3
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <LCD_FillRect+0x2c4>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	817b      	strh	r3, [r7, #10]

	if (dW) {
 8000fd8:	897b      	ldrh	r3, [r7, #10]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d071      	beq.n	80010c2 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <LCD_FillRect+0x2c8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d003      	beq.n	8000fee <LCD_FillRect+0x15a>
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d022      	beq.n	8001030 <LCD_FillRect+0x19c>
 8000fea:	e043      	b.n	8001074 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 8000fec:	bf00      	nop
				do {
					cntr = dW;
 8000fee:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8000ff0:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	1c5c      	adds	r4, r3, #1
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8000ffe:	e003      	b.n	8001008 <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 8001000:	4623      	mov	r3, r4
 8001002:	1c5c      	adds	r4, r3, #1
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001008:	1e73      	subs	r3, r6, #1
 800100a:	b29e      	uxth	r6, r3
 800100c:	2e00      	cmp	r6, #0
 800100e:	d1f7      	bne.n	8001000 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 8001010:	7823      	ldrb	r3, [r4, #0]
 8001012:	ea48 0303 	orr.w	r3, r8, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3332      	adds	r3, #50	; 0x32
 800101e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	80ba      	strh	r2, [r7, #4]
 8001026:	883a      	ldrh	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8df      	bhi.n	8000fec <LCD_FillRect+0x158>
				break;
 800102c:	e087      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 800102e:	bf00      	nop
				do {
					cntr = dW;
 8001030:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001032:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001034:	4623      	mov	r3, r4
 8001036:	1c5c      	adds	r4, r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	406a      	eors	r2, r5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001040:	e005      	b.n	800104e <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001042:	4623      	mov	r3, r4
 8001044:	1c5c      	adds	r4, r3, #1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	43d2      	mvns	r2, r2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800104e:	1e73      	subs	r3, r6, #1
 8001050:	b29e      	uxth	r6, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d1f5      	bne.n	8001042 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 8001056:	7823      	ldrb	r3, [r4, #0]
 8001058:	ea88 0303 	eor.w	r3, r8, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3332      	adds	r3, #50	; 0x32
 8001064:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	80ba      	strh	r2, [r7, #4]
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8dd      	bhi.n	800102e <LCD_FillRect+0x19a>
				break;
 8001072:	e064      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001074:	43eb      	mvns	r3, r5
 8001076:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 8001078:	ea6f 0308 	mvn.w	r3, r8
 800107c:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001080:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001082:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001084:	4623      	mov	r3, r4
 8001086:	1c5c      	adds	r4, r3, #1
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	402a      	ands	r2, r5
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001090:	e003      	b.n	800109a <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001092:	4623      	mov	r3, r4
 8001094:	1c5c      	adds	r4, r3, #1
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800109a:	1e73      	subs	r3, r6, #1
 800109c:	b29e      	uxth	r6, r3
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1f7      	bne.n	8001092 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	ea08 0303 	and.w	r3, r8, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3332      	adds	r3, #50	; 0x32
 80010b0:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	80ba      	strh	r2, [r7, #4]
 80010b8:	883a      	ldrh	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8e0      	bhi.n	8001080 <LCD_FillRect+0x1ec>
				break;
 80010be:	bf00      	nop
 80010c0:	e03d      	b.n	800113e <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80010c2:	ea05 0308 	and.w	r3, r5, r8
 80010c6:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <LCD_FillRect+0x2c8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <LCD_FillRect+0x244>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d012      	beq.n	80010fa <LCD_FillRect+0x266>
 80010d4:	e021      	b.n	800111a <LCD_FillRect+0x286>
			case LCD_PRES:
 80010d6:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	432b      	orrs	r3, r5
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3332      	adds	r3, #50	; 0x32
 80010e8:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	80ba      	strh	r2, [r7, #4]
 80010f0:	883a      	ldrh	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d8ef      	bhi.n	80010d6 <LCD_FillRect+0x242>
				break;
 80010f6:	e022      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80010f8:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	406b      	eors	r3, r5
 8001100:	b2da      	uxtb	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3332      	adds	r3, #50	; 0x32
 800110a:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	80ba      	strh	r2, [r7, #4]
 8001112:	883a      	ldrh	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8ef      	bhi.n	80010f8 <LCD_FillRect+0x264>
				break;
 8001118:	e011      	b.n	800113e <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 800111a:	43eb      	mvns	r3, r5
 800111c:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	402b      	ands	r3, r5
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	80ba      	strh	r2, [r7, #4]
 8001136:	883a      	ldrh	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f0      	bhi.n	800111e <LCD_FillRect+0x28a>
				break;
 800113c:	bf00      	nop
		}
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	08016978 	.word	0x08016978
 8001154:	08016980 	.word	0x08016980
 8001158:	200003a4 	.word	0x200003a4
 800115c:	20028a84 	.word	0x20028a84

08001160 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd01      	ble.n	800119e <LCD_Line+0x3e>
 800119a:	2301      	movs	r3, #1
 800119c:	e001      	b.n	80011a2 <LCD_Line+0x42>
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 80011a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd01      	ble.n	80011b0 <LCD_Line+0x50>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e001      	b.n	80011b4 <LCD_Line+0x54>
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 80011b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	88b9      	ldrh	r1, [r7, #4]
 80011c2:	883a      	ldrh	r2, [r7, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fdd3 	bl	8000d70 <LCD_VLine>
		return;
 80011ca:	e08d      	b.n	80012e8 <LCD_Line+0x188>
	}
	if (dY == 0) {
 80011cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	8879      	ldrh	r1, [r7, #2]
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd78 	bl	8000cd0 <LCD_HLine>
		return;
 80011e0:	e082      	b.n	80012e8 <LCD_Line+0x188>
	}

	dX *= dXsym;
 80011e2:	8aba      	ldrh	r2, [r7, #20]
 80011e4:	8a3b      	ldrh	r3, [r7, #16]
 80011e6:	fb12 f303 	smulbb	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	fb12 f303 	smulbb	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80011fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 8001202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 800120a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	429a      	cmp	r2, r3
 8001214:	db30      	blt.n	8001278 <LCD_Line+0x118>
		di = dY2 - dX;
 8001216:	897a      	ldrh	r2, [r7, #10]
 8001218:	8abb      	ldrh	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001220:	e023      	b.n	800126a <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fbab 	bl	8000988 <LCD_Pixel>
			X1 += dXsym;
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	8a3b      	ldrh	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 800123c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da05      	bge.n	8001250 <LCD_Line+0xf0>
				di += dY2;
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	897b      	ldrh	r3, [r7, #10]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	82fb      	strh	r3, [r7, #22]
 800124e:	e00c      	b.n	800126a <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001250:	897a      	ldrh	r2, [r7, #10]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29a      	uxth	r2, r3
 8001258:	8afb      	ldrh	r3, [r7, #22]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800126a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800126e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001272:	429a      	cmp	r2, r3
 8001274:	d1d5      	bne.n	8001222 <LCD_Line+0xc2>
 8001276:	e02f      	b.n	80012d8 <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001282:	e023      	b.n	80012cc <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb7a 	bl	8000988 <LCD_Pixel>
			Y1 += dYsym;
 8001294:	88ba      	ldrh	r2, [r7, #4]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4413      	add	r3, r2
 800129a:	b29b      	uxth	r3, r3
 800129c:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <LCD_Line+0x152>
				di += dX2;
 80012a6:	8afa      	ldrh	r2, [r7, #22]
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
 80012b0:	e00c      	b.n	80012cc <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 80012b2:	89ba      	ldrh	r2, [r7, #12]
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	4413      	add	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	8a3b      	ldrh	r3, [r7, #16]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80012cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1d5      	bne.n	8001284 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80012d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb50 	bl	8000988 <LCD_Pixel>
}
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4603      	mov	r3, r0
 80012f8:	81fb      	strh	r3, [r7, #14]
 80012fa:	460b      	mov	r3, r1
 80012fc:	81bb      	strh	r3, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	429a      	cmp	r2, r3
 800130a:	d304      	bcc.n	8001316 <LCD_PutChar+0x28>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	795b      	ldrb	r3, [r3, #5]
 8001310:	7afa      	ldrb	r2, [r7, #11]
 8001312:	429a      	cmp	r2, r3
 8001314:	d902      	bls.n	800131c <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7912      	ldrb	r2, [r2, #4]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	7892      	ldrb	r2, [r2, #2]
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	3307      	adds	r3, #7
 8001332:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d177      	bne.n	800142c <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d829      	bhi.n	8001398 <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001348:	e01e      	b.n	8001388 <LCD_PutChar+0x9a>
				pY = Y;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	617a      	str	r2, [r7, #20]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001358:	e010      	b.n	800137c <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800135a:	7efb      	ldrb	r3, [r7, #27]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001364:	8bfb      	ldrh	r3, [r7, #30]
 8001366:	8bba      	ldrh	r2, [r7, #28]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fb0c 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	76fb      	strb	r3, [r7, #27]
					pY++;
 8001376:	8bbb      	ldrh	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <LCD_PutChar+0x6c>
				}
				pX++;
 8001382:	8bfb      	ldrh	r3, [r7, #30]
 8001384:	3301      	adds	r3, #1
 8001386:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001388:	8bfa      	ldrh	r2, [r7, #30]
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	7809      	ldrb	r1, [r1, #0]
 8001390:	440b      	add	r3, r1
 8001392:	429a      	cmp	r2, r3
 8001394:	dbd9      	blt.n	800134a <LCD_PutChar+0x5c>
 8001396:	e0c0      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800139c:	e03e      	b.n	800141c <LCD_PutChar+0x12e>
				pY = Y;
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80013a2:	e031      	b.n	8001408 <LCD_PutChar+0x11a>
					bL = 8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	617a      	str	r2, [r7, #20]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d022      	beq.n	80013fe <LCD_PutChar+0x110>
						while (bL) {
 80013b8:	e01d      	b.n	80013f6 <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 80013ba:	7efb      	ldrb	r3, [r7, #27]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	8bba      	ldrh	r2, [r7, #28]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fadc 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80013d6:	7efb      	ldrb	r3, [r7, #27]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <LCD_PutChar+0xfc>
								pY++;
 80013dc:	8bbb      	ldrh	r3, [r7, #28]
 80013de:	3301      	adds	r3, #1
 80013e0:	83bb      	strh	r3, [r7, #28]
								bL--;
 80013e2:	7ebb      	ldrb	r3, [r7, #26]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	76bb      	strb	r3, [r7, #26]
 80013e8:	e005      	b.n	80013f6 <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80013ea:	7ebb      	ldrb	r3, [r7, #26]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8bbb      	ldrh	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	83bb      	strh	r3, [r7, #28]
								break;
 80013f4:	e008      	b.n	8001408 <LCD_PutChar+0x11a>
						while (bL) {
 80013f6:	7ebb      	ldrb	r3, [r7, #26]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1de      	bne.n	80013ba <LCD_PutChar+0xcc>
 80013fc:	e004      	b.n	8001408 <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29a      	uxth	r2, r3
 8001402:	8bbb      	ldrh	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001408:	8bba      	ldrh	r2, [r7, #28]
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	7849      	ldrb	r1, [r1, #1]
 8001410:	440b      	add	r3, r1
 8001412:	429a      	cmp	r2, r3
 8001414:	dbc6      	blt.n	80013a4 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	3301      	adds	r3, #1
 800141a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800141c:	8bfa      	ldrh	r2, [r7, #30]
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	7809      	ldrb	r1, [r1, #0]
 8001424:	440b      	add	r3, r1
 8001426:	429a      	cmp	r2, r3
 8001428:	dbb9      	blt.n	800139e <LCD_PutChar+0xb0>
 800142a:	e076      	b.n	800151a <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d829      	bhi.n	8001488 <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001438:	e01e      	b.n	8001478 <LCD_PutChar+0x18a>
				pX = X;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 8001448:	e010      	b.n	800146c <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	8bba      	ldrh	r2, [r7, #28]
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa94 	bl	8000988 <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	76fb      	strb	r3, [r7, #27]
					pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 800146c:	7efb      	ldrb	r3, [r7, #27]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1eb      	bne.n	800144a <LCD_PutChar+0x15c>
				}
				pY++;
 8001472:	8bbb      	ldrh	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001478:	8bba      	ldrh	r2, [r7, #28]
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	7849      	ldrb	r1, [r1, #1]
 8001480:	440b      	add	r3, r1
 8001482:	429a      	cmp	r2, r3
 8001484:	dbd9      	blt.n	800143a <LCD_PutChar+0x14c>
 8001486:	e048      	b.n	800151a <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 8001488:	89bb      	ldrh	r3, [r7, #12]
 800148a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800148c:	e03e      	b.n	800150c <LCD_PutChar+0x21e>
				pX = X;
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001492:	e031      	b.n	80014f8 <LCD_PutChar+0x20a>
					bL = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	617a      	str	r2, [r7, #20]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <LCD_PutChar+0x200>
						while (bL) {
 80014a8:	e01d      	b.n	80014e6 <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 80014aa:	7efb      	ldrb	r3, [r7, #27]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 80014b4:	8bfb      	ldrh	r3, [r7, #30]
 80014b6:	8bba      	ldrh	r2, [r7, #28]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa64 	bl	8000988 <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014c0:	7efb      	ldrb	r3, [r7, #27]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_PutChar+0x1ec>
								pX++;
 80014cc:	8bfb      	ldrh	r3, [r7, #30]
 80014ce:	3301      	adds	r3, #1
 80014d0:	83fb      	strh	r3, [r7, #30]
								bL--;
 80014d2:	7ebb      	ldrb	r3, [r7, #26]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	76bb      	strb	r3, [r7, #26]
 80014d8:	e005      	b.n	80014e6 <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	83fb      	strh	r3, [r7, #30]
								break;
 80014e4:	e008      	b.n	80014f8 <LCD_PutChar+0x20a>
						while (bL) {
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1de      	bne.n	80014aa <LCD_PutChar+0x1bc>
 80014ec:	e004      	b.n	80014f8 <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80014ee:	7ebb      	ldrb	r3, [r7, #26]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	4413      	add	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	7809      	ldrb	r1, [r1, #0]
 8001500:	440b      	add	r3, r1
 8001502:	429a      	cmp	r2, r3
 8001504:	dbc6      	blt.n	8001494 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 8001506:	8bbb      	ldrh	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800150c:	8bba      	ldrh	r2, [r7, #28]
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	7849      	ldrb	r1, [r1, #1]
 8001514:	440b      	add	r3, r1
 8001516:	429a      	cmp	r2, r3
 8001518:	dbb9      	blt.n	800148e <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	b2db      	uxtb	r3, r3
}
 8001522:	4618      	mov	r0, r3
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <LCD_PutStr+0x6c>)
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001554:	e011      	b.n	800157a <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	89b9      	ldrh	r1, [r7, #12]
 8001560:	8af8      	ldrh	r0, [r7, #22]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f7ff fec3 	bl	80012ee <LCD_PutChar>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8afb      	ldrh	r3, [r7, #22]
 800156e:	4413      	add	r3, r2
 8001570:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001572:	8afa      	ldrh	r2, [r7, #22]
 8001574:	8abb      	ldrh	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d804      	bhi.n	8001584 <LCD_PutStr+0x58>
	while (*str) {
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e9      	bne.n	8001556 <LCD_PutStr+0x2a>
 8001582:	e000      	b.n	8001586 <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001584:	bf00      	nop
	}

	return (pX - X);
 8001586:	8afa      	ldrh	r2, [r7, #22]
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b29b      	uxth	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20028a86 	.word	0x20028a86

0800159c <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	627a      	str	r2, [r7, #36]	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da05      	bge.n	80015da <LCD_PutInt+0x3e>
		neg = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	425b      	negs	r3, r3
 80015d8:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <LCD_PutInt+0xc8>)
 80015de:	fb83 1302 	smull	r1, r3, r3, r2
 80015e2:	1099      	asrs	r1, r3, #2
 80015e4:	17d3      	asrs	r3, r2, #31
 80015e6:	1ac9      	subs	r1, r1, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	1ad1      	subs	r1, r2, r3
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	6279      	str	r1, [r7, #36]	; 0x24
 80015fa:	3230      	adds	r2, #48	; 0x30
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <LCD_PutInt+0xc8>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1092      	asrs	r2, r2, #2
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e1      	bne.n	80015da <LCD_PutInt+0x3e>
	if (neg) {
 8001616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161a:	2b00      	cmp	r3, #0
 800161c:	d011      	beq.n	8001642 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	627a      	str	r2, [r7, #36]	; 0x24
 8001624:	222d      	movs	r2, #45	; 0x2d
 8001626:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 8001628:	e00b      	b.n	8001642 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	89b9      	ldrh	r1, [r7, #12]
 8001630:	8c38      	ldrh	r0, [r7, #32]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f7ff fe5b 	bl	80012ee <LCD_PutChar>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	8c3b      	ldrh	r3, [r7, #32]
 800163e:	4413      	add	r3, r2
 8001640:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3b01      	subs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ec      	bne.n	800162a <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	66666667 	.word	0x66666667

08001668 <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	460b      	mov	r3, r1
 8001678:	81bb      	strh	r3, [r7, #12]
 800167a:	4613      	mov	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da05      	bge.n	80016b0 <LCD_PutIntF+0x48>
		neg = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	425b      	negs	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <LCD_PutIntF+0x160>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1099      	asrs	r1, r3, #2
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1ac9      	subs	r1, r1, r3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad1      	subs	r1, r2, r3
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1c59      	adds	r1, r3, #1
 80016ce:	6279      	str	r1, [r7, #36]	; 0x24
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
		strLen++;
 80016d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <LCD_PutIntF+0x160>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1dc      	bne.n	80016b0 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80016f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d80f      	bhi.n	8001720 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 8001700:	e009      	b.n	8001716 <LCD_PutIntF+0xae>
			*pStr++ = '0';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	701a      	strb	r2, [r3, #0]
			strLen++;
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 8001716:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9f0      	bls.n	8001702 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03d      	beq.n	80017a4 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	627a      	str	r2, [r7, #36]	; 0x24
 800172e:	222d      	movs	r2, #45	; 0x2d
 8001730:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001732:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001736:	3301      	adds	r3, #1
 8001738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 800173c:	e032      	b.n	80017a4 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	89b9      	ldrh	r1, [r7, #12]
 8001744:	8c38      	ldrh	r0, [r7, #32]
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f7ff fdd1 	bl	80012ee <LCD_PutChar>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	8c3b      	ldrh	r3, [r7, #32]
 8001752:	4413      	add	r3, r2
 8001754:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <LCD_PutIntF+0x13c>
 800175c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001760:	3b01      	subs	r3, #1
 8001762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	429a      	cmp	r2, r3
 800176e:	d119      	bne.n	80017a4 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001772:	785b      	ldrb	r3, [r3, #1]
 8001774:	b29a      	uxth	r2, r3
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b02      	subs	r3, #2
 800177e:	b299      	uxth	r1, r3
 8001780:	8c3b      	ldrh	r3, [r7, #32]
 8001782:	3301      	adds	r3, #1
 8001784:	b29c      	uxth	r4, r3
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b29a      	uxth	r2, r3
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	8c38      	ldrh	r0, [r7, #32]
 8001798:	4622      	mov	r2, r4
 800179a:	f7ff fb39 	bl	8000e10 <LCD_Rect>
			pX += 3;
 800179e:	8c3b      	ldrh	r3, [r7, #32]
 80017a0:	3303      	adds	r3, #3
 80017a2:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3b01      	subs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1c5      	bne.n	800173e <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	66666667 	.word	0x66666667

080017cc <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	int i=X;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	617b      	str	r3, [r7, #20]
	int size=S;
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80017f6:	883b      	ldrh	r3, [r7, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <drawUpDownArrow+0x3a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d11f      	bne.n	8001846 <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	b29a      	uxth	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b298      	uxth	r0, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b29a      	uxth	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29b      	uxth	r3, r3
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b299      	uxth	r1, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	b29a      	uxth	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4413      	add	r3, r2
 800182c:	b29c      	uxth	r4, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29b      	uxth	r3, r3
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	4622      	mov	r2, r4
 8001840:	f7ff fb28 	bl	8000e94 <LCD_FillRect>
 8001844:	e01e      	b.n	8001884 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b29a      	uxth	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	b29b      	uxth	r3, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b298      	uxth	r0, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b29a      	uxth	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29b      	uxth	r3, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b299      	uxth	r1, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b29c      	uxth	r4, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	b29a      	uxth	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	4622      	mov	r2, r4
 8001880:	f7ff fb08 	bl	8000e94 <LCD_FillRect>
	}
	switch(direction)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b03      	cmp	r3, #3
 8001888:	f200 8234 	bhi.w	8001cf4 <drawUpDownArrow+0x528>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <drawUpDownArrow+0xc8>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080019bb 	.word	0x080019bb
 800189c:	08001ad1 	.word	0x08001ad1
 80018a0:	08001be3 	.word	0x08001be3
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e03d      	b.n	8001926 <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21c      	sxth	r4, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29a      	uxth	r2, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21b      	sxth	r3, r3
 800191a:	4622      	mov	r2, r4
 800191c:	f7ff fc20 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbbc      	blt.n	80018aa <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b218      	sxth	r0, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	b21c      	sxth	r4, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29a      	uxth	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29b      	uxth	r3, r3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff fbf6 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	b29b      	uxth	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b218      	sxth	r0, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	b29a      	uxth	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	b219      	sxth	r1, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4622      	mov	r2, r4
 80019b4:	f7ff fbd4 	bl	8001160 <LCD_Line>
		break;
 80019b8:	e19c      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e03d      	b.n	8001a3c <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b218      	sxth	r0, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b219      	sxth	r1, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4622      	mov	r2, r4
 8001a32:	f7ff fb95 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dbbc      	blt.n	80019c0 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b21c      	sxth	r4, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	f7ff fb6b 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b218      	sxth	r0, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	b21c      	sxth	r4, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fb49 	bl	8001160 <LCD_Line>
		break;
 8001ace:	e111      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	e03d      	b.n	8001b52 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b218      	sxth	r0, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b219      	sxth	r1, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4622      	mov	r2, r4
 8001b48:	f7ff fb0a 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbbc      	blt.n	8001ad6 <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b218      	sxth	r0, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b219      	sxth	r1, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	f7ff fae1 	bl	8001160 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b218      	sxth	r0, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b219      	sxth	r1, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	f7ff fac0 	bl	8001160 <LCD_Line>
		break;
 8001be0:	e088      	b.n	8001cf4 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e03d      	b.n	8001c64 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b219      	sxth	r1, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21c      	sxth	r4, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4622      	mov	r2, r4
 8001c5a:	f7ff fa81 	bl	8001160 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbbc      	blt.n	8001be8 <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	b219      	sxth	r1, r3
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f7ff fa58 	bl	8001160 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b218      	sxth	r0, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b219      	sxth	r1, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	f7ff fa37 	bl	8001160 <LCD_Line>
		break;
 8001cf2:	bf00      	nop
	}
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	; 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f007 f832 	bl	8008d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f9bd 	bl	8002084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 fff3 	bl	8002cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d0e:	f000 ffaf 	bl	8002c70 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d12:	f000 fa5f 	bl	80021d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d16:	f000 fb3b 	bl	8002390 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001d1a:	f000 fbb5 	bl	8002488 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001d1e:	f000 fc4b 	bl	80025b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d22:	f000 fc89 	bl	8002638 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d26:	f000 fcc7 	bl	80026b8 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001d2a:	f000 fd07 	bl	800273c <MX_I2C4_Init>
  MX_RTC_Init();
 8001d2e:	f000 fd45 	bl	80027bc <MX_RTC_Init>
  MX_SPI4_Init();
 8001d32:	f000 fd69 	bl	8002808 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d36:	f000 fda5 	bl	8002884 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001d3a:	f000 fde1 	bl	8002900 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fe57 	bl	80029f0 <MX_TIM5_Init>
  MX_UART4_Init();
 8001d42:	f000 fed7 	bl	8002af4 <MX_UART4_Init>
  MX_UART5_Init();
 8001d46:	f000 ff05 	bl	8002b54 <MX_UART5_Init>
  MX_UART7_Init();
 8001d4a:	f000 ff33 	bl	8002bb4 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4e:	f000 ff61 	bl	8002c14 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001d52:	f001 f97f 	bl	8003054 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8001d56:	220c      	movs	r2, #12
 8001d58:	2100      	movs	r1, #0
 8001d5a:	48a7      	ldr	r0, [pc, #668]	; (8001ff8 <main+0x2fc>)
 8001d5c:	f010 fa6d 	bl	801223a <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	49a5      	ldr	r1, [pc, #660]	; (8001ffc <main+0x300>)
 8001d66:	48a6      	ldr	r0, [pc, #664]	; (8002000 <main+0x304>)
 8001d68:	f007 f9d4 	bl	8009114 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	49a4      	ldr	r1, [pc, #656]	; (8002004 <main+0x308>)
 8001d72:	48a5      	ldr	r0, [pc, #660]	; (8002008 <main+0x30c>)
 8001d74:	f007 f9ce 	bl	8009114 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	49a3      	ldr	r1, [pc, #652]	; (800200c <main+0x310>)
 8001d7e:	48a4      	ldr	r0, [pc, #656]	; (8002010 <main+0x314>)
 8001d80:	f007 f9c8 	bl	8009114 <HAL_ADC_Start_DMA>
   int x=1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]



  configureLEDDriver();
 8001d88:	f001 fc08 	bl	800359c <configureLEDDriver>
    setErrorLED(4,OFF);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2004      	movs	r0, #4
 8001d90:	f001 fc90 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d98:	f007 f814 	bl	8008dc4 <HAL_Delay>
    setErrorLED(7,OFF);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2007      	movs	r0, #7
 8001da0:	f001 fc88 	bl	80036b4 <setErrorLED>
    setErrorLED(8,ON);
 8001da4:	2101      	movs	r1, #1
 8001da6:	2008      	movs	r0, #8
 8001da8:	f001 fc84 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db0:	f007 f808 	bl	8008dc4 <HAL_Delay>
    setErrorLED(8,OFF);
 8001db4:	2100      	movs	r1, #0
 8001db6:	2008      	movs	r0, #8
 8001db8:	f001 fc7c 	bl	80036b4 <setErrorLED>
    setErrorLED(9,ON);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	2009      	movs	r0, #9
 8001dc0:	f001 fc78 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc8:	f006 fffc 	bl	8008dc4 <HAL_Delay>
    setErrorLED(8,ON);
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2008      	movs	r0, #8
 8001dd0:	f001 fc70 	bl	80036b4 <setErrorLED>
    setErrorLED(9,ON);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2009      	movs	r0, #9
 8001dd8:	f001 fc6c 	bl	80036b4 <setErrorLED>
    HAL_Delay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f006 fff0 	bl	8008dc4 <HAL_Delay>
    setErrorLED(9,OFF);
 8001de4:	2100      	movs	r1, #0
 8001de6:	2009      	movs	r0, #9
 8001de8:	f001 fc64 	bl	80036b4 <setErrorLED>

    BTN0_ON;
 8001dec:	2201      	movs	r2, #1
 8001dee:	2104      	movs	r1, #4
 8001df0:	4888      	ldr	r0, [pc, #544]	; (8002014 <main+0x318>)
 8001df2:	f008 fc61 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001df6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dfa:	f006 ffe3 	bl	8008dc4 <HAL_Delay>
    BTN1_ON;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2108      	movs	r1, #8
 8001e02:	4884      	ldr	r0, [pc, #528]	; (8002014 <main+0x318>)
 8001e04:	f008 fc58 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e0c:	f006 ffda 	bl	8008dc4 <HAL_Delay>
    BTN2_ON;
 8001e10:	2201      	movs	r2, #1
 8001e12:	2110      	movs	r1, #16
 8001e14:	487f      	ldr	r0, [pc, #508]	; (8002014 <main+0x318>)
 8001e16:	f008 fc4f 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e1e:	f006 ffd1 	bl	8008dc4 <HAL_Delay>
    BTN3_ON;
 8001e22:	2201      	movs	r2, #1
 8001e24:	2120      	movs	r1, #32
 8001e26:	487b      	ldr	r0, [pc, #492]	; (8002014 <main+0x318>)
 8001e28:	f008 fc46 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e30:	f006 ffc8 	bl	8008dc4 <HAL_Delay>
    BTN4_ON;
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3a:	4876      	ldr	r0, [pc, #472]	; (8002014 <main+0x318>)
 8001e3c:	f008 fc3c 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e44:	f006 ffbe 	bl	8008dc4 <HAL_Delay>
    BTN5_ON;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4e:	4871      	ldr	r0, [pc, #452]	; (8002014 <main+0x318>)
 8001e50:	f008 fc32 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e58:	f006 ffb4 	bl	8008dc4 <HAL_Delay>
    EDL_SW_ON;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e62:	486d      	ldr	r0, [pc, #436]	; (8002018 <main+0x31c>)
 8001e64:	f008 fc28 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e6c:	f006 ffaa 	bl	8008dc4 <HAL_Delay>
    EX_SW_ON;
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e76:	4868      	ldr	r0, [pc, #416]	; (8002018 <main+0x31c>)
 8001e78:	f008 fc1e 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e80:	f006 ffa0 	bl	8008dc4 <HAL_Delay>
    BTN0_OFF;
 8001e84:	2200      	movs	r2, #0
 8001e86:	2104      	movs	r1, #4
 8001e88:	4862      	ldr	r0, [pc, #392]	; (8002014 <main+0x318>)
 8001e8a:	f008 fc15 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001e8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e92:	f006 ff97 	bl	8008dc4 <HAL_Delay>
    BTN1_OFF;
 8001e96:	2200      	movs	r2, #0
 8001e98:	2108      	movs	r1, #8
 8001e9a:	485e      	ldr	r0, [pc, #376]	; (8002014 <main+0x318>)
 8001e9c:	f008 fc0c 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ea0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ea4:	f006 ff8e 	bl	8008dc4 <HAL_Delay>
    BTN2_OFF;
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	4859      	ldr	r0, [pc, #356]	; (8002014 <main+0x318>)
 8001eae:	f008 fc03 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001eb6:	f006 ff85 	bl	8008dc4 <HAL_Delay>
    BTN3_OFF;
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4855      	ldr	r0, [pc, #340]	; (8002014 <main+0x318>)
 8001ec0:	f008 fbfa 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ec4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ec8:	f006 ff7c 	bl	8008dc4 <HAL_Delay>
    BTN4_OFF;
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	4850      	ldr	r0, [pc, #320]	; (8002014 <main+0x318>)
 8001ed4:	f008 fbf0 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001ed8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001edc:	f006 ff72 	bl	8008dc4 <HAL_Delay>
    BTN5_OFF;
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee6:	484b      	ldr	r0, [pc, #300]	; (8002014 <main+0x318>)
 8001ee8:	f008 fbe6 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001eec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ef0:	f006 ff68 	bl	8008dc4 <HAL_Delay>
    EDL_SW_OFF;
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efa:	4847      	ldr	r0, [pc, #284]	; (8002018 <main+0x31c>)
 8001efc:	f008 fbdc 	bl	800a6b8 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8001f00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f04:	f006 ff5e 	bl	8008dc4 <HAL_Delay>
    EX_SW_OFF;
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f0e:	4842      	ldr	r0, [pc, #264]	; (8002018 <main+0x31c>)
 8001f10:	f008 fbd2 	bl	800a6b8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f14:	f00d fa48 	bl	800f3a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001f18:	4a40      	ldr	r2, [pc, #256]	; (800201c <main+0x320>)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4840      	ldr	r0, [pc, #256]	; (8002020 <main+0x324>)
 8001f1e:	f00d faad 	bl	800f47c <osThreadNew>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <main+0x328>)
 8001f26:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001f28:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <main+0x32c>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	483f      	ldr	r0, [pc, #252]	; (800202c <main+0x330>)
 8001f2e:	f00d faa5 	bl	800f47c <osThreadNew>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <main+0x334>)
 8001f36:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001f38:	4a3e      	ldr	r2, [pc, #248]	; (8002034 <main+0x338>)
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	483e      	ldr	r0, [pc, #248]	; (8002038 <main+0x33c>)
 8001f3e:	f00d fa9d 	bl	800f47c <osThreadNew>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <main+0x340>)
 8001f46:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001f48:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <main+0x344>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	483d      	ldr	r0, [pc, #244]	; (8002044 <main+0x348>)
 8001f4e:	f00d fa95 	bl	800f47c <osThreadNew>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <main+0x34c>)
 8001f56:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001f58:	4a3c      	ldr	r2, [pc, #240]	; (800204c <main+0x350>)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	483c      	ldr	r0, [pc, #240]	; (8002050 <main+0x354>)
 8001f5e:	f00d fa8d 	bl	800f47c <osThreadNew>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <main+0x358>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 8001f68:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <main+0x35c>)
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	483b      	ldr	r0, [pc, #236]	; (800205c <main+0x360>)
 8001f6e:	f00d fa85 	bl	800f47c <osThreadNew>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <main+0x364>)
 8001f76:	601a      	str	r2, [r3, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <main+0x368>)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	483a      	ldr	r0, [pc, #232]	; (8002068 <main+0x36c>)
 8001f7e:	f00d fa7d 	bl	800f47c <osThreadNew>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <main+0x370>)
 8001f86:	601a      	str	r2, [r3, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 8001f88:	4a39      	ldr	r2, [pc, #228]	; (8002070 <main+0x374>)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4839      	ldr	r0, [pc, #228]	; (8002074 <main+0x378>)
 8001f8e:	f00d fa75 	bl	800f47c <osThreadNew>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b38      	ldr	r3, [pc, #224]	; (8002078 <main+0x37c>)
 8001f96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f98:	f00d fa3a 	bl	800f410 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8001f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa0:	f006 ff10 	bl	8008dc4 <HAL_Delay>
	  if (!x) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d112      	bne.n	8001fd0 <main+0x2d4>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb0:	4832      	ldr	r0, [pc, #200]	; (800207c <main+0x380>)
 8001fb2:	f008 fb81 	bl	800a6b8 <HAL_GPIO_WritePin>
		  x=1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2110      	movs	r1, #16
 8001fbe:	4830      	ldr	r0, [pc, #192]	; (8002080 <main+0x384>)
 8001fc0:	f008 fb7a 	bl	800a6b8 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	482d      	ldr	r0, [pc, #180]	; (8002080 <main+0x384>)
 8001fca:	f008 fb75 	bl	800a6b8 <HAL_GPIO_WritePin>
 8001fce:	e7e5      	b.n	8001f9c <main+0x2a0>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd6:	4829      	ldr	r0, [pc, #164]	; (800207c <main+0x380>)
 8001fd8:	f008 fb6e 	bl	800a6b8 <HAL_GPIO_WritePin>
		  x=0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	4826      	ldr	r0, [pc, #152]	; (8002080 <main+0x384>)
 8001fe6:	f008 fb67 	bl	800a6b8 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2110      	movs	r1, #16
 8001fee:	4824      	ldr	r0, [pc, #144]	; (8002080 <main+0x384>)
 8001ff0:	f008 fb62 	bl	800a6b8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001ff4:	e7d2      	b.n	8001f9c <main+0x2a0>
 8001ff6:	bf00      	nop
 8001ff8:	2002e210 	.word	0x2002e210
 8001ffc:	20029244 	.word	0x20029244
 8002000:	2002b9d8 	.word	0x2002b9d8
 8002004:	2002e2a4 	.word	0x2002e2a4
 8002008:	20028cbc 	.word	0x20028cbc
 800200c:	2002bb00 	.word	0x2002bb00
 8002010:	2002ba24 	.word	0x2002ba24
 8002014:	40021400 	.word	0x40021400
 8002018:	40020400 	.word	0x40020400
 800201c:	08016988 	.word	0x08016988
 8002020:	08004175 	.word	0x08004175
 8002024:	2002e2a0 	.word	0x2002e2a0
 8002028:	080169ac 	.word	0x080169ac
 800202c:	08004195 	.word	0x08004195
 8002030:	20030a78 	.word	0x20030a78
 8002034:	080169d0 	.word	0x080169d0
 8002038:	08004215 	.word	0x08004215
 800203c:	20030a74 	.word	0x20030a74
 8002040:	080169f4 	.word	0x080169f4
 8002044:	080042fd 	.word	0x080042fd
 8002048:	2002ba20 	.word	0x2002ba20
 800204c:	08016a18 	.word	0x08016a18
 8002050:	08004429 	.word	0x08004429
 8002054:	2002bafc 	.word	0x2002bafc
 8002058:	08016a3c 	.word	0x08016a3c
 800205c:	080045ad 	.word	0x080045ad
 8002060:	20028cac 	.word	0x20028cac
 8002064:	08016a60 	.word	0x08016a60
 8002068:	080045f5 	.word	0x080045f5
 800206c:	2002e21c 	.word	0x2002e21c
 8002070:	08016a84 	.word	0x08016a84
 8002074:	08004805 	.word	0x08004805
 8002078:	2002b954 	.word	0x2002b954
 800207c:	40022000 	.word	0x40022000
 8002080:	40021000 	.word	0x40021000

08002084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0b8      	sub	sp, #224	; 0xe0
 8002088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800208e:	2234      	movs	r2, #52	; 0x34
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f010 f8d1 	bl	801223a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	2290      	movs	r2, #144	; 0x90
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f010 f8c2 	bl	801223a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020b6:	f009 fc27 	bl	800b908 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <SystemClock_Config+0x144>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a42      	ldr	r2, [pc, #264]	; (80021c8 <SystemClock_Config+0x144>)
 80020c0:	f023 0318 	bic.w	r3, r3, #24
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <SystemClock_Config+0x144>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <SystemClock_Config+0x144>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <SystemClock_Config+0x144>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <SystemClock_Config+0x148>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020e6:	4a39      	ldr	r2, [pc, #228]	; (80021cc <SystemClock_Config+0x148>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <SystemClock_Config+0x148>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80020fa:	2305      	movs	r3, #5
 80020fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002108:	2301      	movs	r3, #1
 800210a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002114:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 800211c:	230f      	movs	r3, #15
 800211e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002122:	2390      	movs	r3, #144	; 0x90
 8002124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800212e:	2305      	movs	r3, #5
 8002130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002134:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002138:	4618      	mov	r0, r3
 800213a:	f009 fbf5 	bl	800b928 <HAL_RCC_OscConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002144:	f002 fd7a 	bl	8004c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002148:	230f      	movs	r3, #15
 800214a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800215a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800215e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800216a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800216e:	2103      	movs	r1, #3
 8002170:	4618      	mov	r0, r3
 8002172:	f009 fe87 	bl	800be84 <HAL_RCC_ClockConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800217c:	f002 fd5e 	bl	8004c3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <SystemClock_Config+0x14c>)
 8002182:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800218a:	2300      	movs	r3, #0
 800218c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800218e:	2300      	movs	r3, #0
 8002190:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002192:	2300      	movs	r3, #0
 8002194:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002196:	2300      	movs	r3, #0
 8002198:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800219a:	2300      	movs	r3, #0
 800219c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800219e:	2300      	movs	r3, #0
 80021a0:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00a f86b 	bl	800c28c <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80021bc:	f002 fd3e 	bl	8004c3c <Error_Handler>
  }
}
 80021c0:	bf00      	nop
 80021c2:	37e0      	adds	r7, #224	; 0xe0
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	0023d620 	.word	0x0023d620

080021d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <MX_ADC1_Init+0x1b4>)
 80021ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021ec:	4b65      	ldr	r3, [pc, #404]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002200:	4b60      	ldr	r3, [pc, #384]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002202:	2201      	movs	r2, #1
 8002204:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002210:	2200      	movs	r2, #0
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002216:	4a5d      	ldr	r2, [pc, #372]	; (800238c <MX_ADC1_Init+0x1b8>)
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8002220:	4b58      	ldr	r3, [pc, #352]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002222:	220b      	movs	r2, #11
 8002224:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002226:	4b57      	ldr	r3, [pc, #348]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800222e:	4b55      	ldr	r3, [pc, #340]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002230:	2201      	movs	r2, #1
 8002232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002234:	4853      	ldr	r0, [pc, #332]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002236:	f006 fde7 	bl	8008e08 <HAL_ADC_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002240:	f002 fcfc 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002244:	2303      	movs	r3, #3
 8002246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002248:	2301      	movs	r3, #1
 800224a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800224c:	2307      	movs	r3, #7
 800224e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	4619      	mov	r1, r3
 8002254:	484b      	ldr	r0, [pc, #300]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002256:	f007 f8b3 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002260:	f002 fcec 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002264:	2304      	movs	r3, #4
 8002266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002268:	2302      	movs	r3, #2
 800226a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	4619      	mov	r1, r3
 8002270:	4844      	ldr	r0, [pc, #272]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002272:	f007 f8a5 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800227c:	f002 fcde 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002280:	2305      	movs	r3, #5
 8002282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002284:	2303      	movs	r3, #3
 8002286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	483d      	ldr	r0, [pc, #244]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800228e:	f007 f897 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002298:	f002 fcd0 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800229c:	2306      	movs	r3, #6
 800229e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022a0:	2304      	movs	r3, #4
 80022a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a4:	463b      	mov	r3, r7
 80022a6:	4619      	mov	r1, r3
 80022a8:	4836      	ldr	r0, [pc, #216]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022aa:	f007 f889 	bl	80093c0 <HAL_ADC_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80022b4:	f002 fcc2 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80022b8:	2307      	movs	r3, #7
 80022ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80022bc:	2305      	movs	r3, #5
 80022be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4619      	mov	r1, r3
 80022c4:	482f      	ldr	r0, [pc, #188]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022c6:	f007 f87b 	bl	80093c0 <HAL_ADC_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80022d0:	f002 fcb4 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022d4:	2308      	movs	r3, #8
 80022d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80022d8:	2306      	movs	r3, #6
 80022da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022dc:	463b      	mov	r3, r7
 80022de:	4619      	mov	r1, r3
 80022e0:	4828      	ldr	r0, [pc, #160]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022e2:	f007 f86d 	bl	80093c0 <HAL_ADC_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80022ec:	f002 fca6 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022f0:	2309      	movs	r3, #9
 80022f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80022f4:	2307      	movs	r3, #7
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4821      	ldr	r0, [pc, #132]	; (8002384 <MX_ADC1_Init+0x1b0>)
 80022fe:	f007 f85f 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002308:	f002 fc98 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800230c:	230a      	movs	r3, #10
 800230e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002310:	2308      	movs	r3, #8
 8002312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	481a      	ldr	r0, [pc, #104]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800231a:	f007 f851 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002324:	f002 fc8a 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002328:	230b      	movs	r3, #11
 800232a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800232c:	2309      	movs	r3, #9
 800232e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	4813      	ldr	r0, [pc, #76]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002336:	f007 f843 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002340:	f002 fc7c 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002344:	230c      	movs	r3, #12
 8002346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002348:	230a      	movs	r3, #10
 800234a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	480c      	ldr	r0, [pc, #48]	; (8002384 <MX_ADC1_Init+0x1b0>)
 8002352:	f007 f835 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800235c:	f002 fc6e 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002360:	230d      	movs	r3, #13
 8002362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002364:	230b      	movs	r3, #11
 8002366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_ADC1_Init+0x1b0>)
 800236e:	f007 f827 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002378:	f002 fc60 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2002b9d8 	.word	0x2002b9d8
 8002388:	40012000 	.word	0x40012000
 800238c:	0f000001 	.word	0x0f000001

08002390 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002396:	463b      	mov	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <MX_ADC2_Init+0xec>)
 80023a4:	4a36      	ldr	r2, [pc, #216]	; (8002480 <MX_ADC2_Init+0xf0>)
 80023a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <MX_ADC2_Init+0xec>)
 80023aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80023b0:	4b32      	ldr	r3, [pc, #200]	; (800247c <MX_ADC2_Init+0xec>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <MX_ADC2_Init+0xec>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <MX_ADC2_Init+0xec>)
 80023be:	2201      	movs	r2, #1
 80023c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023c2:	4b2e      	ldr	r3, [pc, #184]	; (800247c <MX_ADC2_Init+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <MX_ADC2_Init+0xec>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <MX_ADC2_Init+0xec>)
 80023d2:	4a2c      	ldr	r2, [pc, #176]	; (8002484 <MX_ADC2_Init+0xf4>)
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <MX_ADC2_Init+0xec>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <MX_ADC2_Init+0xec>)
 80023de:	2204      	movs	r2, #4
 80023e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <MX_ADC2_Init+0xec>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <MX_ADC2_Init+0xec>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023f0:	4822      	ldr	r0, [pc, #136]	; (800247c <MX_ADC2_Init+0xec>)
 80023f2:	f006 fd09 	bl	8008e08 <HAL_ADC_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80023fc:	f002 fc1e 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002400:	2300      	movs	r3, #0
 8002402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002404:	2301      	movs	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002408:	2307      	movs	r3, #7
 800240a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	481a      	ldr	r0, [pc, #104]	; (800247c <MX_ADC2_Init+0xec>)
 8002412:	f006 ffd5 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800241c:	f002 fc0e 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002420:	2301      	movs	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002424:	2302      	movs	r3, #2
 8002426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002428:	463b      	mov	r3, r7
 800242a:	4619      	mov	r1, r3
 800242c:	4813      	ldr	r0, [pc, #76]	; (800247c <MX_ADC2_Init+0xec>)
 800242e:	f006 ffc7 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002438:	f002 fc00 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800243c:	230e      	movs	r3, #14
 800243e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002440:	2303      	movs	r3, #3
 8002442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <MX_ADC2_Init+0xec>)
 800244a:	f006 ffb9 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002454:	f002 fbf2 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002458:	230f      	movs	r3, #15
 800245a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800245c:	2304      	movs	r3, #4
 800245e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002460:	463b      	mov	r3, r7
 8002462:	4619      	mov	r1, r3
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <MX_ADC2_Init+0xec>)
 8002466:	f006 ffab 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002470:	f002 fbe4 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20028cbc 	.word	0x20028cbc
 8002480:	40012100 	.word	0x40012100
 8002484:	0f000001 	.word	0x0f000001

08002488 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800248e:	463b      	mov	r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <MX_ADC3_Init+0x124>)
 800249c:	4a44      	ldr	r2, [pc, #272]	; (80025b0 <MX_ADC3_Init+0x128>)
 800249e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <MX_ADC3_Init+0x124>)
 80024a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024a6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80024a8:	4b40      	ldr	r3, [pc, #256]	; (80025ac <MX_ADC3_Init+0x124>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <MX_ADC3_Init+0x124>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <MX_ADC3_Init+0x124>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80024ba:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <MX_ADC3_Init+0x124>)
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <MX_ADC3_Init+0x124>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024c8:	4b38      	ldr	r3, [pc, #224]	; (80025ac <MX_ADC3_Init+0x124>)
 80024ca:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <MX_ADC3_Init+0x12c>)
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <MX_ADC3_Init+0x124>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <MX_ADC3_Init+0x124>)
 80024d6:	2206      	movs	r2, #6
 80024d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <MX_ADC3_Init+0x124>)
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024e2:	4b32      	ldr	r3, [pc, #200]	; (80025ac <MX_ADC3_Init+0x124>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80024e8:	4830      	ldr	r0, [pc, #192]	; (80025ac <MX_ADC3_Init+0x124>)
 80024ea:	f006 fc8d 	bl	8008e08 <HAL_ADC_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80024f4:	f002 fba2 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024fc:	2301      	movs	r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002500:	2307      	movs	r3, #7
 8002502:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4828      	ldr	r0, [pc, #160]	; (80025ac <MX_ADC3_Init+0x124>)
 800250a:	f006 ff59 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002514:	f002 fb92 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002518:	2304      	movs	r3, #4
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800251c:	2302      	movs	r3, #2
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	4821      	ldr	r0, [pc, #132]	; (80025ac <MX_ADC3_Init+0x124>)
 8002526:	f006 ff4b 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8002530:	f002 fb84 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002534:	2305      	movs	r3, #5
 8002536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002538:	2303      	movs	r3, #3
 800253a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	481a      	ldr	r0, [pc, #104]	; (80025ac <MX_ADC3_Init+0x124>)
 8002542:	f006 ff3d 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 800254c:	f002 fb76 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002550:	2306      	movs	r3, #6
 8002552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002554:	2304      	movs	r3, #4
 8002556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	4813      	ldr	r0, [pc, #76]	; (80025ac <MX_ADC3_Init+0x124>)
 800255e:	f006 ff2f 	bl	80093c0 <HAL_ADC_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8002568:	f002 fb68 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800256c:	2307      	movs	r3, #7
 800256e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002570:	2305      	movs	r3, #5
 8002572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002574:	463b      	mov	r3, r7
 8002576:	4619      	mov	r1, r3
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <MX_ADC3_Init+0x124>)
 800257a:	f006 ff21 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002584:	f002 fb5a 	bl	8004c3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002588:	2308      	movs	r3, #8
 800258a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800258c:	2306      	movs	r3, #6
 800258e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_ADC3_Init+0x124>)
 8002596:	f006 ff13 	bl	80093c0 <HAL_ADC_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80025a0:	f002 fb4c 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2002ba24 	.word	0x2002ba24
 80025b0:	40012200 	.word	0x40012200
 80025b4:	0f000001 	.word	0x0f000001

080025b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <MX_I2C1_Init+0x74>)
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <MX_I2C1_Init+0x78>)
 80025c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <MX_I2C1_Init+0x74>)
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <MX_I2C1_Init+0x7c>)
 80025c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <MX_I2C1_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <MX_I2C1_Init+0x74>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <MX_I2C1_Init+0x74>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_I2C1_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_I2C1_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_I2C1_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_I2C1_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f2:	480e      	ldr	r0, [pc, #56]	; (800262c <MX_I2C1_Init+0x74>)
 80025f4:	f008 f8b8 	bl	800a768 <HAL_I2C_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025fe:	f002 fb1d 	bl	8004c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002602:	2100      	movs	r1, #0
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <MX_I2C1_Init+0x74>)
 8002606:	f008 ff7f 	bl	800b508 <HAL_I2CEx_ConfigAnalogFilter>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002610:	f002 fb14 	bl	8004c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002614:	2100      	movs	r1, #0
 8002616:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_I2C1_Init+0x74>)
 8002618:	f008 ffc1 	bl	800b59e <HAL_I2CEx_ConfigDigitalFilter>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002622:	f002 fb0b 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20028d04 	.word	0x20028d04
 8002630:	40005400 	.word	0x40005400
 8002634:	007074af 	.word	0x007074af

08002638 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_I2C2_Init+0x74>)
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <MX_I2C2_Init+0x78>)
 8002640:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_I2C2_Init+0x74>)
 8002644:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <MX_I2C2_Init+0x7c>)
 8002646:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_I2C2_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <MX_I2C2_Init+0x74>)
 8002650:	2201      	movs	r2, #1
 8002652:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_I2C2_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <MX_I2C2_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <MX_I2C2_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <MX_I2C2_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <MX_I2C2_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002672:	480e      	ldr	r0, [pc, #56]	; (80026ac <MX_I2C2_Init+0x74>)
 8002674:	f008 f878 	bl	800a768 <HAL_I2C_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800267e:	f002 fadd 	bl	8004c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002682:	2100      	movs	r1, #0
 8002684:	4809      	ldr	r0, [pc, #36]	; (80026ac <MX_I2C2_Init+0x74>)
 8002686:	f008 ff3f 	bl	800b508 <HAL_I2CEx_ConfigAnalogFilter>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002690:	f002 fad4 	bl	8004c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002694:	2100      	movs	r1, #0
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_I2C2_Init+0x74>)
 8002698:	f008 ff81 	bl	800b59e <HAL_I2CEx_ConfigDigitalFilter>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80026a2:	f002 facb 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20029154 	.word	0x20029154
 80026b0:	40005800 	.word	0x40005800
 80026b4:	007074af 	.word	0x007074af

080026b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_I2C3_Init+0x78>)
 80026be:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <MX_I2C3_Init+0x7c>)
 80026c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_I2C3_Init+0x78>)
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <MX_I2C3_Init+0x80>)
 80026c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_I2C3_Init+0x78>)
 80026ca:	2298      	movs	r2, #152	; 0x98
 80026cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <MX_I2C3_Init+0x78>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <MX_I2C3_Init+0x78>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_I2C3_Init+0x78>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_I2C3_Init+0x78>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <MX_I2C3_Init+0x78>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_I2C3_Init+0x78>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026f2:	480f      	ldr	r0, [pc, #60]	; (8002730 <MX_I2C3_Init+0x78>)
 80026f4:	f008 f838 	bl	800a768 <HAL_I2C_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026fe:	f002 fa9d 	bl	8004c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002702:	2100      	movs	r1, #0
 8002704:	480a      	ldr	r0, [pc, #40]	; (8002730 <MX_I2C3_Init+0x78>)
 8002706:	f008 feff 	bl	800b508 <HAL_I2CEx_ConfigAnalogFilter>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002710:	f002 fa94 	bl	8004c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002714:	2100      	movs	r1, #0
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_I2C3_Init+0x78>)
 8002718:	f008 ff41 	bl	800b59e <HAL_I2CEx_ConfigDigitalFilter>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002722:	f002 fa8b 	bl	8004c3c <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002726:	2004      	movs	r0, #4
 8002728:	f008 ff86 	bl	800b638 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20028af0 	.word	0x20028af0
 8002734:	40005c00 	.word	0x40005c00
 8002738:	100029fe 	.word	0x100029fe

0800273c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002742:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <MX_I2C4_Init+0x78>)
 8002744:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <MX_I2C4_Init+0x7c>)
 800274a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <MX_I2C4_Init+0x74>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002754:	2201      	movs	r2, #1
 8002756:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_I2C4_Init+0x74>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_I2C4_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002776:	480e      	ldr	r0, [pc, #56]	; (80027b0 <MX_I2C4_Init+0x74>)
 8002778:	f007 fff6 	bl	800a768 <HAL_I2C_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002782:	f002 fa5b 	bl	8004c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002786:	2100      	movs	r1, #0
 8002788:	4809      	ldr	r0, [pc, #36]	; (80027b0 <MX_I2C4_Init+0x74>)
 800278a:	f008 febd 	bl	800b508 <HAL_I2CEx_ConfigAnalogFilter>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002794:	f002 fa52 	bl	8004c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002798:	2100      	movs	r1, #0
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_I2C4_Init+0x74>)
 800279c:	f008 feff 	bl	800b59e <HAL_I2CEx_ConfigDigitalFilter>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80027a6:	f002 fa49 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20028b3c 	.word	0x20028b3c
 80027b4:	40006000 	.word	0x40006000
 80027b8:	007074af 	.word	0x007074af

080027bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_RTC_Init+0x44>)
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <MX_RTC_Init+0x48>)
 80027c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_RTC_Init+0x44>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <MX_RTC_Init+0x44>)
 80027ce:	227f      	movs	r2, #127	; 0x7f
 80027d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_RTC_Init+0x44>)
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <MX_RTC_Init+0x44>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <MX_RTC_Init+0x44>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_RTC_Init+0x44>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_RTC_Init+0x44>)
 80027ec:	f00a f974 	bl	800cad8 <HAL_RTC_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80027f6:	f002 fa21 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2002badc 	.word	0x2002badc
 8002804:	40002800 	.word	0x40002800

08002808 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <MX_SPI4_Init+0x74>)
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <MX_SPI4_Init+0x78>)
 8002810:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <MX_SPI4_Init+0x74>)
 8002814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002818:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <MX_SPI4_Init+0x74>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <MX_SPI4_Init+0x74>)
 8002822:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002826:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <MX_SPI4_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <MX_SPI4_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_SPI4_Init+0x74>)
 8002836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_SPI4_Init+0x74>)
 800283e:	2210      	movs	r2, #16
 8002840:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_SPI4_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_SPI4_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <MX_SPI4_Init+0x74>)
 8002850:	2200      	movs	r2, #0
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_SPI4_Init+0x74>)
 8002856:	2207      	movs	r2, #7
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <MX_SPI4_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_SPI4_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <MX_SPI4_Init+0x74>)
 8002868:	f00a f9de 	bl	800cc28 <HAL_SPI_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002872:	f002 f9e3 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20028a8c 	.word	0x20028a8c
 8002880:	40013400 	.word	0x40013400

08002884 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_SPI5_Init+0x74>)
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <MX_SPI5_Init+0x78>)
 800288c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_SPI5_Init+0x74>)
 8002890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002894:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_SPI5_Init+0x74>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_SPI5_Init+0x74>)
 800289e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028a2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80028b6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028ba:	2218      	movs	r2, #24
 80028bc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028d2:	2207      	movs	r2, #7
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_SPI5_Init+0x74>)
 80028e4:	f00a f9a0 	bl	800cc28 <HAL_SPI_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80028ee:	f002 f9a5 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20028c08 	.word	0x20028c08
 80028fc:	40015000 	.word	0x40015000

08002900 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	; 0x38
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002920:	463b      	mov	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002934:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <MX_TIM4_Init+0xec>)
 8002936:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <MX_TIM4_Init+0xe8>)
 800293a:	2200      	movs	r2, #0
 800293c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800294a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <MX_TIM4_Init+0xe8>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002958:	4823      	ldr	r0, [pc, #140]	; (80029e8 <MX_TIM4_Init+0xe8>)
 800295a:	f00a fd99 	bl	800d490 <HAL_TIM_Base_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002964:	f002 f96a 	bl	8004c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800296e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002972:	4619      	mov	r1, r3
 8002974:	481c      	ldr	r0, [pc, #112]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002976:	f00b f84d 	bl	800da14 <HAL_TIM_ConfigClockSource>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002980:	f002 f95c 	bl	8004c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002984:	4818      	ldr	r0, [pc, #96]	; (80029e8 <MX_TIM4_Init+0xe8>)
 8002986:	f00a fdd9 	bl	800d53c <HAL_TIM_PWM_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002990:	f002 f954 	bl	8004c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4811      	ldr	r0, [pc, #68]	; (80029e8 <MX_TIM4_Init+0xe8>)
 80029a4:	f00b fcb0 	bl	800e308 <HAL_TIMEx_MasterConfigSynchronization>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80029ae:	f002 f945 	bl	8004c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b2:	2360      	movs	r3, #96	; 0x60
 80029b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c2:	463b      	mov	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4807      	ldr	r0, [pc, #28]	; (80029e8 <MX_TIM4_Init+0xe8>)
 80029ca:	f00a ff0b 	bl	800d7e4 <HAL_TIM_PWM_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80029d4:	f002 f932 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029d8:	4803      	ldr	r0, [pc, #12]	; (80029e8 <MX_TIM4_Init+0xe8>)
 80029da:	f005 fb01 	bl	8007fe0 <HAL_TIM_MspPostInit>

}
 80029de:	bf00      	nop
 80029e0:	3738      	adds	r7, #56	; 0x38
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20028c6c 	.word	0x20028c6c
 80029ec:	40000800 	.word	0x40000800

080029f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a10:	463b      	mov	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a22:	4b32      	ldr	r3, [pc, #200]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a24:	4a32      	ldr	r2, [pc, #200]	; (8002af0 <MX_TIM5_Init+0x100>)
 8002a26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a36:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a48:	4828      	ldr	r0, [pc, #160]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a4a:	f00a fd21 	bl	800d490 <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002a54:	f002 f8f2 	bl	8004c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a62:	4619      	mov	r1, r3
 8002a64:	4821      	ldr	r0, [pc, #132]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a66:	f00a ffd5 	bl	800da14 <HAL_TIM_ConfigClockSource>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002a70:	f002 f8e4 	bl	8004c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a74:	481d      	ldr	r0, [pc, #116]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a76:	f00a fd61 	bl	800d53c <HAL_TIM_PWM_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002a80:	f002 f8dc 	bl	8004c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4619      	mov	r1, r3
 8002a92:	4816      	ldr	r0, [pc, #88]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002a94:	f00b fc38 	bl	800e308 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002a9e:	f002 f8cd 	bl	8004c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa2:	2360      	movs	r3, #96	; 0x60
 8002aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002aba:	f00a fe93 	bl	800d7e4 <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002ac4:	f002 f8ba 	bl	8004c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac8:	463b      	mov	r3, r7
 8002aca:	2204      	movs	r2, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4807      	ldr	r0, [pc, #28]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002ad0:	f00a fe88 	bl	800d7e4 <HAL_TIM_PWM_ConfigChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002ada:	f002 f8af 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ade:	4803      	ldr	r0, [pc, #12]	; (8002aec <MX_TIM5_Init+0xfc>)
 8002ae0:	f005 fa7e 	bl	8007fe0 <HAL_TIM_MspPostInit>

}
 8002ae4:	bf00      	nop
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20029204 	.word	0x20029204
 8002af0:	40000c00 	.word	0x40000c00

08002af4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <MX_UART4_Init+0x58>)
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <MX_UART4_Init+0x5c>)
 8002afc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_UART4_Init+0x58>)
 8002b38:	f00b fc92 	bl	800e460 <HAL_UART_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002b42:	f002 f87b 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	2002e220 	.word	0x2002e220
 8002b50:	40004c00 	.word	0x40004c00

08002b54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <MX_UART5_Init+0x58>)
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <MX_UART5_Init+0x5c>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <MX_UART5_Init+0x58>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_UART5_Init+0x58>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <MX_UART5_Init+0x58>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_UART5_Init+0x58>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_UART5_Init+0x58>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_UART5_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_UART5_Init+0x58>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_UART5_Init+0x58>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_UART5_Init+0x58>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_UART5_Init+0x58>)
 8002b98:	f00b fc62 	bl	800e460 <HAL_UART_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002ba2:	f002 f84b 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	2002b958 	.word	0x2002b958
 8002bb0:	40005000 	.word	0x40005000

08002bb4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <MX_UART7_Init+0x5c>)
 8002bbc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bda:	220c      	movs	r2, #12
 8002bdc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_UART7_Init+0x58>)
 8002be0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002be4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_UART7_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_UART7_Init+0x58>)
 8002bfa:	f00b fc31 	bl	800e460 <HAL_UART_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002c04:	f002 f81a 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20028b88 	.word	0x20028b88
 8002c10:	40007800 	.word	0x40007800

08002c14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c22:	2206      	movs	r2, #6
 8002c24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c28:	2202      	movs	r2, #2
 8002c2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c34:	2202      	movs	r2, #2
 8002c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c58:	f008 fd0e 	bl	800b678 <HAL_PCD_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002c62:	f001 ffeb 	bl	8004c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20028d50 	.word	0x20028d50

08002c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c76:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <MX_DMA_Init+0x80>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2105      	movs	r1, #5
 8002caa:	200b      	movs	r0, #11
 8002cac:	f006 ff10 	bl	8009ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002cb0:	200b      	movs	r0, #11
 8002cb2:	f006 ff29 	bl	8009b08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2105      	movs	r1, #5
 8002cba:	2038      	movs	r0, #56	; 0x38
 8002cbc:	f006 ff08 	bl	8009ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cc0:	2038      	movs	r0, #56	; 0x38
 8002cc2:	f006 ff21 	bl	8009b08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2105      	movs	r1, #5
 8002cca:	2039      	movs	r0, #57	; 0x39
 8002ccc:	f006 ff00 	bl	8009ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002cd0:	2039      	movs	r0, #57	; 0x39
 8002cd2:	f006 ff19 	bl	8009b08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2105      	movs	r1, #5
 8002cda:	203a      	movs	r0, #58	; 0x3a
 8002cdc:	f006 fef8 	bl	8009ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ce0:	203a      	movs	r0, #58	; 0x3a
 8002ce2:	f006 ff11 	bl	8009b08 <HAL_NVIC_EnableIRQ>

}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b090      	sub	sp, #64	; 0x40
 8002cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d0a:	4bb0      	ldr	r3, [pc, #704]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4aaf      	ldr	r2, [pc, #700]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d10:	f043 0310 	orr.w	r3, r3, #16
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4bad      	ldr	r3, [pc, #692]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d22:	4baa      	ldr	r3, [pc, #680]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4aa9      	ldr	r2, [pc, #676]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4ba7      	ldr	r3, [pc, #668]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	4ba4      	ldr	r3, [pc, #656]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4aa3      	ldr	r2, [pc, #652]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4ba1      	ldr	r3, [pc, #644]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	4b9e      	ldr	r3, [pc, #632]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a9d      	ldr	r2, [pc, #628]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b9b      	ldr	r3, [pc, #620]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	4b98      	ldr	r3, [pc, #608]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a97      	ldr	r2, [pc, #604]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b95      	ldr	r3, [pc, #596]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d82:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a91      	ldr	r2, [pc, #580]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d9a:	4b8c      	ldr	r3, [pc, #560]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a8b      	ldr	r2, [pc, #556]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db2:	4b86      	ldr	r3, [pc, #536]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a85      	ldr	r2, [pc, #532]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002db8:	f043 0320 	orr.w	r3, r3, #32
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b83      	ldr	r3, [pc, #524]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dca:	4b80      	ldr	r3, [pc, #512]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b7d      	ldr	r3, [pc, #500]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a79      	ldr	r2, [pc, #484]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b77      	ldr	r3, [pc, #476]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dfa:	4b74      	ldr	r3, [pc, #464]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a73      	ldr	r2, [pc, #460]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b71      	ldr	r3, [pc, #452]	; (8002fcc <MX_GPIO_Init+0x2d8>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2110      	movs	r1, #16
 8002e16:	486e      	ldr	r0, [pc, #440]	; (8002fd0 <MX_GPIO_Init+0x2dc>)
 8002e18:	f007 fc4e 	bl	800a6b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f244 012f 	movw	r1, #16431	; 0x402f
 8002e22:	486c      	ldr	r0, [pc, #432]	; (8002fd4 <MX_GPIO_Init+0x2e0>)
 8002e24:	f007 fc48 	bl	800a6b8 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f241 1150 	movw	r1, #4432	; 0x1150
 8002e2e:	486a      	ldr	r0, [pc, #424]	; (8002fd8 <MX_GPIO_Init+0x2e4>)
 8002e30:	f007 fc42 	bl	800a6b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2103      	movs	r1, #3
 8002e38:	4868      	ldr	r0, [pc, #416]	; (8002fdc <MX_GPIO_Init+0x2e8>)
 8002e3a:	f007 fc3d 	bl	800a6b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f243 013c 	movw	r1, #12348	; 0x303c
 8002e44:	4866      	ldr	r0, [pc, #408]	; (8002fe0 <MX_GPIO_Init+0x2ec>)
 8002e46:	f007 fc37 	bl	800a6b8 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f241 0104 	movw	r1, #4100	; 0x1004
 8002e50:	4864      	ldr	r0, [pc, #400]	; (8002fe4 <MX_GPIO_Init+0x2f0>)
 8002e52:	f007 fc31 	bl	800a6b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002e56:	2200      	movs	r2, #0
 8002e58:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002e5c:	4862      	ldr	r0, [pc, #392]	; (8002fe8 <MX_GPIO_Init+0x2f4>)
 8002e5e:	f007 fc2b 	bl	800a6b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002e62:	2200      	movs	r2, #0
 8002e64:	211b      	movs	r1, #27
 8002e66:	4861      	ldr	r0, [pc, #388]	; (8002fec <MX_GPIO_Init+0x2f8>)
 8002e68:	f007 fc26 	bl	800a6b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e80:	4619      	mov	r1, r3
 8002e82:	4853      	ldr	r0, [pc, #332]	; (8002fd0 <MX_GPIO_Init+0x2dc>)
 8002e84:	f007 fa56 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e98:	4619      	mov	r1, r3
 8002e9a:	484d      	ldr	r0, [pc, #308]	; (8002fd0 <MX_GPIO_Init+0x2dc>)
 8002e9c:	f007 fa4a 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002ea0:	f244 032f 	movw	r3, #16431	; 0x402f
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4846      	ldr	r0, [pc, #280]	; (8002fd4 <MX_GPIO_Init+0x2e0>)
 8002eba:	f007 fa3b 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4845      	ldr	r0, [pc, #276]	; (8002fe8 <MX_GPIO_Init+0x2f4>)
 8002ed2:	f007 fa2f 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002ed6:	f241 1350 	movw	r3, #4432	; 0x1150
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002edc:	2301      	movs	r3, #1
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eec:	4619      	mov	r1, r3
 8002eee:	483a      	ldr	r0, [pc, #232]	; (8002fd8 <MX_GPIO_Init+0x2e4>)
 8002ef0:	f007 fa20 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002ef4:	23f0      	movs	r3, #240	; 0xf0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <MX_GPIO_Init+0x2fc>)
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f04:	4619      	mov	r1, r3
 8002f06:	4835      	ldr	r0, [pc, #212]	; (8002fdc <MX_GPIO_Init+0x2e8>)
 8002f08:	f007 fa14 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4834      	ldr	r0, [pc, #208]	; (8002ff4 <MX_GPIO_Init+0x300>)
 8002f22:	f007 fa07 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002f26:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f38:	4619      	mov	r1, r3
 8002f3a:	482f      	ldr	r0, [pc, #188]	; (8002ff8 <MX_GPIO_Init+0x304>)
 8002f3c:	f007 f9fa 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8002f40:	2303      	movs	r3, #3
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f54:	4619      	mov	r1, r3
 8002f56:	4821      	ldr	r0, [pc, #132]	; (8002fdc <MX_GPIO_Init+0x2e8>)
 8002f58:	f007 f9ec 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002f5c:	f243 033c 	movw	r3, #12348	; 0x303c
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f62:	2301      	movs	r3, #1
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f72:	4619      	mov	r1, r3
 8002f74:	481a      	ldr	r0, [pc, #104]	; (8002fe0 <MX_GPIO_Init+0x2ec>)
 8002f76:	f007 f9dd 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8002f7a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f80:	2301      	movs	r3, #1
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f90:	4619      	mov	r1, r3
 8002f92:	4814      	ldr	r0, [pc, #80]	; (8002fe4 <MX_GPIO_Init+0x2f0>)
 8002f94:	f007 f9ce 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8002f98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <MX_GPIO_Init+0x2f4>)
 8002fb2:	f007 f9bf 	bl	800a334 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8002fb6:	231b      	movs	r3, #27
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fca:	e017      	b.n	8002ffc <MX_GPIO_Init+0x308>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40022800 	.word	0x40022800
 8002fe0:	40021400 	.word	0x40021400
 8002fe4:	40021c00 	.word	0x40021c00
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40022400 	.word	0x40022400
 8002ff0:	10210000 	.word	0x10210000
 8002ff4:	40020800 	.word	0x40020800
 8002ff8:	40020c00 	.word	0x40020c00
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	480b      	ldr	r0, [pc, #44]	; (800302c <MX_GPIO_Init+0x338>)
 8003000:	f007 f998 	bl	800a334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2105      	movs	r1, #5
 8003008:	200a      	movs	r0, #10
 800300a:	f006 fd61 	bl	8009ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800300e:	200a      	movs	r0, #10
 8003010:	f006 fd7a 	bl	8009b08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003014:	2200      	movs	r2, #0
 8003016:	2105      	movs	r1, #5
 8003018:	2017      	movs	r0, #23
 800301a:	f006 fd59 	bl	8009ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800301e:	2017      	movs	r0, #23
 8003020:	f006 fd72 	bl	8009b08 <HAL_NVIC_EnableIRQ>

}
 8003024:	bf00      	nop
 8003026:	3740      	adds	r7, #64	; 0x40
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40022400 	.word	0x40022400

08003030 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8003038:	1d39      	adds	r1, r7, #4
 800303a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303e:	2201      	movs	r2, #1
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <__io_putchar+0x20>)
 8003042:	f00b fa5b 	bl	800e4fc <HAL_UART_Transmit>

	return ch;
 8003046:	687b      	ldr	r3, [r7, #4]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20028b88 	.word	0x20028b88

08003054 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8003058:	220e      	movs	r2, #14
 800305a:	2100      	movs	r1, #0
 800305c:	480d      	ldr	r0, [pc, #52]	; (8003094 <outputGPIOBufInitialization+0x40>)
 800305e:	f00f f8ec 	bl	801223a <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003062:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <outputGPIOBufInitialization+0x44>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	2101      	movs	r1, #1
 8003068:	4618      	mov	r0, r3
 800306a:	f000 f817 	bl	800309c <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <outputGPIOBufInitialization+0x44>)
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f811 	bl	800309c <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <outputGPIOBufInitialization+0x44>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <outputGPIOBufInitialization+0x40>)
 8003080:	2101      	movs	r1, #1
 8003082:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <outputGPIOBufInitialization+0x44>)
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	4a02      	ldr	r2, [pc, #8]	; (8003094 <outputGPIOBufInitialization+0x40>)
 800308a:	2101      	movs	r1, #1
 800308c:	54d1      	strb	r1, [r2, r3]
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	2002bacc 	.word	0x2002bacc
 8003098:	20000044 	.word	0x20000044

0800309c <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 80030a6:	4b87      	ldr	r3, [pc, #540]	; (80032c4 <setOutputGPIOState+0x228>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d10d      	bne.n	80030cc <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	2104      	movs	r1, #4
 80030b8:	4883      	ldr	r0, [pc, #524]	; (80032c8 <setOutputGPIOState+0x22c>)
 80030ba:	f007 fafd 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 80030be:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <setOutputGPIOState+0x228>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	b2d1      	uxtb	r1, r2
 80030c6:	4a81      	ldr	r2, [pc, #516]	; (80032cc <setOutputGPIOState+0x230>)
 80030c8:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 80030ca:	e0f7      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 80030cc:	4b7d      	ldr	r3, [pc, #500]	; (80032c4 <setOutputGPIOState+0x228>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d10d      	bne.n	80030f2 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	2110      	movs	r1, #16
 80030de:	487c      	ldr	r0, [pc, #496]	; (80032d0 <setOutputGPIOState+0x234>)
 80030e0:	f007 faea 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 80030e4:	4b77      	ldr	r3, [pc, #476]	; (80032c4 <setOutputGPIOState+0x228>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d1      	uxtb	r1, r2
 80030ec:	4a77      	ldr	r2, [pc, #476]	; (80032cc <setOutputGPIOState+0x230>)
 80030ee:	54d1      	strb	r1, [r2, r3]
}
 80030f0:	e0e4      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 80030f2:	4b74      	ldr	r3, [pc, #464]	; (80032c4 <setOutputGPIOState+0x228>)
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d10d      	bne.n	8003118 <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	4872      	ldr	r0, [pc, #456]	; (80032d0 <setOutputGPIOState+0x234>)
 8003106:	f007 fad7 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 800310a:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <setOutputGPIOState+0x228>)
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	b2d1      	uxtb	r1, r2
 8003112:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <setOutputGPIOState+0x230>)
 8003114:	54d1      	strb	r1, [r2, r3]
}
 8003116:	e0d1      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <setOutputGPIOState+0x228>)
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	d10e      	bne.n	8003140 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312c:	4868      	ldr	r0, [pc, #416]	; (80032d0 <setOutputGPIOState+0x234>)
 800312e:	f007 fac3 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 8003132:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <setOutputGPIOState+0x228>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	b2d1      	uxtb	r1, r2
 800313a:	4a64      	ldr	r2, [pc, #400]	; (80032cc <setOutputGPIOState+0x230>)
 800313c:	54d1      	strb	r1, [r2, r3]
}
 800313e:	e0bd      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 8003140:	4b60      	ldr	r3, [pc, #384]	; (80032c4 <setOutputGPIOState+0x228>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d10d      	bne.n	8003166 <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	2110      	movs	r1, #16
 8003152:	4860      	ldr	r0, [pc, #384]	; (80032d4 <setOutputGPIOState+0x238>)
 8003154:	f007 fab0 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 8003158:	4b5a      	ldr	r3, [pc, #360]	; (80032c4 <setOutputGPIOState+0x228>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d1      	uxtb	r1, r2
 8003160:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <setOutputGPIOState+0x230>)
 8003162:	54d1      	strb	r1, [r2, r3]
}
 8003164:	e0aa      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 8003166:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <setOutputGPIOState+0x228>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d10d      	bne.n	800318c <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	2101      	movs	r1, #1
 8003178:	4857      	ldr	r0, [pc, #348]	; (80032d8 <setOutputGPIOState+0x23c>)
 800317a:	f007 fa9d 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 800317e:	4b51      	ldr	r3, [pc, #324]	; (80032c4 <setOutputGPIOState+0x228>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	b2d1      	uxtb	r1, r2
 8003186:	4a51      	ldr	r2, [pc, #324]	; (80032cc <setOutputGPIOState+0x230>)
 8003188:	54d1      	strb	r1, [r2, r3]
}
 800318a:	e097      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 800318c:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <setOutputGPIOState+0x228>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d10d      	bne.n	80031b2 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	2102      	movs	r1, #2
 800319e:	484e      	ldr	r0, [pc, #312]	; (80032d8 <setOutputGPIOState+0x23c>)
 80031a0:	f007 fa8a 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 80031a4:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <setOutputGPIOState+0x228>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d1      	uxtb	r1, r2
 80031ac:	4a47      	ldr	r2, [pc, #284]	; (80032cc <setOutputGPIOState+0x230>)
 80031ae:	54d1      	strb	r1, [r2, r3]
}
 80031b0:	e084      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 80031b2:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <setOutputGPIOState+0x228>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10d      	bne.n	80031d8 <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	2108      	movs	r1, #8
 80031c4:	4843      	ldr	r0, [pc, #268]	; (80032d4 <setOutputGPIOState+0x238>)
 80031c6:	f007 fa77 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <setOutputGPIOState+0x228>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	b2d1      	uxtb	r1, r2
 80031d2:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <setOutputGPIOState+0x230>)
 80031d4:	54d1      	strb	r1, [r2, r3]
}
 80031d6:	e071      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <setOutputGPIOState+0x228>)
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d10d      	bne.n	80031fe <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	2101      	movs	r1, #1
 80031ea:	483c      	ldr	r0, [pc, #240]	; (80032dc <setOutputGPIOState+0x240>)
 80031ec:	f007 fa64 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 80031f0:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <setOutputGPIOState+0x228>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	b2d1      	uxtb	r1, r2
 80031f8:	4a34      	ldr	r2, [pc, #208]	; (80032cc <setOutputGPIOState+0x230>)
 80031fa:	54d1      	strb	r1, [r2, r3]
}
 80031fc:	e05e      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <setOutputGPIOState+0x228>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d10d      	bne.n	8003224 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	2102      	movs	r1, #2
 8003210:	4832      	ldr	r0, [pc, #200]	; (80032dc <setOutputGPIOState+0x240>)
 8003212:	f007 fa51 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <setOutputGPIOState+0x228>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	b2d1      	uxtb	r1, r2
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <setOutputGPIOState+0x230>)
 8003220:	54d1      	strb	r1, [r2, r3]
}
 8003222:	e04b      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <setOutputGPIOState+0x228>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d10d      	bne.n	800324a <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	2120      	movs	r1, #32
 8003236:	4829      	ldr	r0, [pc, #164]	; (80032dc <setOutputGPIOState+0x240>)
 8003238:	f007 fa3e 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <setOutputGPIOState+0x228>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d1      	uxtb	r1, r2
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <setOutputGPIOState+0x230>)
 8003246:	54d1      	strb	r1, [r2, r3]
}
 8003248:	e038      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <setOutputGPIOState+0x228>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d10e      	bne.n	8003272 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800325e:	481f      	ldr	r0, [pc, #124]	; (80032dc <setOutputGPIOState+0x240>)
 8003260:	f007 fa2a 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003264:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <setOutputGPIOState+0x228>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d1      	uxtb	r1, r2
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <setOutputGPIOState+0x230>)
 800326e:	54d1      	strb	r1, [r2, r3]
}
 8003270:	e024      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <setOutputGPIOState+0x228>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d10d      	bne.n	8003298 <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	2104      	movs	r1, #4
 8003284:	4815      	ldr	r0, [pc, #84]	; (80032dc <setOutputGPIOState+0x240>)
 8003286:	f007 fa17 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <setOutputGPIOState+0x228>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	b2d1      	uxtb	r1, r2
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <setOutputGPIOState+0x230>)
 8003294:	54d1      	strb	r1, [r2, r3]
}
 8003296:	e011      	b.n	80032bc <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <setOutputGPIOState+0x228>)
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10c      	bne.n	80032bc <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	2108      	movs	r1, #8
 80032aa:	480c      	ldr	r0, [pc, #48]	; (80032dc <setOutputGPIOState+0x240>)
 80032ac:	f007 fa04 	bl	800a6b8 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <setOutputGPIOState+0x228>)
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d1      	uxtb	r1, r2
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <setOutputGPIOState+0x230>)
 80032ba:	54d1      	strb	r1, [r2, r3]
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000044 	.word	0x20000044
 80032c8:	40021c00 	.word	0x40021c00
 80032cc:	2002bacc 	.word	0x2002bacc
 80032d0:	40022000 	.word	0x40022000
 80032d4:	40022400 	.word	0x40022400
 80032d8:	40022800 	.word	0x40022800
 80032dc:	40021800 	.word	0x40021800

080032e0 <uartTransmitInt>:
	uart_buf_len = sprintf(uart_buf, message);
	if (uart == 7){
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}
}
void uartTransmitInt(uint16_t *number, int uart){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b098      	sub	sp, #96	; 0x60
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4909      	ldr	r1, [pc, #36]	; (8003318 <uartTransmitInt+0x38>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f00f fe26 	bl	8012f44 <siprintf>
 80032f8:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b07      	cmp	r3, #7
 80032fe:	d107      	bne.n	8003310 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8003300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003302:	b29a      	uxth	r2, r3
 8003304:	f107 010c 	add.w	r1, r7, #12
 8003308:	2364      	movs	r3, #100	; 0x64
 800330a:	4804      	ldr	r0, [pc, #16]	; (800331c <uartTransmitInt+0x3c>)
 800330c:	f00b f8f6 	bl	800e4fc <HAL_UART_Transmit>
	}

}
 8003310:	bf00      	nop
 8003312:	3760      	adds	r7, #96	; 0x60
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	080162f8 	.word	0x080162f8
 800331c:	20028b88 	.word	0x20028b88

08003320 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60ba      	str	r2, [r7, #8]
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	4603      	mov	r3, r0
 800332c:	73fb      	strb	r3, [r7, #15]
 800332e:	460b      	mov	r3, r1
 8003330:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8003332:	4a4f      	ldr	r2, [pc, #316]	; (8003470 <readI2CRegister+0x150>)
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d10c      	bne.n	8003358 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	b299      	uxth	r1, r3
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	4a49      	ldr	r2, [pc, #292]	; (8003470 <readI2CRegister+0x150>)
 800334c:	4849      	ldr	r0, [pc, #292]	; (8003474 <readI2CRegister+0x154>)
 800334e:	f007 fa9b 	bl	800a888 <HAL_I2C_Master_Transmit>
 8003352:	4603      	mov	r3, r0
 8003354:	75fb      	strb	r3, [r7, #23]
 8003356:	e02e      	b.n	80033b6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d10c      	bne.n	8003378 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	b299      	uxth	r1, r3
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2301      	movs	r3, #1
 800336a:	4a41      	ldr	r2, [pc, #260]	; (8003470 <readI2CRegister+0x150>)
 800336c:	4842      	ldr	r0, [pc, #264]	; (8003478 <readI2CRegister+0x158>)
 800336e:	f007 fa8b 	bl	800a888 <HAL_I2C_Master_Transmit>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]
 8003376:	e01e      	b.n	80033b6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d10c      	bne.n	8003398 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	b299      	uxth	r1, r3
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2301      	movs	r3, #1
 800338a:	4a39      	ldr	r2, [pc, #228]	; (8003470 <readI2CRegister+0x150>)
 800338c:	483b      	ldr	r0, [pc, #236]	; (800347c <readI2CRegister+0x15c>)
 800338e:	f007 fa7b 	bl	800a888 <HAL_I2C_Master_Transmit>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]
 8003396:	e00e      	b.n	80033b6 <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d10b      	bne.n	80033b6 <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	b299      	uxth	r1, r3
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	2301      	movs	r3, #1
 80033aa:	4a31      	ldr	r2, [pc, #196]	; (8003470 <readI2CRegister+0x150>)
 80033ac:	4834      	ldr	r0, [pc, #208]	; (8003480 <readI2CRegister+0x160>)
 80033ae:	f007 fa6b 	bl	800a888 <HAL_I2C_Master_Transmit>
 80033b2:	4603      	mov	r3, r0
 80033b4:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <readI2CRegister+0xa0>
	          return 0xfe;
 80033bc:	23fe      	movs	r3, #254	; 0xfe
 80033be:	e052      	b.n	8003466 <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10e      	bne.n	80033e4 <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	b299      	uxth	r1, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	4a26      	ldr	r2, [pc, #152]	; (8003470 <readI2CRegister+0x150>)
 80033d8:	4826      	ldr	r0, [pc, #152]	; (8003474 <readI2CRegister+0x154>)
 80033da:	f007 fb49 	bl	800aa70 <HAL_I2C_Master_Receive>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
 80033e2:	e034      	b.n	800344e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d10e      	bne.n	8003408 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	b299      	uxth	r1, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <readI2CRegister+0x150>)
 80033fc:	481e      	ldr	r0, [pc, #120]	; (8003478 <readI2CRegister+0x158>)
 80033fe:	f007 fb37 	bl	800aa70 <HAL_I2C_Master_Receive>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]
 8003406:	e022      	b.n	800344e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d10e      	bne.n	800342c <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	b299      	uxth	r1, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	b29a      	uxth	r2, r3
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	4a14      	ldr	r2, [pc, #80]	; (8003470 <readI2CRegister+0x150>)
 8003420:	4816      	ldr	r0, [pc, #88]	; (800347c <readI2CRegister+0x15c>)
 8003422:	f007 fb25 	bl	800aa70 <HAL_I2C_Master_Receive>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]
 800342a:	e010      	b.n	800344e <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d10d      	bne.n	800344e <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	b299      	uxth	r1, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	b29a      	uxth	r2, r3
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <readI2CRegister+0x150>)
 8003444:	480e      	ldr	r0, [pc, #56]	; (8003480 <readI2CRegister+0x160>)
 8003446:	f007 fb13 	bl	800aa70 <HAL_I2C_Master_Receive>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <readI2CRegister+0x138>
		          return 0xfe;
 8003454:	23fe      	movs	r3, #254	; 0xfe
 8003456:	e006      	b.n	8003466 <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <readI2CRegister+0x150>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2107      	movs	r1, #7
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff3e 	bl	80032e0 <uartTransmitInt>
			  return buf;
 8003464:	4b02      	ldr	r3, [pc, #8]	; (8003470 <readI2CRegister+0x150>)
		  }
}
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200032e8 	.word	0x200032e8
 8003474:	20028d04 	.word	0x20028d04
 8003478:	20029154 	.word	0x20029154
 800347c:	20028af0 	.word	0x20028af0
 8003480:	20028b3c 	.word	0x20028b3c

08003484 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003484:	b580      	push	{r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af02      	add	r7, sp, #8
 800348a:	60ba      	str	r2, [r7, #8]
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	460b      	mov	r3, r1
 8003494:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8003496:	7bbb      	ldrb	r3, [r7, #14]
 8003498:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 800349e:	2300      	movs	r3, #0
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a2:	e00d      	b.n	80034c0 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	441a      	add	r2, r3
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	3301      	adds	r3, #1
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80034b4:	440b      	add	r3, r1
 80034b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	3301      	adds	r3, #1
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d9ee      	bls.n	80034a4 <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d112      	bne.n	80034f2 <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	b299      	uxth	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	b298      	uxth	r0, r3
 80034d8:	f107 0214 	add.w	r2, r7, #20
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4603      	mov	r3, r0
 80034e4:	4829      	ldr	r0, [pc, #164]	; (800358c <writeI2CRegister+0x108>)
 80034e6:	f007 f9cf 	bl	800a888 <HAL_I2C_Master_Transmit>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80034f0:	e040      	b.n	8003574 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d112      	bne.n	800351e <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	b299      	uxth	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	b298      	uxth	r0, r3
 8003504:	f107 0214 	add.w	r2, r7, #20
 8003508:	f04f 33ff 	mov.w	r3, #4294967295
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	4603      	mov	r3, r0
 8003510:	481f      	ldr	r0, [pc, #124]	; (8003590 <writeI2CRegister+0x10c>)
 8003512:	f007 f9b9 	bl	800a888 <HAL_I2C_Master_Transmit>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800351c:	e02a      	b.n	8003574 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	2b03      	cmp	r3, #3
 8003522:	d112      	bne.n	800354a <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	b299      	uxth	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	b29b      	uxth	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	b298      	uxth	r0, r3
 8003530:	f107 0214 	add.w	r2, r7, #20
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4603      	mov	r3, r0
 800353c:	4815      	ldr	r0, [pc, #84]	; (8003594 <writeI2CRegister+0x110>)
 800353e:	f007 f9a3 	bl	800a888 <HAL_I2C_Master_Transmit>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003548:	e014      	b.n	8003574 <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	2b04      	cmp	r3, #4
 800354e:	d111      	bne.n	8003574 <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	b299      	uxth	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	b29b      	uxth	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	b298      	uxth	r0, r3
 800355c:	f107 0214 	add.w	r2, r7, #20
 8003560:	f04f 33ff 	mov.w	r3, #4294967295
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4603      	mov	r3, r0
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <writeI2CRegister+0x114>)
 800356a:	f007 f98d 	bl	800a888 <HAL_I2C_Master_Transmit>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8003574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <writeI2CRegister+0xfc>
	  	          return 0;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8003580:	2301      	movs	r3, #1
	  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20028d04 	.word	0x20028d04
 8003590:	20029154 	.word	0x20029154
 8003594:	20028af0 	.word	0x20028af0
 8003598:	20028b3c 	.word	0x20028b3c

0800359c <configureLEDDriver>:
void configureLEDDriver(){
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 80035a2:	2301      	movs	r3, #1
 80035a4:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <configureLEDDriver+0x110>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 80035ac:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <configureLEDDriver+0x114>)
 80035ae:	7818      	ldrb	r0, [r3, #0]
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <configureLEDDriver+0x114>)
 80035b2:	7999      	ldrb	r1, [r3, #6]
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <configureLEDDriver+0x114>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2301      	movs	r3, #1
 80035c0:	f7ff ff60 	bl	8003484 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <configureLEDDriver+0x114>)
 80035c6:	7818      	ldrb	r0, [r3, #0]
 80035c8:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <configureLEDDriver+0x114>)
 80035ca:	7999      	ldrb	r1, [r3, #6]
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <configureLEDDriver+0x114>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f7ff fea5 	bl	8003320 <readI2CRegister>
 80035d6:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2107      	movs	r1, #7
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fe7e 	bl	80032e0 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <configureLEDDriver+0x114>)
 80035e6:	7818      	ldrb	r0, [r3, #0]
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <configureLEDDriver+0x114>)
 80035ea:	7859      	ldrb	r1, [r3, #1]
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <configureLEDDriver+0x114>)
 80035ee:	79db      	ldrb	r3, [r3, #7]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <configureLEDDriver+0x114>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2301      	movs	r3, #1
 80035fa:	f7ff ff43 	bl	8003484 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 80035fe:	4b2c      	ldr	r3, [pc, #176]	; (80036b0 <configureLEDDriver+0x114>)
 8003600:	7818      	ldrb	r0, [r3, #0]
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <configureLEDDriver+0x114>)
 8003604:	7899      	ldrb	r1, [r3, #2]
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <configureLEDDriver+0x114>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2301      	movs	r3, #1
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <configureLEDDriver+0x110>)
 8003610:	f7ff ff38 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <configureLEDDriver+0x114>)
 8003616:	7818      	ldrb	r0, [r3, #0]
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <configureLEDDriver+0x114>)
 800361a:	78d9      	ldrb	r1, [r3, #3]
 800361c:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <configureLEDDriver+0x114>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2301      	movs	r3, #1
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <configureLEDDriver+0x110>)
 8003626:	f7ff ff2d 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <configureLEDDriver+0x114>)
 800362c:	7818      	ldrb	r0, [r3, #0]
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <configureLEDDriver+0x114>)
 8003630:	7919      	ldrb	r1, [r3, #4]
 8003632:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <configureLEDDriver+0x114>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <configureLEDDriver+0x110>)
 800363c:	f7ff ff22 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <configureLEDDriver+0x114>)
 8003642:	7818      	ldrb	r0, [r3, #0]
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <configureLEDDriver+0x114>)
 8003646:	7959      	ldrb	r1, [r3, #5]
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <configureLEDDriver+0x114>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2301      	movs	r3, #1
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <configureLEDDriver+0x110>)
 8003652:	f7ff ff17 	bl	8003484 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <configureLEDDriver+0x114>)
 8003658:	7818      	ldrb	r0, [r3, #0]
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <configureLEDDriver+0x114>)
 800365c:	7a19      	ldrb	r1, [r3, #8]
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <configureLEDDriver+0x114>)
 8003660:	7adb      	ldrb	r3, [r3, #11]
 8003662:	461a      	mov	r2, r3
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <configureLEDDriver+0x114>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2301      	movs	r3, #1
 800366c:	f7ff ff0a 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <configureLEDDriver+0x114>)
 8003672:	7818      	ldrb	r0, [r3, #0]
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <configureLEDDriver+0x114>)
 8003676:	7a59      	ldrb	r1, [r3, #9]
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <configureLEDDriver+0x114>)
 800367a:	7adb      	ldrb	r3, [r3, #11]
 800367c:	461a      	mov	r2, r3
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <configureLEDDriver+0x114>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	f7ff fefd 	bl	8003484 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <configureLEDDriver+0x114>)
 800368c:	7818      	ldrb	r0, [r3, #0]
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <configureLEDDriver+0x114>)
 8003690:	7a99      	ldrb	r1, [r3, #10]
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <configureLEDDriver+0x114>)
 8003694:	7adb      	ldrb	r3, [r3, #11]
 8003696:	461a      	mov	r2, r3
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <configureLEDDriver+0x114>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2301      	movs	r3, #1
 80036a0:	f7ff fef0 	bl	8003484 <writeI2CRegister>
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	200032fc 	.word	0x200032fc
 80036b0:	20000004 	.word	0x20000004

080036b4 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80036c0:	2301      	movs	r3, #1
 80036c2:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80036c4:	2304      	movs	r3, #4
 80036c6:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80036c8:	2310      	movs	r3, #16
 80036ca:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80036cc:	2340      	movs	r3, #64	; 0x40
 80036ce:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80036d0:	2302      	movs	r3, #2
 80036d2:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 80036d4:	2308      	movs	r3, #8
 80036d6:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 80036d8:	2320      	movs	r3, #32
 80036da:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	dc05      	bgt.n	80036f2 <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 80036e6:	4b80      	ldr	r3, [pc, #512]	; (80038e8 <setErrorLED+0x234>)
 80036e8:	789b      	ldrb	r3, [r3, #2]
 80036ea:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e019      	b.n	8003726 <setErrorLED+0x72>
	}
	else if(led <8){
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b07      	cmp	r3, #7
 80036f6:	dc06      	bgt.n	8003706 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <setErrorLED+0x234>)
 80036fa:	78db      	ldrb	r3, [r3, #3]
 80036fc:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3b04      	subs	r3, #4
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e00f      	b.n	8003726 <setErrorLED+0x72>
	}
	else if(led <12){
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0b      	cmp	r3, #11
 800370a:	dc06      	bgt.n	800371a <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 800370c:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <setErrorLED+0x234>)
 800370e:	791b      	ldrb	r3, [r3, #4]
 8003710:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3b08      	subs	r3, #8
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e005      	b.n	8003726 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 800371a:	4b73      	ldr	r3, [pc, #460]	; (80038e8 <setErrorLED+0x234>)
 800371c:	795b      	ldrb	r3, [r3, #5]
 800371e:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b0c      	subs	r3, #12
 8003724:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003726:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <setErrorLED+0x234>)
 8003728:	7818      	ldrb	r0, [r3, #0]
 800372a:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <setErrorLED+0x234>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	7ef9      	ldrb	r1, [r7, #27]
 8003730:	2201      	movs	r2, #1
 8003732:	f7ff fdf5 	bl	8003320 <readI2CRegister>
 8003736:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b03      	cmp	r3, #3
 800373c:	f200 80bd 	bhi.w	80038ba <setErrorLED+0x206>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <setErrorLED+0x94>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003759 	.word	0x08003759
 800374c:	080037bf 	.word	0x080037bf
 8003750:	08003825 	.word	0x08003825
 8003754:	08003855 	.word	0x08003855

	case 0:
		if(change){
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <setErrorLED+0xd0>
			if(led == 8){
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d107      	bne.n	8003774 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	7dbb      	ldrb	r3, [r7, #22]
 800376a:	4313      	orrs	r3, r2
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8003772:	e0a2      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	7ebb      	ldrb	r3, [r7, #26]
 800377a:	4313      	orrs	r3, r2
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	701a      	strb	r2, [r3, #0]
		break;
 8003782:	e09a      	b.n	80038ba <setErrorLED+0x206>
			if(led == 8){
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10c      	bne.n	80037a4 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b25a      	sxtb	r2, r3
 8003790:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003794:	43db      	mvns	r3, r3
 8003796:	b25b      	sxtb	r3, r3
 8003798:	4013      	ands	r3, r2
 800379a:	b25b      	sxtb	r3, r3
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	701a      	strb	r2, [r3, #0]
		break;
 80037a2:	e08a      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	4013      	ands	r3, r2
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	701a      	strb	r2, [r3, #0]
		break;
 80037bc:	e07d      	b.n	80038ba <setErrorLED+0x206>

	case 1:
		if(change){
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <setErrorLED+0x136>
			if(led == 9){
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b09      	cmp	r3, #9
 80037c8:	d107      	bne.n	80037da <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	7d7b      	ldrb	r3, [r7, #21]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 80037d8:	e06f      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	7e7b      	ldrb	r3, [r7, #25]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	701a      	strb	r2, [r3, #0]
		break;
 80037e8:	e067      	b.n	80038ba <setErrorLED+0x206>
			if(led == 9){
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b09      	cmp	r3, #9
 80037ee:	d10c      	bne.n	800380a <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	4013      	ands	r3, r2
 8003800:	b25b      	sxtb	r3, r3
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	701a      	strb	r2, [r3, #0]
		break;
 8003808:	e057      	b.n	80038ba <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b25a      	sxtb	r2, r3
 8003810:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003814:	43db      	mvns	r3, r3
 8003816:	b25b      	sxtb	r3, r3
 8003818:	4013      	ands	r3, r2
 800381a:	b25b      	sxtb	r3, r3
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]
		break;
 8003822:	e04a      	b.n	80038ba <setErrorLED+0x206>

	case 2:
		if(change){
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	7e3b      	ldrb	r3, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003838:	e03f      	b.n	80038ba <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b25a      	sxtb	r2, r3
 8003840:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003844:	43db      	mvns	r3, r3
 8003846:	b25b      	sxtb	r3, r3
 8003848:	4013      	ands	r3, r2
 800384a:	b25b      	sxtb	r3, r3
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	701a      	strb	r2, [r3, #0]
		break;
 8003852:	e032      	b.n	80038ba <setErrorLED+0x206>

	case 3:
		if(change){
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <setErrorLED+0x1cc>
			if(led == 7){
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b07      	cmp	r3, #7
 800385e:	d107      	bne.n	8003870 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	4313      	orrs	r3, r2
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 800386e:	e023      	b.n	80038b8 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	4313      	orrs	r3, r2
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	701a      	strb	r2, [r3, #0]
		break;
 800387e:	e01b      	b.n	80038b8 <setErrorLED+0x204>
			if(led == 7){
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b07      	cmp	r3, #7
 8003884:	d10c      	bne.n	80038a0 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b25a      	sxtb	r2, r3
 800388c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003890:	43db      	mvns	r3, r3
 8003892:	b25b      	sxtb	r3, r3
 8003894:	4013      	ands	r3, r2
 8003896:	b25b      	sxtb	r3, r3
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	701a      	strb	r2, [r3, #0]
		break;
 800389e:	e00b      	b.n	80038b8 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b25a      	sxtb	r2, r3
 80038a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	4013      	ands	r3, r2
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]
		break;
 80038b8:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <setErrorLED+0x234>)
 80038bc:	7818      	ldrb	r0, [r3, #0]
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <setErrorLED+0x234>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	7ef9      	ldrb	r1, [r7, #27]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2301      	movs	r3, #1
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f7ff fddb 	bl	8003484 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <setErrorLED+0x234>)
 80038d0:	7818      	ldrb	r0, [r3, #0]
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <setErrorLED+0x234>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	7ef9      	ldrb	r1, [r7, #27]
 80038d8:	2201      	movs	r2, #1
 80038da:	f7ff fd21 	bl	8003320 <readI2CRegister>
 80038de:	60f8      	str	r0, [r7, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000004 	.word	0x20000004

080038ec <getADCValues>:


float* getADCValues(){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b09e      	sub	sp, #120	; 0x78
 80038f0:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 80038f2:	463b      	mov	r3, r7
 80038f4:	2254      	movs	r2, #84	; 0x54
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00e fc9e 	bl	801223a <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 80038fe:	2316      	movs	r3, #22
 8003900:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8003902:	2308      	movs	r3, #8
 8003904:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8003906:	230c      	movs	r3, #12
 8003908:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 800390a:	2300      	movs	r3, #0
 800390c:	677b      	str	r3, [r7, #116]	; 0x74
 800390e:	e171      	b.n	8003bf4 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003910:	4b97      	ldr	r3, [pc, #604]	; (8003b70 <getADCValues+0x284>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003916:	429a      	cmp	r2, r3
 8003918:	d009      	beq.n	800392e <getADCValues+0x42>
 800391a:	4b95      	ldr	r3, [pc, #596]	; (8003b70 <getADCValues+0x284>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003920:	429a      	cmp	r2, r3
 8003922:	d004      	beq.n	800392e <getADCValues+0x42>
 8003924:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <getADCValues+0x284>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800392a:	429a      	cmp	r2, r3
 800392c:	d102      	bne.n	8003934 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 800392e:	2300      	movs	r3, #0
 8003930:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003932:	e071      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003934:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <getADCValues+0x284>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800393a:	429a      	cmp	r2, r3
 800393c:	d009      	beq.n	8003952 <getADCValues+0x66>
 800393e:	4b8c      	ldr	r3, [pc, #560]	; (8003b70 <getADCValues+0x284>)
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003944:	429a      	cmp	r2, r3
 8003946:	d004      	beq.n	8003952 <getADCValues+0x66>
 8003948:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <getADCValues+0x284>)
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800394e:	429a      	cmp	r2, r3
 8003950:	d102      	bne.n	8003958 <getADCValues+0x6c>
			adcIndex=2;
 8003952:	2302      	movs	r3, #2
 8003954:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003956:	e05f      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003958:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <getADCValues+0x284>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800395e:	429a      	cmp	r2, r3
 8003960:	d009      	beq.n	8003976 <getADCValues+0x8a>
 8003962:	4b83      	ldr	r3, [pc, #524]	; (8003b70 <getADCValues+0x284>)
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003968:	429a      	cmp	r2, r3
 800396a:	d004      	beq.n	8003976 <getADCValues+0x8a>
 800396c:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <getADCValues+0x284>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003972:	429a      	cmp	r2, r3
 8003974:	d102      	bne.n	800397c <getADCValues+0x90>
			adcIndex=4;
 8003976:	2304      	movs	r3, #4
 8003978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800397a:	e04d      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 800397c:	4b7c      	ldr	r3, [pc, #496]	; (8003b70 <getADCValues+0x284>)
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003982:	429a      	cmp	r2, r3
 8003984:	d009      	beq.n	800399a <getADCValues+0xae>
 8003986:	4b7a      	ldr	r3, [pc, #488]	; (8003b70 <getADCValues+0x284>)
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800398c:	429a      	cmp	r2, r3
 800398e:	d004      	beq.n	800399a <getADCValues+0xae>
 8003990:	4b77      	ldr	r3, [pc, #476]	; (8003b70 <getADCValues+0x284>)
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003996:	429a      	cmp	r2, r3
 8003998:	d102      	bne.n	80039a0 <getADCValues+0xb4>
			adcIndex=6;
 800399a:	2306      	movs	r3, #6
 800399c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800399e:	e03b      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 80039a0:	4b73      	ldr	r3, [pc, #460]	; (8003b70 <getADCValues+0x284>)
 80039a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d004      	beq.n	80039b4 <getADCValues+0xc8>
 80039aa:	4b71      	ldr	r3, [pc, #452]	; (8003b70 <getADCValues+0x284>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d102      	bne.n	80039ba <getADCValues+0xce>
			adcIndex=8;
 80039b4:	2308      	movs	r3, #8
 80039b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039b8:	e02e      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <getADCValues+0x284>)
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d004      	beq.n	80039ce <getADCValues+0xe2>
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <getADCValues+0x284>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d102      	bne.n	80039d4 <getADCValues+0xe8>
			adcIndex=10;
 80039ce:	230a      	movs	r3, #10
 80039d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d2:	e021      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 80039d4:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <getADCValues+0x284>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039da:	429a      	cmp	r2, r3
 80039dc:	d102      	bne.n	80039e4 <getADCValues+0xf8>
			adcIndex=12;
 80039de:	230c      	movs	r3, #12
 80039e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039e2:	e019      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 80039e4:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <getADCValues+0x284>)
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d102      	bne.n	80039f4 <getADCValues+0x108>
			adcIndex=14;
 80039ee:	230e      	movs	r3, #14
 80039f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f2:	e011      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 80039f4:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <getADCValues+0x284>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d102      	bne.n	8003a04 <getADCValues+0x118>
			adcIndex=16;
 80039fe:	2310      	movs	r3, #16
 8003a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a02:	e009      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003a04:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <getADCValues+0x284>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d102      	bne.n	8003a14 <getADCValues+0x128>
			adcIndex=18;
 8003a0e:	2312      	movs	r3, #18
 8003a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a12:	e001      	b.n	8003a18 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8003a14:	2314      	movs	r3, #20
 8003a16:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003a18:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <getADCValues+0x284>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d00e      	beq.n	8003a40 <getADCValues+0x154>
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <getADCValues+0x284>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d009      	beq.n	8003a40 <getADCValues+0x154>
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <getADCValues+0x284>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d004      	beq.n	8003a40 <getADCValues+0x154>
 8003a36:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <getADCValues+0x284>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d13a      	bne.n	8003ab6 <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003a40:	2300      	movs	r3, #0
 8003a42:	673b      	str	r3, [r7, #112]	; 0x70
 8003a44:	e033      	b.n	8003aae <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 8003a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a50:	4413      	add	r3, r2
 8003a52:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8003a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a62:	4944      	ldr	r1, [pc, #272]	; (8003b74 <getADCValues+0x288>)
 8003a64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a66:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003a74:	440b      	add	r3, r1
 8003a76:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7c:	2b13      	cmp	r3, #19
 8003a7e:	d113      	bne.n	8003aa8 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003a88:	4413      	add	r3, r2
 8003a8a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <getADCValues+0x28c>)
 8003a90:	fb82 1203 	smull	r1, r2, r2, r3
 8003a94:	10d2      	asrs	r2, r2, #3
 8003a96:	17db      	asrs	r3, r3, #31
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aaa:	3301      	adds	r3, #1
 8003aac:	673b      	str	r3, [r7, #112]	; 0x70
 8003aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab0:	2b13      	cmp	r3, #19
 8003ab2:	ddc8      	ble.n	8003a46 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003ab4:	e09b      	b.n	8003bee <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <getADCValues+0x284>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d018      	beq.n	8003af2 <getADCValues+0x206>
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <getADCValues+0x284>)
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d013      	beq.n	8003af2 <getADCValues+0x206>
 8003aca:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <getADCValues+0x284>)
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d00e      	beq.n	8003af2 <getADCValues+0x206>
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <getADCValues+0x284>)
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d009      	beq.n	8003af2 <getADCValues+0x206>
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <getADCValues+0x284>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d004      	beq.n	8003af2 <getADCValues+0x206>
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <getADCValues+0x284>)
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d13a      	bne.n	8003b68 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003af2:	2300      	movs	r3, #0
 8003af4:	673b      	str	r3, [r7, #112]	; 0x70
 8003af6:	e033      	b.n	8003b60 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8003af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b02:	4413      	add	r3, r2
 8003b04:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8003b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b0e:	4413      	add	r3, r2
 8003b10:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b14:	4919      	ldr	r1, [pc, #100]	; (8003b7c <getADCValues+0x290>)
 8003b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b18:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003b1c:	441a      	add	r2, r3
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b26:	440b      	add	r3, r1
 8003b28:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2e:	2b13      	cmp	r3, #19
 8003b30:	d113      	bne.n	8003b5a <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <getADCValues+0x28c>)
 8003b42:	fb82 1203 	smull	r1, r2, r2, r3
 8003b46:	10d2      	asrs	r2, r2, #3
 8003b48:	17db      	asrs	r3, r3, #31
 8003b4a:	1ad2      	subs	r2, r2, r3
 8003b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b54:	440b      	add	r3, r1
 8003b56:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b62:	2b13      	cmp	r3, #19
 8003b64:	ddc8      	ble.n	8003af8 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003b66:	e042      	b.n	8003bee <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003b68:	2300      	movs	r3, #0
 8003b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b6c:	e03c      	b.n	8003be8 <getADCValues+0x2fc>
 8003b6e:	bf00      	nop
 8003b70:	2000007c 	.word	0x2000007c
 8003b74:	2002e2a4 	.word	0x2002e2a4
 8003b78:	66666667 	.word	0x66666667
 8003b7c:	2002bb00 	.word	0x2002bb00
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b8a:	4413      	add	r3, r2
 8003b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b96:	4413      	add	r3, r2
 8003b98:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003b9c:	49c9      	ldr	r1, [pc, #804]	; (8003ec4 <getADCValues+0x5d8>)
 8003b9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ba0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003bae:	440b      	add	r3, r1
 8003bb0:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb6:	2b13      	cmp	r3, #19
 8003bb8:	d113      	bne.n	8003be2 <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003bc8:	4abf      	ldr	r2, [pc, #764]	; (8003ec8 <getADCValues+0x5dc>)
 8003bca:	fb82 1203 	smull	r1, r2, r2, r3
 8003bce:	10d2      	asrs	r2, r2, #3
 8003bd0:	17db      	asrs	r3, r3, #31
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003bdc:	440b      	add	r3, r1
 8003bde:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be4:	3301      	adds	r3, #1
 8003be6:	673b      	str	r3, [r7, #112]	; 0x70
 8003be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bea:	2b13      	cmp	r3, #19
 8003bec:	ddc8      	ble.n	8003b80 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	677b      	str	r3, [r7, #116]	; 0x74
 8003bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf6:	2b14      	cmp	r3, #20
 8003bf8:	f77f ae8a 	ble.w	8003910 <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003bfc:	4bb3      	ldr	r3, [pc, #716]	; (8003ecc <getADCValues+0x5e0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c06:	4413      	add	r3, r2
 8003c08:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c14:	4bad      	ldr	r3, [pc, #692]	; (8003ecc <getADCValues+0x5e0>)
 8003c16:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c1e:	4bab      	ldr	r3, [pc, #684]	; (8003ecc <getADCValues+0x5e0>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2a:	4ba8      	ldr	r3, [pc, #672]	; (8003ecc <getADCValues+0x5e0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	4aa7      	ldr	r2, [pc, #668]	; (8003ed0 <getADCValues+0x5e4>)
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003c3c:	4ba3      	ldr	r3, [pc, #652]	; (8003ecc <getADCValues+0x5e0>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c46:	4413      	add	r3, r2
 8003c48:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c54:	4b9d      	ldr	r3, [pc, #628]	; (8003ecc <getADCValues+0x5e0>)
 8003c56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c5e:	4b9b      	ldr	r3, [pc, #620]	; (8003ecc <getADCValues+0x5e0>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6a:	4b98      	ldr	r3, [pc, #608]	; (8003ecc <getADCValues+0x5e0>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	4a97      	ldr	r2, [pc, #604]	; (8003ed0 <getADCValues+0x5e4>)
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003c7c:	4b93      	ldr	r3, [pc, #588]	; (8003ecc <getADCValues+0x5e0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c86:	4413      	add	r3, r2
 8003c88:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c94:	4b8d      	ldr	r3, [pc, #564]	; (8003ecc <getADCValues+0x5e0>)
 8003c96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ecc <getADCValues+0x5e0>)
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003caa:	4b88      	ldr	r3, [pc, #544]	; (8003ecc <getADCValues+0x5e0>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	4a87      	ldr	r2, [pc, #540]	; (8003ed0 <getADCValues+0x5e4>)
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003cbc:	4b83      	ldr	r3, [pc, #524]	; (8003ecc <getADCValues+0x5e0>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd4:	4b7d      	ldr	r3, [pc, #500]	; (8003ecc <getADCValues+0x5e0>)
 8003cd6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cde:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <getADCValues+0x5e0>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cea:	4b78      	ldr	r3, [pc, #480]	; (8003ecc <getADCValues+0x5e0>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <getADCValues+0x5e4>)
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003cfc:	4b73      	ldr	r3, [pc, #460]	; (8003ecc <getADCValues+0x5e0>)
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d06:	4413      	add	r3, r2
 8003d08:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d0c:	ee07 3a90 	vmov	s15, r3
 8003d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d14:	4b6d      	ldr	r3, [pc, #436]	; (8003ecc <getADCValues+0x5e0>)
 8003d16:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d1e:	4b6b      	ldr	r3, [pc, #428]	; (8003ecc <getADCValues+0x5e0>)
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d2a:	4b68      	ldr	r3, [pc, #416]	; (8003ecc <getADCValues+0x5e0>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d32:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <getADCValues+0x5e4>)
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d3c:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <getADCValues+0x5e0>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d46:	4413      	add	r3, r2
 8003d48:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d54:	4b5d      	ldr	r3, [pc, #372]	; (8003ecc <getADCValues+0x5e0>)
 8003d56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <getADCValues+0x5e0>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <getADCValues+0x5e0>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	4a57      	ldr	r2, [pc, #348]	; (8003ed0 <getADCValues+0x5e4>)
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003d7c:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <getADCValues+0x5e0>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d86:	4413      	add	r3, r2
 8003d88:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d94:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <getADCValues+0x5e0>)
 8003d96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <getADCValues+0x5e0>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003daa:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <getADCValues+0x5e0>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	4a47      	ldr	r2, [pc, #284]	; (8003ed0 <getADCValues+0x5e4>)
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003dbc:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <getADCValues+0x5e0>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd4:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <getADCValues+0x5e0>)
 8003dd6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <getADCValues+0x5e0>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dea:	4b38      	ldr	r3, [pc, #224]	; (8003ecc <getADCValues+0x5e0>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <getADCValues+0x5e4>)
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003dfc:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <getADCValues+0x5e0>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e06:	4413      	add	r3, r2
 8003e08:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e14:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <getADCValues+0x5e0>)
 8003e16:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <getADCValues+0x5e0>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <getADCValues+0x5e0>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <getADCValues+0x5e4>)
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <getADCValues+0x5e0>)
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e46:	4413      	add	r3, r2
 8003e48:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <getADCValues+0x5e0>)
 8003e56:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <getADCValues+0x5e0>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <getADCValues+0x5e0>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <getADCValues+0x5e4>)
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <getADCValues+0x5e0>)
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e86:	4413      	add	r3, r2
 8003e88:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <getADCValues+0x5e0>)
 8003e96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <getADCValues+0x5e0>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <getADCValues+0x5e0>)
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <getADCValues+0x5e4>)
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <getADCValues+0x5e0>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	e007      	b.n	8003ed4 <getADCValues+0x5e8>
 8003ec4:	20029244 	.word	0x20029244
 8003ec8:	66666667 	.word	0x66666667
 8003ecc:	2000007c 	.word	0x2000007c
 8003ed0:	20003300 	.word	0x20003300
 8003ed4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ed8:	4413      	add	r3, r2
 8003eda:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee6:	4b9c      	ldr	r3, [pc, #624]	; (8004158 <getADCValues+0x86c>)
 8003ee8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef0:	4b99      	ldr	r3, [pc, #612]	; (8004158 <getADCValues+0x86c>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efc:	4b96      	ldr	r3, [pc, #600]	; (8004158 <getADCValues+0x86c>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f04:	4a95      	ldr	r2, [pc, #596]	; (800415c <getADCValues+0x870>)
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f0e:	4b92      	ldr	r3, [pc, #584]	; (8004158 <getADCValues+0x86c>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f18:	4413      	add	r3, r2
 8003f1a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f26:	4b8c      	ldr	r3, [pc, #560]	; (8004158 <getADCValues+0x86c>)
 8003f28:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f30:	4b89      	ldr	r3, [pc, #548]	; (8004158 <getADCValues+0x86c>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3c:	4b86      	ldr	r3, [pc, #536]	; (8004158 <getADCValues+0x86c>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f44:	4a85      	ldr	r2, [pc, #532]	; (800415c <getADCValues+0x870>)
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f4e:	4b82      	ldr	r3, [pc, #520]	; (8004158 <getADCValues+0x86c>)
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f58:	4413      	add	r3, r2
 8003f5a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f66:	4b7c      	ldr	r3, [pc, #496]	; (8004158 <getADCValues+0x86c>)
 8003f68:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f70:	4b79      	ldr	r3, [pc, #484]	; (8004158 <getADCValues+0x86c>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f7c:	4b76      	ldr	r3, [pc, #472]	; (8004158 <getADCValues+0x86c>)
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f84:	4a75      	ldr	r2, [pc, #468]	; (800415c <getADCValues+0x870>)
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <getADCValues+0x86c>)
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f98:	4413      	add	r3, r2
 8003f9a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <getADCValues+0x86c>)
 8003fa8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fb0:	4b69      	ldr	r3, [pc, #420]	; (8004158 <getADCValues+0x86c>)
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbc:	4b66      	ldr	r3, [pc, #408]	; (8004158 <getADCValues+0x86c>)
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	4a65      	ldr	r2, [pc, #404]	; (800415c <getADCValues+0x870>)
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fce:	4b62      	ldr	r3, [pc, #392]	; (8004158 <getADCValues+0x86c>)
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003fd8:	4413      	add	r3, r2
 8003fda:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	; (8004158 <getADCValues+0x86c>)
 8003fe8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ff0:	4b59      	ldr	r3, [pc, #356]	; (8004158 <getADCValues+0x86c>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffc:	4b56      	ldr	r3, [pc, #344]	; (8004158 <getADCValues+0x86c>)
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004004:	4a55      	ldr	r2, [pc, #340]	; (800415c <getADCValues+0x870>)
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800400e:	4b52      	ldr	r3, [pc, #328]	; (8004158 <getADCValues+0x86c>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004018:	4413      	add	r3, r2
 800401a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004026:	4b4c      	ldr	r3, [pc, #304]	; (8004158 <getADCValues+0x86c>)
 8004028:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800402c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004030:	4b49      	ldr	r3, [pc, #292]	; (8004158 <getADCValues+0x86c>)
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <getADCValues+0x86c>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004044:	4a45      	ldr	r2, [pc, #276]	; (800415c <getADCValues+0x870>)
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800404e:	4b42      	ldr	r3, [pc, #264]	; (8004158 <getADCValues+0x86c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004058:	4413      	add	r3, r2
 800405a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004066:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <getADCValues+0x86c>)
 8004068:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800406c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <getADCValues+0x86c>)
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <getADCValues+0x86c>)
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004084:	4a35      	ldr	r2, [pc, #212]	; (800415c <getADCValues+0x870>)
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800408e:	4b32      	ldr	r3, [pc, #200]	; (8004158 <getADCValues+0x86c>)
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004098:	4413      	add	r3, r2
 800409a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a6:	4b2c      	ldr	r3, [pc, #176]	; (8004158 <getADCValues+0x86c>)
 80040a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040b0:	4b29      	ldr	r3, [pc, #164]	; (8004158 <getADCValues+0x86c>)
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040bc:	4b26      	ldr	r3, [pc, #152]	; (8004158 <getADCValues+0x86c>)
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <getADCValues+0x870>)
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80040ce:	4b22      	ldr	r3, [pc, #136]	; (8004158 <getADCValues+0x86c>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040d8:	4413      	add	r3, r2
 80040da:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <getADCValues+0x86c>)
 80040e8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <getADCValues+0x86c>)
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <getADCValues+0x86c>)
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <getADCValues+0x870>)
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <getADCValues+0x86c>)
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004118:	4413      	add	r3, r2
 800411a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <getADCValues+0x86c>)
 8004128:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800412c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <getADCValues+0x86c>)
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <getADCValues+0x86c>)
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004144:	4a05      	ldr	r2, [pc, #20]	; (800415c <getADCValues+0x870>)
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 800414e:	4b03      	ldr	r3, [pc, #12]	; (800415c <getADCValues+0x870>)
}
 8004150:	4618      	mov	r0, r3
 8004152:	3778      	adds	r7, #120	; 0x78
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2000007c 	.word	0x2000007c
 800415c:	20003300 	.word	0x20003300

08004160 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800417c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004180:	4803      	ldr	r0, [pc, #12]	; (8004190 <startHeartbeat+0x1c>)
 8004182:	f006 fab2 	bl	800a6ea <HAL_GPIO_TogglePin>
	  osDelay(500);
 8004186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800418a:	f00b fa23 	bl	800f5d4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800418e:	e7f5      	b.n	800417c <startHeartbeat+0x8>
 8004190:	40022000 	.word	0x40022000

08004194 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 800419c:	2203      	movs	r2, #3
 800419e:	2100      	movs	r1, #0
 80041a0:	4815      	ldr	r0, [pc, #84]	; (80041f8 <startADCRead+0x64>)
 80041a2:	f00e f84a 	bl	801223a <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 80041a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80041aa:	2100      	movs	r1, #0
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <startADCRead+0x68>)
 80041ae:	f00e f844 	bl	801223a <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80041b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80041b6:	2100      	movs	r1, #0
 80041b8:	4811      	ldr	r0, [pc, #68]	; (8004200 <startADCRead+0x6c>)
 80041ba:	f00e f83e 	bl	801223a <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80041be:	f242 7210 	movw	r2, #10000	; 0x2710
 80041c2:	2100      	movs	r1, #0
 80041c4:	480f      	ldr	r0, [pc, #60]	; (8004204 <startADCRead+0x70>)
 80041c6:	f00e f838 	bl	801223a <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	490b      	ldr	r1, [pc, #44]	; (80041fc <startADCRead+0x68>)
 80041d0:	480d      	ldr	r0, [pc, #52]	; (8004208 <startADCRead+0x74>)
 80041d2:	f004 ff9f 	bl	8009114 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4909      	ldr	r1, [pc, #36]	; (8004200 <startADCRead+0x6c>)
 80041dc:	480b      	ldr	r0, [pc, #44]	; (800420c <startADCRead+0x78>)
 80041de:	f004 ff99 	bl	8009114 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4907      	ldr	r1, [pc, #28]	; (8004204 <startADCRead+0x70>)
 80041e8:	4809      	ldr	r0, [pc, #36]	; (8004210 <startADCRead+0x7c>)
 80041ea:	f004 ff93 	bl	8009114 <HAL_ADC_Start_DMA>
    osDelay(600);
 80041ee:	f44f 7016 	mov.w	r0, #600	; 0x258
 80041f2:	f00b f9ef 	bl	800f5d4 <osDelay>
	memset(adcRestart,0,sizeof(adcRestart));
 80041f6:	e7d1      	b.n	800419c <startADCRead+0x8>
 80041f8:	20029200 	.word	0x20029200
 80041fc:	20029244 	.word	0x20029244
 8004200:	2002e2a4 	.word	0x2002e2a4
 8004204:	2002bb00 	.word	0x2002bb00
 8004208:	2002b9d8 	.word	0x2002b9d8
 800420c:	20028cbc 	.word	0x20028cbc
 8004210:	2002ba24 	.word	0x2002ba24

08004214 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
	 int x = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
	 float *adcValues;
	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8004220:	f000 fd1c 	bl	8004c5c <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	737b      	strb	r3, [r7, #13]
	 int *readI2c;
	 int zionCleared=0;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
	   for(;;)
	   {
		if((ZION.zionFinished) && (!zionCleared)){
 8004234:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <GetDaScreenBlink+0xd4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d004      	beq.n	8004246 <GetDaScreenBlink+0x32>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <GetDaScreenBlink+0x32>
				  //osThreadSuspend(zionReadHandle);
				  zionCleared=1;
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
		}
	 	  ulNotifiedValue = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 800424a:	f107 0208 	add.w	r2, r7, #8
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	21ff      	movs	r1, #255	; 0xff
 8004254:	2000      	movs	r0, #0
 8004256:	f00c fef3 	bl	8011040 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	737b      	strb	r3, [r7, #13]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 800427c:	7b7b      	ldrb	r3, [r7, #13]
 800427e:	3b01      	subs	r3, #1
 8004280:	2b03      	cmp	r3, #3
 8004282:	d82d      	bhi.n	80042e0 <GetDaScreenBlink+0xcc>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <GetDaScreenBlink+0x78>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042b1 	.word	0x080042b1
 8004290:	0800429d 	.word	0x0800429d
 8004294:	080042c1 	.word	0x080042c1
 8004298:	080042d1 	.word	0x080042d1
		  {
		  case BOOT_MENU:
		  {
			  printf("BOOT_MENU\r\n");
 800429c:	4813      	ldr	r0, [pc, #76]	; (80042ec <GetDaScreenBlink+0xd8>)
 800429e:	f00e fe43 	bl	8012f28 <puts>
			  drawBootMenu(menu_val, button_val, running_menu);
 80042a2:	7bbb      	ldrb	r3, [r7, #14]
 80042a4:	7b7a      	ldrb	r2, [r7, #13]
 80042a6:	7bf9      	ldrb	r1, [r7, #15]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f002 fd81 	bl	8006db0 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 80042ae:	e017      	b.n	80042e0 <GetDaScreenBlink+0xcc>
		  }
		  case MAIN_MENU:
		  {
			  printf("MAIN_MENU\r\n");
 80042b0:	480f      	ldr	r0, [pc, #60]	; (80042f0 <GetDaScreenBlink+0xdc>)
 80042b2:	f00e fe39 	bl	8012f28 <puts>
			  drawMainMenu(menu_val);
 80042b6:	7bbb      	ldrb	r3, [r7, #14]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fcf9 	bl	8004cb0 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 80042be:	e00f      	b.n	80042e0 <GetDaScreenBlink+0xcc>
		  }
		  case STATUS_MENU:
		  {
			  printf("STATUS_MENU\r\n");
 80042c0:	480c      	ldr	r0, [pc, #48]	; (80042f4 <GetDaScreenBlink+0xe0>)
 80042c2:	f00e fe31 	bl	8012f28 <puts>
			  drawStatusMenu(menu_val);
 80042c6:	7bbb      	ldrb	r3, [r7, #14]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 f80b 	bl	80052e4 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 80042ce:	e007      	b.n	80042e0 <GetDaScreenBlink+0xcc>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  printf("SYSTEM INFO MENU\r\n");
 80042d0:	4809      	ldr	r0, [pc, #36]	; (80042f8 <GetDaScreenBlink+0xe4>)
 80042d2:	f00e fe29 	bl	8012f28 <puts>
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	4618      	mov	r0, r3
 80042da:	f002 f919 	bl	8006510 <drawSystemInfoMenu>
			  break;
 80042de:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 80042e0:	2064      	movs	r0, #100	; 0x64
 80042e2:	f00b f977 	bl	800f5d4 <osDelay>
		if((ZION.zionFinished) && (!zionCleared)){
 80042e6:	e7a5      	b.n	8004234 <GetDaScreenBlink+0x20>
 80042e8:	20003284 	.word	0x20003284
 80042ec:	08016308 	.word	0x08016308
 80042f0:	08016314 	.word	0x08016314
 80042f4:	08016320 	.word	0x08016320
 80042f8:	08016330 	.word	0x08016330

080042fc <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <startGpioInputRead+0x114>)
 8004306:	681c      	ldr	r4, [r3, #0]
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	4842      	ldr	r0, [pc, #264]	; (8004414 <startGpioInputRead+0x118>)
 800430c:	f006 f9bc 	bl	800a688 <HAL_GPIO_ReadPin>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	4b40      	ldr	r3, [pc, #256]	; (8004418 <startGpioInputRead+0x11c>)
 8004316:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004318:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <startGpioInputRead+0x114>)
 800431a:	685c      	ldr	r4, [r3, #4]
 800431c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004320:	483e      	ldr	r0, [pc, #248]	; (800441c <startGpioInputRead+0x120>)
 8004322:	f006 f9b1 	bl	800a688 <HAL_GPIO_ReadPin>
 8004326:	4603      	mov	r3, r0
 8004328:	461a      	mov	r2, r3
 800432a:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <startGpioInputRead+0x11c>)
 800432c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 800432e:	4b38      	ldr	r3, [pc, #224]	; (8004410 <startGpioInputRead+0x114>)
 8004330:	689c      	ldr	r4, [r3, #8]
 8004332:	2110      	movs	r1, #16
 8004334:	483a      	ldr	r0, [pc, #232]	; (8004420 <startGpioInputRead+0x124>)
 8004336:	f006 f9a7 	bl	800a688 <HAL_GPIO_ReadPin>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	4b36      	ldr	r3, [pc, #216]	; (8004418 <startGpioInputRead+0x11c>)
 8004340:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <startGpioInputRead+0x114>)
 8004344:	68dc      	ldr	r4, [r3, #12]
 8004346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800434a:	4835      	ldr	r0, [pc, #212]	; (8004420 <startGpioInputRead+0x124>)
 800434c:	f006 f99c 	bl	800a688 <HAL_GPIO_ReadPin>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	4b30      	ldr	r3, [pc, #192]	; (8004418 <startGpioInputRead+0x11c>)
 8004356:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004358:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <startGpioInputRead+0x114>)
 800435a:	691c      	ldr	r4, [r3, #16]
 800435c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004360:	482f      	ldr	r0, [pc, #188]	; (8004420 <startGpioInputRead+0x124>)
 8004362:	f006 f991 	bl	800a688 <HAL_GPIO_ReadPin>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <startGpioInputRead+0x11c>)
 800436c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <startGpioInputRead+0x114>)
 8004370:	695c      	ldr	r4, [r3, #20]
 8004372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004376:	482a      	ldr	r0, [pc, #168]	; (8004420 <startGpioInputRead+0x124>)
 8004378:	f006 f986 	bl	800a688 <HAL_GPIO_ReadPin>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <startGpioInputRead+0x11c>)
 8004382:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004384:	4b22      	ldr	r3, [pc, #136]	; (8004410 <startGpioInputRead+0x114>)
 8004386:	699c      	ldr	r4, [r3, #24]
 8004388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800438c:	4824      	ldr	r0, [pc, #144]	; (8004420 <startGpioInputRead+0x124>)
 800438e:	f006 f97b 	bl	800a688 <HAL_GPIO_ReadPin>
 8004392:	4603      	mov	r3, r0
 8004394:	461a      	mov	r2, r3
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <startGpioInputRead+0x11c>)
 8004398:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <startGpioInputRead+0x114>)
 800439c:	69dc      	ldr	r4, [r3, #28]
 800439e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043a2:	481f      	ldr	r0, [pc, #124]	; (8004420 <startGpioInputRead+0x124>)
 80043a4:	f006 f970 	bl	800a688 <HAL_GPIO_ReadPin>
 80043a8:	4603      	mov	r3, r0
 80043aa:	461a      	mov	r2, r3
 80043ac:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <startGpioInputRead+0x11c>)
 80043ae:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <startGpioInputRead+0x114>)
 80043b2:	6a1c      	ldr	r4, [r3, #32]
 80043b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043b8:	4819      	ldr	r0, [pc, #100]	; (8004420 <startGpioInputRead+0x124>)
 80043ba:	f006 f965 	bl	800a688 <HAL_GPIO_ReadPin>
 80043be:	4603      	mov	r3, r0
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <startGpioInputRead+0x11c>)
 80043c4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <startGpioInputRead+0x114>)
 80043c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80043ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043ce:	4814      	ldr	r0, [pc, #80]	; (8004420 <startGpioInputRead+0x124>)
 80043d0:	f006 f95a 	bl	800a688 <HAL_GPIO_ReadPin>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <startGpioInputRead+0x11c>)
 80043da:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <startGpioInputRead+0x114>)
 80043de:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80043e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043e4:	480e      	ldr	r0, [pc, #56]	; (8004420 <startGpioInputRead+0x124>)
 80043e6:	f006 f94f 	bl	800a688 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <startGpioInputRead+0x11c>)
 80043f0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <startGpioInputRead+0x114>)
 80043f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80043f6:	2108      	movs	r1, #8
 80043f8:	480a      	ldr	r0, [pc, #40]	; (8004424 <startGpioInputRead+0x128>)
 80043fa:	f006 f945 	bl	800a688 <HAL_GPIO_ReadPin>
 80043fe:	4603      	mov	r3, r0
 8004400:	461a      	mov	r2, r3
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <startGpioInputRead+0x11c>)
 8004404:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004406:	f240 30b6 	movw	r0, #950	; 0x3b6
 800440a:	f00b f8e3 	bl	800f5d4 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 800440e:	e779      	b.n	8004304 <startGpioInputRead+0x8>
 8004410:	20000014 	.word	0x20000014
 8004414:	40020400 	.word	0x40020400
 8004418:	20028cb0 	.word	0x20028cb0
 800441c:	40020800 	.word	0x40020800
 8004420:	40020c00 	.word	0x40020c00
 8004424:	40021000 	.word	0x40021000

08004428 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004434:	2301      	movs	r3, #1
 8004436:	75bb      	strb	r3, [r7, #22]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004438:	7dbb      	ldrb	r3, [r7, #22]
 800443a:	757b      	strb	r3, [r7, #21]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 800443c:	2303      	movs	r3, #3
 800443e:	753b      	strb	r3, [r7, #20]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	74fb      	strb	r3, [r7, #19]
	int zionCleared=0;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004448:	4b55      	ldr	r3, [pc, #340]	; (80045a0 <startNavigationTask+0x178>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	3b01      	subs	r3, #1
 800444e:	2b03      	cmp	r3, #3
 8004450:	d86f      	bhi.n	8004532 <startNavigationTask+0x10a>
 8004452:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <startNavigationTask+0x30>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	08004469 	.word	0x08004469
 800445c:	0800449b 	.word	0x0800449b
 8004460:	080044cf 	.word	0x080044cf
 8004464:	080044fd 	.word	0x080044fd
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d070      	beq.n	8004550 <startNavigationTask+0x128>
 800446e:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <startNavigationTask+0x17c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d16c      	bne.n	8004550 <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	3b01      	subs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800447c:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <startNavigationTask+0x180>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	7dbb      	ldrb	r3, [r7, #22]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	4313      	orrs	r3, r2
 800448e:	4619      	mov	r1, r3
 8004490:	2300      	movs	r3, #0
 8004492:	2204      	movs	r2, #4
 8004494:	f00c fe2e 	bl	80110f4 <xTaskGenericNotify>
		}
		break;
 8004498:	e05a      	b.n	8004550 <startNavigationTask+0x128>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 800449a:	7dfa      	ldrb	r2, [r7, #23]
 800449c:	7d3b      	ldrb	r3, [r7, #20]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d258      	bcs.n	8004554 <startNavigationTask+0x12c>
 80044a2:	4b40      	ldr	r3, [pc, #256]	; (80045a4 <startNavigationTask+0x17c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d154      	bne.n	8004554 <startNavigationTask+0x12c>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	3301      	adds	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <startNavigationTask+0x180>)
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	f043 0202 	orr.w	r2, r3, #2
 80044bc:	7dbb      	ldrb	r3, [r7, #22]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	4313      	orrs	r3, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	2300      	movs	r3, #0
 80044c6:	2204      	movs	r2, #4
 80044c8:	f00c fe14 	bl	80110f4 <xTaskGenericNotify>
		}
		break;
 80044cc:	e042      	b.n	8004554 <startNavigationTask+0x12c>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 80044ce:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <startNavigationTask+0x17c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <startNavigationTask+0xb6>
			menu_run = prev_menu;
 80044d6:	7d7b      	ldrb	r3, [r7, #21]
 80044d8:	75bb      	strb	r3, [r7, #22]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 80044da:	7cfb      	ldrb	r3, [r7, #19]
 80044dc:	75fb      	strb	r3, [r7, #23]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80044de:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <startNavigationTask+0x180>)
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	f043 0203 	orr.w	r2, r3, #3
 80044ea:	7dbb      	ldrb	r3, [r7, #22]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	4313      	orrs	r3, r2
 80044f0:	4619      	mov	r1, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	2204      	movs	r2, #4
 80044f6:	f00c fdfd 	bl	80110f4 <xTaskGenericNotify>
		break;
 80044fa:	e02c      	b.n	8004556 <startNavigationTask+0x12e>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 80044fc:	7dbb      	ldrb	r3, [r7, #22]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d108      	bne.n	8004514 <startNavigationTask+0xec>
			prev_menu = menu_run;		// save currently running menu for BACK button
 8004502:	7dbb      	ldrb	r3, [r7, #22]
 8004504:	757b      	strb	r3, [r7, #21]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	3301      	adds	r3, #1
 800450a:	75bb      	strb	r3, [r7, #22]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	74fb      	strb	r3, [r7, #19]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004510:	2301      	movs	r3, #1
 8004512:	75fb      	strb	r3, [r7, #23]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <startNavigationTask+0x180>)
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	7dbb      	ldrb	r3, [r7, #22]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	4313      	orrs	r3, r2
 8004526:	4619      	mov	r1, r3
 8004528:	2300      	movs	r3, #0
 800452a:	2204      	movs	r2, #4
 800452c:	f00c fde2 	bl	80110f4 <xTaskGenericNotify>
		break;
 8004530:	e011      	b.n	8004556 <startNavigationTask+0x12e>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <startNavigationTask+0x180>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	f043 0205 	orr.w	r2, r3, #5
 800453e:	7dbb      	ldrb	r3, [r7, #22]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	4313      	orrs	r3, r2
 8004544:	4619      	mov	r1, r3
 8004546:	2300      	movs	r3, #0
 8004548:	2204      	movs	r2, #4
 800454a:	f00c fdd3 	bl	80110f4 <xTaskGenericNotify>
		break;
 800454e:	e002      	b.n	8004556 <startNavigationTask+0x12e>
		break;
 8004550:	bf00      	nop
 8004552:	e000      	b.n	8004556 <startNavigationTask+0x12e>
		break;
 8004554:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004556:	7dbb      	ldrb	r3, [r7, #22]
 8004558:	3b01      	subs	r3, #1
 800455a:	2b03      	cmp	r3, #3
 800455c:	d816      	bhi.n	800458c <startNavigationTask+0x164>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <startNavigationTask+0x13c>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	0800457b 	.word	0x0800457b
 8004568:	08004575 	.word	0x08004575
 800456c:	08004581 	.word	0x08004581
 8004570:	08004587 	.word	0x08004587

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004574:	2305      	movs	r3, #5
 8004576:	753b      	strb	r3, [r7, #20]
		break;
 8004578:	e00b      	b.n	8004592 <startNavigationTask+0x16a>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 800457a:	2303      	movs	r3, #3
 800457c:	753b      	strb	r3, [r7, #20]
		break;
 800457e:	e008      	b.n	8004592 <startNavigationTask+0x16a>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 8004580:	2303      	movs	r3, #3
 8004582:	753b      	strb	r3, [r7, #20]
		break;
 8004584:	e005      	b.n	8004592 <startNavigationTask+0x16a>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 8004586:	2302      	movs	r3, #2
 8004588:	753b      	strb	r3, [r7, #20]
		break;
 800458a:	e002      	b.n	8004592 <startNavigationTask+0x16a>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 800458c:	2305      	movs	r3, #5
 800458e:	753b      	strb	r3, [r7, #20]
		break;
 8004590:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 8004592:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <startNavigationTask+0x178>)
 8004594:	2205      	movs	r2, #5
 8004596:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004598:	20c8      	movs	r0, #200	; 0xc8
 800459a:	f00b f81b 	bl	800f5d4 <osDelay>
	switch(inputButtonSet)
 800459e:	e753      	b.n	8004448 <startNavigationTask+0x20>
 80045a0:	200000dc 	.word	0x200000dc
 80045a4:	200032bc 	.word	0x200032bc
 80045a8:	20030a74 	.word	0x20030a74

080045ac <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startErrorLEDs */
  /* Infinite loop */
	int x;
  for(;;)
  {
	  for(x=0;x<12;x++){
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e012      	b.n	80045e0 <startErrorLEDs+0x34>
		  setErrorLED(x, errorLEDState[x]);
 80045ba:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <startErrorLEDs+0x44>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	4619      	mov	r1, r3
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff f870 	bl	80036b4 <setErrorLED>
		  HAL_Delay(10);
 80045d4:	200a      	movs	r0, #10
 80045d6:	f004 fbf5 	bl	8008dc4 <HAL_Delay>
	  for(x=0;x<12;x++){
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b0b      	cmp	r3, #11
 80045e4:	dde9      	ble.n	80045ba <startErrorLEDs+0xe>
	  }
    osDelay(1000);
 80045e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ea:	f00a fff3 	bl	800f5d4 <osDelay>
	  for(x=0;x<12;x++){
 80045ee:	e7e1      	b.n	80045b4 <startErrorLEDs+0x8>
 80045f0:	2002e210 	.word	0x2002e210

080045f4 <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004600:	4b79      	ldr	r3, [pc, #484]	; (80047e8 <startZionRead+0x1f4>)
 8004602:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 8004604:	4b79      	ldr	r3, [pc, #484]	; (80047ec <startZionRead+0x1f8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f040 80e5 	bne.w	80047d8 <startZionRead+0x1e4>
		  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 800460e:	4b78      	ldr	r3, [pc, #480]	; (80047f0 <startZionRead+0x1fc>)
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	4b77      	ldr	r3, [pc, #476]	; (80047f0 <startZionRead+0x1fc>)
 8004614:	785b      	ldrb	r3, [r3, #1]
 8004616:	4013      	ands	r3, r2
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b75      	ldr	r3, [pc, #468]	; (80047f0 <startZionRead+0x1fc>)
 800461c:	789b      	ldrb	r3, [r3, #2]
 800461e:	4013      	ands	r3, r2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 8004626:	f7ff f961 	bl	80038ec <getADCValues>
 800462a:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 800462c:	4b71      	ldr	r3, [pc, #452]	; (80047f4 <startZionRead+0x200>)
 800462e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4413      	add	r3, r2
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 800463a:	edd7 7a06 	vldr	s15, [r7, #24]
 800463e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80047f8 <startZionRead+0x204>
 8004642:	eef4 7a47 	vcmp.f32	s15, s14
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	f000 80c8 	beq.w	80047de <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 800464e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004652:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465e:	dd5d      	ble.n	800471c <startZionRead+0x128>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d15a      	bne.n	800471c <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 8004666:	f004 fba1 	bl	8008dac <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	4b63      	ldr	r3, [pc, #396]	; (80047fc <startZionRead+0x208>)
 800466e:	fba3 2302 	umull	r2, r3, r3, r2
 8004672:	099b      	lsrs	r3, r3, #6
 8004674:	613b      	str	r3, [r7, #16]
				  if(runtime > 15){
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b0f      	cmp	r3, #15
 800467a:	f340 80af 	ble.w	80047dc <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 800467e:	f004 f895 	bl	80087ac <zionEEPROMPresence>
 8004682:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 800468c:	4b57      	ldr	r3, [pc, #348]	; (80047ec <startZionRead+0x1f8>)
 800468e:	2201      	movs	r2, #1
 8004690:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004692:	20a6      	movs	r0, #166	; 0xa6
 8004694:	f004 f8da 	bl	800884c <parseZionEEPROM>
 8004698:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a53      	ldr	r2, [pc, #332]	; (80047ec <startZionRead+0x1f8>)
 80046a0:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	4a51      	ldr	r2, [pc, #324]	; (80047ec <startZionRead+0x1f8>)
 80046a8:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4a4f      	ldr	r2, [pc, #316]	; (80047ec <startZionRead+0x1f8>)
 80046b0:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3304      	adds	r3, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d012      	beq.n	80046e2 <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 80046bc:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <startZionRead+0x1f8>)
 80046be:	2201      	movs	r2, #1
 80046c0:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 80046c2:	20a8      	movs	r0, #168	; 0xa8
 80046c4:	f004 f8c2 	bl	800884c <parseZionEEPROM>
 80046c8:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a47      	ldr	r2, [pc, #284]	; (80047ec <startZionRead+0x1f8>)
 80046d0:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4a45      	ldr	r2, [pc, #276]	; (80047ec <startZionRead+0x1f8>)
 80046d8:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4a43      	ldr	r2, [pc, #268]	; (80047ec <startZionRead+0x1f8>)
 80046e0:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3308      	adds	r3, #8
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d012      	beq.n	8004712 <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 80046ec:	4b3f      	ldr	r3, [pc, #252]	; (80047ec <startZionRead+0x1f8>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 80046f2:	20aa      	movs	r0, #170	; 0xaa
 80046f4:	f004 f8aa 	bl	800884c <parseZionEEPROM>
 80046f8:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a3b      	ldr	r2, [pc, #236]	; (80047ec <startZionRead+0x1f8>)
 8004700:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	4a39      	ldr	r2, [pc, #228]	; (80047ec <startZionRead+0x1f8>)
 8004708:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4a37      	ldr	r2, [pc, #220]	; (80047ec <startZionRead+0x1f8>)
 8004710:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004712:	4b36      	ldr	r3, [pc, #216]	; (80047ec <startZionRead+0x1f8>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004718:	f00a ff56 	bl	800f5c8 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 8004722:	2201      	movs	r2, #1
 8004724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004728:	4835      	ldr	r0, [pc, #212]	; (8004800 <startZionRead+0x20c>)
 800472a:	f005 ffc5 	bl	800a6b8 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 800472e:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <startZionRead+0x1f8>)
 8004730:	2201      	movs	r2, #1
 8004732:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 8004734:	2301      	movs	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	e051      	b.n	80047de <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 800473a:	f004 f837 	bl	80087ac <zionEEPROMPresence>
 800473e:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d012      	beq.n	800476e <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <startZionRead+0x1f8>)
 800474a:	2201      	movs	r2, #1
 800474c:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 800474e:	20a6      	movs	r0, #166	; 0xa6
 8004750:	f004 f87c 	bl	800884c <parseZionEEPROM>
 8004754:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a24      	ldr	r2, [pc, #144]	; (80047ec <startZionRead+0x1f8>)
 800475c:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4a22      	ldr	r2, [pc, #136]	; (80047ec <startZionRead+0x1f8>)
 8004764:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4a20      	ldr	r2, [pc, #128]	; (80047ec <startZionRead+0x1f8>)
 800476c:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3304      	adds	r3, #4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d012      	beq.n	800479e <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <startZionRead+0x1f8>)
 800477a:	2201      	movs	r2, #1
 800477c:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 800477e:	20a8      	movs	r0, #168	; 0xa8
 8004780:	f004 f864 	bl	800884c <parseZionEEPROM>
 8004784:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a18      	ldr	r2, [pc, #96]	; (80047ec <startZionRead+0x1f8>)
 800478c:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <startZionRead+0x1f8>)
 8004794:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a14      	ldr	r2, [pc, #80]	; (80047ec <startZionRead+0x1f8>)
 800479c:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3308      	adds	r3, #8
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <startZionRead+0x1f8>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 80047ae:	20aa      	movs	r0, #170	; 0xaa
 80047b0:	f004 f84c 	bl	800884c <parseZionEEPROM>
 80047b4:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <startZionRead+0x1f8>)
 80047bc:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <startZionRead+0x1f8>)
 80047c4:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <startZionRead+0x1f8>)
 80047cc:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <startZionRead+0x1f8>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 80047d4:	f00a fef8 	bl	800f5c8 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 80047d8:	f00a fef6 	bl	800f5c8 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 80047dc:	bf00      	nop
	  }
    osDelay(400);
 80047de:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80047e2:	f00a fef7 	bl	800f5d4 <osDelay>
	  if(!ZION.zionFinished){
 80047e6:	e70d      	b.n	8004604 <startZionRead+0x10>
 80047e8:	429a0000 	.word	0x429a0000
 80047ec:	20003284 	.word	0x20003284
 80047f0:	20029200 	.word	0x20029200
 80047f4:	2000007c 	.word	0x2000007c
 80047f8:	429a0000 	.word	0x429a0000
 80047fc:	10624dd3 	.word	0x10624dd3
 8004800:	40020400 	.word	0x40020400

08004804 <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
	int pwrOn=0;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
	int presentTime=0;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 800481c:	4b92      	ldr	r3, [pc, #584]	; (8004a68 <startBootButtons+0x264>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 81ed 	beq.w	8004c00 <startBootButtons+0x3fc>
		  presentTime = (HAL_GetTick());
 8004826:	f004 fac1 	bl	8008dac <HAL_GetTick>
 800482a:	4603      	mov	r3, r0
 800482c:	60bb      	str	r3, [r7, #8]
		  if(timeTurnedOn==0){
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <startBootButtons+0x34>
			  timeTurnedOn=presentTime;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	613b      	str	r3, [r7, #16]
		  }
		  if(bootButtons.bootMode !=0){
 8004838:	4b8b      	ldr	r3, [pc, #556]	; (8004a68 <startBootButtons+0x264>)
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80ce 	beq.w	80049de <startBootButtons+0x1da>
			  if(bootButtons.btn1){ //DPAD UP
 8004842:	4b89      	ldr	r3, [pc, #548]	; (8004a68 <startBootButtons+0x264>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <startBootButtons+0x54>
				  BTN1_ON;
 800484a:	2201      	movs	r2, #1
 800484c:	2108      	movs	r1, #8
 800484e:	4887      	ldr	r0, [pc, #540]	; (8004a6c <startBootButtons+0x268>)
 8004850:	f005 ff32 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004854:	2301      	movs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004858:	4b83      	ldr	r3, [pc, #524]	; (8004a68 <startBootButtons+0x264>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <startBootButtons+0x6a>
				  BTN2_ON;
 8004860:	2201      	movs	r2, #1
 8004862:	2110      	movs	r1, #16
 8004864:	4881      	ldr	r0, [pc, #516]	; (8004a6c <startBootButtons+0x268>)
 8004866:	f005 ff27 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 800486a:	2301      	movs	r3, #1
 800486c:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 800486e:	4b7e      	ldr	r3, [pc, #504]	; (8004a68 <startBootButtons+0x264>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d006      	beq.n	8004884 <startBootButtons+0x80>
				  BTN3_ON;
 8004876:	2201      	movs	r2, #1
 8004878:	2120      	movs	r1, #32
 800487a:	487c      	ldr	r0, [pc, #496]	; (8004a6c <startBootButtons+0x268>)
 800487c:	f005 ff1c 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn4){
 8004884:	4b78      	ldr	r3, [pc, #480]	; (8004a68 <startBootButtons+0x264>)
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <startBootButtons+0x98>
				  BTN4_ON;
 800488c:	2201      	movs	r2, #1
 800488e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004892:	4876      	ldr	r0, [pc, #472]	; (8004a6c <startBootButtons+0x268>)
 8004894:	f005 ff10 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn5){
 800489c:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <startBootButtons+0x264>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <startBootButtons+0xb0>
				  BTN5_ON;
 80048a4:	2201      	movs	r2, #1
 80048a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048aa:	4870      	ldr	r0, [pc, #448]	; (8004a6c <startBootButtons+0x268>)
 80048ac:	f005 ff04 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.edl_sw){
 80048b4:	4b6c      	ldr	r3, [pc, #432]	; (8004a68 <startBootButtons+0x264>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <startBootButtons+0xc8>
				  EDL_SW_ON;
 80048bc:	2201      	movs	r2, #1
 80048be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048c2:	486b      	ldr	r0, [pc, #428]	; (8004a70 <startBootButtons+0x26c>)
 80048c4:	f005 fef8 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 80048c8:	2301      	movs	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.ex_sw){
 80048cc:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <startBootButtons+0x264>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <startBootButtons+0xe0>
				  EX_SW_ON;
 80048d4:	2201      	movs	r2, #1
 80048d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048da:	4865      	ldr	r0, [pc, #404]	; (8004a70 <startBootButtons+0x26c>)
 80048dc:	f005 feec 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
			  }
			  setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
 80048e4:	4b63      	ldr	r3, [pc, #396]	; (8004a74 <startBootButtons+0x270>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fbd6 	bl	800309c <setOutputGPIOState>
			  osDelay(500);
 80048f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048f4:	f00a fe6e 	bl	800f5d4 <osDelay>
			  setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
 80048f8:	4b5e      	ldr	r3, [pc, #376]	; (8004a74 <startBootButtons+0x270>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	2101      	movs	r1, #1
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fbcc 	bl	800309c <setOutputGPIOState>
			  osDelay(500);
 8004904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004908:	f00a fe64 	bl	800f5d4 <osDelay>
			  BTN1_OFF;
 800490c:	2200      	movs	r2, #0
 800490e:	2108      	movs	r1, #8
 8004910:	4856      	ldr	r0, [pc, #344]	; (8004a6c <startBootButtons+0x268>)
 8004912:	f005 fed1 	bl	800a6b8 <HAL_GPIO_WritePin>
			  BTN2_OFF;
 8004916:	2200      	movs	r2, #0
 8004918:	2110      	movs	r1, #16
 800491a:	4854      	ldr	r0, [pc, #336]	; (8004a6c <startBootButtons+0x268>)
 800491c:	f005 fecc 	bl	800a6b8 <HAL_GPIO_WritePin>
			  BTN3_OFF;
 8004920:	2200      	movs	r2, #0
 8004922:	2120      	movs	r1, #32
 8004924:	4851      	ldr	r0, [pc, #324]	; (8004a6c <startBootButtons+0x268>)
 8004926:	f005 fec7 	bl	800a6b8 <HAL_GPIO_WritePin>
			  BTN4_OFF;
 800492a:	2200      	movs	r2, #0
 800492c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004930:	484e      	ldr	r0, [pc, #312]	; (8004a6c <startBootButtons+0x268>)
 8004932:	f005 fec1 	bl	800a6b8 <HAL_GPIO_WritePin>
			  BTN5_OFF;
 8004936:	2200      	movs	r2, #0
 8004938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800493c:	484b      	ldr	r0, [pc, #300]	; (8004a6c <startBootButtons+0x268>)
 800493e:	f005 febb 	bl	800a6b8 <HAL_GPIO_WritePin>
			  EDL_SW_OFF;
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004948:	4849      	ldr	r0, [pc, #292]	; (8004a70 <startBootButtons+0x26c>)
 800494a:	f005 feb5 	bl	800a6b8 <HAL_GPIO_WritePin>
			  EX_SW_OFF;
 800494e:	2200      	movs	r2, #0
 8004950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004954:	4846      	ldr	r0, [pc, #280]	; (8004a70 <startBootButtons+0x26c>)
 8004956:	f005 feaf 	bl	800a6b8 <HAL_GPIO_WritePin>
			  if(bootButtons.btn1){
 800495a:	4b43      	ldr	r3, [pc, #268]	; (8004a68 <startBootButtons+0x264>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <startBootButtons+0x166>
				  bootButtons.bootMode= RECOVERY;
 8004962:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <startBootButtons+0x264>)
 8004964:	2204      	movs	r2, #4
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
 8004968:	e01a      	b.n	80049a0 <startBootButtons+0x19c>
			  }
			  else if(bootButtons.btn2){
 800496a:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <startBootButtons+0x264>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <startBootButtons+0x176>
				  bootButtons.bootMode= MASS_STORAGE;
 8004972:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <startBootButtons+0x264>)
 8004974:	2205      	movs	r2, #5
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
 8004978:	e012      	b.n	80049a0 <startBootButtons+0x19c>
			  }
			  else if(bootButtons.btn3){
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <startBootButtons+0x264>)
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <startBootButtons+0x186>
				  bootButtons.bootMode= UEFI;
 8004982:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <startBootButtons+0x264>)
 8004984:	2202      	movs	r2, #2
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
 8004988:	e00a      	b.n	80049a0 <startBootButtons+0x19c>
			  }
			  else if(bootButtons.edl_sw){
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <startBootButtons+0x264>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <startBootButtons+0x196>
				  bootButtons.bootMode= EDL;
 8004992:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <startBootButtons+0x264>)
 8004994:	2203      	movs	r2, #3
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
 8004998:	e002      	b.n	80049a0 <startBootButtons+0x19c>
			  }
			  else{
				  bootButtons.bootMode=STANDARD;
 800499a:	4b33      	ldr	r3, [pc, #204]	; (8004a68 <startBootButtons+0x264>)
 800499c:	2201      	movs	r2, #1
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
			  }
			  bootButtons.btn0=0;
 80049a0:	4b31      	ldr	r3, [pc, #196]	; (8004a68 <startBootButtons+0x264>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 80049a6:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <startBootButtons+0x264>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 80049ac:	4b2e      	ldr	r3, [pc, #184]	; (8004a68 <startBootButtons+0x264>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 80049b2:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <startBootButtons+0x264>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <startBootButtons+0x264>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 80049be:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <startBootButtons+0x264>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 80049c4:	4b28      	ldr	r3, [pc, #160]	; (8004a68 <startBootButtons+0x264>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <startBootButtons+0x264>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 80049d0:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <startBootButtons+0x264>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <startBootButtons+0x264>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e110      	b.n	8004c00 <startBootButtons+0x3fc>

		  }
		  else{
			  if((bootButtons.btn0) || pwrBtnReady){ //power button
 80049de:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <startBootButtons+0x264>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <startBootButtons+0x1e8>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d06a      	beq.n	8004ac2 <startBootButtons+0x2be>
				  BTN0_ON;
 80049ec:	2201      	movs	r2, #1
 80049ee:	2104      	movs	r1, #4
 80049f0:	481e      	ldr	r0, [pc, #120]	; (8004a6c <startBootButtons+0x268>)
 80049f2:	f005 fe61 	bl	800a6b8 <HAL_GPIO_WritePin>
				  timeTurnedOn = (HAL_GetTick());
 80049f6:	f004 f9d9 	bl	8008dac <HAL_GetTick>
 80049fa:	4603      	mov	r3, r0
 80049fc:	613b      	str	r3, [r7, #16]
				  pwrBtnReady=0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
				  pwrOn = 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
				  osDelay(500);
 8004a06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a0a:	f00a fde3 	bl	800f5d4 <osDelay>
				  BTN0_OFF;
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2104      	movs	r1, #4
 8004a12:	4816      	ldr	r0, [pc, #88]	; (8004a6c <startBootButtons+0x268>)
 8004a14:	f005 fe50 	bl	800a6b8 <HAL_GPIO_WritePin>
				  osDelay(500);
 8004a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a1c:	f00a fdda 	bl	800f5d4 <osDelay>
				  pwrOn=0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
				  timeTurnedOn=0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
				  if(bootButtons.btn0){
 8004a28:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <startBootButtons+0x264>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <startBootButtons+0x234>
					  bootButtons.bootMode= STANDARD;
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <startBootButtons+0x264>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28
 8004a36:	e026      	b.n	8004a86 <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn1){
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <startBootButtons+0x264>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <startBootButtons+0x244>
					  bootButtons.bootMode= RECOVERY;
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <startBootButtons+0x264>)
 8004a42:	2204      	movs	r2, #4
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
 8004a46:	e01e      	b.n	8004a86 <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn2){
 8004a48:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <startBootButtons+0x264>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <startBootButtons+0x254>
					  bootButtons.bootMode= MASS_STORAGE;
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <startBootButtons+0x264>)
 8004a52:	2205      	movs	r2, #5
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
 8004a56:	e016      	b.n	8004a86 <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn3){
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <startBootButtons+0x264>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <startBootButtons+0x274>
					  bootButtons.bootMode= UEFI;
 8004a60:	4b01      	ldr	r3, [pc, #4]	; (8004a68 <startBootButtons+0x264>)
 8004a62:	2202      	movs	r2, #2
 8004a64:	629a      	str	r2, [r3, #40]	; 0x28
 8004a66:	e00e      	b.n	8004a86 <startBootButtons+0x282>
 8004a68:	200032bc 	.word	0x200032bc
 8004a6c:	40021400 	.word	0x40021400
 8004a70:	40020400 	.word	0x40020400
 8004a74:	20000044 	.word	0x20000044
				  }
				  else if(bootButtons.edl_sw){
 8004a78:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <startBootButtons+0x408>)
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <startBootButtons+0x282>
					  bootButtons.bootMode= EDL;
 8004a80:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <startBootButtons+0x408>)
 8004a82:	2203      	movs	r2, #3
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
				  }
				  bootButtons.btn0=0;
 8004a86:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <startBootButtons+0x408>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
				  bootButtons.btn1=0;
 8004a8c:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <startBootButtons+0x408>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
				  bootButtons.btn2=0;
 8004a92:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <startBootButtons+0x408>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	60da      	str	r2, [r3, #12]
				  bootButtons.btn3=0;
 8004a98:	4b5c      	ldr	r3, [pc, #368]	; (8004c0c <startBootButtons+0x408>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
				  bootButtons.btn4=0;
 8004a9e:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <startBootButtons+0x408>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
				  bootButtons.btn5=0;
 8004aa4:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <startBootButtons+0x408>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	619a      	str	r2, [r3, #24]
				  bootButtons.edl_sw=0;
 8004aaa:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <startBootButtons+0x408>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	61da      	str	r2, [r3, #28]
				  bootButtons.ex_sw=0;
 8004ab0:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <startBootButtons+0x408>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	621a      	str	r2, [r3, #32]
				  bootButtons.modeClear=1;
 8004ab6:	4b55      	ldr	r3, [pc, #340]	; (8004c0c <startBootButtons+0x408>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24
				  bootButtons.bootModeSet=0;
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <startBootButtons+0x408>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
				  //osDelay(300);
			  }
			  if(bootButtons.btn1){ //DPAD UP
 8004ac2:	4b52      	ldr	r3, [pc, #328]	; (8004c0c <startBootButtons+0x408>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <startBootButtons+0x2d6>
				  BTN1_ON;
 8004aca:	2201      	movs	r2, #1
 8004acc:	2108      	movs	r1, #8
 8004ace:	4850      	ldr	r0, [pc, #320]	; (8004c10 <startBootButtons+0x40c>)
 8004ad0:	f005 fdf2 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e008      	b.n	8004aec <startBootButtons+0x2e8>
			  }
			  else if(!(bootButtons.btn1)){ //DPAD UP
 8004ada:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <startBootButtons+0x408>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <startBootButtons+0x2e8>
				  BTN1_OFF;
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2108      	movs	r1, #8
 8004ae6:	484a      	ldr	r0, [pc, #296]	; (8004c10 <startBootButtons+0x40c>)
 8004ae8:	f005 fde6 	bl	800a6b8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004aec:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <startBootButtons+0x408>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <startBootButtons+0x300>
				  BTN2_ON;
 8004af4:	2201      	movs	r2, #1
 8004af6:	2110      	movs	r1, #16
 8004af8:	4845      	ldr	r0, [pc, #276]	; (8004c10 <startBootButtons+0x40c>)
 8004afa:	f005 fddd 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004afe:	2301      	movs	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	e008      	b.n	8004b16 <startBootButtons+0x312>
			  }
			  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 8004b04:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <startBootButtons+0x408>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <startBootButtons+0x312>
				  BTN2_OFF;
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2110      	movs	r1, #16
 8004b10:	483f      	ldr	r0, [pc, #252]	; (8004c10 <startBootButtons+0x40c>)
 8004b12:	f005 fdd1 	bl	800a6b8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <startBootButtons+0x408>)
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <startBootButtons+0x32a>
				  BTN3_ON;
 8004b1e:	2201      	movs	r2, #1
 8004b20:	2120      	movs	r1, #32
 8004b22:	483b      	ldr	r0, [pc, #236]	; (8004c10 <startBootButtons+0x40c>)
 8004b24:	f005 fdc8 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e008      	b.n	8004b40 <startBootButtons+0x33c>
			  }
			  else if(!(bootButtons.btn3)){ //DPAD LEFT
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <startBootButtons+0x408>)
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <startBootButtons+0x33c>
				  BTN3_OFF;
 8004b36:	2200      	movs	r2, #0
 8004b38:	2120      	movs	r1, #32
 8004b3a:	4835      	ldr	r0, [pc, #212]	; (8004c10 <startBootButtons+0x40c>)
 8004b3c:	f005 fdbc 	bl	800a6b8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn4){
 8004b40:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <startBootButtons+0x408>)
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <startBootButtons+0x356>
				  BTN4_ON;
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b4e:	4830      	ldr	r0, [pc, #192]	; (8004c10 <startBootButtons+0x40c>)
 8004b50:	f005 fdb2 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004b54:	2301      	movs	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e00d      	b.n	8004b76 <startBootButtons+0x372>
			  }
			  else if(!(bootButtons.btn4)){
 8004b5a:	4b2c      	ldr	r3, [pc, #176]	; (8004c0c <startBootButtons+0x408>)
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <startBootButtons+0x372>
				  BTN4_OFF;
 8004b62:	2200      	movs	r2, #0
 8004b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b68:	4829      	ldr	r0, [pc, #164]	; (8004c10 <startBootButtons+0x40c>)
 8004b6a:	f005 fda5 	bl	800a6b8 <HAL_GPIO_WritePin>
				  osDelay(300);
 8004b6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004b72:	f00a fd2f 	bl	800f5d4 <osDelay>
			  }
			  if(bootButtons.btn5){
 8004b76:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <startBootButtons+0x408>)
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <startBootButtons+0x38c>
				  BTN5_ON;
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b84:	4822      	ldr	r0, [pc, #136]	; (8004c10 <startBootButtons+0x40c>)
 8004b86:	f005 fd97 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e009      	b.n	8004ba4 <startBootButtons+0x3a0>
			  }
			  else if(!(bootButtons.btn5)){
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <startBootButtons+0x408>)
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <startBootButtons+0x3a0>
				  BTN5_OFF;
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b9e:	481c      	ldr	r0, [pc, #112]	; (8004c10 <startBootButtons+0x40c>)
 8004ba0:	f005 fd8a 	bl	800a6b8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.edl_sw){
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <startBootButtons+0x408>)
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <startBootButtons+0x3ba>
				  EDL_SW_ON;
 8004bac:	2201      	movs	r2, #1
 8004bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bb2:	4818      	ldr	r0, [pc, #96]	; (8004c14 <startBootButtons+0x410>)
 8004bb4:	f005 fd80 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e009      	b.n	8004bd2 <startBootButtons+0x3ce>
			  }
			  else if(!(bootButtons.edl_sw)){
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <startBootButtons+0x408>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <startBootButtons+0x3ce>
				  EDL_SW_OFF;
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bcc:	4811      	ldr	r0, [pc, #68]	; (8004c14 <startBootButtons+0x410>)
 8004bce:	f005 fd73 	bl	800a6b8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.ex_sw){
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <startBootButtons+0x408>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <startBootButtons+0x3e8>
				  EX_SW_ON;
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004be0:	480c      	ldr	r0, [pc, #48]	; (8004c14 <startBootButtons+0x410>)
 8004be2:	f005 fd69 	bl	800a6b8 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004be6:	2301      	movs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e009      	b.n	8004c00 <startBootButtons+0x3fc>
			  }
			  else if(!(bootButtons.ex_sw)){
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <startBootButtons+0x408>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <startBootButtons+0x3fc>
				  EX_SW_OFF;
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bfa:	4806      	ldr	r0, [pc, #24]	; (8004c14 <startBootButtons+0x410>)
 8004bfc:	f005 fd5c 	bl	800a6b8 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
		  }
	  }
    osDelay(800);
 8004c00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004c04:	f00a fce6 	bl	800f5d4 <osDelay>
	  if(bootButtons.bootModeSet){
 8004c08:	e608      	b.n	800481c <startBootButtons+0x18>
 8004c0a:	bf00      	nop
 8004c0c:	200032bc 	.word	0x200032bc
 8004c10:	40021400 	.word	0x40021400
 8004c14:	40020400 	.word	0x40020400

08004c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004c2a:	f004 f8ab 	bl	8008d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40001000 	.word	0x40001000

08004c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004c40:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c42:	e7fe      	b.n	8004c42 <Error_Handler+0x6>

08004c44 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	4802      	ldr	r0, [pc, #8]	; (8004c58 <SMLCD_Enable+0x14>)
 8004c4e:	f005 fd33 	bl	800a6b8 <HAL_GPIO_WritePin>
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40022400 	.word	0x40022400

08004c5c <initializeDisplay>:

int previousMenu = 0;
float displayAdcValues[21];
int setIndicator=0;

void initializeDisplay(){
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b099      	sub	sp, #100	; 0x64
 8004c60:	af16      	add	r7, sp, #88	; 0x58
	SMLCD_InitGPIO();
 8004c62:	f7fb fcd9 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 8004c66:	4c10      	ldr	r4, [pc, #64]	; (8004ca8 <initializeDisplay+0x4c>)
 8004c68:	4668      	mov	r0, sp
 8004c6a:	f104 0310 	add.w	r3, r4, #16
 8004c6e:	2254      	movs	r2, #84	; 0x54
 8004c70:	4619      	mov	r1, r3
 8004c72:	f00d fad7 	bl	8012224 <memcpy>
 8004c76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c7a:	f7fb fced 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 8004c7e:	f7ff ffe1 	bl	8004c44 <SMLCD_Enable>
	SMLCD_Clear();
 8004c82:	f7fb fd09 	bl	8000698 <SMLCD_Clear>
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 8004c86:	2301      	movs	r3, #1
 8004c88:	71fb      	strb	r3, [r7, #7]
	}
	SMLCD_Orientation(ori);
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fb fe45 	bl	800091c <SMLCD_Orientation>
	LCD_Clear();
 8004c92:	f7fb fe6b 	bl	800096c <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8004c96:	2254      	movs	r2, #84	; 0x54
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4804      	ldr	r0, [pc, #16]	; (8004cac <initializeDisplay+0x50>)
 8004c9c:	f00d facd 	bl	801223a <memset>
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd90      	pop	{r4, r7, pc}
 8004ca8:	20028a8c 	.word	0x20028a8c
 8004cac:	20030a7c 	.word	0x20030a7c

08004cb0 <drawMainMenu>:

void drawMainMenu(int indicator){
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8004cb8:	4b54      	ldr	r3, [pc, #336]	; (8004e0c <drawMainMenu+0x15c>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
	getLatestADC();
 8004cbe:	f002 fd69 	bl	8007794 <getLatestADC>
	LCD_Clear();
 8004cc2:	f7fb fe53 	bl	800096c <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 8004cc6:	4b52      	ldr	r3, [pc, #328]	; (8004e10 <drawMainMenu+0x160>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8004ccc:	4b51      	ldr	r3, [pc, #324]	; (8004e14 <drawMainMenu+0x164>)
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <drawMainMenu+0x168>)
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f7fc f896 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8004ce4:	4b4b      	ldr	r3, [pc, #300]	; (8004e14 <drawMainMenu+0x164>)
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	3b03      	subs	r3, #3
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	4b4a      	ldr	r3, [pc, #296]	; (8004e18 <drawMainMenu+0x168>)
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	3b03      	subs	r3, #3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	2002      	movs	r0, #2
 8004cf8:	f7fc f88a 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8004cfc:	230a      	movs	r3, #10
 8004cfe:	60bb      	str	r3, [r7, #8]
	j  = 10;
 8004d00:	230a      	movs	r3, #10
 8004d02:	60fb      	str	r3, [r7, #12]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	b298      	uxth	r0, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	b299      	uxth	r1, r3
 8004d0c:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <drawMainMenu+0x16c>)
 8004d0e:	4a44      	ldr	r2, [pc, #272]	; (8004e20 <drawMainMenu+0x170>)
 8004d10:	f7fc fc0c 	bl	800152c <LCD_PutStr>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	b298      	uxth	r0, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	b299      	uxth	r1, r3
 8004d26:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <drawMainMenu+0x16c>)
 8004d28:	4a3e      	ldr	r2, [pc, #248]	; (8004e24 <drawMainMenu+0x174>)
 8004d2a:	f7fc fbff 	bl	800152c <LCD_PutStr>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
	i+=20;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	b298      	uxth	r0, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	b299      	uxth	r1, r3
 8004d46:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <drawMainMenu+0x16c>)
 8004d48:	4a37      	ldr	r2, [pc, #220]	; (8004e28 <drawMainMenu+0x178>)
 8004d4a:	f7fc fbef 	bl	800152c <LCD_PutStr>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
	if(displayAdcValues[Adc.adc0] >3.5){
 8004d58:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <drawMainMenu+0x17c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a34      	ldr	r2, [pc, #208]	; (8004e30 <drawMainMenu+0x180>)
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	edd3 7a00 	vldr	s15, [r3]
 8004d66:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8004d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	dd6d      	ble.n	8004e50 <drawMainMenu+0x1a0>
		switch(bootButtons.bootMode){
 8004d74:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <drawMainMenu+0x184>)
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d871      	bhi.n	8004e60 <drawMainMenu+0x1b0>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <drawMainMenu+0xd4>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004d9d 	.word	0x08004d9d
 8004d88:	08004daf 	.word	0x08004daf
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dd3 	.word	0x08004dd3
 8004d94:	08004df7 	.word	0x08004df7
 8004d98:	08004de5 	.word	0x08004de5
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	b298      	uxth	r0, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	b299      	uxth	r1, r3
 8004da4:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <drawMainMenu+0x16c>)
 8004da6:	4a24      	ldr	r2, [pc, #144]	; (8004e38 <drawMainMenu+0x188>)
 8004da8:	f7fc fbc0 	bl	800152c <LCD_PutStr>
			break;
 8004dac:	e058      	b.n	8004e60 <drawMainMenu+0x1b0>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	b298      	uxth	r0, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	b299      	uxth	r1, r3
 8004db6:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <drawMainMenu+0x16c>)
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <drawMainMenu+0x18c>)
 8004dba:	f7fc fbb7 	bl	800152c <LCD_PutStr>
			break;
 8004dbe:	e04f      	b.n	8004e60 <drawMainMenu+0x1b0>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	b298      	uxth	r0, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	b299      	uxth	r1, r3
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <drawMainMenu+0x16c>)
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <drawMainMenu+0x190>)
 8004dcc:	f7fc fbae 	bl	800152c <LCD_PutStr>
			break;
 8004dd0:	e046      	b.n	8004e60 <drawMainMenu+0x1b0>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	b298      	uxth	r0, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	b299      	uxth	r1, r3
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <drawMainMenu+0x16c>)
 8004ddc:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <drawMainMenu+0x194>)
 8004dde:	f7fc fba5 	bl	800152c <LCD_PutStr>
			break;
 8004de2:	e03d      	b.n	8004e60 <drawMainMenu+0x1b0>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	b298      	uxth	r0, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	b299      	uxth	r1, r3
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <drawMainMenu+0x16c>)
 8004dee:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <drawMainMenu+0x198>)
 8004df0:	f7fc fb9c 	bl	800152c <LCD_PutStr>
			break;
 8004df4:	e034      	b.n	8004e60 <drawMainMenu+0x1b0>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	b298      	uxth	r0, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	b299      	uxth	r1, r3
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <drawMainMenu+0x16c>)
 8004e00:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <drawMainMenu+0x19c>)
 8004e02:	f7fc fb93 	bl	800152c <LCD_PutStr>
			break;
 8004e06:	bf00      	nop
 8004e08:	e02a      	b.n	8004e60 <drawMainMenu+0x1b0>
 8004e0a:	bf00      	nop
 8004e0c:	20003354 	.word	0x20003354
 8004e10:	20028a84 	.word	0x20028a84
 8004e14:	20028a86 	.word	0x20028a86
 8004e18:	20028a88 	.word	0x20028a88
 8004e1c:	08016aa8 	.word	0x08016aa8
 8004e20:	08016344 	.word	0x08016344
 8004e24:	0801634c 	.word	0x0801634c
 8004e28:	08016358 	.word	0x08016358
 8004e2c:	20000138 	.word	0x20000138
 8004e30:	20030a7c 	.word	0x20030a7c
 8004e34:	200032bc 	.word	0x200032bc
 8004e38:	08016360 	.word	0x08016360
 8004e3c:	08016364 	.word	0x08016364
 8004e40:	08016368 	.word	0x08016368
 8004e44:	08016370 	.word	0x08016370
 8004e48:	08016374 	.word	0x08016374
 8004e4c:	0801637c 	.word	0x0801637c
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	b298      	uxth	r0, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	b299      	uxth	r1, r3
 8004e58:	4b96      	ldr	r3, [pc, #600]	; (80050b4 <drawMainMenu+0x404>)
 8004e5a:	4a97      	ldr	r2, [pc, #604]	; (80050b8 <drawMainMenu+0x408>)
 8004e5c:	f7fc fb66 	bl	800152c <LCD_PutStr>
	}
	i  = 135;
 8004e60:	2387      	movs	r3, #135	; 0x87
 8004e62:	60bb      	str	r3, [r7, #8]
	j += 14;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	330e      	adds	r3, #14
 8004e68:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	4b93      	ldr	r3, [pc, #588]	; (80050bc <drawMainMenu+0x40c>)
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	3b5e      	subs	r3, #94	; 0x5e
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3303      	adds	r3, #3
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2002      	movs	r0, #2
 8004e80:	f7fc f808 	bl	8000e94 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3305      	adds	r3, #5
 8004e8a:	b298      	uxth	r0, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3308      	adds	r3, #8
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2102      	movs	r1, #2
 8004e9a:	f7fb fffb 	bl	8000e94 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 8004e9e:	4b87      	ldr	r3, [pc, #540]	; (80050bc <drawMainMenu+0x40c>)
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	3b61      	subs	r3, #97	; 0x61
 8004ea4:	b298      	uxth	r0, r3
 8004ea6:	4b85      	ldr	r3, [pc, #532]	; (80050bc <drawMainMenu+0x40c>)
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	3b5e      	subs	r3, #94	; 0x5e
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	4b84      	ldr	r3, [pc, #528]	; (80050c0 <drawMainMenu+0x410>)
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	f7fb ffec 	bl	8000e94 <LCD_FillRect>
	i  = scr_width-80;
 8004ebc:	4b7f      	ldr	r3, [pc, #508]	; (80050bc <drawMainMenu+0x40c>)
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	3b50      	subs	r3, #80	; 0x50
 8004ec2:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	b298      	uxth	r0, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b02      	subs	r3, #2
 8004ed2:	b299      	uxth	r1, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	330c      	adds	r3, #12
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f7fb ffd6 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3314      	adds	r3, #20
 8004eec:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT1 LED", fnt7x10);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	b298      	uxth	r0, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	b299      	uxth	r1, r3
 8004ef6:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <drawMainMenu+0x404>)
 8004ef8:	4a72      	ldr	r2, [pc, #456]	; (80050c4 <drawMainMenu+0x414>)
 8004efa:	f7fc fb17 	bl	800152c <LCD_PutStr>
	j+=22;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3316      	adds	r3, #22
 8004f02:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004f04:	4b6d      	ldr	r3, [pc, #436]	; (80050bc <drawMainMenu+0x40c>)
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	3b50      	subs	r3, #80	; 0x50
 8004f0a:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	b298      	uxth	r0, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b02      	subs	r3, #2
 8004f16:	b299      	uxth	r1, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3308      	adds	r3, #8
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f7fb ffb4 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT2 LED", fnt7x10);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	b298      	uxth	r0, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	b299      	uxth	r1, r3
 8004f3a:	4b5e      	ldr	r3, [pc, #376]	; (80050b4 <drawMainMenu+0x404>)
 8004f3c:	4a62      	ldr	r2, [pc, #392]	; (80050c8 <drawMainMenu+0x418>)
 8004f3e:	f7fc faf5 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004f42:	4b5e      	ldr	r3, [pc, #376]	; (80050bc <drawMainMenu+0x40c>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	3b50      	subs	r3, #80	; 0x50
 8004f48:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3316      	adds	r3, #22
 8004f4e:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	b298      	uxth	r0, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b02      	subs	r3, #2
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	330c      	adds	r3, #12
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3308      	adds	r3, #8
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f7fb ff92 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	3314      	adds	r3, #20
 8004f74:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3 LED", fnt7x10);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	b298      	uxth	r0, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	b299      	uxth	r1, r3
 8004f7e:	4b4d      	ldr	r3, [pc, #308]	; (80050b4 <drawMainMenu+0x404>)
 8004f80:	4a52      	ldr	r2, [pc, #328]	; (80050cc <drawMainMenu+0x41c>)
 8004f82:	f7fc fad3 	bl	800152c <LCD_PutStr>
	j+=22;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3316      	adds	r3, #22
 8004f8a:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8004f8c:	4b4b      	ldr	r3, [pc, #300]	; (80050bc <drawMainMenu+0x40c>)
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	3b50      	subs	r3, #80	; 0x50
 8004f92:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	b298      	uxth	r0, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b02      	subs	r3, #2
 8004f9e:	b299      	uxth	r1, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3308      	adds	r3, #8
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f7fb ff70 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4 LED", fnt7x10);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	b298      	uxth	r0, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	b299      	uxth	r1, r3
 8004fc2:	4b3c      	ldr	r3, [pc, #240]	; (80050b4 <drawMainMenu+0x404>)
 8004fc4:	4a42      	ldr	r2, [pc, #264]	; (80050d0 <drawMainMenu+0x420>)
 8004fc6:	f7fc fab1 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8004fca:	4b3c      	ldr	r3, [pc, #240]	; (80050bc <drawMainMenu+0x40c>)
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	3b50      	subs	r3, #80	; 0x50
 8004fd0:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3316      	adds	r3, #22
 8004fd6:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	b298      	uxth	r0, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b02      	subs	r3, #2
 8004fe2:	b299      	uxth	r1, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	330c      	adds	r3, #12
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f7fb ff4e 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5 LED", fnt7x10);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	b298      	uxth	r0, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	b299      	uxth	r1, r3
 8005006:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <drawMainMenu+0x404>)
 8005008:	4a32      	ldr	r2, [pc, #200]	; (80050d4 <drawMainMenu+0x424>)
 800500a:	f7fc fa8f 	bl	800152c <LCD_PutStr>
	j+=22;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3316      	adds	r3, #22
 8005012:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8005014:	4b29      	ldr	r3, [pc, #164]	; (80050bc <drawMainMenu+0x40c>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	3b50      	subs	r3, #80	; 0x50
 800501a:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	b298      	uxth	r0, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b02      	subs	r3, #2
 8005026:	b299      	uxth	r1, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	b29b      	uxth	r3, r3
 800502c:	330c      	adds	r3, #12
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	b29b      	uxth	r3, r3
 8005034:	3308      	adds	r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	f7fb ff2c 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	3314      	adds	r3, #20
 8005040:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6 LED", fnt7x10);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	b298      	uxth	r0, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	b299      	uxth	r1, r3
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <drawMainMenu+0x404>)
 800504c:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <drawMainMenu+0x428>)
 800504e:	f7fc fa6d 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 8005052:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <drawMainMenu+0x40c>)
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	3b50      	subs	r3, #80	; 0x50
 8005058:	60bb      	str	r3, [r7, #8]
	j  +=22;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3316      	adds	r3, #22
 800505e:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	b298      	uxth	r0, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b02      	subs	r3, #2
 800506a:	b299      	uxth	r1, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	b29b      	uxth	r3, r3
 8005070:	330c      	adds	r3, #12
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	b29b      	uxth	r3, r3
 8005078:	3308      	adds	r3, #8
 800507a:	b29b      	uxth	r3, r3
 800507c:	f7fb ff0a 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	3314      	adds	r3, #20
 8005084:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7 LED", fnt7x10);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	b298      	uxth	r0, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	b299      	uxth	r1, r3
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <drawMainMenu+0x404>)
 8005090:	4a12      	ldr	r2, [pc, #72]	; (80050dc <drawMainMenu+0x42c>)
 8005092:	f7fc fa4b 	bl	800152c <LCD_PutStr>
	j+=22;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3316      	adds	r3, #22
 800509a:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <drawMainMenu+0x40c>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	3b50      	subs	r3, #80	; 0x50
 80050a2:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	b298      	uxth	r0, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b02      	subs	r3, #2
 80050ae:	b299      	uxth	r1, r3
 80050b0:	e016      	b.n	80050e0 <drawMainMenu+0x430>
 80050b2:	bf00      	nop
 80050b4:	08016aa8 	.word	0x08016aa8
 80050b8:	08016360 	.word	0x08016360
 80050bc:	20028a86 	.word	0x20028a86
 80050c0:	20028a88 	.word	0x20028a88
 80050c4:	08016380 	.word	0x08016380
 80050c8:	0801638c 	.word	0x0801638c
 80050cc:	08016398 	.word	0x08016398
 80050d0:	080163a4 	.word	0x080163a4
 80050d4:	080163b0 	.word	0x080163b0
 80050d8:	080163bc 	.word	0x080163bc
 80050dc:	080163c8 	.word	0x080163c8
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	330c      	adds	r3, #12
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3308      	adds	r3, #8
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f7fb fed0 	bl	8000e94 <LCD_FillRect>
	i+=20;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	3314      	adds	r3, #20
 80050f8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8 LED", fnt7x10);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	b298      	uxth	r0, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	b299      	uxth	r1, r3
 8005102:	4b6f      	ldr	r3, [pc, #444]	; (80052c0 <drawMainMenu+0x610>)
 8005104:	4a6f      	ldr	r2, [pc, #444]	; (80052c4 <drawMainMenu+0x614>)
 8005106:	f7fc fa11 	bl	800152c <LCD_PutStr>
	i  = scr_width-80;
 800510a:	4b6f      	ldr	r3, [pc, #444]	; (80052c8 <drawMainMenu+0x618>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	3b50      	subs	r3, #80	; 0x50
 8005110:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3316      	adds	r3, #22
 8005116:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	b298      	uxth	r0, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b02      	subs	r3, #2
 8005122:	b299      	uxth	r1, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	b29b      	uxth	r3, r3
 8005128:	330c      	adds	r3, #12
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	b29b      	uxth	r3, r3
 8005130:	3308      	adds	r3, #8
 8005132:	b29b      	uxth	r3, r3
 8005134:	f7fb feae 	bl	8000e94 <LCD_FillRect>
	i+=20;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3314      	adds	r3, #20
 800513c:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9 LED", fnt7x10);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	b298      	uxth	r0, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	b299      	uxth	r1, r3
 8005146:	4b5e      	ldr	r3, [pc, #376]	; (80052c0 <drawMainMenu+0x610>)
 8005148:	4a60      	ldr	r2, [pc, #384]	; (80052cc <drawMainMenu+0x61c>)
 800514a:	f7fc f9ef 	bl	800152c <LCD_PutStr>
	j = scr_height-20;
 800514e:	4b60      	ldr	r3, [pc, #384]	; (80052d0 <drawMainMenu+0x620>)
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	3b14      	subs	r3, #20
 8005154:	60fb      	str	r3, [r7, #12]
	i  = scr_width-80;
 8005156:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <drawMainMenu+0x618>)
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	3b50      	subs	r3, #80	; 0x50
 800515c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	b298      	uxth	r0, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b02      	subs	r3, #2
 8005168:	b299      	uxth	r1, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	b29b      	uxth	r3, r3
 800516e:	330c      	adds	r3, #12
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	b29b      	uxth	r3, r3
 8005176:	3308      	adds	r3, #8
 8005178:	b29b      	uxth	r3, r3
 800517a:	f7fb fe8b 	bl	8000e94 <LCD_FillRect>
	i+=20;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	3314      	adds	r3, #20
 8005182:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	b298      	uxth	r0, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	b299      	uxth	r1, r3
 800518c:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <drawMainMenu+0x610>)
 800518e:	4a51      	ldr	r2, [pc, #324]	; (80052d4 <drawMainMenu+0x624>)
 8005190:	f7fc f9cc 	bl	800152c <LCD_PutStr>

	i=100;
 8005194:	2364      	movs	r3, #100	; 0x64
 8005196:	60bb      	str	r3, [r7, #8]
	j=75;
 8005198:	234b      	movs	r3, #75	; 0x4b
 800519a:	60fb      	str	r3, [r7, #12]
	i+=20;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	3314      	adds	r3, #20
 80051a0:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	b298      	uxth	r0, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	b299      	uxth	r1, r3
 80051aa:	4b45      	ldr	r3, [pc, #276]	; (80052c0 <drawMainMenu+0x610>)
 80051ac:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <drawMainMenu+0x628>)
 80051ae:	f7fc f9bd 	bl	800152c <LCD_PutStr>
	j+=15;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	330f      	adds	r3, #15
 80051b6:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b03      	subs	r3, #3
 80051be:	b298      	uxth	r0, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b02      	subs	r3, #2
 80051c6:	b299      	uxth	r1, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3347      	adds	r3, #71	; 0x47
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3302      	adds	r3, #2
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f7fb fe5c 	bl	8000e94 <LCD_FillRect>

	i=100;
 80051dc:	2364      	movs	r3, #100	; 0x64
 80051de:	60bb      	str	r3, [r7, #8]
	j=110;
 80051e0:	236e      	movs	r3, #110	; 0x6e
 80051e2:	60fb      	str	r3, [r7, #12]
	i+=20;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	3314      	adds	r3, #20
 80051e8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	b298      	uxth	r0, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	b299      	uxth	r1, r3
 80051f2:	4b33      	ldr	r3, [pc, #204]	; (80052c0 <drawMainMenu+0x610>)
 80051f4:	4a39      	ldr	r2, [pc, #228]	; (80052dc <drawMainMenu+0x62c>)
 80051f6:	f7fc f999 	bl	800152c <LCD_PutStr>
	j+=15;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	330f      	adds	r3, #15
 80051fe:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b03      	subs	r3, #3
 8005206:	b298      	uxth	r0, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b02      	subs	r3, #2
 800520e:	b299      	uxth	r1, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	b29b      	uxth	r3, r3
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	b29b      	uxth	r3, r3
 800521c:	3302      	adds	r3, #2
 800521e:	b29b      	uxth	r3, r3
 8005220:	f7fb fe38 	bl	8000e94 <LCD_FillRect>

	i=100;
 8005224:	2364      	movs	r3, #100	; 0x64
 8005226:	60bb      	str	r3, [r7, #8]
	j=145;
 8005228:	2391      	movs	r3, #145	; 0x91
 800522a:	60fb      	str	r3, [r7, #12]
	i+=20;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	3314      	adds	r3, #20
 8005230:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	b298      	uxth	r0, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	b299      	uxth	r1, r3
 800523a:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <drawMainMenu+0x610>)
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <drawMainMenu+0x630>)
 800523e:	f7fc f975 	bl	800152c <LCD_PutStr>
	j+=15;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	330f      	adds	r3, #15
 8005246:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b03      	subs	r3, #3
 800524e:	b298      	uxth	r0, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b02      	subs	r3, #2
 8005256:	b299      	uxth	r1, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	b29b      	uxth	r3, r3
 800525c:	3355      	adds	r3, #85	; 0x55
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	b29b      	uxth	r3, r3
 8005264:	3302      	adds	r3, #2
 8005266:	b29b      	uxth	r3, r3
 8005268:	f7fb fe14 	bl	8000e94 <LCD_FillRect>
	i=100;
 800526c:	2364      	movs	r3, #100	; 0x64
 800526e:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d006      	beq.n	8005284 <drawMainMenu+0x5d4>
 8005276:	2b03      	cmp	r3, #3
 8005278:	d007      	beq.n	800528a <drawMainMenu+0x5da>
 800527a:	2b01      	cmp	r3, #1
 800527c:	d108      	bne.n	8005290 <drawMainMenu+0x5e0>
	case FIRST:
	{
		j=75;
 800527e:	234b      	movs	r3, #75	; 0x4b
 8005280:	60fb      	str	r3, [r7, #12]
		break;
 8005282:	e008      	b.n	8005296 <drawMainMenu+0x5e6>
	}
	case SECOND:
	{
		j=110;
 8005284:	236e      	movs	r3, #110	; 0x6e
 8005286:	60fb      	str	r3, [r7, #12]
		break;
 8005288:	e005      	b.n	8005296 <drawMainMenu+0x5e6>
	}
	case THIRD:
	{
		j=145;
 800528a:	2391      	movs	r3, #145	; 0x91
 800528c:	60fb      	str	r3, [r7, #12]
		break;
 800528e:	e002      	b.n	8005296 <drawMainMenu+0x5e6>
	}
	default:
	{
		j=75;
 8005290:	234b      	movs	r3, #75	; 0x4b
 8005292:	60fb      	str	r3, [r7, #12]
		break;
 8005294:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	b298      	uxth	r0, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	b299      	uxth	r1, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	330c      	adds	r3, #12
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	330a      	adds	r3, #10
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f7fb fdf1 	bl	8000e94 <LCD_FillRect>
	SMLCD_Flush();
 80052b2:	f7fb fa11 	bl	80006d8 <SMLCD_Flush>
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	08016aa8 	.word	0x08016aa8
 80052c4:	080163d4 	.word	0x080163d4
 80052c8:	20028a86 	.word	0x20028a86
 80052cc:	080163e0 	.word	0x080163e0
 80052d0:	20028a88 	.word	0x20028a88
 80052d4:	080163ec 	.word	0x080163ec
 80052d8:	080163f4 	.word	0x080163f4
 80052dc:	08016400 	.word	0x08016400
 80052e0:	08016408 	.word	0x08016408

080052e4 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b090      	sub	sp, #64	; 0x40
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 80052ec:	2314      	movs	r3, #20
 80052ee:	637b      	str	r3, [r7, #52]	; 0x34
	int inputGpioAlignment=245;
 80052f0:	23f5      	movs	r3, #245	; 0xf5
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
	int daughterCardAlignment=240;
 80052f4:	23f0      	movs	r3, #240	; 0xf0
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i2cCheck;
	int arrowUp = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowDown=1;
 80052fc:	2301      	movs	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowSize=3;
 8005300:	2303      	movs	r3, #3
 8005302:	623b      	str	r3, [r7, #32]
	previousMenu=0;
 8005304:	4b81      	ldr	r3, [pc, #516]	; (800550c <drawStatusMenu+0x228>)
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 800530a:	f7fb fb2f 	bl	800096c <LCD_Clear>
	getLatestADC();
 800530e:	f002 fa41 	bl	8007794 <getLatestADC>
	drawMenuHeader();
 8005312:	f002 f969 	bl	80075e8 <drawMenuHeader>
	i  = 135;
 8005316:	2387      	movs	r3, #135	; 0x87
 8005318:	61fb      	str	r3, [r7, #28]
	j = 24;
 800531a:	2318      	movs	r3, #24
 800531c:	61bb      	str	r3, [r7, #24]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	b299      	uxth	r1, r3
 8005322:	4b7b      	ldr	r3, [pc, #492]	; (8005510 <drawStatusMenu+0x22c>)
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	3b02      	subs	r3, #2
 8005328:	b29a      	uxth	r2, r3
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	b29b      	uxth	r3, r3
 800532e:	3303      	adds	r3, #3
 8005330:	b29b      	uxth	r3, r3
 8005332:	2002      	movs	r0, #2
 8005334:	f7fb fdae 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);
	switch(indicator){
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	f000 820a 	beq.w	8005754 <drawStatusMenu+0x470>
 8005340:	2b03      	cmp	r3, #3
 8005342:	f000 87a7 	beq.w	8006294 <drawStatusMenu+0xfb0>
 8005346:	2b01      	cmp	r3, #1
 8005348:	f041 80ba 	bne.w	80064c0 <drawStatusMenu+0x11dc>
	case 1:{
		i=35;
 800534c:	2323      	movs	r3, #35	; 0x23
 800534e:	61fb      	str	r3, [r7, #28]
		j=90;
 8005350:	235a      	movs	r3, #90	; 0x5a
 8005352:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b02      	subs	r3, #2
 800535a:	b299      	uxth	r1, r3
 800535c:	4b6c      	ldr	r3, [pc, #432]	; (8005510 <drawStatusMenu+0x22c>)
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	3b02      	subs	r3, #2
 8005362:	b29a      	uxth	r2, r3
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	b29b      	uxth	r3, r3
 8005368:	3302      	adds	r3, #2
 800536a:	b29b      	uxth	r3, r3
 800536c:	2002      	movs	r0, #2
 800536e:	f7fb fd91 	bl	8000e94 <LCD_FillRect>
		j=75;
 8005372:	234b      	movs	r3, #75	; 0x4b
 8005374:	61bb      	str	r3, [r7, #24]
		i=62;
 8005376:	233e      	movs	r3, #62	; 0x3e
 8005378:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	b298      	uxth	r0, r3
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	b299      	uxth	r1, r3
 8005382:	4b64      	ldr	r3, [pc, #400]	; (8005514 <drawStatusMenu+0x230>)
 8005384:	4a64      	ldr	r2, [pc, #400]	; (8005518 <drawStatusMenu+0x234>)
 8005386:	f7fc f8d1 	bl	800152c <LCD_PutStr>
 800538a:	4603      	mov	r3, r0
 800538c:	461a      	mov	r2, r3
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	61fb      	str	r3, [r7, #28]
		i+=145;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	3391      	adds	r3, #145	; 0x91
 8005398:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	b298      	uxth	r0, r3
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	b299      	uxth	r1, r3
 80053a2:	4b5c      	ldr	r3, [pc, #368]	; (8005514 <drawStatusMenu+0x230>)
 80053a4:	4a5d      	ldr	r2, [pc, #372]	; (800551c <drawStatusMenu+0x238>)
 80053a6:	f7fc f8c1 	bl	800152c <LCD_PutStr>

		i=10;
 80053aa:	230a      	movs	r3, #10
 80053ac:	61fb      	str	r3, [r7, #28]
		j=95;
 80053ae:	235f      	movs	r3, #95	; 0x5f
 80053b0:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault0: ", fnt7x10);
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	b298      	uxth	r0, r3
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	b299      	uxth	r1, r3
 80053ba:	4b56      	ldr	r3, [pc, #344]	; (8005514 <drawStatusMenu+0x230>)
 80053bc:	4a58      	ldr	r2, [pc, #352]	; (8005520 <drawStatusMenu+0x23c>)
 80053be:	f7fc f8b5 	bl	800152c <LCD_PutStr>
 80053c2:	4603      	mov	r3, r0
 80053c4:	461a      	mov	r2, r3
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	b298      	uxth	r0, r3
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	b299      	uxth	r1, r3
 80053d4:	4b4f      	ldr	r3, [pc, #316]	; (8005514 <drawStatusMenu+0x230>)
 80053d6:	4a53      	ldr	r2, [pc, #332]	; (8005524 <drawStatusMenu+0x240>)
 80053d8:	f7fc f8a8 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	b298      	uxth	r0, r3
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	b299      	uxth	r1, r3
 80053e8:	4b4a      	ldr	r3, [pc, #296]	; (8005514 <drawStatusMenu+0x230>)
 80053ea:	4a4f      	ldr	r2, [pc, #316]	; (8005528 <drawStatusMenu+0x244>)
 80053ec:	f7fc f89e 	bl	800152c <LCD_PutStr>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	61fb      	str	r3, [r7, #28]
		if(ZION.SOC_EEPROM_Detected){
 80053fa:	4b4c      	ldr	r3, [pc, #304]	; (800552c <drawStatusMenu+0x248>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d008      	beq.n	8005414 <drawStatusMenu+0x130>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	b298      	uxth	r0, r3
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	b299      	uxth	r1, r3
 800540a:	4b42      	ldr	r3, [pc, #264]	; (8005514 <drawStatusMenu+0x230>)
 800540c:	4a48      	ldr	r2, [pc, #288]	; (8005530 <drawStatusMenu+0x24c>)
 800540e:	f7fc f88d 	bl	800152c <LCD_PutStr>
 8005412:	e007      	b.n	8005424 <drawStatusMenu+0x140>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	b298      	uxth	r0, r3
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	b299      	uxth	r1, r3
 800541c:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <drawStatusMenu+0x230>)
 800541e:	4a45      	ldr	r2, [pc, #276]	; (8005534 <drawStatusMenu+0x250>)
 8005420:	f7fc f884 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005424:	230a      	movs	r3, #10
 8005426:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	330f      	adds	r3, #15
 800542c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault1: ", fnt7x10);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	b298      	uxth	r0, r3
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	b299      	uxth	r1, r3
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <drawStatusMenu+0x230>)
 8005438:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <drawStatusMenu+0x254>)
 800543a:	f7fc f877 	bl	800152c <LCD_PutStr>
 800543e:	4603      	mov	r3, r0
 8005440:	461a      	mov	r2, r3
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	b298      	uxth	r0, r3
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	b299      	uxth	r1, r3
 8005450:	4b30      	ldr	r3, [pc, #192]	; (8005514 <drawStatusMenu+0x230>)
 8005452:	4a34      	ldr	r2, [pc, #208]	; (8005524 <drawStatusMenu+0x240>)
 8005454:	f7fc f86a 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	b298      	uxth	r0, r3
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	b299      	uxth	r1, r3
 8005464:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <drawStatusMenu+0x230>)
 8005466:	4a35      	ldr	r2, [pc, #212]	; (800553c <drawStatusMenu+0x258>)
 8005468:	f7fc f860 	bl	800152c <LCD_PutStr>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	61fb      	str	r3, [r7, #28]
		if(ZION.ASIC_EEPROM_Detected){
 8005476:	4b2d      	ldr	r3, [pc, #180]	; (800552c <drawStatusMenu+0x248>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <drawStatusMenu+0x1ac>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	b298      	uxth	r0, r3
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	b299      	uxth	r1, r3
 8005486:	4b23      	ldr	r3, [pc, #140]	; (8005514 <drawStatusMenu+0x230>)
 8005488:	4a29      	ldr	r2, [pc, #164]	; (8005530 <drawStatusMenu+0x24c>)
 800548a:	f7fc f84f 	bl	800152c <LCD_PutStr>
 800548e:	e007      	b.n	80054a0 <drawStatusMenu+0x1bc>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	b298      	uxth	r0, r3
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	b299      	uxth	r1, r3
 8005498:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <drawStatusMenu+0x230>)
 800549a:	4a26      	ldr	r2, [pc, #152]	; (8005534 <drawStatusMenu+0x250>)
 800549c:	f7fc f846 	bl	800152c <LCD_PutStr>
		}
		i=10;
 80054a0:	230a      	movs	r3, #10
 80054a2:	61fb      	str	r3, [r7, #28]
		j+=15;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	330f      	adds	r3, #15
 80054a8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault2: ", fnt7x10);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	b298      	uxth	r0, r3
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	b299      	uxth	r1, r3
 80054b2:	4b18      	ldr	r3, [pc, #96]	; (8005514 <drawStatusMenu+0x230>)
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <drawStatusMenu+0x25c>)
 80054b6:	f7fc f839 	bl	800152c <LCD_PutStr>
 80054ba:	4603      	mov	r3, r0
 80054bc:	461a      	mov	r2, r3
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	b298      	uxth	r0, r3
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	b299      	uxth	r1, r3
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <drawStatusMenu+0x230>)
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <drawStatusMenu+0x240>)
 80054d0:	f7fc f82c 	bl	800152c <LCD_PutStr>
		i=daughterCardAlignment;
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	b298      	uxth	r0, r3
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	b299      	uxth	r1, r3
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <drawStatusMenu+0x230>)
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <drawStatusMenu+0x260>)
 80054e4:	f7fc f822 	bl	800152c <LCD_PutStr>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	61fb      	str	r3, [r7, #28]
		if(ZION.DISPLAY_EEPROM_Detected){
 80054f2:	4b0e      	ldr	r3, [pc, #56]	; (800552c <drawStatusMenu+0x248>)
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d026      	beq.n	8005548 <drawStatusMenu+0x264>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	b298      	uxth	r0, r3
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	b299      	uxth	r1, r3
 8005502:	4b04      	ldr	r3, [pc, #16]	; (8005514 <drawStatusMenu+0x230>)
 8005504:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <drawStatusMenu+0x24c>)
 8005506:	f7fc f811 	bl	800152c <LCD_PutStr>
 800550a:	e025      	b.n	8005558 <drawStatusMenu+0x274>
 800550c:	20003354 	.word	0x20003354
 8005510:	20028a86 	.word	0x20028a86
 8005514:	08016aa8 	.word	0x08016aa8
 8005518:	08016344 	.word	0x08016344
 800551c:	08016414 	.word	0x08016414
 8005520:	08016424 	.word	0x08016424
 8005524:	08016430 	.word	0x08016430
 8005528:	0801643c 	.word	0x0801643c
 800552c:	20003284 	.word	0x20003284
 8005530:	08016444 	.word	0x08016444
 8005534:	08016450 	.word	0x08016450
 8005538:	0801645c 	.word	0x0801645c
 800553c:	08016468 	.word	0x08016468
 8005540:	08016470 	.word	0x08016470
 8005544:	0801647c 	.word	0x0801647c
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	b298      	uxth	r0, r3
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	b299      	uxth	r1, r3
 8005550:	4b75      	ldr	r3, [pc, #468]	; (8005728 <drawStatusMenu+0x444>)
 8005552:	4a76      	ldr	r2, [pc, #472]	; (800572c <drawStatusMenu+0x448>)
 8005554:	f7fb ffea 	bl	800152c <LCD_PutStr>
		}

		i=10;
 8005558:	230a      	movs	r3, #10
 800555a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	330f      	adds	r3, #15
 8005560:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	b298      	uxth	r0, r3
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	b299      	uxth	r1, r3
 800556a:	4b6f      	ldr	r3, [pc, #444]	; (8005728 <drawStatusMenu+0x444>)
 800556c:	4a70      	ldr	r2, [pc, #448]	; (8005730 <drawStatusMenu+0x44c>)
 800556e:	f7fb ffdd 	bl	800152c <LCD_PutStr>
 8005572:	4603      	mov	r3, r0
 8005574:	461a      	mov	r2, r3
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	b298      	uxth	r0, r3
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	b299      	uxth	r1, r3
 8005584:	4b68      	ldr	r3, [pc, #416]	; (8005728 <drawStatusMenu+0x444>)
 8005586:	4a6b      	ldr	r2, [pc, #428]	; (8005734 <drawStatusMenu+0x450>)
 8005588:	f7fb ffd0 	bl	800152c <LCD_PutStr>

		i=10;
 800558c:	230a      	movs	r3, #10
 800558e:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	330f      	adds	r3, #15
 8005594:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	b298      	uxth	r0, r3
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	b299      	uxth	r1, r3
 800559e:	4b62      	ldr	r3, [pc, #392]	; (8005728 <drawStatusMenu+0x444>)
 80055a0:	4a65      	ldr	r2, [pc, #404]	; (8005738 <drawStatusMenu+0x454>)
 80055a2:	f7fb ffc3 	bl	800152c <LCD_PutStr>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461a      	mov	r2, r3
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	b298      	uxth	r0, r3
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	b299      	uxth	r1, r3
 80055b8:	4b5b      	ldr	r3, [pc, #364]	; (8005728 <drawStatusMenu+0x444>)
 80055ba:	4a5e      	ldr	r2, [pc, #376]	; (8005734 <drawStatusMenu+0x450>)
 80055bc:	f7fb ffb6 	bl	800152c <LCD_PutStr>

		i=10;
 80055c0:	230a      	movs	r3, #10
 80055c2:	61fb      	str	r3, [r7, #28]
		j+=15;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	330f      	adds	r3, #15
 80055c8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	b298      	uxth	r0, r3
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	b299      	uxth	r1, r3
 80055d2:	4b55      	ldr	r3, [pc, #340]	; (8005728 <drawStatusMenu+0x444>)
 80055d4:	4a59      	ldr	r2, [pc, #356]	; (800573c <drawStatusMenu+0x458>)
 80055d6:	f7fb ffa9 	bl	800152c <LCD_PutStr>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	b298      	uxth	r0, r3
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	b299      	uxth	r1, r3
 80055ec:	4b4e      	ldr	r3, [pc, #312]	; (8005728 <drawStatusMenu+0x444>)
 80055ee:	4a51      	ldr	r2, [pc, #324]	; (8005734 <drawStatusMenu+0x450>)
 80055f0:	f7fb ff9c 	bl	800152c <LCD_PutStr>

		i=10;
 80055f4:	230a      	movs	r3, #10
 80055f6:	61fb      	str	r3, [r7, #28]
		j+=15;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	330f      	adds	r3, #15
 80055fc:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	b298      	uxth	r0, r3
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	b299      	uxth	r1, r3
 8005606:	4b48      	ldr	r3, [pc, #288]	; (8005728 <drawStatusMenu+0x444>)
 8005608:	4a4d      	ldr	r2, [pc, #308]	; (8005740 <drawStatusMenu+0x45c>)
 800560a:	f7fb ff8f 	bl	800152c <LCD_PutStr>
 800560e:	4603      	mov	r3, r0
 8005610:	461a      	mov	r2, r3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	b298      	uxth	r0, r3
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	b299      	uxth	r1, r3
 8005620:	4b41      	ldr	r3, [pc, #260]	; (8005728 <drawStatusMenu+0x444>)
 8005622:	4a44      	ldr	r2, [pc, #272]	; (8005734 <drawStatusMenu+0x450>)
 8005624:	f7fb ff82 	bl	800152c <LCD_PutStr>

		i=10;
 8005628:	230a      	movs	r3, #10
 800562a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	330f      	adds	r3, #15
 8005630:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	b298      	uxth	r0, r3
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	b299      	uxth	r1, r3
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <drawStatusMenu+0x444>)
 800563c:	4a41      	ldr	r2, [pc, #260]	; (8005744 <drawStatusMenu+0x460>)
 800563e:	f7fb ff75 	bl	800152c <LCD_PutStr>
 8005642:	4603      	mov	r3, r0
 8005644:	461a      	mov	r2, r3
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	b298      	uxth	r0, r3
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	b299      	uxth	r1, r3
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <drawStatusMenu+0x444>)
 8005656:	4a37      	ldr	r2, [pc, #220]	; (8005734 <drawStatusMenu+0x450>)
 8005658:	f7fb ff68 	bl	800152c <LCD_PutStr>

		i=10;
 800565c:	230a      	movs	r3, #10
 800565e:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	330f      	adds	r3, #15
 8005664:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	b298      	uxth	r0, r3
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	b299      	uxth	r1, r3
 800566e:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <drawStatusMenu+0x444>)
 8005670:	4a35      	ldr	r2, [pc, #212]	; (8005748 <drawStatusMenu+0x464>)
 8005672:	f7fb ff5b 	bl	800152c <LCD_PutStr>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "placeholder", fnt7x10);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	b298      	uxth	r0, r3
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	b299      	uxth	r1, r3
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <drawStatusMenu+0x444>)
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <drawStatusMenu+0x450>)
 800568c:	f7fb ff4e 	bl	800152c <LCD_PutStr>


		//horizontal divider
		j=65;
 8005690:	2341      	movs	r3, #65	; 0x41
 8005692:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b299      	uxth	r1, r3
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <drawStatusMenu+0x468>)
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	3b02      	subs	r3, #2
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2002      	movs	r0, #2
 80056ae:	f7fb fbf1 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 80056b2:	23e6      	movs	r3, #230	; 0xe6
 80056b4:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b03      	subs	r3, #3
 80056bc:	b298      	uxth	r0, r3
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	b299      	uxth	r1, r3
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3303      	adds	r3, #3
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	4b21      	ldr	r3, [pc, #132]	; (8005750 <drawStatusMenu+0x46c>)
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	3b02      	subs	r3, #2
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f7fb fbdf 	bl	8000e94 <LCD_FillRect>

		i=200;
 80056d6:	23c8      	movs	r3, #200	; 0xc8
 80056d8:	61fb      	str	r3, [r7, #28]
		j=220;
 80056da:	23dc      	movs	r3, #220	; 0xdc
 80056dc:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	b298      	uxth	r0, r3
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	b299      	uxth	r1, r3
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f7fc f86d 	bl	80017cc <drawUpDownArrow>
		i=180;
 80056f2:	23b4      	movs	r3, #180	; 0xb4
 80056f4:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	b298      	uxth	r0, r3
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	b299      	uxth	r1, r3
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	b29a      	uxth	r2, r3
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	b29b      	uxth	r3, r3
 8005706:	f7fc f861 	bl	80017cc <drawUpDownArrow>
		i=220;
 800570a:	23dc      	movs	r3, #220	; 0xdc
 800570c:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	b298      	uxth	r0, r3
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	b299      	uxth	r1, r3
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	b29a      	uxth	r2, r3
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	b29b      	uxth	r3, r3
 800571e:	f7fc f855 	bl	80017cc <drawUpDownArrow>
		break;
 8005722:	f000 becd 	b.w	80064c0 <drawStatusMenu+0x11dc>
 8005726:	bf00      	nop
 8005728:	08016aa8 	.word	0x08016aa8
 800572c:	08016450 	.word	0x08016450
 8005730:	08016488 	.word	0x08016488
 8005734:	08016430 	.word	0x08016430
 8005738:	08016494 	.word	0x08016494
 800573c:	080164a0 	.word	0x080164a0
 8005740:	080164ac 	.word	0x080164ac
 8005744:	080164b8 	.word	0x080164b8
 8005748:	080164c4 	.word	0x080164c4
 800574c:	20028a86 	.word	0x20028a86
 8005750:	20028a88 	.word	0x20028a88
	}
	case 2:{
		i=35;
 8005754:	2323      	movs	r3, #35	; 0x23
 8005756:	61fb      	str	r3, [r7, #28]
		j=90;
 8005758:	235a      	movs	r3, #90	; 0x5a
 800575a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b02      	subs	r3, #2
 8005762:	b299      	uxth	r1, r3
 8005764:	4ba4      	ldr	r3, [pc, #656]	; (80059f8 <drawStatusMenu+0x714>)
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	3b02      	subs	r3, #2
 800576a:	b29a      	uxth	r2, r3
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	b29b      	uxth	r3, r3
 8005770:	3302      	adds	r3, #2
 8005772:	b29b      	uxth	r3, r3
 8005774:	2002      	movs	r0, #2
 8005776:	f7fb fb8d 	bl	8000e94 <LCD_FillRect>
		j=75;
 800577a:	234b      	movs	r3, #75	; 0x4b
 800577c:	61bb      	str	r3, [r7, #24]
		i=42;
 800577e:	232a      	movs	r3, #42	; 0x2a
 8005780:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	b298      	uxth	r0, r3
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	b299      	uxth	r1, r3
 800578a:	4b9c      	ldr	r3, [pc, #624]	; (80059fc <drawStatusMenu+0x718>)
 800578c:	4a9c      	ldr	r2, [pc, #624]	; (8005a00 <drawStatusMenu+0x71c>)
 800578e:	f7fb fecd 	bl	800152c <LCD_PutStr>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	61fb      	str	r3, [r7, #28]
		i+=125;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	337d      	adds	r3, #125	; 0x7d
 80057a0:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	b298      	uxth	r0, r3
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	b299      	uxth	r1, r3
 80057aa:	4b94      	ldr	r3, [pc, #592]	; (80059fc <drawStatusMenu+0x718>)
 80057ac:	4a95      	ldr	r2, [pc, #596]	; (8005a04 <drawStatusMenu+0x720>)
 80057ae:	f7fb febd 	bl	800152c <LCD_PutStr>

		i=10;
 80057b2:	230a      	movs	r3, #10
 80057b4:	61fb      	str	r3, [r7, #28]
		j=95;
 80057b6:	235f      	movs	r3, #95	; 0x5f
 80057b8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	b298      	uxth	r0, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	b299      	uxth	r1, r3
 80057c2:	4b8e      	ldr	r3, [pc, #568]	; (80059fc <drawStatusMenu+0x718>)
 80057c4:	4a90      	ldr	r2, [pc, #576]	; (8005a08 <drawStatusMenu+0x724>)
 80057c6:	f7fb feb1 	bl	800152c <LCD_PutStr>
 80057ca:	4603      	mov	r3, r0
 80057cc:	461a      	mov	r2, r3
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 80057d4:	4b8d      	ldr	r3, [pc, #564]	; (8005a0c <drawStatusMenu+0x728>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a8d      	ldr	r2, [pc, #564]	; (8005a10 <drawStatusMenu+0x72c>)
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	edd3 7a00 	vldr	s15, [r3]
 80057e2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005a14 <drawStatusMenu+0x730>
 80057e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ee:	ee17 3a90 	vmov	r3, s15
 80057f2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	b298      	uxth	r0, r3
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	b299      	uxth	r1, r3
 80057fc:	4b7f      	ldr	r3, [pc, #508]	; (80059fc <drawStatusMenu+0x718>)
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	2303      	movs	r3, #3
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f7fb ff30 	bl	8001668 <LCD_PutIntF>
 8005808:	4603      	mov	r3, r0
 800580a:	461a      	mov	r2, r3
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	4413      	add	r3, r2
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	b298      	uxth	r0, r3
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	b299      	uxth	r1, r3
 800581e:	4b77      	ldr	r3, [pc, #476]	; (80059fc <drawStatusMenu+0x718>)
 8005820:	4a7d      	ldr	r2, [pc, #500]	; (8005a18 <drawStatusMenu+0x734>)
 8005822:	f7fb fe83 	bl	800152c <LCD_PutStr>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8005830:	4b76      	ldr	r3, [pc, #472]	; (8005a0c <drawStatusMenu+0x728>)
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	4a76      	ldr	r2, [pc, #472]	; (8005a10 <drawStatusMenu+0x72c>)
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	edd3 7a00 	vldr	s15, [r3]
 800583e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005a14 <drawStatusMenu+0x730>
 8005842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800584a:	ee17 3a90 	vmov	r3, s15
 800584e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	b298      	uxth	r0, r3
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	b299      	uxth	r1, r3
 8005858:	4b68      	ldr	r3, [pc, #416]	; (80059fc <drawStatusMenu+0x718>)
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	2303      	movs	r3, #3
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	f7fb ff02 	bl	8001668 <LCD_PutIntF>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	b298      	uxth	r0, r3
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	b299      	uxth	r1, r3
 800587a:	4b60      	ldr	r3, [pc, #384]	; (80059fc <drawStatusMenu+0x718>)
 800587c:	4a67      	ldr	r2, [pc, #412]	; (8005a1c <drawStatusMenu+0x738>)
 800587e:	f7fb fe55 	bl	800152c <LCD_PutStr>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	b298      	uxth	r0, r3
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	b299      	uxth	r1, r3
 8005894:	4b62      	ldr	r3, [pc, #392]	; (8005a20 <drawStatusMenu+0x73c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a62      	ldr	r2, [pc, #392]	; (8005a24 <drawStatusMenu+0x740>)
 800589a:	5cd3      	ldrb	r3, [r2, r3]
 800589c:	461a      	mov	r2, r3
 800589e:	4b57      	ldr	r3, [pc, #348]	; (80059fc <drawStatusMenu+0x718>)
 80058a0:	f7fb fe7c 	bl	800159c <LCD_PutInt>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	4413      	add	r3, r2
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	b298      	uxth	r0, r3
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	b299      	uxth	r1, r3
 80058ba:	4b50      	ldr	r3, [pc, #320]	; (80059fc <drawStatusMenu+0x718>)
 80058bc:	4a5a      	ldr	r2, [pc, #360]	; (8005a28 <drawStatusMenu+0x744>)
 80058be:	f7fb fe35 	bl	800152c <LCD_PutStr>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	b298      	uxth	r0, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	b299      	uxth	r1, r3
 80058d4:	4b52      	ldr	r3, [pc, #328]	; (8005a20 <drawStatusMenu+0x73c>)
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	4a52      	ldr	r2, [pc, #328]	; (8005a24 <drawStatusMenu+0x740>)
 80058da:	5cd3      	ldrb	r3, [r2, r3]
 80058dc:	461a      	mov	r2, r3
 80058de:	4b47      	ldr	r3, [pc, #284]	; (80059fc <drawStatusMenu+0x718>)
 80058e0:	f7fb fe5c 	bl	800159c <LCD_PutInt>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	61fb      	str	r3, [r7, #28]


		i=10;
 80058ee:	230a      	movs	r3, #10
 80058f0:	61fb      	str	r3, [r7, #28]
		j+=15;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	330f      	adds	r3, #15
 80058f6:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	b298      	uxth	r0, r3
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	b299      	uxth	r1, r3
 8005900:	4b3e      	ldr	r3, [pc, #248]	; (80059fc <drawStatusMenu+0x718>)
 8005902:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <drawStatusMenu+0x748>)
 8005904:	f7fb fe12 	bl	800152c <LCD_PutStr>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8005912:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <drawStatusMenu+0x728>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4a3e      	ldr	r2, [pc, #248]	; (8005a10 <drawStatusMenu+0x72c>)
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005a14 <drawStatusMenu+0x730>
 8005924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800592c:	ee17 3a90 	vmov	r3, s15
 8005930:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	b298      	uxth	r0, r3
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	b299      	uxth	r1, r3
 800593a:	4b30      	ldr	r3, [pc, #192]	; (80059fc <drawStatusMenu+0x718>)
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2303      	movs	r3, #3
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f7fb fe91 	bl	8001668 <LCD_PutIntF>
 8005946:	4603      	mov	r3, r0
 8005948:	461a      	mov	r2, r3
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	4413      	add	r3, r2
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	b298      	uxth	r0, r3
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	b299      	uxth	r1, r3
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <drawStatusMenu+0x718>)
 800595e:	4a34      	ldr	r2, [pc, #208]	; (8005a30 <drawStatusMenu+0x74c>)
 8005960:	f7fb fde4 	bl	800152c <LCD_PutStr>
 8005964:	4603      	mov	r3, r0
 8005966:	461a      	mov	r2, r3
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 800596e:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <drawStatusMenu+0x728>)
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <drawStatusMenu+0x72c>)
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	edd3 7a00 	vldr	s15, [r3]
 800597c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005a14 <drawStatusMenu+0x730>
 8005980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005988:	ee17 3a90 	vmov	r3, s15
 800598c:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	b298      	uxth	r0, r3
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	b299      	uxth	r1, r3
 8005996:	4b19      	ldr	r3, [pc, #100]	; (80059fc <drawStatusMenu+0x718>)
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2303      	movs	r3, #3
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	f7fb fe63 	bl	8001668 <LCD_PutIntF>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	b298      	uxth	r0, r3
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	b299      	uxth	r1, r3
 80059b8:	4b10      	ldr	r3, [pc, #64]	; (80059fc <drawStatusMenu+0x718>)
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <drawStatusMenu+0x750>)
 80059bc:	f7fb fdb6 	bl	800152c <LCD_PutStr>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	b298      	uxth	r0, r3
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	b299      	uxth	r1, r3
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <drawStatusMenu+0x73c>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <drawStatusMenu+0x740>)
 80059d8:	5cd3      	ldrb	r3, [r2, r3]
 80059da:	461a      	mov	r2, r3
 80059dc:	4b07      	ldr	r3, [pc, #28]	; (80059fc <drawStatusMenu+0x718>)
 80059de:	f7fb fddd 	bl	800159c <LCD_PutInt>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	4413      	add	r3, r2
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	b298      	uxth	r0, r3
 80059f4:	e020      	b.n	8005a38 <drawStatusMenu+0x754>
 80059f6:	bf00      	nop
 80059f8:	20028a86 	.word	0x20028a86
 80059fc:	08016aa8 	.word	0x08016aa8
 8005a00:	080164d0 	.word	0x080164d0
 8005a04:	080164e0 	.word	0x080164e0
 8005a08:	080164f0 	.word	0x080164f0
 8005a0c:	20000138 	.word	0x20000138
 8005a10:	20030a7c 	.word	0x20030a7c
 8005a14:	447a0000 	.word	0x447a0000
 8005a18:	080164f8 	.word	0x080164f8
 8005a1c:	08016500 	.word	0x08016500
 8005a20:	20000108 	.word	0x20000108
 8005a24:	20028cb0 	.word	0x20028cb0
 8005a28:	08016508 	.word	0x08016508
 8005a2c:	08016510 	.word	0x08016510
 8005a30:	08016518 	.word	0x08016518
 8005a34:	08016520 	.word	0x08016520
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	b299      	uxth	r1, r3
 8005a3c:	4ba3      	ldr	r3, [pc, #652]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005a3e:	4aa4      	ldr	r2, [pc, #656]	; (8005cd0 <drawStatusMenu+0x9ec>)
 8005a40:	f7fb fd74 	bl	800152c <LCD_PutStr>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	b298      	uxth	r0, r3
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	b299      	uxth	r1, r3
 8005a56:	4b9f      	ldr	r3, [pc, #636]	; (8005cd4 <drawStatusMenu+0x9f0>)
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	4a9f      	ldr	r2, [pc, #636]	; (8005cd8 <drawStatusMenu+0x9f4>)
 8005a5c:	5cd3      	ldrb	r3, [r2, r3]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4b9a      	ldr	r3, [pc, #616]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005a62:	f7fb fd9b 	bl	800159c <LCD_PutInt>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]

		i=10;
 8005a70:	230a      	movs	r3, #10
 8005a72:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	330f      	adds	r3, #15
 8005a78:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	b298      	uxth	r0, r3
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	b299      	uxth	r1, r3
 8005a82:	4b92      	ldr	r3, [pc, #584]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005a84:	4a95      	ldr	r2, [pc, #596]	; (8005cdc <drawStatusMenu+0x9f8>)
 8005a86:	f7fb fd51 	bl	800152c <LCD_PutStr>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 8005a94:	4b92      	ldr	r3, [pc, #584]	; (8005ce0 <drawStatusMenu+0x9fc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	4a92      	ldr	r2, [pc, #584]	; (8005ce4 <drawStatusMenu+0xa00>)
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	edd3 7a00 	vldr	s15, [r3]
 8005aa2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005ce8 <drawStatusMenu+0xa04>
 8005aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aae:	ee17 3a90 	vmov	r3, s15
 8005ab2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	b298      	uxth	r0, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	b299      	uxth	r1, r3
 8005abc:	4b83      	ldr	r3, [pc, #524]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	f7fb fdd0 	bl	8001668 <LCD_PutIntF>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	4413      	add	r3, r2
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	b298      	uxth	r0, r3
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	b299      	uxth	r1, r3
 8005ade:	4b7b      	ldr	r3, [pc, #492]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005ae0:	4a82      	ldr	r2, [pc, #520]	; (8005cec <drawStatusMenu+0xa08>)
 8005ae2:	f7fb fd23 	bl	800152c <LCD_PutStr>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 8005af0:	4b7b      	ldr	r3, [pc, #492]	; (8005ce0 <drawStatusMenu+0x9fc>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4a7b      	ldr	r2, [pc, #492]	; (8005ce4 <drawStatusMenu+0xa00>)
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	edd3 7a00 	vldr	s15, [r3]
 8005afe:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8005ce8 <drawStatusMenu+0xa04>
 8005b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b0a:	ee17 3a90 	vmov	r3, s15
 8005b0e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	b298      	uxth	r0, r3
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	b299      	uxth	r1, r3
 8005b18:	4b6c      	ldr	r3, [pc, #432]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f7fb fda2 	bl	8001668 <LCD_PutIntF>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	b298      	uxth	r0, r3
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	b299      	uxth	r1, r3
 8005b3a:	4b64      	ldr	r3, [pc, #400]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005b3c:	4a6c      	ldr	r2, [pc, #432]	; (8005cf0 <drawStatusMenu+0xa0c>)
 8005b3e:	f7fb fcf5 	bl	800152c <LCD_PutStr>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	b298      	uxth	r0, r3
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	b299      	uxth	r1, r3
 8005b54:	4b5f      	ldr	r3, [pc, #380]	; (8005cd4 <drawStatusMenu+0x9f0>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4a5f      	ldr	r2, [pc, #380]	; (8005cd8 <drawStatusMenu+0x9f4>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b5b      	ldr	r3, [pc, #364]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005b60:	f7fb fd1c 	bl	800159c <LCD_PutInt>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	4413      	add	r3, r2
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	b298      	uxth	r0, r3
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	b299      	uxth	r1, r3
 8005b7a:	4b54      	ldr	r3, [pc, #336]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005b7c:	4a5d      	ldr	r2, [pc, #372]	; (8005cf4 <drawStatusMenu+0xa10>)
 8005b7e:	f7fb fcd5 	bl	800152c <LCD_PutStr>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	b298      	uxth	r0, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	b299      	uxth	r1, r3
 8005b94:	4b4f      	ldr	r3, [pc, #316]	; (8005cd4 <drawStatusMenu+0x9f0>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a4f      	ldr	r2, [pc, #316]	; (8005cd8 <drawStatusMenu+0x9f4>)
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4b4b      	ldr	r3, [pc, #300]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005ba0:	f7fb fcfc 	bl	800159c <LCD_PutInt>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	61fb      	str	r3, [r7, #28]

		i=10;
 8005bae:	230a      	movs	r3, #10
 8005bb0:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	330f      	adds	r3, #15
 8005bb6:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	b298      	uxth	r0, r3
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	b299      	uxth	r1, r3
 8005bc0:	4b42      	ldr	r3, [pc, #264]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005bc2:	4a4d      	ldr	r2, [pc, #308]	; (8005cf8 <drawStatusMenu+0xa14>)
 8005bc4:	f7fb fcb2 	bl	800152c <LCD_PutStr>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 8005bd2:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <drawStatusMenu+0x9fc>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	4a43      	ldr	r2, [pc, #268]	; (8005ce4 <drawStatusMenu+0xa00>)
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	edd3 7a00 	vldr	s15, [r3]
 8005be0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005ce8 <drawStatusMenu+0xa04>
 8005be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bec:	ee17 3a90 	vmov	r3, s15
 8005bf0:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	b298      	uxth	r0, r3
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	b299      	uxth	r1, r3
 8005bfa:	4b34      	ldr	r3, [pc, #208]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	2303      	movs	r3, #3
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f7fb fd31 	bl	8001668 <LCD_PutIntF>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0c:	4413      	add	r3, r2
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	b298      	uxth	r0, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	b299      	uxth	r1, r3
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005c1e:	4a37      	ldr	r2, [pc, #220]	; (8005cfc <drawStatusMenu+0xa18>)
 8005c20:	f7fb fc84 	bl	800152c <LCD_PutStr>
 8005c24:	4603      	mov	r3, r0
 8005c26:	461a      	mov	r2, r3
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <drawStatusMenu+0x9fc>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	4a2c      	ldr	r2, [pc, #176]	; (8005ce4 <drawStatusMenu+0xa00>)
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	edd3 7a00 	vldr	s15, [r3]
 8005c3c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005ce8 <drawStatusMenu+0xa04>
 8005c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c48:	ee17 3a90 	vmov	r3, s15
 8005c4c:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	b298      	uxth	r0, r3
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	b299      	uxth	r1, r3
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f7fb fd03 	bl	8001668 <LCD_PutIntF>
 8005c62:	4603      	mov	r3, r0
 8005c64:	461a      	mov	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	b298      	uxth	r0, r3
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	b299      	uxth	r1, r3
 8005c78:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005c7a:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <drawStatusMenu+0xa1c>)
 8005c7c:	f7fb fc56 	bl	800152c <LCD_PutStr>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	b298      	uxth	r0, r3
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	b299      	uxth	r1, r3
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <drawStatusMenu+0x9f0>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	4a10      	ldr	r2, [pc, #64]	; (8005cd8 <drawStatusMenu+0x9f4>)
 8005c98:	5cd3      	ldrb	r3, [r2, r3]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005c9e:	f7fb fc7d 	bl	800159c <LCD_PutInt>


		i=10;
 8005ca2:	230a      	movs	r3, #10
 8005ca4:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	330f      	adds	r3, #15
 8005caa:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	b298      	uxth	r0, r3
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	b299      	uxth	r1, r3
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <drawStatusMenu+0x9e8>)
 8005cb6:	4a13      	ldr	r2, [pc, #76]	; (8005d04 <drawStatusMenu+0xa20>)
 8005cb8:	f7fb fc38 	bl	800152c <LCD_PutStr>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <drawStatusMenu+0x9fc>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	e01d      	b.n	8005d08 <drawStatusMenu+0xa24>
 8005ccc:	08016aa8 	.word	0x08016aa8
 8005cd0:	08016528 	.word	0x08016528
 8005cd4:	20000108 	.word	0x20000108
 8005cd8:	20028cb0 	.word	0x20028cb0
 8005cdc:	08016530 	.word	0x08016530
 8005ce0:	20000138 	.word	0x20000138
 8005ce4:	20030a7c 	.word	0x20030a7c
 8005ce8:	447a0000 	.word	0x447a0000
 8005cec:	08016538 	.word	0x08016538
 8005cf0:	08016540 	.word	0x08016540
 8005cf4:	08016548 	.word	0x08016548
 8005cf8:	08016550 	.word	0x08016550
 8005cfc:	08016558 	.word	0x08016558
 8005d00:	08016560 	.word	0x08016560
 8005d04:	08016568 	.word	0x08016568
 8005d08:	4aa7      	ldr	r2, [pc, #668]	; (8005fa8 <drawStatusMenu+0xcc4>)
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	edd3 7a00 	vldr	s15, [r3]
 8005d12:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005fac <drawStatusMenu+0xcc8>
 8005d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d1e:	ee17 3a90 	vmov	r3, s15
 8005d22:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	b298      	uxth	r0, r3
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	b299      	uxth	r1, r3
 8005d2c:	4ba0      	ldr	r3, [pc, #640]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2303      	movs	r3, #3
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	f7fb fc98 	bl	8001668 <LCD_PutIntF>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3e:	4413      	add	r3, r2
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	b298      	uxth	r0, r3
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	b299      	uxth	r1, r3
 8005d4e:	4b98      	ldr	r3, [pc, #608]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005d50:	4a98      	ldr	r2, [pc, #608]	; (8005fb4 <drawStatusMenu+0xcd0>)
 8005d52:	f7fb fbeb 	bl	800152c <LCD_PutStr>
 8005d56:	4603      	mov	r3, r0
 8005d58:	461a      	mov	r2, r3
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 8005d60:	4b95      	ldr	r3, [pc, #596]	; (8005fb8 <drawStatusMenu+0xcd4>)
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	4a90      	ldr	r2, [pc, #576]	; (8005fa8 <drawStatusMenu+0xcc4>)
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	edd3 7a00 	vldr	s15, [r3]
 8005d6e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005fac <drawStatusMenu+0xcc8>
 8005d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d7a:	ee17 3a90 	vmov	r3, s15
 8005d7e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	b298      	uxth	r0, r3
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	b299      	uxth	r1, r3
 8005d88:	4b89      	ldr	r3, [pc, #548]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f7fb fc6a 	bl	8001668 <LCD_PutIntF>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	b298      	uxth	r0, r3
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	b299      	uxth	r1, r3
 8005daa:	4b81      	ldr	r3, [pc, #516]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005dac:	4a83      	ldr	r2, [pc, #524]	; (8005fbc <drawStatusMenu+0xcd8>)
 8005dae:	f7fb fbbd 	bl	800152c <LCD_PutStr>
 8005db2:	4603      	mov	r3, r0
 8005db4:	461a      	mov	r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	b298      	uxth	r0, r3
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	b299      	uxth	r1, r3
 8005dc4:	4b7e      	ldr	r3, [pc, #504]	; (8005fc0 <drawStatusMenu+0xcdc>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	4a7e      	ldr	r2, [pc, #504]	; (8005fc4 <drawStatusMenu+0xce0>)
 8005dca:	5cd3      	ldrb	r3, [r2, r3]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4b78      	ldr	r3, [pc, #480]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005dd0:	f7fb fbe4 	bl	800159c <LCD_PutInt>

		i=10;
 8005dd4:	230a      	movs	r3, #10
 8005dd6:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	330f      	adds	r3, #15
 8005ddc:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	b298      	uxth	r0, r3
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	b299      	uxth	r1, r3
 8005de6:	4b72      	ldr	r3, [pc, #456]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005de8:	4a77      	ldr	r2, [pc, #476]	; (8005fc8 <drawStatusMenu+0xce4>)
 8005dea:	f7fb fb9f 	bl	800152c <LCD_PutStr>
 8005dee:	4603      	mov	r3, r0
 8005df0:	461a      	mov	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 8005df8:	4b6f      	ldr	r3, [pc, #444]	; (8005fb8 <drawStatusMenu+0xcd4>)
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	4a6a      	ldr	r2, [pc, #424]	; (8005fa8 <drawStatusMenu+0xcc4>)
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	edd3 7a00 	vldr	s15, [r3]
 8005e06:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8005fac <drawStatusMenu+0xcc8>
 8005e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e12:	ee17 3a90 	vmov	r3, s15
 8005e16:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	b298      	uxth	r0, r3
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	b299      	uxth	r1, r3
 8005e20:	4b63      	ldr	r3, [pc, #396]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	2303      	movs	r3, #3
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f7fb fc1e 	bl	8001668 <LCD_PutIntF>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	4413      	add	r3, r2
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	b298      	uxth	r0, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	b299      	uxth	r1, r3
 8005e42:	4b5b      	ldr	r3, [pc, #364]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005e44:	4a61      	ldr	r2, [pc, #388]	; (8005fcc <drawStatusMenu+0xce8>)
 8005e46:	f7fb fb71 	bl	800152c <LCD_PutStr>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 8005e54:	4b58      	ldr	r3, [pc, #352]	; (8005fb8 <drawStatusMenu+0xcd4>)
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	4a53      	ldr	r2, [pc, #332]	; (8005fa8 <drawStatusMenu+0xcc4>)
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	edd3 7a00 	vldr	s15, [r3]
 8005e62:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8005fac <drawStatusMenu+0xcc8>
 8005e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e6e:	ee17 3a90 	vmov	r3, s15
 8005e72:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	b298      	uxth	r0, r3
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	b299      	uxth	r1, r3
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	2303      	movs	r3, #3
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f7fb fbf0 	bl	8001668 <LCD_PutIntF>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	b298      	uxth	r0, r3
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	b299      	uxth	r1, r3
 8005e9e:	4b44      	ldr	r3, [pc, #272]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005ea0:	4a4b      	ldr	r2, [pc, #300]	; (8005fd0 <drawStatusMenu+0xcec>)
 8005ea2:	f7fb fb43 	bl	800152c <LCD_PutStr>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	b298      	uxth	r0, r3
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	b299      	uxth	r1, r3
 8005eb8:	4b41      	ldr	r3, [pc, #260]	; (8005fc0 <drawStatusMenu+0xcdc>)
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	4a41      	ldr	r2, [pc, #260]	; (8005fc4 <drawStatusMenu+0xce0>)
 8005ebe:	5cd3      	ldrb	r3, [r2, r3]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005ec4:	f7fb fb6a 	bl	800159c <LCD_PutInt>

		i=10;
 8005ec8:	230a      	movs	r3, #10
 8005eca:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	330f      	adds	r3, #15
 8005ed0:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	b298      	uxth	r0, r3
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	b299      	uxth	r1, r3
 8005eda:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005edc:	4a3d      	ldr	r2, [pc, #244]	; (8005fd4 <drawStatusMenu+0xcf0>)
 8005ede:	f7fb fb25 	bl	800152c <LCD_PutStr>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 8005eec:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <drawStatusMenu+0xcd4>)
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <drawStatusMenu+0xcc4>)
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	edd3 7a00 	vldr	s15, [r3]
 8005efa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005fac <drawStatusMenu+0xcc8>
 8005efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f06:	ee17 3a90 	vmov	r3, s15
 8005f0a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	b298      	uxth	r0, r3
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	b299      	uxth	r1, r3
 8005f14:	4b26      	ldr	r3, [pc, #152]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	2303      	movs	r3, #3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	f7fb fba4 	bl	8001668 <LCD_PutIntF>
 8005f20:	4603      	mov	r3, r0
 8005f22:	461a      	mov	r2, r3
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	4413      	add	r3, r2
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	b298      	uxth	r0, r3
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	b299      	uxth	r1, r3
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <drawStatusMenu+0xcf4>)
 8005f3a:	f7fb faf7 	bl	800152c <LCD_PutStr>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 8005f48:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <drawStatusMenu+0xcd4>)
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <drawStatusMenu+0xcc4>)
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	edd3 7a00 	vldr	s15, [r3]
 8005f56:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005fac <drawStatusMenu+0xcc8>
 8005f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f62:	ee17 3a90 	vmov	r3, s15
 8005f66:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	b298      	uxth	r0, r3
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	b299      	uxth	r1, r3
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2303      	movs	r3, #3
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	f7fb fb76 	bl	8001668 <LCD_PutIntF>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	461a      	mov	r2, r3
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	b298      	uxth	r0, r3
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	b299      	uxth	r1, r3
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <drawStatusMenu+0xccc>)
 8005f94:	4a11      	ldr	r2, [pc, #68]	; (8005fdc <drawStatusMenu+0xcf8>)
 8005f96:	f7fb fac9 	bl	800152c <LCD_PutStr>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e01c      	b.n	8005fe0 <drawStatusMenu+0xcfc>
 8005fa6:	bf00      	nop
 8005fa8:	20030a7c 	.word	0x20030a7c
 8005fac:	447a0000 	.word	0x447a0000
 8005fb0:	08016aa8 	.word	0x08016aa8
 8005fb4:	08016570 	.word	0x08016570
 8005fb8:	20000138 	.word	0x20000138
 8005fbc:	08016578 	.word	0x08016578
 8005fc0:	20000108 	.word	0x20000108
 8005fc4:	20028cb0 	.word	0x20028cb0
 8005fc8:	08016580 	.word	0x08016580
 8005fcc:	08016588 	.word	0x08016588
 8005fd0:	08016590 	.word	0x08016590
 8005fd4:	08016598 	.word	0x08016598
 8005fd8:	080165a0 	.word	0x080165a0
 8005fdc:	080165a8 	.word	0x080165a8
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	b298      	uxth	r0, r3
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	b299      	uxth	r1, r3
 8005fe8:	4b9b      	ldr	r3, [pc, #620]	; (8006258 <drawStatusMenu+0xf74>)
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	4a9b      	ldr	r2, [pc, #620]	; (800625c <drawStatusMenu+0xf78>)
 8005fee:	5cd3      	ldrb	r3, [r2, r3]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4b9b      	ldr	r3, [pc, #620]	; (8006260 <drawStatusMenu+0xf7c>)
 8005ff4:	f7fb fad2 	bl	800159c <LCD_PutInt>

		i=10;
 8005ff8:	230a      	movs	r3, #10
 8005ffa:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	330f      	adds	r3, #15
 8006000:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	b298      	uxth	r0, r3
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	b299      	uxth	r1, r3
 800600a:	4b95      	ldr	r3, [pc, #596]	; (8006260 <drawStatusMenu+0xf7c>)
 800600c:	4a95      	ldr	r2, [pc, #596]	; (8006264 <drawStatusMenu+0xf80>)
 800600e:	f7fb fa8d 	bl	800152c <LCD_PutStr>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 800601c:	4b92      	ldr	r3, [pc, #584]	; (8006268 <drawStatusMenu+0xf84>)
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	4a92      	ldr	r2, [pc, #584]	; (800626c <drawStatusMenu+0xf88>)
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	edd3 7a00 	vldr	s15, [r3]
 800602a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006270 <drawStatusMenu+0xf8c>
 800602e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006036:	ee17 3a90 	vmov	r3, s15
 800603a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	b298      	uxth	r0, r3
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	b299      	uxth	r1, r3
 8006044:	4b86      	ldr	r3, [pc, #536]	; (8006260 <drawStatusMenu+0xf7c>)
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2303      	movs	r3, #3
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	f7fb fb0c 	bl	8001668 <LCD_PutIntF>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	b298      	uxth	r0, r3
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	b299      	uxth	r1, r3
 8006066:	4b7e      	ldr	r3, [pc, #504]	; (8006260 <drawStatusMenu+0xf7c>)
 8006068:	4a82      	ldr	r2, [pc, #520]	; (8006274 <drawStatusMenu+0xf90>)
 800606a:	f7fb fa5f 	bl	800152c <LCD_PutStr>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	b298      	uxth	r0, r3
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	b299      	uxth	r1, r3
 8006080:	4b75      	ldr	r3, [pc, #468]	; (8006258 <drawStatusMenu+0xf74>)
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	4a75      	ldr	r2, [pc, #468]	; (800625c <drawStatusMenu+0xf78>)
 8006086:	5cd3      	ldrb	r3, [r2, r3]
 8006088:	461a      	mov	r2, r3
 800608a:	4b75      	ldr	r3, [pc, #468]	; (8006260 <drawStatusMenu+0xf7c>)
 800608c:	f7fb fa86 	bl	800159c <LCD_PutInt>

		i=10;
 8006090:	230a      	movs	r3, #10
 8006092:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	330f      	adds	r3, #15
 8006098:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	b298      	uxth	r0, r3
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	b299      	uxth	r1, r3
 80060a2:	4b6f      	ldr	r3, [pc, #444]	; (8006260 <drawStatusMenu+0xf7c>)
 80060a4:	4a74      	ldr	r2, [pc, #464]	; (8006278 <drawStatusMenu+0xf94>)
 80060a6:	f7fb fa41 	bl	800152c <LCD_PutStr>
 80060aa:	4603      	mov	r3, r0
 80060ac:	461a      	mov	r2, r3
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 80060b4:	4b6c      	ldr	r3, [pc, #432]	; (8006268 <drawStatusMenu+0xf84>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	4a6c      	ldr	r2, [pc, #432]	; (800626c <drawStatusMenu+0xf88>)
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	edd3 7a00 	vldr	s15, [r3]
 80060c2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8006270 <drawStatusMenu+0xf8c>
 80060c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ce:	ee17 3a90 	vmov	r3, s15
 80060d2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	b298      	uxth	r0, r3
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	b299      	uxth	r1, r3
 80060dc:	4b60      	ldr	r3, [pc, #384]	; (8006260 <drawStatusMenu+0xf7c>)
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2303      	movs	r3, #3
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	f7fb fac0 	bl	8001668 <LCD_PutIntF>
 80060e8:	4603      	mov	r3, r0
 80060ea:	461a      	mov	r2, r3
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	b298      	uxth	r0, r3
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	b299      	uxth	r1, r3
 80060fe:	4b58      	ldr	r3, [pc, #352]	; (8006260 <drawStatusMenu+0xf7c>)
 8006100:	4a5e      	ldr	r2, [pc, #376]	; (800627c <drawStatusMenu+0xf98>)
 8006102:	f7fb fa13 	bl	800152c <LCD_PutStr>
 8006106:	4603      	mov	r3, r0
 8006108:	461a      	mov	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	4413      	add	r3, r2
 800610e:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	b298      	uxth	r0, r3
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	b299      	uxth	r1, r3
 8006118:	4b4f      	ldr	r3, [pc, #316]	; (8006258 <drawStatusMenu+0xf74>)
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	4a4f      	ldr	r2, [pc, #316]	; (800625c <drawStatusMenu+0xf78>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	461a      	mov	r2, r3
 8006122:	4b4f      	ldr	r3, [pc, #316]	; (8006260 <drawStatusMenu+0xf7c>)
 8006124:	f7fb fa3a 	bl	800159c <LCD_PutInt>
		//horizontal divider
		j=65;
 8006128:	2341      	movs	r3, #65	; 0x41
 800612a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b299      	uxth	r1, r3
 8006134:	4b52      	ldr	r3, [pc, #328]	; (8006280 <drawStatusMenu+0xf9c>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	3b02      	subs	r3, #2
 800613a:	b29a      	uxth	r2, r3
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	b29b      	uxth	r3, r3
 8006140:	3301      	adds	r3, #1
 8006142:	b29b      	uxth	r3, r3
 8006144:	2002      	movs	r0, #2
 8006146:	f7fa fea5 	bl	8000e94 <LCD_FillRect>
		//vertical divider
		i=230;
 800614a:	23e6      	movs	r3, #230	; 0xe6
 800614c:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b03      	subs	r3, #3
 8006154:	b298      	uxth	r0, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	b299      	uxth	r1, r3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	b29b      	uxth	r3, r3
 800615e:	3303      	adds	r3, #3
 8006160:	b29a      	uxth	r2, r3
 8006162:	4b48      	ldr	r3, [pc, #288]	; (8006284 <drawStatusMenu+0xfa0>)
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	3b02      	subs	r3, #2
 8006168:	b29b      	uxth	r3, r3
 800616a:	f7fa fe93 	bl	8000e94 <LCD_FillRect>

		i=155;
 800616e:	239b      	movs	r3, #155	; 0x9b
 8006170:	61fb      	str	r3, [r7, #28]
		j=35;
 8006172:	2323      	movs	r3, #35	; 0x23
 8006174:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	b298      	uxth	r0, r3
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	b299      	uxth	r1, r3
 800617e:	4b38      	ldr	r3, [pc, #224]	; (8006260 <drawStatusMenu+0xf7c>)
 8006180:	4a41      	ldr	r2, [pc, #260]	; (8006288 <drawStatusMenu+0xfa4>)
 8006182:	f7fb f9d3 	bl	800152c <LCD_PutStr>
		i=155;
 8006186:	239b      	movs	r3, #155	; 0x9b
 8006188:	61fb      	str	r3, [r7, #28]
		j=50;
 800618a:	2332      	movs	r3, #50	; 0x32
 800618c:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	b298      	uxth	r0, r3
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	b299      	uxth	r1, r3
 8006196:	4b32      	ldr	r3, [pc, #200]	; (8006260 <drawStatusMenu+0xf7c>)
 8006198:	4a3c      	ldr	r2, [pc, #240]	; (800628c <drawStatusMenu+0xfa8>)
 800619a:	f7fb f9c7 	bl	800152c <LCD_PutStr>
 800619e:	4603      	mov	r3, r0
 80061a0:	3308      	adds	r3, #8
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	61fb      	str	r3, [r7, #28]
		j=28;
 80061a8:	231c      	movs	r3, #28
 80061aa:	61bb      	str	r3, [r7, #24]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	b298      	uxth	r0, r3
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	b299      	uxth	r1, r3
 80061b4:	4b36      	ldr	r3, [pc, #216]	; (8006290 <drawStatusMenu+0xfac>)
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	2302      	movs	r3, #2
 80061ba:	f640 729f 	movw	r2, #3999	; 0xf9f
 80061be:	f7fb fa53 	bl	8001668 <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 80061c2:	23c8      	movs	r3, #200	; 0xc8
 80061c4:	61fb      	str	r3, [r7, #28]
		j=220;
 80061c6:	23dc      	movs	r3, #220	; 0xdc
 80061c8:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	b298      	uxth	r0, r3
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	b299      	uxth	r1, r3
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f7fb faf7 	bl	80017cc <drawUpDownArrow>
		j=15;
 80061de:	230f      	movs	r3, #15
 80061e0:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	b298      	uxth	r0, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	b299      	uxth	r1, r3
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f7fb faeb 	bl	80017cc <drawUpDownArrow>
		i=180;
 80061f6:	23b4      	movs	r3, #180	; 0xb4
 80061f8:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	b298      	uxth	r0, r3
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	b299      	uxth	r1, r3
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	b29a      	uxth	r2, r3
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	b29b      	uxth	r3, r3
 800620a:	f7fb fadf 	bl	80017cc <drawUpDownArrow>
		j=220;
 800620e:	23dc      	movs	r3, #220	; 0xdc
 8006210:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	b298      	uxth	r0, r3
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	b299      	uxth	r1, r3
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	b29a      	uxth	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	b29b      	uxth	r3, r3
 8006222:	f7fb fad3 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006226:	23dc      	movs	r3, #220	; 0xdc
 8006228:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	b298      	uxth	r0, r3
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	b299      	uxth	r1, r3
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	b29a      	uxth	r2, r3
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	b29b      	uxth	r3, r3
 800623a:	f7fb fac7 	bl	80017cc <drawUpDownArrow>
		j=15;
 800623e:	230f      	movs	r3, #15
 8006240:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	b298      	uxth	r0, r3
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	b299      	uxth	r1, r3
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	b29a      	uxth	r2, r3
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	b29b      	uxth	r3, r3
 8006252:	f7fb fabb 	bl	80017cc <drawUpDownArrow>
		break;
 8006256:	e133      	b.n	80064c0 <drawStatusMenu+0x11dc>
 8006258:	20000108 	.word	0x20000108
 800625c:	20028cb0 	.word	0x20028cb0
 8006260:	08016aa8 	.word	0x08016aa8
 8006264:	080165b0 	.word	0x080165b0
 8006268:	20000138 	.word	0x20000138
 800626c:	20030a7c 	.word	0x20030a7c
 8006270:	447a0000 	.word	0x447a0000
 8006274:	080165b8 	.word	0x080165b8
 8006278:	080165c0 	.word	0x080165c0
 800627c:	080165c8 	.word	0x080165c8
 8006280:	20028a86 	.word	0x20028a86
 8006284:	20028a88 	.word	0x20028a88
 8006288:	080165d0 	.word	0x080165d0
 800628c:	080165e0 	.word	0x080165e0
 8006290:	08016e68 	.word	0x08016e68
	}
	case 3:{
		i=35;
 8006294:	2323      	movs	r3, #35	; 0x23
 8006296:	61fb      	str	r3, [r7, #28]
		j=75;
 8006298:	234b      	movs	r3, #75	; 0x4b
 800629a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b02      	subs	r3, #2
 80062a2:	b299      	uxth	r1, r3
 80062a4:	4b89      	ldr	r3, [pc, #548]	; (80064cc <drawStatusMenu+0x11e8>)
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	3b02      	subs	r3, #2
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3302      	adds	r3, #2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2002      	movs	r0, #2
 80062b6:	f7fa fded 	bl	8000e94 <LCD_FillRect>
		j=55;
 80062ba:	2337      	movs	r3, #55	; 0x37
 80062bc:	61bb      	str	r3, [r7, #24]
		i=150;
 80062be:	2396      	movs	r3, #150	; 0x96
 80062c0:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	b298      	uxth	r0, r3
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	b299      	uxth	r1, r3
 80062ca:	4b81      	ldr	r3, [pc, #516]	; (80064d0 <drawStatusMenu+0x11ec>)
 80062cc:	4a81      	ldr	r2, [pc, #516]	; (80064d4 <drawStatusMenu+0x11f0>)
 80062ce:	f7fb f92d 	bl	800152c <LCD_PutStr>
 80062d2:	4603      	mov	r3, r0
 80062d4:	461a      	mov	r2, r3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	61fb      	str	r3, [r7, #28]

		i=40;
 80062dc:	2328      	movs	r3, #40	; 0x28
 80062de:	61fb      	str	r3, [r7, #28]
		j=85;
 80062e0:	2355      	movs	r3, #85	; 0x55
 80062e2:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	b298      	uxth	r0, r3
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	b299      	uxth	r1, r3
 80062ec:	4b78      	ldr	r3, [pc, #480]	; (80064d0 <drawStatusMenu+0x11ec>)
 80062ee:	4a7a      	ldr	r2, [pc, #488]	; (80064d8 <drawStatusMenu+0x11f4>)
 80062f0:	f7fb f91c 	bl	800152c <LCD_PutStr>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	b298      	uxth	r0, r3
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	b299      	uxth	r1, r3
 8006306:	4b72      	ldr	r3, [pc, #456]	; (80064d0 <drawStatusMenu+0x11ec>)
 8006308:	4a74      	ldr	r2, [pc, #464]	; (80064dc <drawStatusMenu+0x11f8>)
 800630a:	f7fb f90f 	bl	800152c <LCD_PutStr>

		i=40;
 800630e:	2328      	movs	r3, #40	; 0x28
 8006310:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	3319      	adds	r3, #25
 8006316:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	b298      	uxth	r0, r3
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	b299      	uxth	r1, r3
 8006320:	4b6b      	ldr	r3, [pc, #428]	; (80064d0 <drawStatusMenu+0x11ec>)
 8006322:	4a6f      	ldr	r2, [pc, #444]	; (80064e0 <drawStatusMenu+0x11fc>)
 8006324:	f7fb f902 	bl	800152c <LCD_PutStr>
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	61fb      	str	r3, [r7, #28]
		//ping the LED Driver
		i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8006332:	4b6c      	ldr	r3, [pc, #432]	; (80064e4 <drawStatusMenu+0x1200>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	4b6a      	ldr	r3, [pc, #424]	; (80064e4 <drawStatusMenu+0x1200>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	2301      	movs	r3, #1
 8006340:	2200      	movs	r2, #0
 8006342:	21f0      	movs	r1, #240	; 0xf0
 8006344:	f7fd f89e 	bl	8003484 <writeI2CRegister>
 8006348:	6178      	str	r0, [r7, #20]

		if(i2cCheck){
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <drawStatusMenu+0x107e>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	b298      	uxth	r0, r3
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	b299      	uxth	r1, r3
 8006358:	4b5d      	ldr	r3, [pc, #372]	; (80064d0 <drawStatusMenu+0x11ec>)
 800635a:	4a63      	ldr	r2, [pc, #396]	; (80064e8 <drawStatusMenu+0x1204>)
 800635c:	f7fb f8e6 	bl	800152c <LCD_PutStr>
 8006360:	e007      	b.n	8006372 <drawStatusMenu+0x108e>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	b298      	uxth	r0, r3
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	b299      	uxth	r1, r3
 800636a:	4b59      	ldr	r3, [pc, #356]	; (80064d0 <drawStatusMenu+0x11ec>)
 800636c:	4a5f      	ldr	r2, [pc, #380]	; (80064ec <drawStatusMenu+0x1208>)
 800636e:	f7fb f8dd 	bl	800152c <LCD_PutStr>
		}

		i=40;
 8006372:	2328      	movs	r3, #40	; 0x28
 8006374:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	3319      	adds	r3, #25
 800637a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	b298      	uxth	r0, r3
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	b299      	uxth	r1, r3
 8006384:	4b52      	ldr	r3, [pc, #328]	; (80064d0 <drawStatusMenu+0x11ec>)
 8006386:	4a5a      	ldr	r2, [pc, #360]	; (80064f0 <drawStatusMenu+0x120c>)
 8006388:	f7fb f8d0 	bl	800152c <LCD_PutStr>
 800638c:	4603      	mov	r3, r0
 800638e:	461a      	mov	r2, r3
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	b298      	uxth	r0, r3
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	b299      	uxth	r1, r3
 800639e:	4b4c      	ldr	r3, [pc, #304]	; (80064d0 <drawStatusMenu+0x11ec>)
 80063a0:	4a54      	ldr	r2, [pc, #336]	; (80064f4 <drawStatusMenu+0x1210>)
 80063a2:	f7fb f8c3 	bl	800152c <LCD_PutStr>

		i=40;
 80063a6:	2328      	movs	r3, #40	; 0x28
 80063a8:	61fb      	str	r3, [r7, #28]
		j+=25;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	3319      	adds	r3, #25
 80063ae:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	b298      	uxth	r0, r3
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	b299      	uxth	r1, r3
 80063b8:	4b45      	ldr	r3, [pc, #276]	; (80064d0 <drawStatusMenu+0x11ec>)
 80063ba:	4a4f      	ldr	r2, [pc, #316]	; (80064f8 <drawStatusMenu+0x1214>)
 80063bc:	f7fb f8b6 	bl	800152c <LCD_PutStr>
 80063c0:	4603      	mov	r3, r0
 80063c2:	461a      	mov	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	61fb      	str	r3, [r7, #28]
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 80063ca:	4b4c      	ldr	r3, [pc, #304]	; (80064fc <drawStatusMenu+0x1218>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	4b4a      	ldr	r3, [pc, #296]	; (80064fc <drawStatusMenu+0x1218>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2301      	movs	r3, #1
 80063d8:	2200      	movs	r2, #0
 80063da:	2111      	movs	r1, #17
 80063dc:	f7fd f852 	bl	8003484 <writeI2CRegister>
 80063e0:	6178      	str	r0, [r7, #20]
		if(i2cCheck){
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <drawStatusMenu+0x1116>
			LCD_PutStr(i, j, "Present", fnt7x10);
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	b298      	uxth	r0, r3
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	b299      	uxth	r1, r3
 80063f0:	4b37      	ldr	r3, [pc, #220]	; (80064d0 <drawStatusMenu+0x11ec>)
 80063f2:	4a3d      	ldr	r2, [pc, #244]	; (80064e8 <drawStatusMenu+0x1204>)
 80063f4:	f7fb f89a 	bl	800152c <LCD_PutStr>
 80063f8:	e007      	b.n	800640a <drawStatusMenu+0x1126>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	b298      	uxth	r0, r3
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	b299      	uxth	r1, r3
 8006402:	4b33      	ldr	r3, [pc, #204]	; (80064d0 <drawStatusMenu+0x11ec>)
 8006404:	4a3e      	ldr	r2, [pc, #248]	; (8006500 <drawStatusMenu+0x121c>)
 8006406:	f7fb f891 	bl	800152c <LCD_PutStr>
		}


		i=40;
 800640a:	2328      	movs	r3, #40	; 0x28
 800640c:	61fb      	str	r3, [r7, #28]
		j+=25;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	3319      	adds	r3, #25
 8006412:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	b298      	uxth	r0, r3
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	b299      	uxth	r1, r3
 800641c:	4b2c      	ldr	r3, [pc, #176]	; (80064d0 <drawStatusMenu+0x11ec>)
 800641e:	4a39      	ldr	r2, [pc, #228]	; (8006504 <drawStatusMenu+0x1220>)
 8006420:	f7fb f884 	bl	800152c <LCD_PutStr>
 8006424:	4603      	mov	r3, r0
 8006426:	461a      	mov	r2, r3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	61fb      	str	r3, [r7, #28]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 800642e:	f002 fcbd 	bl	8008dac <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	4b34      	ldr	r3, [pc, #208]	; (8006508 <drawStatusMenu+0x1224>)
 8006436:	fba3 2302 	umull	r2, r3, r3, r2
 800643a:	099b      	lsrs	r3, r3, #6
 800643c:	613b      	str	r3, [r7, #16]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	b298      	uxth	r0, r3
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	b299      	uxth	r1, r3
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <drawStatusMenu+0x11ec>)
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	f7fb f8a7 	bl	800159c <LCD_PutInt>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	b298      	uxth	r0, r3
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	b299      	uxth	r1, r3
 8006460:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <drawStatusMenu+0x11ec>)
 8006462:	4a2a      	ldr	r2, [pc, #168]	; (800650c <drawStatusMenu+0x1228>)
 8006464:	f7fb f862 	bl	800152c <LCD_PutStr>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	61fb      	str	r3, [r7, #28]

		i=200;
 8006472:	23c8      	movs	r3, #200	; 0xc8
 8006474:	61fb      	str	r3, [r7, #28]
		j=15;
 8006476:	230f      	movs	r3, #15
 8006478:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	b298      	uxth	r0, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	b299      	uxth	r1, r3
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	b29a      	uxth	r2, r3
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	b29b      	uxth	r3, r3
 800648a:	f7fb f99f 	bl	80017cc <drawUpDownArrow>
		i=180;
 800648e:	23b4      	movs	r3, #180	; 0xb4
 8006490:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	b298      	uxth	r0, r3
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	b299      	uxth	r1, r3
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	b29a      	uxth	r2, r3
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f7fb f993 	bl	80017cc <drawUpDownArrow>
		i=220;
 80064a6:	23dc      	movs	r3, #220	; 0xdc
 80064a8:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	b298      	uxth	r0, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	b299      	uxth	r1, r3
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f7fb f987 	bl	80017cc <drawUpDownArrow>

		break;
 80064be:	bf00      	nop
	}
	}

	SMLCD_Flush();
 80064c0:	f7fa f90a 	bl	80006d8 <SMLCD_Flush>



}
 80064c4:	bf00      	nop
 80064c6:	3738      	adds	r7, #56	; 0x38
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20028a86 	.word	0x20028a86
 80064d0:	08016aa8 	.word	0x08016aa8
 80064d4:	080165f0 	.word	0x080165f0
 80064d8:	08016600 	.word	0x08016600
 80064dc:	08016608 	.word	0x08016608
 80064e0:	08016628 	.word	0x08016628
 80064e4:	200000e0 	.word	0x200000e0
 80064e8:	08016638 	.word	0x08016638
 80064ec:	08016640 	.word	0x08016640
 80064f0:	08016650 	.word	0x08016650
 80064f4:	0801665c 	.word	0x0801665c
 80064f8:	08016674 	.word	0x08016674
 80064fc:	200000f0 	.word	0x200000f0
 8006500:	08016450 	.word	0x08016450
 8006504:	08016680 	.word	0x08016680
 8006508:	10624dd3 	.word	0x10624dd3
 800650c:	08016694 	.word	0x08016694

08006510 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af02      	add	r7, sp, #8
 8006516:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8006518:	2314      	movs	r3, #20
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indentAlignment=20;
 800651c:	2314      	movs	r3, #20
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowUp = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowDown=1;
 8006524:	2301      	movs	r3, #1
 8006526:	623b      	str	r3, [r7, #32]
	int arrowSize=3;
 8006528:	2303      	movs	r3, #3
 800652a:	61fb      	str	r3, [r7, #28]
	int otherBoardAlignment = 230;
 800652c:	23e6      	movs	r3, #230	; 0xe6
 800652e:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 8006530:	4b8f      	ldr	r3, [pc, #572]	; (8006770 <drawSystemInfoMenu+0x260>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8006536:	f7fa fa19 	bl	800096c <LCD_Clear>
	getLatestADC();
 800653a:	f001 f92b 	bl	8007794 <getLatestADC>
	drawMenuHeader();
 800653e:	f001 f853 	bl	80075e8 <drawMenuHeader>
	i  = 135;
 8006542:	2387      	movs	r3, #135	; 0x87
 8006544:	617b      	str	r3, [r7, #20]
	j = 24;
 8006546:	2318      	movs	r3, #24
 8006548:	613b      	str	r3, [r7, #16]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	b299      	uxth	r1, r3
 800654e:	4b89      	ldr	r3, [pc, #548]	; (8006774 <drawSystemInfoMenu+0x264>)
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	3b02      	subs	r3, #2
 8006554:	b29a      	uxth	r2, r3
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	b29b      	uxth	r3, r3
 800655a:	3303      	adds	r3, #3
 800655c:	b29b      	uxth	r3, r3
 800655e:	2002      	movs	r0, #2
 8006560:	f7fa fc98 	bl	8000e94 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);

	switch(indicator){
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d003      	beq.n	8006572 <drawSystemInfoMenu+0x62>
 800656a:	2b02      	cmp	r3, #2
 800656c:	f000 82be 	beq.w	8006aec <drawSystemInfoMenu+0x5dc>
 8006570:	e3fe      	b.n	8006d70 <drawSystemInfoMenu+0x860>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8006572:	232d      	movs	r3, #45	; 0x2d
 8006574:	613b      	str	r3, [r7, #16]
		i=42;
 8006576:	232a      	movs	r3, #42	; 0x2a
 8006578:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	b298      	uxth	r0, r3
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	b299      	uxth	r1, r3
 8006582:	4b7d      	ldr	r3, [pc, #500]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006584:	4a7d      	ldr	r2, [pc, #500]	; (800677c <drawSystemInfoMenu+0x26c>)
 8006586:	f7fa ffd1 	bl	800152c <LCD_PutStr>
 800658a:	4603      	mov	r3, r0
 800658c:	461a      	mov	r2, r3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	b298      	uxth	r0, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	b299      	uxth	r1, r3
 800659c:	4b76      	ldr	r3, [pc, #472]	; (8006778 <drawSystemInfoMenu+0x268>)
 800659e:	4a78      	ldr	r2, [pc, #480]	; (8006780 <drawSystemInfoMenu+0x270>)
 80065a0:	f7fa ffc4 	bl	800152c <LCD_PutStr>

		j+=15;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	330f      	adds	r3, #15
 80065a8:	613b      	str	r3, [r7, #16]
		i=42;
 80065aa:	232a      	movs	r3, #42	; 0x2a
 80065ac:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	b298      	uxth	r0, r3
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	b299      	uxth	r1, r3
 80065b6:	4b70      	ldr	r3, [pc, #448]	; (8006778 <drawSystemInfoMenu+0x268>)
 80065b8:	4a72      	ldr	r2, [pc, #456]	; (8006784 <drawSystemInfoMenu+0x274>)
 80065ba:	f7fa ffb7 	bl	800152c <LCD_PutStr>
 80065be:	4603      	mov	r3, r0
 80065c0:	461a      	mov	r2, r3
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	b298      	uxth	r0, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	b299      	uxth	r1, r3
 80065d0:	4b69      	ldr	r3, [pc, #420]	; (8006778 <drawSystemInfoMenu+0x268>)
 80065d2:	4a6d      	ldr	r2, [pc, #436]	; (8006788 <drawSystemInfoMenu+0x278>)
 80065d4:	f7fa ffaa 	bl	800152c <LCD_PutStr>

		j+=30;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	331e      	adds	r3, #30
 80065dc:	613b      	str	r3, [r7, #16]
		i=10;
 80065de:	230a      	movs	r3, #10
 80065e0:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	b298      	uxth	r0, r3
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	b299      	uxth	r1, r3
 80065ea:	4b63      	ldr	r3, [pc, #396]	; (8006778 <drawSystemInfoMenu+0x268>)
 80065ec:	4a67      	ldr	r2, [pc, #412]	; (800678c <drawSystemInfoMenu+0x27c>)
 80065ee:	f7fa ff9d 	bl	800152c <LCD_PutStr>

		j+=15;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	330f      	adds	r3, #15
 80065f6:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	617b      	str	r3, [r7, #20]
		if((ZION.SOC_BoardID==1) || (ZION.ASIC_BoardID==1) || (ZION.DISPLAY_BoardID==1)){
 80065fc:	4b64      	ldr	r3, [pc, #400]	; (8006790 <drawSystemInfoMenu+0x280>)
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d007      	beq.n	8006614 <drawSystemInfoMenu+0x104>
 8006604:	4b62      	ldr	r3, [pc, #392]	; (8006790 <drawSystemInfoMenu+0x280>)
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d003      	beq.n	8006614 <drawSystemInfoMenu+0x104>
 800660c:	4b60      	ldr	r3, [pc, #384]	; (8006790 <drawSystemInfoMenu+0x280>)
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d108      	bne.n	8006626 <drawSystemInfoMenu+0x116>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	b298      	uxth	r0, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	b299      	uxth	r1, r3
 800661c:	4b56      	ldr	r3, [pc, #344]	; (8006778 <drawSystemInfoMenu+0x268>)
 800661e:	4a5d      	ldr	r2, [pc, #372]	; (8006794 <drawSystemInfoMenu+0x284>)
 8006620:	f7fa ff84 	bl	800152c <LCD_PutStr>
 8006624:	e007      	b.n	8006636 <drawSystemInfoMenu+0x126>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	b298      	uxth	r0, r3
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	b299      	uxth	r1, r3
 800662e:	4b52      	ldr	r3, [pc, #328]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006630:	4a53      	ldr	r2, [pc, #332]	; (8006780 <drawSystemInfoMenu+0x270>)
 8006632:	f7fa ff7b 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	330f      	adds	r3, #15
 800663a:	613b      	str	r3, [r7, #16]
		i=10;
 800663c:	230a      	movs	r3, #10
 800663e:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	b298      	uxth	r0, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	b299      	uxth	r1, r3
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <drawSystemInfoMenu+0x268>)
 800664a:	4a53      	ldr	r2, [pc, #332]	; (8006798 <drawSystemInfoMenu+0x288>)
 800664c:	f7fa ff6e 	bl	800152c <LCD_PutStr>
 8006650:	4603      	mov	r3, r0
 8006652:	461a      	mov	r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4413      	add	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
		i=otherBoardAlignment;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	b298      	uxth	r0, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	b299      	uxth	r1, r3
 8006666:	4b44      	ldr	r3, [pc, #272]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006668:	4a4c      	ldr	r2, [pc, #304]	; (800679c <drawSystemInfoMenu+0x28c>)
 800666a:	f7fa ff5f 	bl	800152c <LCD_PutStr>

		j+=15;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	330f      	adds	r3, #15
 8006672:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	b298      	uxth	r0, r3
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	b299      	uxth	r1, r3
 8006680:	4b3d      	ldr	r3, [pc, #244]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006682:	4a47      	ldr	r2, [pc, #284]	; (80067a0 <drawSystemInfoMenu+0x290>)
 8006684:	f7fa ff52 	bl	800152c <LCD_PutStr>
 8006688:	4603      	mov	r3, r0
 800668a:	461a      	mov	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4413      	add	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
		if(ZION.SOC_BoardID==1){
 8006692:	4b3f      	ldr	r3, [pc, #252]	; (8006790 <drawSystemInfoMenu+0x280>)
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d14a      	bne.n	8006730 <drawSystemInfoMenu+0x220>
			i+=LCD_PutStr(i, j, "TRIDENT ", fnt7x10);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	b298      	uxth	r0, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	b299      	uxth	r1, r3
 80066a2:	4b35      	ldr	r3, [pc, #212]	; (8006778 <drawSystemInfoMenu+0x268>)
 80066a4:	4a3f      	ldr	r2, [pc, #252]	; (80067a4 <drawSystemInfoMenu+0x294>)
 80066a6:	f7fa ff41 	bl	800152c <LCD_PutStr>
 80066aa:	4603      	mov	r3, r0
 80066ac:	461a      	mov	r2, r3
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
			switch(ZION.SOC_BoardFab){
 80066b4:	4b36      	ldr	r3, [pc, #216]	; (8006790 <drawSystemInfoMenu+0x280>)
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d82e      	bhi.n	800671c <drawSystemInfoMenu+0x20c>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <drawSystemInfoMenu+0x1b4>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066e7 	.word	0x080066e7
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	0800670b 	.word	0x0800670b
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	b298      	uxth	r0, r3
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	b299      	uxth	r1, r3
 80066dc:	4b26      	ldr	r3, [pc, #152]	; (8006778 <drawSystemInfoMenu+0x268>)
 80066de:	4a32      	ldr	r2, [pc, #200]	; (80067a8 <drawSystemInfoMenu+0x298>)
 80066e0:	f7fa ff24 	bl	800152c <LCD_PutStr>
				break;
 80066e4:	e076      	b.n	80067d4 <drawSystemInfoMenu+0x2c4>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	b298      	uxth	r0, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	b299      	uxth	r1, r3
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <drawSystemInfoMenu+0x268>)
 80066f0:	4a2e      	ldr	r2, [pc, #184]	; (80067ac <drawSystemInfoMenu+0x29c>)
 80066f2:	f7fa ff1b 	bl	800152c <LCD_PutStr>
				break;
 80066f6:	e06d      	b.n	80067d4 <drawSystemInfoMenu+0x2c4>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	b298      	uxth	r0, r3
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	b299      	uxth	r1, r3
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006702:	4a2b      	ldr	r2, [pc, #172]	; (80067b0 <drawSystemInfoMenu+0x2a0>)
 8006704:	f7fa ff12 	bl	800152c <LCD_PutStr>
				break;
 8006708:	e064      	b.n	80067d4 <drawSystemInfoMenu+0x2c4>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	b298      	uxth	r0, r3
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	b299      	uxth	r1, r3
 8006712:	4b19      	ldr	r3, [pc, #100]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006714:	4a27      	ldr	r2, [pc, #156]	; (80067b4 <drawSystemInfoMenu+0x2a4>)
 8006716:	f7fa ff09 	bl	800152c <LCD_PutStr>
				break;
 800671a:	e05b      	b.n	80067d4 <drawSystemInfoMenu+0x2c4>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	b298      	uxth	r0, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	b299      	uxth	r1, r3
 8006724:	4b14      	ldr	r3, [pc, #80]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006726:	4a24      	ldr	r2, [pc, #144]	; (80067b8 <drawSystemInfoMenu+0x2a8>)
 8006728:	f7fa ff00 	bl	800152c <LCD_PutStr>
				break;
 800672c:	bf00      	nop
 800672e:	e051      	b.n	80067d4 <drawSystemInfoMenu+0x2c4>
			}
			}
		}
		else{
			if(ZION.SOC_EEPROM_Detected){
 8006730:	4b17      	ldr	r3, [pc, #92]	; (8006790 <drawSystemInfoMenu+0x280>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d045      	beq.n	80067c4 <drawSystemInfoMenu+0x2b4>
				if(ZION.SOC_BoardFab == -2){
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <drawSystemInfoMenu+0x280>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f113 0f02 	cmn.w	r3, #2
 8006740:	d108      	bne.n	8006754 <drawSystemInfoMenu+0x244>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	b298      	uxth	r0, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	b299      	uxth	r1, r3
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <drawSystemInfoMenu+0x268>)
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <drawSystemInfoMenu+0x2ac>)
 800674e:	f7fa feed 	bl	800152c <LCD_PutStr>
 8006752:	e03f      	b.n	80067d4 <drawSystemInfoMenu+0x2c4>
				}
				else if(ZION.SOC_BoardFab ==-1){
 8006754:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <drawSystemInfoMenu+0x280>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d13a      	bne.n	80067d4 <drawSystemInfoMenu+0x2c4>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	b298      	uxth	r0, r3
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	b299      	uxth	r1, r3
 8006766:	4b04      	ldr	r3, [pc, #16]	; (8006778 <drawSystemInfoMenu+0x268>)
 8006768:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <drawSystemInfoMenu+0x2b0>)
 800676a:	f7fa fedf 	bl	800152c <LCD_PutStr>
 800676e:	e031      	b.n	80067d4 <drawSystemInfoMenu+0x2c4>
 8006770:	20003354 	.word	0x20003354
 8006774:	20028a86 	.word	0x20028a86
 8006778:	08016aa8 	.word	0x08016aa8
 800677c:	080166a0 	.word	0x080166a0
 8006780:	080166b0 	.word	0x080166b0
 8006784:	080166b8 	.word	0x080166b8
 8006788:	080166d0 	.word	0x080166d0
 800678c:	080166d8 	.word	0x080166d8
 8006790:	20003284 	.word	0x20003284
 8006794:	080166e4 	.word	0x080166e4
 8006798:	080166ec 	.word	0x080166ec
 800679c:	08016700 	.word	0x08016700
 80067a0:	0801643c 	.word	0x0801643c
 80067a4:	08016710 	.word	0x08016710
 80067a8:	0801671c 	.word	0x0801671c
 80067ac:	08016724 	.word	0x08016724
 80067b0:	0801672c 	.word	0x0801672c
 80067b4:	08016734 	.word	0x08016734
 80067b8:	0801673c 	.word	0x0801673c
 80067bc:	08016744 	.word	0x08016744
 80067c0:	0801675c 	.word	0x0801675c
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	b298      	uxth	r0, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	b299      	uxth	r1, r3
 80067cc:	4b93      	ldr	r3, [pc, #588]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80067ce:	4a94      	ldr	r2, [pc, #592]	; (8006a20 <drawSystemInfoMenu+0x510>)
 80067d0:	f7fa feac 	bl	800152c <LCD_PutStr>
			}
		}
		i=otherBoardAlignment+indentAlignment;
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	4413      	add	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	b298      	uxth	r0, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	b299      	uxth	r1, r3
 80067e4:	4b8d      	ldr	r3, [pc, #564]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80067e6:	4a8f      	ldr	r2, [pc, #572]	; (8006a24 <drawSystemInfoMenu+0x514>)
 80067e8:	f7fa fea0 	bl	800152c <LCD_PutStr>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	4413      	add	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch){
 80067f6:	4b8c      	ldr	r3, [pc, #560]	; (8006a28 <drawSystemInfoMenu+0x518>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d008      	beq.n	8006810 <drawSystemInfoMenu+0x300>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	b298      	uxth	r0, r3
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	b299      	uxth	r1, r3
 8006806:	4b85      	ldr	r3, [pc, #532]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 8006808:	4a88      	ldr	r2, [pc, #544]	; (8006a2c <drawSystemInfoMenu+0x51c>)
 800680a:	f7fa fe8f 	bl	800152c <LCD_PutStr>
 800680e:	e007      	b.n	8006820 <drawSystemInfoMenu+0x310>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	b298      	uxth	r0, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	b299      	uxth	r1, r3
 8006818:	4b80      	ldr	r3, [pc, #512]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 800681a:	4a85      	ldr	r2, [pc, #532]	; (8006a30 <drawSystemInfoMenu+0x520>)
 800681c:	f7fa fe86 	bl	800152c <LCD_PutStr>
		}

		j+=15;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	330f      	adds	r3, #15
 8006824:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	b298      	uxth	r0, r3
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	b299      	uxth	r1, r3
 8006832:	4b7a      	ldr	r3, [pc, #488]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 8006834:	4a7f      	ldr	r2, [pc, #508]	; (8006a34 <drawSystemInfoMenu+0x524>)
 8006836:	f7fa fe79 	bl	800152c <LCD_PutStr>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	4413      	add	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
		if(ZION.ASIC_BoardID==1){
 8006844:	4b78      	ldr	r3, [pc, #480]	; (8006a28 <drawSystemInfoMenu+0x518>)
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d14b      	bne.n	80068e4 <drawSystemInfoMenu+0x3d4>
			i+=LCD_PutStr(i, j, "TOGA ", fnt7x10);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	b298      	uxth	r0, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	b299      	uxth	r1, r3
 8006854:	4b71      	ldr	r3, [pc, #452]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 8006856:	4a78      	ldr	r2, [pc, #480]	; (8006a38 <drawSystemInfoMenu+0x528>)
 8006858:	f7fa fe68 	bl	800152c <LCD_PutStr>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4413      	add	r3, r2
 8006864:	617b      	str	r3, [r7, #20]
			switch(ZION.ASIC_BoardFab){
 8006866:	4b70      	ldr	r3, [pc, #448]	; (8006a28 <drawSystemInfoMenu+0x518>)
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	3b01      	subs	r3, #1
 800686c:	2b03      	cmp	r3, #3
 800686e:	d82f      	bhi.n	80068d0 <drawSystemInfoMenu+0x3c0>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <drawSystemInfoMenu+0x368>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006889 	.word	0x08006889
 800687c:	0800689b 	.word	0x0800689b
 8006880:	080068ad 	.word	0x080068ad
 8006884:	080068bf 	.word	0x080068bf
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	b298      	uxth	r0, r3
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	b299      	uxth	r1, r3
 8006890:	4b62      	ldr	r3, [pc, #392]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 8006892:	4a6a      	ldr	r2, [pc, #424]	; (8006a3c <drawSystemInfoMenu+0x52c>)
 8006894:	f7fa fe4a 	bl	800152c <LCD_PutStr>
				break;
 8006898:	e04c      	b.n	8006934 <drawSystemInfoMenu+0x424>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	b298      	uxth	r0, r3
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	b299      	uxth	r1, r3
 80068a2:	4b5e      	ldr	r3, [pc, #376]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80068a4:	4a66      	ldr	r2, [pc, #408]	; (8006a40 <drawSystemInfoMenu+0x530>)
 80068a6:	f7fa fe41 	bl	800152c <LCD_PutStr>
				break;
 80068aa:	e043      	b.n	8006934 <drawSystemInfoMenu+0x424>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	b298      	uxth	r0, r3
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	b299      	uxth	r1, r3
 80068b4:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80068b6:	4a63      	ldr	r2, [pc, #396]	; (8006a44 <drawSystemInfoMenu+0x534>)
 80068b8:	f7fa fe38 	bl	800152c <LCD_PutStr>
				break;
 80068bc:	e03a      	b.n	8006934 <drawSystemInfoMenu+0x424>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	b298      	uxth	r0, r3
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	b299      	uxth	r1, r3
 80068c6:	4b55      	ldr	r3, [pc, #340]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80068c8:	4a5f      	ldr	r2, [pc, #380]	; (8006a48 <drawSystemInfoMenu+0x538>)
 80068ca:	f7fa fe2f 	bl	800152c <LCD_PutStr>
				break;
 80068ce:	e031      	b.n	8006934 <drawSystemInfoMenu+0x424>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	b298      	uxth	r0, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	b299      	uxth	r1, r3
 80068d8:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80068da:	4a5c      	ldr	r2, [pc, #368]	; (8006a4c <drawSystemInfoMenu+0x53c>)
 80068dc:	f7fa fe26 	bl	800152c <LCD_PutStr>
				break;
 80068e0:	bf00      	nop
 80068e2:	e027      	b.n	8006934 <drawSystemInfoMenu+0x424>
			}
			}
		}
		else{
			if(ZION.ASIC_EEPROM_Detected){
 80068e4:	4b50      	ldr	r3, [pc, #320]	; (8006a28 <drawSystemInfoMenu+0x518>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01b      	beq.n	8006924 <drawSystemInfoMenu+0x414>
				if(ZION.ASIC_BoardFab == -2){
 80068ec:	4b4e      	ldr	r3, [pc, #312]	; (8006a28 <drawSystemInfoMenu+0x518>)
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	f113 0f02 	cmn.w	r3, #2
 80068f4:	d108      	bne.n	8006908 <drawSystemInfoMenu+0x3f8>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	b298      	uxth	r0, r3
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	b299      	uxth	r1, r3
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 8006900:	4a53      	ldr	r2, [pc, #332]	; (8006a50 <drawSystemInfoMenu+0x540>)
 8006902:	f7fa fe13 	bl	800152c <LCD_PutStr>
 8006906:	e015      	b.n	8006934 <drawSystemInfoMenu+0x424>
				}
				else if(ZION.ASIC_BoardFab ==-1){
 8006908:	4b47      	ldr	r3, [pc, #284]	; (8006a28 <drawSystemInfoMenu+0x518>)
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d110      	bne.n	8006934 <drawSystemInfoMenu+0x424>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	b298      	uxth	r0, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	b299      	uxth	r1, r3
 800691a:	4b40      	ldr	r3, [pc, #256]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 800691c:	4a4d      	ldr	r2, [pc, #308]	; (8006a54 <drawSystemInfoMenu+0x544>)
 800691e:	f7fa fe05 	bl	800152c <LCD_PutStr>
 8006922:	e007      	b.n	8006934 <drawSystemInfoMenu+0x424>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	b298      	uxth	r0, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	b299      	uxth	r1, r3
 800692c:	4b3b      	ldr	r3, [pc, #236]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 800692e:	4a3c      	ldr	r2, [pc, #240]	; (8006a20 <drawSystemInfoMenu+0x510>)
 8006930:	f7fa fdfc 	bl	800152c <LCD_PutStr>
			}
		}

		j+=15;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	330f      	adds	r3, #15
 8006938:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	b298      	uxth	r0, r3
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	b299      	uxth	r1, r3
 8006946:	4b35      	ldr	r3, [pc, #212]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 8006948:	4a43      	ldr	r2, [pc, #268]	; (8006a58 <drawSystemInfoMenu+0x548>)
 800694a:	f7fa fdef 	bl	800152c <LCD_PutStr>
 800694e:	4603      	mov	r3, r0
 8006950:	461a      	mov	r2, r3
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	4413      	add	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
		if(ZION.DISPLAY_BoardID==1){
 8006958:	4b33      	ldr	r3, [pc, #204]	; (8006a28 <drawSystemInfoMenu+0x518>)
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d14b      	bne.n	80069f8 <drawSystemInfoMenu+0x4e8>
			i+=LCD_PutStr(i, j, "KANU ", fnt7x10);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	b298      	uxth	r0, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	b299      	uxth	r1, r3
 8006968:	4b2c      	ldr	r3, [pc, #176]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 800696a:	4a3c      	ldr	r2, [pc, #240]	; (8006a5c <drawSystemInfoMenu+0x54c>)
 800696c:	f7fa fdde 	bl	800152c <LCD_PutStr>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	4413      	add	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
			switch(ZION.DISPLAY_BoardFab){
 800697a:	4b2b      	ldr	r3, [pc, #172]	; (8006a28 <drawSystemInfoMenu+0x518>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	3b01      	subs	r3, #1
 8006980:	2b03      	cmp	r3, #3
 8006982:	d82f      	bhi.n	80069e4 <drawSystemInfoMenu+0x4d4>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <drawSystemInfoMenu+0x47c>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069af 	.word	0x080069af
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069d3 	.word	0x080069d3
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	b298      	uxth	r0, r3
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	b299      	uxth	r1, r3
 80069a4:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80069a6:	4a25      	ldr	r2, [pc, #148]	; (8006a3c <drawSystemInfoMenu+0x52c>)
 80069a8:	f7fa fdc0 	bl	800152c <LCD_PutStr>
				break;
 80069ac:	e06e      	b.n	8006a8c <drawSystemInfoMenu+0x57c>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	b298      	uxth	r0, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	b299      	uxth	r1, r3
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80069b8:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <drawSystemInfoMenu+0x530>)
 80069ba:	f7fa fdb7 	bl	800152c <LCD_PutStr>
				break;
 80069be:	e065      	b.n	8006a8c <drawSystemInfoMenu+0x57c>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	b298      	uxth	r0, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	b299      	uxth	r1, r3
 80069c8:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80069ca:	4a1e      	ldr	r2, [pc, #120]	; (8006a44 <drawSystemInfoMenu+0x534>)
 80069cc:	f7fa fdae 	bl	800152c <LCD_PutStr>
				break;
 80069d0:	e05c      	b.n	8006a8c <drawSystemInfoMenu+0x57c>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	b298      	uxth	r0, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	b299      	uxth	r1, r3
 80069da:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80069dc:	4a1a      	ldr	r2, [pc, #104]	; (8006a48 <drawSystemInfoMenu+0x538>)
 80069de:	f7fa fda5 	bl	800152c <LCD_PutStr>
				break;
 80069e2:	e053      	b.n	8006a8c <drawSystemInfoMenu+0x57c>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	b298      	uxth	r0, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	b299      	uxth	r1, r3
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 80069ee:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <drawSystemInfoMenu+0x53c>)
 80069f0:	f7fa fd9c 	bl	800152c <LCD_PutStr>
				break;
 80069f4:	bf00      	nop
 80069f6:	e049      	b.n	8006a8c <drawSystemInfoMenu+0x57c>
			}
			}
		}
		else{
			if(ZION.DISPLAY_EEPROM_Detected){
 80069f8:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <drawSystemInfoMenu+0x518>)
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d03d      	beq.n	8006a7c <drawSystemInfoMenu+0x56c>
				if(ZION.DISPLAY_BoardFab == -2){
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <drawSystemInfoMenu+0x518>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	f113 0f02 	cmn.w	r3, #2
 8006a08:	d12a      	bne.n	8006a60 <drawSystemInfoMenu+0x550>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	b298      	uxth	r0, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	b299      	uxth	r1, r3
 8006a12:	4b02      	ldr	r3, [pc, #8]	; (8006a1c <drawSystemInfoMenu+0x50c>)
 8006a14:	4a0e      	ldr	r2, [pc, #56]	; (8006a50 <drawSystemInfoMenu+0x540>)
 8006a16:	f7fa fd89 	bl	800152c <LCD_PutStr>
 8006a1a:	e037      	b.n	8006a8c <drawSystemInfoMenu+0x57c>
 8006a1c:	08016aa8 	.word	0x08016aa8
 8006a20:	08016774 	.word	0x08016774
 8006a24:	08016788 	.word	0x08016788
 8006a28:	20003284 	.word	0x20003284
 8006a2c:	08016790 	.word	0x08016790
 8006a30:	08016444 	.word	0x08016444
 8006a34:	08016468 	.word	0x08016468
 8006a38:	080167a0 	.word	0x080167a0
 8006a3c:	0801671c 	.word	0x0801671c
 8006a40:	08016724 	.word	0x08016724
 8006a44:	0801672c 	.word	0x0801672c
 8006a48:	08016734 	.word	0x08016734
 8006a4c:	0801673c 	.word	0x0801673c
 8006a50:	08016744 	.word	0x08016744
 8006a54:	0801675c 	.word	0x0801675c
 8006a58:	080167a8 	.word	0x080167a8
 8006a5c:	080167b4 	.word	0x080167b4
				}
				else if(ZION.DISPLAY_BoardFab ==-1){
 8006a60:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <drawSystemInfoMenu+0x5cc>)
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d110      	bne.n	8006a8c <drawSystemInfoMenu+0x57c>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	b298      	uxth	r0, r3
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	b299      	uxth	r1, r3
 8006a72:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <drawSystemInfoMenu+0x5d0>)
 8006a74:	4a1b      	ldr	r2, [pc, #108]	; (8006ae4 <drawSystemInfoMenu+0x5d4>)
 8006a76:	f7fa fd59 	bl	800152c <LCD_PutStr>
 8006a7a:	e007      	b.n	8006a8c <drawSystemInfoMenu+0x57c>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	b298      	uxth	r0, r3
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	b299      	uxth	r1, r3
 8006a84:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <drawSystemInfoMenu+0x5d0>)
 8006a86:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <drawSystemInfoMenu+0x5d8>)
 8006a88:	f7fa fd50 	bl	800152c <LCD_PutStr>
			}
		}

		i=200;
 8006a8c:	23c8      	movs	r3, #200	; 0xc8
 8006a8e:	617b      	str	r3, [r7, #20]
		j=220;
 8006a90:	23dc      	movs	r3, #220	; 0xdc
 8006a92:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	b298      	uxth	r0, r3
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	b299      	uxth	r1, r3
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f7fa fe92 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006aa8:	23b4      	movs	r3, #180	; 0xb4
 8006aaa:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	b298      	uxth	r0, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	b299      	uxth	r1, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f7fa fe86 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006ac0:	23dc      	movs	r3, #220	; 0xdc
 8006ac2:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	b298      	uxth	r0, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	b299      	uxth	r1, r3
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f7fa fe7a 	bl	80017cc <drawUpDownArrow>
		break;
 8006ad8:	e14a      	b.n	8006d70 <drawSystemInfoMenu+0x860>
 8006ada:	bf00      	nop
 8006adc:	20003284 	.word	0x20003284
 8006ae0:	08016aa8 	.word	0x08016aa8
 8006ae4:	0801675c 	.word	0x0801675c
 8006ae8:	08016774 	.word	0x08016774
	}
	case 2:{
		j=45;
 8006aec:	232d      	movs	r3, #45	; 0x2d
 8006aee:	613b      	str	r3, [r7, #16]
		i=10;
 8006af0:	230a      	movs	r3, #10
 8006af2:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	b298      	uxth	r0, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	b299      	uxth	r1, r3
 8006afc:	4b9f      	ldr	r3, [pc, #636]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006afe:	4aa0      	ldr	r2, [pc, #640]	; (8006d80 <drawSystemInfoMenu+0x870>)
 8006b00:	f7fa fd14 	bl	800152c <LCD_PutStr>

		j+=25;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	3319      	adds	r3, #25
 8006b08:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	b298      	uxth	r0, r3
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	b299      	uxth	r1, r3
 8006b16:	4b99      	ldr	r3, [pc, #612]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006b18:	4a9a      	ldr	r2, [pc, #616]	; (8006d84 <drawSystemInfoMenu+0x874>)
 8006b1a:	f7fa fd07 	bl	800152c <LCD_PutStr>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	461a      	mov	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 8006b28:	4b97      	ldr	r3, [pc, #604]	; (8006d88 <drawSystemInfoMenu+0x878>)
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2c:	4a97      	ldr	r2, [pc, #604]	; (8006d8c <drawSystemInfoMenu+0x87c>)
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	edd3 7a00 	vldr	s15, [r3]
 8006b36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006b3a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006b3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b42:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006b46:	ee17 3a90 	vmov	r3, s15
 8006b4a:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	b298      	uxth	r0, r3
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	b299      	uxth	r1, r3
 8006b54:	4b89      	ldr	r3, [pc, #548]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	f7fa fd84 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	3319      	adds	r3, #25
 8006b64:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	b298      	uxth	r0, r3
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	b299      	uxth	r1, r3
 8006b72:	4b82      	ldr	r3, [pc, #520]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006b74:	4a86      	ldr	r2, [pc, #536]	; (8006d90 <drawSystemInfoMenu+0x880>)
 8006b76:	f7fa fcd9 	bl	800152c <LCD_PutStr>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8006b84:	4b80      	ldr	r3, [pc, #512]	; (8006d88 <drawSystemInfoMenu+0x878>)
 8006b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b88:	4a80      	ldr	r2, [pc, #512]	; (8006d8c <drawSystemInfoMenu+0x87c>)
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	edd3 7a00 	vldr	s15, [r3]
 8006b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006b96:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006b9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006ba2:	ee17 3a90 	vmov	r3, s15
 8006ba6:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	b298      	uxth	r0, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	b299      	uxth	r1, r3
 8006bb0:	4b72      	ldr	r3, [pc, #456]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f7fa fd56 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3319      	adds	r3, #25
 8006bc0:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	b298      	uxth	r0, r3
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	b299      	uxth	r1, r3
 8006bce:	4b6b      	ldr	r3, [pc, #428]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006bd0:	4a70      	ldr	r2, [pc, #448]	; (8006d94 <drawSystemInfoMenu+0x884>)
 8006bd2:	f7fa fcab 	bl	800152c <LCD_PutStr>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	461a      	mov	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8006be0:	4b69      	ldr	r3, [pc, #420]	; (8006d88 <drawSystemInfoMenu+0x878>)
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	4a69      	ldr	r2, [pc, #420]	; (8006d8c <drawSystemInfoMenu+0x87c>)
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	edd3 7a00 	vldr	s15, [r3]
 8006bee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006bf2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006bf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006bfa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006bfe:	ee17 3a90 	vmov	r3, s15
 8006c02:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	b298      	uxth	r0, r3
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	b299      	uxth	r1, r3
 8006c0c:	4b5b      	ldr	r3, [pc, #364]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	2301      	movs	r3, #1
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	f7fa fd28 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3319      	adds	r3, #25
 8006c1c:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	b298      	uxth	r0, r3
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	b299      	uxth	r1, r3
 8006c2a:	4b54      	ldr	r3, [pc, #336]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006c2c:	4a5a      	ldr	r2, [pc, #360]	; (8006d98 <drawSystemInfoMenu+0x888>)
 8006c2e:	f7fa fc7d 	bl	800152c <LCD_PutStr>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8006c3c:	4b52      	ldr	r3, [pc, #328]	; (8006d88 <drawSystemInfoMenu+0x878>)
 8006c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c40:	4a52      	ldr	r2, [pc, #328]	; (8006d8c <drawSystemInfoMenu+0x87c>)
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	edd3 7a00 	vldr	s15, [r3]
 8006c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006c4e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006c5a:	ee17 3a90 	vmov	r3, s15
 8006c5e:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	b298      	uxth	r0, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	b299      	uxth	r1, r3
 8006c68:	4b44      	ldr	r3, [pc, #272]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	f7fa fcfa 	bl	8001668 <LCD_PutIntF>

		j+=25;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	3319      	adds	r3, #25
 8006c78:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	b298      	uxth	r0, r3
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	b299      	uxth	r1, r3
 8006c86:	4b3d      	ldr	r3, [pc, #244]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006c88:	4a44      	ldr	r2, [pc, #272]	; (8006d9c <drawSystemInfoMenu+0x88c>)
 8006c8a:	f7fa fc4f 	bl	800152c <LCD_PutStr>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	461a      	mov	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	4413      	add	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 8006c98:	4b3b      	ldr	r3, [pc, #236]	; (8006d88 <drawSystemInfoMenu+0x878>)
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9c:	4a3b      	ldr	r2, [pc, #236]	; (8006d8c <drawSystemInfoMenu+0x87c>)
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	edd3 7a00 	vldr	s15, [r3]
 8006ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006caa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006cb2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006cb6:	ee17 3a90 	vmov	r3, s15
 8006cba:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	b298      	uxth	r0, r3
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	f7fa fccc 	bl	8001668 <LCD_PutIntF>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	4413      	add	r3, r2
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4413      	add	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	b298      	uxth	r0, r3
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	b299      	uxth	r1, r3
 8006ce6:	4b25      	ldr	r3, [pc, #148]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006ce8:	4a2d      	ldr	r2, [pc, #180]	; (8006da0 <drawSystemInfoMenu+0x890>)
 8006cea:	f7fa fc1f 	bl	800152c <LCD_PutStr>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch ==1){
 8006cf8:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <drawSystemInfoMenu+0x894>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d108      	bne.n	8006d12 <drawSystemInfoMenu+0x802>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	b298      	uxth	r0, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	b299      	uxth	r1, r3
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006d0a:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <drawSystemInfoMenu+0x898>)
 8006d0c:	f7fa fc0e 	bl	800152c <LCD_PutStr>
 8006d10:	e007      	b.n	8006d22 <drawSystemInfoMenu+0x812>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	b298      	uxth	r0, r3
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	b299      	uxth	r1, r3
 8006d1a:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <drawSystemInfoMenu+0x86c>)
 8006d1c:	4a23      	ldr	r2, [pc, #140]	; (8006dac <drawSystemInfoMenu+0x89c>)
 8006d1e:	f7fa fc05 	bl	800152c <LCD_PutStr>
		}



		i=200;
 8006d22:	23c8      	movs	r3, #200	; 0xc8
 8006d24:	617b      	str	r3, [r7, #20]
		j=15;
 8006d26:	230f      	movs	r3, #15
 8006d28:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	b298      	uxth	r0, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	b299      	uxth	r1, r3
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	f7fa fd47 	bl	80017cc <drawUpDownArrow>
		i=180;
 8006d3e:	23b4      	movs	r3, #180	; 0xb4
 8006d40:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	b298      	uxth	r0, r3
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	b299      	uxth	r1, r3
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f7fa fd3b 	bl	80017cc <drawUpDownArrow>
		i=220;
 8006d56:	23dc      	movs	r3, #220	; 0xdc
 8006d58:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	b298      	uxth	r0, r3
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	b299      	uxth	r1, r3
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f7fa fd2f 	bl	80017cc <drawUpDownArrow>

		break;
 8006d6e:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8006d70:	f7f9 fcb2 	bl	80006d8 <SMLCD_Flush>
}
 8006d74:	bf00      	nop
 8006d76:	3730      	adds	r7, #48	; 0x30
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	08016aa8 	.word	0x08016aa8
 8006d80:	080167bc 	.word	0x080167bc
 8006d84:	080167d4 	.word	0x080167d4
 8006d88:	20000138 	.word	0x20000138
 8006d8c:	20030a7c 	.word	0x20030a7c
 8006d90:	080167e4 	.word	0x080167e4
 8006d94:	080167f0 	.word	0x080167f0
 8006d98:	080167fc 	.word	0x080167fc
 8006d9c:	08016788 	.word	0x08016788
 8006da0:	08016808 	.word	0x08016808
 8006da4:	20003284 	.word	0x20003284
 8006da8:	08016818 	.word	0x08016818
 8006dac:	08016820 	.word	0x08016820

08006db0 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	460b      	mov	r3, r1
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 8006dbe:	2314      	movs	r3, #20
 8006dc0:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 8006dc2:	2332      	movs	r3, #50	; 0x32
 8006dc4:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 8006dc6:	f7f9 fdd1 	bl	800096c <LCD_Clear>
		getLatestADC();
 8006dca:	f000 fce3 	bl	8007794 <getLatestADC>
		drawMenuHeader();
 8006dce:	f000 fc0b 	bl	80075e8 <drawMenuHeader>
		i  = 135;
 8006dd2:	2387      	movs	r3, #135	; 0x87
 8006dd4:	613b      	str	r3, [r7, #16]
		j = 24;
 8006dd6:	2318      	movs	r3, #24
 8006dd8:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	b299      	uxth	r1, r3
 8006dde:	4b8d      	ldr	r3, [pc, #564]	; (8007014 <drawBootMenu+0x264>)
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	3b02      	subs	r3, #2
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3303      	adds	r3, #3
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2002      	movs	r0, #2
 8006df0:	f7fa f850 	bl	8000e94 <LCD_FillRect>
		if(displayAdcValues[Adc.adc0] >3.5){
 8006df4:	4b88      	ldr	r3, [pc, #544]	; (8007018 <drawBootMenu+0x268>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a88      	ldr	r2, [pc, #544]	; (800701c <drawBootMenu+0x26c>)
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	edd3 7a00 	vldr	s15, [r3]
 8006e02:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8006e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0e:	f340 839a 	ble.w	8007546 <drawBootMenu+0x796>
			if(ZION.zionFinished){
 8006e12:	4b83      	ldr	r3, [pc, #524]	; (8007020 <drawBootMenu+0x270>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 82d1 	beq.w	80073be <drawBootMenu+0x60e>
				if((ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS)){
 8006e1c:	4b80      	ldr	r3, [pc, #512]	; (8007020 <drawBootMenu+0x270>)
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d008      	beq.n	8006e36 <drawBootMenu+0x86>
 8006e24:	4b7e      	ldr	r3, [pc, #504]	; (8007020 <drawBootMenu+0x270>)
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d004      	beq.n	8006e36 <drawBootMenu+0x86>
 8006e2c:	4b7c      	ldr	r3, [pc, #496]	; (8007020 <drawBootMenu+0x270>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	f040 820d 	bne.w	8007250 <drawBootMenu+0x4a0>
					j=45;
 8006e36:	232d      	movs	r3, #45	; 0x2d
 8006e38:	61fb      	str	r3, [r7, #28]
					i=5;
 8006e3a:	2305      	movs	r3, #5
 8006e3c:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	b298      	uxth	r0, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	b299      	uxth	r1, r3
 8006e46:	4b77      	ldr	r3, [pc, #476]	; (8007024 <drawBootMenu+0x274>)
 8006e48:	4a77      	ldr	r2, [pc, #476]	; (8007028 <drawBootMenu+0x278>)
 8006e4a:	f7fa fb6f 	bl	800152c <LCD_PutStr>
					j+=30;
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	331e      	adds	r3, #30
 8006e52:	61fb      	str	r3, [r7, #28]
					i=42;
 8006e54:	232a      	movs	r3, #42	; 0x2a
 8006e56:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	b298      	uxth	r0, r3
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	b299      	uxth	r1, r3
 8006e60:	4b70      	ldr	r3, [pc, #448]	; (8007024 <drawBootMenu+0x274>)
 8006e62:	4a72      	ldr	r2, [pc, #456]	; (800702c <drawBootMenu+0x27c>)
 8006e64:	f7fa fb62 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	613b      	str	r3, [r7, #16]
					j+=20;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3314      	adds	r3, #20
 8006e70:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	b298      	uxth	r0, r3
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	b299      	uxth	r1, r3
 8006e7a:	4b6a      	ldr	r3, [pc, #424]	; (8007024 <drawBootMenu+0x274>)
 8006e7c:	4a6c      	ldr	r2, [pc, #432]	; (8007030 <drawBootMenu+0x280>)
 8006e7e:	f7fa fb55 	bl	800152c <LCD_PutStr>
					j+=20;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	3314      	adds	r3, #20
 8006e86:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	b298      	uxth	r0, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	b299      	uxth	r1, r3
 8006e90:	4b64      	ldr	r3, [pc, #400]	; (8007024 <drawBootMenu+0x274>)
 8006e92:	4a68      	ldr	r2, [pc, #416]	; (8007034 <drawBootMenu+0x284>)
 8006e94:	f7fa fb4a 	bl	800152c <LCD_PutStr>
					j+=20;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	b298      	uxth	r0, r3
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	b299      	uxth	r1, r3
 8006ea6:	4b5f      	ldr	r3, [pc, #380]	; (8007024 <drawBootMenu+0x274>)
 8006ea8:	4a63      	ldr	r2, [pc, #396]	; (8007038 <drawBootMenu+0x288>)
 8006eaa:	f7fa fb3f 	bl	800152c <LCD_PutStr>
					j+=20;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	b298      	uxth	r0, r3
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	b299      	uxth	r1, r3
 8006ebc:	4b59      	ldr	r3, [pc, #356]	; (8007024 <drawBootMenu+0x274>)
 8006ebe:	4a5f      	ldr	r2, [pc, #380]	; (800703c <drawBootMenu+0x28c>)
 8006ec0:	f7fa fb34 	bl	800152c <LCD_PutStr>
					j+=20;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "UEFI", fnt7x10);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	b298      	uxth	r0, r3
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	b299      	uxth	r1, r3
 8006ed2:	4b54      	ldr	r3, [pc, #336]	; (8007024 <drawBootMenu+0x274>)
 8006ed4:	4a5a      	ldr	r2, [pc, #360]	; (8007040 <drawBootMenu+0x290>)
 8006ed6:	f7fa fb29 	bl	800152c <LCD_PutStr>
					i-= 17;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	3b11      	subs	r3, #17
 8006ede:	613b      	str	r3, [r7, #16]
					if(setIndicator==0){
 8006ee0:	4b58      	ldr	r3, [pc, #352]	; (8007044 <drawBootMenu+0x294>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 810d 	bne.w	8007104 <drawBootMenu+0x354>
						switch(indicator){
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	f200 8104 	bhi.w	80070fc <drawBootMenu+0x34c>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <drawBootMenu+0x14c>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f11 	.word	0x08006f11
 8006f00:	08006f67 	.word	0x08006f67
 8006f04:	08006fbd 	.word	0x08006fbd
 8006f08:	08007051 	.word	0x08007051
 8006f0c:	080070a7 	.word	0x080070a7
						case FIRST:
						{
							j=95;
 8006f10:	235f      	movs	r3, #95	; 0x5f
 8006f12:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	4b49      	ldr	r3, [pc, #292]	; (8007048 <drawBootMenu+0x298>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4299      	cmp	r1, r3
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	4013      	ands	r3, r2
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8170 	beq.w	800721a <drawBootMenu+0x46a>
								i=140;
 8006f3a:	238c      	movs	r3, #140	; 0x8c
 8006f3c:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	b298      	uxth	r0, r3
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3305      	adds	r3, #5
 8006f48:	b299      	uxth	r1, r3
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	f7fa fc3d 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 8006f52:	4b3e      	ldr	r3, [pc, #248]	; (800704c <drawBootMenu+0x29c>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8006f58:	4b3c      	ldr	r3, [pc, #240]	; (800704c <drawBootMenu+0x29c>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8006f5e:	4b39      	ldr	r3, [pc, #228]	; (8007044 <drawBootMenu+0x294>)
 8006f60:	2201      	movs	r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
							}

							break;
 8006f64:	e159      	b.n	800721a <drawBootMenu+0x46a>
						}
						case SECOND:
						{
							j=115;
 8006f66:	2373      	movs	r3, #115	; 0x73
 8006f68:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	bf0c      	ite	eq
 8006f70:	2301      	moveq	r3, #1
 8006f72:	2300      	movne	r3, #0
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	4b34      	ldr	r3, [pc, #208]	; (8007048 <drawBootMenu+0x298>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	4013      	ands	r3, r2
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8147 	beq.w	800721e <drawBootMenu+0x46e>
								i=220;
 8006f90:	23dc      	movs	r3, #220	; 0xdc
 8006f92:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	b298      	uxth	r0, r3
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3305      	adds	r3, #5
 8006f9e:	b299      	uxth	r1, r3
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	f7fa fc12 	bl	80017cc <drawUpDownArrow>
								bootButtons.edl_sw=1;
 8006fa8:	4b28      	ldr	r3, [pc, #160]	; (800704c <drawBootMenu+0x29c>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	61da      	str	r2, [r3, #28]
								bootButtons.bootModeSet=1;
 8006fae:	4b27      	ldr	r3, [pc, #156]	; (800704c <drawBootMenu+0x29c>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
								setIndicator=2;
 8006fb4:	4b23      	ldr	r3, [pc, #140]	; (8007044 <drawBootMenu+0x294>)
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	601a      	str	r2, [r3, #0]
							}

							break;
 8006fba:	e130      	b.n	800721e <drawBootMenu+0x46e>
						}
						case THIRD:
						{
							j=135;
 8006fbc:	2387      	movs	r3, #135	; 0x87
 8006fbe:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <drawBootMenu+0x298>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	4299      	cmp	r1, r3
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4013      	ands	r3, r2
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 811e 	beq.w	8007222 <drawBootMenu+0x472>
								i=130;
 8006fe6:	2382      	movs	r3, #130	; 0x82
 8006fe8:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	b298      	uxth	r0, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3305      	adds	r3, #5
 8006ff4:	b299      	uxth	r1, r3
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	f7fa fbe7 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn1=1;
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <drawBootMenu+0x29c>)
 8007000:	2201      	movs	r2, #1
 8007002:	609a      	str	r2, [r3, #8]
								bootButtons.bootModeSet=1;
 8007004:	4b11      	ldr	r3, [pc, #68]	; (800704c <drawBootMenu+0x29c>)
 8007006:	2201      	movs	r2, #1
 8007008:	601a      	str	r2, [r3, #0]
								setIndicator=3;
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <drawBootMenu+0x294>)
 800700c:	2203      	movs	r2, #3
 800700e:	601a      	str	r2, [r3, #0]
							}

							break;
 8007010:	e107      	b.n	8007222 <drawBootMenu+0x472>
 8007012:	bf00      	nop
 8007014:	20028a86 	.word	0x20028a86
 8007018:	20000138 	.word	0x20000138
 800701c:	20030a7c 	.word	0x20030a7c
 8007020:	20003284 	.word	0x20003284
 8007024:	08016aa8 	.word	0x08016aa8
 8007028:	0801682c 	.word	0x0801682c
 800702c:	0801685c 	.word	0x0801685c
 8007030:	08016878 	.word	0x08016878
 8007034:	08016884 	.word	0x08016884
 8007038:	08016898 	.word	0x08016898
 800703c:	080168a4 	.word	0x080168a4
 8007040:	08016368 	.word	0x08016368
 8007044:	20003358 	.word	0x20003358
 8007048:	20003354 	.word	0x20003354
 800704c:	200032bc 	.word	0x200032bc
						}
						case FOURTH:
						{
							j=155;
 8007050:	239b      	movs	r3, #155	; 0x9b
 8007052:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	2b04      	cmp	r3, #4
 8007058:	bf0c      	ite	eq
 800705a:	2301      	moveq	r3, #1
 800705c:	2300      	movne	r3, #0
 800705e:	b2da      	uxtb	r2, r3
 8007060:	4b78      	ldr	r3, [pc, #480]	; (8007244 <drawBootMenu+0x494>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4299      	cmp	r1, r3
 8007068:	bf0c      	ite	eq
 800706a:	2301      	moveq	r3, #1
 800706c:	2300      	movne	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4013      	ands	r3, r2
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80d6 	beq.w	8007226 <drawBootMenu+0x476>
								i=160;
 800707a:	23a0      	movs	r3, #160	; 0xa0
 800707c:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	b298      	uxth	r0, r3
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	b29b      	uxth	r3, r3
 8007086:	3305      	adds	r3, #5
 8007088:	b299      	uxth	r1, r3
 800708a:	2303      	movs	r3, #3
 800708c:	2203      	movs	r2, #3
 800708e:	f7fa fb9d 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn2=1;
 8007092:	4b6d      	ldr	r3, [pc, #436]	; (8007248 <drawBootMenu+0x498>)
 8007094:	2201      	movs	r2, #1
 8007096:	60da      	str	r2, [r3, #12]
								bootButtons.bootModeSet=1;
 8007098:	4b6b      	ldr	r3, [pc, #428]	; (8007248 <drawBootMenu+0x498>)
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
								setIndicator=4;
 800709e:	4b6b      	ldr	r3, [pc, #428]	; (800724c <drawBootMenu+0x49c>)
 80070a0:	2204      	movs	r2, #4
 80070a2:	601a      	str	r2, [r3, #0]
							}

							break;
 80070a4:	e0bf      	b.n	8007226 <drawBootMenu+0x476>
						}
						case FIFTH:
						{
							j=175;
 80070a6:	23af      	movs	r3, #175	; 0xaf
 80070a8:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	4b63      	ldr	r3, [pc, #396]	; (8007244 <drawBootMenu+0x494>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4299      	cmp	r1, r3
 80070be:	bf0c      	ite	eq
 80070c0:	2301      	moveq	r3, #1
 80070c2:	2300      	movne	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	4013      	ands	r3, r2
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 80ad 	beq.w	800722a <drawBootMenu+0x47a>
								i=100;
 80070d0:	2364      	movs	r3, #100	; 0x64
 80070d2:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	b298      	uxth	r0, r3
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3305      	adds	r3, #5
 80070de:	b299      	uxth	r1, r3
 80070e0:	2303      	movs	r3, #3
 80070e2:	2203      	movs	r2, #3
 80070e4:	f7fa fb72 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn3=1;
 80070e8:	4b57      	ldr	r3, [pc, #348]	; (8007248 <drawBootMenu+0x498>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	611a      	str	r2, [r3, #16]
								bootButtons.bootModeSet=1;
 80070ee:	4b56      	ldr	r3, [pc, #344]	; (8007248 <drawBootMenu+0x498>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
								setIndicator=5;
 80070f4:	4b55      	ldr	r3, [pc, #340]	; (800724c <drawBootMenu+0x49c>)
 80070f6:	2205      	movs	r2, #5
 80070f8:	601a      	str	r2, [r3, #0]
							}

							break;
 80070fa:	e096      	b.n	800722a <drawBootMenu+0x47a>
						}
						default:
						{
							j=95;
 80070fc:	235f      	movs	r3, #95	; 0x5f
 80070fe:	61fb      	str	r3, [r7, #28]
							break;
 8007100:	bf00      	nop
 8007102:	e09d      	b.n	8007240 <drawBootMenu+0x490>
						}
						}
					}
					else{
						switch(setIndicator){
 8007104:	4b51      	ldr	r3, [pc, #324]	; (800724c <drawBootMenu+0x49c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3b01      	subs	r3, #1
 800710a:	2b04      	cmp	r3, #4
 800710c:	d87a      	bhi.n	8007204 <drawBootMenu+0x454>
 800710e:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <drawBootMenu+0x364>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007129 	.word	0x08007129
 8007118:	08007155 	.word	0x08007155
 800711c:	08007181 	.word	0x08007181
 8007120:	080071ad 	.word	0x080071ad
 8007124:	080071d9 	.word	0x080071d9
						case FIRST:
						{
							j=95;
 8007128:	235f      	movs	r3, #95	; 0x5f
 800712a:	61fb      	str	r3, [r7, #28]
							i=140;
 800712c:	238c      	movs	r3, #140	; 0x8c
 800712e:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	b298      	uxth	r0, r3
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	b29b      	uxth	r3, r3
 8007138:	3305      	adds	r3, #5
 800713a:	b299      	uxth	r1, r3
 800713c:	2303      	movs	r3, #3
 800713e:	2203      	movs	r2, #3
 8007140:	f7fa fb44 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007144:	4b40      	ldr	r3, [pc, #256]	; (8007248 <drawBootMenu+0x498>)
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d070      	beq.n	800722e <drawBootMenu+0x47e>
								setIndicator=0;
 800714c:	4b3f      	ldr	r3, [pc, #252]	; (800724c <drawBootMenu+0x49c>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
							}
							break;
 8007152:	e06c      	b.n	800722e <drawBootMenu+0x47e>
						}
						case SECOND:
						{
							j=115;
 8007154:	2373      	movs	r3, #115	; 0x73
 8007156:	61fb      	str	r3, [r7, #28]
							i=220;
 8007158:	23dc      	movs	r3, #220	; 0xdc
 800715a:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	b298      	uxth	r0, r3
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	b29b      	uxth	r3, r3
 8007164:	3305      	adds	r3, #5
 8007166:	b299      	uxth	r1, r3
 8007168:	2303      	movs	r3, #3
 800716a:	2203      	movs	r2, #3
 800716c:	f7fa fb2e 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007170:	4b35      	ldr	r3, [pc, #212]	; (8007248 <drawBootMenu+0x498>)
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d05c      	beq.n	8007232 <drawBootMenu+0x482>
								setIndicator=0;
 8007178:	4b34      	ldr	r3, [pc, #208]	; (800724c <drawBootMenu+0x49c>)
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
							}
							break;
 800717e:	e058      	b.n	8007232 <drawBootMenu+0x482>
						}
						case THIRD:
						{
							j=135;
 8007180:	2387      	movs	r3, #135	; 0x87
 8007182:	61fb      	str	r3, [r7, #28]
							i=130;
 8007184:	2382      	movs	r3, #130	; 0x82
 8007186:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	b298      	uxth	r0, r3
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	b29b      	uxth	r3, r3
 8007190:	3305      	adds	r3, #5
 8007192:	b299      	uxth	r1, r3
 8007194:	2303      	movs	r3, #3
 8007196:	2203      	movs	r2, #3
 8007198:	f7fa fb18 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 800719c:	4b2a      	ldr	r3, [pc, #168]	; (8007248 <drawBootMenu+0x498>)
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d048      	beq.n	8007236 <drawBootMenu+0x486>
								setIndicator=0;
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <drawBootMenu+0x49c>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
							}
							break;
 80071aa:	e044      	b.n	8007236 <drawBootMenu+0x486>
						}
						case FOURTH:
						{
							j=155;
 80071ac:	239b      	movs	r3, #155	; 0x9b
 80071ae:	61fb      	str	r3, [r7, #28]
							i=160;
 80071b0:	23a0      	movs	r3, #160	; 0xa0
 80071b2:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	b298      	uxth	r0, r3
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3305      	adds	r3, #5
 80071be:	b299      	uxth	r1, r3
 80071c0:	2303      	movs	r3, #3
 80071c2:	2203      	movs	r2, #3
 80071c4:	f7fa fb02 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80071c8:	4b1f      	ldr	r3, [pc, #124]	; (8007248 <drawBootMenu+0x498>)
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d034      	beq.n	800723a <drawBootMenu+0x48a>
								setIndicator=0;
 80071d0:	4b1e      	ldr	r3, [pc, #120]	; (800724c <drawBootMenu+0x49c>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
							}
							break;
 80071d6:	e030      	b.n	800723a <drawBootMenu+0x48a>
						}
						case FIFTH:
						{
							j=175;
 80071d8:	23af      	movs	r3, #175	; 0xaf
 80071da:	61fb      	str	r3, [r7, #28]
							i=100;
 80071dc:	2364      	movs	r3, #100	; 0x64
 80071de:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	b298      	uxth	r0, r3
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3305      	adds	r3, #5
 80071ea:	b299      	uxth	r1, r3
 80071ec:	2303      	movs	r3, #3
 80071ee:	2203      	movs	r2, #3
 80071f0:	f7fa faec 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80071f4:	4b14      	ldr	r3, [pc, #80]	; (8007248 <drawBootMenu+0x498>)
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d020      	beq.n	800723e <drawBootMenu+0x48e>
								setIndicator=0;
 80071fc:	4b13      	ldr	r3, [pc, #76]	; (800724c <drawBootMenu+0x49c>)
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
							}
							break;
 8007202:	e01c      	b.n	800723e <drawBootMenu+0x48e>
						}
						default:
						{
							drawUpDownArrow(i, j+5, 3, 3);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	b298      	uxth	r0, r3
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	b29b      	uxth	r3, r3
 800720c:	3305      	adds	r3, #5
 800720e:	b299      	uxth	r1, r3
 8007210:	2303      	movs	r3, #3
 8007212:	2203      	movs	r2, #3
 8007214:	f7fa fada 	bl	80017cc <drawUpDownArrow>
							break;
 8007218:	e012      	b.n	8007240 <drawBootMenu+0x490>
							break;
 800721a:	bf00      	nop
 800721c:	e1bf      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 800721e:	bf00      	nop
 8007220:	e1bd      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 8007222:	bf00      	nop
 8007224:	e1bb      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 8007226:	bf00      	nop
 8007228:	e1b9      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 800722a:	bf00      	nop
 800722c:	e1b7      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 800722e:	bf00      	nop
 8007230:	e1b5      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 8007232:	bf00      	nop
 8007234:	e1b3      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 8007236:	bf00      	nop
 8007238:	e1b1      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 800723a:	bf00      	nop
 800723c:	e1af      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 800723e:	bf00      	nop
					if(setIndicator==0){
 8007240:	e1ad      	b.n	800759e <drawBootMenu+0x7ee>
 8007242:	bf00      	nop
 8007244:	20003354 	.word	0x20003354
 8007248:	200032bc 	.word	0x200032bc
 800724c:	20003358 	.word	0x20003358
						}
						}
					}
				}
				else{
					j=45;
 8007250:	232d      	movs	r3, #45	; 0x2d
 8007252:	61fb      	str	r3, [r7, #28]
					i=5;
 8007254:	2305      	movs	r3, #5
 8007256:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	b298      	uxth	r0, r3
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	b299      	uxth	r1, r3
 8007260:	4b98      	ldr	r3, [pc, #608]	; (80074c4 <drawBootMenu+0x714>)
 8007262:	4a99      	ldr	r2, [pc, #612]	; (80074c8 <drawBootMenu+0x718>)
 8007264:	f7fa f962 	bl	800152c <LCD_PutStr>
					j+=30;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	331e      	adds	r3, #30
 800726c:	61fb      	str	r3, [r7, #28]
					i=42;
 800726e:	232a      	movs	r3, #42	; 0x2a
 8007270:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	b298      	uxth	r0, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	b299      	uxth	r1, r3
 800727a:	4b92      	ldr	r3, [pc, #584]	; (80074c4 <drawBootMenu+0x714>)
 800727c:	4a93      	ldr	r2, [pc, #588]	; (80074cc <drawBootMenu+0x71c>)
 800727e:	f7fa f955 	bl	800152c <LCD_PutStr>
					i=indentAlignment;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	613b      	str	r3, [r7, #16]
					j+=20;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3314      	adds	r3, #20
 800728a:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	b298      	uxth	r0, r3
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	b299      	uxth	r1, r3
 8007294:	4b8b      	ldr	r3, [pc, #556]	; (80074c4 <drawBootMenu+0x714>)
 8007296:	4a8e      	ldr	r2, [pc, #568]	; (80074d0 <drawBootMenu+0x720>)
 8007298:	f7fa f948 	bl	800152c <LCD_PutStr>
					if(setIndicator==0){
 800729c:	4b8d      	ldr	r3, [pc, #564]	; (80074d4 <drawBootMenu+0x724>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d159      	bne.n	8007358 <drawBootMenu+0x5a8>
						switch(indicator){
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d12a      	bne.n	8007300 <drawBootMenu+0x550>
						case FIRST:
						{
							j=95;
 80072aa:	235f      	movs	r3, #95	; 0x5f
 80072ac:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	bf0c      	ite	eq
 80072b4:	2301      	moveq	r3, #1
 80072b6:	2300      	movne	r3, #0
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	4b87      	ldr	r3, [pc, #540]	; (80074d8 <drawBootMenu+0x728>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4299      	cmp	r1, r3
 80072c2:	bf0c      	ite	eq
 80072c4:	2301      	moveq	r3, #1
 80072c6:	2300      	movne	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	4013      	ands	r3, r2
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8156 	beq.w	8007580 <drawBootMenu+0x7d0>
								i=140;
 80072d4:	238c      	movs	r3, #140	; 0x8c
 80072d6:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	b298      	uxth	r0, r3
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3305      	adds	r3, #5
 80072e2:	b299      	uxth	r1, r3
 80072e4:	2303      	movs	r3, #3
 80072e6:	2203      	movs	r2, #3
 80072e8:	f7fa fa70 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 80072ec:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <drawBootMenu+0x72c>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 80072f2:	4b7a      	ldr	r3, [pc, #488]	; (80074dc <drawBootMenu+0x72c>)
 80072f4:	2201      	movs	r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 80072f8:	4b76      	ldr	r3, [pc, #472]	; (80074d4 <drawBootMenu+0x724>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
							}
							break;
 80072fe:	e13f      	b.n	8007580 <drawBootMenu+0x7d0>
						}
						default:
						{
							j=95;
 8007300:	235f      	movs	r3, #95	; 0x5f
 8007302:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	2b04      	cmp	r3, #4
 8007308:	bf0c      	ite	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	2300      	movne	r3, #0
 800730e:	b2da      	uxtb	r2, r3
 8007310:	4b71      	ldr	r3, [pc, #452]	; (80074d8 <drawBootMenu+0x728>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4299      	cmp	r1, r3
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	4013      	ands	r3, r2
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 812d 	beq.w	8007584 <drawBootMenu+0x7d4>
								i=140;
 800732a:	238c      	movs	r3, #140	; 0x8c
 800732c:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	b298      	uxth	r0, r3
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	b29b      	uxth	r3, r3
 8007336:	3305      	adds	r3, #5
 8007338:	b299      	uxth	r1, r3
 800733a:	2303      	movs	r3, #3
 800733c:	2203      	movs	r2, #3
 800733e:	f7fa fa45 	bl	80017cc <drawUpDownArrow>
								bootButtons.btn0=1;
 8007342:	4b66      	ldr	r3, [pc, #408]	; (80074dc <drawBootMenu+0x72c>)
 8007344:	2201      	movs	r2, #1
 8007346:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8007348:	4b64      	ldr	r3, [pc, #400]	; (80074dc <drawBootMenu+0x72c>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 800734e:	4b61      	ldr	r3, [pc, #388]	; (80074d4 <drawBootMenu+0x724>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
							}
							break;
 8007354:	bf00      	nop
 8007356:	e115      	b.n	8007584 <drawBootMenu+0x7d4>
						}
						}
					}
					else{
						switch(setIndicator){
 8007358:	4b5e      	ldr	r3, [pc, #376]	; (80074d4 <drawBootMenu+0x724>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d116      	bne.n	800738e <drawBootMenu+0x5de>
						case FIRST:
						{
							j=95;
 8007360:	235f      	movs	r3, #95	; 0x5f
 8007362:	61fb      	str	r3, [r7, #28]
							i=140;
 8007364:	238c      	movs	r3, #140	; 0x8c
 8007366:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	b298      	uxth	r0, r3
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	b29b      	uxth	r3, r3
 8007370:	3305      	adds	r3, #5
 8007372:	b299      	uxth	r1, r3
 8007374:	2303      	movs	r3, #3
 8007376:	2203      	movs	r2, #3
 8007378:	f7fa fa28 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 800737c:	4b57      	ldr	r3, [pc, #348]	; (80074dc <drawBootMenu+0x72c>)
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8101 	beq.w	8007588 <drawBootMenu+0x7d8>
								setIndicator=0;
 8007386:	4b53      	ldr	r3, [pc, #332]	; (80074d4 <drawBootMenu+0x724>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
							}
							break;
 800738c:	e0fc      	b.n	8007588 <drawBootMenu+0x7d8>
						}
						default:
						{
							j=95;
 800738e:	235f      	movs	r3, #95	; 0x5f
 8007390:	61fb      	str	r3, [r7, #28]
							i=140;
 8007392:	238c      	movs	r3, #140	; 0x8c
 8007394:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	b298      	uxth	r0, r3
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	b29b      	uxth	r3, r3
 800739e:	3305      	adds	r3, #5
 80073a0:	b299      	uxth	r1, r3
 80073a2:	2303      	movs	r3, #3
 80073a4:	2203      	movs	r2, #3
 80073a6:	f7fa fa11 	bl	80017cc <drawUpDownArrow>
							if(bootButtons.modeClear){
 80073aa:	4b4c      	ldr	r3, [pc, #304]	; (80074dc <drawBootMenu+0x72c>)
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 80ec 	beq.w	800758c <drawBootMenu+0x7dc>
								setIndicator=0;
 80073b4:	4b47      	ldr	r3, [pc, #284]	; (80074d4 <drawBootMenu+0x724>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]
							}
							break;
 80073ba:	bf00      	nop
 80073bc:	e0e6      	b.n	800758c <drawBootMenu+0x7dc>
						}
					}
				}
			}
			else{
				j=45;
 80073be:	232d      	movs	r3, #45	; 0x2d
 80073c0:	61fb      	str	r3, [r7, #28]
				i=15;
 80073c2:	230f      	movs	r3, #15
 80073c4:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	b298      	uxth	r0, r3
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	b299      	uxth	r1, r3
 80073ce:	4b3d      	ldr	r3, [pc, #244]	; (80074c4 <drawBootMenu+0x714>)
 80073d0:	4a43      	ldr	r2, [pc, #268]	; (80074e0 <drawBootMenu+0x730>)
 80073d2:	f7fa f8ab 	bl	800152c <LCD_PutStr>
				j+=30;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	331e      	adds	r3, #30
 80073da:	61fb      	str	r3, [r7, #28]
				i=42;
 80073dc:	232a      	movs	r3, #42	; 0x2a
 80073de:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	b298      	uxth	r0, r3
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	b299      	uxth	r1, r3
 80073e8:	4b36      	ldr	r3, [pc, #216]	; (80074c4 <drawBootMenu+0x714>)
 80073ea:	4a38      	ldr	r2, [pc, #224]	; (80074cc <drawBootMenu+0x71c>)
 80073ec:	f7fa f89e 	bl	800152c <LCD_PutStr>
				i=indentAlignment;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	613b      	str	r3, [r7, #16]
				j+=20;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	3314      	adds	r3, #20
 80073f8:	61fb      	str	r3, [r7, #28]
				LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	b298      	uxth	r0, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	b299      	uxth	r1, r3
 8007402:	4b30      	ldr	r3, [pc, #192]	; (80074c4 <drawBootMenu+0x714>)
 8007404:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <drawBootMenu+0x720>)
 8007406:	f7fa f891 	bl	800152c <LCD_PutStr>
				if(setIndicator==0){
 800740a:	4b32      	ldr	r3, [pc, #200]	; (80074d4 <drawBootMenu+0x724>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d168      	bne.n	80074e4 <drawBootMenu+0x734>
					switch(indicator){
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d12a      	bne.n	800746e <drawBootMenu+0x6be>
					case FIRST:
					{
						j=95;
 8007418:	235f      	movs	r3, #95	; 0x5f
 800741a:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	2b04      	cmp	r3, #4
 8007420:	bf0c      	ite	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	2300      	movne	r3, #0
 8007426:	b2da      	uxtb	r2, r3
 8007428:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <drawBootMenu+0x728>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4299      	cmp	r1, r3
 8007430:	bf0c      	ite	eq
 8007432:	2301      	moveq	r3, #1
 8007434:	2300      	movne	r3, #0
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4013      	ands	r3, r2
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80a7 	beq.w	8007590 <drawBootMenu+0x7e0>
							i=140;
 8007442:	238c      	movs	r3, #140	; 0x8c
 8007444:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	b298      	uxth	r0, r3
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	b29b      	uxth	r3, r3
 800744e:	3305      	adds	r3, #5
 8007450:	b299      	uxth	r1, r3
 8007452:	2303      	movs	r3, #3
 8007454:	2203      	movs	r2, #3
 8007456:	f7fa f9b9 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 800745a:	4b20      	ldr	r3, [pc, #128]	; (80074dc <drawBootMenu+0x72c>)
 800745c:	2201      	movs	r2, #1
 800745e:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 8007460:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <drawBootMenu+0x72c>)
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007466:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <drawBootMenu+0x724>)
 8007468:	2201      	movs	r2, #1
 800746a:	601a      	str	r2, [r3, #0]
						}
						break;
 800746c:	e090      	b.n	8007590 <drawBootMenu+0x7e0>
					}
					default:
					{
						j=95;
 800746e:	235f      	movs	r3, #95	; 0x5f
 8007470:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	2b04      	cmp	r3, #4
 8007476:	bf0c      	ite	eq
 8007478:	2301      	moveq	r3, #1
 800747a:	2300      	movne	r3, #0
 800747c:	b2da      	uxtb	r2, r3
 800747e:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <drawBootMenu+0x728>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	4299      	cmp	r1, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	4013      	ands	r3, r2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d07e      	beq.n	8007594 <drawBootMenu+0x7e4>
							i=140;
 8007496:	238c      	movs	r3, #140	; 0x8c
 8007498:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	b298      	uxth	r0, r3
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	3305      	adds	r3, #5
 80074a4:	b299      	uxth	r1, r3
 80074a6:	2303      	movs	r3, #3
 80074a8:	2203      	movs	r2, #3
 80074aa:	f7fa f98f 	bl	80017cc <drawUpDownArrow>
							bootButtons.btn0=1;
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <drawBootMenu+0x72c>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <drawBootMenu+0x72c>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 80074ba:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <drawBootMenu+0x724>)
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]
						}
						break;
 80074c0:	bf00      	nop
 80074c2:	e067      	b.n	8007594 <drawBootMenu+0x7e4>
 80074c4:	08016aa8 	.word	0x08016aa8
 80074c8:	080168b4 	.word	0x080168b4
 80074cc:	0801685c 	.word	0x0801685c
 80074d0:	08016878 	.word	0x08016878
 80074d4:	20003358 	.word	0x20003358
 80074d8:	20003354 	.word	0x20003354
 80074dc:	200032bc 	.word	0x200032bc
 80074e0:	080168d8 	.word	0x080168d8
					}
					}
				}
				else{
					switch(setIndicator){
 80074e4:	4b3a      	ldr	r3, [pc, #232]	; (80075d0 <drawBootMenu+0x820>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d115      	bne.n	8007518 <drawBootMenu+0x768>
					case FIRST:
					{
						j=95;
 80074ec:	235f      	movs	r3, #95	; 0x5f
 80074ee:	61fb      	str	r3, [r7, #28]
						i=140;
 80074f0:	238c      	movs	r3, #140	; 0x8c
 80074f2:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	b298      	uxth	r0, r3
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3305      	adds	r3, #5
 80074fe:	b299      	uxth	r1, r3
 8007500:	2303      	movs	r3, #3
 8007502:	2203      	movs	r2, #3
 8007504:	f7fa f962 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007508:	4b32      	ldr	r3, [pc, #200]	; (80075d4 <drawBootMenu+0x824>)
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b00      	cmp	r3, #0
 800750e:	d043      	beq.n	8007598 <drawBootMenu+0x7e8>
							setIndicator=0;
 8007510:	4b2f      	ldr	r3, [pc, #188]	; (80075d0 <drawBootMenu+0x820>)
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
						}
						break;
 8007516:	e03f      	b.n	8007598 <drawBootMenu+0x7e8>
					}
					default:
					{
						j=95;
 8007518:	235f      	movs	r3, #95	; 0x5f
 800751a:	61fb      	str	r3, [r7, #28]
						i=140;
 800751c:	238c      	movs	r3, #140	; 0x8c
 800751e:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	b298      	uxth	r0, r3
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	b29b      	uxth	r3, r3
 8007528:	3305      	adds	r3, #5
 800752a:	b299      	uxth	r1, r3
 800752c:	2303      	movs	r3, #3
 800752e:	2203      	movs	r2, #3
 8007530:	f7fa f94c 	bl	80017cc <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007534:	4b27      	ldr	r3, [pc, #156]	; (80075d4 <drawBootMenu+0x824>)
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d02f      	beq.n	800759c <drawBootMenu+0x7ec>
							setIndicator=0;
 800753c:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <drawBootMenu+0x820>)
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
						}
						break;
 8007542:	bf00      	nop
 8007544:	e02a      	b.n	800759c <drawBootMenu+0x7ec>
					}
				}
			}
		}
		else{
			j=110;
 8007546:	236e      	movs	r3, #110	; 0x6e
 8007548:	61fb      	str	r3, [r7, #28]
			i=120;
 800754a:	2378      	movs	r3, #120	; 0x78
 800754c:	613b      	str	r3, [r7, #16]
			bootButtons.bootMode=0;
 800754e:	4b21      	ldr	r3, [pc, #132]	; (80075d4 <drawBootMenu+0x824>)
 8007550:	2200      	movs	r2, #0
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	b298      	uxth	r0, r3
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	b299      	uxth	r1, r3
 800755c:	4b1e      	ldr	r3, [pc, #120]	; (80075d8 <drawBootMenu+0x828>)
 800755e:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <drawBootMenu+0x82c>)
 8007560:	f7f9 ffe4 	bl	800152c <LCD_PutStr>
			j+=14;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	330e      	adds	r3, #14
 8007568:	61fb      	str	r3, [r7, #28]
			i=75;
 800756a:	234b      	movs	r3, #75	; 0x4b
 800756c:	613b      	str	r3, [r7, #16]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	b298      	uxth	r0, r3
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	b299      	uxth	r1, r3
 8007576:	4b18      	ldr	r3, [pc, #96]	; (80075d8 <drawBootMenu+0x828>)
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <drawBootMenu+0x830>)
 800757a:	f7f9 ffd7 	bl	800152c <LCD_PutStr>
 800757e:	e00e      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 8007580:	bf00      	nop
 8007582:	e00c      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 8007584:	bf00      	nop
 8007586:	e00a      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 8007588:	bf00      	nop
 800758a:	e008      	b.n	800759e <drawBootMenu+0x7ee>
							break;
 800758c:	bf00      	nop
 800758e:	e006      	b.n	800759e <drawBootMenu+0x7ee>
						break;
 8007590:	bf00      	nop
 8007592:	e004      	b.n	800759e <drawBootMenu+0x7ee>
						break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <drawBootMenu+0x7ee>
						break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <drawBootMenu+0x7ee>
						break;
 800759c:	bf00      	nop
		}
		previousMenu=menu;
 800759e:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <drawBootMenu+0x834>)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6013      	str	r3, [r2, #0]
		i=25;
 80075a4:	2319      	movs	r3, #25
 80075a6:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	b298      	uxth	r0, r3
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	b299      	uxth	r1, r3
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	330c      	adds	r3, #12
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	330a      	adds	r3, #10
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f7f9 fc68 	bl	8000e94 <LCD_FillRect>
		SMLCD_Flush();
 80075c4:	f7f9 f888 	bl	80006d8 <SMLCD_Flush>
}
 80075c8:	bf00      	nop
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20003358 	.word	0x20003358
 80075d4:	200032bc 	.word	0x200032bc
 80075d8:	08016aa8 	.word	0x08016aa8
 80075dc:	08016904 	.word	0x08016904
 80075e0:	0801691c 	.word	0x0801691c
 80075e4:	20003354 	.word	0x20003354

080075e8 <drawMenuHeader>:

void drawMenuHeader(){
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 80075ee:	4b59      	ldr	r3, [pc, #356]	; (8007754 <drawMenuHeader+0x16c>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 80075f4:	4b58      	ldr	r3, [pc, #352]	; (8007758 <drawMenuHeader+0x170>)
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	4b57      	ldr	r3, [pc, #348]	; (800775c <drawMenuHeader+0x174>)
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	3b01      	subs	r3, #1
 8007602:	b29b      	uxth	r3, r3
 8007604:	2100      	movs	r1, #0
 8007606:	2000      	movs	r0, #0
 8007608:	f7f9 fc02 	bl	8000e10 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 800760c:	4b52      	ldr	r3, [pc, #328]	; (8007758 <drawMenuHeader+0x170>)
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	3b03      	subs	r3, #3
 8007612:	b29a      	uxth	r2, r3
 8007614:	4b51      	ldr	r3, [pc, #324]	; (800775c <drawMenuHeader+0x174>)
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	3b03      	subs	r3, #3
 800761a:	b29b      	uxth	r3, r3
 800761c:	2102      	movs	r1, #2
 800761e:	2002      	movs	r0, #2
 8007620:	f7f9 fbf6 	bl	8000e10 <LCD_Rect>

	// RTC :)
	i  = 10;
 8007624:	230a      	movs	r3, #10
 8007626:	607b      	str	r3, [r7, #4]
	j  = 10;
 8007628:	230a      	movs	r3, #10
 800762a:	603b      	str	r3, [r7, #0]
	i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	b298      	uxth	r0, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	b299      	uxth	r1, r3
 8007634:	4b4a      	ldr	r3, [pc, #296]	; (8007760 <drawMenuHeader+0x178>)
 8007636:	4a4b      	ldr	r2, [pc, #300]	; (8007764 <drawMenuHeader+0x17c>)
 8007638:	f7f9 ff78 	bl	800152c <LCD_PutStr>
 800763c:	4603      	mov	r3, r0
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	607b      	str	r3, [r7, #4]
	i += LCD_PutStr(i, j, "So many!", fnt7x10);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	b298      	uxth	r0, r3
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	b299      	uxth	r1, r3
 800764e:	4b44      	ldr	r3, [pc, #272]	; (8007760 <drawMenuHeader+0x178>)
 8007650:	4a45      	ldr	r2, [pc, #276]	; (8007768 <drawMenuHeader+0x180>)
 8007652:	f7f9 ff6b 	bl	800152c <LCD_PutStr>
 8007656:	4603      	mov	r3, r0
 8007658:	461a      	mov	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	607b      	str	r3, [r7, #4]
	i+=170;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	33aa      	adds	r3, #170	; 0xaa
 8007664:	607b      	str	r3, [r7, #4]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	b298      	uxth	r0, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	b299      	uxth	r1, r3
 800766e:	4b3c      	ldr	r3, [pc, #240]	; (8007760 <drawMenuHeader+0x178>)
 8007670:	4a3e      	ldr	r2, [pc, #248]	; (800776c <drawMenuHeader+0x184>)
 8007672:	f7f9 ff5b 	bl	800152c <LCD_PutStr>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	607b      	str	r3, [r7, #4]
	if(displayAdcValues[Adc.adc0] >3.5){
 8007680:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <drawMenuHeader+0x188>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a3b      	ldr	r2, [pc, #236]	; (8007774 <drawMenuHeader+0x18c>)
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	edd3 7a00 	vldr	s15, [r3]
 800768e:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8007692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769a:	dd4a      	ble.n	8007732 <drawMenuHeader+0x14a>
		switch(bootButtons.bootMode){
 800769c:	4b36      	ldr	r3, [pc, #216]	; (8007778 <drawMenuHeader+0x190>)
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	2b05      	cmp	r3, #5
 80076a2:	d84e      	bhi.n	8007742 <drawMenuHeader+0x15a>
 80076a4:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <drawMenuHeader+0xc4>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076c5 	.word	0x080076c5
 80076b0:	080076d7 	.word	0x080076d7
 80076b4:	080076e9 	.word	0x080076e9
 80076b8:	080076fb 	.word	0x080076fb
 80076bc:	0800771f 	.word	0x0800771f
 80076c0:	0800770d 	.word	0x0800770d
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	b298      	uxth	r0, r3
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	b299      	uxth	r1, r3
 80076cc:	4b24      	ldr	r3, [pc, #144]	; (8007760 <drawMenuHeader+0x178>)
 80076ce:	4a2b      	ldr	r2, [pc, #172]	; (800777c <drawMenuHeader+0x194>)
 80076d0:	f7f9 ff2c 	bl	800152c <LCD_PutStr>
			break;
 80076d4:	e035      	b.n	8007742 <drawMenuHeader+0x15a>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	b298      	uxth	r0, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	b299      	uxth	r1, r3
 80076de:	4b20      	ldr	r3, [pc, #128]	; (8007760 <drawMenuHeader+0x178>)
 80076e0:	4a27      	ldr	r2, [pc, #156]	; (8007780 <drawMenuHeader+0x198>)
 80076e2:	f7f9 ff23 	bl	800152c <LCD_PutStr>
			break;
 80076e6:	e02c      	b.n	8007742 <drawMenuHeader+0x15a>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	b298      	uxth	r0, r3
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	b299      	uxth	r1, r3
 80076f0:	4b1b      	ldr	r3, [pc, #108]	; (8007760 <drawMenuHeader+0x178>)
 80076f2:	4a24      	ldr	r2, [pc, #144]	; (8007784 <drawMenuHeader+0x19c>)
 80076f4:	f7f9 ff1a 	bl	800152c <LCD_PutStr>
			break;
 80076f8:	e023      	b.n	8007742 <drawMenuHeader+0x15a>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	b298      	uxth	r0, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	b299      	uxth	r1, r3
 8007702:	4b17      	ldr	r3, [pc, #92]	; (8007760 <drawMenuHeader+0x178>)
 8007704:	4a20      	ldr	r2, [pc, #128]	; (8007788 <drawMenuHeader+0x1a0>)
 8007706:	f7f9 ff11 	bl	800152c <LCD_PutStr>
			break;
 800770a:	e01a      	b.n	8007742 <drawMenuHeader+0x15a>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	b298      	uxth	r0, r3
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	b299      	uxth	r1, r3
 8007714:	4b12      	ldr	r3, [pc, #72]	; (8007760 <drawMenuHeader+0x178>)
 8007716:	4a1d      	ldr	r2, [pc, #116]	; (800778c <drawMenuHeader+0x1a4>)
 8007718:	f7f9 ff08 	bl	800152c <LCD_PutStr>
			break;
 800771c:	e011      	b.n	8007742 <drawMenuHeader+0x15a>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	b298      	uxth	r0, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	b299      	uxth	r1, r3
 8007726:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <drawMenuHeader+0x178>)
 8007728:	4a19      	ldr	r2, [pc, #100]	; (8007790 <drawMenuHeader+0x1a8>)
 800772a:	f7f9 feff 	bl	800152c <LCD_PutStr>
			break;
 800772e:	bf00      	nop
 8007730:	e007      	b.n	8007742 <drawMenuHeader+0x15a>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	b298      	uxth	r0, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	b299      	uxth	r1, r3
 800773a:	4b09      	ldr	r3, [pc, #36]	; (8007760 <drawMenuHeader+0x178>)
 800773c:	4a0f      	ldr	r2, [pc, #60]	; (800777c <drawMenuHeader+0x194>)
 800773e:	f7f9 fef5 	bl	800152c <LCD_PutStr>
	}

	i  = 135;
 8007742:	2387      	movs	r3, #135	; 0x87
 8007744:	607b      	str	r3, [r7, #4]
	j += 14;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	330e      	adds	r3, #14
 800774a:	603b      	str	r3, [r7, #0]


}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20028a84 	.word	0x20028a84
 8007758:	20028a86 	.word	0x20028a86
 800775c:	20028a88 	.word	0x20028a88
 8007760:	08016aa8 	.word	0x08016aa8
 8007764:	08016344 	.word	0x08016344
 8007768:	0801634c 	.word	0x0801634c
 800776c:	08016358 	.word	0x08016358
 8007770:	20000138 	.word	0x20000138
 8007774:	20030a7c 	.word	0x20030a7c
 8007778:	200032bc 	.word	0x200032bc
 800777c:	08016360 	.word	0x08016360
 8007780:	08016364 	.word	0x08016364
 8007784:	08016368 	.word	0x08016368
 8007788:	08016370 	.word	0x08016370
 800778c:	08016374 	.word	0x08016374
 8007790:	0801637c 	.word	0x0801637c

08007794 <getLatestADC>:

void getLatestADC(){
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <getLatestADC+0x54>)
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <getLatestADC+0x54>)
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	4013      	ands	r3, r2
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <getLatestADC+0x54>)
 80077a8:	789b      	ldrb	r3, [r3, #2]
 80077aa:	4013      	ands	r3, r2
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d016      	beq.n	80077e0 <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 80077b2:	f7fc f89b 	bl	80038ec <getADCValues>
 80077b6:	4603      	mov	r3, r0
 80077b8:	603b      	str	r3, [r7, #0]
		  for(i=0;i<20;i++){
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e00c      	b.n	80077da <getLatestADC+0x46>
	  		  displayAdcValues[i]=*adcValuePointer;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4909      	ldr	r1, [pc, #36]	; (80077ec <getLatestADC+0x58>)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	601a      	str	r2, [r3, #0]
	  		  adcValuePointer++;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3304      	adds	r3, #4
 80077d2:	603b      	str	r3, [r7, #0]
		  for(i=0;i<20;i++){
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3301      	adds	r3, #1
 80077d8:	607b      	str	r3, [r7, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b13      	cmp	r3, #19
 80077de:	ddef      	ble.n	80077c0 <getLatestADC+0x2c>
		  }
	 }
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20029200 	.word	0x20029200
 80077ec:	20030a7c 	.word	0x20030a7c

080077f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80077f6:	4b11      	ldr	r3, [pc, #68]	; (800783c <HAL_MspInit+0x4c>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	4a10      	ldr	r2, [pc, #64]	; (800783c <HAL_MspInit+0x4c>)
 80077fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007800:	6413      	str	r3, [r2, #64]	; 0x40
 8007802:	4b0e      	ldr	r3, [pc, #56]	; (800783c <HAL_MspInit+0x4c>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800780e:	4b0b      	ldr	r3, [pc, #44]	; (800783c <HAL_MspInit+0x4c>)
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	4a0a      	ldr	r2, [pc, #40]	; (800783c <HAL_MspInit+0x4c>)
 8007814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007818:	6453      	str	r3, [r2, #68]	; 0x44
 800781a:	4b08      	ldr	r3, [pc, #32]	; (800783c <HAL_MspInit+0x4c>)
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007826:	2200      	movs	r2, #0
 8007828:	210f      	movs	r1, #15
 800782a:	f06f 0001 	mvn.w	r0, #1
 800782e:	f002 f94f 	bl	8009ad0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40023800 	.word	0x40023800

08007840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b094      	sub	sp, #80	; 0x50
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007848:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a91      	ldr	r2, [pc, #580]	; (8007aa4 <HAL_ADC_MspInit+0x264>)
 800785e:	4293      	cmp	r3, r2
 8007860:	f040 808c 	bne.w	800797c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007864:	4b90      	ldr	r3, [pc, #576]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 8007866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007868:	4a8f      	ldr	r2, [pc, #572]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 800786a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800786e:	6453      	str	r3, [r2, #68]	; 0x44
 8007870:	4b8d      	ldr	r3, [pc, #564]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007878:	63bb      	str	r3, [r7, #56]	; 0x38
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800787c:	4b8a      	ldr	r3, [pc, #552]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 800787e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007880:	4a89      	ldr	r2, [pc, #548]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 8007882:	f043 0304 	orr.w	r3, r3, #4
 8007886:	6313      	str	r3, [r2, #48]	; 0x30
 8007888:	4b87      	ldr	r3, [pc, #540]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
 8007892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007894:	4b84      	ldr	r3, [pc, #528]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	4a83      	ldr	r2, [pc, #524]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	6313      	str	r3, [r2, #48]	; 0x30
 80078a0:	4b81      	ldr	r3, [pc, #516]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	f003 0301 	and.w	r3, r3, #1
 80078a8:	633b      	str	r3, [r7, #48]	; 0x30
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ac:	4b7e      	ldr	r3, [pc, #504]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	4a7d      	ldr	r2, [pc, #500]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80078b2:	f043 0302 	orr.w	r3, r3, #2
 80078b6:	6313      	str	r3, [r2, #48]	; 0x30
 80078b8:	4b7b      	ldr	r3, [pc, #492]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 80078c4:	230f      	movs	r3, #15
 80078c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078c8:	2303      	movs	r3, #3
 80078ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078d4:	4619      	mov	r1, r3
 80078d6:	4875      	ldr	r0, [pc, #468]	; (8007aac <HAL_ADC_MspInit+0x26c>)
 80078d8:	f002 fd2c 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 80078dc:	23f8      	movs	r3, #248	; 0xf8
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078e0:	2303      	movs	r3, #3
 80078e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e4:	2300      	movs	r3, #0
 80078e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078ec:	4619      	mov	r1, r3
 80078ee:	4870      	ldr	r0, [pc, #448]	; (8007ab0 <HAL_ADC_MspInit+0x270>)
 80078f0:	f002 fd20 	bl	800a334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 80078f4:	2303      	movs	r3, #3
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078f8:	2303      	movs	r3, #3
 80078fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007900:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007904:	4619      	mov	r1, r3
 8007906:	486b      	ldr	r0, [pc, #428]	; (8007ab4 <HAL_ADC_MspInit+0x274>)
 8007908:	f002 fd14 	bl	800a334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800790c:	4b6a      	ldr	r3, [pc, #424]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 800790e:	4a6b      	ldr	r2, [pc, #428]	; (8007abc <HAL_ADC_MspInit+0x27c>)
 8007910:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007912:	4b69      	ldr	r3, [pc, #420]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007914:	2200      	movs	r2, #0
 8007916:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007918:	4b67      	ldr	r3, [pc, #412]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 800791a:	2200      	movs	r2, #0
 800791c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800791e:	4b66      	ldr	r3, [pc, #408]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007920:	2200      	movs	r2, #0
 8007922:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007924:	4b64      	ldr	r3, [pc, #400]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800792a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800792c:	4b62      	ldr	r3, [pc, #392]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 800792e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007934:	4b60      	ldr	r3, [pc, #384]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800793a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800793c:	4b5e      	ldr	r3, [pc, #376]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 800793e:	2200      	movs	r2, #0
 8007940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007942:	4b5d      	ldr	r3, [pc, #372]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007944:	2200      	movs	r2, #0
 8007946:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007948:	4b5b      	ldr	r3, [pc, #364]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 800794a:	2200      	movs	r2, #0
 800794c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800794e:	485a      	ldr	r0, [pc, #360]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007950:	f002 f8e8 	bl	8009b24 <HAL_DMA_Init>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 800795a:	f7fd f96f 	bl	8004c3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a55      	ldr	r2, [pc, #340]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007962:	639a      	str	r2, [r3, #56]	; 0x38
 8007964:	4a54      	ldr	r2, [pc, #336]	; (8007ab8 <HAL_ADC_MspInit+0x278>)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800796a:	2200      	movs	r2, #0
 800796c:	2105      	movs	r1, #5
 800796e:	2012      	movs	r0, #18
 8007970:	f002 f8ae 	bl	8009ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007974:	2012      	movs	r0, #18
 8007976:	f002 f8c7 	bl	8009b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800797a:	e13a      	b.n	8007bf2 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a4f      	ldr	r2, [pc, #316]	; (8007ac0 <HAL_ADC_MspInit+0x280>)
 8007982:	4293      	cmp	r3, r2
 8007984:	f040 80a2 	bne.w	8007acc <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007988:	4b47      	ldr	r3, [pc, #284]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 800798a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798c:	4a46      	ldr	r2, [pc, #280]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 800798e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007992:	6453      	str	r3, [r2, #68]	; 0x44
 8007994:	4b44      	ldr	r3, [pc, #272]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 8007996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800799c:	62bb      	str	r3, [r7, #40]	; 0x28
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079a0:	4b41      	ldr	r3, [pc, #260]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	4a40      	ldr	r2, [pc, #256]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079a6:	f043 0304 	orr.w	r3, r3, #4
 80079aa:	6313      	str	r3, [r2, #48]	; 0x30
 80079ac:	4b3e      	ldr	r3, [pc, #248]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b8:	4b3b      	ldr	r3, [pc, #236]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	4a3a      	ldr	r2, [pc, #232]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	6313      	str	r3, [r2, #48]	; 0x30
 80079c4:	4b38      	ldr	r3, [pc, #224]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	623b      	str	r3, [r7, #32]
 80079ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079d0:	4b35      	ldr	r3, [pc, #212]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	4a34      	ldr	r2, [pc, #208]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079d6:	f043 0302 	orr.w	r3, r3, #2
 80079da:	6313      	str	r3, [r2, #48]	; 0x30
 80079dc:	4b32      	ldr	r3, [pc, #200]	; (8007aa8 <HAL_ADC_MspInit+0x268>)
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 80079e8:	233f      	movs	r3, #63	; 0x3f
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80079ec:	2303      	movs	r3, #3
 80079ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079f8:	4619      	mov	r1, r3
 80079fa:	482c      	ldr	r0, [pc, #176]	; (8007aac <HAL_ADC_MspInit+0x26c>)
 80079fc:	f002 fc9a 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8007a00:	237b      	movs	r3, #123	; 0x7b
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a04:	2303      	movs	r3, #3
 8007a06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a10:	4619      	mov	r1, r3
 8007a12:	4827      	ldr	r0, [pc, #156]	; (8007ab0 <HAL_ADC_MspInit+0x270>)
 8007a14:	f002 fc8e 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8007a24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4822      	ldr	r0, [pc, #136]	; (8007ab4 <HAL_ADC_MspInit+0x274>)
 8007a2c:	f002 fc82 	bl	800a334 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8007a30:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a32:	4a25      	ldr	r2, [pc, #148]	; (8007ac8 <HAL_ADC_MspInit+0x288>)
 8007a34:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007a36:	4b23      	ldr	r3, [pc, #140]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a3c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a3e:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a44:	4b1f      	ldr	r3, [pc, #124]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007a4a:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a50:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a58:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a60:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8007a62:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8007a68:	4b16      	ldr	r3, [pc, #88]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a6e:	4b15      	ldr	r3, [pc, #84]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007a74:	4813      	ldr	r0, [pc, #76]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a76:	f002 f855 	bl	8009b24 <HAL_DMA_Init>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8007a80:	f7fd f8dc 	bl	8004c3c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0f      	ldr	r2, [pc, #60]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
 8007a8a:	4a0e      	ldr	r2, [pc, #56]	; (8007ac4 <HAL_ADC_MspInit+0x284>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007a90:	2200      	movs	r2, #0
 8007a92:	2105      	movs	r1, #5
 8007a94:	2012      	movs	r0, #18
 8007a96:	f002 f81b 	bl	8009ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007a9a:	2012      	movs	r0, #18
 8007a9c:	f002 f834 	bl	8009b08 <HAL_NVIC_EnableIRQ>
}
 8007aa0:	e0a7      	b.n	8007bf2 <HAL_ADC_MspInit+0x3b2>
 8007aa2:	bf00      	nop
 8007aa4:	40012000 	.word	0x40012000
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	40020800 	.word	0x40020800
 8007ab0:	40020000 	.word	0x40020000
 8007ab4:	40020400 	.word	0x40020400
 8007ab8:	2002ba6c 	.word	0x2002ba6c
 8007abc:	40026410 	.word	0x40026410
 8007ac0:	40012100 	.word	0x40012100
 8007ac4:	200309b4 	.word	0x200309b4
 8007ac8:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a4a      	ldr	r2, [pc, #296]	; (8007bfc <HAL_ADC_MspInit+0x3bc>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	f040 808d 	bne.w	8007bf2 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007ad8:	4b49      	ldr	r3, [pc, #292]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007adc:	4a48      	ldr	r2, [pc, #288]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ae2:	6453      	str	r3, [r2, #68]	; 0x44
 8007ae4:	4b46      	ldr	r3, [pc, #280]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007af0:	4b43      	ldr	r3, [pc, #268]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	4a42      	ldr	r2, [pc, #264]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007af6:	f043 0320 	orr.w	r3, r3, #32
 8007afa:	6313      	str	r3, [r2, #48]	; 0x30
 8007afc:	4b40      	ldr	r3, [pc, #256]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b08:	4b3d      	ldr	r3, [pc, #244]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	4a3c      	ldr	r2, [pc, #240]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007b0e:	f043 0304 	orr.w	r3, r3, #4
 8007b12:	6313      	str	r3, [r2, #48]	; 0x30
 8007b14:	4b3a      	ldr	r3, [pc, #232]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b20:	4b37      	ldr	r3, [pc, #220]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	4a36      	ldr	r2, [pc, #216]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007b26:	f043 0301 	orr.w	r3, r3, #1
 8007b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8007b2c:	4b34      	ldr	r3, [pc, #208]	; (8007c00 <HAL_ADC_MspInit+0x3c0>)
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8007b38:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007b46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	482d      	ldr	r0, [pc, #180]	; (8007c04 <HAL_ADC_MspInit+0x3c4>)
 8007b4e:	f002 fbf1 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8007b52:	230f      	movs	r3, #15
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b56:	2303      	movs	r3, #3
 8007b58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b62:	4619      	mov	r1, r3
 8007b64:	4828      	ldr	r0, [pc, #160]	; (8007c08 <HAL_ADC_MspInit+0x3c8>)
 8007b66:	f002 fbe5 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4823      	ldr	r0, [pc, #140]	; (8007c0c <HAL_ADC_MspInit+0x3cc>)
 8007b7e:	f002 fbd9 	bl	800a334 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8007b82:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007b84:	4a23      	ldr	r2, [pc, #140]	; (8007c14 <HAL_ADC_MspInit+0x3d4>)
 8007b86:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8007b88:	4b21      	ldr	r3, [pc, #132]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007b8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007b8e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b90:	4b1f      	ldr	r3, [pc, #124]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b96:	4b1e      	ldr	r3, [pc, #120]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8007b9c:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ba2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007ba4:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007baa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007bac:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007bb2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8007bb4:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8007bba:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bc0:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8007bc6:	4812      	ldr	r0, [pc, #72]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007bc8:	f001 ffac 	bl	8009b24 <HAL_DMA_Init>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8007bd2:	f7fd f833 	bl	8004c3c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <HAL_ADC_MspInit+0x3d0>)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8007be2:	2200      	movs	r2, #0
 8007be4:	2105      	movs	r1, #5
 8007be6:	2012      	movs	r0, #18
 8007be8:	f001 ff72 	bl	8009ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007bec:	2012      	movs	r0, #18
 8007bee:	f001 ff8b 	bl	8009b08 <HAL_NVIC_EnableIRQ>
}
 8007bf2:	bf00      	nop
 8007bf4:	3750      	adds	r7, #80	; 0x50
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40012200 	.word	0x40012200
 8007c00:	40023800 	.word	0x40023800
 8007c04:	40021400 	.word	0x40021400
 8007c08:	40020800 	.word	0x40020800
 8007c0c:	40020000 	.word	0x40020000
 8007c10:	200291a0 	.word	0x200291a0
 8007c14:	40026428 	.word	0x40026428

08007c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b090      	sub	sp, #64	; 0x40
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a6c      	ldr	r2, [pc, #432]	; (8007de8 <HAL_I2C_MspInit+0x1d0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d129      	bne.n	8007c8e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c3a:	4b6c      	ldr	r3, [pc, #432]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	4a6b      	ldr	r2, [pc, #428]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c40:	f043 0302 	orr.w	r3, r3, #2
 8007c44:	6313      	str	r3, [r2, #48]	; 0x30
 8007c46:	4b69      	ldr	r3, [pc, #420]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8007c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c58:	2312      	movs	r3, #18
 8007c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c60:	2303      	movs	r3, #3
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007c64:	2304      	movs	r3, #4
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4860      	ldr	r0, [pc, #384]	; (8007df0 <HAL_I2C_MspInit+0x1d8>)
 8007c70:	f002 fb60 	bl	800a334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c74:	4b5d      	ldr	r3, [pc, #372]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	4a5c      	ldr	r2, [pc, #368]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8007c80:	4b5a      	ldr	r3, [pc, #360]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007c8c:	e0a7      	b.n	8007dde <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a58      	ldr	r2, [pc, #352]	; (8007df4 <HAL_I2C_MspInit+0x1dc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d128      	bne.n	8007cea <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007c98:	4b54      	ldr	r3, [pc, #336]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9c:	4a53      	ldr	r2, [pc, #332]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007c9e:	f043 0320 	orr.w	r3, r3, #32
 8007ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ca4:	4b51      	ldr	r3, [pc, #324]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	623b      	str	r3, [r7, #32]
 8007cae:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007cb4:	2312      	movs	r3, #18
 8007cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cc8:	4619      	mov	r1, r3
 8007cca:	484b      	ldr	r0, [pc, #300]	; (8007df8 <HAL_I2C_MspInit+0x1e0>)
 8007ccc:	f002 fb32 	bl	800a334 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007cd0:	4b46      	ldr	r3, [pc, #280]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	4a45      	ldr	r2, [pc, #276]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007cd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cda:	6413      	str	r3, [r2, #64]	; 0x40
 8007cdc:	4b43      	ldr	r3, [pc, #268]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	e079      	b.n	8007dde <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a43      	ldr	r2, [pc, #268]	; (8007dfc <HAL_I2C_MspInit+0x1e4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d146      	bne.n	8007d82 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cf4:	4b3d      	ldr	r3, [pc, #244]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf8:	4a3c      	ldr	r2, [pc, #240]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007cfa:	f043 0304 	orr.w	r3, r3, #4
 8007cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8007d00:	4b3a      	ldr	r3, [pc, #232]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d0c:	4b37      	ldr	r3, [pc, #220]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d10:	4a36      	ldr	r2, [pc, #216]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	6313      	str	r3, [r2, #48]	; 0x30
 8007d18:	4b34      	ldr	r3, [pc, #208]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8007d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d2a:	2312      	movs	r3, #18
 8007d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d32:	2303      	movs	r3, #3
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007d36:	2304      	movs	r3, #4
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8007d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d3e:	4619      	mov	r1, r3
 8007d40:	482f      	ldr	r0, [pc, #188]	; (8007e00 <HAL_I2C_MspInit+0x1e8>)
 8007d42:	f002 faf7 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8007d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d4c:	2312      	movs	r3, #18
 8007d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d50:	2301      	movs	r3, #1
 8007d52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d54:	2303      	movs	r3, #3
 8007d56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007d58:	2304      	movs	r3, #4
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8007d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d60:	4619      	mov	r1, r3
 8007d62:	4828      	ldr	r0, [pc, #160]	; (8007e04 <HAL_I2C_MspInit+0x1ec>)
 8007d64:	f002 fae6 	bl	800a334 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007d68:	4b20      	ldr	r3, [pc, #128]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	4a1f      	ldr	r2, [pc, #124]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d72:	6413      	str	r3, [r2, #64]	; 0x40
 8007d74:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	693b      	ldr	r3, [r7, #16]
}
 8007d80:	e02d      	b.n	8007dde <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <HAL_I2C_MspInit+0x1f0>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d128      	bne.n	8007dde <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d8c:	4b17      	ldr	r3, [pc, #92]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	4a16      	ldr	r2, [pc, #88]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d92:	f043 0320 	orr.w	r3, r3, #32
 8007d96:	6313      	str	r3, [r2, #48]	; 0x30
 8007d98:	4b14      	ldr	r3, [pc, #80]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	f003 0320 	and.w	r3, r3, #32
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8007da4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007daa:	2312      	movs	r3, #18
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dae:	2301      	movs	r3, #1
 8007db0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007db2:	2303      	movs	r3, #3
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007db6:	2304      	movs	r3, #4
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	480d      	ldr	r0, [pc, #52]	; (8007df8 <HAL_I2C_MspInit+0x1e0>)
 8007dc2:	f002 fab7 	bl	800a334 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007dc6:	4b09      	ldr	r3, [pc, #36]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	4a08      	ldr	r2, [pc, #32]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8007dd2:	4b06      	ldr	r3, [pc, #24]	; (8007dec <HAL_I2C_MspInit+0x1d4>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
}
 8007dde:	bf00      	nop
 8007de0:	3740      	adds	r7, #64	; 0x40
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	40005400 	.word	0x40005400
 8007dec:	40023800 	.word	0x40023800
 8007df0:	40020400 	.word	0x40020400
 8007df4:	40005800 	.word	0x40005800
 8007df8:	40021400 	.word	0x40021400
 8007dfc:	40005c00 	.word	0x40005c00
 8007e00:	40020800 	.word	0x40020800
 8007e04:	40020000 	.word	0x40020000
 8007e08:	40006000 	.word	0x40006000

08007e0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a07      	ldr	r2, [pc, #28]	; (8007e38 <HAL_RTC_MspInit+0x2c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d105      	bne.n	8007e2a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007e1e:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <HAL_RTC_MspInit+0x30>)
 8007e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e22:	4a06      	ldr	r2, [pc, #24]	; (8007e3c <HAL_RTC_MspInit+0x30>)
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e28:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40002800 	.word	0x40002800
 8007e3c:	40023800 	.word	0x40023800

08007e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08c      	sub	sp, #48	; 0x30
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e48:	f107 031c 	add.w	r3, r7, #28
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	605a      	str	r2, [r3, #4]
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a40      	ldr	r2, [pc, #256]	; (8007f60 <HAL_SPI_MspInit+0x120>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d130      	bne.n	8007ec4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8007e62:	4b40      	ldr	r3, [pc, #256]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	4a3f      	ldr	r2, [pc, #252]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e6e:	4b3d      	ldr	r3, [pc, #244]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e76:	61bb      	str	r3, [r7, #24]
 8007e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e7a:	4b3a      	ldr	r3, [pc, #232]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	4a39      	ldr	r2, [pc, #228]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007e80:	f043 0310 	orr.w	r3, r3, #16
 8007e84:	6313      	str	r3, [r2, #48]	; 0x30
 8007e86:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8007e92:	2364      	movs	r3, #100	; 0x64
 8007e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e96:	2302      	movs	r3, #2
 8007e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8007ea2:	2305      	movs	r3, #5
 8007ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ea6:	f107 031c 	add.w	r3, r7, #28
 8007eaa:	4619      	mov	r1, r3
 8007eac:	482e      	ldr	r0, [pc, #184]	; (8007f68 <HAL_SPI_MspInit+0x128>)
 8007eae:	f002 fa41 	bl	800a334 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2105      	movs	r1, #5
 8007eb6:	2054      	movs	r0, #84	; 0x54
 8007eb8:	f001 fe0a 	bl	8009ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8007ebc:	2054      	movs	r0, #84	; 0x54
 8007ebe:	f001 fe23 	bl	8009b08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8007ec2:	e049      	b.n	8007f58 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a28      	ldr	r2, [pc, #160]	; (8007f6c <HAL_SPI_MspInit+0x12c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d144      	bne.n	8007f58 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8007ece:	4b25      	ldr	r3, [pc, #148]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	4a24      	ldr	r2, [pc, #144]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eda:	4b22      	ldr	r3, [pc, #136]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8007ee6:	4b1f      	ldr	r3, [pc, #124]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	4a1e      	ldr	r2, [pc, #120]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007efe:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007f04:	f043 0320 	orr.w	r3, r3, #32
 8007f08:	6313      	str	r3, [r2, #48]	; 0x30
 8007f0a:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <HAL_SPI_MspInit+0x124>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8007f16:	23e0      	movs	r3, #224	; 0xe0
 8007f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f22:	2303      	movs	r3, #3
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007f26:	2305      	movs	r3, #5
 8007f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007f2a:	f107 031c 	add.w	r3, r7, #28
 8007f2e:	4619      	mov	r1, r3
 8007f30:	480f      	ldr	r0, [pc, #60]	; (8007f70 <HAL_SPI_MspInit+0x130>)
 8007f32:	f002 f9ff 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8007f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f44:	2303      	movs	r3, #3
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007f48:	2305      	movs	r3, #5
 8007f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8007f4c:	f107 031c 	add.w	r3, r7, #28
 8007f50:	4619      	mov	r1, r3
 8007f52:	4808      	ldr	r0, [pc, #32]	; (8007f74 <HAL_SPI_MspInit+0x134>)
 8007f54:	f002 f9ee 	bl	800a334 <HAL_GPIO_Init>
}
 8007f58:	bf00      	nop
 8007f5a:	3730      	adds	r7, #48	; 0x30
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40023800 	.word	0x40023800
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	40015000 	.word	0x40015000
 8007f70:	40021c00 	.word	0x40021c00
 8007f74:	40021400 	.word	0x40021400

08007f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a13      	ldr	r2, [pc, #76]	; (8007fd4 <HAL_TIM_Base_MspInit+0x5c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d10c      	bne.n	8007fa4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007f8a:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <HAL_TIM_Base_MspInit+0x60>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	4a12      	ldr	r2, [pc, #72]	; (8007fd8 <HAL_TIM_Base_MspInit+0x60>)
 8007f90:	f043 0304 	orr.w	r3, r3, #4
 8007f94:	6413      	str	r3, [r2, #64]	; 0x40
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <HAL_TIM_Base_MspInit+0x60>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8007fa2:	e010      	b.n	8007fc6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a0c      	ldr	r2, [pc, #48]	; (8007fdc <HAL_TIM_Base_MspInit+0x64>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d10b      	bne.n	8007fc6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007fae:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <HAL_TIM_Base_MspInit+0x60>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	4a09      	ldr	r2, [pc, #36]	; (8007fd8 <HAL_TIM_Base_MspInit+0x60>)
 8007fb4:	f043 0308 	orr.w	r3, r3, #8
 8007fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <HAL_TIM_Base_MspInit+0x60>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	f003 0308 	and.w	r3, r3, #8
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
}
 8007fc6:	bf00      	nop
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40000800 	.word	0x40000800
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	40000c00 	.word	0x40000c00

08007fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	605a      	str	r2, [r3, #4]
 8007ff2:	609a      	str	r2, [r3, #8]
 8007ff4:	60da      	str	r2, [r3, #12]
 8007ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a22      	ldr	r2, [pc, #136]	; (8008088 <HAL_TIM_MspPostInit+0xa8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d11c      	bne.n	800803c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008002:	4b22      	ldr	r3, [pc, #136]	; (800808c <HAL_TIM_MspPostInit+0xac>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	4a21      	ldr	r2, [pc, #132]	; (800808c <HAL_TIM_MspPostInit+0xac>)
 8008008:	f043 0302 	orr.w	r3, r3, #2
 800800c:	6313      	str	r3, [r2, #48]	; 0x30
 800800e:	4b1f      	ldr	r3, [pc, #124]	; (800808c <HAL_TIM_MspPostInit+0xac>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 800801a:	2340      	movs	r3, #64	; 0x40
 800801c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800801e:	2302      	movs	r3, #2
 8008020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008026:	2300      	movs	r3, #0
 8008028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800802a:	2302      	movs	r3, #2
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 800802e:	f107 0314 	add.w	r3, r7, #20
 8008032:	4619      	mov	r1, r3
 8008034:	4816      	ldr	r0, [pc, #88]	; (8008090 <HAL_TIM_MspPostInit+0xb0>)
 8008036:	f002 f97d 	bl	800a334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800803a:	e021      	b.n	8008080 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a14      	ldr	r2, [pc, #80]	; (8008094 <HAL_TIM_MspPostInit+0xb4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d11c      	bne.n	8008080 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8008046:	4b11      	ldr	r3, [pc, #68]	; (800808c <HAL_TIM_MspPostInit+0xac>)
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	4a10      	ldr	r2, [pc, #64]	; (800808c <HAL_TIM_MspPostInit+0xac>)
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	6313      	str	r3, [r2, #48]	; 0x30
 8008052:	4b0e      	ldr	r3, [pc, #56]	; (800808c <HAL_TIM_MspPostInit+0xac>)
 8008054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 800805e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008064:	2302      	movs	r3, #2
 8008066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008068:	2300      	movs	r3, #0
 800806a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800806c:	2300      	movs	r3, #0
 800806e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008070:	2302      	movs	r3, #2
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008074:	f107 0314 	add.w	r3, r7, #20
 8008078:	4619      	mov	r1, r3
 800807a:	4807      	ldr	r0, [pc, #28]	; (8008098 <HAL_TIM_MspPostInit+0xb8>)
 800807c:	f002 f95a 	bl	800a334 <HAL_GPIO_Init>
}
 8008080:	bf00      	nop
 8008082:	3728      	adds	r7, #40	; 0x28
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40000800 	.word	0x40000800
 800808c:	40023800 	.word	0x40023800
 8008090:	40020400 	.word	0x40020400
 8008094:	40000c00 	.word	0x40000c00
 8008098:	40021c00 	.word	0x40021c00

0800809c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08e      	sub	sp, #56	; 0x38
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	605a      	str	r2, [r3, #4]
 80080ae:	609a      	str	r2, [r3, #8]
 80080b0:	60da      	str	r2, [r3, #12]
 80080b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a6c      	ldr	r2, [pc, #432]	; (800826c <HAL_UART_MspInit+0x1d0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d129      	bne.n	8008112 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80080be:	4b6c      	ldr	r3, [pc, #432]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	4a6b      	ldr	r2, [pc, #428]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 80080c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080c8:	6413      	str	r3, [r2, #64]	; 0x40
 80080ca:	4b69      	ldr	r3, [pc, #420]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080d2:	623b      	str	r3, [r7, #32]
 80080d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080d6:	4b66      	ldr	r3, [pc, #408]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	4a65      	ldr	r2, [pc, #404]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 80080dc:	f043 0304 	orr.w	r3, r3, #4
 80080e0:	6313      	str	r3, [r2, #48]	; 0x30
 80080e2:	4b63      	ldr	r3, [pc, #396]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	61fb      	str	r3, [r7, #28]
 80080ec:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 80080ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f4:	2302      	movs	r3, #2
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080fc:	2303      	movs	r3, #3
 80080fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008100:	2308      	movs	r3, #8
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008108:	4619      	mov	r1, r3
 800810a:	485a      	ldr	r0, [pc, #360]	; (8008274 <HAL_UART_MspInit+0x1d8>)
 800810c:	f002 f912 	bl	800a334 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8008110:	e0a7      	b.n	8008262 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a58      	ldr	r2, [pc, #352]	; (8008278 <HAL_UART_MspInit+0x1dc>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d174      	bne.n	8008206 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 800811c:	4b54      	ldr	r3, [pc, #336]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	4a53      	ldr	r2, [pc, #332]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 8008122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008126:	6413      	str	r3, [r2, #64]	; 0x40
 8008128:	4b51      	ldr	r3, [pc, #324]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008130:	61bb      	str	r3, [r7, #24]
 8008132:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008134:	4b4e      	ldr	r3, [pc, #312]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	4a4d      	ldr	r2, [pc, #308]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800813a:	f043 0304 	orr.w	r3, r3, #4
 800813e:	6313      	str	r3, [r2, #48]	; 0x30
 8008140:	4b4b      	ldr	r3, [pc, #300]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800814c:	4b48      	ldr	r3, [pc, #288]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	4a47      	ldr	r2, [pc, #284]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 8008152:	f043 0308 	orr.w	r3, r3, #8
 8008156:	6313      	str	r3, [r2, #48]	; 0x30
 8008158:	4b45      	ldr	r3, [pc, #276]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	613b      	str	r3, [r7, #16]
 8008162:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8008164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800816a:	2302      	movs	r3, #2
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816e:	2300      	movs	r3, #0
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008172:	2303      	movs	r3, #3
 8008174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008176:	2308      	movs	r3, #8
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 800817a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800817e:	4619      	mov	r1, r3
 8008180:	483c      	ldr	r0, [pc, #240]	; (8008274 <HAL_UART_MspInit+0x1d8>)
 8008182:	f002 f8d7 	bl	800a334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8008186:	2304      	movs	r3, #4
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800818a:	2302      	movs	r3, #2
 800818c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818e:	2300      	movs	r3, #0
 8008190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008192:	2303      	movs	r3, #3
 8008194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008196:	2308      	movs	r3, #8
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 800819a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800819e:	4619      	mov	r1, r3
 80081a0:	4836      	ldr	r0, [pc, #216]	; (800827c <HAL_UART_MspInit+0x1e0>)
 80081a2:	f002 f8c7 	bl	800a334 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80081a6:	4b36      	ldr	r3, [pc, #216]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081a8:	4a36      	ldr	r2, [pc, #216]	; (8008284 <HAL_UART_MspInit+0x1e8>)
 80081aa:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80081ac:	4b34      	ldr	r3, [pc, #208]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80081b2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081b4:	4b32      	ldr	r3, [pc, #200]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80081ba:	4b31      	ldr	r3, [pc, #196]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081bc:	2200      	movs	r2, #0
 80081be:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80081c0:	4b2f      	ldr	r3, [pc, #188]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081c6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80081c8:	4b2d      	ldr	r3, [pc, #180]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80081ce:	4b2c      	ldr	r3, [pc, #176]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80081d4:	4b2a      	ldr	r3, [pc, #168]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081da:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80081dc:	4b28      	ldr	r3, [pc, #160]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081de:	2200      	movs	r2, #0
 80081e0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80081e2:	4b27      	ldr	r3, [pc, #156]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80081e8:	4825      	ldr	r0, [pc, #148]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081ea:	f001 fc9b 	bl	8009b24 <HAL_DMA_Init>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80081f4:	f7fc fd22 	bl	8004c3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a21      	ldr	r2, [pc, #132]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 80081fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80081fe:	4a20      	ldr	r2, [pc, #128]	; (8008280 <HAL_UART_MspInit+0x1e4>)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008204:	e02d      	b.n	8008262 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <HAL_UART_MspInit+0x1ec>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d128      	bne.n	8008262 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 8008216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800821a:	6413      	str	r3, [r2, #64]	; 0x40
 800821c:	4b14      	ldr	r3, [pc, #80]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008228:	4b11      	ldr	r3, [pc, #68]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822c:	4a10      	ldr	r2, [pc, #64]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 800822e:	f043 0310 	orr.w	r3, r3, #16
 8008232:	6313      	str	r3, [r2, #48]	; 0x30
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <HAL_UART_MspInit+0x1d4>)
 8008236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	60bb      	str	r3, [r7, #8]
 800823e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8008240:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008246:	2302      	movs	r3, #2
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824a:	2300      	movs	r3, #0
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800824e:	2303      	movs	r3, #3
 8008250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008252:	2308      	movs	r3, #8
 8008254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800825a:	4619      	mov	r1, r3
 800825c:	480b      	ldr	r0, [pc, #44]	; (800828c <HAL_UART_MspInit+0x1f0>)
 800825e:	f002 f869 	bl	800a334 <HAL_GPIO_Init>
}
 8008262:	bf00      	nop
 8008264:	3738      	adds	r7, #56	; 0x38
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40004c00 	.word	0x40004c00
 8008270:	40023800 	.word	0x40023800
 8008274:	40020800 	.word	0x40020800
 8008278:	40005000 	.word	0x40005000
 800827c:	40020c00 	.word	0x40020c00
 8008280:	20030a14 	.word	0x20030a14
 8008284:	40026010 	.word	0x40026010
 8008288:	40007800 	.word	0x40007800
 800828c:	40021000 	.word	0x40021000

08008290 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	; 0x28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	605a      	str	r2, [r3, #4]
 80082a2:	609a      	str	r2, [r3, #8]
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082b0:	d134      	bne.n	800831c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082b2:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <HAL_PCD_MspInit+0x94>)
 80082b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b6:	4a1b      	ldr	r2, [pc, #108]	; (8008324 <HAL_PCD_MspInit+0x94>)
 80082b8:	f043 0301 	orr.w	r3, r3, #1
 80082bc:	6313      	str	r3, [r2, #48]	; 0x30
 80082be:	4b19      	ldr	r3, [pc, #100]	; (8008324 <HAL_PCD_MspInit+0x94>)
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80082ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d0:	2302      	movs	r3, #2
 80082d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082d8:	2303      	movs	r3, #3
 80082da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082dc:	230a      	movs	r3, #10
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082e0:	f107 0314 	add.w	r3, r7, #20
 80082e4:	4619      	mov	r1, r3
 80082e6:	4810      	ldr	r0, [pc, #64]	; (8008328 <HAL_PCD_MspInit+0x98>)
 80082e8:	f002 f824 	bl	800a334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <HAL_PCD_MspInit+0x94>)
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	4a0c      	ldr	r2, [pc, #48]	; (8008324 <HAL_PCD_MspInit+0x94>)
 80082f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082f6:	6353      	str	r3, [r2, #52]	; 0x34
 80082f8:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <HAL_PCD_MspInit+0x94>)
 80082fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <HAL_PCD_MspInit+0x94>)
 8008306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008308:	4a06      	ldr	r2, [pc, #24]	; (8008324 <HAL_PCD_MspInit+0x94>)
 800830a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800830e:	6453      	str	r3, [r2, #68]	; 0x44
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <HAL_PCD_MspInit+0x94>)
 8008312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800831c:	bf00      	nop
 800831e:	3728      	adds	r7, #40	; 0x28
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40023800 	.word	0x40023800
 8008328:	40020000 	.word	0x40020000

0800832c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08c      	sub	sp, #48	; 0x30
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800833c:	2200      	movs	r2, #0
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	2036      	movs	r0, #54	; 0x36
 8008342:	f001 fbc5 	bl	8009ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008346:	2036      	movs	r0, #54	; 0x36
 8008348:	f001 fbde 	bl	8009b08 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800834c:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <HAL_InitTick+0xa0>)
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	4a1e      	ldr	r2, [pc, #120]	; (80083cc <HAL_InitTick+0xa0>)
 8008352:	f043 0310 	orr.w	r3, r3, #16
 8008356:	6413      	str	r3, [r2, #64]	; 0x40
 8008358:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <HAL_InitTick+0xa0>)
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008364:	f107 0210 	add.w	r2, r7, #16
 8008368:	f107 0314 	add.w	r3, r7, #20
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f003 ff5a 	bl	800c228 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008374:	f003 ff30 	bl	800c1d8 <HAL_RCC_GetPCLK1Freq>
 8008378:	4603      	mov	r3, r0
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	4a13      	ldr	r2, [pc, #76]	; (80083d0 <HAL_InitTick+0xa4>)
 8008382:	fba2 2303 	umull	r2, r3, r2, r3
 8008386:	0c9b      	lsrs	r3, r3, #18
 8008388:	3b01      	subs	r3, #1
 800838a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800838c:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <HAL_InitTick+0xa8>)
 800838e:	4a12      	ldr	r2, [pc, #72]	; (80083d8 <HAL_InitTick+0xac>)
 8008390:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008392:	4b10      	ldr	r3, [pc, #64]	; (80083d4 <HAL_InitTick+0xa8>)
 8008394:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008398:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800839a:	4a0e      	ldr	r2, [pc, #56]	; (80083d4 <HAL_InitTick+0xa8>)
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80083a0:	4b0c      	ldr	r3, [pc, #48]	; (80083d4 <HAL_InitTick+0xa8>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083a6:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <HAL_InitTick+0xa8>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80083ac:	4809      	ldr	r0, [pc, #36]	; (80083d4 <HAL_InitTick+0xa8>)
 80083ae:	f005 f86f 	bl	800d490 <HAL_TIM_Base_Init>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80083b8:	4806      	ldr	r0, [pc, #24]	; (80083d4 <HAL_InitTick+0xa8>)
 80083ba:	f005 f895 	bl	800d4e8 <HAL_TIM_Base_Start_IT>
 80083be:	4603      	mov	r3, r0
 80083c0:	e000      	b.n	80083c4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3730      	adds	r7, #48	; 0x30
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40023800 	.word	0x40023800
 80083d0:	431bde83 	.word	0x431bde83
 80083d4:	20030ad0 	.word	0x20030ad0
 80083d8:	40001000 	.word	0x40001000

080083dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80083e0:	e7fe      	b.n	80083e0 <NMI_Handler+0x4>

080083e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083e2:	b480      	push	{r7}
 80083e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083e6:	e7fe      	b.n	80083e6 <HardFault_Handler+0x4>

080083e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083ec:	e7fe      	b.n	80083ec <MemManage_Handler+0x4>

080083ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083ee:	b480      	push	{r7}
 80083f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083f2:	e7fe      	b.n	80083f2 <BusFault_Handler+0x4>

080083f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083f8:	e7fe      	b.n	80083f8 <UsageFault_Handler+0x4>

080083fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083fa:	b480      	push	{r7}
 80083fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083fe:	bf00      	nop
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 800840e:	f000 fccd 	bl	8008dac <HAL_GetTick>
 8008412:	4603      	mov	r3, r0
 8008414:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 8008416:	4b10      	ldr	r3, [pc, #64]	; (8008458 <EXTI4_IRQHandler+0x50>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008420:	2010      	movs	r0, #16
 8008422:	f002 f97d 	bl	800a720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>50)){
 8008426:	4b0d      	ldr	r3, [pc, #52]	; (800845c <EXTI4_IRQHandler+0x54>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <EXTI4_IRQHandler+0x58>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	429a      	cmp	r2, r3
 8008432:	dd07      	ble.n	8008444 <EXTI4_IRQHandler+0x3c>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b32      	cmp	r3, #50	; 0x32
 8008438:	dd04      	ble.n	8008444 <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 800843a:	4b09      	ldr	r3, [pc, #36]	; (8008460 <EXTI4_IRQHandler+0x58>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	b2da      	uxtb	r2, r3
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <EXTI4_IRQHandler+0x54>)
 8008442:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 8008444:	f000 fcb2 	bl	8008dac <HAL_GetTick>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <EXTI4_IRQHandler+0x50>)
 800844e:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	2000335c 	.word	0x2000335c
 800845c:	200000dc 	.word	0x200000dc
 8008460:	20000198 	.word	0x20000198

08008464 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008468:	4802      	ldr	r0, [pc, #8]	; (8008474 <DMA1_Stream0_IRQHandler+0x10>)
 800846a:	f001 fcfb 	bl	8009e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20030a14 	.word	0x20030a14

08008478 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800847c:	4805      	ldr	r0, [pc, #20]	; (8008494 <ADC_IRQHandler+0x1c>)
 800847e:	f000 fd07 	bl	8008e90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008482:	4805      	ldr	r0, [pc, #20]	; (8008498 <ADC_IRQHandler+0x20>)
 8008484:	f000 fd04 	bl	8008e90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008488:	4804      	ldr	r0, [pc, #16]	; (800849c <ADC_IRQHandler+0x24>)
 800848a:	f000 fd01 	bl	8008e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800848e:	bf00      	nop
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	2002b9d8 	.word	0x2002b9d8
 8008498:	20028cbc 	.word	0x20028cbc
 800849c:	2002ba24 	.word	0x2002ba24

080084a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 80084a6:	f000 fc81 	bl	8008dac <HAL_GetTick>
 80084aa:	4603      	mov	r3, r0
 80084ac:	60fb      	str	r3, [r7, #12]
	int currentDiff = currentTicks-timestamp;
 80084ae:	4b35      	ldr	r3, [pc, #212]	; (8008584 <EXTI9_5_IRQHandler+0xe4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	60bb      	str	r3, [r7, #8]
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 80084b8:	2120      	movs	r1, #32
 80084ba:	4833      	ldr	r0, [pc, #204]	; (8008588 <EXTI9_5_IRQHandler+0xe8>)
 80084bc:	f002 f8e4 	bl	800a688 <HAL_GPIO_ReadPin>
 80084c0:	4603      	mov	r3, r0
 80084c2:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 80084c4:	2140      	movs	r1, #64	; 0x40
 80084c6:	4830      	ldr	r0, [pc, #192]	; (8008588 <EXTI9_5_IRQHandler+0xe8>)
 80084c8:	f002 f8de 	bl	800a688 <HAL_GPIO_ReadPin>
 80084cc:	4603      	mov	r3, r0
 80084ce:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 80084d0:	2180      	movs	r1, #128	; 0x80
 80084d2:	482d      	ldr	r0, [pc, #180]	; (8008588 <EXTI9_5_IRQHandler+0xe8>)
 80084d4:	f002 f8d8 	bl	800a688 <HAL_GPIO_ReadPin>
 80084d8:	4603      	mov	r3, r0
 80084da:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>50)){ //up button
 80084dc:	4b2b      	ldr	r3, [pc, #172]	; (800858c <EXTI9_5_IRQHandler+0xec>)
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00f      	beq.n	8008508 <EXTI9_5_IRQHandler+0x68>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b32      	cmp	r3, #50	; 0x32
 80084ec:	dd0c      	ble.n	8008508 <EXTI9_5_IRQHandler+0x68>
		if(inputButtonSet > buttonPriority.up){
 80084ee:	4b28      	ldr	r3, [pc, #160]	; (8008590 <EXTI9_5_IRQHandler+0xf0>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	4b27      	ldr	r3, [pc, #156]	; (8008594 <EXTI9_5_IRQHandler+0xf4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	dd30      	ble.n	800855e <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.up;
 80084fc:	4b25      	ldr	r3, [pc, #148]	; (8008594 <EXTI9_5_IRQHandler+0xf4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	b2da      	uxtb	r2, r3
 8008502:	4b23      	ldr	r3, [pc, #140]	; (8008590 <EXTI9_5_IRQHandler+0xf0>)
 8008504:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 8008506:	e02a      	b.n	800855e <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>50)){ //sel button
 8008508:	4b20      	ldr	r3, [pc, #128]	; (800858c <EXTI9_5_IRQHandler+0xec>)
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00f      	beq.n	8008534 <EXTI9_5_IRQHandler+0x94>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b32      	cmp	r3, #50	; 0x32
 8008518:	dd0c      	ble.n	8008534 <EXTI9_5_IRQHandler+0x94>
		if(inputButtonSet > buttonPriority.sel){
 800851a:	4b1d      	ldr	r3, [pc, #116]	; (8008590 <EXTI9_5_IRQHandler+0xf0>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <EXTI9_5_IRQHandler+0xf4>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	429a      	cmp	r2, r3
 8008526:	dd1a      	ble.n	800855e <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.sel;
 8008528:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <EXTI9_5_IRQHandler+0xf4>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	b2da      	uxtb	r2, r3
 800852e:	4b18      	ldr	r3, [pc, #96]	; (8008590 <EXTI9_5_IRQHandler+0xf0>)
 8008530:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 8008532:	e014      	b.n	800855e <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>50)){ //down button
 8008534:	4b15      	ldr	r3, [pc, #84]	; (800858c <EXTI9_5_IRQHandler+0xec>)
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00e      	beq.n	800855e <EXTI9_5_IRQHandler+0xbe>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b32      	cmp	r3, #50	; 0x32
 8008544:	dd0b      	ble.n	800855e <EXTI9_5_IRQHandler+0xbe>
		if(inputButtonSet > buttonPriority.down){
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <EXTI9_5_IRQHandler+0xf0>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	4b11      	ldr	r3, [pc, #68]	; (8008594 <EXTI9_5_IRQHandler+0xf4>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	dd04      	ble.n	800855e <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.down;
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <EXTI9_5_IRQHandler+0xf4>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	b2da      	uxtb	r2, r3
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <EXTI9_5_IRQHandler+0xf0>)
 800855c:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800855e:	2020      	movs	r0, #32
 8008560:	f002 f8de 	bl	800a720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8008564:	2040      	movs	r0, #64	; 0x40
 8008566:	f002 f8db 	bl	800a720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800856a:	2080      	movs	r0, #128	; 0x80
 800856c:	f002 f8d8 	bl	800a720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 8008570:	f000 fc1c 	bl	8008dac <HAL_GetTick>
 8008574:	4603      	mov	r3, r0
 8008576:	461a      	mov	r2, r3
 8008578:	4b02      	ldr	r3, [pc, #8]	; (8008584 <EXTI9_5_IRQHandler+0xe4>)
 800857a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	2000335c 	.word	0x2000335c
 8008588:	40022800 	.word	0x40022800
 800858c:	40013c00 	.word	0x40013c00
 8008590:	200000dc 	.word	0x200000dc
 8008594:	20000198 	.word	0x20000198

08008598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800859c:	4802      	ldr	r0, [pc, #8]	; (80085a8 <TIM6_DAC_IRQHandler+0x10>)
 800859e:	f005 f802 	bl	800d5a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80085a2:	bf00      	nop
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20030ad0 	.word	0x20030ad0

080085ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80085b0:	4805      	ldr	r0, [pc, #20]	; (80085c8 <DMA2_Stream0_IRQHandler+0x1c>)
 80085b2:	f001 fc57 	bl	8009e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 80085b6:	4805      	ldr	r0, [pc, #20]	; (80085cc <DMA2_Stream0_IRQHandler+0x20>)
 80085b8:	f000 fe9a 	bl	80092f0 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 80085bc:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <DMA2_Stream0_IRQHandler+0x24>)
 80085be:	2201      	movs	r2, #1
 80085c0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80085c2:	bf00      	nop
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	2002ba6c 	.word	0x2002ba6c
 80085cc:	2002b9d8 	.word	0x2002b9d8
 80085d0:	20029200 	.word	0x20029200

080085d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80085d8:	4805      	ldr	r0, [pc, #20]	; (80085f0 <DMA2_Stream1_IRQHandler+0x1c>)
 80085da:	f001 fc43 	bl	8009e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 80085de:	4805      	ldr	r0, [pc, #20]	; (80085f4 <DMA2_Stream1_IRQHandler+0x20>)
 80085e0:	f000 fe86 	bl	80092f0 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 80085e4:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <DMA2_Stream1_IRQHandler+0x24>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80085ea:	bf00      	nop
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	200291a0 	.word	0x200291a0
 80085f4:	2002ba24 	.word	0x2002ba24
 80085f8:	20029200 	.word	0x20029200

080085fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008600:	4805      	ldr	r0, [pc, #20]	; (8008618 <DMA2_Stream2_IRQHandler+0x1c>)
 8008602:	f001 fc2f 	bl	8009e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8008606:	4805      	ldr	r0, [pc, #20]	; (800861c <DMA2_Stream2_IRQHandler+0x20>)
 8008608:	f000 fe72 	bl	80092f0 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 800860c:	4b04      	ldr	r3, [pc, #16]	; (8008620 <DMA2_Stream2_IRQHandler+0x24>)
 800860e:	2201      	movs	r2, #1
 8008610:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008612:	bf00      	nop
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	200309b4 	.word	0x200309b4
 800861c:	20028cbc 	.word	0x20028cbc
 8008620:	20029200 	.word	0x20029200

08008624 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8008628:	4802      	ldr	r0, [pc, #8]	; (8008634 <SPI4_IRQHandler+0x10>)
 800862a:	f004 fcf5 	bl	800d018 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800862e:	bf00      	nop
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20028a8c 	.word	0x20028a8c

08008638 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e00a      	b.n	8008660 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800864a:	f3af 8000 	nop.w
 800864e:	4601      	mov	r1, r0
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	60ba      	str	r2, [r7, #8]
 8008656:	b2ca      	uxtb	r2, r1
 8008658:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	3301      	adds	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	dbf0      	blt.n	800864a <_read+0x12>
	}

return len;
 8008668:	687b      	ldr	r3, [r7, #4]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b086      	sub	sp, #24
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	e009      	b.n	8008698 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	60ba      	str	r2, [r7, #8]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f7fa fccf 	bl	8003030 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	3301      	adds	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	429a      	cmp	r2, r3
 800869e:	dbf1      	blt.n	8008684 <_write+0x12>
	}
	return len;
 80086a0:	687b      	ldr	r3, [r7, #4]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <_close>:

int _close(int file)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
	return -1;
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80086d2:	605a      	str	r2, [r3, #4]
	return 0;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <_isatty>:

int _isatty(int file)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
	return 1;
 80086ea:	2301      	movs	r3, #1
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
	return 0;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800871c:	4a14      	ldr	r2, [pc, #80]	; (8008770 <_sbrk+0x5c>)
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <_sbrk+0x60>)
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008728:	4b13      	ldr	r3, [pc, #76]	; (8008778 <_sbrk+0x64>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008730:	4b11      	ldr	r3, [pc, #68]	; (8008778 <_sbrk+0x64>)
 8008732:	4a12      	ldr	r2, [pc, #72]	; (800877c <_sbrk+0x68>)
 8008734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <_sbrk+0x64>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	429a      	cmp	r2, r3
 8008742:	d207      	bcs.n	8008754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008744:	f009 fd44 	bl	80121d0 <__errno>
 8008748:	4602      	mov	r2, r0
 800874a:	230c      	movs	r3, #12
 800874c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800874e:	f04f 33ff 	mov.w	r3, #4294967295
 8008752:	e009      	b.n	8008768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <_sbrk+0x64>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <_sbrk+0x64>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4413      	add	r3, r2
 8008762:	4a05      	ldr	r2, [pc, #20]	; (8008778 <_sbrk+0x64>)
 8008764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008766:	68fb      	ldr	r3, [r7, #12]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	20080000 	.word	0x20080000
 8008774:	00000400 	.word	0x00000400
 8008778:	20003360 	.word	0x20003360
 800877c:	20030b58 	.word	0x20030b58

08008780 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008784:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <SystemInit+0x28>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	4a07      	ldr	r2, [pc, #28]	; (80087a8 <SystemInit+0x28>)
 800878c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <SystemInit+0x28>)
 8008796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800879a:	609a      	str	r2, [r3, #8]
#endif
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	e000ed00 	.word	0xe000ed00

080087ac <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 80087b0:	220c      	movs	r2, #12
 80087b2:	2100      	movs	r1, #0
 80087b4:	4814      	ldr	r0, [pc, #80]	; (8008808 <zionEEPROMPresence+0x5c>)
 80087b6:	f009 fd40 	bl	801223a <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 80087ba:	2364      	movs	r3, #100	; 0x64
 80087bc:	2202      	movs	r2, #2
 80087be:	21a6      	movs	r1, #166	; 0xa6
 80087c0:	4812      	ldr	r0, [pc, #72]	; (800880c <zionEEPROMPresence+0x60>)
 80087c2:	f002 fb65 	bl	800ae90 <HAL_I2C_IsDeviceReady>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 80087cc:	4b0e      	ldr	r3, [pc, #56]	; (8008808 <zionEEPROMPresence+0x5c>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 80087d2:	2364      	movs	r3, #100	; 0x64
 80087d4:	2202      	movs	r2, #2
 80087d6:	21a8      	movs	r1, #168	; 0xa8
 80087d8:	480c      	ldr	r0, [pc, #48]	; (800880c <zionEEPROMPresence+0x60>)
 80087da:	f002 fb59 	bl	800ae90 <HAL_I2C_IsDeviceReady>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 80087e4:	4b08      	ldr	r3, [pc, #32]	; (8008808 <zionEEPROMPresence+0x5c>)
 80087e6:	2201      	movs	r2, #1
 80087e8:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 80087ea:	2364      	movs	r3, #100	; 0x64
 80087ec:	2202      	movs	r2, #2
 80087ee:	21aa      	movs	r1, #170	; 0xaa
 80087f0:	4806      	ldr	r0, [pc, #24]	; (800880c <zionEEPROMPresence+0x60>)
 80087f2:	f002 fb4d 	bl	800ae90 <HAL_I2C_IsDeviceReady>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 80087fc:	4b02      	ldr	r3, [pc, #8]	; (8008808 <zionEEPROMPresence+0x5c>)
 80087fe:	2201      	movs	r2, #1
 8008800:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 8008802:	4b01      	ldr	r3, [pc, #4]	; (8008808 <zionEEPROMPresence+0x5c>)
}
 8008804:	4618      	mov	r0, r3
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20003364 	.word	0x20003364
 800880c:	20028b3c 	.word	0x20028b3c

08008810 <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af04      	add	r7, sp, #16
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	607b      	str	r3, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	72fb      	strb	r3, [r7, #11]
 800881e:	4613      	mov	r3, r2
 8008820:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 8008822:	7afb      	ldrb	r3, [r7, #11]
 8008824:	b299      	uxth	r1, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	b29b      	uxth	r3, r3
 800882a:	8b3a      	ldrh	r2, [r7, #24]
 800882c:	8938      	ldrh	r0, [r7, #8]
 800882e:	9202      	str	r2, [sp, #8]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2302      	movs	r3, #2
 8008838:	4602      	mov	r2, r0
 800883a:	4803      	ldr	r0, [pc, #12]	; (8008848 <readDataFromEEPROM+0x38>)
 800883c:	f002 fa0e 	bl	800ac5c <HAL_I2C_Mem_Read>
}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20028b3c 	.word	0x20028b3c

0800884c <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 800884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008850:	b0a6      	sub	sp, #152	; 0x98
 8008852:	af02      	add	r7, sp, #8
 8008854:	4603      	mov	r3, r0
 8008856:	71fb      	strb	r3, [r7, #7]
 8008858:	466b      	mov	r3, sp
 800885a:	4698      	mov	r8, r3
	int foundTheEnd = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 8008862:	2300      	movs	r3, #0
 8008864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 8008868:	2364      	movs	r3, #100	; 0x64
 800886a:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 800886c:	2306      	movs	r3, #6
 800886e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 8008872:	2300      	movs	r3, #0
 8008874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 8008878:	2300      	movs	r3, #0
 800887a:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 800887c:	2300      	movs	r3, #0
 800887e:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 8008884:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8008886:	1e6b      	subs	r3, r5, #1
 8008888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800888a:	462b      	mov	r3, r5
 800888c:	4619      	mov	r1, r3
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	f04f 0400 	mov.w	r4, #0
 800889a:	00d4      	lsls	r4, r2, #3
 800889c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80088a0:	00cb      	lsls	r3, r1, #3
 80088a2:	462b      	mov	r3, r5
 80088a4:	4619      	mov	r1, r3
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	f04f 0400 	mov.w	r4, #0
 80088b2:	00d4      	lsls	r4, r2, #3
 80088b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80088b8:	00cb      	lsls	r3, r1, #3
 80088ba:	462b      	mov	r3, r5
 80088bc:	3307      	adds	r3, #7
 80088be:	08db      	lsrs	r3, r3, #3
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	ebad 0d03 	sub.w	sp, sp, r3
 80088c6:	ab02      	add	r3, sp, #8
 80088c8:	3300      	adds	r3, #0
 80088ca:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 80088cc:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 80088ce:	1e73      	subs	r3, r6, #1
 80088d0:	667b      	str	r3, [r7, #100]	; 0x64
 80088d2:	4633      	mov	r3, r6
 80088d4:	4619      	mov	r1, r3
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	f04f 0300 	mov.w	r3, #0
 80088de:	f04f 0400 	mov.w	r4, #0
 80088e2:	00d4      	lsls	r4, r2, #3
 80088e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80088e8:	00cb      	lsls	r3, r1, #3
 80088ea:	4633      	mov	r3, r6
 80088ec:	4619      	mov	r1, r3
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	f04f 0300 	mov.w	r3, #0
 80088f6:	f04f 0400 	mov.w	r4, #0
 80088fa:	00d4      	lsls	r4, r2, #3
 80088fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008900:	00cb      	lsls	r3, r1, #3
 8008902:	4633      	mov	r3, r6
 8008904:	3307      	adds	r3, #7
 8008906:	08db      	lsrs	r3, r3, #3
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	ebad 0d03 	sub.w	sp, sp, r3
 800890e:	ab02      	add	r3, sp, #8
 8008910:	3300      	adds	r3, #0
 8008912:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	2250      	movs	r2, #80	; 0x50
 800891a:	2100      	movs	r1, #0
 800891c:	4618      	mov	r0, r3
 800891e:	f009 fc8c 	bl	801223a <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 8008922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008924:	4632      	mov	r2, r6
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f009 fc86 	bl	801223a <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 800892e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008930:	462a      	mov	r2, r5
 8008932:	2100      	movs	r1, #0
 8008934:	4618      	mov	r0, r3
 8008936:	f009 fc80 	bl	801223a <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 800893a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800893c:	79f9      	ldrb	r1, [r7, #7]
 800893e:	2364      	movs	r3, #100	; 0x64
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	462b      	mov	r3, r5
 8008944:	2200      	movs	r2, #0
 8008946:	f7ff ff63 	bl	8008810 <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 800894a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2bff      	cmp	r3, #255	; 0xff
 8008950:	f040 811b 	bne.w	8008b8a <parseZionEEPROM+0x33e>
		foundTheEnd=1;
 8008954:	2301      	movs	r3, #1
 8008956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 800895a:	f06f 0301 	mvn.w	r3, #1
 800895e:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 8008960:	e113      	b.n	8008b8a <parseZionEEPROM+0x33e>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 8008962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008964:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008966:	fb93 f2f2 	sdiv	r2, r3, r2
 800896a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800896c:	fb01 f202 	mul.w	r2, r1, r2
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf0c      	ite	eq
 8008976:	2301      	moveq	r3, #1
 8008978:	2300      	movne	r3, #0
 800897a:	b2da      	uxtb	r2, r3
 800897c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800897e:	2b00      	cmp	r3, #0
 8008980:	bfcc      	ite	gt
 8008982:	2301      	movgt	r3, #1
 8008984:	2300      	movle	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	4013      	ands	r3, r2
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d025      	beq.n	80089dc <parseZionEEPROM+0x190>
			for(x=0;x<size;x++){
 8008990:	2300      	movs	r3, #0
 8008992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008996:	e00f      	b.n	80089b8 <parseZionEEPROM+0x16c>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 8008998:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800899a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800899e:	4413      	add	r3, r2
 80089a0:	7819      	ldrb	r1, [r3, #0]
 80089a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089a8:	4413      	add	r3, r2
 80089aa:	460a      	mov	r2, r1
 80089ac:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 80089ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089b2:	3301      	adds	r3, #1
 80089b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089b8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80089bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089be:	429a      	cmp	r2, r3
 80089c0:	dbea      	blt.n	8008998 <parseZionEEPROM+0x14c>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 80089c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80089c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	79f9      	ldrb	r1, [r7, #7]
 80089ca:	2364      	movs	r3, #100	; 0x64
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	462b      	mov	r3, r5
 80089d0:	f7ff ff1e 	bl	8008810 <readDataFromEEPROM>
			indexSubtractor+=size;
 80089d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80089d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089d8:	4413      	add	r3, r2
 80089da:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 80089dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2bff      	cmp	r3, #255	; 0xff
 80089e2:	d116      	bne.n	8008a12 <parseZionEEPROM+0x1c6>
 80089e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	2bff      	cmp	r3, #255	; 0xff
 80089ea:	d112      	bne.n	8008a12 <parseZionEEPROM+0x1c6>
 80089ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ee:	789b      	ldrb	r3, [r3, #2]
 80089f0:	2bff      	cmp	r3, #255	; 0xff
 80089f2:	d10e      	bne.n	8008a12 <parseZionEEPROM+0x1c6>
 80089f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089f6:	78db      	ldrb	r3, [r3, #3]
 80089f8:	2bff      	cmp	r3, #255	; 0xff
 80089fa:	d10a      	bne.n	8008a12 <parseZionEEPROM+0x1c6>
 80089fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089fe:	795b      	ldrb	r3, [r3, #5]
 8008a00:	2bff      	cmp	r3, #255	; 0xff
 8008a02:	d106      	bne.n	8008a12 <parseZionEEPROM+0x1c6>
			previousByteOfHeader[0]=-1;
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
 8008a08:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a10:	e0b8      	b.n	8008b84 <parseZionEEPROM+0x338>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 8008a12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a1a:	5cd3      	ldrb	r3, [r2, r3]
 8008a1c:	2b5a      	cmp	r3, #90	; 0x5a
 8008a1e:	d023      	beq.n	8008a68 <parseZionEEPROM+0x21c>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a24:	fb93 f2f2 	sdiv	r2, r3, r2
 8008a28:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008a2a:	fb01 f202 	mul.w	r2, r1, r2
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a32:	5cd3      	ldrb	r3, [r2, r3]
 8008a34:	2b5a      	cmp	r3, #90	; 0x5a
 8008a36:	d104      	bne.n	8008a42 <parseZionEEPROM+0x1f6>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	3314      	adds	r3, #20
 8008a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	db12      	blt.n	8008a68 <parseZionEEPROM+0x21c>
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a46:	fb93 f2f2 	sdiv	r2, r3, r2
 8008a4a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008a4c:	fb01 f202 	mul.w	r2, r1, r2
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a54:	5cd3      	ldrb	r3, [r2, r3]
 8008a56:	2b5a      	cmp	r3, #90	; 0x5a
 8008a58:	f040 8094 	bne.w	8008b84 <parseZionEEPROM+0x338>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a62:	429a      	cmp	r2, r3
 8008a64:	f280 808e 	bge.w	8008b84 <parseZionEEPROM+0x338>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bf0c      	ite	eq
 8008a74:	2301      	moveq	r3, #1
 8008a76:	2300      	movne	r3, #0
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a7e:	1acb      	subs	r3, r1, r3
 8008a80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a82:	5ccb      	ldrb	r3, [r1, r3]
 8008a84:	2b5a      	cmp	r3, #90	; 0x5a
 8008a86:	bf0c      	ite	eq
 8008a88:	2301      	moveq	r3, #1
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	4013      	ands	r3, r2
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d008      	beq.n	8008aa8 <parseZionEEPROM+0x25c>
				previousByteOfHeader[0] = index;
 8008a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a98:	60bb      	str	r3, [r7, #8]
				if(index==0){
 8008a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d171      	bne.n	8008b84 <parseZionEEPROM+0x338>
					zeroWas5A=1;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aa6:	e06d      	b.n	8008b84 <parseZionEEPROM+0x338>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 8008aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d015      	beq.n	8008ada <parseZionEEPROM+0x28e>
				previousByteOfHeader[counter]=index;
 8008aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008ab8:	4413      	add	r3, r2
 8008aba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008abc:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 8008ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac4:	2b13      	cmp	r3, #19
 8008ac6:	d102      	bne.n	8008ace <parseZionEEPROM+0x282>
					foundTheEnd=1;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 8008ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ad8:	e054      	b.n	8008b84 <parseZionEEPROM+0x338>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 8008ada:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ae2:	5cd3      	ldrb	r3, [r2, r3]
 8008ae4:	2b45      	cmp	r3, #69	; 0x45
 8008ae6:	d102      	bne.n	8008aee <parseZionEEPROM+0x2a2>
					previousByteOfHeader[1] = index;
 8008ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e04a      	b.n	8008b84 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 8008aee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008af6:	5cd3      	ldrb	r3, [r2, r3]
 8008af8:	2b46      	cmp	r3, #70	; 0x46
 8008afa:	d107      	bne.n	8008b0c <parseZionEEPROM+0x2c0>
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b00:	3b01      	subs	r3, #1
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d102      	bne.n	8008b0c <parseZionEEPROM+0x2c0>
					previousByteOfHeader[2] = index;
 8008b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	e03b      	b.n	8008b84 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8008b0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b14:	5cd3      	ldrb	r3, [r2, r3]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d107      	bne.n	8008b2a <parseZionEEPROM+0x2de>
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d102      	bne.n	8008b2a <parseZionEEPROM+0x2de>
					previousByteOfHeader[3] = index;
 8008b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	e02c      	b.n	8008b84 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8008b2a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b32:	5cd3      	ldrb	r3, [r2, r3]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d107      	bne.n	8008b48 <parseZionEEPROM+0x2fc>
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d102      	bne.n	8008b48 <parseZionEEPROM+0x2fc>
					previousByteOfHeader[4] = index;
 8008b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	e01d      	b.n	8008b84 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 8008b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b50:	5cd3      	ldrb	r3, [r2, r3]
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d109      	bne.n	8008b6a <parseZionEEPROM+0x31e>
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d104      	bne.n	8008b6a <parseZionEEPROM+0x31e>
					previousByteOfHeader[5] = index;
 8008b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b62:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 8008b64:	2301      	movs	r3, #1
 8008b66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b68:	e00c      	b.n	8008b84 <parseZionEEPROM+0x338>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 8008b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d109      	bne.n	8008b84 <parseZionEEPROM+0x338>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8008b70:	f107 0308 	add.w	r3, r7, #8
 8008b74:	2250      	movs	r2, #80	; 0x50
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f009 fb5e 	bl	801223a <memset>
					zeroWas5A=0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 8008b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b86:	3301      	adds	r3, #1
 8008b88:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 8008b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f43f aee7 	beq.w	8008962 <parseZionEEPROM+0x116>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f2c0 8085 	blt.w	8008ca6 <parseZionEEPROM+0x45a>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 8008b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ba0:	fb93 f2f2 	sdiv	r2, r3, r2
 8008ba4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008ba6:	fb01 f202 	mul.w	r2, r1, r2
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 8008bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb0:	3b05      	subs	r3, #5
 8008bb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	dd50      	ble.n	8008c5a <parseZionEEPROM+0x40e>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 8008bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bba:	1e5a      	subs	r2, r3, #1
 8008bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008bc8:	e01c      	b.n	8008c04 <parseZionEEPROM+0x3b8>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 8008bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bce:	3310      	adds	r3, #16
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8008bdc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008bde:	fb93 f2f2 	sdiv	r2, r3, r2
 8008be2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008be4:	fb01 f202 	mul.w	r2, r1, r2
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bec:	5cd3      	ldrb	r3, [r2, r3]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4a48      	ldr	r2, [pc, #288]	; (8008d14 <parseZionEEPROM+0x4c8>)
 8008bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 8008bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bfe:	3301      	adds	r3, #1
 8008c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c04:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008c08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	dbdd      	blt.n	8008bca <parseZionEEPROM+0x37e>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 8008c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c14:	e01c      	b.n	8008c50 <parseZionEEPROM+0x404>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8008c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c1a:	3310      	adds	r3, #16
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008c22:	4413      	add	r3, r2
 8008c24:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8008c28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c2a:	fb93 f2f2 	sdiv	r2, r3, r2
 8008c2e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008c30:	fb01 f202 	mul.w	r2, r1, r2
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c38:	5cd3      	ldrb	r3, [r2, r3]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4a35      	ldr	r2, [pc, #212]	; (8008d14 <parseZionEEPROM+0x4c8>)
 8008c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 8008c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	ddde      	ble.n	8008c16 <parseZionEEPROM+0x3ca>
 8008c58:	e052      	b.n	8008d00 <parseZionEEPROM+0x4b4>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c60:	e01c      	b.n	8008c9c <parseZionEEPROM+0x450>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8008c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c66:	3310      	adds	r3, #16
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008c6e:	4413      	add	r3, r2
 8008c70:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8008c74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c76:	fb93 f2f2 	sdiv	r2, r3, r2
 8008c7a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008c7c:	fb01 f202 	mul.w	r2, r1, r2
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c84:	5cd3      	ldrb	r3, [r2, r3]
 8008c86:	4619      	mov	r1, r3
 8008c88:	4a22      	ldr	r2, [pc, #136]	; (8008d14 <parseZionEEPROM+0x4c8>)
 8008c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8008c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c96:	3301      	adds	r3, #1
 8008c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	ddde      	ble.n	8008c62 <parseZionEEPROM+0x416>
 8008ca4:	e02c      	b.n	8008d00 <parseZionEEPROM+0x4b4>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d114      	bne.n	8008cd8 <parseZionEEPROM+0x48c>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cb4:	e00b      	b.n	8008cce <parseZionEEPROM+0x482>
				deviceHeaderBytes[x] = -2;
 8008cb6:	4a17      	ldr	r2, [pc, #92]	; (8008d14 <parseZionEEPROM+0x4c8>)
 8008cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cbc:	f06f 0101 	mvn.w	r1, #1
 8008cc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8008cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cc8:	3301      	adds	r3, #1
 8008cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	ddef      	ble.n	8008cb6 <parseZionEEPROM+0x46a>
 8008cd6:	e013      	b.n	8008d00 <parseZionEEPROM+0x4b4>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cde:	e00b      	b.n	8008cf8 <parseZionEEPROM+0x4ac>
				deviceHeaderBytes[x] = -1;
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <parseZionEEPROM+0x4c8>)
 8008ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8008cea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8008cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cfc:	2b03      	cmp	r3, #3
 8008cfe:	ddef      	ble.n	8008ce0 <parseZionEEPROM+0x494>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <parseZionEEPROM+0x4c8>)
 8008d04:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <parseZionEEPROM+0x4c8>)
 8008d08:	46c5      	mov	sp, r8
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3790      	adds	r7, #144	; 0x90
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d14:	20003370 	.word	0x20003370

08008d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008d1e:	e003      	b.n	8008d28 <LoopCopyDataInit>

08008d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008d26:	3104      	adds	r1, #4

08008d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008d28:	480b      	ldr	r0, [pc, #44]	; (8008d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008d2a:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008d30:	d3f6      	bcc.n	8008d20 <CopyDataInit>
  ldr  r2, =_sbss
 8008d32:	4a0b      	ldr	r2, [pc, #44]	; (8008d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008d34:	e002      	b.n	8008d3c <LoopFillZerobss>

08008d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008d38:	f842 3b04 	str.w	r3, [r2], #4

08008d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008d40:	d3f9      	bcc.n	8008d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008d42:	f7ff fd1d 	bl	8008780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d46:	f009 fa49 	bl	80121dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d4a:	f7f8 ffd7 	bl	8001cfc <main>
  bx  lr    
 8008d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008d50:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008d54:	08017468 	.word	0x08017468
  ldr  r0, =_sdata
 8008d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008d5c:	20000388 	.word	0x20000388
  ldr  r2, =_sbss
 8008d60:	20000388 	.word	0x20000388
  ldr  r3, = _ebss
 8008d64:	20030b58 	.word	0x20030b58

08008d68 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d68:	e7fe      	b.n	8008d68 <CAN1_RX0_IRQHandler>

08008d6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d6e:	2003      	movs	r0, #3
 8008d70:	f000 fea3 	bl	8009aba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d74:	2000      	movs	r0, #0
 8008d76:	f7ff fad9 	bl	800832c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008d7a:	f7fe fd39 	bl	80077f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <HAL_IncTick+0x20>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <HAL_IncTick+0x24>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4413      	add	r3, r2
 8008d94:	4a04      	ldr	r2, [pc, #16]	; (8008da8 <HAL_IncTick+0x24>)
 8008d96:	6013      	str	r3, [r2, #0]
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	200001b0 	.word	0x200001b0
 8008da8:	20030b10 	.word	0x20030b10

08008dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
  return uwTick;
 8008db0:	4b03      	ldr	r3, [pc, #12]	; (8008dc0 <HAL_GetTick+0x14>)
 8008db2:	681b      	ldr	r3, [r3, #0]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	20030b10 	.word	0x20030b10

08008dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008dcc:	f7ff ffee 	bl	8008dac <HAL_GetTick>
 8008dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ddc:	d005      	beq.n	8008dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <HAL_Delay+0x40>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008dea:	bf00      	nop
 8008dec:	f7ff ffde 	bl	8008dac <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d8f7      	bhi.n	8008dec <HAL_Delay+0x28>
  {
  }
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	200001b0 	.word	0x200001b0

08008e08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e031      	b.n	8008e82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d109      	bne.n	8008e3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fe fd0a 	bl	8007840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	f003 0310 	and.w	r3, r3, #16
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d116      	bne.n	8008e74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e4a:	4b10      	ldr	r3, [pc, #64]	; (8008e8c <HAL_ADC_Init+0x84>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	f043 0202 	orr.w	r2, r3, #2
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fbfc 	bl	8009654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	f023 0303 	bic.w	r3, r3, #3
 8008e6a:	f043 0201 	orr.w	r2, r3, #1
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	641a      	str	r2, [r3, #64]	; 0x40
 8008e72:	e001      	b.n	8008e78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	ffffeefd 	.word	0xffffeefd

08008e90 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	bf0c      	ite	eq
 8008eae:	2301      	moveq	r3, #1
 8008eb0:	2300      	movne	r3, #0
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2301      	moveq	r3, #1
 8008ec6:	2300      	movne	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d049      	beq.n	8008f66 <HAL_ADC_IRQHandler+0xd6>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d046      	beq.n	8008f66 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d105      	bne.n	8008ef0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d12b      	bne.n	8008f56 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d127      	bne.n	8008f56 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d119      	bne.n	8008f56 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0220 	bic.w	r2, r2, #32
 8008f30:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d105      	bne.n	8008f56 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	f043 0201 	orr.w	r2, r3, #1
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fb f902 	bl	8004160 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f06f 0212 	mvn.w	r2, #18
 8008f64:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	bf0c      	ite	eq
 8008f74:	2301      	moveq	r3, #1
 8008f76:	2300      	movne	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	bf0c      	ite	eq
 8008f8a:	2301      	moveq	r3, #1
 8008f8c:	2300      	movne	r3, #0
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d057      	beq.n	8009048 <HAL_ADC_IRQHandler+0x1b8>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d054      	beq.n	8009048 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d105      	bne.n	8008fb6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d139      	bne.n	8009038 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d006      	beq.n	8008fe0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d12b      	bne.n	8009038 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d124      	bne.n	8009038 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d11d      	bne.n	8009038 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009000:	2b00      	cmp	r3, #0
 8009002:	d119      	bne.n	8009038 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009012:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009018:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009028:	2b00      	cmp	r3, #0
 800902a:	d105      	bne.n	8009038 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009030:	f043 0201 	orr.w	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fc87 	bl	800994c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f06f 020c 	mvn.w	r2, #12
 8009046:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b01      	cmp	r3, #1
 8009054:	bf0c      	ite	eq
 8009056:	2301      	moveq	r3, #1
 8009058:	2300      	movne	r3, #0
 800905a:	b2db      	uxtb	r3, r3
 800905c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009068:	2b40      	cmp	r3, #64	; 0x40
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d017      	beq.n	80090aa <HAL_ADC_IRQHandler+0x21a>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d014      	beq.n	80090aa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b01      	cmp	r3, #1
 800908c:	d10d      	bne.n	80090aa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f97c 	bl	8009398 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0201 	mvn.w	r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0320 	and.w	r3, r3, #32
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	bf0c      	ite	eq
 80090b8:	2301      	moveq	r3, #1
 80090ba:	2300      	movne	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090ce:	bf0c      	ite	eq
 80090d0:	2301      	moveq	r3, #1
 80090d2:	2300      	movne	r3, #0
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d015      	beq.n	800910a <HAL_ADC_IRQHandler+0x27a>
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d012      	beq.n	800910a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e8:	f043 0202 	orr.w	r2, r3, #2
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 0220 	mvn.w	r2, #32
 80090f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f956 	bl	80093ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f06f 0220 	mvn.w	r2, #32
 8009108:	601a      	str	r2, [r3, #0]
  }
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_ADC_Start_DMA+0x1e>
 800912e:	2302      	movs	r3, #2
 8009130:	e0c7      	b.n	80092c2 <HAL_ADC_Start_DMA+0x1ae>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b01      	cmp	r3, #1
 8009146:	d018      	beq.n	800917a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0201 	orr.w	r2, r2, #1
 8009156:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009158:	4b5c      	ldr	r3, [pc, #368]	; (80092cc <HAL_ADC_Start_DMA+0x1b8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a5c      	ldr	r2, [pc, #368]	; (80092d0 <HAL_ADC_Start_DMA+0x1bc>)
 800915e:	fba2 2303 	umull	r2, r3, r2, r3
 8009162:	0c9a      	lsrs	r2, r3, #18
 8009164:	4613      	mov	r3, r2
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	4413      	add	r3, r2
 800916a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800916c:	e002      	b.n	8009174 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	3b01      	subs	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f9      	bne.n	800916e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b01      	cmp	r3, #1
 8009186:	f040 809b 	bne.w	80092c0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800918e:	4b51      	ldr	r3, [pc, #324]	; (80092d4 <HAL_ADC_Start_DMA+0x1c0>)
 8009190:	4013      	ands	r3, r2
 8009192:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d007      	beq.n	80091b8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80091b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c4:	d106      	bne.n	80091d4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ca:	f023 0206 	bic.w	r2, r3, #6
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	645a      	str	r2, [r3, #68]	; 0x44
 80091d2:	e002      	b.n	80091da <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e6:	4a3c      	ldr	r2, [pc, #240]	; (80092d8 <HAL_ADC_Start_DMA+0x1c4>)
 80091e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	4a3b      	ldr	r2, [pc, #236]	; (80092dc <HAL_ADC_Start_DMA+0x1c8>)
 80091f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	4a3a      	ldr	r2, [pc, #232]	; (80092e0 <HAL_ADC_Start_DMA+0x1cc>)
 80091f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009202:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009212:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009222:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	334c      	adds	r3, #76	; 0x4c
 800922e:	4619      	mov	r1, r3
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f000 fd24 	bl	8009c80 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009238:	4b2a      	ldr	r3, [pc, #168]	; (80092e4 <HAL_ADC_Start_DMA+0x1d0>)
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f003 031f 	and.w	r3, r3, #31
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10f      	bne.n	8009264 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d136      	bne.n	80092c0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009260:	609a      	str	r2, [r3, #8]
 8009262:	e02d      	b.n	80092c0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a1f      	ldr	r2, [pc, #124]	; (80092e8 <HAL_ADC_Start_DMA+0x1d4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d10e      	bne.n	800928c <HAL_ADC_Start_DMA+0x178>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d107      	bne.n	800928c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800928a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800928c:	4b15      	ldr	r3, [pc, #84]	; (80092e4 <HAL_ADC_Start_DMA+0x1d0>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b00      	cmp	r3, #0
 8009296:	d113      	bne.n	80092c0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a13      	ldr	r2, [pc, #76]	; (80092ec <HAL_ADC_Start_DMA+0x1d8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d10e      	bne.n	80092c0 <HAL_ADC_Start_DMA+0x1ac>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d107      	bne.n	80092c0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80092be:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	200001a8 	.word	0x200001a8
 80092d0:	431bde83 	.word	0x431bde83
 80092d4:	fffff8fe 	.word	0xfffff8fe
 80092d8:	08009849 	.word	0x08009849
 80092dc:	08009903 	.word	0x08009903
 80092e0:	0800991f 	.word	0x0800991f
 80092e4:	40012300 	.word	0x40012300
 80092e8:	40012000 	.word	0x40012000
 80092ec:	40012200 	.word	0x40012200

080092f0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009302:	2b01      	cmp	r3, #1
 8009304:	d101      	bne.n	800930a <HAL_ADC_Stop_DMA+0x1a>
 8009306:	2302      	movs	r3, #2
 8009308:	e036      	b.n	8009378 <HAL_ADC_Stop_DMA+0x88>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f022 0201 	bic.w	r2, r2, #1
 8009320:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11e      	bne.n	800936e <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800933e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fcfb 	bl	8009d40 <HAL_DMA_Abort>
 800934a:	4603      	mov	r3, r0
 800934c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800935c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009362:	4b07      	ldr	r3, [pc, #28]	; (8009380 <HAL_ADC_Stop_DMA+0x90>)
 8009364:	4013      	ands	r3, r2
 8009366:	f043 0201 	orr.w	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	ffffeefe 	.word	0xffffeefe

08009384 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d101      	bne.n	80093dc <HAL_ADC_ConfigChannel+0x1c>
 80093d8:	2302      	movs	r3, #2
 80093da:	e12a      	b.n	8009632 <HAL_ADC_ConfigChannel+0x272>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	d93a      	bls.n	8009462 <HAL_ADC_ConfigChannel+0xa2>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093f4:	d035      	beq.n	8009462 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68d9      	ldr	r1, [r3, #12]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	b29b      	uxth	r3, r3
 8009402:	461a      	mov	r2, r3
 8009404:	4613      	mov	r3, r2
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	4413      	add	r3, r2
 800940a:	3b1e      	subs	r3, #30
 800940c:	2207      	movs	r2, #7
 800940e:	fa02 f303 	lsl.w	r3, r2, r3
 8009412:	43da      	mvns	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	400a      	ands	r2, r1
 800941a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a87      	ldr	r2, [pc, #540]	; (8009640 <HAL_ADC_ConfigChannel+0x280>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d10a      	bne.n	800943c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68d9      	ldr	r1, [r3, #12]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	061a      	lsls	r2, r3, #24
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	430a      	orrs	r2, r1
 8009438:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800943a:	e035      	b.n	80094a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68d9      	ldr	r1, [r3, #12]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	4618      	mov	r0, r3
 800944e:	4603      	mov	r3, r0
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	4403      	add	r3, r0
 8009454:	3b1e      	subs	r3, #30
 8009456:	409a      	lsls	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009460:	e022      	b.n	80094a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6919      	ldr	r1, [r3, #16]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	461a      	mov	r2, r3
 8009470:	4613      	mov	r3, r2
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	4413      	add	r3, r2
 8009476:	2207      	movs	r2, #7
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	43da      	mvns	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	400a      	ands	r2, r1
 8009484:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6919      	ldr	r1, [r3, #16]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	b29b      	uxth	r3, r3
 8009496:	4618      	mov	r0, r3
 8009498:	4603      	mov	r3, r0
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	4403      	add	r3, r0
 800949e:	409a      	lsls	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	2b06      	cmp	r3, #6
 80094ae:	d824      	bhi.n	80094fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	3b05      	subs	r3, #5
 80094c2:	221f      	movs	r2, #31
 80094c4:	fa02 f303 	lsl.w	r3, r2, r3
 80094c8:	43da      	mvns	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	400a      	ands	r2, r1
 80094d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	4618      	mov	r0, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	3b05      	subs	r3, #5
 80094ec:	fa00 f203 	lsl.w	r2, r0, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	635a      	str	r2, [r3, #52]	; 0x34
 80094f8:	e04c      	b.n	8009594 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2b0c      	cmp	r3, #12
 8009500:	d824      	bhi.n	800954c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	3b23      	subs	r3, #35	; 0x23
 8009514:	221f      	movs	r2, #31
 8009516:	fa02 f303 	lsl.w	r3, r2, r3
 800951a:	43da      	mvns	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	400a      	ands	r2, r1
 8009522:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	b29b      	uxth	r3, r3
 8009530:	4618      	mov	r0, r3
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	3b23      	subs	r3, #35	; 0x23
 800953e:	fa00 f203 	lsl.w	r2, r0, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	631a      	str	r2, [r3, #48]	; 0x30
 800954a:	e023      	b.n	8009594 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	3b41      	subs	r3, #65	; 0x41
 800955e:	221f      	movs	r2, #31
 8009560:	fa02 f303 	lsl.w	r3, r2, r3
 8009564:	43da      	mvns	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	400a      	ands	r2, r1
 800956c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
 800957a:	4618      	mov	r0, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	3b41      	subs	r3, #65	; 0x41
 8009588:	fa00 f203 	lsl.w	r2, r0, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a2a      	ldr	r2, [pc, #168]	; (8009644 <HAL_ADC_ConfigChannel+0x284>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d10a      	bne.n	80095b4 <HAL_ADC_ConfigChannel+0x1f4>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095a6:	d105      	bne.n	80095b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80095a8:	4b27      	ldr	r3, [pc, #156]	; (8009648 <HAL_ADC_ConfigChannel+0x288>)
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	4a26      	ldr	r2, [pc, #152]	; (8009648 <HAL_ADC_ConfigChannel+0x288>)
 80095ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80095b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a22      	ldr	r2, [pc, #136]	; (8009644 <HAL_ADC_ConfigChannel+0x284>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d109      	bne.n	80095d2 <HAL_ADC_ConfigChannel+0x212>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b12      	cmp	r3, #18
 80095c4:	d105      	bne.n	80095d2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80095c6:	4b20      	ldr	r3, [pc, #128]	; (8009648 <HAL_ADC_ConfigChannel+0x288>)
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	4a1f      	ldr	r2, [pc, #124]	; (8009648 <HAL_ADC_ConfigChannel+0x288>)
 80095cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a1b      	ldr	r2, [pc, #108]	; (8009644 <HAL_ADC_ConfigChannel+0x284>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d125      	bne.n	8009628 <HAL_ADC_ConfigChannel+0x268>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a17      	ldr	r2, [pc, #92]	; (8009640 <HAL_ADC_ConfigChannel+0x280>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d003      	beq.n	80095ee <HAL_ADC_ConfigChannel+0x22e>
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b11      	cmp	r3, #17
 80095ec:	d11c      	bne.n	8009628 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80095ee:	4b16      	ldr	r3, [pc, #88]	; (8009648 <HAL_ADC_ConfigChannel+0x288>)
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	4a15      	ldr	r2, [pc, #84]	; (8009648 <HAL_ADC_ConfigChannel+0x288>)
 80095f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a10      	ldr	r2, [pc, #64]	; (8009640 <HAL_ADC_ConfigChannel+0x280>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d111      	bne.n	8009628 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8009604:	4b11      	ldr	r3, [pc, #68]	; (800964c <HAL_ADC_ConfigChannel+0x28c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a11      	ldr	r2, [pc, #68]	; (8009650 <HAL_ADC_ConfigChannel+0x290>)
 800960a:	fba2 2303 	umull	r2, r3, r2, r3
 800960e:	0c9a      	lsrs	r2, r3, #18
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800961a:	e002      	b.n	8009622 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3b01      	subs	r3, #1
 8009620:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1f9      	bne.n	800961c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	10000012 	.word	0x10000012
 8009644:	40012000 	.word	0x40012000
 8009648:	40012300 	.word	0x40012300
 800964c:	200001a8 	.word	0x200001a8
 8009650:	431bde83 	.word	0x431bde83

08009654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800965c:	4b78      	ldr	r3, [pc, #480]	; (8009840 <ADC_Init+0x1ec>)
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	4a77      	ldr	r2, [pc, #476]	; (8009840 <ADC_Init+0x1ec>)
 8009662:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009666:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009668:	4b75      	ldr	r3, [pc, #468]	; (8009840 <ADC_Init+0x1ec>)
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4973      	ldr	r1, [pc, #460]	; (8009840 <ADC_Init+0x1ec>)
 8009672:	4313      	orrs	r3, r2
 8009674:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6859      	ldr	r1, [r3, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	021a      	lsls	r2, r3, #8
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80096a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6859      	ldr	r1, [r3, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6899      	ldr	r1, [r3, #8]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e2:	4a58      	ldr	r2, [pc, #352]	; (8009844 <ADC_Init+0x1f0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d022      	beq.n	800972e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6899      	ldr	r1, [r3, #8]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6899      	ldr	r1, [r3, #8]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	609a      	str	r2, [r3, #8]
 800972c:	e00f      	b.n	800974e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800973c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800974c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0202 	bic.w	r2, r2, #2
 800975c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6899      	ldr	r1, [r3, #8]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	005a      	lsls	r2, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01b      	beq.n	80097b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800978a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800979a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6859      	ldr	r1, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	3b01      	subs	r3, #1
 80097a8:	035a      	lsls	r2, r3, #13
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
 80097b2:	e007      	b.n	80097c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80097d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	3b01      	subs	r3, #1
 80097e0:	051a      	lsls	r2, r3, #20
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80097f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6899      	ldr	r1, [r3, #8]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009806:	025a      	lsls	r2, r3, #9
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689a      	ldr	r2, [r3, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800981e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6899      	ldr	r1, [r3, #8]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	029a      	lsls	r2, r3, #10
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	609a      	str	r2, [r3, #8]
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	40012300 	.word	0x40012300
 8009844:	0f000001 	.word	0x0f000001

08009848 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800985e:	2b00      	cmp	r3, #0
 8009860:	d13c      	bne.n	80098dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d12b      	bne.n	80098d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009880:	2b00      	cmp	r3, #0
 8009882:	d127      	bne.n	80098d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800988e:	2b00      	cmp	r3, #0
 8009890:	d006      	beq.n	80098a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800989c:	2b00      	cmp	r3, #0
 800989e:	d119      	bne.n	80098d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0220 	bic.w	r2, r2, #32
 80098ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d105      	bne.n	80098d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	f043 0201 	orr.w	r2, r3, #1
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7fa fc43 	bl	8004160 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80098da:	e00e      	b.n	80098fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fd5f 	bl	80093ac <HAL_ADC_ErrorCallback>
}
 80098ee:	e004      	b.n	80098fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff fd37 	bl	8009384 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2240      	movs	r2, #64	; 0x40
 8009930:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	f043 0204 	orr.w	r2, r3, #4
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7ff fd34 	bl	80093ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <__NVIC_SetPriorityGrouping+0x40>)
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800997c:	4013      	ands	r3, r2
 800997e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009988:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <__NVIC_SetPriorityGrouping+0x44>)
 800998a:	4313      	orrs	r3, r2
 800998c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800998e:	4a04      	ldr	r2, [pc, #16]	; (80099a0 <__NVIC_SetPriorityGrouping+0x40>)
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	60d3      	str	r3, [r2, #12]
}
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	e000ed00 	.word	0xe000ed00
 80099a4:	05fa0000 	.word	0x05fa0000

080099a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099ac:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <__NVIC_GetPriorityGrouping+0x18>)
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	0a1b      	lsrs	r3, r3, #8
 80099b2:	f003 0307 	and.w	r3, r3, #7
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	e000ed00 	.word	0xe000ed00

080099c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	db0b      	blt.n	80099ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	f003 021f 	and.w	r2, r3, #31
 80099dc:	4907      	ldr	r1, [pc, #28]	; (80099fc <__NVIC_EnableIRQ+0x38>)
 80099de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	2001      	movs	r0, #1
 80099e6:	fa00 f202 	lsl.w	r2, r0, r2
 80099ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	e000e100 	.word	0xe000e100

08009a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	6039      	str	r1, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	db0a      	blt.n	8009a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	490c      	ldr	r1, [pc, #48]	; (8009a4c <__NVIC_SetPriority+0x4c>)
 8009a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1e:	0112      	lsls	r2, r2, #4
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	440b      	add	r3, r1
 8009a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a28:	e00a      	b.n	8009a40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	4908      	ldr	r1, [pc, #32]	; (8009a50 <__NVIC_SetPriority+0x50>)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	f003 030f 	and.w	r3, r3, #15
 8009a36:	3b04      	subs	r3, #4
 8009a38:	0112      	lsls	r2, r2, #4
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	761a      	strb	r2, [r3, #24]
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	e000e100 	.word	0xe000e100
 8009a50:	e000ed00 	.word	0xe000ed00

08009a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b089      	sub	sp, #36	; 0x24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f1c3 0307 	rsb	r3, r3, #7
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	bf28      	it	cs
 8009a72:	2304      	movcs	r3, #4
 8009a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	2b06      	cmp	r3, #6
 8009a7c:	d902      	bls.n	8009a84 <NVIC_EncodePriority+0x30>
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	3b03      	subs	r3, #3
 8009a82:	e000      	b.n	8009a86 <NVIC_EncodePriority+0x32>
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a88:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	43da      	mvns	r2, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	401a      	ands	r2, r3
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa6:	43d9      	mvns	r1, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009aac:	4313      	orrs	r3, r2
         );
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3724      	adds	r7, #36	; 0x24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff ff4c 	bl	8009960 <__NVIC_SetPriorityGrouping>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ae2:	f7ff ff61 	bl	80099a8 <__NVIC_GetPriorityGrouping>
 8009ae6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	6978      	ldr	r0, [r7, #20]
 8009aee:	f7ff ffb1 	bl	8009a54 <NVIC_EncodePriority>
 8009af2:	4602      	mov	r2, r0
 8009af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009af8:	4611      	mov	r1, r2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff ff80 	bl	8009a00 <__NVIC_SetPriority>
}
 8009b00:	bf00      	nop
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff ff54 	bl	80099c4 <__NVIC_EnableIRQ>
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009b30:	f7ff f93c 	bl	8008dac <HAL_GetTick>
 8009b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e099      	b.n	8009c74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f022 0201 	bic.w	r2, r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009b60:	e00f      	b.n	8009b82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009b62:	f7ff f923 	bl	8008dac <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b05      	cmp	r3, #5
 8009b6e:	d908      	bls.n	8009b82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2203      	movs	r2, #3
 8009b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e078      	b.n	8009c74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e8      	bne.n	8009b62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	4b38      	ldr	r3, [pc, #224]	; (8009c7c <HAL_DMA_Init+0x158>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d107      	bne.n	8009bec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be4:	4313      	orrs	r3, r2
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f023 0307 	bic.w	r3, r3, #7
 8009c02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d117      	bne.n	8009c46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00e      	beq.n	8009c46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fb09 	bl	800a240 <DMA_CheckFifoParam>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d008      	beq.n	8009c46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2240      	movs	r2, #64	; 0x40
 8009c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009c42:	2301      	movs	r3, #1
 8009c44:	e016      	b.n	8009c74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fac0 	bl	800a1d4 <DMA_CalcBaseAndBitshift>
 8009c54:	4603      	mov	r3, r0
 8009c56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5c:	223f      	movs	r2, #63	; 0x3f
 8009c5e:	409a      	lsls	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	e010803f 	.word	0xe010803f

08009c80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d101      	bne.n	8009ca6 <HAL_DMA_Start_IT+0x26>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e048      	b.n	8009d38 <HAL_DMA_Start_IT+0xb8>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d137      	bne.n	8009d2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fa52 	bl	800a178 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd8:	223f      	movs	r2, #63	; 0x3f
 8009cda:	409a      	lsls	r2, r3
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f042 0216 	orr.w	r2, r2, #22
 8009cee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695a      	ldr	r2, [r3, #20]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cfe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0208 	orr.w	r2, r2, #8
 8009d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0201 	orr.w	r2, r2, #1
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	e005      	b.n	8009d36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009d32:	2302      	movs	r3, #2
 8009d34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009d4e:	f7ff f82d 	bl	8008dac <HAL_GetTick>
 8009d52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d008      	beq.n	8009d72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2280      	movs	r2, #128	; 0x80
 8009d64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e052      	b.n	8009e18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0216 	bic.w	r2, r2, #22
 8009d80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d103      	bne.n	8009da2 <HAL_DMA_Abort+0x62>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0208 	bic.w	r2, r2, #8
 8009db0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0201 	bic.w	r2, r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009dc2:	e013      	b.n	8009dec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009dc4:	f7fe fff2 	bl	8008dac <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d90c      	bls.n	8009dec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2203      	movs	r2, #3
 8009de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e015      	b.n	8009e18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e4      	bne.n	8009dc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dfe:	223f      	movs	r2, #63	; 0x3f
 8009e00:	409a      	lsls	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d004      	beq.n	8009e3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2280      	movs	r2, #128	; 0x80
 8009e38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e00c      	b.n	8009e58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2205      	movs	r2, #5
 8009e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8009e70:	4b92      	ldr	r3, [pc, #584]	; (800a0bc <HAL_DMA_IRQHandler+0x258>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a92      	ldr	r2, [pc, #584]	; (800a0c0 <HAL_DMA_IRQHandler+0x25c>)
 8009e76:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7a:	0a9b      	lsrs	r3, r3, #10
 8009e7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e8e:	2208      	movs	r2, #8
 8009e90:	409a      	lsls	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4013      	ands	r3, r2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01a      	beq.n	8009ed0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d013      	beq.n	8009ed0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 0204 	bic.w	r2, r2, #4
 8009eb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	409a      	lsls	r2, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec8:	f043 0201 	orr.w	r2, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	409a      	lsls	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d012      	beq.n	8009f06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00b      	beq.n	8009f06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	409a      	lsls	r2, r3
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efe:	f043 0202 	orr.w	r2, r3, #2
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0a:	2204      	movs	r2, #4
 8009f0c:	409a      	lsls	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4013      	ands	r3, r2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d012      	beq.n	8009f3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f28:	2204      	movs	r2, #4
 8009f2a:	409a      	lsls	r2, r3
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f34:	f043 0204 	orr.w	r2, r3, #4
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f40:	2210      	movs	r2, #16
 8009f42:	409a      	lsls	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4013      	ands	r3, r2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d043      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d03c      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f5e:	2210      	movs	r2, #16
 8009f60:	409a      	lsls	r2, r3
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d018      	beq.n	8009fa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d108      	bne.n	8009f94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d024      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
 8009f92:	e01f      	b.n	8009fd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d01b      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
 8009fa4:	e016      	b.n	8009fd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d107      	bne.n	8009fc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0208 	bic.w	r2, r2, #8
 8009fc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd8:	2220      	movs	r2, #32
 8009fda:	409a      	lsls	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 808e 	beq.w	800a102 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 8086 	beq.w	800a102 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	409a      	lsls	r2, r3
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	d136      	bne.n	800a07c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0216 	bic.w	r2, r2, #22
 800a01c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	695a      	ldr	r2, [r3, #20]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a02c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	2b00      	cmp	r3, #0
 800a034:	d103      	bne.n	800a03e <HAL_DMA_IRQHandler+0x1da>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d007      	beq.n	800a04e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0208 	bic.w	r2, r2, #8
 800a04c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a052:	223f      	movs	r2, #63	; 0x3f
 800a054:	409a      	lsls	r2, r3
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d07d      	beq.n	800a16e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	4798      	blx	r3
        }
        return;
 800a07a:	e078      	b.n	800a16e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d01c      	beq.n	800a0c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d108      	bne.n	800a0aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d030      	beq.n	800a102 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
 800a0a8:	e02b      	b.n	800a102 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d027      	beq.n	800a102 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	4798      	blx	r3
 800a0ba:	e022      	b.n	800a102 <HAL_DMA_IRQHandler+0x29e>
 800a0bc:	200001a8 	.word	0x200001a8
 800a0c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10f      	bne.n	800a0f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f022 0210 	bic.w	r2, r2, #16
 800a0e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a106:	2b00      	cmp	r3, #0
 800a108:	d032      	beq.n	800a170 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	2b00      	cmp	r3, #0
 800a114:	d022      	beq.n	800a15c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2205      	movs	r2, #5
 800a11a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0201 	bic.w	r2, r2, #1
 800a12c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	3301      	adds	r3, #1
 800a132:	60bb      	str	r3, [r7, #8]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	429a      	cmp	r2, r3
 800a138:	d307      	bcc.n	800a14a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1f2      	bne.n	800a12e <HAL_DMA_IRQHandler+0x2ca>
 800a148:	e000      	b.n	800a14c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a14a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	4798      	blx	r3
 800a16c:	e000      	b.n	800a170 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a16e:	bf00      	nop
    }
  }
}
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop

0800a178 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
 800a184:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a194:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	2b40      	cmp	r3, #64	; 0x40
 800a1a4:	d108      	bne.n	800a1b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a1b6:	e007      	b.n	800a1c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	60da      	str	r2, [r3, #12]
}
 800a1c8:	bf00      	nop
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	3b10      	subs	r3, #16
 800a1e4:	4a13      	ldr	r2, [pc, #76]	; (800a234 <DMA_CalcBaseAndBitshift+0x60>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	091b      	lsrs	r3, r3, #4
 800a1ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a1ee:	4a12      	ldr	r2, [pc, #72]	; (800a238 <DMA_CalcBaseAndBitshift+0x64>)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d908      	bls.n	800a214 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <DMA_CalcBaseAndBitshift+0x68>)
 800a20a:	4013      	ands	r3, r2
 800a20c:	1d1a      	adds	r2, r3, #4
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	659a      	str	r2, [r3, #88]	; 0x58
 800a212:	e006      	b.n	800a222 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	461a      	mov	r2, r3
 800a21a:	4b08      	ldr	r3, [pc, #32]	; (800a23c <DMA_CalcBaseAndBitshift+0x68>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	aaaaaaab 	.word	0xaaaaaaab
 800a238:	08017130 	.word	0x08017130
 800a23c:	fffffc00 	.word	0xfffffc00

0800a240 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a250:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d11f      	bne.n	800a29a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b03      	cmp	r3, #3
 800a25e:	d855      	bhi.n	800a30c <DMA_CheckFifoParam+0xcc>
 800a260:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <DMA_CheckFifoParam+0x28>)
 800a262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a266:	bf00      	nop
 800a268:	0800a279 	.word	0x0800a279
 800a26c:	0800a28b 	.word	0x0800a28b
 800a270:	0800a279 	.word	0x0800a279
 800a274:	0800a30d 	.word	0x0800a30d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d045      	beq.n	800a310 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a288:	e042      	b.n	800a310 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a292:	d13f      	bne.n	800a314 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a298:	e03c      	b.n	800a314 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2a2:	d121      	bne.n	800a2e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d836      	bhi.n	800a318 <DMA_CheckFifoParam+0xd8>
 800a2aa:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <DMA_CheckFifoParam+0x70>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2c1 	.word	0x0800a2c1
 800a2b4:	0800a2c7 	.word	0x0800a2c7
 800a2b8:	0800a2c1 	.word	0x0800a2c1
 800a2bc:	0800a2d9 	.word	0x0800a2d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c4:	e02f      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d024      	beq.n	800a31c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2d6:	e021      	b.n	800a31c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a2e0:	d11e      	bne.n	800a320 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a2e6:	e01b      	b.n	800a320 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d902      	bls.n	800a2f4 <DMA_CheckFifoParam+0xb4>
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d003      	beq.n	800a2fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a2f2:	e018      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f8:	e015      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00e      	beq.n	800a324 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	73fb      	strb	r3, [r7, #15]
      break;
 800a30a:	e00b      	b.n	800a324 <DMA_CheckFifoParam+0xe4>
      break;
 800a30c:	bf00      	nop
 800a30e:	e00a      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      break;
 800a310:	bf00      	nop
 800a312:	e008      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      break;
 800a314:	bf00      	nop
 800a316:	e006      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      break;
 800a318:	bf00      	nop
 800a31a:	e004      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      break;
 800a31c:	bf00      	nop
 800a31e:	e002      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      break;   
 800a320:	bf00      	nop
 800a322:	e000      	b.n	800a326 <DMA_CheckFifoParam+0xe6>
      break;
 800a324:	bf00      	nop
    }
  } 
  
  return status; 
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a334:	b480      	push	{r7}
 800a336:	b089      	sub	sp, #36	; 0x24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a33e:	2300      	movs	r3, #0
 800a340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a346:	2300      	movs	r3, #0
 800a348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a34a:	2300      	movs	r3, #0
 800a34c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a34e:	2300      	movs	r3, #0
 800a350:	61fb      	str	r3, [r7, #28]
 800a352:	e175      	b.n	800a640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a354:	2201      	movs	r2, #1
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	fa02 f303 	lsl.w	r3, r2, r3
 800a35c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	4013      	ands	r3, r2
 800a366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	f040 8164 	bne.w	800a63a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d00b      	beq.n	800a392 <HAL_GPIO_Init+0x5e>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d007      	beq.n	800a392 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a386:	2b11      	cmp	r3, #17
 800a388:	d003      	beq.n	800a392 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	2b12      	cmp	r3, #18
 800a390:	d130      	bne.n	800a3f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	2203      	movs	r2, #3
 800a39e:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a2:	43db      	mvns	r3, r3
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	f003 0201 	and.w	r2, r3, #1
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	2203      	movs	r2, #3
 800a400:	fa02 f303 	lsl.w	r3, r2, r3
 800a404:	43db      	mvns	r3, r3
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	4013      	ands	r3, r2
 800a40a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	fa02 f303 	lsl.w	r3, r2, r3
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d003      	beq.n	800a434 <HAL_GPIO_Init+0x100>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	2b12      	cmp	r3, #18
 800a432:	d123      	bne.n	800a47c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	08da      	lsrs	r2, r3, #3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3208      	adds	r2, #8
 800a43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	f003 0307 	and.w	r3, r3, #7
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	220f      	movs	r2, #15
 800a44c:	fa02 f303 	lsl.w	r3, r2, r3
 800a450:	43db      	mvns	r3, r3
 800a452:	69ba      	ldr	r2, [r7, #24]
 800a454:	4013      	ands	r3, r2
 800a456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	691a      	ldr	r2, [r3, #16]
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	fa02 f303 	lsl.w	r3, r2, r3
 800a468:	69ba      	ldr	r2, [r7, #24]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	08da      	lsrs	r2, r3, #3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3208      	adds	r2, #8
 800a476:	69b9      	ldr	r1, [r7, #24]
 800a478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	2203      	movs	r2, #3
 800a488:	fa02 f303 	lsl.w	r3, r2, r3
 800a48c:	43db      	mvns	r3, r3
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	4013      	ands	r3, r2
 800a492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f003 0203 	and.w	r2, r3, #3
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 80be 	beq.w	800a63a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4be:	4b65      	ldr	r3, [pc, #404]	; (800a654 <HAL_GPIO_Init+0x320>)
 800a4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4c2:	4a64      	ldr	r2, [pc, #400]	; (800a654 <HAL_GPIO_Init+0x320>)
 800a4c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4c8:	6453      	str	r3, [r2, #68]	; 0x44
 800a4ca:	4b62      	ldr	r3, [pc, #392]	; (800a654 <HAL_GPIO_Init+0x320>)
 800a4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a4d6:	4a60      	ldr	r2, [pc, #384]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	089b      	lsrs	r3, r3, #2
 800a4dc:	3302      	adds	r3, #2
 800a4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f003 0303 	and.w	r3, r3, #3
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	220f      	movs	r2, #15
 800a4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f2:	43db      	mvns	r3, r3
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a57      	ldr	r2, [pc, #348]	; (800a65c <HAL_GPIO_Init+0x328>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d037      	beq.n	800a572 <HAL_GPIO_Init+0x23e>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a56      	ldr	r2, [pc, #344]	; (800a660 <HAL_GPIO_Init+0x32c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d031      	beq.n	800a56e <HAL_GPIO_Init+0x23a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a55      	ldr	r2, [pc, #340]	; (800a664 <HAL_GPIO_Init+0x330>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d02b      	beq.n	800a56a <HAL_GPIO_Init+0x236>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a54      	ldr	r2, [pc, #336]	; (800a668 <HAL_GPIO_Init+0x334>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d025      	beq.n	800a566 <HAL_GPIO_Init+0x232>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a53      	ldr	r2, [pc, #332]	; (800a66c <HAL_GPIO_Init+0x338>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d01f      	beq.n	800a562 <HAL_GPIO_Init+0x22e>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a52      	ldr	r2, [pc, #328]	; (800a670 <HAL_GPIO_Init+0x33c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d019      	beq.n	800a55e <HAL_GPIO_Init+0x22a>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a51      	ldr	r2, [pc, #324]	; (800a674 <HAL_GPIO_Init+0x340>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d013      	beq.n	800a55a <HAL_GPIO_Init+0x226>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a50      	ldr	r2, [pc, #320]	; (800a678 <HAL_GPIO_Init+0x344>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d00d      	beq.n	800a556 <HAL_GPIO_Init+0x222>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a4f      	ldr	r2, [pc, #316]	; (800a67c <HAL_GPIO_Init+0x348>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d007      	beq.n	800a552 <HAL_GPIO_Init+0x21e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a4e      	ldr	r2, [pc, #312]	; (800a680 <HAL_GPIO_Init+0x34c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d101      	bne.n	800a54e <HAL_GPIO_Init+0x21a>
 800a54a:	2309      	movs	r3, #9
 800a54c:	e012      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a54e:	230a      	movs	r3, #10
 800a550:	e010      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a552:	2308      	movs	r3, #8
 800a554:	e00e      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a556:	2307      	movs	r3, #7
 800a558:	e00c      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a55a:	2306      	movs	r3, #6
 800a55c:	e00a      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a55e:	2305      	movs	r3, #5
 800a560:	e008      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a562:	2304      	movs	r3, #4
 800a564:	e006      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a566:	2303      	movs	r3, #3
 800a568:	e004      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a56a:	2302      	movs	r3, #2
 800a56c:	e002      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a56e:	2301      	movs	r3, #1
 800a570:	e000      	b.n	800a574 <HAL_GPIO_Init+0x240>
 800a572:	2300      	movs	r3, #0
 800a574:	69fa      	ldr	r2, [r7, #28]
 800a576:	f002 0203 	and.w	r2, r2, #3
 800a57a:	0092      	lsls	r2, r2, #2
 800a57c:	4093      	lsls	r3, r2
 800a57e:	69ba      	ldr	r2, [r7, #24]
 800a580:	4313      	orrs	r3, r2
 800a582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a584:	4934      	ldr	r1, [pc, #208]	; (800a658 <HAL_GPIO_Init+0x324>)
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	089b      	lsrs	r3, r3, #2
 800a58a:	3302      	adds	r3, #2
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a592:	4b3c      	ldr	r3, [pc, #240]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	43db      	mvns	r3, r3
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a5b6:	4a33      	ldr	r2, [pc, #204]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a5bc:	4b31      	ldr	r3, [pc, #196]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	43db      	mvns	r3, r3
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a5e0:	4a28      	ldr	r2, [pc, #160]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a5e6:	4b27      	ldr	r3, [pc, #156]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	43db      	mvns	r3, r3
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4313      	orrs	r3, r2
 800a608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a60a:	4a1e      	ldr	r2, [pc, #120]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a610:	4b1c      	ldr	r3, [pc, #112]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	43db      	mvns	r3, r3
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	4013      	ands	r3, r2
 800a61e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a62c:	69ba      	ldr	r2, [r7, #24]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <HAL_GPIO_Init+0x350>)
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	3301      	adds	r3, #1
 800a63e:	61fb      	str	r3, [r7, #28]
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	2b0f      	cmp	r3, #15
 800a644:	f67f ae86 	bls.w	800a354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a648:	bf00      	nop
 800a64a:	3724      	adds	r7, #36	; 0x24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	40023800 	.word	0x40023800
 800a658:	40013800 	.word	0x40013800
 800a65c:	40020000 	.word	0x40020000
 800a660:	40020400 	.word	0x40020400
 800a664:	40020800 	.word	0x40020800
 800a668:	40020c00 	.word	0x40020c00
 800a66c:	40021000 	.word	0x40021000
 800a670:	40021400 	.word	0x40021400
 800a674:	40021800 	.word	0x40021800
 800a678:	40021c00 	.word	0x40021c00
 800a67c:	40022000 	.word	0x40022000
 800a680:	40022400 	.word	0x40022400
 800a684:	40013c00 	.word	0x40013c00

0800a688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691a      	ldr	r2, [r3, #16]
 800a698:	887b      	ldrh	r3, [r7, #2]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	73fb      	strb	r3, [r7, #15]
 800a6a4:	e001      	b.n	800a6aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	807b      	strh	r3, [r7, #2]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a6c8:	787b      	ldrb	r3, [r7, #1]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6ce:	887a      	ldrh	r2, [r7, #2]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a6d4:	e003      	b.n	800a6de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a6d6:	887b      	ldrh	r3, [r7, #2]
 800a6d8:	041a      	lsls	r2, r3, #16
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	619a      	str	r2, [r3, #24]
}
 800a6de:	bf00      	nop
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	695a      	ldr	r2, [r3, #20]
 800a6fa:	887b      	ldrh	r3, [r7, #2]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d004      	beq.n	800a70c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a702:	887b      	ldrh	r3, [r7, #2]
 800a704:	041a      	lsls	r2, r3, #16
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800a70a:	e002      	b.n	800a712 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a70c:	887a      	ldrh	r2, [r7, #2]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	619a      	str	r2, [r3, #24]
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
	...

0800a720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a72a:	4b08      	ldr	r3, [pc, #32]	; (800a74c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a72c:	695a      	ldr	r2, [r3, #20]
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	4013      	ands	r3, r2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d006      	beq.n	800a744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a736:	4a05      	ldr	r2, [pc, #20]	; (800a74c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a73c:	88fb      	ldrh	r3, [r7, #6]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f806 	bl	800a750 <HAL_GPIO_EXTI_Callback>
  }
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	40013c00 	.word	0x40013c00

0800a750 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
	...

0800a768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e07f      	b.n	800a87a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7fd fa42 	bl	8007c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2224      	movs	r2, #36	; 0x24
 800a798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0201 	bic.w	r2, r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a7b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	689a      	ldr	r2, [r3, #8]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d107      	bne.n	800a7e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7de:	609a      	str	r2, [r3, #8]
 800a7e0:	e006      	b.n	800a7f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a7ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d104      	bne.n	800a802 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a800:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6859      	ldr	r1, [r3, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	4b1d      	ldr	r3, [pc, #116]	; (800a884 <HAL_I2C_Init+0x11c>)
 800a80e:	430b      	orrs	r3, r1
 800a810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	691a      	ldr	r2, [r3, #16]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	ea42 0103 	orr.w	r1, r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	021a      	lsls	r2, r3, #8
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	69d9      	ldr	r1, [r3, #28]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a1a      	ldr	r2, [r3, #32]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0201 	orr.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	02008000 	.word	0x02008000

0800a888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b088      	sub	sp, #32
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	607a      	str	r2, [r7, #4]
 800a892:	461a      	mov	r2, r3
 800a894:	460b      	mov	r3, r1
 800a896:	817b      	strh	r3, [r7, #10]
 800a898:	4613      	mov	r3, r2
 800a89a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	f040 80da 	bne.w	800aa5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d101      	bne.n	800a8b8 <HAL_I2C_Master_Transmit+0x30>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e0d3      	b.n	800aa60 <HAL_I2C_Master_Transmit+0x1d8>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a8c0:	f7fe fa74 	bl	8008dac <HAL_GetTick>
 800a8c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	2319      	movs	r3, #25
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 fc5c 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e0be      	b.n	800aa60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2221      	movs	r2, #33	; 0x21
 800a8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2210      	movs	r2, #16
 800a8ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	893a      	ldrh	r2, [r7, #8]
 800a902:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a90e:	b29b      	uxth	r3, r3
 800a910:	2bff      	cmp	r3, #255	; 0xff
 800a912:	d90e      	bls.n	800a932 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	22ff      	movs	r2, #255	; 0xff
 800a918:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	8979      	ldrh	r1, [r7, #10]
 800a922:	4b51      	ldr	r3, [pc, #324]	; (800aa68 <HAL_I2C_Master_Transmit+0x1e0>)
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 fdbe 	bl	800b4ac <I2C_TransferConfig>
 800a930:	e06c      	b.n	800aa0c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a936:	b29a      	uxth	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a940:	b2da      	uxtb	r2, r3
 800a942:	8979      	ldrh	r1, [r7, #10]
 800a944:	4b48      	ldr	r3, [pc, #288]	; (800aa68 <HAL_I2C_Master_Transmit+0x1e0>)
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 fdad 	bl	800b4ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a952:	e05b      	b.n	800aa0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	6a39      	ldr	r1, [r7, #32]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f000 fc59 	bl	800b210 <I2C_WaitOnTXISFlagUntilTimeout>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e07b      	b.n	800aa60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	781a      	ldrb	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b01      	subs	r3, #1
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a990:	3b01      	subs	r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d034      	beq.n	800aa0c <HAL_I2C_Master_Transmit+0x184>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d130      	bne.n	800aa0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2180      	movs	r1, #128	; 0x80
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 fbeb 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e04d      	b.n	800aa60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	2bff      	cmp	r3, #255	; 0xff
 800a9cc:	d90e      	bls.n	800a9ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	22ff      	movs	r2, #255	; 0xff
 800a9d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	8979      	ldrh	r1, [r7, #10]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 fd61 	bl	800b4ac <I2C_TransferConfig>
 800a9ea:	e00f      	b.n	800aa0c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	8979      	ldrh	r1, [r7, #10]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f000 fd50 	bl	800b4ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d19e      	bne.n	800a954 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	6a39      	ldr	r1, [r7, #32]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 fc38 	bl	800b290 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e01a      	b.n	800aa60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2220      	movs	r2, #32
 800aa30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6859      	ldr	r1, [r3, #4]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <HAL_I2C_Master_Transmit+0x1e4>)
 800aa3e:	400b      	ands	r3, r1
 800aa40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e000      	b.n	800aa60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800aa5e:	2302      	movs	r3, #2
  }
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	80002000 	.word	0x80002000
 800aa6c:	fe00e800 	.word	0xfe00e800

0800aa70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	607a      	str	r2, [r7, #4]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	817b      	strh	r3, [r7, #10]
 800aa80:	4613      	mov	r3, r2
 800aa82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b20      	cmp	r3, #32
 800aa8e:	f040 80db 	bne.w	800ac48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d101      	bne.n	800aaa0 <HAL_I2C_Master_Receive+0x30>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e0d4      	b.n	800ac4a <HAL_I2C_Master_Receive+0x1da>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aaa8:	f7fe f980 	bl	8008dac <HAL_GetTick>
 800aaac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	2319      	movs	r3, #25
 800aab4:	2201      	movs	r2, #1
 800aab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 fb68 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e0bf      	b.n	800ac4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2222      	movs	r2, #34	; 0x22
 800aace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2210      	movs	r2, #16
 800aad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	893a      	ldrh	r2, [r7, #8]
 800aaea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2bff      	cmp	r3, #255	; 0xff
 800aafa:	d90e      	bls.n	800ab1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	22ff      	movs	r2, #255	; 0xff
 800ab00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	8979      	ldrh	r1, [r7, #10]
 800ab0a:	4b52      	ldr	r3, [pc, #328]	; (800ac54 <HAL_I2C_Master_Receive+0x1e4>)
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f000 fcca 	bl	800b4ac <I2C_TransferConfig>
 800ab18:	e06d      	b.n	800abf6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	8979      	ldrh	r1, [r7, #10]
 800ab2c:	4b49      	ldr	r3, [pc, #292]	; (800ac54 <HAL_I2C_Master_Receive+0x1e4>)
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 fcb9 	bl	800b4ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800ab3a:	e05c      	b.n	800abf6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	6a39      	ldr	r1, [r7, #32]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 fbe1 	bl	800b308 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e07c      	b.n	800ac4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d034      	beq.n	800abf6 <HAL_I2C_Master_Receive+0x186>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d130      	bne.n	800abf6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2180      	movs	r1, #128	; 0x80
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 faf6 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e04d      	b.n	800ac4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	2bff      	cmp	r3, #255	; 0xff
 800abb6:	d90e      	bls.n	800abd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	22ff      	movs	r2, #255	; 0xff
 800abbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	8979      	ldrh	r1, [r7, #10]
 800abc6:	2300      	movs	r3, #0
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 fc6c 	bl	800b4ac <I2C_TransferConfig>
 800abd4:	e00f      	b.n	800abf6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abda:	b29a      	uxth	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	8979      	ldrh	r1, [r7, #10]
 800abe8:	2300      	movs	r3, #0
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fc5b 	bl	800b4ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d19d      	bne.n	800ab3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	6a39      	ldr	r1, [r7, #32]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 fb43 	bl	800b290 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e01a      	b.n	800ac4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6859      	ldr	r1, [r3, #4]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <HAL_I2C_Master_Receive+0x1e8>)
 800ac28:	400b      	ands	r3, r1
 800ac2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	e000      	b.n	800ac4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ac48:	2302      	movs	r3, #2
  }
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	80002400 	.word	0x80002400
 800ac58:	fe00e800 	.word	0xfe00e800

0800ac5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	4608      	mov	r0, r1
 800ac66:	4611      	mov	r1, r2
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	817b      	strh	r3, [r7, #10]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	813b      	strh	r3, [r7, #8]
 800ac72:	4613      	mov	r3, r2
 800ac74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b20      	cmp	r3, #32
 800ac80:	f040 80fd 	bne.w	800ae7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <HAL_I2C_Mem_Read+0x34>
 800ac8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d105      	bne.n	800ac9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e0f1      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d101      	bne.n	800acaa <HAL_I2C_Mem_Read+0x4e>
 800aca6:	2302      	movs	r3, #2
 800aca8:	e0ea      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800acb2:	f7fe f87b 	bl	8008dac <HAL_GetTick>
 800acb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	2319      	movs	r3, #25
 800acbe:	2201      	movs	r2, #1
 800acc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 fa63 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0d5      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2222      	movs	r2, #34	; 0x22
 800acd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2240      	movs	r2, #64	; 0x40
 800ace0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6a3a      	ldr	r2, [r7, #32]
 800acee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800acfc:	88f8      	ldrh	r0, [r7, #6]
 800acfe:	893a      	ldrh	r2, [r7, #8]
 800ad00:	8979      	ldrh	r1, [r7, #10]
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f9c7 	bl	800b0a0 <I2C_RequestMemoryRead>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d005      	beq.n	800ad24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e0ad      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	2bff      	cmp	r3, #255	; 0xff
 800ad2c:	d90e      	bls.n	800ad4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	22ff      	movs	r2, #255	; 0xff
 800ad32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	8979      	ldrh	r1, [r7, #10]
 800ad3c:	4b52      	ldr	r3, [pc, #328]	; (800ae88 <HAL_I2C_Mem_Read+0x22c>)
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 fbb1 	bl	800b4ac <I2C_TransferConfig>
 800ad4a:	e00f      	b.n	800ad6c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	8979      	ldrh	r1, [r7, #10]
 800ad5e:	4b4a      	ldr	r3, [pc, #296]	; (800ae88 <HAL_I2C_Mem_Read+0x22c>)
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f000 fba0 	bl	800b4ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	2200      	movs	r2, #0
 800ad74:	2104      	movs	r1, #4
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f000 fa0a 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e07c      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	b2d2      	uxtb	r2, r2
 800ad92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada2:	3b01      	subs	r3, #1
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3b01      	subs	r3, #1
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d034      	beq.n	800ae2c <HAL_I2C_Mem_Read+0x1d0>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d130      	bne.n	800ae2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add0:	2200      	movs	r2, #0
 800add2:	2180      	movs	r1, #128	; 0x80
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f9db 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e04d      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade8:	b29b      	uxth	r3, r3
 800adea:	2bff      	cmp	r3, #255	; 0xff
 800adec:	d90e      	bls.n	800ae0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	22ff      	movs	r2, #255	; 0xff
 800adf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	8979      	ldrh	r1, [r7, #10]
 800adfc:	2300      	movs	r3, #0
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 fb51 	bl	800b4ac <I2C_TransferConfig>
 800ae0a:	e00f      	b.n	800ae2c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	8979      	ldrh	r1, [r7, #10]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 fb40 	bl	800b4ac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d19a      	bne.n	800ad6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 fa28 	bl	800b290 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e01a      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6859      	ldr	r1, [r3, #4]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	4b0b      	ldr	r3, [pc, #44]	; (800ae8c <HAL_I2C_Mem_Read+0x230>)
 800ae5e:	400b      	ands	r3, r1
 800ae60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e000      	b.n	800ae80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ae7e:	2302      	movs	r3, #2
  }
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	80002400 	.word	0x80002400
 800ae8c:	fe00e800 	.word	0xfe00e800

0800ae90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08a      	sub	sp, #40	; 0x28
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800aea0:	2300      	movs	r3, #0
 800aea2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b20      	cmp	r3, #32
 800aeae:	f040 80ef 	bne.w	800b090 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec0:	d101      	bne.n	800aec6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800aec2:	2302      	movs	r3, #2
 800aec4:	e0e5      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d101      	bne.n	800aed4 <HAL_I2C_IsDeviceReady+0x44>
 800aed0:	2302      	movs	r3, #2
 800aed2:	e0de      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2224      	movs	r2, #36	; 0x24
 800aee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d105      	bne.n	800aefe <HAL_I2C_IsDeviceReady+0x6e>
 800aef2:	897b      	ldrh	r3, [r7, #10]
 800aef4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aef8:	4b68      	ldr	r3, [pc, #416]	; (800b09c <HAL_I2C_IsDeviceReady+0x20c>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	e004      	b.n	800af08 <HAL_I2C_IsDeviceReady+0x78>
 800aefe:	897b      	ldrh	r3, [r7, #10]
 800af00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af04:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800af0e:	f7fd ff4d 	bl	8008dac <HAL_GetTick>
 800af12:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	f003 0320 	and.w	r3, r3, #32
 800af1e:	2b20      	cmp	r3, #32
 800af20:	bf0c      	ite	eq
 800af22:	2301      	moveq	r3, #1
 800af24:	2300      	movne	r3, #0
 800af26:	b2db      	uxtb	r3, r3
 800af28:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	f003 0310 	and.w	r3, r3, #16
 800af34:	2b10      	cmp	r3, #16
 800af36:	bf0c      	ite	eq
 800af38:	2301      	moveq	r3, #1
 800af3a:	2300      	movne	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800af40:	e034      	b.n	800afac <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af48:	d01a      	beq.n	800af80 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800af4a:	f7fd ff2f 	bl	8008dac <HAL_GetTick>
 800af4e:	4602      	mov	r2, r0
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	429a      	cmp	r2, r3
 800af58:	d302      	bcc.n	800af60 <HAL_I2C_IsDeviceReady+0xd0>
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10f      	bne.n	800af80 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2220      	movs	r2, #32
 800af64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6c:	f043 0220 	orr.w	r2, r3, #32
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e088      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b20      	cmp	r3, #32
 800af8c:	bf0c      	ite	eq
 800af8e:	2301      	moveq	r3, #1
 800af90:	2300      	movne	r3, #0
 800af92:	b2db      	uxtb	r3, r3
 800af94:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	f003 0310 	and.w	r3, r3, #16
 800afa0:	2b10      	cmp	r3, #16
 800afa2:	bf0c      	ite	eq
 800afa4:	2301      	moveq	r3, #1
 800afa6:	2300      	movne	r3, #0
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800afac:	7ffb      	ldrb	r3, [r7, #31]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d102      	bne.n	800afb8 <HAL_I2C_IsDeviceReady+0x128>
 800afb2:	7fbb      	ldrb	r3, [r7, #30]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0c4      	beq.n	800af42 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	f003 0310 	and.w	r3, r3, #16
 800afc2:	2b10      	cmp	r3, #16
 800afc4:	d01a      	beq.n	800affc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2200      	movs	r2, #0
 800afce:	2120      	movs	r1, #32
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f8dd 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e058      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2220      	movs	r2, #32
 800afe6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	e04a      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	2120      	movs	r1, #32
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 f8c2 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e03d      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2210      	movs	r2, #16
 800b01c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2220      	movs	r2, #32
 800b024:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d118      	bne.n	800b060 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b03c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2200      	movs	r2, #0
 800b046:	2120      	movs	r1, #32
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 f8a1 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e01c      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2220      	movs	r2, #32
 800b05e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	3301      	adds	r3, #1
 800b064:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	f63f af3d 	bhi.w	800aeea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2220      	movs	r2, #32
 800b074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07c:	f043 0220 	orr.w	r2, r3, #32
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e000      	b.n	800b092 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800b090:	2302      	movs	r3, #2
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	02002000 	.word	0x02002000

0800b0a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af02      	add	r7, sp, #8
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	817b      	strh	r3, [r7, #10]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	813b      	strh	r3, [r7, #8]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b0ba:	88fb      	ldrh	r3, [r7, #6]
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	8979      	ldrh	r1, [r7, #10]
 800b0c0:	4b20      	ldr	r3, [pc, #128]	; (800b144 <I2C_RequestMemoryRead+0xa4>)
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 f9f0 	bl	800b4ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	69b9      	ldr	r1, [r7, #24]
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 f89d 	bl	800b210 <I2C_WaitOnTXISFlagUntilTimeout>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e02c      	b.n	800b13a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0e0:	88fb      	ldrh	r3, [r7, #6]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d105      	bne.n	800b0f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0e6:	893b      	ldrh	r3, [r7, #8]
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	629a      	str	r2, [r3, #40]	; 0x28
 800b0f0:	e015      	b.n	800b11e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b0f2:	893b      	ldrh	r3, [r7, #8]
 800b0f4:	0a1b      	lsrs	r3, r3, #8
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b100:	69fa      	ldr	r2, [r7, #28]
 800b102:	69b9      	ldr	r1, [r7, #24]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 f883 	bl	800b210 <I2C_WaitOnTXISFlagUntilTimeout>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e012      	b.n	800b13a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b114:	893b      	ldrh	r3, [r7, #8]
 800b116:	b2da      	uxtb	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2200      	movs	r2, #0
 800b126:	2140      	movs	r1, #64	; 0x40
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 f831 	bl	800b190 <I2C_WaitOnFlagUntilTimeout>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e000      	b.n	800b13a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	80002000 	.word	0x80002000

0800b148 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	f003 0302 	and.w	r3, r3, #2
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d103      	bne.n	800b166 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2200      	movs	r2, #0
 800b164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	f003 0301 	and.w	r3, r3, #1
 800b170:	2b01      	cmp	r3, #1
 800b172:	d007      	beq.n	800b184 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	699a      	ldr	r2, [r3, #24]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0201 	orr.w	r2, r2, #1
 800b182:	619a      	str	r2, [r3, #24]
  }
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	4613      	mov	r3, r2
 800b19e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1a0:	e022      	b.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a8:	d01e      	beq.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1aa:	f7fd fdff 	bl	8008dac <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d302      	bcc.n	800b1c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d113      	bne.n	800b1e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c4:	f043 0220 	orr.w	r2, r3, #32
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e00f      	b.n	800b208 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699a      	ldr	r2, [r3, #24]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2301      	moveq	r3, #1
 800b1fa:	2300      	movne	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	461a      	mov	r2, r3
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	429a      	cmp	r2, r3
 800b204:	d0cd      	beq.n	800b1a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b21c:	e02c      	b.n	800b278 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	68b9      	ldr	r1, [r7, #8]
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 f8dc 	bl	800b3e0 <I2C_IsAcknowledgeFailed>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e02a      	b.n	800b288 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b238:	d01e      	beq.n	800b278 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b23a:	f7fd fdb7 	bl	8008dac <HAL_GetTick>
 800b23e:	4602      	mov	r2, r0
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	429a      	cmp	r2, r3
 800b248:	d302      	bcc.n	800b250 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d113      	bne.n	800b278 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b254:	f043 0220 	orr.w	r2, r3, #32
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2220      	movs	r2, #32
 800b260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e007      	b.n	800b288 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b02      	cmp	r3, #2
 800b284:	d1cb      	bne.n	800b21e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b29c:	e028      	b.n	800b2f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	68b9      	ldr	r1, [r7, #8]
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 f89c 	bl	800b3e0 <I2C_IsAcknowledgeFailed>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e026      	b.n	800b300 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b2:	f7fd fd7b 	bl	8008dac <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d302      	bcc.n	800b2c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d113      	bne.n	800b2f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2cc:	f043 0220 	orr.w	r2, r3, #32
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e007      	b.n	800b300 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	f003 0320 	and.w	r3, r3, #32
 800b2fa:	2b20      	cmp	r3, #32
 800b2fc:	d1cf      	bne.n	800b29e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b314:	e055      	b.n	800b3c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	68b9      	ldr	r1, [r7, #8]
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 f860 	bl	800b3e0 <I2C_IsAcknowledgeFailed>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e053      	b.n	800b3d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	f003 0320 	and.w	r3, r3, #32
 800b334:	2b20      	cmp	r3, #32
 800b336:	d129      	bne.n	800b38c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	f003 0304 	and.w	r3, r3, #4
 800b342:	2b04      	cmp	r3, #4
 800b344:	d105      	bne.n	800b352 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	e03f      	b.n	800b3d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2220      	movs	r2, #32
 800b358:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6859      	ldr	r1, [r3, #4]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	4b1d      	ldr	r3, [pc, #116]	; (800b3dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800b366:	400b      	ands	r3, r1
 800b368:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2220      	movs	r2, #32
 800b374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e022      	b.n	800b3d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b38c:	f7fd fd0e 	bl	8008dac <HAL_GetTick>
 800b390:	4602      	mov	r2, r0
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d302      	bcc.n	800b3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10f      	bne.n	800b3c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3a6:	f043 0220 	orr.w	r2, r3, #32
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e007      	b.n	800b3d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d1a2      	bne.n	800b316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	fe00e800 	.word	0xfe00e800

0800b3e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	f003 0310 	and.w	r3, r3, #16
 800b3f6:	2b10      	cmp	r3, #16
 800b3f8:	d151      	bne.n	800b49e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b3fa:	e022      	b.n	800b442 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b402:	d01e      	beq.n	800b442 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b404:	f7fd fcd2 	bl	8008dac <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	429a      	cmp	r2, r3
 800b412:	d302      	bcc.n	800b41a <I2C_IsAcknowledgeFailed+0x3a>
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d113      	bne.n	800b442 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41e:	f043 0220 	orr.w	r2, r3, #32
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2220      	movs	r2, #32
 800b42a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e02e      	b.n	800b4a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	f003 0320 	and.w	r3, r3, #32
 800b44c:	2b20      	cmp	r3, #32
 800b44e:	d1d5      	bne.n	800b3fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2210      	movs	r2, #16
 800b456:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2220      	movs	r2, #32
 800b45e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7ff fe71 	bl	800b148 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6859      	ldr	r1, [r3, #4]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	4b0d      	ldr	r3, [pc, #52]	; (800b4a8 <I2C_IsAcknowledgeFailed+0xc8>)
 800b472:	400b      	ands	r3, r1
 800b474:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47a:	f043 0204 	orr.w	r2, r3, #4
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2220      	movs	r2, #32
 800b486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e000      	b.n	800b4a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	fe00e800 	.word	0xfe00e800

0800b4ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	607b      	str	r3, [r7, #4]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	817b      	strh	r3, [r7, #10]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	0d5b      	lsrs	r3, r3, #21
 800b4c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <I2C_TransferConfig+0x58>)
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	43db      	mvns	r3, r3
 800b4d2:	ea02 0103 	and.w	r1, r2, r3
 800b4d6:	897b      	ldrh	r3, [r7, #10]
 800b4d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b4dc:	7a7b      	ldrb	r3, [r7, #9]
 800b4de:	041b      	lsls	r3, r3, #16
 800b4e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	03ff63ff 	.word	0x03ff63ff

0800b508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	d138      	bne.n	800b590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b528:	2302      	movs	r3, #2
 800b52a:	e032      	b.n	800b592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2224      	movs	r2, #36	; 0x24
 800b538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0201 	bic.w	r2, r2, #1
 800b54a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b55a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6819      	ldr	r1, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0201 	orr.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e000      	b.n	800b592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b590:	2302      	movs	r3, #2
  }
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b085      	sub	sp, #20
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b20      	cmp	r3, #32
 800b5b2:	d139      	bne.n	800b628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d101      	bne.n	800b5c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e033      	b.n	800b62a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2224      	movs	r2, #36	; 0x24
 800b5ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f022 0201 	bic.w	r2, r2, #1
 800b5e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b5f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f042 0201 	orr.w	r2, r2, #1
 800b612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2220      	movs	r2, #32
 800b618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	e000      	b.n	800b62a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b628:	2302      	movs	r3, #2
  }
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
	...

0800b638 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b644:	4a0a      	ldr	r2, [pc, #40]	; (800b670 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b64a:	6453      	str	r3, [r2, #68]	; 0x44
 800b64c:	4b08      	ldr	r3, [pc, #32]	; (800b670 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800b64e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800b658:	4b06      	ldr	r3, [pc, #24]	; (800b674 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	4905      	ldr	r1, [pc, #20]	; (800b674 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4313      	orrs	r3, r2
 800b662:	604b      	str	r3, [r1, #4]
}
 800b664:	bf00      	nop
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	40023800 	.word	0x40023800
 800b674:	40013800 	.word	0x40013800

0800b678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67a:	b08f      	sub	sp, #60	; 0x3c
 800b67c:	af0a      	add	r7, sp, #40	; 0x28
 800b67e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d101      	bne.n	800b68a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	e116      	b.n	800b8b8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d106      	bne.n	800b6aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7fc fdf3 	bl	8008290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2203      	movs	r2, #3
 800b6ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f003 fc0d 	bl	800eee8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	687e      	ldr	r6, [r7, #4]
 800b6d6:	466d      	mov	r5, sp
 800b6d8:	f106 0410 	add.w	r4, r6, #16
 800b6dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b6e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b6e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b6e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800b6ec:	1d33      	adds	r3, r6, #4
 800b6ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6f0:	6838      	ldr	r0, [r7, #0]
 800b6f2:	f003 fba1 	bl	800ee38 <USB_CoreInit>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d005      	beq.n	800b708 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2202      	movs	r2, #2
 800b700:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e0d7      	b.n	800b8b8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2100      	movs	r1, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f003 fbfb 	bl	800ef0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]
 800b718:	e04a      	b.n	800b7b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b71a:	7bfa      	ldrb	r2, [r7, #15]
 800b71c:	6879      	ldr	r1, [r7, #4]
 800b71e:	4613      	mov	r3, r2
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	1a9b      	subs	r3, r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	440b      	add	r3, r1
 800b728:	333d      	adds	r3, #61	; 0x3d
 800b72a:	2201      	movs	r2, #1
 800b72c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b72e:	7bfa      	ldrb	r2, [r7, #15]
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	4613      	mov	r3, r2
 800b734:	00db      	lsls	r3, r3, #3
 800b736:	1a9b      	subs	r3, r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	440b      	add	r3, r1
 800b73c:	333c      	adds	r3, #60	; 0x3c
 800b73e:	7bfa      	ldrb	r2, [r7, #15]
 800b740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b742:	7bfa      	ldrb	r2, [r7, #15]
 800b744:	7bfb      	ldrb	r3, [r7, #15]
 800b746:	b298      	uxth	r0, r3
 800b748:	6879      	ldr	r1, [r7, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	1a9b      	subs	r3, r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	440b      	add	r3, r1
 800b754:	3342      	adds	r3, #66	; 0x42
 800b756:	4602      	mov	r2, r0
 800b758:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b75a:	7bfa      	ldrb	r2, [r7, #15]
 800b75c:	6879      	ldr	r1, [r7, #4]
 800b75e:	4613      	mov	r3, r2
 800b760:	00db      	lsls	r3, r3, #3
 800b762:	1a9b      	subs	r3, r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	440b      	add	r3, r1
 800b768:	333f      	adds	r3, #63	; 0x3f
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b76e:	7bfa      	ldrb	r2, [r7, #15]
 800b770:	6879      	ldr	r1, [r7, #4]
 800b772:	4613      	mov	r3, r2
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	1a9b      	subs	r3, r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	440b      	add	r3, r1
 800b77c:	3344      	adds	r3, #68	; 0x44
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b782:	7bfa      	ldrb	r2, [r7, #15]
 800b784:	6879      	ldr	r1, [r7, #4]
 800b786:	4613      	mov	r3, r2
 800b788:	00db      	lsls	r3, r3, #3
 800b78a:	1a9b      	subs	r3, r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	440b      	add	r3, r1
 800b790:	3348      	adds	r3, #72	; 0x48
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b796:	7bfa      	ldrb	r2, [r7, #15]
 800b798:	6879      	ldr	r1, [r7, #4]
 800b79a:	4613      	mov	r3, r2
 800b79c:	00db      	lsls	r3, r3, #3
 800b79e:	1a9b      	subs	r3, r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	440b      	add	r3, r1
 800b7a4:	3350      	adds	r3, #80	; 0x50
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	73fb      	strb	r3, [r7, #15]
 800b7b0:	7bfa      	ldrb	r2, [r7, #15]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d3af      	bcc.n	800b71a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
 800b7be:	e044      	b.n	800b84a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b7c0:	7bfa      	ldrb	r2, [r7, #15]
 800b7c2:	6879      	ldr	r1, [r7, #4]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	1a9b      	subs	r3, r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	440b      	add	r3, r1
 800b7ce:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b7d6:	7bfa      	ldrb	r2, [r7, #15]
 800b7d8:	6879      	ldr	r1, [r7, #4]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	1a9b      	subs	r3, r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	440b      	add	r3, r1
 800b7e4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b7e8:	7bfa      	ldrb	r2, [r7, #15]
 800b7ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b7ec:	7bfa      	ldrb	r2, [r7, #15]
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	1a9b      	subs	r3, r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	440b      	add	r3, r1
 800b7fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b7fe:	2200      	movs	r2, #0
 800b800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b802:	7bfa      	ldrb	r2, [r7, #15]
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	4613      	mov	r3, r2
 800b808:	00db      	lsls	r3, r3, #3
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	440b      	add	r3, r1
 800b810:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b818:	7bfa      	ldrb	r2, [r7, #15]
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	4613      	mov	r3, r2
 800b81e:	00db      	lsls	r3, r3, #3
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	440b      	add	r3, r1
 800b826:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b82e:	7bfa      	ldrb	r2, [r7, #15]
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	4613      	mov	r3, r2
 800b834:	00db      	lsls	r3, r3, #3
 800b836:	1a9b      	subs	r3, r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	440b      	add	r3, r1
 800b83c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	3301      	adds	r3, #1
 800b848:	73fb      	strb	r3, [r7, #15]
 800b84a:	7bfa      	ldrb	r2, [r7, #15]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d3b5      	bcc.n	800b7c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	603b      	str	r3, [r7, #0]
 800b85a:	687e      	ldr	r6, [r7, #4]
 800b85c:	466d      	mov	r5, sp
 800b85e:	f106 0410 	add.w	r4, r6, #16
 800b862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b86a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b86e:	e885 0003 	stmia.w	r5, {r0, r1}
 800b872:	1d33      	adds	r3, r6, #4
 800b874:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b876:	6838      	ldr	r0, [r7, #0]
 800b878:	f003 fb72 	bl	800ef60 <USB_DevInit>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d005      	beq.n	800b88e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2202      	movs	r2, #2
 800b886:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e014      	b.n	800b8b8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d102      	bne.n	800b8ac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f80a 	bl	800b8c0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f003 fd24 	bl	800f2fe <USB_DevDisconnect>

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8ee:	4b05      	ldr	r3, [pc, #20]	; (800b904 <HAL_PCDEx_ActivateLPM+0x44>)
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	10000003 	.word	0x10000003

0800b908 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b908:	b480      	push	{r7}
 800b90a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b90c:	4b05      	ldr	r3, [pc, #20]	; (800b924 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a04      	ldr	r2, [pc, #16]	; (800b924 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b916:	6013      	str	r3, [r2, #0]
}
 800b918:	bf00      	nop
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	40007000 	.word	0x40007000

0800b928 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b930:	2300      	movs	r3, #0
 800b932:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e29b      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 8087 	beq.w	800ba5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b94c:	4b96      	ldr	r3, [pc, #600]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	f003 030c 	and.w	r3, r3, #12
 800b954:	2b04      	cmp	r3, #4
 800b956:	d00c      	beq.n	800b972 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b958:	4b93      	ldr	r3, [pc, #588]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f003 030c 	and.w	r3, r3, #12
 800b960:	2b08      	cmp	r3, #8
 800b962:	d112      	bne.n	800b98a <HAL_RCC_OscConfig+0x62>
 800b964:	4b90      	ldr	r3, [pc, #576]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b96c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b970:	d10b      	bne.n	800b98a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b972:	4b8d      	ldr	r3, [pc, #564]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d06c      	beq.n	800ba58 <HAL_RCC_OscConfig+0x130>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d168      	bne.n	800ba58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e275      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b992:	d106      	bne.n	800b9a2 <HAL_RCC_OscConfig+0x7a>
 800b994:	4b84      	ldr	r3, [pc, #528]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a83      	ldr	r2, [pc, #524]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b99a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	e02e      	b.n	800ba00 <HAL_RCC_OscConfig+0xd8>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10c      	bne.n	800b9c4 <HAL_RCC_OscConfig+0x9c>
 800b9aa:	4b7f      	ldr	r3, [pc, #508]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a7e      	ldr	r2, [pc, #504]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	4b7c      	ldr	r3, [pc, #496]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a7b      	ldr	r2, [pc, #492]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	e01d      	b.n	800ba00 <HAL_RCC_OscConfig+0xd8>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9cc:	d10c      	bne.n	800b9e8 <HAL_RCC_OscConfig+0xc0>
 800b9ce:	4b76      	ldr	r3, [pc, #472]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a75      	ldr	r2, [pc, #468]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	4b73      	ldr	r3, [pc, #460]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a72      	ldr	r2, [pc, #456]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	e00b      	b.n	800ba00 <HAL_RCC_OscConfig+0xd8>
 800b9e8:	4b6f      	ldr	r3, [pc, #444]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a6e      	ldr	r2, [pc, #440]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	4b6c      	ldr	r3, [pc, #432]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a6b      	ldr	r2, [pc, #428]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800b9fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d013      	beq.n	800ba30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba08:	f7fd f9d0 	bl	8008dac <HAL_GetTick>
 800ba0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba0e:	e008      	b.n	800ba22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba10:	f7fd f9cc 	bl	8008dac <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	2b64      	cmp	r3, #100	; 0x64
 800ba1c:	d901      	bls.n	800ba22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e229      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba22:	4b61      	ldr	r3, [pc, #388]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0f0      	beq.n	800ba10 <HAL_RCC_OscConfig+0xe8>
 800ba2e:	e014      	b.n	800ba5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba30:	f7fd f9bc 	bl	8008dac <HAL_GetTick>
 800ba34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba36:	e008      	b.n	800ba4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba38:	f7fd f9b8 	bl	8008dac <HAL_GetTick>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	2b64      	cmp	r3, #100	; 0x64
 800ba44:	d901      	bls.n	800ba4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e215      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba4a:	4b57      	ldr	r3, [pc, #348]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1f0      	bne.n	800ba38 <HAL_RCC_OscConfig+0x110>
 800ba56:	e000      	b.n	800ba5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 0302 	and.w	r3, r3, #2
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d069      	beq.n	800bb3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ba66:	4b50      	ldr	r3, [pc, #320]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f003 030c 	and.w	r3, r3, #12
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba72:	4b4d      	ldr	r3, [pc, #308]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	f003 030c 	and.w	r3, r3, #12
 800ba7a:	2b08      	cmp	r3, #8
 800ba7c:	d11c      	bne.n	800bab8 <HAL_RCC_OscConfig+0x190>
 800ba7e:	4b4a      	ldr	r3, [pc, #296]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d116      	bne.n	800bab8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba8a:	4b47      	ldr	r3, [pc, #284]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0302 	and.w	r3, r3, #2
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d005      	beq.n	800baa2 <HAL_RCC_OscConfig+0x17a>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d001      	beq.n	800baa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e1e9      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baa2:	4b41      	ldr	r3, [pc, #260]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	493d      	ldr	r1, [pc, #244]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bab6:	e040      	b.n	800bb3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d023      	beq.n	800bb08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bac0:	4b39      	ldr	r3, [pc, #228]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a38      	ldr	r2, [pc, #224]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bac6:	f043 0301 	orr.w	r3, r3, #1
 800baca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bacc:	f7fd f96e 	bl	8008dac <HAL_GetTick>
 800bad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bad2:	e008      	b.n	800bae6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bad4:	f7fd f96a 	bl	8008dac <HAL_GetTick>
 800bad8:	4602      	mov	r2, r0
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d901      	bls.n	800bae6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e1c7      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bae6:	4b30      	ldr	r3, [pc, #192]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0f0      	beq.n	800bad4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baf2:	4b2d      	ldr	r3, [pc, #180]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	4929      	ldr	r1, [pc, #164]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb02:	4313      	orrs	r3, r2
 800bb04:	600b      	str	r3, [r1, #0]
 800bb06:	e018      	b.n	800bb3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb08:	4b27      	ldr	r3, [pc, #156]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a26      	ldr	r2, [pc, #152]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb0e:	f023 0301 	bic.w	r3, r3, #1
 800bb12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb14:	f7fd f94a 	bl	8008dac <HAL_GetTick>
 800bb18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb1a:	e008      	b.n	800bb2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb1c:	f7fd f946 	bl	8008dac <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d901      	bls.n	800bb2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e1a3      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb2e:	4b1e      	ldr	r3, [pc, #120]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1f0      	bne.n	800bb1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0308 	and.w	r3, r3, #8
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d038      	beq.n	800bbb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d019      	beq.n	800bb82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb4e:	4b16      	ldr	r3, [pc, #88]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb52:	4a15      	ldr	r2, [pc, #84]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb54:	f043 0301 	orr.w	r3, r3, #1
 800bb58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb5a:	f7fd f927 	bl	8008dac <HAL_GetTick>
 800bb5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb60:	e008      	b.n	800bb74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb62:	f7fd f923 	bl	8008dac <HAL_GetTick>
 800bb66:	4602      	mov	r2, r0
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d901      	bls.n	800bb74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e180      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb78:	f003 0302 	and.w	r3, r3, #2
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0f0      	beq.n	800bb62 <HAL_RCC_OscConfig+0x23a>
 800bb80:	e01a      	b.n	800bbb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb82:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb86:	4a08      	ldr	r2, [pc, #32]	; (800bba8 <HAL_RCC_OscConfig+0x280>)
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb8e:	f7fd f90d 	bl	8008dac <HAL_GetTick>
 800bb92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb94:	e00a      	b.n	800bbac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb96:	f7fd f909 	bl	8008dac <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d903      	bls.n	800bbac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e166      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
 800bba8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbac:	4b92      	ldr	r3, [pc, #584]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bbae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1ee      	bne.n	800bb96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 80a4 	beq.w	800bd0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbc6:	4b8c      	ldr	r3, [pc, #560]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10d      	bne.n	800bbee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbd2:	4b89      	ldr	r3, [pc, #548]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd6:	4a88      	ldr	r2, [pc, #544]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bbd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbdc:	6413      	str	r3, [r2, #64]	; 0x40
 800bbde:	4b86      	ldr	r3, [pc, #536]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbe6:	60bb      	str	r3, [r7, #8]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bbea:	2301      	movs	r3, #1
 800bbec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bbee:	4b83      	ldr	r3, [pc, #524]	; (800bdfc <HAL_RCC_OscConfig+0x4d4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d118      	bne.n	800bc2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bbfa:	4b80      	ldr	r3, [pc, #512]	; (800bdfc <HAL_RCC_OscConfig+0x4d4>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a7f      	ldr	r2, [pc, #508]	; (800bdfc <HAL_RCC_OscConfig+0x4d4>)
 800bc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc06:	f7fd f8d1 	bl	8008dac <HAL_GetTick>
 800bc0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc0c:	e008      	b.n	800bc20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc0e:	f7fd f8cd 	bl	8008dac <HAL_GetTick>
 800bc12:	4602      	mov	r2, r0
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	2b64      	cmp	r3, #100	; 0x64
 800bc1a:	d901      	bls.n	800bc20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e12a      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc20:	4b76      	ldr	r3, [pc, #472]	; (800bdfc <HAL_RCC_OscConfig+0x4d4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d0f0      	beq.n	800bc0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d106      	bne.n	800bc42 <HAL_RCC_OscConfig+0x31a>
 800bc34:	4b70      	ldr	r3, [pc, #448]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc38:	4a6f      	ldr	r2, [pc, #444]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc3a:	f043 0301 	orr.w	r3, r3, #1
 800bc3e:	6713      	str	r3, [r2, #112]	; 0x70
 800bc40:	e02d      	b.n	800bc9e <HAL_RCC_OscConfig+0x376>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10c      	bne.n	800bc64 <HAL_RCC_OscConfig+0x33c>
 800bc4a:	4b6b      	ldr	r3, [pc, #428]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc4e:	4a6a      	ldr	r2, [pc, #424]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc50:	f023 0301 	bic.w	r3, r3, #1
 800bc54:	6713      	str	r3, [r2, #112]	; 0x70
 800bc56:	4b68      	ldr	r3, [pc, #416]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5a:	4a67      	ldr	r2, [pc, #412]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc5c:	f023 0304 	bic.w	r3, r3, #4
 800bc60:	6713      	str	r3, [r2, #112]	; 0x70
 800bc62:	e01c      	b.n	800bc9e <HAL_RCC_OscConfig+0x376>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	2b05      	cmp	r3, #5
 800bc6a:	d10c      	bne.n	800bc86 <HAL_RCC_OscConfig+0x35e>
 800bc6c:	4b62      	ldr	r3, [pc, #392]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc70:	4a61      	ldr	r2, [pc, #388]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc72:	f043 0304 	orr.w	r3, r3, #4
 800bc76:	6713      	str	r3, [r2, #112]	; 0x70
 800bc78:	4b5f      	ldr	r3, [pc, #380]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7c:	4a5e      	ldr	r2, [pc, #376]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc7e:	f043 0301 	orr.w	r3, r3, #1
 800bc82:	6713      	str	r3, [r2, #112]	; 0x70
 800bc84:	e00b      	b.n	800bc9e <HAL_RCC_OscConfig+0x376>
 800bc86:	4b5c      	ldr	r3, [pc, #368]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc8a:	4a5b      	ldr	r2, [pc, #364]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc8c:	f023 0301 	bic.w	r3, r3, #1
 800bc90:	6713      	str	r3, [r2, #112]	; 0x70
 800bc92:	4b59      	ldr	r3, [pc, #356]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc96:	4a58      	ldr	r2, [pc, #352]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bc98:	f023 0304 	bic.w	r3, r3, #4
 800bc9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d015      	beq.n	800bcd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bca6:	f7fd f881 	bl	8008dac <HAL_GetTick>
 800bcaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcac:	e00a      	b.n	800bcc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcae:	f7fd f87d 	bl	8008dac <HAL_GetTick>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d901      	bls.n	800bcc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	e0d8      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcc4:	4b4c      	ldr	r3, [pc, #304]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bcc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0ee      	beq.n	800bcae <HAL_RCC_OscConfig+0x386>
 800bcd0:	e014      	b.n	800bcfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcd2:	f7fd f86b 	bl	8008dac <HAL_GetTick>
 800bcd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcd8:	e00a      	b.n	800bcf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcda:	f7fd f867 	bl	8008dac <HAL_GetTick>
 800bcde:	4602      	mov	r2, r0
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d901      	bls.n	800bcf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800bcec:	2303      	movs	r3, #3
 800bcee:	e0c2      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcf0:	4b41      	ldr	r3, [pc, #260]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bcf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1ee      	bne.n	800bcda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d105      	bne.n	800bd0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd02:	4b3d      	ldr	r3, [pc, #244]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd06:	4a3c      	ldr	r2, [pc, #240]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f000 80ae 	beq.w	800be74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bd18:	4b37      	ldr	r3, [pc, #220]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f003 030c 	and.w	r3, r3, #12
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	d06d      	beq.n	800be00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d14b      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd2c:	4b32      	ldr	r3, [pc, #200]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a31      	ldr	r2, [pc, #196]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd38:	f7fd f838 	bl	8008dac <HAL_GetTick>
 800bd3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd3e:	e008      	b.n	800bd52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd40:	f7fd f834 	bl	8008dac <HAL_GetTick>
 800bd44:	4602      	mov	r2, r0
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d901      	bls.n	800bd52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e091      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd52:	4b29      	ldr	r3, [pc, #164]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1f0      	bne.n	800bd40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	69da      	ldr	r2, [r3, #28]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	431a      	orrs	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	019b      	lsls	r3, r3, #6
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	3b01      	subs	r3, #1
 800bd78:	041b      	lsls	r3, r3, #16
 800bd7a:	431a      	orrs	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	061b      	lsls	r3, r3, #24
 800bd82:	431a      	orrs	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd88:	071b      	lsls	r3, r3, #28
 800bd8a:	491b      	ldr	r1, [pc, #108]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd90:	4b19      	ldr	r3, [pc, #100]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a18      	ldr	r2, [pc, #96]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bd96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd9c:	f7fd f806 	bl	8008dac <HAL_GetTick>
 800bda0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bda2:	e008      	b.n	800bdb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bda4:	f7fd f802 	bl	8008dac <HAL_GetTick>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d901      	bls.n	800bdb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e05f      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdb6:	4b10      	ldr	r3, [pc, #64]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0f0      	beq.n	800bda4 <HAL_RCC_OscConfig+0x47c>
 800bdc2:	e057      	b.n	800be74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdc4:	4b0c      	ldr	r3, [pc, #48]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a0b      	ldr	r2, [pc, #44]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bdca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdd0:	f7fc ffec 	bl	8008dac <HAL_GetTick>
 800bdd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdd6:	e008      	b.n	800bdea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdd8:	f7fc ffe8 	bl	8008dac <HAL_GetTick>
 800bddc:	4602      	mov	r2, r0
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d901      	bls.n	800bdea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e045      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdea:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <HAL_RCC_OscConfig+0x4d0>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1f0      	bne.n	800bdd8 <HAL_RCC_OscConfig+0x4b0>
 800bdf6:	e03d      	b.n	800be74 <HAL_RCC_OscConfig+0x54c>
 800bdf8:	40023800 	.word	0x40023800
 800bdfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800be00:	4b1f      	ldr	r3, [pc, #124]	; (800be80 <HAL_RCC_OscConfig+0x558>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d030      	beq.n	800be70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be18:	429a      	cmp	r2, r3
 800be1a:	d129      	bne.n	800be70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be26:	429a      	cmp	r2, r3
 800be28:	d122      	bne.n	800be70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800be30:	4013      	ands	r3, r2
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800be38:	4293      	cmp	r3, r2
 800be3a:	d119      	bne.n	800be70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be46:	085b      	lsrs	r3, r3, #1
 800be48:	3b01      	subs	r3, #1
 800be4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d10f      	bne.n	800be70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d107      	bne.n	800be70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d001      	beq.n	800be74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	e000      	b.n	800be76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	40023800 	.word	0x40023800

0800be84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e0d0      	b.n	800c03e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be9c:	4b6a      	ldr	r3, [pc, #424]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 030f 	and.w	r3, r3, #15
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d910      	bls.n	800becc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beaa:	4b67      	ldr	r3, [pc, #412]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f023 020f 	bic.w	r2, r3, #15
 800beb2:	4965      	ldr	r1, [pc, #404]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800beba:	4b63      	ldr	r3, [pc, #396]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 030f 	and.w	r3, r3, #15
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d001      	beq.n	800becc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bec8:	2301      	movs	r3, #1
 800beca:	e0b8      	b.n	800c03e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0302 	and.w	r3, r3, #2
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d020      	beq.n	800bf1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d005      	beq.n	800bef0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bee4:	4b59      	ldr	r3, [pc, #356]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	4a58      	ldr	r2, [pc, #352]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800beea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800beee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 0308 	and.w	r3, r3, #8
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d005      	beq.n	800bf08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800befc:	4b53      	ldr	r3, [pc, #332]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	4a52      	ldr	r2, [pc, #328]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bf06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf08:	4b50      	ldr	r3, [pc, #320]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	494d      	ldr	r1, [pc, #308]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d040      	beq.n	800bfa8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d107      	bne.n	800bf3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf2e:	4b47      	ldr	r3, [pc, #284]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d115      	bne.n	800bf66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e07f      	b.n	800c03e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d107      	bne.n	800bf56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf46:	4b41      	ldr	r3, [pc, #260]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e073      	b.n	800c03e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf56:	4b3d      	ldr	r3, [pc, #244]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d101      	bne.n	800bf66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e06b      	b.n	800c03e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf66:	4b39      	ldr	r3, [pc, #228]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f023 0203 	bic.w	r2, r3, #3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	4936      	ldr	r1, [pc, #216]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf74:	4313      	orrs	r3, r2
 800bf76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf78:	f7fc ff18 	bl	8008dac <HAL_GetTick>
 800bf7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf7e:	e00a      	b.n	800bf96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf80:	f7fc ff14 	bl	8008dac <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d901      	bls.n	800bf96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e053      	b.n	800c03e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf96:	4b2d      	ldr	r3, [pc, #180]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f003 020c 	and.w	r2, r3, #12
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d1eb      	bne.n	800bf80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfa8:	4b27      	ldr	r3, [pc, #156]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 030f 	and.w	r3, r3, #15
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d210      	bcs.n	800bfd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfb6:	4b24      	ldr	r3, [pc, #144]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f023 020f 	bic.w	r2, r3, #15
 800bfbe:	4922      	ldr	r1, [pc, #136]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfc6:	4b20      	ldr	r3, [pc, #128]	; (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 030f 	and.w	r3, r3, #15
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d001      	beq.n	800bfd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e032      	b.n	800c03e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d008      	beq.n	800bff6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bfe4:	4b19      	ldr	r3, [pc, #100]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	4916      	ldr	r1, [pc, #88]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0308 	and.w	r3, r3, #8
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d009      	beq.n	800c016 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c002:	4b12      	ldr	r3, [pc, #72]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	490e      	ldr	r1, [pc, #56]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800c012:	4313      	orrs	r3, r2
 800c014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c016:	f000 f821 	bl	800c05c <HAL_RCC_GetSysClockFreq>
 800c01a:	4601      	mov	r1, r0
 800c01c:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	091b      	lsrs	r3, r3, #4
 800c022:	f003 030f 	and.w	r3, r3, #15
 800c026:	4a0a      	ldr	r2, [pc, #40]	; (800c050 <HAL_RCC_ClockConfig+0x1cc>)
 800c028:	5cd3      	ldrb	r3, [r2, r3]
 800c02a:	fa21 f303 	lsr.w	r3, r1, r3
 800c02e:	4a09      	ldr	r2, [pc, #36]	; (800c054 <HAL_RCC_ClockConfig+0x1d0>)
 800c030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c032:	4b09      	ldr	r3, [pc, #36]	; (800c058 <HAL_RCC_ClockConfig+0x1d4>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4618      	mov	r0, r3
 800c038:	f7fc f978 	bl	800832c <HAL_InitTick>

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	40023c00 	.word	0x40023c00
 800c04c:	40023800 	.word	0x40023800
 800c050:	08017118 	.word	0x08017118
 800c054:	200001a8 	.word	0x200001a8
 800c058:	200001ac 	.word	0x200001ac

0800c05c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c062:	2300      	movs	r3, #0
 800c064:	607b      	str	r3, [r7, #4]
 800c066:	2300      	movs	r3, #0
 800c068:	60fb      	str	r3, [r7, #12]
 800c06a:	2300      	movs	r3, #0
 800c06c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c072:	4b50      	ldr	r3, [pc, #320]	; (800c1b4 <HAL_RCC_GetSysClockFreq+0x158>)
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f003 030c 	and.w	r3, r3, #12
 800c07a:	2b04      	cmp	r3, #4
 800c07c:	d007      	beq.n	800c08e <HAL_RCC_GetSysClockFreq+0x32>
 800c07e:	2b08      	cmp	r3, #8
 800c080:	d008      	beq.n	800c094 <HAL_RCC_GetSysClockFreq+0x38>
 800c082:	2b00      	cmp	r3, #0
 800c084:	f040 808d 	bne.w	800c1a2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c088:	4b4b      	ldr	r3, [pc, #300]	; (800c1b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c08a:	60bb      	str	r3, [r7, #8]
      break;
 800c08c:	e08c      	b.n	800c1a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c08e:	4b4b      	ldr	r3, [pc, #300]	; (800c1bc <HAL_RCC_GetSysClockFreq+0x160>)
 800c090:	60bb      	str	r3, [r7, #8]
      break;
 800c092:	e089      	b.n	800c1a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c094:	4b47      	ldr	r3, [pc, #284]	; (800c1b4 <HAL_RCC_GetSysClockFreq+0x158>)
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c09c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c09e:	4b45      	ldr	r3, [pc, #276]	; (800c1b4 <HAL_RCC_GetSysClockFreq+0x158>)
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d023      	beq.n	800c0f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0aa:	4b42      	ldr	r3, [pc, #264]	; (800c1b4 <HAL_RCC_GetSysClockFreq+0x158>)
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	099b      	lsrs	r3, r3, #6
 800c0b0:	f04f 0400 	mov.w	r4, #0
 800c0b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c0b8:	f04f 0200 	mov.w	r2, #0
 800c0bc:	ea03 0501 	and.w	r5, r3, r1
 800c0c0:	ea04 0602 	and.w	r6, r4, r2
 800c0c4:	4a3d      	ldr	r2, [pc, #244]	; (800c1bc <HAL_RCC_GetSysClockFreq+0x160>)
 800c0c6:	fb02 f106 	mul.w	r1, r2, r6
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	fb02 f205 	mul.w	r2, r2, r5
 800c0d0:	440a      	add	r2, r1
 800c0d2:	493a      	ldr	r1, [pc, #232]	; (800c1bc <HAL_RCC_GetSysClockFreq+0x160>)
 800c0d4:	fba5 0101 	umull	r0, r1, r5, r1
 800c0d8:	1853      	adds	r3, r2, r1
 800c0da:	4619      	mov	r1, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f04f 0400 	mov.w	r4, #0
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	4623      	mov	r3, r4
 800c0e6:	f7f4 f903 	bl	80002f0 <__aeabi_uldivmod>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	e049      	b.n	800c186 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0f2:	4b30      	ldr	r3, [pc, #192]	; (800c1b4 <HAL_RCC_GetSysClockFreq+0x158>)
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	099b      	lsrs	r3, r3, #6
 800c0f8:	f04f 0400 	mov.w	r4, #0
 800c0fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c100:	f04f 0200 	mov.w	r2, #0
 800c104:	ea03 0501 	and.w	r5, r3, r1
 800c108:	ea04 0602 	and.w	r6, r4, r2
 800c10c:	4629      	mov	r1, r5
 800c10e:	4632      	mov	r2, r6
 800c110:	f04f 0300 	mov.w	r3, #0
 800c114:	f04f 0400 	mov.w	r4, #0
 800c118:	0154      	lsls	r4, r2, #5
 800c11a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c11e:	014b      	lsls	r3, r1, #5
 800c120:	4619      	mov	r1, r3
 800c122:	4622      	mov	r2, r4
 800c124:	1b49      	subs	r1, r1, r5
 800c126:	eb62 0206 	sbc.w	r2, r2, r6
 800c12a:	f04f 0300 	mov.w	r3, #0
 800c12e:	f04f 0400 	mov.w	r4, #0
 800c132:	0194      	lsls	r4, r2, #6
 800c134:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c138:	018b      	lsls	r3, r1, #6
 800c13a:	1a5b      	subs	r3, r3, r1
 800c13c:	eb64 0402 	sbc.w	r4, r4, r2
 800c140:	f04f 0100 	mov.w	r1, #0
 800c144:	f04f 0200 	mov.w	r2, #0
 800c148:	00e2      	lsls	r2, r4, #3
 800c14a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c14e:	00d9      	lsls	r1, r3, #3
 800c150:	460b      	mov	r3, r1
 800c152:	4614      	mov	r4, r2
 800c154:	195b      	adds	r3, r3, r5
 800c156:	eb44 0406 	adc.w	r4, r4, r6
 800c15a:	f04f 0100 	mov.w	r1, #0
 800c15e:	f04f 0200 	mov.w	r2, #0
 800c162:	02a2      	lsls	r2, r4, #10
 800c164:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c168:	0299      	lsls	r1, r3, #10
 800c16a:	460b      	mov	r3, r1
 800c16c:	4614      	mov	r4, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	4621      	mov	r1, r4
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f04f 0400 	mov.w	r4, #0
 800c178:	461a      	mov	r2, r3
 800c17a:	4623      	mov	r3, r4
 800c17c:	f7f4 f8b8 	bl	80002f0 <__aeabi_uldivmod>
 800c180:	4603      	mov	r3, r0
 800c182:	460c      	mov	r4, r1
 800c184:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c186:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <HAL_RCC_GetSysClockFreq+0x158>)
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	f003 0303 	and.w	r3, r3, #3
 800c190:	3301      	adds	r3, #1
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c19e:	60bb      	str	r3, [r7, #8]
      break;
 800c1a0:	e002      	b.n	800c1a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c1a2:	4b05      	ldr	r3, [pc, #20]	; (800c1b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c1a4:	60bb      	str	r3, [r7, #8]
      break;
 800c1a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	40023800 	.word	0x40023800
 800c1b8:	00f42400 	.word	0x00f42400
 800c1bc:	017d7840 	.word	0x017d7840

0800c1c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c1c4:	4b03      	ldr	r3, [pc, #12]	; (800c1d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	200001a8 	.word	0x200001a8

0800c1d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c1dc:	f7ff fff0 	bl	800c1c0 <HAL_RCC_GetHCLKFreq>
 800c1e0:	4601      	mov	r1, r0
 800c1e2:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	0a9b      	lsrs	r3, r3, #10
 800c1e8:	f003 0307 	and.w	r3, r3, #7
 800c1ec:	4a03      	ldr	r2, [pc, #12]	; (800c1fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1ee:	5cd3      	ldrb	r3, [r2, r3]
 800c1f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	40023800 	.word	0x40023800
 800c1fc:	08017128 	.word	0x08017128

0800c200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c204:	f7ff ffdc 	bl	800c1c0 <HAL_RCC_GetHCLKFreq>
 800c208:	4601      	mov	r1, r0
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	0b5b      	lsrs	r3, r3, #13
 800c210:	f003 0307 	and.w	r3, r3, #7
 800c214:	4a03      	ldr	r2, [pc, #12]	; (800c224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c216:	5cd3      	ldrb	r3, [r2, r3]
 800c218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	40023800 	.word	0x40023800
 800c224:	08017128 	.word	0x08017128

0800c228 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	220f      	movs	r2, #15
 800c236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c238:	4b12      	ldr	r3, [pc, #72]	; (800c284 <HAL_RCC_GetClockConfig+0x5c>)
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f003 0203 	and.w	r2, r3, #3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c244:	4b0f      	ldr	r3, [pc, #60]	; (800c284 <HAL_RCC_GetClockConfig+0x5c>)
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c250:	4b0c      	ldr	r3, [pc, #48]	; (800c284 <HAL_RCC_GetClockConfig+0x5c>)
 800c252:	689b      	ldr	r3, [r3, #8]
 800c254:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c25c:	4b09      	ldr	r3, [pc, #36]	; (800c284 <HAL_RCC_GetClockConfig+0x5c>)
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	08db      	lsrs	r3, r3, #3
 800c262:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <HAL_RCC_GetClockConfig+0x60>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 020f 	and.w	r2, r3, #15
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	601a      	str	r2, [r3, #0]
}
 800c276:	bf00      	nop
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	40023800 	.word	0x40023800
 800c288:	40023c00 	.word	0x40023c00

0800c28c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d012      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c2b4:	4b69      	ldr	r3, [pc, #420]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	4a68      	ldr	r2, [pc, #416]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c2be:	6093      	str	r3, [r2, #8]
 800c2c0:	4b66      	ldr	r3, [pc, #408]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2c2:	689a      	ldr	r2, [r3, #8]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2c8:	4964      	ldr	r1, [pc, #400]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d017      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2e6:	4b5d      	ldr	r3, [pc, #372]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f4:	4959      	ldr	r1, [pc, #356]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c304:	d101      	bne.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c306:	2301      	movs	r3, #1
 800c308:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c312:	2301      	movs	r3, #1
 800c314:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d017      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c322:	4b4e      	ldr	r3, [pc, #312]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c328:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c330:	494a      	ldr	r1, [pc, #296]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c332:	4313      	orrs	r3, r2
 800c334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c340:	d101      	bne.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c342:	2301      	movs	r3, #1
 800c344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c34e:	2301      	movs	r3, #1
 800c350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c35e:	2301      	movs	r3, #1
 800c360:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 0320 	and.w	r3, r3, #32
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 808b 	beq.w	800c486 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c370:	4b3a      	ldr	r3, [pc, #232]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c374:	4a39      	ldr	r2, [pc, #228]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c37a:	6413      	str	r3, [r2, #64]	; 0x40
 800c37c:	4b37      	ldr	r3, [pc, #220]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c384:	60bb      	str	r3, [r7, #8]
 800c386:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c388:	4b35      	ldr	r3, [pc, #212]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a34      	ldr	r2, [pc, #208]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c38e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c394:	f7fc fd0a 	bl	8008dac <HAL_GetTick>
 800c398:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c39a:	e008      	b.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c39c:	f7fc fd06 	bl	8008dac <HAL_GetTick>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	2b64      	cmp	r3, #100	; 0x64
 800c3a8:	d901      	bls.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	e38d      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c3ae:	4b2c      	ldr	r3, [pc, #176]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0f0      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c3ba:	4b28      	ldr	r3, [pc, #160]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d035      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3d2:	693a      	ldr	r2, [r7, #16]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d02e      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c3d8:	4b20      	ldr	r3, [pc, #128]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c3e2:	4b1e      	ldr	r3, [pc, #120]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3e6:	4a1d      	ldr	r2, [pc, #116]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c3ee:	4b1b      	ldr	r3, [pc, #108]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3f2:	4a1a      	ldr	r2, [pc, #104]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c3fa:	4a18      	ldr	r2, [pc, #96]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c400:	4b16      	ldr	r3, [pc, #88]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d114      	bne.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c40c:	f7fc fcce 	bl	8008dac <HAL_GetTick>
 800c410:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c412:	e00a      	b.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c414:	f7fc fcca 	bl	8008dac <HAL_GetTick>
 800c418:	4602      	mov	r2, r0
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c422:	4293      	cmp	r3, r2
 800c424:	d901      	bls.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e34f      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c42a:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42e:	f003 0302 	and.w	r3, r3, #2
 800c432:	2b00      	cmp	r3, #0
 800c434:	d0ee      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c43e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c442:	d111      	bne.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c444:	4b05      	ldr	r3, [pc, #20]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c450:	4b04      	ldr	r3, [pc, #16]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c452:	400b      	ands	r3, r1
 800c454:	4901      	ldr	r1, [pc, #4]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c456:	4313      	orrs	r3, r2
 800c458:	608b      	str	r3, [r1, #8]
 800c45a:	e00b      	b.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c45c:	40023800 	.word	0x40023800
 800c460:	40007000 	.word	0x40007000
 800c464:	0ffffcff 	.word	0x0ffffcff
 800c468:	4bb3      	ldr	r3, [pc, #716]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	4ab2      	ldr	r2, [pc, #712]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c46e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c472:	6093      	str	r3, [r2, #8]
 800c474:	4bb0      	ldr	r3, [pc, #704]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c480:	49ad      	ldr	r1, [pc, #692]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c482:	4313      	orrs	r3, r2
 800c484:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0310 	and.w	r3, r3, #16
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d010      	beq.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c492:	4ba9      	ldr	r3, [pc, #676]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c498:	4aa7      	ldr	r2, [pc, #668]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c49a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c49e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c4a2:	4ba5      	ldr	r3, [pc, #660]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c4a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	49a2      	ldr	r1, [pc, #648]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00a      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c4c0:	4b9d      	ldr	r3, [pc, #628]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4ce:	499a      	ldr	r1, [pc, #616]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c4e2:	4b95      	ldr	r3, [pc, #596]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4f0:	4991      	ldr	r1, [pc, #580]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00a      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c504:	4b8c      	ldr	r3, [pc, #560]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c50a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c512:	4989      	ldr	r1, [pc, #548]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c514:	4313      	orrs	r3, r2
 800c516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c526:	4b84      	ldr	r3, [pc, #528]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c52c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c534:	4980      	ldr	r1, [pc, #512]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c536:	4313      	orrs	r3, r2
 800c538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00a      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c548:	4b7b      	ldr	r3, [pc, #492]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c54e:	f023 0203 	bic.w	r2, r3, #3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c556:	4978      	ldr	r1, [pc, #480]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c56a:	4b73      	ldr	r3, [pc, #460]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c570:	f023 020c 	bic.w	r2, r3, #12
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c578:	496f      	ldr	r1, [pc, #444]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c57a:	4313      	orrs	r3, r2
 800c57c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00a      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c58c:	4b6a      	ldr	r3, [pc, #424]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c592:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c59a:	4967      	ldr	r1, [pc, #412]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c59c:	4313      	orrs	r3, r2
 800c59e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00a      	beq.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c5ae:	4b62      	ldr	r3, [pc, #392]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5bc:	495e      	ldr	r1, [pc, #376]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00a      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c5d0:	4b59      	ldr	r3, [pc, #356]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5de:	4956      	ldr	r1, [pc, #344]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00a      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c5f2:	4b51      	ldr	r3, [pc, #324]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c600:	494d      	ldr	r1, [pc, #308]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c602:	4313      	orrs	r3, r2
 800c604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00a      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c614:	4b48      	ldr	r3, [pc, #288]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c61a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c622:	4945      	ldr	r1, [pc, #276]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c624:	4313      	orrs	r3, r2
 800c626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00a      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c636:	4b40      	ldr	r3, [pc, #256]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c63c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c644:	493c      	ldr	r1, [pc, #240]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c646:	4313      	orrs	r3, r2
 800c648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00a      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c658:	4b37      	ldr	r3, [pc, #220]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c65e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c666:	4934      	ldr	r1, [pc, #208]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c668:	4313      	orrs	r3, r2
 800c66a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d011      	beq.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c67a:	4b2f      	ldr	r3, [pc, #188]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c680:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c688:	492b      	ldr	r1, [pc, #172]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c68a:	4313      	orrs	r3, r2
 800c68c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c698:	d101      	bne.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c69a:	2301      	movs	r3, #1
 800c69c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 0308 	and.w	r3, r3, #8
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00a      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6ba:	4b1f      	ldr	r3, [pc, #124]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c8:	491b      	ldr	r1, [pc, #108]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00b      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c6dc:	4b16      	ldr	r3, [pc, #88]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ec:	4912      	ldr	r1, [pc, #72]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c700:	4b0d      	ldr	r3, [pc, #52]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c706:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c710:	4909      	ldr	r1, [pc, #36]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c712:	4313      	orrs	r3, r2
 800c714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00f      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c724:	4b04      	ldr	r3, [pc, #16]	; (800c738 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c72a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c734:	e002      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800c736:	bf00      	nop
 800c738:	40023800 	.word	0x40023800
 800c73c:	4985      	ldr	r1, [pc, #532]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00b      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c750:	4b80      	ldr	r3, [pc, #512]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c756:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c760:	497c      	ldr	r1, [pc, #496]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c762:	4313      	orrs	r3, r2
 800c764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d005      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c776:	f040 80d6 	bne.w	800c926 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c77a:	4b76      	ldr	r3, [pc, #472]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a75      	ldr	r2, [pc, #468]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c786:	f7fc fb11 	bl	8008dac <HAL_GetTick>
 800c78a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c78c:	e008      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c78e:	f7fc fb0d 	bl	8008dac <HAL_GetTick>
 800c792:	4602      	mov	r2, r0
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	2b64      	cmp	r3, #100	; 0x64
 800c79a:	d901      	bls.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c79c:	2303      	movs	r3, #3
 800c79e:	e194      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c7a0:	4b6c      	ldr	r3, [pc, #432]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1f0      	bne.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d021      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x570>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d11d      	bne.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c7c0:	4b64      	ldr	r3, [pc, #400]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7c6:	0c1b      	lsrs	r3, r3, #16
 800c7c8:	f003 0303 	and.w	r3, r3, #3
 800c7cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c7ce:	4b61      	ldr	r3, [pc, #388]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7d4:	0e1b      	lsrs	r3, r3, #24
 800c7d6:	f003 030f 	and.w	r3, r3, #15
 800c7da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	019a      	lsls	r2, r3, #6
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	041b      	lsls	r3, r3, #16
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	061b      	lsls	r3, r3, #24
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	071b      	lsls	r3, r3, #28
 800c7f4:	4957      	ldr	r1, [pc, #348]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d004      	beq.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c810:	d00a      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d02e      	beq.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c826:	d129      	bne.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c828:	4b4a      	ldr	r3, [pc, #296]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c82e:	0c1b      	lsrs	r3, r3, #16
 800c830:	f003 0303 	and.w	r3, r3, #3
 800c834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c836:	4b47      	ldr	r3, [pc, #284]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c83c:	0f1b      	lsrs	r3, r3, #28
 800c83e:	f003 0307 	and.w	r3, r3, #7
 800c842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	019a      	lsls	r2, r3, #6
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	041b      	lsls	r3, r3, #16
 800c84e:	431a      	orrs	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	061b      	lsls	r3, r3, #24
 800c856:	431a      	orrs	r2, r3
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	071b      	lsls	r3, r3, #28
 800c85c:	493d      	ldr	r1, [pc, #244]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c864:	4b3b      	ldr	r3, [pc, #236]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c86a:	f023 021f 	bic.w	r2, r3, #31
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c872:	3b01      	subs	r3, #1
 800c874:	4937      	ldr	r1, [pc, #220]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c876:	4313      	orrs	r3, r2
 800c878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d01d      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c888:	4b32      	ldr	r3, [pc, #200]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c88a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c88e:	0e1b      	lsrs	r3, r3, #24
 800c890:	f003 030f 	and.w	r3, r3, #15
 800c894:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c896:	4b2f      	ldr	r3, [pc, #188]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c89c:	0f1b      	lsrs	r3, r3, #28
 800c89e:	f003 0307 	and.w	r3, r3, #7
 800c8a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	019a      	lsls	r2, r3, #6
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	041b      	lsls	r3, r3, #16
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	061b      	lsls	r3, r3, #24
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	071b      	lsls	r3, r3, #28
 800c8bc:	4925      	ldr	r1, [pc, #148]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d011      	beq.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	019a      	lsls	r2, r3, #6
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	041b      	lsls	r3, r3, #16
 800c8dc:	431a      	orrs	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	061b      	lsls	r3, r3, #24
 800c8e4:	431a      	orrs	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	071b      	lsls	r3, r3, #28
 800c8ec:	4919      	ldr	r1, [pc, #100]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c8f4:	4b17      	ldr	r3, [pc, #92]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a16      	ldr	r2, [pc, #88]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c8fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c900:	f7fc fa54 	bl	8008dac <HAL_GetTick>
 800c904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c906:	e008      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c908:	f7fc fa50 	bl	8008dac <HAL_GetTick>
 800c90c:	4602      	mov	r2, r0
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	2b64      	cmp	r3, #100	; 0x64
 800c914:	d901      	bls.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c916:	2303      	movs	r3, #3
 800c918:	e0d7      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c91a:	4b0e      	ldr	r3, [pc, #56]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0f0      	beq.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	f040 80cd 	bne.w	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c92e:	4b09      	ldr	r3, [pc, #36]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a08      	ldr	r2, [pc, #32]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c93a:	f7fc fa37 	bl	8008dac <HAL_GetTick>
 800c93e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c940:	e00a      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c942:	f7fc fa33 	bl	8008dac <HAL_GetTick>
 800c946:	4602      	mov	r2, r0
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	2b64      	cmp	r3, #100	; 0x64
 800c94e:	d903      	bls.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	e0ba      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800c954:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c958:	4b5e      	ldr	r3, [pc, #376]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c964:	d0ed      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d003      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d009      	beq.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c982:	2b00      	cmp	r3, #0
 800c984:	d02e      	beq.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d12a      	bne.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c98e:	4b51      	ldr	r3, [pc, #324]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c994:	0c1b      	lsrs	r3, r3, #16
 800c996:	f003 0303 	and.w	r3, r3, #3
 800c99a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c99c:	4b4d      	ldr	r3, [pc, #308]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9a2:	0f1b      	lsrs	r3, r3, #28
 800c9a4:	f003 0307 	and.w	r3, r3, #7
 800c9a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	019a      	lsls	r2, r3, #6
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	041b      	lsls	r3, r3, #16
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	061b      	lsls	r3, r3, #24
 800c9bc:	431a      	orrs	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	071b      	lsls	r3, r3, #28
 800c9c2:	4944      	ldr	r1, [pc, #272]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c9ca:	4b42      	ldr	r3, [pc, #264]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	021b      	lsls	r3, r3, #8
 800c9dc:	493d      	ldr	r1, [pc, #244]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d022      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9f8:	d11d      	bne.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c9fa:	4b36      	ldr	r3, [pc, #216]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca00:	0e1b      	lsrs	r3, r3, #24
 800ca02:	f003 030f 	and.w	r3, r3, #15
 800ca06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ca08:	4b32      	ldr	r3, [pc, #200]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca0e:	0f1b      	lsrs	r3, r3, #28
 800ca10:	f003 0307 	and.w	r3, r3, #7
 800ca14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	019a      	lsls	r2, r3, #6
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	041b      	lsls	r3, r3, #16
 800ca22:	431a      	orrs	r2, r3
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	061b      	lsls	r3, r3, #24
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	071b      	lsls	r3, r3, #28
 800ca2e:	4929      	ldr	r1, [pc, #164]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca30:	4313      	orrs	r3, r2
 800ca32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0308 	and.w	r3, r3, #8
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d028      	beq.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca42:	4b24      	ldr	r3, [pc, #144]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca48:	0e1b      	lsrs	r3, r3, #24
 800ca4a:	f003 030f 	and.w	r3, r3, #15
 800ca4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ca50:	4b20      	ldr	r3, [pc, #128]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca56:	0c1b      	lsrs	r3, r3, #16
 800ca58:	f003 0303 	and.w	r3, r3, #3
 800ca5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	019a      	lsls	r2, r3, #6
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	041b      	lsls	r3, r3, #16
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	061b      	lsls	r3, r3, #24
 800ca6e:	431a      	orrs	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	071b      	lsls	r3, r3, #28
 800ca76:	4917      	ldr	r1, [pc, #92]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ca7e:	4b15      	ldr	r3, [pc, #84]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8c:	4911      	ldr	r1, [pc, #68]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ca94:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a0e      	ldr	r2, [pc, #56]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ca9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caa0:	f7fc f984 	bl	8008dac <HAL_GetTick>
 800caa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800caa6:	e008      	b.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800caa8:	f7fc f980 	bl	8008dac <HAL_GetTick>
 800caac:	4602      	mov	r2, r0
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	2b64      	cmp	r3, #100	; 0x64
 800cab4:	d901      	bls.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cab6:	2303      	movs	r3, #3
 800cab8:	e007      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800caba:	4b06      	ldr	r3, [pc, #24]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cac6:	d1ef      	bne.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3720      	adds	r7, #32
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	40023800 	.word	0x40023800

0800cad8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e06b      	b.n	800cbc2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7f5b      	ldrb	r3, [r3, #29]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7fb f986 	bl	8007e0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2202      	movs	r2, #2
 800cb04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	22ca      	movs	r2, #202	; 0xca
 800cb0c:	625a      	str	r2, [r3, #36]	; 0x24
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2253      	movs	r2, #83	; 0x53
 800cb14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f85a 	bl	800cbd0 <RTC_EnterInitMode>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d008      	beq.n	800cb34 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	22ff      	movs	r2, #255	; 0xff
 800cb28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2204      	movs	r2, #4
 800cb2e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e046      	b.n	800cbc2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6899      	ldr	r1, [r3, #8]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b23      	ldr	r3, [pc, #140]	; (800cbcc <HAL_RTC_Init+0xf4>)
 800cb40:	400b      	ands	r3, r1
 800cb42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6899      	ldr	r1, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685a      	ldr	r2, [r3, #4]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	431a      	orrs	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	68d2      	ldr	r2, [r2, #12]
 800cb6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6919      	ldr	r1, [r3, #16]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	041a      	lsls	r2, r3, #16
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb8e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f022 0208 	bic.w	r2, r2, #8
 800cb9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	699a      	ldr	r2, [r3, #24]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	430a      	orrs	r2, r1
 800cbb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	22ff      	movs	r2, #255	; 0xff
 800cbb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
  }
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	ff8fffbf 	.word	0xff8fffbf

0800cbd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d119      	bne.n	800cc1e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cbf4:	f7fc f8da 	bl	8008dac <HAL_GetTick>
 800cbf8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cbfa:	e009      	b.n	800cc10 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cbfc:	f7fc f8d6 	bl	8008dac <HAL_GetTick>
 800cc00:	4602      	mov	r2, r0
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc0a:	d901      	bls.n	800cc10 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e007      	b.n	800cc20 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0ee      	beq.n	800cbfc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d101      	bne.n	800cc3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e084      	b.n	800cd44 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d106      	bne.n	800cc5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f7fb f8f3 	bl	8007e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc70:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc7a:	d902      	bls.n	800cc82 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	e002      	b.n	800cc88 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cc82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cc90:	d007      	beq.n	800cca2 <HAL_SPI_Init+0x7a>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc9a:	d002      	beq.n	800cca2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10b      	bne.n	800ccc2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccb2:	d903      	bls.n	800ccbc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	631a      	str	r2, [r3, #48]	; 0x30
 800ccba:	e002      	b.n	800ccc2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	431a      	orrs	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	431a      	orrs	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	695b      	ldr	r3, [r3, #20]
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cce0:	431a      	orrs	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	69db      	ldr	r3, [r3, #28]
 800cce6:	431a      	orrs	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a1b      	ldr	r3, [r3, #32]
 800ccec:	ea42 0103 	orr.w	r1, r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	0c1b      	lsrs	r3, r3, #16
 800cd02:	f003 0204 	and.w	r2, r3, #4
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd10:	431a      	orrs	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	ea42 0103 	orr.w	r1, r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	69da      	ldr	r2, [r3, #28]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	603b      	str	r3, [r7, #0]
 800cd58:	4613      	mov	r3, r2
 800cd5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d101      	bne.n	800cd6e <HAL_SPI_Transmit+0x22>
 800cd6a:	2302      	movs	r3, #2
 800cd6c:	e150      	b.n	800d010 <HAL_SPI_Transmit+0x2c4>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd76:	f7fc f819 	bl	8008dac <HAL_GetTick>
 800cd7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cd7c:	88fb      	ldrh	r3, [r7, #6]
 800cd7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d002      	beq.n	800cd92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cd90:	e135      	b.n	800cffe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <HAL_SPI_Transmit+0x52>
 800cd98:	88fb      	ldrh	r3, [r7, #6]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d102      	bne.n	800cda4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cda2:	e12c      	b.n	800cffe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2203      	movs	r2, #3
 800cda8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	88fa      	ldrh	r2, [r7, #6]
 800cdbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	88fa      	ldrh	r2, [r7, #6]
 800cdc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2200      	movs	r2, #0
 800cdde:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2200      	movs	r2, #0
 800cde4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdee:	d107      	bne.n	800ce00 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cdfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce0a:	2b40      	cmp	r3, #64	; 0x40
 800ce0c:	d007      	beq.n	800ce1e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ce26:	d94b      	bls.n	800cec0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <HAL_SPI_Transmit+0xea>
 800ce30:	8afb      	ldrh	r3, [r7, #22]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d13e      	bne.n	800ceb4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3a:	881a      	ldrh	r2, [r3, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce46:	1c9a      	adds	r2, r3, #2
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ce5a:	e02b      	b.n	800ceb4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f003 0302 	and.w	r3, r3, #2
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d112      	bne.n	800ce90 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6e:	881a      	ldrh	r2, [r3, #0]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7a:	1c9a      	adds	r2, r3, #2
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	3b01      	subs	r3, #1
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ce8e:	e011      	b.n	800ceb4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce90:	f7fb ff8c 	bl	8008dac <HAL_GetTick>
 800ce94:	4602      	mov	r2, r0
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d803      	bhi.n	800cea8 <HAL_SPI_Transmit+0x15c>
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea6:	d102      	bne.n	800ceae <HAL_SPI_Transmit+0x162>
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d102      	bne.n	800ceb4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ceb2:	e0a4      	b.n	800cffe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1ce      	bne.n	800ce5c <HAL_SPI_Transmit+0x110>
 800cebe:	e07c      	b.n	800cfba <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <HAL_SPI_Transmit+0x182>
 800cec8:	8afb      	ldrh	r3, [r7, #22]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d170      	bne.n	800cfb0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d912      	bls.n	800cefe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cedc:	881a      	ldrh	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee8:	1c9a      	adds	r2, r3, #2
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	3b02      	subs	r3, #2
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cefc:	e058      	b.n	800cfb0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	330c      	adds	r3, #12
 800cf08:	7812      	ldrb	r2, [r2, #0]
 800cf0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800cf24:	e044      	b.n	800cfb0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	f003 0302 	and.w	r3, r3, #2
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d12b      	bne.n	800cf8c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d912      	bls.n	800cf64 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf42:	881a      	ldrh	r2, [r3, #0]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4e:	1c9a      	adds	r2, r3, #2
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	3b02      	subs	r3, #2
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cf62:	e025      	b.n	800cfb0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	330c      	adds	r3, #12
 800cf6e:	7812      	ldrb	r2, [r2, #0]
 800cf70:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	3b01      	subs	r3, #1
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cf8a:	e011      	b.n	800cfb0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf8c:	f7fb ff0e 	bl	8008dac <HAL_GetTick>
 800cf90:	4602      	mov	r2, r0
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d803      	bhi.n	800cfa4 <HAL_SPI_Transmit+0x258>
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa2:	d102      	bne.n	800cfaa <HAL_SPI_Transmit+0x25e>
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d102      	bne.n	800cfb0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cfae:	e026      	b.n	800cffe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1b5      	bne.n	800cf26 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cfba:	69ba      	ldr	r2, [r7, #24]
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f000 fa20 	bl	800d404 <SPI_EndRxTxTransaction>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d002      	beq.n	800cfd0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2220      	movs	r2, #32
 800cfce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10a      	bne.n	800cfee <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cfd8:	2300      	movs	r3, #0
 800cfda:	613b      	str	r3, [r7, #16]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	613b      	str	r3, [r7, #16]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	613b      	str	r3, [r7, #16]
 800cfec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	77fb      	strb	r3, [r7, #31]
 800cffa:	e000      	b.n	800cffe <HAL_SPI_Transmit+0x2b2>
  }

error:
 800cffc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d00e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3720      	adds	r7, #32
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b088      	sub	sp, #32
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	099b      	lsrs	r3, r3, #6
 800d034:	f003 0301 	and.w	r3, r3, #1
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10f      	bne.n	800d05c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00a      	beq.n	800d05c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	099b      	lsrs	r3, r3, #6
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d004      	beq.n	800d05c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	4798      	blx	r3
    return;
 800d05a:	e0d8      	b.n	800d20e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	085b      	lsrs	r3, r3, #1
 800d060:	f003 0301 	and.w	r3, r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00a      	beq.n	800d07e <HAL_SPI_IRQHandler+0x66>
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	09db      	lsrs	r3, r3, #7
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b00      	cmp	r3, #0
 800d072:	d004      	beq.n	800d07e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	4798      	blx	r3
    return;
 800d07c:	e0c7      	b.n	800d20e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	095b      	lsrs	r3, r3, #5
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10c      	bne.n	800d0a4 <HAL_SPI_IRQHandler+0x8c>
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	099b      	lsrs	r3, r3, #6
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b00      	cmp	r3, #0
 800d094:	d106      	bne.n	800d0a4 <HAL_SPI_IRQHandler+0x8c>
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	0a1b      	lsrs	r3, r3, #8
 800d09a:	f003 0301 	and.w	r3, r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f000 80b5 	beq.w	800d20e <HAL_SPI_IRQHandler+0x1f6>
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	095b      	lsrs	r3, r3, #5
 800d0a8:	f003 0301 	and.w	r3, r3, #1
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f000 80ae 	beq.w	800d20e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	099b      	lsrs	r3, r3, #6
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d023      	beq.n	800d106 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d011      	beq.n	800d0ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0ce:	f043 0204 	orr.w	r2, r3, #4
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	617b      	str	r3, [r7, #20]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	617b      	str	r3, [r7, #20]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	617b      	str	r3, [r7, #20]
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	e00b      	b.n	800d106 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	613b      	str	r3, [r7, #16]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	613b      	str	r3, [r7, #16]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	613b      	str	r3, [r7, #16]
 800d102:	693b      	ldr	r3, [r7, #16]
        return;
 800d104:	e083      	b.n	800d20e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	095b      	lsrs	r3, r3, #5
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d014      	beq.n	800d13c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d116:	f043 0201 	orr.w	r2, r3, #1
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	60fb      	str	r3, [r7, #12]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	0a1b      	lsrs	r3, r3, #8
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00c      	beq.n	800d162 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d14c:	f043 0208 	orr.w	r2, r3, #8
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d154:	2300      	movs	r3, #0
 800d156:	60bb      	str	r3, [r7, #8]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d166:	2b00      	cmp	r3, #0
 800d168:	d050      	beq.n	800d20c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d178:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2201      	movs	r2, #1
 800d17e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	f003 0302 	and.w	r3, r3, #2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d104      	bne.n	800d196 <HAL_SPI_IRQHandler+0x17e>
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	2b00      	cmp	r3, #0
 800d194:	d034      	beq.n	800d200 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f022 0203 	bic.w	r2, r2, #3
 800d1a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d011      	beq.n	800d1d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1b2:	4a18      	ldr	r2, [pc, #96]	; (800d214 <HAL_SPI_IRQHandler+0x1fc>)
 800d1b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fc fe30 	bl	8009e20 <HAL_DMA_Abort_IT>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d005      	beq.n	800d1d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d016      	beq.n	800d208 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1de:	4a0d      	ldr	r2, [pc, #52]	; (800d214 <HAL_SPI_IRQHandler+0x1fc>)
 800d1e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fc fe1a 	bl	8009e20 <HAL_DMA_Abort_IT>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00a      	beq.n	800d208 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d1fe:	e003      	b.n	800d208 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f809 	bl	800d218 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d206:	e000      	b.n	800d20a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d208:	bf00      	nop
    return;
 800d20a:	bf00      	nop
 800d20c:	bf00      	nop
  }
}
 800d20e:	3720      	adds	r7, #32
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	0800d22d 	.word	0x0800d22d

0800d218 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d220:	bf00      	nop
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d238:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f7ff ffe5 	bl	800d218 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d24e:	bf00      	nop
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	603b      	str	r3, [r7, #0]
 800d262:	4613      	mov	r3, r2
 800d264:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d266:	e04c      	b.n	800d302 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26e:	d048      	beq.n	800d302 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d270:	f7fb fd9c 	bl	8008dac <HAL_GetTick>
 800d274:	4602      	mov	r2, r0
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d902      	bls.n	800d286 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d13d      	bne.n	800d302 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d29e:	d111      	bne.n	800d2c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2a8:	d004      	beq.n	800d2b4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2b2:	d107      	bne.n	800d2c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2cc:	d10f      	bne.n	800d2ee <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2dc:	601a      	str	r2, [r3, #0]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d2ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d2fe:	2303      	movs	r3, #3
 800d300:	e00f      	b.n	800d322 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689a      	ldr	r2, [r3, #8]
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	4013      	ands	r3, r2
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	429a      	cmp	r2, r3
 800d310:	bf0c      	ite	eq
 800d312:	2301      	moveq	r3, #1
 800d314:	2300      	movne	r3, #0
 800d316:	b2db      	uxtb	r3, r3
 800d318:	461a      	mov	r2, r3
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d1a3      	bne.n	800d268 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b084      	sub	sp, #16
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	60b9      	str	r1, [r7, #8]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800d338:	e057      	b.n	800d3ea <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d340:	d106      	bne.n	800d350 <SPI_WaitFifoStateUntilTimeout+0x26>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d103      	bne.n	800d350 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	330c      	adds	r3, #12
 800d34e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d356:	d048      	beq.n	800d3ea <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d358:	f7fb fd28 	bl	8008dac <HAL_GetTick>
 800d35c:	4602      	mov	r2, r0
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	683a      	ldr	r2, [r7, #0]
 800d364:	429a      	cmp	r2, r3
 800d366:	d902      	bls.n	800d36e <SPI_WaitFifoStateUntilTimeout+0x44>
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d13d      	bne.n	800d3ea <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d37c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d386:	d111      	bne.n	800d3ac <SPI_WaitFifoStateUntilTimeout+0x82>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d390:	d004      	beq.n	800d39c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d39a:	d107      	bne.n	800d3ac <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3b4:	d10f      	bne.n	800d3d6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	e008      	b.n	800d3fc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	689a      	ldr	r2, [r3, #8]
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d19f      	bne.n	800d33a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af02      	add	r7, sp, #8
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	2200      	movs	r2, #0
 800d418:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f7ff ff84 	bl	800d32a <SPI_WaitFifoStateUntilTimeout>
 800d422:	4603      	mov	r3, r0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d007      	beq.n	800d438 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d42c:	f043 0220 	orr.w	r2, r3, #32
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e027      	b.n	800d488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	2200      	movs	r2, #0
 800d440:	2180      	movs	r1, #128	; 0x80
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f7ff ff07 	bl	800d256 <SPI_WaitFlagStateUntilTimeout>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d452:	f043 0220 	orr.w	r2, r3, #32
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e014      	b.n	800d488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	2200      	movs	r2, #0
 800d466:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff ff5d 	bl	800d32a <SPI_WaitFifoStateUntilTimeout>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d007      	beq.n	800d486 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d47a:	f043 0220 	orr.w	r2, r3, #32
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	e000      	b.n	800d488 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d101      	bne.n	800d4a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e01d      	b.n	800d4de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d106      	bne.n	800d4bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7fa fd5e 	bl	8007f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2202      	movs	r2, #2
 800d4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	3304      	adds	r3, #4
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	4610      	mov	r0, r2
 800d4d0:	f000 fb82 	bl	800dbd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
	...

0800d4e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	68da      	ldr	r2, [r3, #12]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f042 0201 	orr.w	r2, r2, #1
 800d4fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	689a      	ldr	r2, [r3, #8]
 800d506:	4b0c      	ldr	r3, [pc, #48]	; (800d538 <HAL_TIM_Base_Start_IT+0x50>)
 800d508:	4013      	ands	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b06      	cmp	r3, #6
 800d510:	d00b      	beq.n	800d52a <HAL_TIM_Base_Start_IT+0x42>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d518:	d007      	beq.n	800d52a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f042 0201 	orr.w	r2, r2, #1
 800d528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3714      	adds	r7, #20
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr
 800d538:	00010007 	.word	0x00010007

0800d53c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d101      	bne.n	800d54e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d54a:	2301      	movs	r3, #1
 800d54c:	e01d      	b.n	800d58a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b00      	cmp	r3, #0
 800d558:	d106      	bne.n	800d568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f815 	bl	800d592 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3304      	adds	r3, #4
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f000 fb2c 	bl	800dbd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d59a:	bf00      	nop
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b082      	sub	sp, #8
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d122      	bne.n	800d602 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	f003 0302 	and.w	r3, r3, #2
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d11b      	bne.n	800d602 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f06f 0202 	mvn.w	r2, #2
 800d5d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	f003 0303 	and.w	r3, r3, #3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d003      	beq.n	800d5f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fad7 	bl	800db9c <HAL_TIM_IC_CaptureCallback>
 800d5ee:	e005      	b.n	800d5fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fac9 	bl	800db88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fada 	bl	800dbb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	f003 0304 	and.w	r3, r3, #4
 800d60c:	2b04      	cmp	r3, #4
 800d60e:	d122      	bne.n	800d656 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	f003 0304 	and.w	r3, r3, #4
 800d61a:	2b04      	cmp	r3, #4
 800d61c:	d11b      	bne.n	800d656 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f06f 0204 	mvn.w	r2, #4
 800d626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2202      	movs	r2, #2
 800d62c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d003      	beq.n	800d644 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 faad 	bl	800db9c <HAL_TIM_IC_CaptureCallback>
 800d642:	e005      	b.n	800d650 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fa9f 	bl	800db88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fab0 	bl	800dbb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	f003 0308 	and.w	r3, r3, #8
 800d660:	2b08      	cmp	r3, #8
 800d662:	d122      	bne.n	800d6aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	f003 0308 	and.w	r3, r3, #8
 800d66e:	2b08      	cmp	r3, #8
 800d670:	d11b      	bne.n	800d6aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f06f 0208 	mvn.w	r2, #8
 800d67a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2204      	movs	r2, #4
 800d680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	69db      	ldr	r3, [r3, #28]
 800d688:	f003 0303 	and.w	r3, r3, #3
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d003      	beq.n	800d698 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fa83 	bl	800db9c <HAL_TIM_IC_CaptureCallback>
 800d696:	e005      	b.n	800d6a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 fa75 	bl	800db88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fa86 	bl	800dbb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	f003 0310 	and.w	r3, r3, #16
 800d6b4:	2b10      	cmp	r3, #16
 800d6b6:	d122      	bne.n	800d6fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	f003 0310 	and.w	r3, r3, #16
 800d6c2:	2b10      	cmp	r3, #16
 800d6c4:	d11b      	bne.n	800d6fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f06f 0210 	mvn.w	r2, #16
 800d6ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2208      	movs	r2, #8
 800d6d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	69db      	ldr	r3, [r3, #28]
 800d6dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d003      	beq.n	800d6ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fa59 	bl	800db9c <HAL_TIM_IC_CaptureCallback>
 800d6ea:	e005      	b.n	800d6f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fa4b 	bl	800db88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fa5c 	bl	800dbb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d10e      	bne.n	800d72a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b01      	cmp	r3, #1
 800d718:	d107      	bne.n	800d72a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f06f 0201 	mvn.w	r2, #1
 800d722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7f7 fa77 	bl	8004c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d734:	2b80      	cmp	r3, #128	; 0x80
 800d736:	d10e      	bne.n	800d756 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d742:	2b80      	cmp	r3, #128	; 0x80
 800d744:	d107      	bne.n	800d756 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d74e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fe71 	bl	800e438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d764:	d10e      	bne.n	800d784 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d770:	2b80      	cmp	r3, #128	; 0x80
 800d772:	d107      	bne.n	800d784 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d77c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fe64 	bl	800e44c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78e:	2b40      	cmp	r3, #64	; 0x40
 800d790:	d10e      	bne.n	800d7b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d79c:	2b40      	cmp	r3, #64	; 0x40
 800d79e:	d107      	bne.n	800d7b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d7a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 fa0a 	bl	800dbc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b20      	cmp	r3, #32
 800d7bc:	d10e      	bne.n	800d7dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	f003 0320 	and.w	r3, r3, #32
 800d7c8:	2b20      	cmp	r3, #32
 800d7ca:	d107      	bne.n	800d7dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f06f 0220 	mvn.w	r2, #32
 800d7d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 fe24 	bl	800e424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7dc:	bf00      	nop
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d101      	bne.n	800d7fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	e105      	b.n	800da0a <HAL_TIM_PWM_ConfigChannel+0x226>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2202      	movs	r2, #2
 800d80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b14      	cmp	r3, #20
 800d812:	f200 80f0 	bhi.w	800d9f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800d816:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81c:	0800d871 	.word	0x0800d871
 800d820:	0800d9f7 	.word	0x0800d9f7
 800d824:	0800d9f7 	.word	0x0800d9f7
 800d828:	0800d9f7 	.word	0x0800d9f7
 800d82c:	0800d8b1 	.word	0x0800d8b1
 800d830:	0800d9f7 	.word	0x0800d9f7
 800d834:	0800d9f7 	.word	0x0800d9f7
 800d838:	0800d9f7 	.word	0x0800d9f7
 800d83c:	0800d8f3 	.word	0x0800d8f3
 800d840:	0800d9f7 	.word	0x0800d9f7
 800d844:	0800d9f7 	.word	0x0800d9f7
 800d848:	0800d9f7 	.word	0x0800d9f7
 800d84c:	0800d933 	.word	0x0800d933
 800d850:	0800d9f7 	.word	0x0800d9f7
 800d854:	0800d9f7 	.word	0x0800d9f7
 800d858:	0800d9f7 	.word	0x0800d9f7
 800d85c:	0800d975 	.word	0x0800d975
 800d860:	0800d9f7 	.word	0x0800d9f7
 800d864:	0800d9f7 	.word	0x0800d9f7
 800d868:	0800d9f7 	.word	0x0800d9f7
 800d86c:	0800d9b5 	.word	0x0800d9b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68b9      	ldr	r1, [r7, #8]
 800d876:	4618      	mov	r0, r3
 800d878:	f000 fa4e 	bl	800dd18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	699a      	ldr	r2, [r3, #24]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f042 0208 	orr.w	r2, r2, #8
 800d88a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	699a      	ldr	r2, [r3, #24]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f022 0204 	bic.w	r2, r2, #4
 800d89a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6999      	ldr	r1, [r3, #24]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	691a      	ldr	r2, [r3, #16]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	619a      	str	r2, [r3, #24]
      break;
 800d8ae:	e0a3      	b.n	800d9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68b9      	ldr	r1, [r7, #8]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 faa0 	bl	800ddfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	699a      	ldr	r2, [r3, #24]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	699a      	ldr	r2, [r3, #24]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6999      	ldr	r1, [r3, #24]
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	021a      	lsls	r2, r3, #8
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	619a      	str	r2, [r3, #24]
      break;
 800d8f0:	e082      	b.n	800d9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68b9      	ldr	r1, [r7, #8]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 faf7 	bl	800deec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	69da      	ldr	r2, [r3, #28]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f042 0208 	orr.w	r2, r2, #8
 800d90c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	69da      	ldr	r2, [r3, #28]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f022 0204 	bic.w	r2, r2, #4
 800d91c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	69d9      	ldr	r1, [r3, #28]
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	691a      	ldr	r2, [r3, #16]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	430a      	orrs	r2, r1
 800d92e:	61da      	str	r2, [r3, #28]
      break;
 800d930:	e062      	b.n	800d9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 fb4d 	bl	800dfd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	69da      	ldr	r2, [r3, #28]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d94c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	69da      	ldr	r2, [r3, #28]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d95c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	69d9      	ldr	r1, [r3, #28]
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	021a      	lsls	r2, r3, #8
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	430a      	orrs	r2, r1
 800d970:	61da      	str	r2, [r3, #28]
      break;
 800d972:	e041      	b.n	800d9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68b9      	ldr	r1, [r7, #8]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 fb84 	bl	800e088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f042 0208 	orr.w	r2, r2, #8
 800d98e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f022 0204 	bic.w	r2, r2, #4
 800d99e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	691a      	ldr	r2, [r3, #16]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	430a      	orrs	r2, r1
 800d9b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9b2:	e021      	b.n	800d9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 fbb6 	bl	800e12c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	021a      	lsls	r2, r3, #8
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	430a      	orrs	r2, r1
 800d9f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9f4:	e000      	b.n	800d9f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800d9f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop

0800da14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da24:	2b01      	cmp	r3, #1
 800da26:	d101      	bne.n	800da2c <HAL_TIM_ConfigClockSource+0x18>
 800da28:	2302      	movs	r3, #2
 800da2a:	e0a6      	b.n	800db7a <HAL_TIM_ConfigClockSource+0x166>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2202      	movs	r2, #2
 800da38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	4b4f      	ldr	r3, [pc, #316]	; (800db84 <HAL_TIM_ConfigClockSource+0x170>)
 800da48:	4013      	ands	r3, r2
 800da4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b40      	cmp	r3, #64	; 0x40
 800da62:	d067      	beq.n	800db34 <HAL_TIM_ConfigClockSource+0x120>
 800da64:	2b40      	cmp	r3, #64	; 0x40
 800da66:	d80b      	bhi.n	800da80 <HAL_TIM_ConfigClockSource+0x6c>
 800da68:	2b10      	cmp	r3, #16
 800da6a:	d073      	beq.n	800db54 <HAL_TIM_ConfigClockSource+0x140>
 800da6c:	2b10      	cmp	r3, #16
 800da6e:	d802      	bhi.n	800da76 <HAL_TIM_ConfigClockSource+0x62>
 800da70:	2b00      	cmp	r3, #0
 800da72:	d06f      	beq.n	800db54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800da74:	e078      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800da76:	2b20      	cmp	r3, #32
 800da78:	d06c      	beq.n	800db54 <HAL_TIM_ConfigClockSource+0x140>
 800da7a:	2b30      	cmp	r3, #48	; 0x30
 800da7c:	d06a      	beq.n	800db54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800da7e:	e073      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800da80:	2b70      	cmp	r3, #112	; 0x70
 800da82:	d00d      	beq.n	800daa0 <HAL_TIM_ConfigClockSource+0x8c>
 800da84:	2b70      	cmp	r3, #112	; 0x70
 800da86:	d804      	bhi.n	800da92 <HAL_TIM_ConfigClockSource+0x7e>
 800da88:	2b50      	cmp	r3, #80	; 0x50
 800da8a:	d033      	beq.n	800daf4 <HAL_TIM_ConfigClockSource+0xe0>
 800da8c:	2b60      	cmp	r3, #96	; 0x60
 800da8e:	d041      	beq.n	800db14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800da90:	e06a      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800da92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da96:	d066      	beq.n	800db66 <HAL_TIM_ConfigClockSource+0x152>
 800da98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da9c:	d017      	beq.n	800dace <HAL_TIM_ConfigClockSource+0xba>
      break;
 800da9e:	e063      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6818      	ldr	r0, [r3, #0]
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	6899      	ldr	r1, [r3, #8]
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	f000 fc0a 	bl	800e2c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dac2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	609a      	str	r2, [r3, #8]
      break;
 800dacc:	e04c      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	6899      	ldr	r1, [r3, #8]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	f000 fbf3 	bl	800e2c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800daf0:	609a      	str	r2, [r3, #8]
      break;
 800daf2:	e039      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6818      	ldr	r0, [r3, #0]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	6859      	ldr	r1, [r3, #4]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	461a      	mov	r2, r3
 800db02:	f000 fb67 	bl	800e1d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2150      	movs	r1, #80	; 0x50
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 fbc0 	bl	800e292 <TIM_ITRx_SetConfig>
      break;
 800db12:	e029      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6818      	ldr	r0, [r3, #0]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	6859      	ldr	r1, [r3, #4]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	461a      	mov	r2, r3
 800db22:	f000 fb86 	bl	800e232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2160      	movs	r1, #96	; 0x60
 800db2c:	4618      	mov	r0, r3
 800db2e:	f000 fbb0 	bl	800e292 <TIM_ITRx_SetConfig>
      break;
 800db32:	e019      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	6859      	ldr	r1, [r3, #4]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	461a      	mov	r2, r3
 800db42:	f000 fb47 	bl	800e1d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2140      	movs	r1, #64	; 0x40
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 fba0 	bl	800e292 <TIM_ITRx_SetConfig>
      break;
 800db52:	e009      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4619      	mov	r1, r3
 800db5e:	4610      	mov	r0, r2
 800db60:	f000 fb97 	bl	800e292 <TIM_ITRx_SetConfig>
      break;
 800db64:	e000      	b.n	800db68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800db66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	fffeff88 	.word	0xfffeff88

0800db88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a40      	ldr	r2, [pc, #256]	; (800dcec <TIM_Base_SetConfig+0x114>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d013      	beq.n	800dc18 <TIM_Base_SetConfig+0x40>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbf6:	d00f      	beq.n	800dc18 <TIM_Base_SetConfig+0x40>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4a3d      	ldr	r2, [pc, #244]	; (800dcf0 <TIM_Base_SetConfig+0x118>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d00b      	beq.n	800dc18 <TIM_Base_SetConfig+0x40>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4a3c      	ldr	r2, [pc, #240]	; (800dcf4 <TIM_Base_SetConfig+0x11c>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d007      	beq.n	800dc18 <TIM_Base_SetConfig+0x40>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a3b      	ldr	r2, [pc, #236]	; (800dcf8 <TIM_Base_SetConfig+0x120>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d003      	beq.n	800dc18 <TIM_Base_SetConfig+0x40>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4a3a      	ldr	r2, [pc, #232]	; (800dcfc <TIM_Base_SetConfig+0x124>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d108      	bne.n	800dc2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a2f      	ldr	r2, [pc, #188]	; (800dcec <TIM_Base_SetConfig+0x114>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d02b      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc38:	d027      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a2c      	ldr	r2, [pc, #176]	; (800dcf0 <TIM_Base_SetConfig+0x118>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d023      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4a2b      	ldr	r2, [pc, #172]	; (800dcf4 <TIM_Base_SetConfig+0x11c>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d01f      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4a2a      	ldr	r2, [pc, #168]	; (800dcf8 <TIM_Base_SetConfig+0x120>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d01b      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	4a29      	ldr	r2, [pc, #164]	; (800dcfc <TIM_Base_SetConfig+0x124>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d017      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4a28      	ldr	r2, [pc, #160]	; (800dd00 <TIM_Base_SetConfig+0x128>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d013      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	4a27      	ldr	r2, [pc, #156]	; (800dd04 <TIM_Base_SetConfig+0x12c>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d00f      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4a26      	ldr	r2, [pc, #152]	; (800dd08 <TIM_Base_SetConfig+0x130>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d00b      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a25      	ldr	r2, [pc, #148]	; (800dd0c <TIM_Base_SetConfig+0x134>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d007      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a24      	ldr	r2, [pc, #144]	; (800dd10 <TIM_Base_SetConfig+0x138>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d003      	beq.n	800dc8a <TIM_Base_SetConfig+0xb2>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a23      	ldr	r2, [pc, #140]	; (800dd14 <TIM_Base_SetConfig+0x13c>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d108      	bne.n	800dc9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	689a      	ldr	r2, [r3, #8]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a0a      	ldr	r2, [pc, #40]	; (800dcec <TIM_Base_SetConfig+0x114>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d003      	beq.n	800dcd0 <TIM_Base_SetConfig+0xf8>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a0c      	ldr	r2, [pc, #48]	; (800dcfc <TIM_Base_SetConfig+0x124>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d103      	bne.n	800dcd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	691a      	ldr	r2, [r3, #16]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	615a      	str	r2, [r3, #20]
}
 800dcde:	bf00      	nop
 800dce0:	3714      	adds	r7, #20
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	40010000 	.word	0x40010000
 800dcf0:	40000400 	.word	0x40000400
 800dcf4:	40000800 	.word	0x40000800
 800dcf8:	40000c00 	.word	0x40000c00
 800dcfc:	40010400 	.word	0x40010400
 800dd00:	40014000 	.word	0x40014000
 800dd04:	40014400 	.word	0x40014400
 800dd08:	40014800 	.word	0x40014800
 800dd0c:	40001800 	.word	0x40001800
 800dd10:	40001c00 	.word	0x40001c00
 800dd14:	40002000 	.word	0x40002000

0800dd18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b087      	sub	sp, #28
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a1b      	ldr	r3, [r3, #32]
 800dd26:	f023 0201 	bic.w	r2, r3, #1
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	699b      	ldr	r3, [r3, #24]
 800dd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	4b2b      	ldr	r3, [pc, #172]	; (800ddf0 <TIM_OC1_SetConfig+0xd8>)
 800dd44:	4013      	ands	r3, r2
 800dd46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f023 0303 	bic.w	r3, r3, #3
 800dd4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	f023 0302 	bic.w	r3, r3, #2
 800dd60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a21      	ldr	r2, [pc, #132]	; (800ddf4 <TIM_OC1_SetConfig+0xdc>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d003      	beq.n	800dd7c <TIM_OC1_SetConfig+0x64>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	4a20      	ldr	r2, [pc, #128]	; (800ddf8 <TIM_OC1_SetConfig+0xe0>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d10c      	bne.n	800dd96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	f023 0308 	bic.w	r3, r3, #8
 800dd82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f023 0304 	bic.w	r3, r3, #4
 800dd94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a16      	ldr	r2, [pc, #88]	; (800ddf4 <TIM_OC1_SetConfig+0xdc>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d003      	beq.n	800dda6 <TIM_OC1_SetConfig+0x8e>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a15      	ldr	r2, [pc, #84]	; (800ddf8 <TIM_OC1_SetConfig+0xe0>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d111      	bne.n	800ddca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	699b      	ldr	r3, [r3, #24]
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	685a      	ldr	r2, [r3, #4]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	621a      	str	r2, [r3, #32]
}
 800dde4:	bf00      	nop
 800dde6:	371c      	adds	r7, #28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	fffeff8f 	.word	0xfffeff8f
 800ddf4:	40010000 	.word	0x40010000
 800ddf8:	40010400 	.word	0x40010400

0800ddfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b087      	sub	sp, #28
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a1b      	ldr	r3, [r3, #32]
 800de0a:	f023 0210 	bic.w	r2, r3, #16
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	699b      	ldr	r3, [r3, #24]
 800de22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	4b2e      	ldr	r3, [pc, #184]	; (800dee0 <TIM_OC2_SetConfig+0xe4>)
 800de28:	4013      	ands	r3, r2
 800de2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	021b      	lsls	r3, r3, #8
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	f023 0320 	bic.w	r3, r3, #32
 800de46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	011b      	lsls	r3, r3, #4
 800de4e:	697a      	ldr	r2, [r7, #20]
 800de50:	4313      	orrs	r3, r2
 800de52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	4a23      	ldr	r2, [pc, #140]	; (800dee4 <TIM_OC2_SetConfig+0xe8>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d003      	beq.n	800de64 <TIM_OC2_SetConfig+0x68>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4a22      	ldr	r2, [pc, #136]	; (800dee8 <TIM_OC2_SetConfig+0xec>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d10d      	bne.n	800de80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	011b      	lsls	r3, r3, #4
 800de72:	697a      	ldr	r2, [r7, #20]
 800de74:	4313      	orrs	r3, r2
 800de76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4a18      	ldr	r2, [pc, #96]	; (800dee4 <TIM_OC2_SetConfig+0xe8>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d003      	beq.n	800de90 <TIM_OC2_SetConfig+0x94>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <TIM_OC2_SetConfig+0xec>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d113      	bne.n	800deb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	695b      	ldr	r3, [r3, #20]
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	699b      	ldr	r3, [r3, #24]
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	693a      	ldr	r2, [r7, #16]
 800debc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	697a      	ldr	r2, [r7, #20]
 800ded0:	621a      	str	r2, [r3, #32]
}
 800ded2:	bf00      	nop
 800ded4:	371c      	adds	r7, #28
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	feff8fff 	.word	0xfeff8fff
 800dee4:	40010000 	.word	0x40010000
 800dee8:	40010400 	.word	0x40010400

0800deec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a1b      	ldr	r3, [r3, #32]
 800defa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	69db      	ldr	r3, [r3, #28]
 800df12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	4b2d      	ldr	r3, [pc, #180]	; (800dfcc <TIM_OC3_SetConfig+0xe0>)
 800df18:	4013      	ands	r3, r2
 800df1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f023 0303 	bic.w	r3, r3, #3
 800df22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	021b      	lsls	r3, r3, #8
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	4313      	orrs	r3, r2
 800df40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4a22      	ldr	r2, [pc, #136]	; (800dfd0 <TIM_OC3_SetConfig+0xe4>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d003      	beq.n	800df52 <TIM_OC3_SetConfig+0x66>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4a21      	ldr	r2, [pc, #132]	; (800dfd4 <TIM_OC3_SetConfig+0xe8>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d10d      	bne.n	800df6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	021b      	lsls	r3, r3, #8
 800df60:	697a      	ldr	r2, [r7, #20]
 800df62:	4313      	orrs	r3, r2
 800df64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4a17      	ldr	r2, [pc, #92]	; (800dfd0 <TIM_OC3_SetConfig+0xe4>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d003      	beq.n	800df7e <TIM_OC3_SetConfig+0x92>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4a16      	ldr	r2, [pc, #88]	; (800dfd4 <TIM_OC3_SetConfig+0xe8>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d113      	bne.n	800dfa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	011b      	lsls	r3, r3, #4
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	4313      	orrs	r3, r2
 800df98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	699b      	ldr	r3, [r3, #24]
 800df9e:	011b      	lsls	r3, r3, #4
 800dfa0:	693a      	ldr	r2, [r7, #16]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	621a      	str	r2, [r3, #32]
}
 800dfc0:	bf00      	nop
 800dfc2:	371c      	adds	r7, #28
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	fffeff8f 	.word	0xfffeff8f
 800dfd0:	40010000 	.word	0x40010000
 800dfd4:	40010400 	.word	0x40010400

0800dfd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b087      	sub	sp, #28
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	69db      	ldr	r3, [r3, #28]
 800dffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e000:	68fa      	ldr	r2, [r7, #12]
 800e002:	4b1e      	ldr	r3, [pc, #120]	; (800e07c <TIM_OC4_SetConfig+0xa4>)
 800e004:	4013      	ands	r3, r2
 800e006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e00e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	021b      	lsls	r3, r3, #8
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	4313      	orrs	r3, r2
 800e01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	031b      	lsls	r3, r3, #12
 800e02a:	693a      	ldr	r2, [r7, #16]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a13      	ldr	r2, [pc, #76]	; (800e080 <TIM_OC4_SetConfig+0xa8>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d003      	beq.n	800e040 <TIM_OC4_SetConfig+0x68>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a12      	ldr	r2, [pc, #72]	; (800e084 <TIM_OC4_SetConfig+0xac>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d109      	bne.n	800e054 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	695b      	ldr	r3, [r3, #20]
 800e04c:	019b      	lsls	r3, r3, #6
 800e04e:	697a      	ldr	r2, [r7, #20]
 800e050:	4313      	orrs	r3, r2
 800e052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	685a      	ldr	r2, [r3, #4]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	693a      	ldr	r2, [r7, #16]
 800e06c:	621a      	str	r2, [r3, #32]
}
 800e06e:	bf00      	nop
 800e070:	371c      	adds	r7, #28
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop
 800e07c:	feff8fff 	.word	0xfeff8fff
 800e080:	40010000 	.word	0x40010000
 800e084:	40010400 	.word	0x40010400

0800e088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e088:	b480      	push	{r7}
 800e08a:	b087      	sub	sp, #28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	4b1b      	ldr	r3, [pc, #108]	; (800e120 <TIM_OC5_SetConfig+0x98>)
 800e0b4:	4013      	ands	r3, r2
 800e0b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e0c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	041b      	lsls	r3, r3, #16
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4a12      	ldr	r2, [pc, #72]	; (800e124 <TIM_OC5_SetConfig+0x9c>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d003      	beq.n	800e0e6 <TIM_OC5_SetConfig+0x5e>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	4a11      	ldr	r2, [pc, #68]	; (800e128 <TIM_OC5_SetConfig+0xa0>)
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d109      	bne.n	800e0fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	021b      	lsls	r3, r3, #8
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	685a      	ldr	r2, [r3, #4]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	693a      	ldr	r2, [r7, #16]
 800e112:	621a      	str	r2, [r3, #32]
}
 800e114:	bf00      	nop
 800e116:	371c      	adds	r7, #28
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr
 800e120:	fffeff8f 	.word	0xfffeff8f
 800e124:	40010000 	.word	0x40010000
 800e128:	40010400 	.word	0x40010400

0800e12c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b087      	sub	sp, #28
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a1b      	ldr	r3, [r3, #32]
 800e13a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a1b      	ldr	r3, [r3, #32]
 800e146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	4b1c      	ldr	r3, [pc, #112]	; (800e1c8 <TIM_OC6_SetConfig+0x9c>)
 800e158:	4013      	ands	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	021b      	lsls	r3, r3, #8
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	4313      	orrs	r3, r2
 800e166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e16e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	051b      	lsls	r3, r3, #20
 800e176:	693a      	ldr	r2, [r7, #16]
 800e178:	4313      	orrs	r3, r2
 800e17a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a13      	ldr	r2, [pc, #76]	; (800e1cc <TIM_OC6_SetConfig+0xa0>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d003      	beq.n	800e18c <TIM_OC6_SetConfig+0x60>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a12      	ldr	r2, [pc, #72]	; (800e1d0 <TIM_OC6_SetConfig+0xa4>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d109      	bne.n	800e1a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	695b      	ldr	r3, [r3, #20]
 800e198:	029b      	lsls	r3, r3, #10
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	621a      	str	r2, [r3, #32]
}
 800e1ba:	bf00      	nop
 800e1bc:	371c      	adds	r7, #28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	feff8fff 	.word	0xfeff8fff
 800e1cc:	40010000 	.word	0x40010000
 800e1d0:	40010400 	.word	0x40010400

0800e1d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6a1b      	ldr	r3, [r3, #32]
 800e1ea:	f023 0201 	bic.w	r2, r3, #1
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	699b      	ldr	r3, [r3, #24]
 800e1f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e1fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	011b      	lsls	r3, r3, #4
 800e204:	693a      	ldr	r2, [r7, #16]
 800e206:	4313      	orrs	r3, r2
 800e208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f023 030a 	bic.w	r3, r3, #10
 800e210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	4313      	orrs	r3, r2
 800e218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	693a      	ldr	r2, [r7, #16]
 800e21e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	621a      	str	r2, [r3, #32]
}
 800e226:	bf00      	nop
 800e228:	371c      	adds	r7, #28
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e232:	b480      	push	{r7}
 800e234:	b087      	sub	sp, #28
 800e236:	af00      	add	r7, sp, #0
 800e238:	60f8      	str	r0, [r7, #12]
 800e23a:	60b9      	str	r1, [r7, #8]
 800e23c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6a1b      	ldr	r3, [r3, #32]
 800e242:	f023 0210 	bic.w	r2, r3, #16
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e25c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	031b      	lsls	r3, r3, #12
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	4313      	orrs	r3, r2
 800e266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e26e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	011b      	lsls	r3, r3, #4
 800e274:	693a      	ldr	r2, [r7, #16]
 800e276:	4313      	orrs	r3, r2
 800e278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	697a      	ldr	r2, [r7, #20]
 800e27e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	693a      	ldr	r2, [r7, #16]
 800e284:	621a      	str	r2, [r3, #32]
}
 800e286:	bf00      	nop
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e292:	b480      	push	{r7}
 800e294:	b085      	sub	sp, #20
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f043 0307 	orr.w	r3, r3, #7
 800e2b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	68fa      	ldr	r2, [r7, #12]
 800e2ba:	609a      	str	r2, [r3, #8]
}
 800e2bc:	bf00      	nop
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b087      	sub	sp, #28
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
 800e2d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e2e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	021a      	lsls	r2, r3, #8
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	431a      	orrs	r2, r3
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	609a      	str	r2, [r3, #8]
}
 800e2fc:	bf00      	nop
 800e2fe:	371c      	adds	r7, #28
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d101      	bne.n	800e320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e31c:	2302      	movs	r3, #2
 800e31e:	e06d      	b.n	800e3fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2202      	movs	r2, #2
 800e32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a30      	ldr	r2, [pc, #192]	; (800e408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d004      	beq.n	800e354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a2f      	ldr	r2, [pc, #188]	; (800e40c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d108      	bne.n	800e366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e35a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	4313      	orrs	r3, r2
 800e364:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e36c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68fa      	ldr	r2, [r7, #12]
 800e374:	4313      	orrs	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a20      	ldr	r2, [pc, #128]	; (800e408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d022      	beq.n	800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e392:	d01d      	beq.n	800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a1d      	ldr	r2, [pc, #116]	; (800e410 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d018      	beq.n	800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a1c      	ldr	r2, [pc, #112]	; (800e414 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d013      	beq.n	800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a1a      	ldr	r2, [pc, #104]	; (800e418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d00e      	beq.n	800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	4a15      	ldr	r2, [pc, #84]	; (800e40c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d009      	beq.n	800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a16      	ldr	r2, [pc, #88]	; (800e41c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d004      	beq.n	800e3d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a15      	ldr	r2, [pc, #84]	; (800e420 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d10c      	bne.n	800e3ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	68ba      	ldr	r2, [r7, #8]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	40010000 	.word	0x40010000
 800e40c:	40010400 	.word	0x40010400
 800e410:	40000400 	.word	0x40000400
 800e414:	40000800 	.word	0x40000800
 800e418:	40000c00 	.word	0x40000c00
 800e41c:	40014000 	.word	0x40014000
 800e420:	40001800 	.word	0x40001800

0800e424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d101      	bne.n	800e472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	e040      	b.n	800e4f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e476:	2b00      	cmp	r3, #0
 800e478:	d106      	bne.n	800e488 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7f9 fe0a 	bl	800809c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2224      	movs	r2, #36	; 0x24
 800e48c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f022 0201 	bic.w	r2, r2, #1
 800e49c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f8be 	bl	800e620 <UART_SetConfig>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d101      	bne.n	800e4ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e022      	b.n	800e4f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d002      	beq.n	800e4bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fb5c 	bl	800eb74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	685a      	ldr	r2, [r3, #4]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e4ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	689a      	ldr	r2, [r3, #8]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e4da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f042 0201 	orr.w	r2, r2, #1
 800e4ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fbe3 	bl	800ecb8 <UART_CheckIdleState>
 800e4f2:	4603      	mov	r3, r0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b08a      	sub	sp, #40	; 0x28
 800e500:	af02      	add	r7, sp, #8
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	603b      	str	r3, [r7, #0]
 800e508:	4613      	mov	r3, r2
 800e50a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e510:	2b20      	cmp	r3, #32
 800e512:	d17f      	bne.n	800e614 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <HAL_UART_Transmit+0x24>
 800e51a:	88fb      	ldrh	r3, [r7, #6]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d101      	bne.n	800e524 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	e078      	b.n	800e616 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d101      	bne.n	800e532 <HAL_UART_Transmit+0x36>
 800e52e:	2302      	movs	r3, #2
 800e530:	e071      	b.n	800e616 <HAL_UART_Transmit+0x11a>
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2201      	movs	r2, #1
 800e536:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2221      	movs	r2, #33	; 0x21
 800e544:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800e546:	f7fa fc31 	bl	8008dac <HAL_GetTick>
 800e54a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	88fa      	ldrh	r2, [r7, #6]
 800e550:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	88fa      	ldrh	r2, [r7, #6]
 800e558:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e564:	d108      	bne.n	800e578 <HAL_UART_Transmit+0x7c>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	691b      	ldr	r3, [r3, #16]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d104      	bne.n	800e578 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800e56e:	2300      	movs	r3, #0
 800e570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	61bb      	str	r3, [r7, #24]
 800e576:	e003      	b.n	800e580 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e57c:	2300      	movs	r3, #0
 800e57e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800e588:	e02c      	b.n	800e5e4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	2200      	movs	r2, #0
 800e592:	2180      	movs	r1, #128	; 0x80
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f000 fbd4 	bl	800ed42 <UART_WaitOnFlagUntilTimeout>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800e5a0:	2303      	movs	r3, #3
 800e5a2:	e038      	b.n	800e616 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10b      	bne.n	800e5c2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e5b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	3302      	adds	r3, #2
 800e5be:	61bb      	str	r3, [r7, #24]
 800e5c0:	e007      	b.n	800e5d2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d1cc      	bne.n	800e58a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2140      	movs	r1, #64	; 0x40
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 fba1 	bl	800ed42 <UART_WaitOnFlagUntilTimeout>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d001      	beq.n	800e60a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e606:	2303      	movs	r3, #3
 800e608:	e005      	b.n	800e616 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2220      	movs	r2, #32
 800e60e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	e000      	b.n	800e616 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800e614:	2302      	movs	r3, #2
  }
}
 800e616:	4618      	mov	r0, r3
 800e618:	3720      	adds	r7, #32
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
	...

0800e620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b088      	sub	sp, #32
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e628:	2300      	movs	r3, #0
 800e62a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e62c:	2300      	movs	r3, #0
 800e62e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	689a      	ldr	r2, [r3, #8]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	691b      	ldr	r3, [r3, #16]
 800e638:	431a      	orrs	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	695b      	ldr	r3, [r3, #20]
 800e63e:	431a      	orrs	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	4313      	orrs	r3, r2
 800e646:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	4bb1      	ldr	r3, [pc, #708]	; (800e914 <UART_SetConfig+0x2f4>)
 800e650:	4013      	ands	r3, r2
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	6812      	ldr	r2, [r2, #0]
 800e656:	6939      	ldr	r1, [r7, #16]
 800e658:	430b      	orrs	r3, r1
 800e65a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	68da      	ldr	r2, [r3, #12]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	430a      	orrs	r2, r1
 800e670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6a1b      	ldr	r3, [r3, #32]
 800e67c:	693a      	ldr	r2, [r7, #16]
 800e67e:	4313      	orrs	r3, r2
 800e680:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	430a      	orrs	r2, r1
 800e694:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a9f      	ldr	r2, [pc, #636]	; (800e918 <UART_SetConfig+0x2f8>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d121      	bne.n	800e6e4 <UART_SetConfig+0xc4>
 800e6a0:	4b9e      	ldr	r3, [pc, #632]	; (800e91c <UART_SetConfig+0x2fc>)
 800e6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6a6:	f003 0303 	and.w	r3, r3, #3
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d816      	bhi.n	800e6dc <UART_SetConfig+0xbc>
 800e6ae:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <UART_SetConfig+0x94>)
 800e6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b4:	0800e6c5 	.word	0x0800e6c5
 800e6b8:	0800e6d1 	.word	0x0800e6d1
 800e6bc:	0800e6cb 	.word	0x0800e6cb
 800e6c0:	0800e6d7 	.word	0x0800e6d7
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	77fb      	strb	r3, [r7, #31]
 800e6c8:	e151      	b.n	800e96e <UART_SetConfig+0x34e>
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	77fb      	strb	r3, [r7, #31]
 800e6ce:	e14e      	b.n	800e96e <UART_SetConfig+0x34e>
 800e6d0:	2304      	movs	r3, #4
 800e6d2:	77fb      	strb	r3, [r7, #31]
 800e6d4:	e14b      	b.n	800e96e <UART_SetConfig+0x34e>
 800e6d6:	2308      	movs	r3, #8
 800e6d8:	77fb      	strb	r3, [r7, #31]
 800e6da:	e148      	b.n	800e96e <UART_SetConfig+0x34e>
 800e6dc:	2310      	movs	r3, #16
 800e6de:	77fb      	strb	r3, [r7, #31]
 800e6e0:	bf00      	nop
 800e6e2:	e144      	b.n	800e96e <UART_SetConfig+0x34e>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a8d      	ldr	r2, [pc, #564]	; (800e920 <UART_SetConfig+0x300>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d134      	bne.n	800e758 <UART_SetConfig+0x138>
 800e6ee:	4b8b      	ldr	r3, [pc, #556]	; (800e91c <UART_SetConfig+0x2fc>)
 800e6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6f4:	f003 030c 	and.w	r3, r3, #12
 800e6f8:	2b0c      	cmp	r3, #12
 800e6fa:	d829      	bhi.n	800e750 <UART_SetConfig+0x130>
 800e6fc:	a201      	add	r2, pc, #4	; (adr r2, 800e704 <UART_SetConfig+0xe4>)
 800e6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e702:	bf00      	nop
 800e704:	0800e739 	.word	0x0800e739
 800e708:	0800e751 	.word	0x0800e751
 800e70c:	0800e751 	.word	0x0800e751
 800e710:	0800e751 	.word	0x0800e751
 800e714:	0800e745 	.word	0x0800e745
 800e718:	0800e751 	.word	0x0800e751
 800e71c:	0800e751 	.word	0x0800e751
 800e720:	0800e751 	.word	0x0800e751
 800e724:	0800e73f 	.word	0x0800e73f
 800e728:	0800e751 	.word	0x0800e751
 800e72c:	0800e751 	.word	0x0800e751
 800e730:	0800e751 	.word	0x0800e751
 800e734:	0800e74b 	.word	0x0800e74b
 800e738:	2300      	movs	r3, #0
 800e73a:	77fb      	strb	r3, [r7, #31]
 800e73c:	e117      	b.n	800e96e <UART_SetConfig+0x34e>
 800e73e:	2302      	movs	r3, #2
 800e740:	77fb      	strb	r3, [r7, #31]
 800e742:	e114      	b.n	800e96e <UART_SetConfig+0x34e>
 800e744:	2304      	movs	r3, #4
 800e746:	77fb      	strb	r3, [r7, #31]
 800e748:	e111      	b.n	800e96e <UART_SetConfig+0x34e>
 800e74a:	2308      	movs	r3, #8
 800e74c:	77fb      	strb	r3, [r7, #31]
 800e74e:	e10e      	b.n	800e96e <UART_SetConfig+0x34e>
 800e750:	2310      	movs	r3, #16
 800e752:	77fb      	strb	r3, [r7, #31]
 800e754:	bf00      	nop
 800e756:	e10a      	b.n	800e96e <UART_SetConfig+0x34e>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a71      	ldr	r2, [pc, #452]	; (800e924 <UART_SetConfig+0x304>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d120      	bne.n	800e7a4 <UART_SetConfig+0x184>
 800e762:	4b6e      	ldr	r3, [pc, #440]	; (800e91c <UART_SetConfig+0x2fc>)
 800e764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e76c:	2b10      	cmp	r3, #16
 800e76e:	d00f      	beq.n	800e790 <UART_SetConfig+0x170>
 800e770:	2b10      	cmp	r3, #16
 800e772:	d802      	bhi.n	800e77a <UART_SetConfig+0x15a>
 800e774:	2b00      	cmp	r3, #0
 800e776:	d005      	beq.n	800e784 <UART_SetConfig+0x164>
 800e778:	e010      	b.n	800e79c <UART_SetConfig+0x17c>
 800e77a:	2b20      	cmp	r3, #32
 800e77c:	d005      	beq.n	800e78a <UART_SetConfig+0x16a>
 800e77e:	2b30      	cmp	r3, #48	; 0x30
 800e780:	d009      	beq.n	800e796 <UART_SetConfig+0x176>
 800e782:	e00b      	b.n	800e79c <UART_SetConfig+0x17c>
 800e784:	2300      	movs	r3, #0
 800e786:	77fb      	strb	r3, [r7, #31]
 800e788:	e0f1      	b.n	800e96e <UART_SetConfig+0x34e>
 800e78a:	2302      	movs	r3, #2
 800e78c:	77fb      	strb	r3, [r7, #31]
 800e78e:	e0ee      	b.n	800e96e <UART_SetConfig+0x34e>
 800e790:	2304      	movs	r3, #4
 800e792:	77fb      	strb	r3, [r7, #31]
 800e794:	e0eb      	b.n	800e96e <UART_SetConfig+0x34e>
 800e796:	2308      	movs	r3, #8
 800e798:	77fb      	strb	r3, [r7, #31]
 800e79a:	e0e8      	b.n	800e96e <UART_SetConfig+0x34e>
 800e79c:	2310      	movs	r3, #16
 800e79e:	77fb      	strb	r3, [r7, #31]
 800e7a0:	bf00      	nop
 800e7a2:	e0e4      	b.n	800e96e <UART_SetConfig+0x34e>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a5f      	ldr	r2, [pc, #380]	; (800e928 <UART_SetConfig+0x308>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d120      	bne.n	800e7f0 <UART_SetConfig+0x1d0>
 800e7ae:	4b5b      	ldr	r3, [pc, #364]	; (800e91c <UART_SetConfig+0x2fc>)
 800e7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7b8:	2b40      	cmp	r3, #64	; 0x40
 800e7ba:	d00f      	beq.n	800e7dc <UART_SetConfig+0x1bc>
 800e7bc:	2b40      	cmp	r3, #64	; 0x40
 800e7be:	d802      	bhi.n	800e7c6 <UART_SetConfig+0x1a6>
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d005      	beq.n	800e7d0 <UART_SetConfig+0x1b0>
 800e7c4:	e010      	b.n	800e7e8 <UART_SetConfig+0x1c8>
 800e7c6:	2b80      	cmp	r3, #128	; 0x80
 800e7c8:	d005      	beq.n	800e7d6 <UART_SetConfig+0x1b6>
 800e7ca:	2bc0      	cmp	r3, #192	; 0xc0
 800e7cc:	d009      	beq.n	800e7e2 <UART_SetConfig+0x1c2>
 800e7ce:	e00b      	b.n	800e7e8 <UART_SetConfig+0x1c8>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	77fb      	strb	r3, [r7, #31]
 800e7d4:	e0cb      	b.n	800e96e <UART_SetConfig+0x34e>
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	77fb      	strb	r3, [r7, #31]
 800e7da:	e0c8      	b.n	800e96e <UART_SetConfig+0x34e>
 800e7dc:	2304      	movs	r3, #4
 800e7de:	77fb      	strb	r3, [r7, #31]
 800e7e0:	e0c5      	b.n	800e96e <UART_SetConfig+0x34e>
 800e7e2:	2308      	movs	r3, #8
 800e7e4:	77fb      	strb	r3, [r7, #31]
 800e7e6:	e0c2      	b.n	800e96e <UART_SetConfig+0x34e>
 800e7e8:	2310      	movs	r3, #16
 800e7ea:	77fb      	strb	r3, [r7, #31]
 800e7ec:	bf00      	nop
 800e7ee:	e0be      	b.n	800e96e <UART_SetConfig+0x34e>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a4d      	ldr	r2, [pc, #308]	; (800e92c <UART_SetConfig+0x30c>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d124      	bne.n	800e844 <UART_SetConfig+0x224>
 800e7fa:	4b48      	ldr	r3, [pc, #288]	; (800e91c <UART_SetConfig+0x2fc>)
 800e7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e808:	d012      	beq.n	800e830 <UART_SetConfig+0x210>
 800e80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e80e:	d802      	bhi.n	800e816 <UART_SetConfig+0x1f6>
 800e810:	2b00      	cmp	r3, #0
 800e812:	d007      	beq.n	800e824 <UART_SetConfig+0x204>
 800e814:	e012      	b.n	800e83c <UART_SetConfig+0x21c>
 800e816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e81a:	d006      	beq.n	800e82a <UART_SetConfig+0x20a>
 800e81c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e820:	d009      	beq.n	800e836 <UART_SetConfig+0x216>
 800e822:	e00b      	b.n	800e83c <UART_SetConfig+0x21c>
 800e824:	2300      	movs	r3, #0
 800e826:	77fb      	strb	r3, [r7, #31]
 800e828:	e0a1      	b.n	800e96e <UART_SetConfig+0x34e>
 800e82a:	2302      	movs	r3, #2
 800e82c:	77fb      	strb	r3, [r7, #31]
 800e82e:	e09e      	b.n	800e96e <UART_SetConfig+0x34e>
 800e830:	2304      	movs	r3, #4
 800e832:	77fb      	strb	r3, [r7, #31]
 800e834:	e09b      	b.n	800e96e <UART_SetConfig+0x34e>
 800e836:	2308      	movs	r3, #8
 800e838:	77fb      	strb	r3, [r7, #31]
 800e83a:	e098      	b.n	800e96e <UART_SetConfig+0x34e>
 800e83c:	2310      	movs	r3, #16
 800e83e:	77fb      	strb	r3, [r7, #31]
 800e840:	bf00      	nop
 800e842:	e094      	b.n	800e96e <UART_SetConfig+0x34e>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a39      	ldr	r2, [pc, #228]	; (800e930 <UART_SetConfig+0x310>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d124      	bne.n	800e898 <UART_SetConfig+0x278>
 800e84e:	4b33      	ldr	r3, [pc, #204]	; (800e91c <UART_SetConfig+0x2fc>)
 800e850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e85c:	d012      	beq.n	800e884 <UART_SetConfig+0x264>
 800e85e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e862:	d802      	bhi.n	800e86a <UART_SetConfig+0x24a>
 800e864:	2b00      	cmp	r3, #0
 800e866:	d007      	beq.n	800e878 <UART_SetConfig+0x258>
 800e868:	e012      	b.n	800e890 <UART_SetConfig+0x270>
 800e86a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e86e:	d006      	beq.n	800e87e <UART_SetConfig+0x25e>
 800e870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e874:	d009      	beq.n	800e88a <UART_SetConfig+0x26a>
 800e876:	e00b      	b.n	800e890 <UART_SetConfig+0x270>
 800e878:	2301      	movs	r3, #1
 800e87a:	77fb      	strb	r3, [r7, #31]
 800e87c:	e077      	b.n	800e96e <UART_SetConfig+0x34e>
 800e87e:	2302      	movs	r3, #2
 800e880:	77fb      	strb	r3, [r7, #31]
 800e882:	e074      	b.n	800e96e <UART_SetConfig+0x34e>
 800e884:	2304      	movs	r3, #4
 800e886:	77fb      	strb	r3, [r7, #31]
 800e888:	e071      	b.n	800e96e <UART_SetConfig+0x34e>
 800e88a:	2308      	movs	r3, #8
 800e88c:	77fb      	strb	r3, [r7, #31]
 800e88e:	e06e      	b.n	800e96e <UART_SetConfig+0x34e>
 800e890:	2310      	movs	r3, #16
 800e892:	77fb      	strb	r3, [r7, #31]
 800e894:	bf00      	nop
 800e896:	e06a      	b.n	800e96e <UART_SetConfig+0x34e>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a25      	ldr	r2, [pc, #148]	; (800e934 <UART_SetConfig+0x314>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d124      	bne.n	800e8ec <UART_SetConfig+0x2cc>
 800e8a2:	4b1e      	ldr	r3, [pc, #120]	; (800e91c <UART_SetConfig+0x2fc>)
 800e8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e8ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8b0:	d012      	beq.n	800e8d8 <UART_SetConfig+0x2b8>
 800e8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8b6:	d802      	bhi.n	800e8be <UART_SetConfig+0x29e>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d007      	beq.n	800e8cc <UART_SetConfig+0x2ac>
 800e8bc:	e012      	b.n	800e8e4 <UART_SetConfig+0x2c4>
 800e8be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8c2:	d006      	beq.n	800e8d2 <UART_SetConfig+0x2b2>
 800e8c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8c8:	d009      	beq.n	800e8de <UART_SetConfig+0x2be>
 800e8ca:	e00b      	b.n	800e8e4 <UART_SetConfig+0x2c4>
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	77fb      	strb	r3, [r7, #31]
 800e8d0:	e04d      	b.n	800e96e <UART_SetConfig+0x34e>
 800e8d2:	2302      	movs	r3, #2
 800e8d4:	77fb      	strb	r3, [r7, #31]
 800e8d6:	e04a      	b.n	800e96e <UART_SetConfig+0x34e>
 800e8d8:	2304      	movs	r3, #4
 800e8da:	77fb      	strb	r3, [r7, #31]
 800e8dc:	e047      	b.n	800e96e <UART_SetConfig+0x34e>
 800e8de:	2308      	movs	r3, #8
 800e8e0:	77fb      	strb	r3, [r7, #31]
 800e8e2:	e044      	b.n	800e96e <UART_SetConfig+0x34e>
 800e8e4:	2310      	movs	r3, #16
 800e8e6:	77fb      	strb	r3, [r7, #31]
 800e8e8:	bf00      	nop
 800e8ea:	e040      	b.n	800e96e <UART_SetConfig+0x34e>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a11      	ldr	r2, [pc, #68]	; (800e938 <UART_SetConfig+0x318>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d139      	bne.n	800e96a <UART_SetConfig+0x34a>
 800e8f6:	4b09      	ldr	r3, [pc, #36]	; (800e91c <UART_SetConfig+0x2fc>)
 800e8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e904:	d027      	beq.n	800e956 <UART_SetConfig+0x336>
 800e906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e90a:	d817      	bhi.n	800e93c <UART_SetConfig+0x31c>
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01c      	beq.n	800e94a <UART_SetConfig+0x32a>
 800e910:	e027      	b.n	800e962 <UART_SetConfig+0x342>
 800e912:	bf00      	nop
 800e914:	efff69f3 	.word	0xefff69f3
 800e918:	40011000 	.word	0x40011000
 800e91c:	40023800 	.word	0x40023800
 800e920:	40004400 	.word	0x40004400
 800e924:	40004800 	.word	0x40004800
 800e928:	40004c00 	.word	0x40004c00
 800e92c:	40005000 	.word	0x40005000
 800e930:	40011400 	.word	0x40011400
 800e934:	40007800 	.word	0x40007800
 800e938:	40007c00 	.word	0x40007c00
 800e93c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e940:	d006      	beq.n	800e950 <UART_SetConfig+0x330>
 800e942:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e946:	d009      	beq.n	800e95c <UART_SetConfig+0x33c>
 800e948:	e00b      	b.n	800e962 <UART_SetConfig+0x342>
 800e94a:	2300      	movs	r3, #0
 800e94c:	77fb      	strb	r3, [r7, #31]
 800e94e:	e00e      	b.n	800e96e <UART_SetConfig+0x34e>
 800e950:	2302      	movs	r3, #2
 800e952:	77fb      	strb	r3, [r7, #31]
 800e954:	e00b      	b.n	800e96e <UART_SetConfig+0x34e>
 800e956:	2304      	movs	r3, #4
 800e958:	77fb      	strb	r3, [r7, #31]
 800e95a:	e008      	b.n	800e96e <UART_SetConfig+0x34e>
 800e95c:	2308      	movs	r3, #8
 800e95e:	77fb      	strb	r3, [r7, #31]
 800e960:	e005      	b.n	800e96e <UART_SetConfig+0x34e>
 800e962:	2310      	movs	r3, #16
 800e964:	77fb      	strb	r3, [r7, #31]
 800e966:	bf00      	nop
 800e968:	e001      	b.n	800e96e <UART_SetConfig+0x34e>
 800e96a:	2310      	movs	r3, #16
 800e96c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	69db      	ldr	r3, [r3, #28]
 800e972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e976:	d17f      	bne.n	800ea78 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800e978:	7ffb      	ldrb	r3, [r7, #31]
 800e97a:	2b08      	cmp	r3, #8
 800e97c:	d85c      	bhi.n	800ea38 <UART_SetConfig+0x418>
 800e97e:	a201      	add	r2, pc, #4	; (adr r2, 800e984 <UART_SetConfig+0x364>)
 800e980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e984:	0800e9a9 	.word	0x0800e9a9
 800e988:	0800e9c9 	.word	0x0800e9c9
 800e98c:	0800e9e9 	.word	0x0800e9e9
 800e990:	0800ea39 	.word	0x0800ea39
 800e994:	0800ea01 	.word	0x0800ea01
 800e998:	0800ea39 	.word	0x0800ea39
 800e99c:	0800ea39 	.word	0x0800ea39
 800e9a0:	0800ea39 	.word	0x0800ea39
 800e9a4:	0800ea21 	.word	0x0800ea21
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9a8:	f7fd fc16 	bl	800c1d8 <HAL_RCC_GetPCLK1Freq>
 800e9ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	005a      	lsls	r2, r3, #1
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	085b      	lsrs	r3, r3, #1
 800e9b8:	441a      	add	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	61bb      	str	r3, [r7, #24]
        break;
 800e9c6:	e03a      	b.n	800ea3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9c8:	f7fd fc1a 	bl	800c200 <HAL_RCC_GetPCLK2Freq>
 800e9cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	005a      	lsls	r2, r3, #1
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	085b      	lsrs	r3, r3, #1
 800e9d8:	441a      	add	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	61bb      	str	r3, [r7, #24]
        break;
 800e9e6:	e02a      	b.n	800ea3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	085a      	lsrs	r2, r3, #1
 800e9ee:	4b5f      	ldr	r3, [pc, #380]	; (800eb6c <UART_SetConfig+0x54c>)
 800e9f0:	4413      	add	r3, r2
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	6852      	ldr	r2, [r2, #4]
 800e9f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	61bb      	str	r3, [r7, #24]
        break;
 800e9fe:	e01e      	b.n	800ea3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea00:	f7fd fb2c 	bl	800c05c <HAL_RCC_GetSysClockFreq>
 800ea04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	005a      	lsls	r2, r3, #1
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	085b      	lsrs	r3, r3, #1
 800ea10:	441a      	add	r2, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	61bb      	str	r3, [r7, #24]
        break;
 800ea1e:	e00e      	b.n	800ea3e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	085b      	lsrs	r3, r3, #1
 800ea26:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	61bb      	str	r3, [r7, #24]
        break;
 800ea36:	e002      	b.n	800ea3e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	75fb      	strb	r3, [r7, #23]
        break;
 800ea3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	2b0f      	cmp	r3, #15
 800ea42:	d916      	bls.n	800ea72 <UART_SetConfig+0x452>
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea4a:	d212      	bcs.n	800ea72 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	f023 030f 	bic.w	r3, r3, #15
 800ea54:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	085b      	lsrs	r3, r3, #1
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	f003 0307 	and.w	r3, r3, #7
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	897b      	ldrh	r3, [r7, #10]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	897a      	ldrh	r2, [r7, #10]
 800ea6e:	60da      	str	r2, [r3, #12]
 800ea70:	e070      	b.n	800eb54 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ea72:	2301      	movs	r3, #1
 800ea74:	75fb      	strb	r3, [r7, #23]
 800ea76:	e06d      	b.n	800eb54 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ea78:	7ffb      	ldrb	r3, [r7, #31]
 800ea7a:	2b08      	cmp	r3, #8
 800ea7c:	d859      	bhi.n	800eb32 <UART_SetConfig+0x512>
 800ea7e:	a201      	add	r2, pc, #4	; (adr r2, 800ea84 <UART_SetConfig+0x464>)
 800ea80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea84:	0800eaa9 	.word	0x0800eaa9
 800ea88:	0800eac7 	.word	0x0800eac7
 800ea8c:	0800eae5 	.word	0x0800eae5
 800ea90:	0800eb33 	.word	0x0800eb33
 800ea94:	0800eafd 	.word	0x0800eafd
 800ea98:	0800eb33 	.word	0x0800eb33
 800ea9c:	0800eb33 	.word	0x0800eb33
 800eaa0:	0800eb33 	.word	0x0800eb33
 800eaa4:	0800eb1b 	.word	0x0800eb1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eaa8:	f7fd fb96 	bl	800c1d8 <HAL_RCC_GetPCLK1Freq>
 800eaac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	085a      	lsrs	r2, r3, #1
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	441a      	add	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	61bb      	str	r3, [r7, #24]
        break;
 800eac4:	e038      	b.n	800eb38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eac6:	f7fd fb9b 	bl	800c200 <HAL_RCC_GetPCLK2Freq>
 800eaca:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	085a      	lsrs	r2, r3, #1
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	441a      	add	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	fbb2 f3f3 	udiv	r3, r2, r3
 800eade:	b29b      	uxth	r3, r3
 800eae0:	61bb      	str	r3, [r7, #24]
        break;
 800eae2:	e029      	b.n	800eb38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	085a      	lsrs	r2, r3, #1
 800eaea:	4b21      	ldr	r3, [pc, #132]	; (800eb70 <UART_SetConfig+0x550>)
 800eaec:	4413      	add	r3, r2
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	6852      	ldr	r2, [r2, #4]
 800eaf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	61bb      	str	r3, [r7, #24]
        break;
 800eafa:	e01d      	b.n	800eb38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eafc:	f7fd faae 	bl	800c05c <HAL_RCC_GetSysClockFreq>
 800eb00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	685b      	ldr	r3, [r3, #4]
 800eb06:	085a      	lsrs	r2, r3, #1
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	441a      	add	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	61bb      	str	r3, [r7, #24]
        break;
 800eb18:	e00e      	b.n	800eb38 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	085b      	lsrs	r3, r3, #1
 800eb20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	61bb      	str	r3, [r7, #24]
        break;
 800eb30:	e002      	b.n	800eb38 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800eb32:	2301      	movs	r3, #1
 800eb34:	75fb      	strb	r3, [r7, #23]
        break;
 800eb36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	2b0f      	cmp	r3, #15
 800eb3c:	d908      	bls.n	800eb50 <UART_SetConfig+0x530>
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb44:	d204      	bcs.n	800eb50 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	69ba      	ldr	r2, [r7, #24]
 800eb4c:	60da      	str	r2, [r3, #12]
 800eb4e:	e001      	b.n	800eb54 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800eb60:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3720      	adds	r7, #32
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	01e84800 	.word	0x01e84800
 800eb70:	00f42400 	.word	0x00f42400

0800eb74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb80:	f003 0301 	and.w	r3, r3, #1
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00a      	beq.n	800eb9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba2:	f003 0302 	and.w	r3, r3, #2
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00a      	beq.n	800ebc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	430a      	orrs	r2, r1
 800ebbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc4:	f003 0304 	and.w	r3, r3, #4
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00a      	beq.n	800ebe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	430a      	orrs	r2, r1
 800ebe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe6:	f003 0308 	and.w	r3, r3, #8
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00a      	beq.n	800ec04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	430a      	orrs	r2, r1
 800ec02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	f003 0310 	and.w	r3, r3, #16
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00a      	beq.n	800ec26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	430a      	orrs	r2, r1
 800ec24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2a:	f003 0320 	and.w	r3, r3, #32
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00a      	beq.n	800ec48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	430a      	orrs	r2, r1
 800ec46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d01a      	beq.n	800ec8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	430a      	orrs	r2, r1
 800ec68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec72:	d10a      	bne.n	800ec8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	430a      	orrs	r2, r1
 800ec88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d00a      	beq.n	800ecac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	430a      	orrs	r2, r1
 800ecaa:	605a      	str	r2, [r3, #4]
  }
}
 800ecac:	bf00      	nop
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af02      	add	r7, sp, #8
 800ecbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ecc6:	f7fa f871 	bl	8008dac <HAL_GetTick>
 800ecca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f003 0308 	and.w	r3, r3, #8
 800ecd6:	2b08      	cmp	r3, #8
 800ecd8:	d10e      	bne.n	800ecf8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ecda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f82a 	bl	800ed42 <UART_WaitOnFlagUntilTimeout>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d001      	beq.n	800ecf8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	e020      	b.n	800ed3a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f003 0304 	and.w	r3, r3, #4
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	d10e      	bne.n	800ed24 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 f814 	bl	800ed42 <UART_WaitOnFlagUntilTimeout>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed20:	2303      	movs	r3, #3
 800ed22:	e00a      	b.n	800ed3a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2220      	movs	r2, #32
 800ed28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b084      	sub	sp, #16
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	60f8      	str	r0, [r7, #12]
 800ed4a:	60b9      	str	r1, [r7, #8]
 800ed4c:	603b      	str	r3, [r7, #0]
 800ed4e:	4613      	mov	r3, r2
 800ed50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed52:	e05d      	b.n	800ee10 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5a:	d059      	beq.n	800ee10 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed5c:	f7fa f826 	bl	8008dac <HAL_GetTick>
 800ed60:	4602      	mov	r2, r0
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	69ba      	ldr	r2, [r7, #24]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d302      	bcc.n	800ed72 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d11b      	bne.n	800edaa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ed80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	689a      	ldr	r2, [r3, #8]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f022 0201 	bic.w	r2, r2, #1
 800ed90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2220      	movs	r2, #32
 800ed96:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2220      	movs	r2, #32
 800ed9c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800eda6:	2303      	movs	r3, #3
 800eda8:	e042      	b.n	800ee30 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f003 0304 	and.w	r3, r3, #4
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d02b      	beq.n	800ee10 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	69db      	ldr	r3, [r3, #28]
 800edbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edc6:	d123      	bne.n	800ee10 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edd0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ede0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	689a      	ldr	r2, [r3, #8]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f022 0201 	bic.w	r2, r2, #1
 800edf0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2220      	movs	r2, #32
 800edf6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2220      	movs	r2, #32
 800edfc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2220      	movs	r2, #32
 800ee02:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	e00f      	b.n	800ee30 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	69da      	ldr	r2, [r3, #28]
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	4013      	ands	r3, r2
 800ee1a:	68ba      	ldr	r2, [r7, #8]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	bf0c      	ite	eq
 800ee20:	2301      	moveq	r3, #1
 800ee22:	2300      	movne	r3, #0
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	461a      	mov	r2, r3
 800ee28:	79fb      	ldrb	r3, [r7, #7]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d092      	beq.n	800ed54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3710      	adds	r7, #16
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee38:	b084      	sub	sp, #16
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b084      	sub	sp, #16
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
 800ee42:	f107 001c 	add.w	r0, r7, #28
 800ee46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d120      	bne.n	800ee92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	68da      	ldr	r2, [r3, #12]
 800ee60:	4b20      	ldr	r3, [pc, #128]	; (800eee4 <USB_CoreInit+0xac>)
 800ee62:	4013      	ands	r3, r2
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ee74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d105      	bne.n	800ee86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 fa52 	bl	800f330 <USB_CoreReset>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	73fb      	strb	r3, [r7, #15]
 800ee90:	e010      	b.n	800eeb4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fa46 	bl	800f330 <USB_CoreReset>
 800eea4:	4603      	mov	r3, r0
 800eea6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800eeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d10b      	bne.n	800eed2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	f043 0206 	orr.w	r2, r3, #6
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	f043 0220 	orr.w	r2, r3, #32
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800eed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eede:	b004      	add	sp, #16
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	ffbdffbf 	.word	0xffbdffbf

0800eee8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	f023 0201 	bic.w	r2, r3, #1
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	370c      	adds	r7, #12
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr

0800ef0a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b082      	sub	sp, #8
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
 800ef12:	460b      	mov	r3, r1
 800ef14:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ef22:	78fb      	ldrb	r3, [r7, #3]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d106      	bne.n	800ef36 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	60da      	str	r2, [r3, #12]
 800ef34:	e00b      	b.n	800ef4e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ef36:	78fb      	ldrb	r3, [r7, #3]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d106      	bne.n	800ef4a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	60da      	str	r2, [r3, #12]
 800ef48:	e001      	b.n	800ef4e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e003      	b.n	800ef56 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ef4e:	2032      	movs	r0, #50	; 0x32
 800ef50:	f7f9 ff38 	bl	8008dc4 <HAL_Delay>

  return HAL_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
	...

0800ef60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ef60:	b084      	sub	sp, #16
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b086      	sub	sp, #24
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ef6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ef72:	2300      	movs	r3, #0
 800ef74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	613b      	str	r3, [r7, #16]
 800ef7e:	e009      	b.n	800ef94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	3340      	adds	r3, #64	; 0x40
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	4413      	add	r3, r2
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	3301      	adds	r3, #1
 800ef92:	613b      	str	r3, [r7, #16]
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	2b0e      	cmp	r3, #14
 800ef98:	d9f2      	bls.n	800ef80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ef9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d11c      	bne.n	800efda <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efae:	f043 0302 	orr.w	r3, r3, #2
 800efb2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efb8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	e005      	b.n	800efe6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800efec:	461a      	mov	r2, r3
 800efee:	2300      	movs	r3, #0
 800eff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eff8:	4619      	mov	r1, r3
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f000:	461a      	mov	r2, r3
 800f002:	680b      	ldr	r3, [r1, #0]
 800f004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d10c      	bne.n	800f026 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d104      	bne.n	800f01c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f012:	2100      	movs	r1, #0
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f959 	bl	800f2cc <USB_SetDevSpeed>
 800f01a:	e018      	b.n	800f04e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f01c:	2101      	movs	r1, #1
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f954 	bl	800f2cc <USB_SetDevSpeed>
 800f024:	e013      	b.n	800f04e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f028:	2b03      	cmp	r3, #3
 800f02a:	d10c      	bne.n	800f046 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d104      	bne.n	800f03c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f032:	2100      	movs	r1, #0
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f949 	bl	800f2cc <USB_SetDevSpeed>
 800f03a:	e008      	b.n	800f04e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f03c:	2101      	movs	r1, #1
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 f944 	bl	800f2cc <USB_SetDevSpeed>
 800f044:	e003      	b.n	800f04e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f046:	2103      	movs	r1, #3
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f93f 	bl	800f2cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f04e:	2110      	movs	r1, #16
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 f8f3 	bl	800f23c <USB_FlushTxFifo>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800f05c:	2301      	movs	r3, #1
 800f05e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 f911 	bl	800f288 <USB_FlushRxFifo>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800f06c:	2301      	movs	r3, #1
 800f06e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f076:	461a      	mov	r2, r3
 800f078:	2300      	movs	r3, #0
 800f07a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f082:	461a      	mov	r2, r3
 800f084:	2300      	movs	r3, #0
 800f086:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f08e:	461a      	mov	r2, r3
 800f090:	2300      	movs	r3, #0
 800f092:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f094:	2300      	movs	r3, #0
 800f096:	613b      	str	r3, [r7, #16]
 800f098:	e043      	b.n	800f122 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	015a      	lsls	r2, r3, #5
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0b0:	d118      	bne.n	800f0e4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10a      	bne.n	800f0ce <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	015a      	lsls	r2, r3, #5
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	4413      	add	r3, r2
 800f0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f0ca:	6013      	str	r3, [r2, #0]
 800f0cc:	e013      	b.n	800f0f6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	015a      	lsls	r2, r3, #5
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0da:	461a      	mov	r2, r3
 800f0dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f0e0:	6013      	str	r3, [r2, #0]
 800f0e2:	e008      	b.n	800f0f6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	015a      	lsls	r2, r3, #5
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	015a      	lsls	r2, r3, #5
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f102:	461a      	mov	r2, r3
 800f104:	2300      	movs	r3, #0
 800f106:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	015a      	lsls	r2, r3, #5
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	4413      	add	r3, r2
 800f110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f114:	461a      	mov	r2, r3
 800f116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f11a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	3301      	adds	r3, #1
 800f120:	613b      	str	r3, [r7, #16]
 800f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	429a      	cmp	r2, r3
 800f128:	d3b7      	bcc.n	800f09a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f12a:	2300      	movs	r3, #0
 800f12c:	613b      	str	r3, [r7, #16]
 800f12e:	e043      	b.n	800f1b8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	015a      	lsls	r2, r3, #5
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4413      	add	r3, r2
 800f138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f146:	d118      	bne.n	800f17a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10a      	bne.n	800f164 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	015a      	lsls	r2, r3, #5
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	4413      	add	r3, r2
 800f156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f15a:	461a      	mov	r2, r3
 800f15c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f160:	6013      	str	r3, [r2, #0]
 800f162:	e013      	b.n	800f18c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	015a      	lsls	r2, r3, #5
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4413      	add	r3, r2
 800f16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f170:	461a      	mov	r2, r3
 800f172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	e008      	b.n	800f18c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	015a      	lsls	r2, r3, #5
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	4413      	add	r3, r2
 800f182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f186:	461a      	mov	r2, r3
 800f188:	2300      	movs	r3, #0
 800f18a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	015a      	lsls	r2, r3, #5
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4413      	add	r3, r2
 800f194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f198:	461a      	mov	r2, r3
 800f19a:	2300      	movs	r3, #0
 800f19c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	015a      	lsls	r2, r3, #5
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f1b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	613b      	str	r3, [r7, #16]
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	693a      	ldr	r2, [r7, #16]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d3b7      	bcc.n	800f130 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1c6:	691b      	ldr	r3, [r3, #16]
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f1e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d105      	bne.n	800f1f4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	699b      	ldr	r3, [r3, #24]
 800f1ec:	f043 0210 	orr.w	r2, r3, #16
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	699a      	ldr	r2, [r3, #24]
 800f1f8:	4b0e      	ldr	r3, [pc, #56]	; (800f234 <USB_DevInit+0x2d4>)
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f202:	2b00      	cmp	r3, #0
 800f204:	d005      	beq.n	800f212 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	699b      	ldr	r3, [r3, #24]
 800f20a:	f043 0208 	orr.w	r2, r3, #8
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f214:	2b01      	cmp	r3, #1
 800f216:	d105      	bne.n	800f224 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	699a      	ldr	r2, [r3, #24]
 800f21c:	4b06      	ldr	r3, [pc, #24]	; (800f238 <USB_DevInit+0x2d8>)
 800f21e:	4313      	orrs	r3, r2
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f224:	7dfb      	ldrb	r3, [r7, #23]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f230:	b004      	add	sp, #16
 800f232:	4770      	bx	lr
 800f234:	803c3800 	.word	0x803c3800
 800f238:	40000004 	.word	0x40000004

0800f23c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f246:	2300      	movs	r3, #0
 800f248:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	019b      	lsls	r3, r3, #6
 800f24e:	f043 0220 	orr.w	r2, r3, #32
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3301      	adds	r3, #1
 800f25a:	60fb      	str	r3, [r7, #12]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	4a09      	ldr	r2, [pc, #36]	; (800f284 <USB_FlushTxFifo+0x48>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d901      	bls.n	800f268 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f264:	2303      	movs	r3, #3
 800f266:	e006      	b.n	800f276 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	f003 0320 	and.w	r3, r3, #32
 800f270:	2b20      	cmp	r3, #32
 800f272:	d0f0      	beq.n	800f256 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	00030d40 	.word	0x00030d40

0800f288 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f290:	2300      	movs	r3, #0
 800f292:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2210      	movs	r2, #16
 800f298:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	3301      	adds	r3, #1
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	4a09      	ldr	r2, [pc, #36]	; (800f2c8 <USB_FlushRxFifo+0x40>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d901      	bls.n	800f2ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	e006      	b.n	800f2ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	f003 0310 	and.w	r3, r3, #16
 800f2b4:	2b10      	cmp	r3, #16
 800f2b6:	d0f0      	beq.n	800f29a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	00030d40 	.word	0x00030d40

0800f2cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	78fb      	ldrb	r3, [r7, #3]
 800f2e6:	68f9      	ldr	r1, [r7, #12]
 800f2e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b084      	sub	sp, #16
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f318:	f043 0302 	orr.w	r3, r3, #2
 800f31c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f31e:	2003      	movs	r0, #3
 800f320:	f7f9 fd50 	bl	8008dc4 <HAL_Delay>

  return HAL_OK;
 800f324:	2300      	movs	r3, #0
}
 800f326:	4618      	mov	r0, r3
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
	...

0800f330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f338:	2300      	movs	r3, #0
 800f33a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	3301      	adds	r3, #1
 800f340:	60fb      	str	r3, [r7, #12]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	4a13      	ldr	r2, [pc, #76]	; (800f394 <USB_CoreReset+0x64>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d901      	bls.n	800f34e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e01b      	b.n	800f386 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	691b      	ldr	r3, [r3, #16]
 800f352:	2b00      	cmp	r3, #0
 800f354:	daf2      	bge.n	800f33c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f356:	2300      	movs	r3, #0
 800f358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	f043 0201 	orr.w	r2, r3, #1
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	3301      	adds	r3, #1
 800f36a:	60fb      	str	r3, [r7, #12]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	4a09      	ldr	r2, [pc, #36]	; (800f394 <USB_CoreReset+0x64>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d901      	bls.n	800f378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f374:	2303      	movs	r3, #3
 800f376:	e006      	b.n	800f386 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	f003 0301 	and.w	r3, r3, #1
 800f380:	2b01      	cmp	r3, #1
 800f382:	d0f0      	beq.n	800f366 <USB_CoreReset+0x36>

  return HAL_OK;
 800f384:	2300      	movs	r3, #0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	00030d40 	.word	0x00030d40

0800f398 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f39c:	bf00      	nop
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
	...

0800f3a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3ae:	f3ef 8305 	mrs	r3, IPSR
 800f3b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10f      	bne.n	800f3da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3ba:	f3ef 8310 	mrs	r3, PRIMASK
 800f3be:	607b      	str	r3, [r7, #4]
  return(result);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d105      	bne.n	800f3d2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f3c6:	f3ef 8311 	mrs	r3, BASEPRI
 800f3ca:	603b      	str	r3, [r7, #0]
  return(result);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d007      	beq.n	800f3e2 <osKernelInitialize+0x3a>
 800f3d2:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <osKernelInitialize+0x64>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	d103      	bne.n	800f3e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f3da:	f06f 0305 	mvn.w	r3, #5
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	e00c      	b.n	800f3fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f3e2:	4b0a      	ldr	r3, [pc, #40]	; (800f40c <osKernelInitialize+0x64>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d105      	bne.n	800f3f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f3ea:	4b08      	ldr	r3, [pc, #32]	; (800f40c <osKernelInitialize+0x64>)
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	e002      	b.n	800f3fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3714      	adds	r7, #20
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	20003384 	.word	0x20003384

0800f410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f416:	f3ef 8305 	mrs	r3, IPSR
 800f41a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f41c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d10f      	bne.n	800f442 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f422:	f3ef 8310 	mrs	r3, PRIMASK
 800f426:	607b      	str	r3, [r7, #4]
  return(result);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d105      	bne.n	800f43a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f42e:	f3ef 8311 	mrs	r3, BASEPRI
 800f432:	603b      	str	r3, [r7, #0]
  return(result);
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d007      	beq.n	800f44a <osKernelStart+0x3a>
 800f43a:	4b0f      	ldr	r3, [pc, #60]	; (800f478 <osKernelStart+0x68>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d103      	bne.n	800f44a <osKernelStart+0x3a>
    stat = osErrorISR;
 800f442:	f06f 0305 	mvn.w	r3, #5
 800f446:	60fb      	str	r3, [r7, #12]
 800f448:	e010      	b.n	800f46c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f44a:	4b0b      	ldr	r3, [pc, #44]	; (800f478 <osKernelStart+0x68>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d109      	bne.n	800f466 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f452:	f7ff ffa1 	bl	800f398 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f456:	4b08      	ldr	r3, [pc, #32]	; (800f478 <osKernelStart+0x68>)
 800f458:	2202      	movs	r2, #2
 800f45a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f45c:	f001 f916 	bl	801068c <vTaskStartScheduler>
      stat = osOK;
 800f460:	2300      	movs	r3, #0
 800f462:	60fb      	str	r3, [r7, #12]
 800f464:	e002      	b.n	800f46c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f466:	f04f 33ff 	mov.w	r3, #4294967295
 800f46a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f46c:	68fb      	ldr	r3, [r7, #12]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	20003384 	.word	0x20003384

0800f47c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b090      	sub	sp, #64	; 0x40
 800f480:	af04      	add	r7, sp, #16
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f488:	2300      	movs	r3, #0
 800f48a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f48c:	f3ef 8305 	mrs	r3, IPSR
 800f490:	61fb      	str	r3, [r7, #28]
  return(result);
 800f492:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f494:	2b00      	cmp	r3, #0
 800f496:	f040 808f 	bne.w	800f5b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f49a:	f3ef 8310 	mrs	r3, PRIMASK
 800f49e:	61bb      	str	r3, [r7, #24]
  return(result);
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d105      	bne.n	800f4b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4a6:	f3ef 8311 	mrs	r3, BASEPRI
 800f4aa:	617b      	str	r3, [r7, #20]
  return(result);
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d003      	beq.n	800f4ba <osThreadNew+0x3e>
 800f4b2:	4b44      	ldr	r3, [pc, #272]	; (800f5c4 <osThreadNew+0x148>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d07e      	beq.n	800f5b8 <osThreadNew+0x13c>
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d07b      	beq.n	800f5b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f4c0:	2380      	movs	r3, #128	; 0x80
 800f4c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f4c4:	2318      	movs	r3, #24
 800f4c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d045      	beq.n	800f564 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <osThreadNew+0x6a>
        name = attr->name;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	699b      	ldr	r3, [r3, #24]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d002      	beq.n	800f4f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	699b      	ldr	r3, [r3, #24]
 800f4f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d008      	beq.n	800f50c <osThreadNew+0x90>
 800f4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fc:	2b38      	cmp	r3, #56	; 0x38
 800f4fe:	d805      	bhi.n	800f50c <osThreadNew+0x90>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <osThreadNew+0x94>
        return (NULL);
 800f50c:	2300      	movs	r3, #0
 800f50e:	e054      	b.n	800f5ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	695b      	ldr	r3, [r3, #20]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d003      	beq.n	800f520 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	695b      	ldr	r3, [r3, #20]
 800f51c:	089b      	lsrs	r3, r3, #2
 800f51e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d00e      	beq.n	800f546 <osThreadNew+0xca>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	2b5b      	cmp	r3, #91	; 0x5b
 800f52e:	d90a      	bls.n	800f546 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f534:	2b00      	cmp	r3, #0
 800f536:	d006      	beq.n	800f546 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	695b      	ldr	r3, [r3, #20]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <osThreadNew+0xca>
        mem = 1;
 800f540:	2301      	movs	r3, #1
 800f542:	623b      	str	r3, [r7, #32]
 800f544:	e010      	b.n	800f568 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10c      	bne.n	800f568 <osThreadNew+0xec>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d108      	bne.n	800f568 <osThreadNew+0xec>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	691b      	ldr	r3, [r3, #16]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d104      	bne.n	800f568 <osThreadNew+0xec>
          mem = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	623b      	str	r3, [r7, #32]
 800f562:	e001      	b.n	800f568 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f564:	2300      	movs	r3, #0
 800f566:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f568:	6a3b      	ldr	r3, [r7, #32]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d110      	bne.n	800f590 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f576:	9202      	str	r2, [sp, #8]
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	9300      	str	r3, [sp, #0]
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f000 fe31 	bl	80101ec <xTaskCreateStatic>
 800f58a:	4603      	mov	r3, r0
 800f58c:	613b      	str	r3, [r7, #16]
 800f58e:	e013      	b.n	800f5b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f590:	6a3b      	ldr	r3, [r7, #32]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d110      	bne.n	800f5b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f598:	b29a      	uxth	r2, r3
 800f59a:	f107 0310 	add.w	r3, r7, #16
 800f59e:	9301      	str	r3, [sp, #4]
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f000 fe7f 	bl	80102ac <xTaskCreate>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d001      	beq.n	800f5b8 <osThreadNew+0x13c>
          hTask = NULL;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f5b8:	693b      	ldr	r3, [r7, #16]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3730      	adds	r7, #48	; 0x30
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	20003384 	.word	0x20003384

0800f5c8 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	f000 ffb3 	bl	8010538 <vTaskDelete>
#endif
  for (;;);
 800f5d2:	e7fe      	b.n	800f5d2 <osThreadExit+0xa>

0800f5d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5dc:	f3ef 8305 	mrs	r3, IPSR
 800f5e0:	613b      	str	r3, [r7, #16]
  return(result);
 800f5e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10f      	bne.n	800f608 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f5ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d105      	bne.n	800f600 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5f4:	f3ef 8311 	mrs	r3, BASEPRI
 800f5f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d007      	beq.n	800f610 <osDelay+0x3c>
 800f600:	4b0a      	ldr	r3, [pc, #40]	; (800f62c <osDelay+0x58>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b02      	cmp	r3, #2
 800f606:	d103      	bne.n	800f610 <osDelay+0x3c>
    stat = osErrorISR;
 800f608:	f06f 0305 	mvn.w	r3, #5
 800f60c:	617b      	str	r3, [r7, #20]
 800f60e:	e007      	b.n	800f620 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f610:	2300      	movs	r3, #0
 800f612:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d002      	beq.n	800f620 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f001 f800 	bl	8010620 <vTaskDelay>
    }
  }

  return (stat);
 800f620:	697b      	ldr	r3, [r7, #20]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3718      	adds	r7, #24
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	20003384 	.word	0x20003384

0800f630 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	4a07      	ldr	r2, [pc, #28]	; (800f65c <vApplicationGetIdleTaskMemory+0x2c>)
 800f640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	4a06      	ldr	r2, [pc, #24]	; (800f660 <vApplicationGetIdleTaskMemory+0x30>)
 800f646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2280      	movs	r2, #128	; 0x80
 800f64c:	601a      	str	r2, [r3, #0]
}
 800f64e:	bf00      	nop
 800f650:	3714      	adds	r7, #20
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	20003388 	.word	0x20003388
 800f660:	200033e4 	.word	0x200033e4

0800f664 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	4a07      	ldr	r2, [pc, #28]	; (800f690 <vApplicationGetTimerTaskMemory+0x2c>)
 800f674:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	4a06      	ldr	r2, [pc, #24]	; (800f694 <vApplicationGetTimerTaskMemory+0x30>)
 800f67a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f682:	601a      	str	r2, [r3, #0]
}
 800f684:	bf00      	nop
 800f686:	3714      	adds	r7, #20
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	200035e4 	.word	0x200035e4
 800f694:	20003640 	.word	0x20003640

0800f698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f103 0208 	add.w	r2, r3, #8
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f103 0208 	add.w	r2, r3, #8
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f103 0208 	add.w	r2, r3, #8
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f6e6:	bf00      	nop
 800f6e8:	370c      	adds	r7, #12
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b085      	sub	sp, #20
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
 800f6fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	689a      	ldr	r2, [r3, #8]
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	1c5a      	adds	r2, r3, #1
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	601a      	str	r2, [r3, #0]
}
 800f72e:	bf00      	nop
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f73a:	b480      	push	{r7}
 800f73c:	b085      	sub	sp, #20
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f750:	d103      	bne.n	800f75a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	691b      	ldr	r3, [r3, #16]
 800f756:	60fb      	str	r3, [r7, #12]
 800f758:	e00c      	b.n	800f774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	3308      	adds	r3, #8
 800f75e:	60fb      	str	r3, [r7, #12]
 800f760:	e002      	b.n	800f768 <vListInsert+0x2e>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	60fb      	str	r3, [r7, #12]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	429a      	cmp	r2, r3
 800f772:	d2f6      	bcs.n	800f762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	685a      	ldr	r2, [r3, #4]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	683a      	ldr	r2, [r7, #0]
 800f78e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	1c5a      	adds	r2, r3, #1
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	601a      	str	r2, [r3, #0]
}
 800f7a0:	bf00      	nop
 800f7a2:	3714      	adds	r7, #20
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	691b      	ldr	r3, [r3, #16]
 800f7b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	6892      	ldr	r2, [r2, #8]
 800f7c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	6852      	ldr	r2, [r2, #4]
 800f7cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d103      	bne.n	800f7e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	689a      	ldr	r2, [r3, #8]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	1e5a      	subs	r2, r3, #1
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3714      	adds	r7, #20
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10b      	bne.n	800f82c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f818:	b672      	cpsid	i
 800f81a:	f383 8811 	msr	BASEPRI, r3
 800f81e:	f3bf 8f6f 	isb	sy
 800f822:	f3bf 8f4f 	dsb	sy
 800f826:	b662      	cpsie	i
 800f828:	60bb      	str	r3, [r7, #8]
 800f82a:	e7fe      	b.n	800f82a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800f82c:	f002 f9cc 	bl	8011bc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f838:	68f9      	ldr	r1, [r7, #12]
 800f83a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f83c:	fb01 f303 	mul.w	r3, r1, r3
 800f840:	441a      	add	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2200      	movs	r2, #0
 800f84a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f85c:	3b01      	subs	r3, #1
 800f85e:	68f9      	ldr	r1, [r7, #12]
 800f860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f862:	fb01 f303 	mul.w	r3, r1, r3
 800f866:	441a      	add	r2, r3
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	22ff      	movs	r2, #255	; 0xff
 800f870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	22ff      	movs	r2, #255	; 0xff
 800f878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d114      	bne.n	800f8ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d01a      	beq.n	800f8c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	3310      	adds	r3, #16
 800f88e:	4618      	mov	r0, r3
 800f890:	f001 f98a 	bl	8010ba8 <xTaskRemoveFromEventList>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d012      	beq.n	800f8c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f89a:	4b0d      	ldr	r3, [pc, #52]	; (800f8d0 <xQueueGenericReset+0xd0>)
 800f89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8a0:	601a      	str	r2, [r3, #0]
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	e009      	b.n	800f8c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3310      	adds	r3, #16
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff fef1 	bl	800f698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	3324      	adds	r3, #36	; 0x24
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff feec 	bl	800f698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f8c0:	f002 f9b4 	bl	8011c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f8c4:	2301      	movs	r3, #1
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	e000ed04 	.word	0xe000ed04

0800f8d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b08e      	sub	sp, #56	; 0x38
 800f8d8:	af02      	add	r7, sp, #8
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	607a      	str	r2, [r7, #4]
 800f8e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d10b      	bne.n	800f900 <xQueueGenericCreateStatic+0x2c>
 800f8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ec:	b672      	cpsid	i
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	b662      	cpsie	i
 800f8fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8fe:	e7fe      	b.n	800f8fe <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d10b      	bne.n	800f91e <xQueueGenericCreateStatic+0x4a>
 800f906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90a:	b672      	cpsid	i
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	b662      	cpsie	i
 800f91a:	627b      	str	r3, [r7, #36]	; 0x24
 800f91c:	e7fe      	b.n	800f91c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d002      	beq.n	800f92a <xQueueGenericCreateStatic+0x56>
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <xQueueGenericCreateStatic+0x5a>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <xQueueGenericCreateStatic+0x5c>
 800f92e:	2300      	movs	r3, #0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d10b      	bne.n	800f94c <xQueueGenericCreateStatic+0x78>
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	b672      	cpsid	i
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	b662      	cpsie	i
 800f948:	623b      	str	r3, [r7, #32]
 800f94a:	e7fe      	b.n	800f94a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d102      	bne.n	800f958 <xQueueGenericCreateStatic+0x84>
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d101      	bne.n	800f95c <xQueueGenericCreateStatic+0x88>
 800f958:	2301      	movs	r3, #1
 800f95a:	e000      	b.n	800f95e <xQueueGenericCreateStatic+0x8a>
 800f95c:	2300      	movs	r3, #0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10b      	bne.n	800f97a <xQueueGenericCreateStatic+0xa6>
 800f962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f966:	b672      	cpsid	i
 800f968:	f383 8811 	msr	BASEPRI, r3
 800f96c:	f3bf 8f6f 	isb	sy
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	b662      	cpsie	i
 800f976:	61fb      	str	r3, [r7, #28]
 800f978:	e7fe      	b.n	800f978 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f97a:	2350      	movs	r3, #80	; 0x50
 800f97c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	2b50      	cmp	r3, #80	; 0x50
 800f982:	d00b      	beq.n	800f99c <xQueueGenericCreateStatic+0xc8>
 800f984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f988:	b672      	cpsid	i
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	b662      	cpsie	i
 800f998:	61bb      	str	r3, [r7, #24]
 800f99a:	e7fe      	b.n	800f99a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f99c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00d      	beq.n	800f9c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f9b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	68b9      	ldr	r1, [r7, #8]
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f000 f805 	bl	800f9ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3730      	adds	r7, #48	; 0x30
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f9ce:	b580      	push	{r7, lr}
 800f9d0:	b084      	sub	sp, #16
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	60f8      	str	r0, [r7, #12]
 800f9d6:	60b9      	str	r1, [r7, #8]
 800f9d8:	607a      	str	r2, [r7, #4]
 800f9da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d103      	bne.n	800f9ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	69ba      	ldr	r2, [r7, #24]
 800f9e6:	601a      	str	r2, [r3, #0]
 800f9e8:	e002      	b.n	800f9f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9fc:	2101      	movs	r1, #1
 800f9fe:	69b8      	ldr	r0, [r7, #24]
 800fa00:	f7ff fefe 	bl	800f800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	78fa      	ldrb	r2, [r7, #3]
 800fa08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fa0c:	bf00      	nop
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b08e      	sub	sp, #56	; 0x38
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
 800fa20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fa22:	2300      	movs	r3, #0
 800fa24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10b      	bne.n	800fa48 <xQueueGenericSend+0x34>
 800fa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa34:	b672      	cpsid	i
 800fa36:	f383 8811 	msr	BASEPRI, r3
 800fa3a:	f3bf 8f6f 	isb	sy
 800fa3e:	f3bf 8f4f 	dsb	sy
 800fa42:	b662      	cpsie	i
 800fa44:	62bb      	str	r3, [r7, #40]	; 0x28
 800fa46:	e7fe      	b.n	800fa46 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d103      	bne.n	800fa56 <xQueueGenericSend+0x42>
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <xQueueGenericSend+0x46>
 800fa56:	2301      	movs	r3, #1
 800fa58:	e000      	b.n	800fa5c <xQueueGenericSend+0x48>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d10b      	bne.n	800fa78 <xQueueGenericSend+0x64>
 800fa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa64:	b672      	cpsid	i
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	b662      	cpsie	i
 800fa74:	627b      	str	r3, [r7, #36]	; 0x24
 800fa76:	e7fe      	b.n	800fa76 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	2b02      	cmp	r3, #2
 800fa7c:	d103      	bne.n	800fa86 <xQueueGenericSend+0x72>
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d101      	bne.n	800fa8a <xQueueGenericSend+0x76>
 800fa86:	2301      	movs	r3, #1
 800fa88:	e000      	b.n	800fa8c <xQueueGenericSend+0x78>
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d10b      	bne.n	800faa8 <xQueueGenericSend+0x94>
 800fa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa94:	b672      	cpsid	i
 800fa96:	f383 8811 	msr	BASEPRI, r3
 800fa9a:	f3bf 8f6f 	isb	sy
 800fa9e:	f3bf 8f4f 	dsb	sy
 800faa2:	b662      	cpsie	i
 800faa4:	623b      	str	r3, [r7, #32]
 800faa6:	e7fe      	b.n	800faa6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800faa8:	f001 fa3c 	bl	8010f24 <xTaskGetSchedulerState>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d102      	bne.n	800fab8 <xQueueGenericSend+0xa4>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <xQueueGenericSend+0xa8>
 800fab8:	2301      	movs	r3, #1
 800faba:	e000      	b.n	800fabe <xQueueGenericSend+0xaa>
 800fabc:	2300      	movs	r3, #0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d10b      	bne.n	800fada <xQueueGenericSend+0xc6>
 800fac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac6:	b672      	cpsid	i
 800fac8:	f383 8811 	msr	BASEPRI, r3
 800facc:	f3bf 8f6f 	isb	sy
 800fad0:	f3bf 8f4f 	dsb	sy
 800fad4:	b662      	cpsie	i
 800fad6:	61fb      	str	r3, [r7, #28]
 800fad8:	e7fe      	b.n	800fad8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fada:	f002 f875 	bl	8011bc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d302      	bcc.n	800faf0 <xQueueGenericSend+0xdc>
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	2b02      	cmp	r3, #2
 800faee:	d129      	bne.n	800fb44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800faf0:	683a      	ldr	r2, [r7, #0]
 800faf2:	68b9      	ldr	r1, [r7, #8]
 800faf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800faf6:	f000 fa0d 	bl	800ff14 <prvCopyDataToQueue>
 800fafa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d010      	beq.n	800fb26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb06:	3324      	adds	r3, #36	; 0x24
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f001 f84d 	bl	8010ba8 <xTaskRemoveFromEventList>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d013      	beq.n	800fb3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fb14:	4b3f      	ldr	r3, [pc, #252]	; (800fc14 <xQueueGenericSend+0x200>)
 800fb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb1a:	601a      	str	r2, [r3, #0]
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	f3bf 8f6f 	isb	sy
 800fb24:	e00a      	b.n	800fb3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d007      	beq.n	800fb3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fb2c:	4b39      	ldr	r3, [pc, #228]	; (800fc14 <xQueueGenericSend+0x200>)
 800fb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb32:	601a      	str	r2, [r3, #0]
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fb3c:	f002 f876 	bl	8011c2c <vPortExitCritical>
				return pdPASS;
 800fb40:	2301      	movs	r3, #1
 800fb42:	e063      	b.n	800fc0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d103      	bne.n	800fb52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb4a:	f002 f86f 	bl	8011c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	e05c      	b.n	800fc0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d106      	bne.n	800fb66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb58:	f107 0314 	add.w	r3, r7, #20
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f001 f887 	bl	8010c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb62:	2301      	movs	r3, #1
 800fb64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb66:	f002 f861 	bl	8011c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb6a:	f000 fdf7 	bl	801075c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb6e:	f002 f82b 	bl	8011bc8 <vPortEnterCritical>
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb78:	b25b      	sxtb	r3, r3
 800fb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb7e:	d103      	bne.n	800fb88 <xQueueGenericSend+0x174>
 800fb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb8e:	b25b      	sxtb	r3, r3
 800fb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb94:	d103      	bne.n	800fb9e <xQueueGenericSend+0x18a>
 800fb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb9e:	f002 f845 	bl	8011c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fba2:	1d3a      	adds	r2, r7, #4
 800fba4:	f107 0314 	add.w	r3, r7, #20
 800fba8:	4611      	mov	r1, r2
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f001 f876 	bl	8010c9c <xTaskCheckForTimeOut>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d124      	bne.n	800fc00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fbb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbb8:	f000 faa4 	bl	8010104 <prvIsQueueFull>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d018      	beq.n	800fbf4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	3310      	adds	r3, #16
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	4611      	mov	r1, r2
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f000 ff9a 	bl	8010b04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fbd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbd2:	f000 fa2f 	bl	8010034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fbd6:	f000 fdcf 	bl	8010778 <xTaskResumeAll>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f47f af7c 	bne.w	800fada <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fbe2:	4b0c      	ldr	r3, [pc, #48]	; (800fc14 <xQueueGenericSend+0x200>)
 800fbe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	e772      	b.n	800fada <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fbf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbf6:	f000 fa1d 	bl	8010034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbfa:	f000 fdbd 	bl	8010778 <xTaskResumeAll>
 800fbfe:	e76c      	b.n	800fada <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fc00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc02:	f000 fa17 	bl	8010034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc06:	f000 fdb7 	bl	8010778 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fc0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3738      	adds	r7, #56	; 0x38
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	e000ed04 	.word	0xe000ed04

0800fc18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b08e      	sub	sp, #56	; 0x38
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d10b      	bne.n	800fc48 <xQueueGenericSendFromISR+0x30>
 800fc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc34:	b672      	cpsid	i
 800fc36:	f383 8811 	msr	BASEPRI, r3
 800fc3a:	f3bf 8f6f 	isb	sy
 800fc3e:	f3bf 8f4f 	dsb	sy
 800fc42:	b662      	cpsie	i
 800fc44:	627b      	str	r3, [r7, #36]	; 0x24
 800fc46:	e7fe      	b.n	800fc46 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d103      	bne.n	800fc56 <xQueueGenericSendFromISR+0x3e>
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d101      	bne.n	800fc5a <xQueueGenericSendFromISR+0x42>
 800fc56:	2301      	movs	r3, #1
 800fc58:	e000      	b.n	800fc5c <xQueueGenericSendFromISR+0x44>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10b      	bne.n	800fc78 <xQueueGenericSendFromISR+0x60>
 800fc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc64:	b672      	cpsid	i
 800fc66:	f383 8811 	msr	BASEPRI, r3
 800fc6a:	f3bf 8f6f 	isb	sy
 800fc6e:	f3bf 8f4f 	dsb	sy
 800fc72:	b662      	cpsie	i
 800fc74:	623b      	str	r3, [r7, #32]
 800fc76:	e7fe      	b.n	800fc76 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	2b02      	cmp	r3, #2
 800fc7c:	d103      	bne.n	800fc86 <xQueueGenericSendFromISR+0x6e>
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d101      	bne.n	800fc8a <xQueueGenericSendFromISR+0x72>
 800fc86:	2301      	movs	r3, #1
 800fc88:	e000      	b.n	800fc8c <xQueueGenericSendFromISR+0x74>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d10b      	bne.n	800fca8 <xQueueGenericSendFromISR+0x90>
 800fc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc94:	b672      	cpsid	i
 800fc96:	f383 8811 	msr	BASEPRI, r3
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	b662      	cpsie	i
 800fca4:	61fb      	str	r3, [r7, #28]
 800fca6:	e7fe      	b.n	800fca6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fca8:	f002 f86e 	bl	8011d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fcac:	f3ef 8211 	mrs	r2, BASEPRI
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	b672      	cpsid	i
 800fcb6:	f383 8811 	msr	BASEPRI, r3
 800fcba:	f3bf 8f6f 	isb	sy
 800fcbe:	f3bf 8f4f 	dsb	sy
 800fcc2:	b662      	cpsie	i
 800fcc4:	61ba      	str	r2, [r7, #24]
 800fcc6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fcc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d302      	bcc.n	800fcde <xQueueGenericSendFromISR+0xc6>
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d12c      	bne.n	800fd38 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fce8:	683a      	ldr	r2, [r7, #0]
 800fcea:	68b9      	ldr	r1, [r7, #8]
 800fcec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcee:	f000 f911 	bl	800ff14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fcf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcfa:	d112      	bne.n	800fd22 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d016      	beq.n	800fd32 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd06:	3324      	adds	r3, #36	; 0x24
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f000 ff4d 	bl	8010ba8 <xTaskRemoveFromEventList>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00e      	beq.n	800fd32 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00b      	beq.n	800fd32 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	601a      	str	r2, [r3, #0]
 800fd20:	e007      	b.n	800fd32 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd26:	3301      	adds	r3, #1
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	b25a      	sxtb	r2, r3
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fd32:	2301      	movs	r3, #1
 800fd34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fd36:	e001      	b.n	800fd3c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3738      	adds	r7, #56	; 0x38
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08c      	sub	sp, #48	; 0x30
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10b      	bne.n	800fd82 <xQueueReceive+0x32>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	b672      	cpsid	i
 800fd70:	f383 8811 	msr	BASEPRI, r3
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	b662      	cpsie	i
 800fd7e:	623b      	str	r3, [r7, #32]
 800fd80:	e7fe      	b.n	800fd80 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d103      	bne.n	800fd90 <xQueueReceive+0x40>
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <xQueueReceive+0x44>
 800fd90:	2301      	movs	r3, #1
 800fd92:	e000      	b.n	800fd96 <xQueueReceive+0x46>
 800fd94:	2300      	movs	r3, #0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d10b      	bne.n	800fdb2 <xQueueReceive+0x62>
 800fd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9e:	b672      	cpsid	i
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	b662      	cpsie	i
 800fdae:	61fb      	str	r3, [r7, #28]
 800fdb0:	e7fe      	b.n	800fdb0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fdb2:	f001 f8b7 	bl	8010f24 <xTaskGetSchedulerState>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d102      	bne.n	800fdc2 <xQueueReceive+0x72>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d101      	bne.n	800fdc6 <xQueueReceive+0x76>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e000      	b.n	800fdc8 <xQueueReceive+0x78>
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10b      	bne.n	800fde4 <xQueueReceive+0x94>
 800fdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd0:	b672      	cpsid	i
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	b662      	cpsie	i
 800fde0:	61bb      	str	r3, [r7, #24]
 800fde2:	e7fe      	b.n	800fde2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fde4:	f001 fef0 	bl	8011bc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d01f      	beq.n	800fe34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fdf4:	68b9      	ldr	r1, [r7, #8]
 800fdf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdf8:	f000 f8f6 	bl	800ffe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfe:	1e5a      	subs	r2, r3, #1
 800fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	691b      	ldr	r3, [r3, #16]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00f      	beq.n	800fe2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0e:	3310      	adds	r3, #16
 800fe10:	4618      	mov	r0, r3
 800fe12:	f000 fec9 	bl	8010ba8 <xTaskRemoveFromEventList>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d007      	beq.n	800fe2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fe1c:	4b3c      	ldr	r3, [pc, #240]	; (800ff10 <xQueueReceive+0x1c0>)
 800fe1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fe2c:	f001 fefe 	bl	8011c2c <vPortExitCritical>
				return pdPASS;
 800fe30:	2301      	movs	r3, #1
 800fe32:	e069      	b.n	800ff08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d103      	bne.n	800fe42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe3a:	f001 fef7 	bl	8011c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e062      	b.n	800ff08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d106      	bne.n	800fe56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe48:	f107 0310 	add.w	r3, r7, #16
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 ff0f 	bl	8010c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe52:	2301      	movs	r3, #1
 800fe54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe56:	f001 fee9 	bl	8011c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe5a:	f000 fc7f 	bl	801075c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe5e:	f001 feb3 	bl	8011bc8 <vPortEnterCritical>
 800fe62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe68:	b25b      	sxtb	r3, r3
 800fe6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6e:	d103      	bne.n	800fe78 <xQueueReceive+0x128>
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe7e:	b25b      	sxtb	r3, r3
 800fe80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe84:	d103      	bne.n	800fe8e <xQueueReceive+0x13e>
 800fe86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe8e:	f001 fecd 	bl	8011c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe92:	1d3a      	adds	r2, r7, #4
 800fe94:	f107 0310 	add.w	r3, r7, #16
 800fe98:	4611      	mov	r1, r2
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f000 fefe 	bl	8010c9c <xTaskCheckForTimeOut>
 800fea0:	4603      	mov	r3, r0
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d123      	bne.n	800feee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea8:	f000 f916 	bl	80100d8 <prvIsQueueEmpty>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d017      	beq.n	800fee2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800feb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb4:	3324      	adds	r3, #36	; 0x24
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	4611      	mov	r1, r2
 800feba:	4618      	mov	r0, r3
 800febc:	f000 fe22 	bl	8010b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fec2:	f000 f8b7 	bl	8010034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fec6:	f000 fc57 	bl	8010778 <xTaskResumeAll>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d189      	bne.n	800fde4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fed0:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <xQueueReceive+0x1c0>)
 800fed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	f3bf 8f4f 	dsb	sy
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	e780      	b.n	800fde4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fee4:	f000 f8a6 	bl	8010034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fee8:	f000 fc46 	bl	8010778 <xTaskResumeAll>
 800feec:	e77a      	b.n	800fde4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800feee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fef0:	f000 f8a0 	bl	8010034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fef4:	f000 fc40 	bl	8010778 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fefa:	f000 f8ed 	bl	80100d8 <prvIsQueueEmpty>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f43f af6f 	beq.w	800fde4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ff06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3730      	adds	r7, #48	; 0x30
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	e000ed04 	.word	0xe000ed04

0800ff14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b086      	sub	sp, #24
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ff20:	2300      	movs	r3, #0
 800ff22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d10d      	bne.n	800ff4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d14d      	bne.n	800ffd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f001 f80e 	bl	8010f60 <xTaskPriorityDisinherit>
 800ff44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	609a      	str	r2, [r3, #8]
 800ff4c:	e043      	b.n	800ffd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d119      	bne.n	800ff88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	6858      	ldr	r0, [r3, #4]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	68b9      	ldr	r1, [r7, #8]
 800ff60:	f002 f960 	bl	8012224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	685a      	ldr	r2, [r3, #4]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff6c:	441a      	add	r2, r3
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	685a      	ldr	r2, [r3, #4]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	689b      	ldr	r3, [r3, #8]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d32b      	bcc.n	800ffd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	605a      	str	r2, [r3, #4]
 800ff86:	e026      	b.n	800ffd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	68d8      	ldr	r0, [r3, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff90:	461a      	mov	r2, r3
 800ff92:	68b9      	ldr	r1, [r7, #8]
 800ff94:	f002 f946 	bl	8012224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	68da      	ldr	r2, [r3, #12]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffa0:	425b      	negs	r3, r3
 800ffa2:	441a      	add	r2, r3
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	68da      	ldr	r2, [r3, #12]
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d207      	bcs.n	800ffc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	689a      	ldr	r2, [r3, #8]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffbc:	425b      	negs	r3, r3
 800ffbe:	441a      	add	r2, r3
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	d105      	bne.n	800ffd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d002      	beq.n	800ffd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	3b01      	subs	r3, #1
 800ffd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	1c5a      	adds	r2, r3, #1
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ffde:	697b      	ldr	r3, [r7, #20]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3718      	adds	r7, #24
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d018      	beq.n	801002c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	68da      	ldr	r2, [r3, #12]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010002:	441a      	add	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	68da      	ldr	r2, [r3, #12]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	429a      	cmp	r2, r3
 8010012:	d303      	bcc.n	801001c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	68d9      	ldr	r1, [r3, #12]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010024:	461a      	mov	r2, r3
 8010026:	6838      	ldr	r0, [r7, #0]
 8010028:	f002 f8fc 	bl	8012224 <memcpy>
	}
}
 801002c:	bf00      	nop
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801003c:	f001 fdc4 	bl	8011bc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010048:	e011      	b.n	801006e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004e:	2b00      	cmp	r3, #0
 8010050:	d012      	beq.n	8010078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	3324      	adds	r3, #36	; 0x24
 8010056:	4618      	mov	r0, r3
 8010058:	f000 fda6 	bl	8010ba8 <xTaskRemoveFromEventList>
 801005c:	4603      	mov	r3, r0
 801005e:	2b00      	cmp	r3, #0
 8010060:	d001      	beq.n	8010066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010062:	f000 fe7f 	bl	8010d64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010066:	7bfb      	ldrb	r3, [r7, #15]
 8010068:	3b01      	subs	r3, #1
 801006a:	b2db      	uxtb	r3, r3
 801006c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801006e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010072:	2b00      	cmp	r3, #0
 8010074:	dce9      	bgt.n	801004a <prvUnlockQueue+0x16>
 8010076:	e000      	b.n	801007a <prvUnlockQueue+0x46>
					break;
 8010078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	22ff      	movs	r2, #255	; 0xff
 801007e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010082:	f001 fdd3 	bl	8011c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010086:	f001 fd9f 	bl	8011bc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010092:	e011      	b.n	80100b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d012      	beq.n	80100c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	3310      	adds	r3, #16
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 fd81 	bl	8010ba8 <xTaskRemoveFromEventList>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80100ac:	f000 fe5a 	bl	8010d64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80100b0:	7bbb      	ldrb	r3, [r7, #14]
 80100b2:	3b01      	subs	r3, #1
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80100b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	dce9      	bgt.n	8010094 <prvUnlockQueue+0x60>
 80100c0:	e000      	b.n	80100c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80100c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	22ff      	movs	r2, #255	; 0xff
 80100c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80100cc:	f001 fdae 	bl	8011c2c <vPortExitCritical>
}
 80100d0:	bf00      	nop
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100e0:	f001 fd72 	bl	8011bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d102      	bne.n	80100f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100ec:	2301      	movs	r3, #1
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	e001      	b.n	80100f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100f2:	2300      	movs	r3, #0
 80100f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100f6:	f001 fd99 	bl	8011c2c <vPortExitCritical>

	return xReturn;
 80100fa:	68fb      	ldr	r3, [r7, #12]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3710      	adds	r7, #16
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801010c:	f001 fd5c 	bl	8011bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010118:	429a      	cmp	r2, r3
 801011a:	d102      	bne.n	8010122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801011c:	2301      	movs	r3, #1
 801011e:	60fb      	str	r3, [r7, #12]
 8010120:	e001      	b.n	8010126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010122:	2300      	movs	r3, #0
 8010124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010126:	f001 fd81 	bl	8011c2c <vPortExitCritical>

	return xReturn;
 801012a:	68fb      	ldr	r3, [r7, #12]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801013e:	2300      	movs	r3, #0
 8010140:	60fb      	str	r3, [r7, #12]
 8010142:	e014      	b.n	801016e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010144:	4a0e      	ldr	r2, [pc, #56]	; (8010180 <vQueueAddToRegistry+0x4c>)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10b      	bne.n	8010168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010150:	490b      	ldr	r1, [pc, #44]	; (8010180 <vQueueAddToRegistry+0x4c>)
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	683a      	ldr	r2, [r7, #0]
 8010156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801015a:	4a09      	ldr	r2, [pc, #36]	; (8010180 <vQueueAddToRegistry+0x4c>)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	4413      	add	r3, r2
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010166:	e005      	b.n	8010174 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	3301      	adds	r3, #1
 801016c:	60fb      	str	r3, [r7, #12]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b07      	cmp	r3, #7
 8010172:	d9e7      	bls.n	8010144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010174:	bf00      	nop
 8010176:	3714      	adds	r7, #20
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr
 8010180:	20030b14 	.word	0x20030b14

08010184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010194:	f001 fd18 	bl	8011bc8 <vPortEnterCritical>
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801019e:	b25b      	sxtb	r3, r3
 80101a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a4:	d103      	bne.n	80101ae <vQueueWaitForMessageRestricted+0x2a>
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101b4:	b25b      	sxtb	r3, r3
 80101b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101ba:	d103      	bne.n	80101c4 <vQueueWaitForMessageRestricted+0x40>
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101c4:	f001 fd32 	bl	8011c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d106      	bne.n	80101de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	3324      	adds	r3, #36	; 0x24
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	68b9      	ldr	r1, [r7, #8]
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 fcb9 	bl	8010b50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80101de:	6978      	ldr	r0, [r7, #20]
 80101e0:	f7ff ff28 	bl	8010034 <prvUnlockQueue>
	}
 80101e4:	bf00      	nop
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b08e      	sub	sp, #56	; 0x38
 80101f0:	af04      	add	r7, sp, #16
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80101fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d10b      	bne.n	8010218 <xTaskCreateStatic+0x2c>
 8010200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010204:	b672      	cpsid	i
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	b662      	cpsie	i
 8010214:	623b      	str	r3, [r7, #32]
 8010216:	e7fe      	b.n	8010216 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8010218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021a:	2b00      	cmp	r3, #0
 801021c:	d10b      	bne.n	8010236 <xTaskCreateStatic+0x4a>
 801021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010222:	b672      	cpsid	i
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	b662      	cpsie	i
 8010232:	61fb      	str	r3, [r7, #28]
 8010234:	e7fe      	b.n	8010234 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010236:	235c      	movs	r3, #92	; 0x5c
 8010238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	2b5c      	cmp	r3, #92	; 0x5c
 801023e:	d00b      	beq.n	8010258 <xTaskCreateStatic+0x6c>
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	b672      	cpsid	i
 8010246:	f383 8811 	msr	BASEPRI, r3
 801024a:	f3bf 8f6f 	isb	sy
 801024e:	f3bf 8f4f 	dsb	sy
 8010252:	b662      	cpsie	i
 8010254:	61bb      	str	r3, [r7, #24]
 8010256:	e7fe      	b.n	8010256 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010258:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801025a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025c:	2b00      	cmp	r3, #0
 801025e:	d01e      	beq.n	801029e <xTaskCreateStatic+0xb2>
 8010260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010262:	2b00      	cmp	r3, #0
 8010264:	d01b      	beq.n	801029e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801026e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010272:	2202      	movs	r2, #2
 8010274:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010278:	2300      	movs	r3, #0
 801027a:	9303      	str	r3, [sp, #12]
 801027c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027e:	9302      	str	r3, [sp, #8]
 8010280:	f107 0314 	add.w	r3, r7, #20
 8010284:	9301      	str	r3, [sp, #4]
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	9300      	str	r3, [sp, #0]
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	68b9      	ldr	r1, [r7, #8]
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f000 f850 	bl	8010336 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010298:	f000 f8de 	bl	8010458 <prvAddNewTaskToReadyList>
 801029c:	e001      	b.n	80102a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801029e:	2300      	movs	r3, #0
 80102a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80102a2:	697b      	ldr	r3, [r7, #20]
	}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3728      	adds	r7, #40	; 0x28
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b08c      	sub	sp, #48	; 0x30
 80102b0:	af04      	add	r7, sp, #16
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	603b      	str	r3, [r7, #0]
 80102b8:	4613      	mov	r3, r2
 80102ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80102bc:	88fb      	ldrh	r3, [r7, #6]
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	4618      	mov	r0, r3
 80102c2:	f001 fda3 	bl	8011e0c <pvPortMalloc>
 80102c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00e      	beq.n	80102ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80102ce:	205c      	movs	r0, #92	; 0x5c
 80102d0:	f001 fd9c 	bl	8011e0c <pvPortMalloc>
 80102d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d003      	beq.n	80102e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	697a      	ldr	r2, [r7, #20]
 80102e0:	631a      	str	r2, [r3, #48]	; 0x30
 80102e2:	e005      	b.n	80102f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80102e4:	6978      	ldr	r0, [r7, #20]
 80102e6:	f001 fe59 	bl	8011f9c <vPortFree>
 80102ea:	e001      	b.n	80102f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80102ec:	2300      	movs	r3, #0
 80102ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d017      	beq.n	8010326 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	2200      	movs	r2, #0
 80102fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80102fe:	88fa      	ldrh	r2, [r7, #6]
 8010300:	2300      	movs	r3, #0
 8010302:	9303      	str	r3, [sp, #12]
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	9302      	str	r3, [sp, #8]
 8010308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030a:	9301      	str	r3, [sp, #4]
 801030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	68b9      	ldr	r1, [r7, #8]
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f000 f80e 	bl	8010336 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801031a:	69f8      	ldr	r0, [r7, #28]
 801031c:	f000 f89c 	bl	8010458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010320:	2301      	movs	r3, #1
 8010322:	61bb      	str	r3, [r7, #24]
 8010324:	e002      	b.n	801032c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010326:	f04f 33ff 	mov.w	r3, #4294967295
 801032a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801032c:	69bb      	ldr	r3, [r7, #24]
	}
 801032e:	4618      	mov	r0, r3
 8010330:	3720      	adds	r7, #32
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b088      	sub	sp, #32
 801033a:	af00      	add	r7, sp, #0
 801033c:	60f8      	str	r0, [r7, #12]
 801033e:	60b9      	str	r1, [r7, #8]
 8010340:	607a      	str	r2, [r7, #4]
 8010342:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	461a      	mov	r2, r3
 801034e:	21a5      	movs	r1, #165	; 0xa5
 8010350:	f001 ff73 	bl	801223a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010358:	6879      	ldr	r1, [r7, #4]
 801035a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801035e:	440b      	add	r3, r1
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	4413      	add	r3, r2
 8010364:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	f023 0307 	bic.w	r3, r3, #7
 801036c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	f003 0307 	and.w	r3, r3, #7
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00b      	beq.n	8010390 <prvInitialiseNewTask+0x5a>
 8010378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037c:	b672      	cpsid	i
 801037e:	f383 8811 	msr	BASEPRI, r3
 8010382:	f3bf 8f6f 	isb	sy
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	b662      	cpsie	i
 801038c:	617b      	str	r3, [r7, #20]
 801038e:	e7fe      	b.n	801038e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d01f      	beq.n	80103d6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010396:	2300      	movs	r3, #0
 8010398:	61fb      	str	r3, [r7, #28]
 801039a:	e012      	b.n	80103c2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	4413      	add	r3, r2
 80103a2:	7819      	ldrb	r1, [r3, #0]
 80103a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	4413      	add	r3, r2
 80103aa:	3334      	adds	r3, #52	; 0x34
 80103ac:	460a      	mov	r2, r1
 80103ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	4413      	add	r3, r2
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d006      	beq.n	80103ca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	3301      	adds	r3, #1
 80103c0:	61fb      	str	r3, [r7, #28]
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	2b0f      	cmp	r3, #15
 80103c6:	d9e9      	bls.n	801039c <prvInitialiseNewTask+0x66>
 80103c8:	e000      	b.n	80103cc <prvInitialiseNewTask+0x96>
			{
				break;
 80103ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80103cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ce:	2200      	movs	r2, #0
 80103d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80103d4:	e003      	b.n	80103de <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80103d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d8:	2200      	movs	r2, #0
 80103da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80103de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e0:	2b37      	cmp	r3, #55	; 0x37
 80103e2:	d901      	bls.n	80103e8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80103e4:	2337      	movs	r3, #55	; 0x37
 80103e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80103e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80103ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80103f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f6:	2200      	movs	r2, #0
 80103f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80103fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fc:	3304      	adds	r3, #4
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff f96a 	bl	800f6d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010406:	3318      	adds	r3, #24
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff f965 	bl	800f6d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801040e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801041a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010426:	2200      	movs	r2, #0
 8010428:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042c:	2200      	movs	r2, #0
 801042e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	68f9      	ldr	r1, [r7, #12]
 8010436:	69b8      	ldr	r0, [r7, #24]
 8010438:	f001 fabe 	bl	80119b8 <pxPortInitialiseStack>
 801043c:	4602      	mov	r2, r0
 801043e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010440:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010444:	2b00      	cmp	r3, #0
 8010446:	d002      	beq.n	801044e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801044c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801044e:	bf00      	nop
 8010450:	3720      	adds	r7, #32
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
	...

08010458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010460:	f001 fbb2 	bl	8011bc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010464:	4b2d      	ldr	r3, [pc, #180]	; (801051c <prvAddNewTaskToReadyList+0xc4>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	3301      	adds	r3, #1
 801046a:	4a2c      	ldr	r2, [pc, #176]	; (801051c <prvAddNewTaskToReadyList+0xc4>)
 801046c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801046e:	4b2c      	ldr	r3, [pc, #176]	; (8010520 <prvAddNewTaskToReadyList+0xc8>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d109      	bne.n	801048a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010476:	4a2a      	ldr	r2, [pc, #168]	; (8010520 <prvAddNewTaskToReadyList+0xc8>)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801047c:	4b27      	ldr	r3, [pc, #156]	; (801051c <prvAddNewTaskToReadyList+0xc4>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2b01      	cmp	r3, #1
 8010482:	d110      	bne.n	80104a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010484:	f000 fc92 	bl	8010dac <prvInitialiseTaskLists>
 8010488:	e00d      	b.n	80104a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801048a:	4b26      	ldr	r3, [pc, #152]	; (8010524 <prvAddNewTaskToReadyList+0xcc>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d109      	bne.n	80104a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010492:	4b23      	ldr	r3, [pc, #140]	; (8010520 <prvAddNewTaskToReadyList+0xc8>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049c:	429a      	cmp	r2, r3
 801049e:	d802      	bhi.n	80104a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80104a0:	4a1f      	ldr	r2, [pc, #124]	; (8010520 <prvAddNewTaskToReadyList+0xc8>)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80104a6:	4b20      	ldr	r3, [pc, #128]	; (8010528 <prvAddNewTaskToReadyList+0xd0>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	3301      	adds	r3, #1
 80104ac:	4a1e      	ldr	r2, [pc, #120]	; (8010528 <prvAddNewTaskToReadyList+0xd0>)
 80104ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80104b0:	4b1d      	ldr	r3, [pc, #116]	; (8010528 <prvAddNewTaskToReadyList+0xd0>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104bc:	4b1b      	ldr	r3, [pc, #108]	; (801052c <prvAddNewTaskToReadyList+0xd4>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d903      	bls.n	80104cc <prvAddNewTaskToReadyList+0x74>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c8:	4a18      	ldr	r2, [pc, #96]	; (801052c <prvAddNewTaskToReadyList+0xd4>)
 80104ca:	6013      	str	r3, [r2, #0]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104d0:	4613      	mov	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	4a15      	ldr	r2, [pc, #84]	; (8010530 <prvAddNewTaskToReadyList+0xd8>)
 80104da:	441a      	add	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	3304      	adds	r3, #4
 80104e0:	4619      	mov	r1, r3
 80104e2:	4610      	mov	r0, r2
 80104e4:	f7ff f905 	bl	800f6f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80104e8:	f001 fba0 	bl	8011c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80104ec:	4b0d      	ldr	r3, [pc, #52]	; (8010524 <prvAddNewTaskToReadyList+0xcc>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00e      	beq.n	8010512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80104f4:	4b0a      	ldr	r3, [pc, #40]	; (8010520 <prvAddNewTaskToReadyList+0xc8>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104fe:	429a      	cmp	r2, r3
 8010500:	d207      	bcs.n	8010512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010502:	4b0c      	ldr	r3, [pc, #48]	; (8010534 <prvAddNewTaskToReadyList+0xdc>)
 8010504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010508:	601a      	str	r2, [r3, #0]
 801050a:	f3bf 8f4f 	dsb	sy
 801050e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010512:	bf00      	nop
 8010514:	3708      	adds	r7, #8
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	20003f14 	.word	0x20003f14
 8010520:	20003a40 	.word	0x20003a40
 8010524:	20003f20 	.word	0x20003f20
 8010528:	20003f30 	.word	0x20003f30
 801052c:	20003f1c 	.word	0x20003f1c
 8010530:	20003a44 	.word	0x20003a44
 8010534:	e000ed04 	.word	0xe000ed04

08010538 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010540:	f001 fb42 	bl	8011bc8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d102      	bne.n	8010550 <vTaskDelete+0x18>
 801054a:	4b2d      	ldr	r3, [pc, #180]	; (8010600 <vTaskDelete+0xc8>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	e000      	b.n	8010552 <vTaskDelete+0x1a>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	3304      	adds	r3, #4
 8010558:	4618      	mov	r0, r3
 801055a:	f7ff f927 	bl	800f7ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010562:	2b00      	cmp	r3, #0
 8010564:	d004      	beq.n	8010570 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	3318      	adds	r3, #24
 801056a:	4618      	mov	r0, r3
 801056c:	f7ff f91e 	bl	800f7ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010570:	4b24      	ldr	r3, [pc, #144]	; (8010604 <vTaskDelete+0xcc>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	3301      	adds	r3, #1
 8010576:	4a23      	ldr	r2, [pc, #140]	; (8010604 <vTaskDelete+0xcc>)
 8010578:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801057a:	4b21      	ldr	r3, [pc, #132]	; (8010600 <vTaskDelete+0xc8>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	429a      	cmp	r2, r3
 8010582:	d10b      	bne.n	801059c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	3304      	adds	r3, #4
 8010588:	4619      	mov	r1, r3
 801058a:	481f      	ldr	r0, [pc, #124]	; (8010608 <vTaskDelete+0xd0>)
 801058c:	f7ff f8b1 	bl	800f6f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010590:	4b1e      	ldr	r3, [pc, #120]	; (801060c <vTaskDelete+0xd4>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	3301      	adds	r3, #1
 8010596:	4a1d      	ldr	r2, [pc, #116]	; (801060c <vTaskDelete+0xd4>)
 8010598:	6013      	str	r3, [r2, #0]
 801059a:	e009      	b.n	80105b0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801059c:	4b1c      	ldr	r3, [pc, #112]	; (8010610 <vTaskDelete+0xd8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3b01      	subs	r3, #1
 80105a2:	4a1b      	ldr	r2, [pc, #108]	; (8010610 <vTaskDelete+0xd8>)
 80105a4:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80105a6:	68f8      	ldr	r0, [r7, #12]
 80105a8:	f000 fc6c 	bl	8010e84 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80105ac:	f000 fc9a 	bl	8010ee4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80105b0:	f001 fb3c 	bl	8011c2c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80105b4:	4b17      	ldr	r3, [pc, #92]	; (8010614 <vTaskDelete+0xdc>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d01c      	beq.n	80105f6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80105bc:	4b10      	ldr	r3, [pc, #64]	; (8010600 <vTaskDelete+0xc8>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d117      	bne.n	80105f6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80105c6:	4b14      	ldr	r3, [pc, #80]	; (8010618 <vTaskDelete+0xe0>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00b      	beq.n	80105e6 <vTaskDelete+0xae>
 80105ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d2:	b672      	cpsid	i
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	b662      	cpsie	i
 80105e2:	60bb      	str	r3, [r7, #8]
 80105e4:	e7fe      	b.n	80105e4 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 80105e6:	4b0d      	ldr	r3, [pc, #52]	; (801061c <vTaskDelete+0xe4>)
 80105e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80105f6:	bf00      	nop
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	20003a40 	.word	0x20003a40
 8010604:	20003f30 	.word	0x20003f30
 8010608:	20003ee8 	.word	0x20003ee8
 801060c:	20003efc 	.word	0x20003efc
 8010610:	20003f14 	.word	0x20003f14
 8010614:	20003f20 	.word	0x20003f20
 8010618:	20003f3c 	.word	0x20003f3c
 801061c:	e000ed04 	.word	0xe000ed04

08010620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010628:	2300      	movs	r3, #0
 801062a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d018      	beq.n	8010664 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010632:	4b14      	ldr	r3, [pc, #80]	; (8010684 <vTaskDelay+0x64>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00b      	beq.n	8010652 <vTaskDelay+0x32>
 801063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063e:	b672      	cpsid	i
 8010640:	f383 8811 	msr	BASEPRI, r3
 8010644:	f3bf 8f6f 	isb	sy
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	b662      	cpsie	i
 801064e:	60bb      	str	r3, [r7, #8]
 8010650:	e7fe      	b.n	8010650 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8010652:	f000 f883 	bl	801075c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010656:	2100      	movs	r1, #0
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 fe05 	bl	8011268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801065e:	f000 f88b 	bl	8010778 <xTaskResumeAll>
 8010662:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d107      	bne.n	801067a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801066a:	4b07      	ldr	r3, [pc, #28]	; (8010688 <vTaskDelay+0x68>)
 801066c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010670:	601a      	str	r2, [r3, #0]
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801067a:	bf00      	nop
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	20003f3c 	.word	0x20003f3c
 8010688:	e000ed04 	.word	0xe000ed04

0801068c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08a      	sub	sp, #40	; 0x28
 8010690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010692:	2300      	movs	r3, #0
 8010694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010696:	2300      	movs	r3, #0
 8010698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801069a:	463a      	mov	r2, r7
 801069c:	1d39      	adds	r1, r7, #4
 801069e:	f107 0308 	add.w	r3, r7, #8
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fe ffc4 	bl	800f630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80106a8:	6839      	ldr	r1, [r7, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	68ba      	ldr	r2, [r7, #8]
 80106ae:	9202      	str	r2, [sp, #8]
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	2300      	movs	r3, #0
 80106b4:	9300      	str	r3, [sp, #0]
 80106b6:	2300      	movs	r3, #0
 80106b8:	460a      	mov	r2, r1
 80106ba:	4922      	ldr	r1, [pc, #136]	; (8010744 <vTaskStartScheduler+0xb8>)
 80106bc:	4822      	ldr	r0, [pc, #136]	; (8010748 <vTaskStartScheduler+0xbc>)
 80106be:	f7ff fd95 	bl	80101ec <xTaskCreateStatic>
 80106c2:	4602      	mov	r2, r0
 80106c4:	4b21      	ldr	r3, [pc, #132]	; (801074c <vTaskStartScheduler+0xc0>)
 80106c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80106c8:	4b20      	ldr	r3, [pc, #128]	; (801074c <vTaskStartScheduler+0xc0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d002      	beq.n	80106d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80106d0:	2301      	movs	r3, #1
 80106d2:	617b      	str	r3, [r7, #20]
 80106d4:	e001      	b.n	80106da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80106d6:	2300      	movs	r3, #0
 80106d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d102      	bne.n	80106e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80106e0:	f000 fe16 	bl	8011310 <xTimerCreateTimerTask>
 80106e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d117      	bne.n	801071c <vTaskStartScheduler+0x90>
 80106ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f0:	b672      	cpsid	i
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	b662      	cpsie	i
 8010700:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010702:	4b13      	ldr	r3, [pc, #76]	; (8010750 <vTaskStartScheduler+0xc4>)
 8010704:	f04f 32ff 	mov.w	r2, #4294967295
 8010708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801070a:	4b12      	ldr	r3, [pc, #72]	; (8010754 <vTaskStartScheduler+0xc8>)
 801070c:	2201      	movs	r2, #1
 801070e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010710:	4b11      	ldr	r3, [pc, #68]	; (8010758 <vTaskStartScheduler+0xcc>)
 8010712:	2200      	movs	r2, #0
 8010714:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010716:	f001 f9db 	bl	8011ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801071a:	e00f      	b.n	801073c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010722:	d10b      	bne.n	801073c <vTaskStartScheduler+0xb0>
 8010724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010728:	b672      	cpsid	i
 801072a:	f383 8811 	msr	BASEPRI, r3
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	f3bf 8f4f 	dsb	sy
 8010736:	b662      	cpsie	i
 8010738:	60fb      	str	r3, [r7, #12]
 801073a:	e7fe      	b.n	801073a <vTaskStartScheduler+0xae>
}
 801073c:	bf00      	nop
 801073e:	3718      	adds	r7, #24
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	08016940 	.word	0x08016940
 8010748:	08010d7d 	.word	0x08010d7d
 801074c:	20003f38 	.word	0x20003f38
 8010750:	20003f34 	.word	0x20003f34
 8010754:	20003f20 	.word	0x20003f20
 8010758:	20003f18 	.word	0x20003f18

0801075c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801075c:	b480      	push	{r7}
 801075e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010760:	4b04      	ldr	r3, [pc, #16]	; (8010774 <vTaskSuspendAll+0x18>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	3301      	adds	r3, #1
 8010766:	4a03      	ldr	r2, [pc, #12]	; (8010774 <vTaskSuspendAll+0x18>)
 8010768:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801076a:	bf00      	nop
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr
 8010774:	20003f3c 	.word	0x20003f3c

08010778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801077e:	2300      	movs	r3, #0
 8010780:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010782:	2300      	movs	r3, #0
 8010784:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010786:	4b42      	ldr	r3, [pc, #264]	; (8010890 <xTaskResumeAll+0x118>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d10b      	bne.n	80107a6 <xTaskResumeAll+0x2e>
 801078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010792:	b672      	cpsid	i
 8010794:	f383 8811 	msr	BASEPRI, r3
 8010798:	f3bf 8f6f 	isb	sy
 801079c:	f3bf 8f4f 	dsb	sy
 80107a0:	b662      	cpsie	i
 80107a2:	603b      	str	r3, [r7, #0]
 80107a4:	e7fe      	b.n	80107a4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80107a6:	f001 fa0f 	bl	8011bc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80107aa:	4b39      	ldr	r3, [pc, #228]	; (8010890 <xTaskResumeAll+0x118>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	3b01      	subs	r3, #1
 80107b0:	4a37      	ldr	r2, [pc, #220]	; (8010890 <xTaskResumeAll+0x118>)
 80107b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107b4:	4b36      	ldr	r3, [pc, #216]	; (8010890 <xTaskResumeAll+0x118>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d162      	bne.n	8010882 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80107bc:	4b35      	ldr	r3, [pc, #212]	; (8010894 <xTaskResumeAll+0x11c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d05e      	beq.n	8010882 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80107c4:	e02f      	b.n	8010826 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107c6:	4b34      	ldr	r3, [pc, #208]	; (8010898 <xTaskResumeAll+0x120>)
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3318      	adds	r3, #24
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fe ffea 	bl	800f7ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	3304      	adds	r3, #4
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fe ffe5 	bl	800f7ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107e6:	4b2d      	ldr	r3, [pc, #180]	; (801089c <xTaskResumeAll+0x124>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d903      	bls.n	80107f6 <xTaskResumeAll+0x7e>
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f2:	4a2a      	ldr	r2, [pc, #168]	; (801089c <xTaskResumeAll+0x124>)
 80107f4:	6013      	str	r3, [r2, #0]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107fa:	4613      	mov	r3, r2
 80107fc:	009b      	lsls	r3, r3, #2
 80107fe:	4413      	add	r3, r2
 8010800:	009b      	lsls	r3, r3, #2
 8010802:	4a27      	ldr	r2, [pc, #156]	; (80108a0 <xTaskResumeAll+0x128>)
 8010804:	441a      	add	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	3304      	adds	r3, #4
 801080a:	4619      	mov	r1, r3
 801080c:	4610      	mov	r0, r2
 801080e:	f7fe ff70 	bl	800f6f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010816:	4b23      	ldr	r3, [pc, #140]	; (80108a4 <xTaskResumeAll+0x12c>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081c:	429a      	cmp	r2, r3
 801081e:	d302      	bcc.n	8010826 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010820:	4b21      	ldr	r3, [pc, #132]	; (80108a8 <xTaskResumeAll+0x130>)
 8010822:	2201      	movs	r2, #1
 8010824:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010826:	4b1c      	ldr	r3, [pc, #112]	; (8010898 <xTaskResumeAll+0x120>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1cb      	bne.n	80107c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d001      	beq.n	8010838 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010834:	f000 fb56 	bl	8010ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010838:	4b1c      	ldr	r3, [pc, #112]	; (80108ac <xTaskResumeAll+0x134>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d010      	beq.n	8010866 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010844:	f000 f846 	bl	80108d4 <xTaskIncrementTick>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d002      	beq.n	8010854 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801084e:	4b16      	ldr	r3, [pc, #88]	; (80108a8 <xTaskResumeAll+0x130>)
 8010850:	2201      	movs	r2, #1
 8010852:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	3b01      	subs	r3, #1
 8010858:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1f1      	bne.n	8010844 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010860:	4b12      	ldr	r3, [pc, #72]	; (80108ac <xTaskResumeAll+0x134>)
 8010862:	2200      	movs	r2, #0
 8010864:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010866:	4b10      	ldr	r3, [pc, #64]	; (80108a8 <xTaskResumeAll+0x130>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d009      	beq.n	8010882 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801086e:	2301      	movs	r3, #1
 8010870:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010872:	4b0f      	ldr	r3, [pc, #60]	; (80108b0 <xTaskResumeAll+0x138>)
 8010874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010878:	601a      	str	r2, [r3, #0]
 801087a:	f3bf 8f4f 	dsb	sy
 801087e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010882:	f001 f9d3 	bl	8011c2c <vPortExitCritical>

	return xAlreadyYielded;
 8010886:	68bb      	ldr	r3, [r7, #8]
}
 8010888:	4618      	mov	r0, r3
 801088a:	3710      	adds	r7, #16
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	20003f3c 	.word	0x20003f3c
 8010894:	20003f14 	.word	0x20003f14
 8010898:	20003ed4 	.word	0x20003ed4
 801089c:	20003f1c 	.word	0x20003f1c
 80108a0:	20003a44 	.word	0x20003a44
 80108a4:	20003a40 	.word	0x20003a40
 80108a8:	20003f28 	.word	0x20003f28
 80108ac:	20003f24 	.word	0x20003f24
 80108b0:	e000ed04 	.word	0xe000ed04

080108b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80108ba:	4b05      	ldr	r3, [pc, #20]	; (80108d0 <xTaskGetTickCount+0x1c>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80108c0:	687b      	ldr	r3, [r7, #4]
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	370c      	adds	r7, #12
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	20003f18 	.word	0x20003f18

080108d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b086      	sub	sp, #24
 80108d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80108da:	2300      	movs	r3, #0
 80108dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108de:	4b4f      	ldr	r3, [pc, #316]	; (8010a1c <xTaskIncrementTick+0x148>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	f040 808a 	bne.w	80109fc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80108e8:	4b4d      	ldr	r3, [pc, #308]	; (8010a20 <xTaskIncrementTick+0x14c>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	3301      	adds	r3, #1
 80108ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80108f0:	4a4b      	ldr	r2, [pc, #300]	; (8010a20 <xTaskIncrementTick+0x14c>)
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d121      	bne.n	8010940 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80108fc:	4b49      	ldr	r3, [pc, #292]	; (8010a24 <xTaskIncrementTick+0x150>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00b      	beq.n	801091e <xTaskIncrementTick+0x4a>
 8010906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090a:	b672      	cpsid	i
 801090c:	f383 8811 	msr	BASEPRI, r3
 8010910:	f3bf 8f6f 	isb	sy
 8010914:	f3bf 8f4f 	dsb	sy
 8010918:	b662      	cpsie	i
 801091a:	603b      	str	r3, [r7, #0]
 801091c:	e7fe      	b.n	801091c <xTaskIncrementTick+0x48>
 801091e:	4b41      	ldr	r3, [pc, #260]	; (8010a24 <xTaskIncrementTick+0x150>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	60fb      	str	r3, [r7, #12]
 8010924:	4b40      	ldr	r3, [pc, #256]	; (8010a28 <xTaskIncrementTick+0x154>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4a3e      	ldr	r2, [pc, #248]	; (8010a24 <xTaskIncrementTick+0x150>)
 801092a:	6013      	str	r3, [r2, #0]
 801092c:	4a3e      	ldr	r2, [pc, #248]	; (8010a28 <xTaskIncrementTick+0x154>)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6013      	str	r3, [r2, #0]
 8010932:	4b3e      	ldr	r3, [pc, #248]	; (8010a2c <xTaskIncrementTick+0x158>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	3301      	adds	r3, #1
 8010938:	4a3c      	ldr	r2, [pc, #240]	; (8010a2c <xTaskIncrementTick+0x158>)
 801093a:	6013      	str	r3, [r2, #0]
 801093c:	f000 fad2 	bl	8010ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010940:	4b3b      	ldr	r3, [pc, #236]	; (8010a30 <xTaskIncrementTick+0x15c>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	429a      	cmp	r2, r3
 8010948:	d349      	bcc.n	80109de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801094a:	4b36      	ldr	r3, [pc, #216]	; (8010a24 <xTaskIncrementTick+0x150>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d104      	bne.n	801095e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010954:	4b36      	ldr	r3, [pc, #216]	; (8010a30 <xTaskIncrementTick+0x15c>)
 8010956:	f04f 32ff 	mov.w	r2, #4294967295
 801095a:	601a      	str	r2, [r3, #0]
					break;
 801095c:	e03f      	b.n	80109de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801095e:	4b31      	ldr	r3, [pc, #196]	; (8010a24 <xTaskIncrementTick+0x150>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	68db      	ldr	r3, [r3, #12]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801096e:	693a      	ldr	r2, [r7, #16]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	429a      	cmp	r2, r3
 8010974:	d203      	bcs.n	801097e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010976:	4a2e      	ldr	r2, [pc, #184]	; (8010a30 <xTaskIncrementTick+0x15c>)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801097c:	e02f      	b.n	80109de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	3304      	adds	r3, #4
 8010982:	4618      	mov	r0, r3
 8010984:	f7fe ff12 	bl	800f7ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801098c:	2b00      	cmp	r3, #0
 801098e:	d004      	beq.n	801099a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	3318      	adds	r3, #24
 8010994:	4618      	mov	r0, r3
 8010996:	f7fe ff09 	bl	800f7ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801099e:	4b25      	ldr	r3, [pc, #148]	; (8010a34 <xTaskIncrementTick+0x160>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d903      	bls.n	80109ae <xTaskIncrementTick+0xda>
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109aa:	4a22      	ldr	r2, [pc, #136]	; (8010a34 <xTaskIncrementTick+0x160>)
 80109ac:	6013      	str	r3, [r2, #0]
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109b2:	4613      	mov	r3, r2
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	4413      	add	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4a1f      	ldr	r2, [pc, #124]	; (8010a38 <xTaskIncrementTick+0x164>)
 80109bc:	441a      	add	r2, r3
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	3304      	adds	r3, #4
 80109c2:	4619      	mov	r1, r3
 80109c4:	4610      	mov	r0, r2
 80109c6:	f7fe fe94 	bl	800f6f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ce:	4b1b      	ldr	r3, [pc, #108]	; (8010a3c <xTaskIncrementTick+0x168>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d3b8      	bcc.n	801094a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80109d8:	2301      	movs	r3, #1
 80109da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109dc:	e7b5      	b.n	801094a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80109de:	4b17      	ldr	r3, [pc, #92]	; (8010a3c <xTaskIncrementTick+0x168>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109e4:	4914      	ldr	r1, [pc, #80]	; (8010a38 <xTaskIncrementTick+0x164>)
 80109e6:	4613      	mov	r3, r2
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	4413      	add	r3, r2
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	440b      	add	r3, r1
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d907      	bls.n	8010a06 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80109f6:	2301      	movs	r3, #1
 80109f8:	617b      	str	r3, [r7, #20]
 80109fa:	e004      	b.n	8010a06 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80109fc:	4b10      	ldr	r3, [pc, #64]	; (8010a40 <xTaskIncrementTick+0x16c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	3301      	adds	r3, #1
 8010a02:	4a0f      	ldr	r2, [pc, #60]	; (8010a40 <xTaskIncrementTick+0x16c>)
 8010a04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010a06:	4b0f      	ldr	r3, [pc, #60]	; (8010a44 <xTaskIncrementTick+0x170>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d001      	beq.n	8010a12 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8010a0e:	2301      	movs	r3, #1
 8010a10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010a12:	697b      	ldr	r3, [r7, #20]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3718      	adds	r7, #24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	20003f3c 	.word	0x20003f3c
 8010a20:	20003f18 	.word	0x20003f18
 8010a24:	20003ecc 	.word	0x20003ecc
 8010a28:	20003ed0 	.word	0x20003ed0
 8010a2c:	20003f2c 	.word	0x20003f2c
 8010a30:	20003f34 	.word	0x20003f34
 8010a34:	20003f1c 	.word	0x20003f1c
 8010a38:	20003a44 	.word	0x20003a44
 8010a3c:	20003a40 	.word	0x20003a40
 8010a40:	20003f24 	.word	0x20003f24
 8010a44:	20003f28 	.word	0x20003f28

08010a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a4e:	4b28      	ldr	r3, [pc, #160]	; (8010af0 <vTaskSwitchContext+0xa8>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d003      	beq.n	8010a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010a56:	4b27      	ldr	r3, [pc, #156]	; (8010af4 <vTaskSwitchContext+0xac>)
 8010a58:	2201      	movs	r2, #1
 8010a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010a5c:	e042      	b.n	8010ae4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8010a5e:	4b25      	ldr	r3, [pc, #148]	; (8010af4 <vTaskSwitchContext+0xac>)
 8010a60:	2200      	movs	r2, #0
 8010a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a64:	4b24      	ldr	r3, [pc, #144]	; (8010af8 <vTaskSwitchContext+0xb0>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	60fb      	str	r3, [r7, #12]
 8010a6a:	e011      	b.n	8010a90 <vTaskSwitchContext+0x48>
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d10b      	bne.n	8010a8a <vTaskSwitchContext+0x42>
 8010a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a76:	b672      	cpsid	i
 8010a78:	f383 8811 	msr	BASEPRI, r3
 8010a7c:	f3bf 8f6f 	isb	sy
 8010a80:	f3bf 8f4f 	dsb	sy
 8010a84:	b662      	cpsie	i
 8010a86:	607b      	str	r3, [r7, #4]
 8010a88:	e7fe      	b.n	8010a88 <vTaskSwitchContext+0x40>
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	60fb      	str	r3, [r7, #12]
 8010a90:	491a      	ldr	r1, [pc, #104]	; (8010afc <vTaskSwitchContext+0xb4>)
 8010a92:	68fa      	ldr	r2, [r7, #12]
 8010a94:	4613      	mov	r3, r2
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	4413      	add	r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	440b      	add	r3, r1
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d0e3      	beq.n	8010a6c <vTaskSwitchContext+0x24>
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	4413      	add	r3, r2
 8010aac:	009b      	lsls	r3, r3, #2
 8010aae:	4a13      	ldr	r2, [pc, #76]	; (8010afc <vTaskSwitchContext+0xb4>)
 8010ab0:	4413      	add	r3, r2
 8010ab2:	60bb      	str	r3, [r7, #8]
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	685a      	ldr	r2, [r3, #4]
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	605a      	str	r2, [r3, #4]
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	685a      	ldr	r2, [r3, #4]
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	3308      	adds	r3, #8
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d104      	bne.n	8010ad4 <vTaskSwitchContext+0x8c>
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	685a      	ldr	r2, [r3, #4]
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	605a      	str	r2, [r3, #4]
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	4a09      	ldr	r2, [pc, #36]	; (8010b00 <vTaskSwitchContext+0xb8>)
 8010adc:	6013      	str	r3, [r2, #0]
 8010ade:	4a06      	ldr	r2, [pc, #24]	; (8010af8 <vTaskSwitchContext+0xb0>)
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6013      	str	r3, [r2, #0]
}
 8010ae4:	bf00      	nop
 8010ae6:	3714      	adds	r7, #20
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr
 8010af0:	20003f3c 	.word	0x20003f3c
 8010af4:	20003f28 	.word	0x20003f28
 8010af8:	20003f1c 	.word	0x20003f1c
 8010afc:	20003a44 	.word	0x20003a44
 8010b00:	20003a40 	.word	0x20003a40

08010b04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d10b      	bne.n	8010b2c <vTaskPlaceOnEventList+0x28>
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	b672      	cpsid	i
 8010b1a:	f383 8811 	msr	BASEPRI, r3
 8010b1e:	f3bf 8f6f 	isb	sy
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	b662      	cpsie	i
 8010b28:	60fb      	str	r3, [r7, #12]
 8010b2a:	e7fe      	b.n	8010b2a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b2c:	4b07      	ldr	r3, [pc, #28]	; (8010b4c <vTaskPlaceOnEventList+0x48>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	3318      	adds	r3, #24
 8010b32:	4619      	mov	r1, r3
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f7fe fe00 	bl	800f73a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b3a:	2101      	movs	r1, #1
 8010b3c:	6838      	ldr	r0, [r7, #0]
 8010b3e:	f000 fb93 	bl	8011268 <prvAddCurrentTaskToDelayedList>
}
 8010b42:	bf00      	nop
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	20003a40 	.word	0x20003a40

08010b50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10b      	bne.n	8010b7a <vTaskPlaceOnEventListRestricted+0x2a>
 8010b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b66:	b672      	cpsid	i
 8010b68:	f383 8811 	msr	BASEPRI, r3
 8010b6c:	f3bf 8f6f 	isb	sy
 8010b70:	f3bf 8f4f 	dsb	sy
 8010b74:	b662      	cpsie	i
 8010b76:	617b      	str	r3, [r7, #20]
 8010b78:	e7fe      	b.n	8010b78 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b7a:	4b0a      	ldr	r3, [pc, #40]	; (8010ba4 <vTaskPlaceOnEventListRestricted+0x54>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	3318      	adds	r3, #24
 8010b80:	4619      	mov	r1, r3
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	f7fe fdb5 	bl	800f6f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d002      	beq.n	8010b94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b94:	6879      	ldr	r1, [r7, #4]
 8010b96:	68b8      	ldr	r0, [r7, #8]
 8010b98:	f000 fb66 	bl	8011268 <prvAddCurrentTaskToDelayedList>
	}
 8010b9c:	bf00      	nop
 8010b9e:	3718      	adds	r7, #24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	20003a40 	.word	0x20003a40

08010ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d10b      	bne.n	8010bd6 <xTaskRemoveFromEventList+0x2e>
 8010bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc2:	b672      	cpsid	i
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	b662      	cpsie	i
 8010bd2:	60fb      	str	r3, [r7, #12]
 8010bd4:	e7fe      	b.n	8010bd4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	3318      	adds	r3, #24
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fe fde6 	bl	800f7ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010be0:	4b1d      	ldr	r3, [pc, #116]	; (8010c58 <xTaskRemoveFromEventList+0xb0>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d11d      	bne.n	8010c24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	3304      	adds	r3, #4
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fe fddd 	bl	800f7ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bf6:	4b19      	ldr	r3, [pc, #100]	; (8010c5c <xTaskRemoveFromEventList+0xb4>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d903      	bls.n	8010c06 <xTaskRemoveFromEventList+0x5e>
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c02:	4a16      	ldr	r2, [pc, #88]	; (8010c5c <xTaskRemoveFromEventList+0xb4>)
 8010c04:	6013      	str	r3, [r2, #0]
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	4413      	add	r3, r2
 8010c10:	009b      	lsls	r3, r3, #2
 8010c12:	4a13      	ldr	r2, [pc, #76]	; (8010c60 <xTaskRemoveFromEventList+0xb8>)
 8010c14:	441a      	add	r2, r3
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	3304      	adds	r3, #4
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	4610      	mov	r0, r2
 8010c1e:	f7fe fd68 	bl	800f6f2 <vListInsertEnd>
 8010c22:	e005      	b.n	8010c30 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	3318      	adds	r3, #24
 8010c28:	4619      	mov	r1, r3
 8010c2a:	480e      	ldr	r0, [pc, #56]	; (8010c64 <xTaskRemoveFromEventList+0xbc>)
 8010c2c:	f7fe fd61 	bl	800f6f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c34:	4b0c      	ldr	r3, [pc, #48]	; (8010c68 <xTaskRemoveFromEventList+0xc0>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d905      	bls.n	8010c4a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010c3e:	2301      	movs	r3, #1
 8010c40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010c42:	4b0a      	ldr	r3, [pc, #40]	; (8010c6c <xTaskRemoveFromEventList+0xc4>)
 8010c44:	2201      	movs	r2, #1
 8010c46:	601a      	str	r2, [r3, #0]
 8010c48:	e001      	b.n	8010c4e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010c4e:	697b      	ldr	r3, [r7, #20]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3718      	adds	r7, #24
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	20003f3c 	.word	0x20003f3c
 8010c5c:	20003f1c 	.word	0x20003f1c
 8010c60:	20003a44 	.word	0x20003a44
 8010c64:	20003ed4 	.word	0x20003ed4
 8010c68:	20003a40 	.word	0x20003a40
 8010c6c:	20003f28 	.word	0x20003f28

08010c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010c78:	4b06      	ldr	r3, [pc, #24]	; (8010c94 <vTaskInternalSetTimeOutState+0x24>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010c80:	4b05      	ldr	r3, [pc, #20]	; (8010c98 <vTaskInternalSetTimeOutState+0x28>)
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	605a      	str	r2, [r3, #4]
}
 8010c88:	bf00      	nop
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr
 8010c94:	20003f2c 	.word	0x20003f2c
 8010c98:	20003f18 	.word	0x20003f18

08010c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b088      	sub	sp, #32
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d10b      	bne.n	8010cc4 <xTaskCheckForTimeOut+0x28>
 8010cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb0:	b672      	cpsid	i
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	b662      	cpsie	i
 8010cc0:	613b      	str	r3, [r7, #16]
 8010cc2:	e7fe      	b.n	8010cc2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10b      	bne.n	8010ce2 <xTaskCheckForTimeOut+0x46>
 8010cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cce:	b672      	cpsid	i
 8010cd0:	f383 8811 	msr	BASEPRI, r3
 8010cd4:	f3bf 8f6f 	isb	sy
 8010cd8:	f3bf 8f4f 	dsb	sy
 8010cdc:	b662      	cpsie	i
 8010cde:	60fb      	str	r3, [r7, #12]
 8010ce0:	e7fe      	b.n	8010ce0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8010ce2:	f000 ff71 	bl	8011bc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010ce6:	4b1d      	ldr	r3, [pc, #116]	; (8010d5c <xTaskCheckForTimeOut+0xc0>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	69ba      	ldr	r2, [r7, #24]
 8010cf2:	1ad3      	subs	r3, r2, r3
 8010cf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cfe:	d102      	bne.n	8010d06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010d00:	2300      	movs	r3, #0
 8010d02:	61fb      	str	r3, [r7, #28]
 8010d04:	e023      	b.n	8010d4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	4b15      	ldr	r3, [pc, #84]	; (8010d60 <xTaskCheckForTimeOut+0xc4>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d007      	beq.n	8010d22 <xTaskCheckForTimeOut+0x86>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	69ba      	ldr	r2, [r7, #24]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d302      	bcc.n	8010d22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	61fb      	str	r3, [r7, #28]
 8010d20:	e015      	b.n	8010d4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	697a      	ldr	r2, [r7, #20]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d20b      	bcs.n	8010d44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	1ad2      	subs	r2, r2, r3
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f7ff ff99 	bl	8010c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	61fb      	str	r3, [r7, #28]
 8010d42:	e004      	b.n	8010d4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2200      	movs	r2, #0
 8010d48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010d4e:	f000 ff6d 	bl	8011c2c <vPortExitCritical>

	return xReturn;
 8010d52:	69fb      	ldr	r3, [r7, #28]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3720      	adds	r7, #32
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	20003f18 	.word	0x20003f18
 8010d60:	20003f2c 	.word	0x20003f2c

08010d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010d64:	b480      	push	{r7}
 8010d66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010d68:	4b03      	ldr	r3, [pc, #12]	; (8010d78 <vTaskMissedYield+0x14>)
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	601a      	str	r2, [r3, #0]
}
 8010d6e:	bf00      	nop
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr
 8010d78:	20003f28 	.word	0x20003f28

08010d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010d84:	f000 f852 	bl	8010e2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010d88:	4b06      	ldr	r3, [pc, #24]	; (8010da4 <prvIdleTask+0x28>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d9f9      	bls.n	8010d84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010d90:	4b05      	ldr	r3, [pc, #20]	; (8010da8 <prvIdleTask+0x2c>)
 8010d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d96:	601a      	str	r2, [r3, #0]
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010da0:	e7f0      	b.n	8010d84 <prvIdleTask+0x8>
 8010da2:	bf00      	nop
 8010da4:	20003a44 	.word	0x20003a44
 8010da8:	e000ed04 	.word	0xe000ed04

08010dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010db2:	2300      	movs	r3, #0
 8010db4:	607b      	str	r3, [r7, #4]
 8010db6:	e00c      	b.n	8010dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	4613      	mov	r3, r2
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	4413      	add	r3, r2
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	4a12      	ldr	r2, [pc, #72]	; (8010e0c <prvInitialiseTaskLists+0x60>)
 8010dc4:	4413      	add	r3, r2
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe fc66 	bl	800f698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	607b      	str	r3, [r7, #4]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b37      	cmp	r3, #55	; 0x37
 8010dd6:	d9ef      	bls.n	8010db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010dd8:	480d      	ldr	r0, [pc, #52]	; (8010e10 <prvInitialiseTaskLists+0x64>)
 8010dda:	f7fe fc5d 	bl	800f698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010dde:	480d      	ldr	r0, [pc, #52]	; (8010e14 <prvInitialiseTaskLists+0x68>)
 8010de0:	f7fe fc5a 	bl	800f698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010de4:	480c      	ldr	r0, [pc, #48]	; (8010e18 <prvInitialiseTaskLists+0x6c>)
 8010de6:	f7fe fc57 	bl	800f698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010dea:	480c      	ldr	r0, [pc, #48]	; (8010e1c <prvInitialiseTaskLists+0x70>)
 8010dec:	f7fe fc54 	bl	800f698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010df0:	480b      	ldr	r0, [pc, #44]	; (8010e20 <prvInitialiseTaskLists+0x74>)
 8010df2:	f7fe fc51 	bl	800f698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010df6:	4b0b      	ldr	r3, [pc, #44]	; (8010e24 <prvInitialiseTaskLists+0x78>)
 8010df8:	4a05      	ldr	r2, [pc, #20]	; (8010e10 <prvInitialiseTaskLists+0x64>)
 8010dfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010dfc:	4b0a      	ldr	r3, [pc, #40]	; (8010e28 <prvInitialiseTaskLists+0x7c>)
 8010dfe:	4a05      	ldr	r2, [pc, #20]	; (8010e14 <prvInitialiseTaskLists+0x68>)
 8010e00:	601a      	str	r2, [r3, #0]
}
 8010e02:	bf00      	nop
 8010e04:	3708      	adds	r7, #8
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	20003a44 	.word	0x20003a44
 8010e10:	20003ea4 	.word	0x20003ea4
 8010e14:	20003eb8 	.word	0x20003eb8
 8010e18:	20003ed4 	.word	0x20003ed4
 8010e1c:	20003ee8 	.word	0x20003ee8
 8010e20:	20003f00 	.word	0x20003f00
 8010e24:	20003ecc 	.word	0x20003ecc
 8010e28:	20003ed0 	.word	0x20003ed0

08010e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e32:	e019      	b.n	8010e68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010e34:	f000 fec8 	bl	8011bc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e38:	4b0f      	ldr	r3, [pc, #60]	; (8010e78 <prvCheckTasksWaitingTermination+0x4c>)
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	3304      	adds	r3, #4
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fe fcb1 	bl	800f7ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e4a:	4b0c      	ldr	r3, [pc, #48]	; (8010e7c <prvCheckTasksWaitingTermination+0x50>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	3b01      	subs	r3, #1
 8010e50:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <prvCheckTasksWaitingTermination+0x50>)
 8010e52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e54:	4b0a      	ldr	r3, [pc, #40]	; (8010e80 <prvCheckTasksWaitingTermination+0x54>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	3b01      	subs	r3, #1
 8010e5a:	4a09      	ldr	r2, [pc, #36]	; (8010e80 <prvCheckTasksWaitingTermination+0x54>)
 8010e5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010e5e:	f000 fee5 	bl	8011c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 f80e 	bl	8010e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e68:	4b05      	ldr	r3, [pc, #20]	; (8010e80 <prvCheckTasksWaitingTermination+0x54>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1e1      	bne.n	8010e34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010e70:	bf00      	nop
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	20003ee8 	.word	0x20003ee8
 8010e7c:	20003f14 	.word	0x20003f14
 8010e80:	20003efc 	.word	0x20003efc

08010e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d108      	bne.n	8010ea8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f001 f87e 	bl	8011f9c <vPortFree>
				vPortFree( pxTCB );
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f001 f87b 	bl	8011f9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010ea6:	e019      	b.n	8010edc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d103      	bne.n	8010eba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f001 f872 	bl	8011f9c <vPortFree>
	}
 8010eb8:	e010      	b.n	8010edc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010ec0:	2b02      	cmp	r3, #2
 8010ec2:	d00b      	beq.n	8010edc <prvDeleteTCB+0x58>
 8010ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec8:	b672      	cpsid	i
 8010eca:	f383 8811 	msr	BASEPRI, r3
 8010ece:	f3bf 8f6f 	isb	sy
 8010ed2:	f3bf 8f4f 	dsb	sy
 8010ed6:	b662      	cpsie	i
 8010ed8:	60fb      	str	r3, [r7, #12]
 8010eda:	e7fe      	b.n	8010eda <prvDeleteTCB+0x56>
	}
 8010edc:	bf00      	nop
 8010ede:	3710      	adds	r7, #16
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010eea:	4b0c      	ldr	r3, [pc, #48]	; (8010f1c <prvResetNextTaskUnblockTime+0x38>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d104      	bne.n	8010efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010ef4:	4b0a      	ldr	r3, [pc, #40]	; (8010f20 <prvResetNextTaskUnblockTime+0x3c>)
 8010ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8010efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010efc:	e008      	b.n	8010f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010efe:	4b07      	ldr	r3, [pc, #28]	; (8010f1c <prvResetNextTaskUnblockTime+0x38>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	4a04      	ldr	r2, [pc, #16]	; (8010f20 <prvResetNextTaskUnblockTime+0x3c>)
 8010f0e:	6013      	str	r3, [r2, #0]
}
 8010f10:	bf00      	nop
 8010f12:	370c      	adds	r7, #12
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr
 8010f1c:	20003ecc 	.word	0x20003ecc
 8010f20:	20003f34 	.word	0x20003f34

08010f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010f2a:	4b0b      	ldr	r3, [pc, #44]	; (8010f58 <xTaskGetSchedulerState+0x34>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d102      	bne.n	8010f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f32:	2301      	movs	r3, #1
 8010f34:	607b      	str	r3, [r7, #4]
 8010f36:	e008      	b.n	8010f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f38:	4b08      	ldr	r3, [pc, #32]	; (8010f5c <xTaskGetSchedulerState+0x38>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d102      	bne.n	8010f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010f40:	2302      	movs	r3, #2
 8010f42:	607b      	str	r3, [r7, #4]
 8010f44:	e001      	b.n	8010f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f46:	2300      	movs	r3, #0
 8010f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010f4a:	687b      	ldr	r3, [r7, #4]
	}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	370c      	adds	r7, #12
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr
 8010f58:	20003f20 	.word	0x20003f20
 8010f5c:	20003f3c 	.word	0x20003f3c

08010f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d058      	beq.n	8011028 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010f76:	4b2f      	ldr	r3, [pc, #188]	; (8011034 <xTaskPriorityDisinherit+0xd4>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	693a      	ldr	r2, [r7, #16]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d00b      	beq.n	8010f98 <xTaskPriorityDisinherit+0x38>
 8010f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f84:	b672      	cpsid	i
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	b662      	cpsie	i
 8010f94:	60fb      	str	r3, [r7, #12]
 8010f96:	e7fe      	b.n	8010f96 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d10b      	bne.n	8010fb8 <xTaskPriorityDisinherit+0x58>
 8010fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa4:	b672      	cpsid	i
 8010fa6:	f383 8811 	msr	BASEPRI, r3
 8010faa:	f3bf 8f6f 	isb	sy
 8010fae:	f3bf 8f4f 	dsb	sy
 8010fb2:	b662      	cpsie	i
 8010fb4:	60bb      	str	r3, [r7, #8]
 8010fb6:	e7fe      	b.n	8010fb6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fbc:	1e5a      	subs	r2, r3, #1
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d02c      	beq.n	8011028 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d128      	bne.n	8011028 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	3304      	adds	r3, #4
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fe fbe6 	bl	800f7ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ff8:	4b0f      	ldr	r3, [pc, #60]	; (8011038 <xTaskPriorityDisinherit+0xd8>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d903      	bls.n	8011008 <xTaskPriorityDisinherit+0xa8>
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011004:	4a0c      	ldr	r2, [pc, #48]	; (8011038 <xTaskPriorityDisinherit+0xd8>)
 8011006:	6013      	str	r3, [r2, #0]
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801100c:	4613      	mov	r3, r2
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	4413      	add	r3, r2
 8011012:	009b      	lsls	r3, r3, #2
 8011014:	4a09      	ldr	r2, [pc, #36]	; (801103c <xTaskPriorityDisinherit+0xdc>)
 8011016:	441a      	add	r2, r3
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	3304      	adds	r3, #4
 801101c:	4619      	mov	r1, r3
 801101e:	4610      	mov	r0, r2
 8011020:	f7fe fb67 	bl	800f6f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011024:	2301      	movs	r3, #1
 8011026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011028:	697b      	ldr	r3, [r7, #20]
	}
 801102a:	4618      	mov	r0, r3
 801102c:	3718      	adds	r7, #24
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	20003a40 	.word	0x20003a40
 8011038:	20003f1c 	.word	0x20003f1c
 801103c:	20003a44 	.word	0x20003a44

08011040 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011040:	b580      	push	{r7, lr}
 8011042:	b086      	sub	sp, #24
 8011044:	af00      	add	r7, sp, #0
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
 801104c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801104e:	f000 fdbb 	bl	8011bc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011052:	4b26      	ldr	r3, [pc, #152]	; (80110ec <xTaskNotifyWait+0xac>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801105a:	b2db      	uxtb	r3, r3
 801105c:	2b02      	cmp	r3, #2
 801105e:	d01a      	beq.n	8011096 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011060:	4b22      	ldr	r3, [pc, #136]	; (80110ec <xTaskNotifyWait+0xac>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	43d2      	mvns	r2, r2
 801106a:	400a      	ands	r2, r1
 801106c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801106e:	4b1f      	ldr	r3, [pc, #124]	; (80110ec <xTaskNotifyWait+0xac>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2201      	movs	r2, #1
 8011074:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00b      	beq.n	8011096 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801107e:	2101      	movs	r1, #1
 8011080:	6838      	ldr	r0, [r7, #0]
 8011082:	f000 f8f1 	bl	8011268 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011086:	4b1a      	ldr	r3, [pc, #104]	; (80110f0 <xTaskNotifyWait+0xb0>)
 8011088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801108c:	601a      	str	r2, [r3, #0]
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011096:	f000 fdc9 	bl	8011c2c <vPortExitCritical>

		taskENTER_CRITICAL();
 801109a:	f000 fd95 	bl	8011bc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d004      	beq.n	80110ae <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80110a4:	4b11      	ldr	r3, [pc, #68]	; (80110ec <xTaskNotifyWait+0xac>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80110ae:	4b0f      	ldr	r3, [pc, #60]	; (80110ec <xTaskNotifyWait+0xac>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	2b02      	cmp	r3, #2
 80110ba:	d002      	beq.n	80110c2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80110bc:	2300      	movs	r3, #0
 80110be:	617b      	str	r3, [r7, #20]
 80110c0:	e008      	b.n	80110d4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80110c2:	4b0a      	ldr	r3, [pc, #40]	; (80110ec <xTaskNotifyWait+0xac>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80110c8:	68ba      	ldr	r2, [r7, #8]
 80110ca:	43d2      	mvns	r2, r2
 80110cc:	400a      	ands	r2, r1
 80110ce:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80110d0:	2301      	movs	r3, #1
 80110d2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80110d4:	4b05      	ldr	r3, [pc, #20]	; (80110ec <xTaskNotifyWait+0xac>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2200      	movs	r2, #0
 80110da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80110de:	f000 fda5 	bl	8011c2c <vPortExitCritical>

		return xReturn;
 80110e2:	697b      	ldr	r3, [r7, #20]
	}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3718      	adds	r7, #24
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	20003a40 	.word	0x20003a40
 80110f0:	e000ed04 	.word	0xe000ed04

080110f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b08a      	sub	sp, #40	; 0x28
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	603b      	str	r3, [r7, #0]
 8011100:	4613      	mov	r3, r2
 8011102:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011104:	2301      	movs	r3, #1
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d10b      	bne.n	8011126 <xTaskGenericNotify+0x32>
 801110e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011112:	b672      	cpsid	i
 8011114:	f383 8811 	msr	BASEPRI, r3
 8011118:	f3bf 8f6f 	isb	sy
 801111c:	f3bf 8f4f 	dsb	sy
 8011120:	b662      	cpsie	i
 8011122:	61bb      	str	r3, [r7, #24]
 8011124:	e7fe      	b.n	8011124 <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801112a:	f000 fd4d 	bl	8011bc8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d003      	beq.n	801113c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801113c:	6a3b      	ldr	r3, [r7, #32]
 801113e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8011142:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011144:	6a3b      	ldr	r3, [r7, #32]
 8011146:	2202      	movs	r2, #2
 8011148:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801114c:	79fb      	ldrb	r3, [r7, #7]
 801114e:	2b04      	cmp	r3, #4
 8011150:	d827      	bhi.n	80111a2 <xTaskGenericNotify+0xae>
 8011152:	a201      	add	r2, pc, #4	; (adr r2, 8011158 <xTaskGenericNotify+0x64>)
 8011154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011158:	080111c5 	.word	0x080111c5
 801115c:	0801116d 	.word	0x0801116d
 8011160:	0801117b 	.word	0x0801117b
 8011164:	08011187 	.word	0x08011187
 8011168:	0801118f 	.word	0x0801118f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801116c:	6a3b      	ldr	r3, [r7, #32]
 801116e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	431a      	orrs	r2, r3
 8011174:	6a3b      	ldr	r3, [r7, #32]
 8011176:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011178:	e027      	b.n	80111ca <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801117a:	6a3b      	ldr	r3, [r7, #32]
 801117c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801117e:	1c5a      	adds	r2, r3, #1
 8011180:	6a3b      	ldr	r3, [r7, #32]
 8011182:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8011184:	e021      	b.n	80111ca <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011186:	6a3b      	ldr	r3, [r7, #32]
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801118c:	e01d      	b.n	80111ca <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801118e:	7ffb      	ldrb	r3, [r7, #31]
 8011190:	2b02      	cmp	r3, #2
 8011192:	d003      	beq.n	801119c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	68ba      	ldr	r2, [r7, #8]
 8011198:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801119a:	e016      	b.n	80111ca <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 801119c:	2300      	movs	r3, #0
 801119e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80111a0:	e013      	b.n	80111ca <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80111a2:	6a3b      	ldr	r3, [r7, #32]
 80111a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111aa:	d00d      	beq.n	80111c8 <xTaskGenericNotify+0xd4>
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	b672      	cpsid	i
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	b662      	cpsie	i
 80111c0:	617b      	str	r3, [r7, #20]
 80111c2:	e7fe      	b.n	80111c2 <xTaskGenericNotify+0xce>
					break;
 80111c4:	bf00      	nop
 80111c6:	e000      	b.n	80111ca <xTaskGenericNotify+0xd6>

					break;
 80111c8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80111ca:	7ffb      	ldrb	r3, [r7, #31]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d13b      	bne.n	8011248 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	3304      	adds	r3, #4
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fe fae9 	bl	800f7ac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80111da:	6a3b      	ldr	r3, [r7, #32]
 80111dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111de:	4b1e      	ldr	r3, [pc, #120]	; (8011258 <xTaskGenericNotify+0x164>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d903      	bls.n	80111ee <xTaskGenericNotify+0xfa>
 80111e6:	6a3b      	ldr	r3, [r7, #32]
 80111e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ea:	4a1b      	ldr	r2, [pc, #108]	; (8011258 <xTaskGenericNotify+0x164>)
 80111ec:	6013      	str	r3, [r2, #0]
 80111ee:	6a3b      	ldr	r3, [r7, #32]
 80111f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111f2:	4613      	mov	r3, r2
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	4413      	add	r3, r2
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4a18      	ldr	r2, [pc, #96]	; (801125c <xTaskGenericNotify+0x168>)
 80111fc:	441a      	add	r2, r3
 80111fe:	6a3b      	ldr	r3, [r7, #32]
 8011200:	3304      	adds	r3, #4
 8011202:	4619      	mov	r1, r3
 8011204:	4610      	mov	r0, r2
 8011206:	f7fe fa74 	bl	800f6f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801120a:	6a3b      	ldr	r3, [r7, #32]
 801120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00b      	beq.n	801122a <xTaskGenericNotify+0x136>
 8011212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011216:	b672      	cpsid	i
 8011218:	f383 8811 	msr	BASEPRI, r3
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	b662      	cpsie	i
 8011226:	613b      	str	r3, [r7, #16]
 8011228:	e7fe      	b.n	8011228 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801122a:	6a3b      	ldr	r3, [r7, #32]
 801122c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801122e:	4b0c      	ldr	r3, [pc, #48]	; (8011260 <xTaskGenericNotify+0x16c>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011234:	429a      	cmp	r2, r3
 8011236:	d907      	bls.n	8011248 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011238:	4b0a      	ldr	r3, [pc, #40]	; (8011264 <xTaskGenericNotify+0x170>)
 801123a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801123e:	601a      	str	r2, [r3, #0]
 8011240:	f3bf 8f4f 	dsb	sy
 8011244:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011248:	f000 fcf0 	bl	8011c2c <vPortExitCritical>

		return xReturn;
 801124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801124e:	4618      	mov	r0, r3
 8011250:	3728      	adds	r7, #40	; 0x28
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	20003f1c 	.word	0x20003f1c
 801125c:	20003a44 	.word	0x20003a44
 8011260:	20003a40 	.word	0x20003a40
 8011264:	e000ed04 	.word	0xe000ed04

08011268 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011272:	4b21      	ldr	r3, [pc, #132]	; (80112f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011278:	4b20      	ldr	r3, [pc, #128]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	3304      	adds	r3, #4
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe fa94 	bl	800f7ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128a:	d10a      	bne.n	80112a2 <prvAddCurrentTaskToDelayedList+0x3a>
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d007      	beq.n	80112a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011292:	4b1a      	ldr	r3, [pc, #104]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3304      	adds	r3, #4
 8011298:	4619      	mov	r1, r3
 801129a:	4819      	ldr	r0, [pc, #100]	; (8011300 <prvAddCurrentTaskToDelayedList+0x98>)
 801129c:	f7fe fa29 	bl	800f6f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80112a0:	e026      	b.n	80112f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80112a2:	68fa      	ldr	r2, [r7, #12]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4413      	add	r3, r2
 80112a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80112aa:	4b14      	ldr	r3, [pc, #80]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d209      	bcs.n	80112ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112ba:	4b12      	ldr	r3, [pc, #72]	; (8011304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	4b0f      	ldr	r3, [pc, #60]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	3304      	adds	r3, #4
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f7fe fa37 	bl	800f73a <vListInsert>
}
 80112cc:	e010      	b.n	80112f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112ce:	4b0e      	ldr	r3, [pc, #56]	; (8011308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	4b0a      	ldr	r3, [pc, #40]	; (80112fc <prvAddCurrentTaskToDelayedList+0x94>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	3304      	adds	r3, #4
 80112d8:	4619      	mov	r1, r3
 80112da:	4610      	mov	r0, r2
 80112dc:	f7fe fa2d 	bl	800f73a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80112e0:	4b0a      	ldr	r3, [pc, #40]	; (801130c <prvAddCurrentTaskToDelayedList+0xa4>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d202      	bcs.n	80112f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80112ea:	4a08      	ldr	r2, [pc, #32]	; (801130c <prvAddCurrentTaskToDelayedList+0xa4>)
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	6013      	str	r3, [r2, #0]
}
 80112f0:	bf00      	nop
 80112f2:	3710      	adds	r7, #16
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	20003f18 	.word	0x20003f18
 80112fc:	20003a40 	.word	0x20003a40
 8011300:	20003f00 	.word	0x20003f00
 8011304:	20003ed0 	.word	0x20003ed0
 8011308:	20003ecc 	.word	0x20003ecc
 801130c:	20003f34 	.word	0x20003f34

08011310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b08a      	sub	sp, #40	; 0x28
 8011314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011316:	2300      	movs	r3, #0
 8011318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801131a:	f000 fb0d 	bl	8011938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801131e:	4b1d      	ldr	r3, [pc, #116]	; (8011394 <xTimerCreateTimerTask+0x84>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d021      	beq.n	801136a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011326:	2300      	movs	r3, #0
 8011328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801132a:	2300      	movs	r3, #0
 801132c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801132e:	1d3a      	adds	r2, r7, #4
 8011330:	f107 0108 	add.w	r1, r7, #8
 8011334:	f107 030c 	add.w	r3, r7, #12
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe f993 	bl	800f664 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801133e:	6879      	ldr	r1, [r7, #4]
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	9202      	str	r2, [sp, #8]
 8011346:	9301      	str	r3, [sp, #4]
 8011348:	2302      	movs	r3, #2
 801134a:	9300      	str	r3, [sp, #0]
 801134c:	2300      	movs	r3, #0
 801134e:	460a      	mov	r2, r1
 8011350:	4911      	ldr	r1, [pc, #68]	; (8011398 <xTimerCreateTimerTask+0x88>)
 8011352:	4812      	ldr	r0, [pc, #72]	; (801139c <xTimerCreateTimerTask+0x8c>)
 8011354:	f7fe ff4a 	bl	80101ec <xTaskCreateStatic>
 8011358:	4602      	mov	r2, r0
 801135a:	4b11      	ldr	r3, [pc, #68]	; (80113a0 <xTimerCreateTimerTask+0x90>)
 801135c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801135e:	4b10      	ldr	r3, [pc, #64]	; (80113a0 <xTimerCreateTimerTask+0x90>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d001      	beq.n	801136a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011366:	2301      	movs	r3, #1
 8011368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d10b      	bne.n	8011388 <xTimerCreateTimerTask+0x78>
 8011370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011374:	b672      	cpsid	i
 8011376:	f383 8811 	msr	BASEPRI, r3
 801137a:	f3bf 8f6f 	isb	sy
 801137e:	f3bf 8f4f 	dsb	sy
 8011382:	b662      	cpsie	i
 8011384:	613b      	str	r3, [r7, #16]
 8011386:	e7fe      	b.n	8011386 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8011388:	697b      	ldr	r3, [r7, #20]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	20003f70 	.word	0x20003f70
 8011398:	08016948 	.word	0x08016948
 801139c:	080114dd 	.word	0x080114dd
 80113a0:	20003f74 	.word	0x20003f74

080113a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b08a      	sub	sp, #40	; 0x28
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80113b2:	2300      	movs	r3, #0
 80113b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d10b      	bne.n	80113d4 <xTimerGenericCommand+0x30>
 80113bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c0:	b672      	cpsid	i
 80113c2:	f383 8811 	msr	BASEPRI, r3
 80113c6:	f3bf 8f6f 	isb	sy
 80113ca:	f3bf 8f4f 	dsb	sy
 80113ce:	b662      	cpsie	i
 80113d0:	623b      	str	r3, [r7, #32]
 80113d2:	e7fe      	b.n	80113d2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80113d4:	4b19      	ldr	r3, [pc, #100]	; (801143c <xTimerGenericCommand+0x98>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d02a      	beq.n	8011432 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	2b05      	cmp	r3, #5
 80113ec:	dc18      	bgt.n	8011420 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80113ee:	f7ff fd99 	bl	8010f24 <xTaskGetSchedulerState>
 80113f2:	4603      	mov	r3, r0
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d109      	bne.n	801140c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80113f8:	4b10      	ldr	r3, [pc, #64]	; (801143c <xTimerGenericCommand+0x98>)
 80113fa:	6818      	ldr	r0, [r3, #0]
 80113fc:	f107 0110 	add.w	r1, r7, #16
 8011400:	2300      	movs	r3, #0
 8011402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011404:	f7fe fb06 	bl	800fa14 <xQueueGenericSend>
 8011408:	6278      	str	r0, [r7, #36]	; 0x24
 801140a:	e012      	b.n	8011432 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801140c:	4b0b      	ldr	r3, [pc, #44]	; (801143c <xTimerGenericCommand+0x98>)
 801140e:	6818      	ldr	r0, [r3, #0]
 8011410:	f107 0110 	add.w	r1, r7, #16
 8011414:	2300      	movs	r3, #0
 8011416:	2200      	movs	r2, #0
 8011418:	f7fe fafc 	bl	800fa14 <xQueueGenericSend>
 801141c:	6278      	str	r0, [r7, #36]	; 0x24
 801141e:	e008      	b.n	8011432 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011420:	4b06      	ldr	r3, [pc, #24]	; (801143c <xTimerGenericCommand+0x98>)
 8011422:	6818      	ldr	r0, [r3, #0]
 8011424:	f107 0110 	add.w	r1, r7, #16
 8011428:	2300      	movs	r3, #0
 801142a:	683a      	ldr	r2, [r7, #0]
 801142c:	f7fe fbf4 	bl	800fc18 <xQueueGenericSendFromISR>
 8011430:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011434:	4618      	mov	r0, r3
 8011436:	3728      	adds	r7, #40	; 0x28
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	20003f70 	.word	0x20003f70

08011440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b088      	sub	sp, #32
 8011444:	af02      	add	r7, sp, #8
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801144a:	4b23      	ldr	r3, [pc, #140]	; (80114d8 <prvProcessExpiredTimer+0x98>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	3304      	adds	r3, #4
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe f9a7 	bl	800f7ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011464:	f003 0304 	and.w	r3, r3, #4
 8011468:	2b00      	cmp	r3, #0
 801146a:	d023      	beq.n	80114b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	699a      	ldr	r2, [r3, #24]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	18d1      	adds	r1, r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	6978      	ldr	r0, [r7, #20]
 801147a:	f000 f8d3 	bl	8011624 <prvInsertTimerInActiveList>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d020      	beq.n	80114c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011484:	2300      	movs	r3, #0
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	2300      	movs	r3, #0
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	2100      	movs	r1, #0
 801148e:	6978      	ldr	r0, [r7, #20]
 8011490:	f7ff ff88 	bl	80113a4 <xTimerGenericCommand>
 8011494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d114      	bne.n	80114c6 <prvProcessExpiredTimer+0x86>
 801149c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a0:	b672      	cpsid	i
 80114a2:	f383 8811 	msr	BASEPRI, r3
 80114a6:	f3bf 8f6f 	isb	sy
 80114aa:	f3bf 8f4f 	dsb	sy
 80114ae:	b662      	cpsie	i
 80114b0:	60fb      	str	r3, [r7, #12]
 80114b2:	e7fe      	b.n	80114b2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114ba:	f023 0301 	bic.w	r3, r3, #1
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	6a1b      	ldr	r3, [r3, #32]
 80114ca:	6978      	ldr	r0, [r7, #20]
 80114cc:	4798      	blx	r3
}
 80114ce:	bf00      	nop
 80114d0:	3718      	adds	r7, #24
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	20003f68 	.word	0x20003f68

080114dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80114e4:	f107 0308 	add.w	r3, r7, #8
 80114e8:	4618      	mov	r0, r3
 80114ea:	f000 f857 	bl	801159c <prvGetNextExpireTime>
 80114ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	4619      	mov	r1, r3
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f000 f803 	bl	8011500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80114fa:	f000 f8d5 	bl	80116a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80114fe:	e7f1      	b.n	80114e4 <prvTimerTask+0x8>

08011500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801150a:	f7ff f927 	bl	801075c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801150e:	f107 0308 	add.w	r3, r7, #8
 8011512:	4618      	mov	r0, r3
 8011514:	f000 f866 	bl	80115e4 <prvSampleTimeNow>
 8011518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d130      	bne.n	8011582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10a      	bne.n	801153c <prvProcessTimerOrBlockTask+0x3c>
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	429a      	cmp	r2, r3
 801152c:	d806      	bhi.n	801153c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801152e:	f7ff f923 	bl	8010778 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011532:	68f9      	ldr	r1, [r7, #12]
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f7ff ff83 	bl	8011440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801153a:	e024      	b.n	8011586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d008      	beq.n	8011554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011542:	4b13      	ldr	r3, [pc, #76]	; (8011590 <prvProcessTimerOrBlockTask+0x90>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d101      	bne.n	8011550 <prvProcessTimerOrBlockTask+0x50>
 801154c:	2301      	movs	r3, #1
 801154e:	e000      	b.n	8011552 <prvProcessTimerOrBlockTask+0x52>
 8011550:	2300      	movs	r3, #0
 8011552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011554:	4b0f      	ldr	r3, [pc, #60]	; (8011594 <prvProcessTimerOrBlockTask+0x94>)
 8011556:	6818      	ldr	r0, [r3, #0]
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	683a      	ldr	r2, [r7, #0]
 8011560:	4619      	mov	r1, r3
 8011562:	f7fe fe0f 	bl	8010184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011566:	f7ff f907 	bl	8010778 <xTaskResumeAll>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d10a      	bne.n	8011586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011570:	4b09      	ldr	r3, [pc, #36]	; (8011598 <prvProcessTimerOrBlockTask+0x98>)
 8011572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011576:	601a      	str	r2, [r3, #0]
 8011578:	f3bf 8f4f 	dsb	sy
 801157c:	f3bf 8f6f 	isb	sy
}
 8011580:	e001      	b.n	8011586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011582:	f7ff f8f9 	bl	8010778 <xTaskResumeAll>
}
 8011586:	bf00      	nop
 8011588:	3710      	adds	r7, #16
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	20003f6c 	.word	0x20003f6c
 8011594:	20003f70 	.word	0x20003f70
 8011598:	e000ed04 	.word	0xe000ed04

0801159c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801159c:	b480      	push	{r7}
 801159e:	b085      	sub	sp, #20
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80115a4:	4b0e      	ldr	r3, [pc, #56]	; (80115e0 <prvGetNextExpireTime+0x44>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d101      	bne.n	80115b2 <prvGetNextExpireTime+0x16>
 80115ae:	2201      	movs	r2, #1
 80115b0:	e000      	b.n	80115b4 <prvGetNextExpireTime+0x18>
 80115b2:	2200      	movs	r2, #0
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d105      	bne.n	80115cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80115c0:	4b07      	ldr	r3, [pc, #28]	; (80115e0 <prvGetNextExpireTime+0x44>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	68db      	ldr	r3, [r3, #12]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	60fb      	str	r3, [r7, #12]
 80115ca:	e001      	b.n	80115d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80115cc:	2300      	movs	r3, #0
 80115ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80115d0:	68fb      	ldr	r3, [r7, #12]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3714      	adds	r7, #20
 80115d6:	46bd      	mov	sp, r7
 80115d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop
 80115e0:	20003f68 	.word	0x20003f68

080115e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80115ec:	f7ff f962 	bl	80108b4 <xTaskGetTickCount>
 80115f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80115f2:	4b0b      	ldr	r3, [pc, #44]	; (8011620 <prvSampleTimeNow+0x3c>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d205      	bcs.n	8011608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80115fc:	f000 f936 	bl	801186c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2201      	movs	r2, #1
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	e002      	b.n	801160e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801160e:	4a04      	ldr	r2, [pc, #16]	; (8011620 <prvSampleTimeNow+0x3c>)
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011614:	68fb      	ldr	r3, [r7, #12]
}
 8011616:	4618      	mov	r0, r3
 8011618:	3710      	adds	r7, #16
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	20003f78 	.word	0x20003f78

08011624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
 8011630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011632:	2300      	movs	r3, #0
 8011634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	68fa      	ldr	r2, [r7, #12]
 8011640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011642:	68ba      	ldr	r2, [r7, #8]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	429a      	cmp	r2, r3
 8011648:	d812      	bhi.n	8011670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	1ad2      	subs	r2, r2, r3
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	699b      	ldr	r3, [r3, #24]
 8011654:	429a      	cmp	r2, r3
 8011656:	d302      	bcc.n	801165e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011658:	2301      	movs	r3, #1
 801165a:	617b      	str	r3, [r7, #20]
 801165c:	e01b      	b.n	8011696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801165e:	4b10      	ldr	r3, [pc, #64]	; (80116a0 <prvInsertTimerInActiveList+0x7c>)
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	3304      	adds	r3, #4
 8011666:	4619      	mov	r1, r3
 8011668:	4610      	mov	r0, r2
 801166a:	f7fe f866 	bl	800f73a <vListInsert>
 801166e:	e012      	b.n	8011696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	429a      	cmp	r2, r3
 8011676:	d206      	bcs.n	8011686 <prvInsertTimerInActiveList+0x62>
 8011678:	68ba      	ldr	r2, [r7, #8]
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	429a      	cmp	r2, r3
 801167e:	d302      	bcc.n	8011686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011680:	2301      	movs	r3, #1
 8011682:	617b      	str	r3, [r7, #20]
 8011684:	e007      	b.n	8011696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011686:	4b07      	ldr	r3, [pc, #28]	; (80116a4 <prvInsertTimerInActiveList+0x80>)
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	3304      	adds	r3, #4
 801168e:	4619      	mov	r1, r3
 8011690:	4610      	mov	r0, r2
 8011692:	f7fe f852 	bl	800f73a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011696:	697b      	ldr	r3, [r7, #20]
}
 8011698:	4618      	mov	r0, r3
 801169a:	3718      	adds	r7, #24
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	20003f6c 	.word	0x20003f6c
 80116a4:	20003f68 	.word	0x20003f68

080116a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b08e      	sub	sp, #56	; 0x38
 80116ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116ae:	e0cc      	b.n	801184a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	da19      	bge.n	80116ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80116b6:	1d3b      	adds	r3, r7, #4
 80116b8:	3304      	adds	r3, #4
 80116ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80116bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d10b      	bne.n	80116da <prvProcessReceivedCommands+0x32>
 80116c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c6:	b672      	cpsid	i
 80116c8:	f383 8811 	msr	BASEPRI, r3
 80116cc:	f3bf 8f6f 	isb	sy
 80116d0:	f3bf 8f4f 	dsb	sy
 80116d4:	b662      	cpsie	i
 80116d6:	61fb      	str	r3, [r7, #28]
 80116d8:	e7fe      	b.n	80116d8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116e0:	6850      	ldr	r0, [r2, #4]
 80116e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116e4:	6892      	ldr	r2, [r2, #8]
 80116e6:	4611      	mov	r1, r2
 80116e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f2c0 80ab 	blt.w	8011848 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80116f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f8:	695b      	ldr	r3, [r3, #20]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d004      	beq.n	8011708 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011700:	3304      	adds	r3, #4
 8011702:	4618      	mov	r0, r3
 8011704:	f7fe f852 	bl	800f7ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011708:	463b      	mov	r3, r7
 801170a:	4618      	mov	r0, r3
 801170c:	f7ff ff6a 	bl	80115e4 <prvSampleTimeNow>
 8011710:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b09      	cmp	r3, #9
 8011716:	f200 8098 	bhi.w	801184a <prvProcessReceivedCommands+0x1a2>
 801171a:	a201      	add	r2, pc, #4	; (adr r2, 8011720 <prvProcessReceivedCommands+0x78>)
 801171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011720:	08011749 	.word	0x08011749
 8011724:	08011749 	.word	0x08011749
 8011728:	08011749 	.word	0x08011749
 801172c:	080117bf 	.word	0x080117bf
 8011730:	080117d3 	.word	0x080117d3
 8011734:	0801181f 	.word	0x0801181f
 8011738:	08011749 	.word	0x08011749
 801173c:	08011749 	.word	0x08011749
 8011740:	080117bf 	.word	0x080117bf
 8011744:	080117d3 	.word	0x080117d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801174a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801174e:	f043 0301 	orr.w	r3, r3, #1
 8011752:	b2da      	uxtb	r2, r3
 8011754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	699b      	ldr	r3, [r3, #24]
 8011760:	18d1      	adds	r1, r2, r3
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011768:	f7ff ff5c 	bl	8011624 <prvInsertTimerInActiveList>
 801176c:	4603      	mov	r3, r0
 801176e:	2b00      	cmp	r3, #0
 8011770:	d06b      	beq.n	801184a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	6a1b      	ldr	r3, [r3, #32]
 8011776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801177a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801177c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011780:	f003 0304 	and.w	r3, r3, #4
 8011784:	2b00      	cmp	r3, #0
 8011786:	d060      	beq.n	801184a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011788:	68ba      	ldr	r2, [r7, #8]
 801178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178c:	699b      	ldr	r3, [r3, #24]
 801178e:	441a      	add	r2, r3
 8011790:	2300      	movs	r3, #0
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	2300      	movs	r3, #0
 8011796:	2100      	movs	r1, #0
 8011798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801179a:	f7ff fe03 	bl	80113a4 <xTimerGenericCommand>
 801179e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80117a0:	6a3b      	ldr	r3, [r7, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d151      	bne.n	801184a <prvProcessReceivedCommands+0x1a2>
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	b672      	cpsid	i
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	b662      	cpsie	i
 80117ba:	61bb      	str	r3, [r7, #24]
 80117bc:	e7fe      	b.n	80117bc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80117be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117c4:	f023 0301 	bic.w	r3, r3, #1
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80117d0:	e03b      	b.n	801184a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80117d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117d8:	f043 0301 	orr.w	r3, r3, #1
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80117e4:	68ba      	ldr	r2, [r7, #8]
 80117e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80117ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ec:	699b      	ldr	r3, [r3, #24]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10b      	bne.n	801180a <prvProcessReceivedCommands+0x162>
 80117f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f6:	b672      	cpsid	i
 80117f8:	f383 8811 	msr	BASEPRI, r3
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	f3bf 8f4f 	dsb	sy
 8011804:	b662      	cpsie	i
 8011806:	617b      	str	r3, [r7, #20]
 8011808:	e7fe      	b.n	8011808 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180c:	699a      	ldr	r2, [r3, #24]
 801180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011810:	18d1      	adds	r1, r2, r3
 8011812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011818:	f7ff ff04 	bl	8011624 <prvInsertTimerInActiveList>
					break;
 801181c:	e015      	b.n	801184a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011824:	f003 0302 	and.w	r3, r3, #2
 8011828:	2b00      	cmp	r3, #0
 801182a:	d103      	bne.n	8011834 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801182c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801182e:	f000 fbb5 	bl	8011f9c <vPortFree>
 8011832:	e00a      	b.n	801184a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801183a:	f023 0301 	bic.w	r3, r3, #1
 801183e:	b2da      	uxtb	r2, r3
 8011840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011846:	e000      	b.n	801184a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801184a:	4b07      	ldr	r3, [pc, #28]	; (8011868 <prvProcessReceivedCommands+0x1c0>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	1d39      	adds	r1, r7, #4
 8011850:	2200      	movs	r2, #0
 8011852:	4618      	mov	r0, r3
 8011854:	f7fe fa7c 	bl	800fd50 <xQueueReceive>
 8011858:	4603      	mov	r3, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	f47f af28 	bne.w	80116b0 <prvProcessReceivedCommands+0x8>
	}
}
 8011860:	bf00      	nop
 8011862:	3730      	adds	r7, #48	; 0x30
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	20003f70 	.word	0x20003f70

0801186c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b088      	sub	sp, #32
 8011870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011872:	e049      	b.n	8011908 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011874:	4b2e      	ldr	r3, [pc, #184]	; (8011930 <prvSwitchTimerLists+0xc4>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801187e:	4b2c      	ldr	r3, [pc, #176]	; (8011930 <prvSwitchTimerLists+0xc4>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	68db      	ldr	r3, [r3, #12]
 8011884:	68db      	ldr	r3, [r3, #12]
 8011886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	3304      	adds	r3, #4
 801188c:	4618      	mov	r0, r3
 801188e:	f7fd ff8d 	bl	800f7ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6a1b      	ldr	r3, [r3, #32]
 8011896:	68f8      	ldr	r0, [r7, #12]
 8011898:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118a0:	f003 0304 	and.w	r3, r3, #4
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d02f      	beq.n	8011908 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	699b      	ldr	r3, [r3, #24]
 80118ac:	693a      	ldr	r2, [r7, #16]
 80118ae:	4413      	add	r3, r2
 80118b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80118b2:	68ba      	ldr	r2, [r7, #8]
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d90e      	bls.n	80118d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	68ba      	ldr	r2, [r7, #8]
 80118be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80118c6:	4b1a      	ldr	r3, [pc, #104]	; (8011930 <prvSwitchTimerLists+0xc4>)
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	3304      	adds	r3, #4
 80118ce:	4619      	mov	r1, r3
 80118d0:	4610      	mov	r0, r2
 80118d2:	f7fd ff32 	bl	800f73a <vListInsert>
 80118d6:	e017      	b.n	8011908 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80118d8:	2300      	movs	r3, #0
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	2300      	movs	r3, #0
 80118de:	693a      	ldr	r2, [r7, #16]
 80118e0:	2100      	movs	r1, #0
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7ff fd5e 	bl	80113a4 <xTimerGenericCommand>
 80118e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d10b      	bne.n	8011908 <prvSwitchTimerLists+0x9c>
 80118f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f4:	b672      	cpsid	i
 80118f6:	f383 8811 	msr	BASEPRI, r3
 80118fa:	f3bf 8f6f 	isb	sy
 80118fe:	f3bf 8f4f 	dsb	sy
 8011902:	b662      	cpsie	i
 8011904:	603b      	str	r3, [r7, #0]
 8011906:	e7fe      	b.n	8011906 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011908:	4b09      	ldr	r3, [pc, #36]	; (8011930 <prvSwitchTimerLists+0xc4>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d1b0      	bne.n	8011874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011912:	4b07      	ldr	r3, [pc, #28]	; (8011930 <prvSwitchTimerLists+0xc4>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011918:	4b06      	ldr	r3, [pc, #24]	; (8011934 <prvSwitchTimerLists+0xc8>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4a04      	ldr	r2, [pc, #16]	; (8011930 <prvSwitchTimerLists+0xc4>)
 801191e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011920:	4a04      	ldr	r2, [pc, #16]	; (8011934 <prvSwitchTimerLists+0xc8>)
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	6013      	str	r3, [r2, #0]
}
 8011926:	bf00      	nop
 8011928:	3718      	adds	r7, #24
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	20003f68 	.word	0x20003f68
 8011934:	20003f6c 	.word	0x20003f6c

08011938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801193e:	f000 f943 	bl	8011bc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011942:	4b15      	ldr	r3, [pc, #84]	; (8011998 <prvCheckForValidListAndQueue+0x60>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d120      	bne.n	801198c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801194a:	4814      	ldr	r0, [pc, #80]	; (801199c <prvCheckForValidListAndQueue+0x64>)
 801194c:	f7fd fea4 	bl	800f698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011950:	4813      	ldr	r0, [pc, #76]	; (80119a0 <prvCheckForValidListAndQueue+0x68>)
 8011952:	f7fd fea1 	bl	800f698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011956:	4b13      	ldr	r3, [pc, #76]	; (80119a4 <prvCheckForValidListAndQueue+0x6c>)
 8011958:	4a10      	ldr	r2, [pc, #64]	; (801199c <prvCheckForValidListAndQueue+0x64>)
 801195a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801195c:	4b12      	ldr	r3, [pc, #72]	; (80119a8 <prvCheckForValidListAndQueue+0x70>)
 801195e:	4a10      	ldr	r2, [pc, #64]	; (80119a0 <prvCheckForValidListAndQueue+0x68>)
 8011960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011962:	2300      	movs	r3, #0
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	4b11      	ldr	r3, [pc, #68]	; (80119ac <prvCheckForValidListAndQueue+0x74>)
 8011968:	4a11      	ldr	r2, [pc, #68]	; (80119b0 <prvCheckForValidListAndQueue+0x78>)
 801196a:	2110      	movs	r1, #16
 801196c:	200a      	movs	r0, #10
 801196e:	f7fd ffb1 	bl	800f8d4 <xQueueGenericCreateStatic>
 8011972:	4602      	mov	r2, r0
 8011974:	4b08      	ldr	r3, [pc, #32]	; (8011998 <prvCheckForValidListAndQueue+0x60>)
 8011976:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011978:	4b07      	ldr	r3, [pc, #28]	; (8011998 <prvCheckForValidListAndQueue+0x60>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d005      	beq.n	801198c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011980:	4b05      	ldr	r3, [pc, #20]	; (8011998 <prvCheckForValidListAndQueue+0x60>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	490b      	ldr	r1, [pc, #44]	; (80119b4 <prvCheckForValidListAndQueue+0x7c>)
 8011986:	4618      	mov	r0, r3
 8011988:	f7fe fbd4 	bl	8010134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801198c:	f000 f94e 	bl	8011c2c <vPortExitCritical>
}
 8011990:	bf00      	nop
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	20003f70 	.word	0x20003f70
 801199c:	20003f40 	.word	0x20003f40
 80119a0:	20003f54 	.word	0x20003f54
 80119a4:	20003f68 	.word	0x20003f68
 80119a8:	20003f6c 	.word	0x20003f6c
 80119ac:	2000401c 	.word	0x2000401c
 80119b0:	20003f7c 	.word	0x20003f7c
 80119b4:	08016950 	.word	0x08016950

080119b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80119b8:	b480      	push	{r7}
 80119ba:	b085      	sub	sp, #20
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	3b04      	subs	r3, #4
 80119c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80119d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	3b04      	subs	r3, #4
 80119d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	f023 0201 	bic.w	r2, r3, #1
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	3b04      	subs	r3, #4
 80119e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80119e8:	4a0c      	ldr	r2, [pc, #48]	; (8011a1c <pxPortInitialiseStack+0x64>)
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	3b14      	subs	r3, #20
 80119f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	3b04      	subs	r3, #4
 80119fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f06f 0202 	mvn.w	r2, #2
 8011a06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	3b20      	subs	r3, #32
 8011a0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3714      	adds	r7, #20
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr
 8011a1c:	08011a21 	.word	0x08011a21

08011a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011a20:	b480      	push	{r7}
 8011a22:	b085      	sub	sp, #20
 8011a24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011a2a:	4b13      	ldr	r3, [pc, #76]	; (8011a78 <prvTaskExitError+0x58>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a32:	d00b      	beq.n	8011a4c <prvTaskExitError+0x2c>
 8011a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a38:	b672      	cpsid	i
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	b662      	cpsie	i
 8011a48:	60fb      	str	r3, [r7, #12]
 8011a4a:	e7fe      	b.n	8011a4a <prvTaskExitError+0x2a>
 8011a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a50:	b672      	cpsid	i
 8011a52:	f383 8811 	msr	BASEPRI, r3
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	f3bf 8f4f 	dsb	sy
 8011a5e:	b662      	cpsie	i
 8011a60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011a62:	bf00      	nop
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d0fc      	beq.n	8011a64 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011a6a:	bf00      	nop
 8011a6c:	3714      	adds	r7, #20
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	200001b4 	.word	0x200001b4
 8011a7c:	00000000 	.word	0x00000000

08011a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011a80:	4b07      	ldr	r3, [pc, #28]	; (8011aa0 <pxCurrentTCBConst2>)
 8011a82:	6819      	ldr	r1, [r3, #0]
 8011a84:	6808      	ldr	r0, [r1, #0]
 8011a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8a:	f380 8809 	msr	PSP, r0
 8011a8e:	f3bf 8f6f 	isb	sy
 8011a92:	f04f 0000 	mov.w	r0, #0
 8011a96:	f380 8811 	msr	BASEPRI, r0
 8011a9a:	4770      	bx	lr
 8011a9c:	f3af 8000 	nop.w

08011aa0 <pxCurrentTCBConst2>:
 8011aa0:	20003a40 	.word	0x20003a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011aa4:	bf00      	nop
 8011aa6:	bf00      	nop

08011aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011aa8:	4808      	ldr	r0, [pc, #32]	; (8011acc <prvPortStartFirstTask+0x24>)
 8011aaa:	6800      	ldr	r0, [r0, #0]
 8011aac:	6800      	ldr	r0, [r0, #0]
 8011aae:	f380 8808 	msr	MSP, r0
 8011ab2:	f04f 0000 	mov.w	r0, #0
 8011ab6:	f380 8814 	msr	CONTROL, r0
 8011aba:	b662      	cpsie	i
 8011abc:	b661      	cpsie	f
 8011abe:	f3bf 8f4f 	dsb	sy
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	df00      	svc	0
 8011ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011aca:	bf00      	nop
 8011acc:	e000ed08 	.word	0xe000ed08

08011ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011ad6:	4b36      	ldr	r3, [pc, #216]	; (8011bb0 <xPortStartScheduler+0xe0>)
 8011ad8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	22ff      	movs	r2, #255	; 0xff
 8011ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011af0:	78fb      	ldrb	r3, [r7, #3]
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011af8:	b2da      	uxtb	r2, r3
 8011afa:	4b2e      	ldr	r3, [pc, #184]	; (8011bb4 <xPortStartScheduler+0xe4>)
 8011afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011afe:	4b2e      	ldr	r3, [pc, #184]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b00:	2207      	movs	r2, #7
 8011b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011b04:	e009      	b.n	8011b1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011b06:	4b2c      	ldr	r3, [pc, #176]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	4a2a      	ldr	r2, [pc, #168]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011b10:	78fb      	ldrb	r3, [r7, #3]
 8011b12:	b2db      	uxtb	r3, r3
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011b1a:	78fb      	ldrb	r3, [r7, #3]
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b22:	2b80      	cmp	r3, #128	; 0x80
 8011b24:	d0ef      	beq.n	8011b06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011b26:	4b24      	ldr	r3, [pc, #144]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f1c3 0307 	rsb	r3, r3, #7
 8011b2e:	2b04      	cmp	r3, #4
 8011b30:	d00b      	beq.n	8011b4a <xPortStartScheduler+0x7a>
 8011b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b36:	b672      	cpsid	i
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	b662      	cpsie	i
 8011b46:	60bb      	str	r3, [r7, #8]
 8011b48:	e7fe      	b.n	8011b48 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011b4a:	4b1b      	ldr	r3, [pc, #108]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	021b      	lsls	r3, r3, #8
 8011b50:	4a19      	ldr	r2, [pc, #100]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011b54:	4b18      	ldr	r3, [pc, #96]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011b5c:	4a16      	ldr	r2, [pc, #88]	; (8011bb8 <xPortStartScheduler+0xe8>)
 8011b5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011b68:	4b14      	ldr	r3, [pc, #80]	; (8011bbc <xPortStartScheduler+0xec>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	4a13      	ldr	r2, [pc, #76]	; (8011bbc <xPortStartScheduler+0xec>)
 8011b6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011b72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011b74:	4b11      	ldr	r3, [pc, #68]	; (8011bbc <xPortStartScheduler+0xec>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4a10      	ldr	r2, [pc, #64]	; (8011bbc <xPortStartScheduler+0xec>)
 8011b7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011b7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011b80:	f000 f8d4 	bl	8011d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011b84:	4b0e      	ldr	r3, [pc, #56]	; (8011bc0 <xPortStartScheduler+0xf0>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011b8a:	f000 f8f3 	bl	8011d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011b8e:	4b0d      	ldr	r3, [pc, #52]	; (8011bc4 <xPortStartScheduler+0xf4>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a0c      	ldr	r2, [pc, #48]	; (8011bc4 <xPortStartScheduler+0xf4>)
 8011b94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011b98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011b9a:	f7ff ff85 	bl	8011aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011b9e:	f7fe ff53 	bl	8010a48 <vTaskSwitchContext>
	prvTaskExitError();
 8011ba2:	f7ff ff3d 	bl	8011a20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3710      	adds	r7, #16
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	e000e400 	.word	0xe000e400
 8011bb4:	2000406c 	.word	0x2000406c
 8011bb8:	20004070 	.word	0x20004070
 8011bbc:	e000ed20 	.word	0xe000ed20
 8011bc0:	200001b4 	.word	0x200001b4
 8011bc4:	e000ef34 	.word	0xe000ef34

08011bc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd2:	b672      	cpsid	i
 8011bd4:	f383 8811 	msr	BASEPRI, r3
 8011bd8:	f3bf 8f6f 	isb	sy
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	b662      	cpsie	i
 8011be2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011be4:	4b0f      	ldr	r3, [pc, #60]	; (8011c24 <vPortEnterCritical+0x5c>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	3301      	adds	r3, #1
 8011bea:	4a0e      	ldr	r2, [pc, #56]	; (8011c24 <vPortEnterCritical+0x5c>)
 8011bec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011bee:	4b0d      	ldr	r3, [pc, #52]	; (8011c24 <vPortEnterCritical+0x5c>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d110      	bne.n	8011c18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011bf6:	4b0c      	ldr	r3, [pc, #48]	; (8011c28 <vPortEnterCritical+0x60>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	b2db      	uxtb	r3, r3
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00b      	beq.n	8011c18 <vPortEnterCritical+0x50>
 8011c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c04:	b672      	cpsid	i
 8011c06:	f383 8811 	msr	BASEPRI, r3
 8011c0a:	f3bf 8f6f 	isb	sy
 8011c0e:	f3bf 8f4f 	dsb	sy
 8011c12:	b662      	cpsie	i
 8011c14:	603b      	str	r3, [r7, #0]
 8011c16:	e7fe      	b.n	8011c16 <vPortEnterCritical+0x4e>
	}
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr
 8011c24:	200001b4 	.word	0x200001b4
 8011c28:	e000ed04 	.word	0xe000ed04

08011c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011c32:	4b12      	ldr	r3, [pc, #72]	; (8011c7c <vPortExitCritical+0x50>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d10b      	bne.n	8011c52 <vPortExitCritical+0x26>
 8011c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3e:	b672      	cpsid	i
 8011c40:	f383 8811 	msr	BASEPRI, r3
 8011c44:	f3bf 8f6f 	isb	sy
 8011c48:	f3bf 8f4f 	dsb	sy
 8011c4c:	b662      	cpsie	i
 8011c4e:	607b      	str	r3, [r7, #4]
 8011c50:	e7fe      	b.n	8011c50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8011c52:	4b0a      	ldr	r3, [pc, #40]	; (8011c7c <vPortExitCritical+0x50>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	3b01      	subs	r3, #1
 8011c58:	4a08      	ldr	r2, [pc, #32]	; (8011c7c <vPortExitCritical+0x50>)
 8011c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011c5c:	4b07      	ldr	r3, [pc, #28]	; (8011c7c <vPortExitCritical+0x50>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d104      	bne.n	8011c6e <vPortExitCritical+0x42>
 8011c64:	2300      	movs	r3, #0
 8011c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011c6e:	bf00      	nop
 8011c70:	370c      	adds	r7, #12
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	200001b4 	.word	0x200001b4

08011c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011c80:	f3ef 8009 	mrs	r0, PSP
 8011c84:	f3bf 8f6f 	isb	sy
 8011c88:	4b15      	ldr	r3, [pc, #84]	; (8011ce0 <pxCurrentTCBConst>)
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	f01e 0f10 	tst.w	lr, #16
 8011c90:	bf08      	it	eq
 8011c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9a:	6010      	str	r0, [r2, #0]
 8011c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ca4:	b672      	cpsid	i
 8011ca6:	f380 8811 	msr	BASEPRI, r0
 8011caa:	f3bf 8f4f 	dsb	sy
 8011cae:	f3bf 8f6f 	isb	sy
 8011cb2:	b662      	cpsie	i
 8011cb4:	f7fe fec8 	bl	8010a48 <vTaskSwitchContext>
 8011cb8:	f04f 0000 	mov.w	r0, #0
 8011cbc:	f380 8811 	msr	BASEPRI, r0
 8011cc0:	bc09      	pop	{r0, r3}
 8011cc2:	6819      	ldr	r1, [r3, #0]
 8011cc4:	6808      	ldr	r0, [r1, #0]
 8011cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cca:	f01e 0f10 	tst.w	lr, #16
 8011cce:	bf08      	it	eq
 8011cd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011cd4:	f380 8809 	msr	PSP, r0
 8011cd8:	f3bf 8f6f 	isb	sy
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop

08011ce0 <pxCurrentTCBConst>:
 8011ce0:	20003a40 	.word	0x20003a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011ce4:	bf00      	nop
 8011ce6:	bf00      	nop

08011ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
	__asm volatile
 8011cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf2:	b672      	cpsid	i
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	b662      	cpsie	i
 8011d02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011d04:	f7fe fde6 	bl	80108d4 <xTaskIncrementTick>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d003      	beq.n	8011d16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011d0e:	4b06      	ldr	r3, [pc, #24]	; (8011d28 <SysTick_Handler+0x40>)
 8011d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d14:	601a      	str	r2, [r3, #0]
 8011d16:	2300      	movs	r3, #0
 8011d18:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011d20:	bf00      	nop
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	e000ed04 	.word	0xe000ed04

08011d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011d30:	4b0b      	ldr	r3, [pc, #44]	; (8011d60 <vPortSetupTimerInterrupt+0x34>)
 8011d32:	2200      	movs	r2, #0
 8011d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011d36:	4b0b      	ldr	r3, [pc, #44]	; (8011d64 <vPortSetupTimerInterrupt+0x38>)
 8011d38:	2200      	movs	r2, #0
 8011d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011d3c:	4b0a      	ldr	r3, [pc, #40]	; (8011d68 <vPortSetupTimerInterrupt+0x3c>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4a0a      	ldr	r2, [pc, #40]	; (8011d6c <vPortSetupTimerInterrupt+0x40>)
 8011d42:	fba2 2303 	umull	r2, r3, r2, r3
 8011d46:	099b      	lsrs	r3, r3, #6
 8011d48:	4a09      	ldr	r2, [pc, #36]	; (8011d70 <vPortSetupTimerInterrupt+0x44>)
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011d4e:	4b04      	ldr	r3, [pc, #16]	; (8011d60 <vPortSetupTimerInterrupt+0x34>)
 8011d50:	2207      	movs	r2, #7
 8011d52:	601a      	str	r2, [r3, #0]
}
 8011d54:	bf00      	nop
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	e000e010 	.word	0xe000e010
 8011d64:	e000e018 	.word	0xe000e018
 8011d68:	200001a8 	.word	0x200001a8
 8011d6c:	10624dd3 	.word	0x10624dd3
 8011d70:	e000e014 	.word	0xe000e014

08011d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011d84 <vPortEnableVFP+0x10>
 8011d78:	6801      	ldr	r1, [r0, #0]
 8011d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011d7e:	6001      	str	r1, [r0, #0]
 8011d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011d82:	bf00      	nop
 8011d84:	e000ed88 	.word	0xe000ed88

08011d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011d88:	b480      	push	{r7}
 8011d8a:	b085      	sub	sp, #20
 8011d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011d8e:	f3ef 8305 	mrs	r3, IPSR
 8011d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2b0f      	cmp	r3, #15
 8011d98:	d915      	bls.n	8011dc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011d9a:	4a18      	ldr	r2, [pc, #96]	; (8011dfc <vPortValidateInterruptPriority+0x74>)
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	4413      	add	r3, r2
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011da4:	4b16      	ldr	r3, [pc, #88]	; (8011e00 <vPortValidateInterruptPriority+0x78>)
 8011da6:	781b      	ldrb	r3, [r3, #0]
 8011da8:	7afa      	ldrb	r2, [r7, #11]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d20b      	bcs.n	8011dc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db2:	b672      	cpsid	i
 8011db4:	f383 8811 	msr	BASEPRI, r3
 8011db8:	f3bf 8f6f 	isb	sy
 8011dbc:	f3bf 8f4f 	dsb	sy
 8011dc0:	b662      	cpsie	i
 8011dc2:	607b      	str	r3, [r7, #4]
 8011dc4:	e7fe      	b.n	8011dc4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011dc6:	4b0f      	ldr	r3, [pc, #60]	; (8011e04 <vPortValidateInterruptPriority+0x7c>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011dce:	4b0e      	ldr	r3, [pc, #56]	; (8011e08 <vPortValidateInterruptPriority+0x80>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d90b      	bls.n	8011dee <vPortValidateInterruptPriority+0x66>
 8011dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dda:	b672      	cpsid	i
 8011ddc:	f383 8811 	msr	BASEPRI, r3
 8011de0:	f3bf 8f6f 	isb	sy
 8011de4:	f3bf 8f4f 	dsb	sy
 8011de8:	b662      	cpsie	i
 8011dea:	603b      	str	r3, [r7, #0]
 8011dec:	e7fe      	b.n	8011dec <vPortValidateInterruptPriority+0x64>
	}
 8011dee:	bf00      	nop
 8011df0:	3714      	adds	r7, #20
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	e000e3f0 	.word	0xe000e3f0
 8011e00:	2000406c 	.word	0x2000406c
 8011e04:	e000ed0c 	.word	0xe000ed0c
 8011e08:	20004070 	.word	0x20004070

08011e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b08a      	sub	sp, #40	; 0x28
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011e14:	2300      	movs	r3, #0
 8011e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011e18:	f7fe fca0 	bl	801075c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011e1c:	4b5a      	ldr	r3, [pc, #360]	; (8011f88 <pvPortMalloc+0x17c>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d101      	bne.n	8011e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011e24:	f000 f916 	bl	8012054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011e28:	4b58      	ldr	r3, [pc, #352]	; (8011f8c <pvPortMalloc+0x180>)
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	4013      	ands	r3, r2
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f040 8090 	bne.w	8011f56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d01e      	beq.n	8011e7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011e3c:	2208      	movs	r2, #8
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4413      	add	r3, r2
 8011e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f003 0307 	and.w	r3, r3, #7
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d015      	beq.n	8011e7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f023 0307 	bic.w	r3, r3, #7
 8011e54:	3308      	adds	r3, #8
 8011e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f003 0307 	and.w	r3, r3, #7
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d00b      	beq.n	8011e7a <pvPortMalloc+0x6e>
 8011e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e66:	b672      	cpsid	i
 8011e68:	f383 8811 	msr	BASEPRI, r3
 8011e6c:	f3bf 8f6f 	isb	sy
 8011e70:	f3bf 8f4f 	dsb	sy
 8011e74:	b662      	cpsie	i
 8011e76:	617b      	str	r3, [r7, #20]
 8011e78:	e7fe      	b.n	8011e78 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d06a      	beq.n	8011f56 <pvPortMalloc+0x14a>
 8011e80:	4b43      	ldr	r3, [pc, #268]	; (8011f90 <pvPortMalloc+0x184>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d865      	bhi.n	8011f56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011e8a:	4b42      	ldr	r3, [pc, #264]	; (8011f94 <pvPortMalloc+0x188>)
 8011e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011e8e:	4b41      	ldr	r3, [pc, #260]	; (8011f94 <pvPortMalloc+0x188>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011e94:	e004      	b.n	8011ea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d903      	bls.n	8011eb2 <pvPortMalloc+0xa6>
 8011eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1f1      	bne.n	8011e96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011eb2:	4b35      	ldr	r3, [pc, #212]	; (8011f88 <pvPortMalloc+0x17c>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d04c      	beq.n	8011f56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011ebc:	6a3b      	ldr	r3, [r7, #32]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	2208      	movs	r2, #8
 8011ec2:	4413      	add	r3, r2
 8011ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	6a3b      	ldr	r3, [r7, #32]
 8011ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed0:	685a      	ldr	r2, [r3, #4]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	1ad2      	subs	r2, r2, r3
 8011ed6:	2308      	movs	r3, #8
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d920      	bls.n	8011f20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	f003 0307 	and.w	r3, r3, #7
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d00b      	beq.n	8011f08 <pvPortMalloc+0xfc>
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	b672      	cpsid	i
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	b662      	cpsie	i
 8011f04:	613b      	str	r3, [r7, #16]
 8011f06:	e7fe      	b.n	8011f06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	1ad2      	subs	r2, r2, r3
 8011f10:	69bb      	ldr	r3, [r7, #24]
 8011f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f16:	687a      	ldr	r2, [r7, #4]
 8011f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011f1a:	69b8      	ldr	r0, [r7, #24]
 8011f1c:	f000 f8fe 	bl	801211c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011f20:	4b1b      	ldr	r3, [pc, #108]	; (8011f90 <pvPortMalloc+0x184>)
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	4a19      	ldr	r2, [pc, #100]	; (8011f90 <pvPortMalloc+0x184>)
 8011f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011f2e:	4b18      	ldr	r3, [pc, #96]	; (8011f90 <pvPortMalloc+0x184>)
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	4b19      	ldr	r3, [pc, #100]	; (8011f98 <pvPortMalloc+0x18c>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d203      	bcs.n	8011f42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011f3a:	4b15      	ldr	r3, [pc, #84]	; (8011f90 <pvPortMalloc+0x184>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a16      	ldr	r2, [pc, #88]	; (8011f98 <pvPortMalloc+0x18c>)
 8011f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f44:	685a      	ldr	r2, [r3, #4]
 8011f46:	4b11      	ldr	r3, [pc, #68]	; (8011f8c <pvPortMalloc+0x180>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	431a      	orrs	r2, r3
 8011f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f52:	2200      	movs	r2, #0
 8011f54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011f56:	f7fe fc0f 	bl	8010778 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	f003 0307 	and.w	r3, r3, #7
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00b      	beq.n	8011f7c <pvPortMalloc+0x170>
 8011f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f68:	b672      	cpsid	i
 8011f6a:	f383 8811 	msr	BASEPRI, r3
 8011f6e:	f3bf 8f6f 	isb	sy
 8011f72:	f3bf 8f4f 	dsb	sy
 8011f76:	b662      	cpsie	i
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	e7fe      	b.n	8011f7a <pvPortMalloc+0x16e>
	return pvReturn;
 8011f7c:	69fb      	ldr	r3, [r7, #28]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3728      	adds	r7, #40	; 0x28
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	20028a6c 	.word	0x20028a6c
 8011f8c:	20028a78 	.word	0x20028a78
 8011f90:	20028a70 	.word	0x20028a70
 8011f94:	20028a64 	.word	0x20028a64
 8011f98:	20028a74 	.word	0x20028a74

08011f9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d04a      	beq.n	8012044 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011fae:	2308      	movs	r3, #8
 8011fb0:	425b      	negs	r3, r3
 8011fb2:	697a      	ldr	r2, [r7, #20]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	685a      	ldr	r2, [r3, #4]
 8011fc0:	4b22      	ldr	r3, [pc, #136]	; (801204c <vPortFree+0xb0>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4013      	ands	r3, r2
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10b      	bne.n	8011fe2 <vPortFree+0x46>
 8011fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fce:	b672      	cpsid	i
 8011fd0:	f383 8811 	msr	BASEPRI, r3
 8011fd4:	f3bf 8f6f 	isb	sy
 8011fd8:	f3bf 8f4f 	dsb	sy
 8011fdc:	b662      	cpsie	i
 8011fde:	60fb      	str	r3, [r7, #12]
 8011fe0:	e7fe      	b.n	8011fe0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d00b      	beq.n	8012002 <vPortFree+0x66>
 8011fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fee:	b672      	cpsid	i
 8011ff0:	f383 8811 	msr	BASEPRI, r3
 8011ff4:	f3bf 8f6f 	isb	sy
 8011ff8:	f3bf 8f4f 	dsb	sy
 8011ffc:	b662      	cpsie	i
 8011ffe:	60bb      	str	r3, [r7, #8]
 8012000:	e7fe      	b.n	8012000 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	685a      	ldr	r2, [r3, #4]
 8012006:	4b11      	ldr	r3, [pc, #68]	; (801204c <vPortFree+0xb0>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4013      	ands	r3, r2
 801200c:	2b00      	cmp	r3, #0
 801200e:	d019      	beq.n	8012044 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d115      	bne.n	8012044 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	685a      	ldr	r2, [r3, #4]
 801201c:	4b0b      	ldr	r3, [pc, #44]	; (801204c <vPortFree+0xb0>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	43db      	mvns	r3, r3
 8012022:	401a      	ands	r2, r3
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012028:	f7fe fb98 	bl	801075c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	685a      	ldr	r2, [r3, #4]
 8012030:	4b07      	ldr	r3, [pc, #28]	; (8012050 <vPortFree+0xb4>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4413      	add	r3, r2
 8012036:	4a06      	ldr	r2, [pc, #24]	; (8012050 <vPortFree+0xb4>)
 8012038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801203a:	6938      	ldr	r0, [r7, #16]
 801203c:	f000 f86e 	bl	801211c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012040:	f7fe fb9a 	bl	8010778 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012044:	bf00      	nop
 8012046:	3718      	adds	r7, #24
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20028a78 	.word	0x20028a78
 8012050:	20028a70 	.word	0x20028a70

08012054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012054:	b480      	push	{r7}
 8012056:	b085      	sub	sp, #20
 8012058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801205a:	4b29      	ldr	r3, [pc, #164]	; (8012100 <prvHeapInit+0xac>)
 801205c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801205e:	4b29      	ldr	r3, [pc, #164]	; (8012104 <prvHeapInit+0xb0>)
 8012060:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f003 0307 	and.w	r3, r3, #7
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00c      	beq.n	8012086 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	3307      	adds	r3, #7
 8012070:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f023 0307 	bic.w	r3, r3, #7
 8012078:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801207a:	68ba      	ldr	r2, [r7, #8]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	1ad3      	subs	r3, r2, r3
 8012080:	4a20      	ldr	r2, [pc, #128]	; (8012104 <prvHeapInit+0xb0>)
 8012082:	4413      	add	r3, r2
 8012084:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801208a:	4a1f      	ldr	r2, [pc, #124]	; (8012108 <prvHeapInit+0xb4>)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012090:	4b1d      	ldr	r3, [pc, #116]	; (8012108 <prvHeapInit+0xb4>)
 8012092:	2200      	movs	r2, #0
 8012094:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	4413      	add	r3, r2
 801209c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801209e:	2208      	movs	r2, #8
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	1a9b      	subs	r3, r3, r2
 80120a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	f023 0307 	bic.w	r3, r3, #7
 80120ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	4a16      	ldr	r2, [pc, #88]	; (801210c <prvHeapInit+0xb8>)
 80120b2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80120b4:	4b15      	ldr	r3, [pc, #84]	; (801210c <prvHeapInit+0xb8>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2200      	movs	r2, #0
 80120ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80120bc:	4b13      	ldr	r3, [pc, #76]	; (801210c <prvHeapInit+0xb8>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	2200      	movs	r2, #0
 80120c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	68fa      	ldr	r2, [r7, #12]
 80120cc:	1ad2      	subs	r2, r2, r3
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80120d2:	4b0e      	ldr	r3, [pc, #56]	; (801210c <prvHeapInit+0xb8>)
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	4a0c      	ldr	r2, [pc, #48]	; (8012110 <prvHeapInit+0xbc>)
 80120e0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	4a0b      	ldr	r2, [pc, #44]	; (8012114 <prvHeapInit+0xc0>)
 80120e8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80120ea:	4b0b      	ldr	r3, [pc, #44]	; (8012118 <prvHeapInit+0xc4>)
 80120ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80120f0:	601a      	str	r2, [r3, #0]
}
 80120f2:	bf00      	nop
 80120f4:	3714      	adds	r7, #20
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	000249f0 	.word	0x000249f0
 8012104:	20004074 	.word	0x20004074
 8012108:	20028a64 	.word	0x20028a64
 801210c:	20028a6c 	.word	0x20028a6c
 8012110:	20028a74 	.word	0x20028a74
 8012114:	20028a70 	.word	0x20028a70
 8012118:	20028a78 	.word	0x20028a78

0801211c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801211c:	b480      	push	{r7}
 801211e:	b085      	sub	sp, #20
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012124:	4b28      	ldr	r3, [pc, #160]	; (80121c8 <prvInsertBlockIntoFreeList+0xac>)
 8012126:	60fb      	str	r3, [r7, #12]
 8012128:	e002      	b.n	8012130 <prvInsertBlockIntoFreeList+0x14>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	60fb      	str	r3, [r7, #12]
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	429a      	cmp	r2, r3
 8012138:	d8f7      	bhi.n	801212a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	4413      	add	r3, r2
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	429a      	cmp	r2, r3
 801214a:	d108      	bne.n	801215e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	685a      	ldr	r2, [r3, #4]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	441a      	add	r2, r3
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	68ba      	ldr	r2, [r7, #8]
 8012168:	441a      	add	r2, r3
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	429a      	cmp	r2, r3
 8012170:	d118      	bne.n	80121a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	4b15      	ldr	r3, [pc, #84]	; (80121cc <prvInsertBlockIntoFreeList+0xb0>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	429a      	cmp	r2, r3
 801217c:	d00d      	beq.n	801219a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	685a      	ldr	r2, [r3, #4]
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	441a      	add	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	681a      	ldr	r2, [r3, #0]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	e008      	b.n	80121ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801219a:	4b0c      	ldr	r3, [pc, #48]	; (80121cc <prvInsertBlockIntoFreeList+0xb0>)
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	601a      	str	r2, [r3, #0]
 80121a2:	e003      	b.n	80121ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80121ac:	68fa      	ldr	r2, [r7, #12]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d002      	beq.n	80121ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80121ba:	bf00      	nop
 80121bc:	3714      	adds	r7, #20
 80121be:	46bd      	mov	sp, r7
 80121c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop
 80121c8:	20028a64 	.word	0x20028a64
 80121cc:	20028a6c 	.word	0x20028a6c

080121d0 <__errno>:
 80121d0:	4b01      	ldr	r3, [pc, #4]	; (80121d8 <__errno+0x8>)
 80121d2:	6818      	ldr	r0, [r3, #0]
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop
 80121d8:	200001b8 	.word	0x200001b8

080121dc <__libc_init_array>:
 80121dc:	b570      	push	{r4, r5, r6, lr}
 80121de:	4e0d      	ldr	r6, [pc, #52]	; (8012214 <__libc_init_array+0x38>)
 80121e0:	4c0d      	ldr	r4, [pc, #52]	; (8012218 <__libc_init_array+0x3c>)
 80121e2:	1ba4      	subs	r4, r4, r6
 80121e4:	10a4      	asrs	r4, r4, #2
 80121e6:	2500      	movs	r5, #0
 80121e8:	42a5      	cmp	r5, r4
 80121ea:	d109      	bne.n	8012200 <__libc_init_array+0x24>
 80121ec:	4e0b      	ldr	r6, [pc, #44]	; (801221c <__libc_init_array+0x40>)
 80121ee:	4c0c      	ldr	r4, [pc, #48]	; (8012220 <__libc_init_array+0x44>)
 80121f0:	f004 f840 	bl	8016274 <_init>
 80121f4:	1ba4      	subs	r4, r4, r6
 80121f6:	10a4      	asrs	r4, r4, #2
 80121f8:	2500      	movs	r5, #0
 80121fa:	42a5      	cmp	r5, r4
 80121fc:	d105      	bne.n	801220a <__libc_init_array+0x2e>
 80121fe:	bd70      	pop	{r4, r5, r6, pc}
 8012200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012204:	4798      	blx	r3
 8012206:	3501      	adds	r5, #1
 8012208:	e7ee      	b.n	80121e8 <__libc_init_array+0xc>
 801220a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801220e:	4798      	blx	r3
 8012210:	3501      	adds	r5, #1
 8012212:	e7f2      	b.n	80121fa <__libc_init_array+0x1e>
 8012214:	08017460 	.word	0x08017460
 8012218:	08017460 	.word	0x08017460
 801221c:	08017460 	.word	0x08017460
 8012220:	08017464 	.word	0x08017464

08012224 <memcpy>:
 8012224:	b510      	push	{r4, lr}
 8012226:	1e43      	subs	r3, r0, #1
 8012228:	440a      	add	r2, r1
 801222a:	4291      	cmp	r1, r2
 801222c:	d100      	bne.n	8012230 <memcpy+0xc>
 801222e:	bd10      	pop	{r4, pc}
 8012230:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012238:	e7f7      	b.n	801222a <memcpy+0x6>

0801223a <memset>:
 801223a:	4402      	add	r2, r0
 801223c:	4603      	mov	r3, r0
 801223e:	4293      	cmp	r3, r2
 8012240:	d100      	bne.n	8012244 <memset+0xa>
 8012242:	4770      	bx	lr
 8012244:	f803 1b01 	strb.w	r1, [r3], #1
 8012248:	e7f9      	b.n	801223e <memset+0x4>

0801224a <__cvt>:
 801224a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801224c:	ed2d 8b02 	vpush	{d8}
 8012250:	eeb0 8b40 	vmov.f64	d8, d0
 8012254:	b085      	sub	sp, #20
 8012256:	4617      	mov	r7, r2
 8012258:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801225a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801225c:	ee18 2a90 	vmov	r2, s17
 8012260:	f025 0520 	bic.w	r5, r5, #32
 8012264:	2a00      	cmp	r2, #0
 8012266:	bfb6      	itet	lt
 8012268:	222d      	movlt	r2, #45	; 0x2d
 801226a:	2200      	movge	r2, #0
 801226c:	eeb1 8b40 	vneglt.f64	d8, d0
 8012270:	2d46      	cmp	r5, #70	; 0x46
 8012272:	460c      	mov	r4, r1
 8012274:	701a      	strb	r2, [r3, #0]
 8012276:	d004      	beq.n	8012282 <__cvt+0x38>
 8012278:	2d45      	cmp	r5, #69	; 0x45
 801227a:	d100      	bne.n	801227e <__cvt+0x34>
 801227c:	3401      	adds	r4, #1
 801227e:	2102      	movs	r1, #2
 8012280:	e000      	b.n	8012284 <__cvt+0x3a>
 8012282:	2103      	movs	r1, #3
 8012284:	ab03      	add	r3, sp, #12
 8012286:	9301      	str	r3, [sp, #4]
 8012288:	ab02      	add	r3, sp, #8
 801228a:	9300      	str	r3, [sp, #0]
 801228c:	4622      	mov	r2, r4
 801228e:	4633      	mov	r3, r6
 8012290:	eeb0 0b48 	vmov.f64	d0, d8
 8012294:	f001 fe44 	bl	8013f20 <_dtoa_r>
 8012298:	2d47      	cmp	r5, #71	; 0x47
 801229a:	d101      	bne.n	80122a0 <__cvt+0x56>
 801229c:	07fb      	lsls	r3, r7, #31
 801229e:	d51e      	bpl.n	80122de <__cvt+0x94>
 80122a0:	2d46      	cmp	r5, #70	; 0x46
 80122a2:	eb00 0304 	add.w	r3, r0, r4
 80122a6:	d10c      	bne.n	80122c2 <__cvt+0x78>
 80122a8:	7802      	ldrb	r2, [r0, #0]
 80122aa:	2a30      	cmp	r2, #48	; 0x30
 80122ac:	d107      	bne.n	80122be <__cvt+0x74>
 80122ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80122b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b6:	bf1c      	itt	ne
 80122b8:	f1c4 0401 	rsbne	r4, r4, #1
 80122bc:	6034      	strne	r4, [r6, #0]
 80122be:	6832      	ldr	r2, [r6, #0]
 80122c0:	4413      	add	r3, r2
 80122c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80122c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ca:	d007      	beq.n	80122dc <__cvt+0x92>
 80122cc:	2130      	movs	r1, #48	; 0x30
 80122ce:	9a03      	ldr	r2, [sp, #12]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d204      	bcs.n	80122de <__cvt+0x94>
 80122d4:	1c54      	adds	r4, r2, #1
 80122d6:	9403      	str	r4, [sp, #12]
 80122d8:	7011      	strb	r1, [r2, #0]
 80122da:	e7f8      	b.n	80122ce <__cvt+0x84>
 80122dc:	9303      	str	r3, [sp, #12]
 80122de:	9b03      	ldr	r3, [sp, #12]
 80122e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122e2:	1a1b      	subs	r3, r3, r0
 80122e4:	6013      	str	r3, [r2, #0]
 80122e6:	b005      	add	sp, #20
 80122e8:	ecbd 8b02 	vpop	{d8}
 80122ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080122ee <__exponent>:
 80122ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122f0:	2900      	cmp	r1, #0
 80122f2:	4604      	mov	r4, r0
 80122f4:	bfba      	itte	lt
 80122f6:	4249      	neglt	r1, r1
 80122f8:	232d      	movlt	r3, #45	; 0x2d
 80122fa:	232b      	movge	r3, #43	; 0x2b
 80122fc:	2909      	cmp	r1, #9
 80122fe:	f804 2b02 	strb.w	r2, [r4], #2
 8012302:	7043      	strb	r3, [r0, #1]
 8012304:	dd20      	ble.n	8012348 <__exponent+0x5a>
 8012306:	f10d 0307 	add.w	r3, sp, #7
 801230a:	461f      	mov	r7, r3
 801230c:	260a      	movs	r6, #10
 801230e:	fb91 f5f6 	sdiv	r5, r1, r6
 8012312:	fb06 1115 	mls	r1, r6, r5, r1
 8012316:	3130      	adds	r1, #48	; 0x30
 8012318:	2d09      	cmp	r5, #9
 801231a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801231e:	f103 32ff 	add.w	r2, r3, #4294967295
 8012322:	4629      	mov	r1, r5
 8012324:	dc09      	bgt.n	801233a <__exponent+0x4c>
 8012326:	3130      	adds	r1, #48	; 0x30
 8012328:	3b02      	subs	r3, #2
 801232a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801232e:	42bb      	cmp	r3, r7
 8012330:	4622      	mov	r2, r4
 8012332:	d304      	bcc.n	801233e <__exponent+0x50>
 8012334:	1a10      	subs	r0, r2, r0
 8012336:	b003      	add	sp, #12
 8012338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801233a:	4613      	mov	r3, r2
 801233c:	e7e7      	b.n	801230e <__exponent+0x20>
 801233e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012342:	f804 2b01 	strb.w	r2, [r4], #1
 8012346:	e7f2      	b.n	801232e <__exponent+0x40>
 8012348:	2330      	movs	r3, #48	; 0x30
 801234a:	4419      	add	r1, r3
 801234c:	7083      	strb	r3, [r0, #2]
 801234e:	1d02      	adds	r2, r0, #4
 8012350:	70c1      	strb	r1, [r0, #3]
 8012352:	e7ef      	b.n	8012334 <__exponent+0x46>
 8012354:	0000      	movs	r0, r0
	...

08012358 <_printf_float>:
 8012358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801235c:	b08d      	sub	sp, #52	; 0x34
 801235e:	460c      	mov	r4, r1
 8012360:	4616      	mov	r6, r2
 8012362:	461f      	mov	r7, r3
 8012364:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012368:	4605      	mov	r5, r0
 801236a:	f002 ffcb 	bl	8015304 <_localeconv_r>
 801236e:	f8d0 b000 	ldr.w	fp, [r0]
 8012372:	4658      	mov	r0, fp
 8012374:	f7ed ff64 	bl	8000240 <strlen>
 8012378:	2300      	movs	r3, #0
 801237a:	930a      	str	r3, [sp, #40]	; 0x28
 801237c:	f8d8 3000 	ldr.w	r3, [r8]
 8012380:	9005      	str	r0, [sp, #20]
 8012382:	3307      	adds	r3, #7
 8012384:	f023 0307 	bic.w	r3, r3, #7
 8012388:	f103 0108 	add.w	r1, r3, #8
 801238c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012390:	6822      	ldr	r2, [r4, #0]
 8012392:	f8c8 1000 	str.w	r1, [r8]
 8012396:	e9d3 0100 	ldrd	r0, r1, [r3]
 801239a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801239e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8012628 <_printf_float+0x2d0>
 80123a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80123a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80123aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80123ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b2:	dd24      	ble.n	80123fe <_printf_float+0xa6>
 80123b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80123b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123bc:	d502      	bpl.n	80123c4 <_printf_float+0x6c>
 80123be:	232d      	movs	r3, #45	; 0x2d
 80123c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123c4:	499a      	ldr	r1, [pc, #616]	; (8012630 <_printf_float+0x2d8>)
 80123c6:	4b9b      	ldr	r3, [pc, #620]	; (8012634 <_printf_float+0x2dc>)
 80123c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80123cc:	bf8c      	ite	hi
 80123ce:	4688      	movhi	r8, r1
 80123d0:	4698      	movls	r8, r3
 80123d2:	f022 0204 	bic.w	r2, r2, #4
 80123d6:	2303      	movs	r3, #3
 80123d8:	6123      	str	r3, [r4, #16]
 80123da:	6022      	str	r2, [r4, #0]
 80123dc:	f04f 0a00 	mov.w	sl, #0
 80123e0:	9700      	str	r7, [sp, #0]
 80123e2:	4633      	mov	r3, r6
 80123e4:	aa0b      	add	r2, sp, #44	; 0x2c
 80123e6:	4621      	mov	r1, r4
 80123e8:	4628      	mov	r0, r5
 80123ea:	f000 f9e1 	bl	80127b0 <_printf_common>
 80123ee:	3001      	adds	r0, #1
 80123f0:	f040 8089 	bne.w	8012506 <_printf_float+0x1ae>
 80123f4:	f04f 30ff 	mov.w	r0, #4294967295
 80123f8:	b00d      	add	sp, #52	; 0x34
 80123fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8012402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012406:	d702      	bvc.n	801240e <_printf_float+0xb6>
 8012408:	498b      	ldr	r1, [pc, #556]	; (8012638 <_printf_float+0x2e0>)
 801240a:	4b8c      	ldr	r3, [pc, #560]	; (801263c <_printf_float+0x2e4>)
 801240c:	e7dc      	b.n	80123c8 <_printf_float+0x70>
 801240e:	6861      	ldr	r1, [r4, #4]
 8012410:	1c4b      	adds	r3, r1, #1
 8012412:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012416:	ab0a      	add	r3, sp, #40	; 0x28
 8012418:	a809      	add	r0, sp, #36	; 0x24
 801241a:	d13b      	bne.n	8012494 <_printf_float+0x13c>
 801241c:	2106      	movs	r1, #6
 801241e:	6061      	str	r1, [r4, #4]
 8012420:	f04f 0c00 	mov.w	ip, #0
 8012424:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8012428:	e9cd 0900 	strd	r0, r9, [sp]
 801242c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012430:	6022      	str	r2, [r4, #0]
 8012432:	6861      	ldr	r1, [r4, #4]
 8012434:	4628      	mov	r0, r5
 8012436:	f7ff ff08 	bl	801224a <__cvt>
 801243a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801243e:	2b47      	cmp	r3, #71	; 0x47
 8012440:	4680      	mov	r8, r0
 8012442:	d109      	bne.n	8012458 <_printf_float+0x100>
 8012444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012446:	1cd8      	adds	r0, r3, #3
 8012448:	db02      	blt.n	8012450 <_printf_float+0xf8>
 801244a:	6862      	ldr	r2, [r4, #4]
 801244c:	4293      	cmp	r3, r2
 801244e:	dd47      	ble.n	80124e0 <_printf_float+0x188>
 8012450:	f1a9 0902 	sub.w	r9, r9, #2
 8012454:	fa5f f989 	uxtb.w	r9, r9
 8012458:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801245c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801245e:	d824      	bhi.n	80124aa <_printf_float+0x152>
 8012460:	3901      	subs	r1, #1
 8012462:	464a      	mov	r2, r9
 8012464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012468:	9109      	str	r1, [sp, #36]	; 0x24
 801246a:	f7ff ff40 	bl	80122ee <__exponent>
 801246e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012470:	1813      	adds	r3, r2, r0
 8012472:	2a01      	cmp	r2, #1
 8012474:	4682      	mov	sl, r0
 8012476:	6123      	str	r3, [r4, #16]
 8012478:	dc02      	bgt.n	8012480 <_printf_float+0x128>
 801247a:	6822      	ldr	r2, [r4, #0]
 801247c:	07d1      	lsls	r1, r2, #31
 801247e:	d501      	bpl.n	8012484 <_printf_float+0x12c>
 8012480:	3301      	adds	r3, #1
 8012482:	6123      	str	r3, [r4, #16]
 8012484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012488:	2b00      	cmp	r3, #0
 801248a:	d0a9      	beq.n	80123e0 <_printf_float+0x88>
 801248c:	232d      	movs	r3, #45	; 0x2d
 801248e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012492:	e7a5      	b.n	80123e0 <_printf_float+0x88>
 8012494:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8012498:	f000 8178 	beq.w	801278c <_printf_float+0x434>
 801249c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80124a0:	d1be      	bne.n	8012420 <_printf_float+0xc8>
 80124a2:	2900      	cmp	r1, #0
 80124a4:	d1bc      	bne.n	8012420 <_printf_float+0xc8>
 80124a6:	2101      	movs	r1, #1
 80124a8:	e7b9      	b.n	801241e <_printf_float+0xc6>
 80124aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80124ae:	d119      	bne.n	80124e4 <_printf_float+0x18c>
 80124b0:	2900      	cmp	r1, #0
 80124b2:	6863      	ldr	r3, [r4, #4]
 80124b4:	dd0c      	ble.n	80124d0 <_printf_float+0x178>
 80124b6:	6121      	str	r1, [r4, #16]
 80124b8:	b913      	cbnz	r3, 80124c0 <_printf_float+0x168>
 80124ba:	6822      	ldr	r2, [r4, #0]
 80124bc:	07d2      	lsls	r2, r2, #31
 80124be:	d502      	bpl.n	80124c6 <_printf_float+0x16e>
 80124c0:	3301      	adds	r3, #1
 80124c2:	440b      	add	r3, r1
 80124c4:	6123      	str	r3, [r4, #16]
 80124c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80124ca:	f04f 0a00 	mov.w	sl, #0
 80124ce:	e7d9      	b.n	8012484 <_printf_float+0x12c>
 80124d0:	b913      	cbnz	r3, 80124d8 <_printf_float+0x180>
 80124d2:	6822      	ldr	r2, [r4, #0]
 80124d4:	07d0      	lsls	r0, r2, #31
 80124d6:	d501      	bpl.n	80124dc <_printf_float+0x184>
 80124d8:	3302      	adds	r3, #2
 80124da:	e7f3      	b.n	80124c4 <_printf_float+0x16c>
 80124dc:	2301      	movs	r3, #1
 80124de:	e7f1      	b.n	80124c4 <_printf_float+0x16c>
 80124e0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80124e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80124e8:	4293      	cmp	r3, r2
 80124ea:	db05      	blt.n	80124f8 <_printf_float+0x1a0>
 80124ec:	6822      	ldr	r2, [r4, #0]
 80124ee:	6123      	str	r3, [r4, #16]
 80124f0:	07d1      	lsls	r1, r2, #31
 80124f2:	d5e8      	bpl.n	80124c6 <_printf_float+0x16e>
 80124f4:	3301      	adds	r3, #1
 80124f6:	e7e5      	b.n	80124c4 <_printf_float+0x16c>
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	bfd4      	ite	le
 80124fc:	f1c3 0302 	rsble	r3, r3, #2
 8012500:	2301      	movgt	r3, #1
 8012502:	4413      	add	r3, r2
 8012504:	e7de      	b.n	80124c4 <_printf_float+0x16c>
 8012506:	6823      	ldr	r3, [r4, #0]
 8012508:	055a      	lsls	r2, r3, #21
 801250a:	d407      	bmi.n	801251c <_printf_float+0x1c4>
 801250c:	6923      	ldr	r3, [r4, #16]
 801250e:	4642      	mov	r2, r8
 8012510:	4631      	mov	r1, r6
 8012512:	4628      	mov	r0, r5
 8012514:	47b8      	blx	r7
 8012516:	3001      	adds	r0, #1
 8012518:	d12a      	bne.n	8012570 <_printf_float+0x218>
 801251a:	e76b      	b.n	80123f4 <_printf_float+0x9c>
 801251c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012520:	f240 80de 	bls.w	80126e0 <_printf_float+0x388>
 8012524:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012528:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012530:	d133      	bne.n	801259a <_printf_float+0x242>
 8012532:	2301      	movs	r3, #1
 8012534:	4a42      	ldr	r2, [pc, #264]	; (8012640 <_printf_float+0x2e8>)
 8012536:	4631      	mov	r1, r6
 8012538:	4628      	mov	r0, r5
 801253a:	47b8      	blx	r7
 801253c:	3001      	adds	r0, #1
 801253e:	f43f af59 	beq.w	80123f4 <_printf_float+0x9c>
 8012542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012546:	429a      	cmp	r2, r3
 8012548:	db02      	blt.n	8012550 <_printf_float+0x1f8>
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	07d8      	lsls	r0, r3, #31
 801254e:	d50f      	bpl.n	8012570 <_printf_float+0x218>
 8012550:	9b05      	ldr	r3, [sp, #20]
 8012552:	465a      	mov	r2, fp
 8012554:	4631      	mov	r1, r6
 8012556:	4628      	mov	r0, r5
 8012558:	47b8      	blx	r7
 801255a:	3001      	adds	r0, #1
 801255c:	f43f af4a 	beq.w	80123f4 <_printf_float+0x9c>
 8012560:	f04f 0800 	mov.w	r8, #0
 8012564:	f104 091a 	add.w	r9, r4, #26
 8012568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801256a:	3b01      	subs	r3, #1
 801256c:	4543      	cmp	r3, r8
 801256e:	dc09      	bgt.n	8012584 <_printf_float+0x22c>
 8012570:	6823      	ldr	r3, [r4, #0]
 8012572:	079b      	lsls	r3, r3, #30
 8012574:	f100 8105 	bmi.w	8012782 <_printf_float+0x42a>
 8012578:	68e0      	ldr	r0, [r4, #12]
 801257a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801257c:	4298      	cmp	r0, r3
 801257e:	bfb8      	it	lt
 8012580:	4618      	movlt	r0, r3
 8012582:	e739      	b.n	80123f8 <_printf_float+0xa0>
 8012584:	2301      	movs	r3, #1
 8012586:	464a      	mov	r2, r9
 8012588:	4631      	mov	r1, r6
 801258a:	4628      	mov	r0, r5
 801258c:	47b8      	blx	r7
 801258e:	3001      	adds	r0, #1
 8012590:	f43f af30 	beq.w	80123f4 <_printf_float+0x9c>
 8012594:	f108 0801 	add.w	r8, r8, #1
 8012598:	e7e6      	b.n	8012568 <_printf_float+0x210>
 801259a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801259c:	2b00      	cmp	r3, #0
 801259e:	dc2b      	bgt.n	80125f8 <_printf_float+0x2a0>
 80125a0:	2301      	movs	r3, #1
 80125a2:	4a27      	ldr	r2, [pc, #156]	; (8012640 <_printf_float+0x2e8>)
 80125a4:	4631      	mov	r1, r6
 80125a6:	4628      	mov	r0, r5
 80125a8:	47b8      	blx	r7
 80125aa:	3001      	adds	r0, #1
 80125ac:	f43f af22 	beq.w	80123f4 <_printf_float+0x9c>
 80125b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b2:	b923      	cbnz	r3, 80125be <_printf_float+0x266>
 80125b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125b6:	b913      	cbnz	r3, 80125be <_printf_float+0x266>
 80125b8:	6823      	ldr	r3, [r4, #0]
 80125ba:	07d9      	lsls	r1, r3, #31
 80125bc:	d5d8      	bpl.n	8012570 <_printf_float+0x218>
 80125be:	9b05      	ldr	r3, [sp, #20]
 80125c0:	465a      	mov	r2, fp
 80125c2:	4631      	mov	r1, r6
 80125c4:	4628      	mov	r0, r5
 80125c6:	47b8      	blx	r7
 80125c8:	3001      	adds	r0, #1
 80125ca:	f43f af13 	beq.w	80123f4 <_printf_float+0x9c>
 80125ce:	f04f 0900 	mov.w	r9, #0
 80125d2:	f104 0a1a 	add.w	sl, r4, #26
 80125d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d8:	425b      	negs	r3, r3
 80125da:	454b      	cmp	r3, r9
 80125dc:	dc01      	bgt.n	80125e2 <_printf_float+0x28a>
 80125de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125e0:	e795      	b.n	801250e <_printf_float+0x1b6>
 80125e2:	2301      	movs	r3, #1
 80125e4:	4652      	mov	r2, sl
 80125e6:	4631      	mov	r1, r6
 80125e8:	4628      	mov	r0, r5
 80125ea:	47b8      	blx	r7
 80125ec:	3001      	adds	r0, #1
 80125ee:	f43f af01 	beq.w	80123f4 <_printf_float+0x9c>
 80125f2:	f109 0901 	add.w	r9, r9, #1
 80125f6:	e7ee      	b.n	80125d6 <_printf_float+0x27e>
 80125f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80125fc:	429a      	cmp	r2, r3
 80125fe:	bfa8      	it	ge
 8012600:	461a      	movge	r2, r3
 8012602:	2a00      	cmp	r2, #0
 8012604:	4691      	mov	r9, r2
 8012606:	dd07      	ble.n	8012618 <_printf_float+0x2c0>
 8012608:	4613      	mov	r3, r2
 801260a:	4631      	mov	r1, r6
 801260c:	4642      	mov	r2, r8
 801260e:	4628      	mov	r0, r5
 8012610:	47b8      	blx	r7
 8012612:	3001      	adds	r0, #1
 8012614:	f43f aeee 	beq.w	80123f4 <_printf_float+0x9c>
 8012618:	f104 031a 	add.w	r3, r4, #26
 801261c:	f04f 0a00 	mov.w	sl, #0
 8012620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012624:	9307      	str	r3, [sp, #28]
 8012626:	e017      	b.n	8012658 <_printf_float+0x300>
 8012628:	ffffffff 	.word	0xffffffff
 801262c:	7fefffff 	.word	0x7fefffff
 8012630:	08017140 	.word	0x08017140
 8012634:	0801713c 	.word	0x0801713c
 8012638:	08017148 	.word	0x08017148
 801263c:	08017144 	.word	0x08017144
 8012640:	0801714c 	.word	0x0801714c
 8012644:	2301      	movs	r3, #1
 8012646:	9a07      	ldr	r2, [sp, #28]
 8012648:	4631      	mov	r1, r6
 801264a:	4628      	mov	r0, r5
 801264c:	47b8      	blx	r7
 801264e:	3001      	adds	r0, #1
 8012650:	f43f aed0 	beq.w	80123f4 <_printf_float+0x9c>
 8012654:	f10a 0a01 	add.w	sl, sl, #1
 8012658:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801265a:	9306      	str	r3, [sp, #24]
 801265c:	eba3 0309 	sub.w	r3, r3, r9
 8012660:	4553      	cmp	r3, sl
 8012662:	dcef      	bgt.n	8012644 <_printf_float+0x2ec>
 8012664:	9b06      	ldr	r3, [sp, #24]
 8012666:	4498      	add	r8, r3
 8012668:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801266c:	429a      	cmp	r2, r3
 801266e:	db15      	blt.n	801269c <_printf_float+0x344>
 8012670:	6823      	ldr	r3, [r4, #0]
 8012672:	07da      	lsls	r2, r3, #31
 8012674:	d412      	bmi.n	801269c <_printf_float+0x344>
 8012676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012678:	9a06      	ldr	r2, [sp, #24]
 801267a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801267c:	1a9a      	subs	r2, r3, r2
 801267e:	eba3 0a01 	sub.w	sl, r3, r1
 8012682:	4592      	cmp	sl, r2
 8012684:	bfa8      	it	ge
 8012686:	4692      	movge	sl, r2
 8012688:	f1ba 0f00 	cmp.w	sl, #0
 801268c:	dc0e      	bgt.n	80126ac <_printf_float+0x354>
 801268e:	f04f 0800 	mov.w	r8, #0
 8012692:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012696:	f104 091a 	add.w	r9, r4, #26
 801269a:	e019      	b.n	80126d0 <_printf_float+0x378>
 801269c:	9b05      	ldr	r3, [sp, #20]
 801269e:	465a      	mov	r2, fp
 80126a0:	4631      	mov	r1, r6
 80126a2:	4628      	mov	r0, r5
 80126a4:	47b8      	blx	r7
 80126a6:	3001      	adds	r0, #1
 80126a8:	d1e5      	bne.n	8012676 <_printf_float+0x31e>
 80126aa:	e6a3      	b.n	80123f4 <_printf_float+0x9c>
 80126ac:	4653      	mov	r3, sl
 80126ae:	4642      	mov	r2, r8
 80126b0:	4631      	mov	r1, r6
 80126b2:	4628      	mov	r0, r5
 80126b4:	47b8      	blx	r7
 80126b6:	3001      	adds	r0, #1
 80126b8:	d1e9      	bne.n	801268e <_printf_float+0x336>
 80126ba:	e69b      	b.n	80123f4 <_printf_float+0x9c>
 80126bc:	2301      	movs	r3, #1
 80126be:	464a      	mov	r2, r9
 80126c0:	4631      	mov	r1, r6
 80126c2:	4628      	mov	r0, r5
 80126c4:	47b8      	blx	r7
 80126c6:	3001      	adds	r0, #1
 80126c8:	f43f ae94 	beq.w	80123f4 <_printf_float+0x9c>
 80126cc:	f108 0801 	add.w	r8, r8, #1
 80126d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126d4:	1a9b      	subs	r3, r3, r2
 80126d6:	eba3 030a 	sub.w	r3, r3, sl
 80126da:	4543      	cmp	r3, r8
 80126dc:	dcee      	bgt.n	80126bc <_printf_float+0x364>
 80126de:	e747      	b.n	8012570 <_printf_float+0x218>
 80126e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126e2:	2a01      	cmp	r2, #1
 80126e4:	dc01      	bgt.n	80126ea <_printf_float+0x392>
 80126e6:	07db      	lsls	r3, r3, #31
 80126e8:	d539      	bpl.n	801275e <_printf_float+0x406>
 80126ea:	2301      	movs	r3, #1
 80126ec:	4642      	mov	r2, r8
 80126ee:	4631      	mov	r1, r6
 80126f0:	4628      	mov	r0, r5
 80126f2:	47b8      	blx	r7
 80126f4:	3001      	adds	r0, #1
 80126f6:	f43f ae7d 	beq.w	80123f4 <_printf_float+0x9c>
 80126fa:	9b05      	ldr	r3, [sp, #20]
 80126fc:	465a      	mov	r2, fp
 80126fe:	4631      	mov	r1, r6
 8012700:	4628      	mov	r0, r5
 8012702:	47b8      	blx	r7
 8012704:	3001      	adds	r0, #1
 8012706:	f108 0801 	add.w	r8, r8, #1
 801270a:	f43f ae73 	beq.w	80123f4 <_printf_float+0x9c>
 801270e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012714:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801271c:	f103 33ff 	add.w	r3, r3, #4294967295
 8012720:	d018      	beq.n	8012754 <_printf_float+0x3fc>
 8012722:	4642      	mov	r2, r8
 8012724:	4631      	mov	r1, r6
 8012726:	4628      	mov	r0, r5
 8012728:	47b8      	blx	r7
 801272a:	3001      	adds	r0, #1
 801272c:	d10e      	bne.n	801274c <_printf_float+0x3f4>
 801272e:	e661      	b.n	80123f4 <_printf_float+0x9c>
 8012730:	2301      	movs	r3, #1
 8012732:	464a      	mov	r2, r9
 8012734:	4631      	mov	r1, r6
 8012736:	4628      	mov	r0, r5
 8012738:	47b8      	blx	r7
 801273a:	3001      	adds	r0, #1
 801273c:	f43f ae5a 	beq.w	80123f4 <_printf_float+0x9c>
 8012740:	f108 0801 	add.w	r8, r8, #1
 8012744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012746:	3b01      	subs	r3, #1
 8012748:	4543      	cmp	r3, r8
 801274a:	dcf1      	bgt.n	8012730 <_printf_float+0x3d8>
 801274c:	4653      	mov	r3, sl
 801274e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012752:	e6dd      	b.n	8012510 <_printf_float+0x1b8>
 8012754:	f04f 0800 	mov.w	r8, #0
 8012758:	f104 091a 	add.w	r9, r4, #26
 801275c:	e7f2      	b.n	8012744 <_printf_float+0x3ec>
 801275e:	2301      	movs	r3, #1
 8012760:	e7df      	b.n	8012722 <_printf_float+0x3ca>
 8012762:	2301      	movs	r3, #1
 8012764:	464a      	mov	r2, r9
 8012766:	4631      	mov	r1, r6
 8012768:	4628      	mov	r0, r5
 801276a:	47b8      	blx	r7
 801276c:	3001      	adds	r0, #1
 801276e:	f43f ae41 	beq.w	80123f4 <_printf_float+0x9c>
 8012772:	f108 0801 	add.w	r8, r8, #1
 8012776:	68e3      	ldr	r3, [r4, #12]
 8012778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801277a:	1a9b      	subs	r3, r3, r2
 801277c:	4543      	cmp	r3, r8
 801277e:	dcf0      	bgt.n	8012762 <_printf_float+0x40a>
 8012780:	e6fa      	b.n	8012578 <_printf_float+0x220>
 8012782:	f04f 0800 	mov.w	r8, #0
 8012786:	f104 0919 	add.w	r9, r4, #25
 801278a:	e7f4      	b.n	8012776 <_printf_float+0x41e>
 801278c:	2900      	cmp	r1, #0
 801278e:	f43f ae8a 	beq.w	80124a6 <_printf_float+0x14e>
 8012792:	f04f 0c00 	mov.w	ip, #0
 8012796:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801279a:	e9cd 0900 	strd	r0, r9, [sp]
 801279e:	6022      	str	r2, [r4, #0]
 80127a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127a4:	4628      	mov	r0, r5
 80127a6:	f7ff fd50 	bl	801224a <__cvt>
 80127aa:	4680      	mov	r8, r0
 80127ac:	e64a      	b.n	8012444 <_printf_float+0xec>
 80127ae:	bf00      	nop

080127b0 <_printf_common>:
 80127b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b4:	4691      	mov	r9, r2
 80127b6:	461f      	mov	r7, r3
 80127b8:	688a      	ldr	r2, [r1, #8]
 80127ba:	690b      	ldr	r3, [r1, #16]
 80127bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127c0:	4293      	cmp	r3, r2
 80127c2:	bfb8      	it	lt
 80127c4:	4613      	movlt	r3, r2
 80127c6:	f8c9 3000 	str.w	r3, [r9]
 80127ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127ce:	4606      	mov	r6, r0
 80127d0:	460c      	mov	r4, r1
 80127d2:	b112      	cbz	r2, 80127da <_printf_common+0x2a>
 80127d4:	3301      	adds	r3, #1
 80127d6:	f8c9 3000 	str.w	r3, [r9]
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	0699      	lsls	r1, r3, #26
 80127de:	bf42      	ittt	mi
 80127e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80127e4:	3302      	addmi	r3, #2
 80127e6:	f8c9 3000 	strmi.w	r3, [r9]
 80127ea:	6825      	ldr	r5, [r4, #0]
 80127ec:	f015 0506 	ands.w	r5, r5, #6
 80127f0:	d107      	bne.n	8012802 <_printf_common+0x52>
 80127f2:	f104 0a19 	add.w	sl, r4, #25
 80127f6:	68e3      	ldr	r3, [r4, #12]
 80127f8:	f8d9 2000 	ldr.w	r2, [r9]
 80127fc:	1a9b      	subs	r3, r3, r2
 80127fe:	42ab      	cmp	r3, r5
 8012800:	dc28      	bgt.n	8012854 <_printf_common+0xa4>
 8012802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012806:	6822      	ldr	r2, [r4, #0]
 8012808:	3300      	adds	r3, #0
 801280a:	bf18      	it	ne
 801280c:	2301      	movne	r3, #1
 801280e:	0692      	lsls	r2, r2, #26
 8012810:	d42d      	bmi.n	801286e <_printf_common+0xbe>
 8012812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012816:	4639      	mov	r1, r7
 8012818:	4630      	mov	r0, r6
 801281a:	47c0      	blx	r8
 801281c:	3001      	adds	r0, #1
 801281e:	d020      	beq.n	8012862 <_printf_common+0xb2>
 8012820:	6823      	ldr	r3, [r4, #0]
 8012822:	68e5      	ldr	r5, [r4, #12]
 8012824:	f8d9 2000 	ldr.w	r2, [r9]
 8012828:	f003 0306 	and.w	r3, r3, #6
 801282c:	2b04      	cmp	r3, #4
 801282e:	bf08      	it	eq
 8012830:	1aad      	subeq	r5, r5, r2
 8012832:	68a3      	ldr	r3, [r4, #8]
 8012834:	6922      	ldr	r2, [r4, #16]
 8012836:	bf0c      	ite	eq
 8012838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801283c:	2500      	movne	r5, #0
 801283e:	4293      	cmp	r3, r2
 8012840:	bfc4      	itt	gt
 8012842:	1a9b      	subgt	r3, r3, r2
 8012844:	18ed      	addgt	r5, r5, r3
 8012846:	f04f 0900 	mov.w	r9, #0
 801284a:	341a      	adds	r4, #26
 801284c:	454d      	cmp	r5, r9
 801284e:	d11a      	bne.n	8012886 <_printf_common+0xd6>
 8012850:	2000      	movs	r0, #0
 8012852:	e008      	b.n	8012866 <_printf_common+0xb6>
 8012854:	2301      	movs	r3, #1
 8012856:	4652      	mov	r2, sl
 8012858:	4639      	mov	r1, r7
 801285a:	4630      	mov	r0, r6
 801285c:	47c0      	blx	r8
 801285e:	3001      	adds	r0, #1
 8012860:	d103      	bne.n	801286a <_printf_common+0xba>
 8012862:	f04f 30ff 	mov.w	r0, #4294967295
 8012866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801286a:	3501      	adds	r5, #1
 801286c:	e7c3      	b.n	80127f6 <_printf_common+0x46>
 801286e:	18e1      	adds	r1, r4, r3
 8012870:	1c5a      	adds	r2, r3, #1
 8012872:	2030      	movs	r0, #48	; 0x30
 8012874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012878:	4422      	add	r2, r4
 801287a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801287e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012882:	3302      	adds	r3, #2
 8012884:	e7c5      	b.n	8012812 <_printf_common+0x62>
 8012886:	2301      	movs	r3, #1
 8012888:	4622      	mov	r2, r4
 801288a:	4639      	mov	r1, r7
 801288c:	4630      	mov	r0, r6
 801288e:	47c0      	blx	r8
 8012890:	3001      	adds	r0, #1
 8012892:	d0e6      	beq.n	8012862 <_printf_common+0xb2>
 8012894:	f109 0901 	add.w	r9, r9, #1
 8012898:	e7d8      	b.n	801284c <_printf_common+0x9c>
	...

0801289c <_printf_i>:
 801289c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80128a4:	460c      	mov	r4, r1
 80128a6:	7e09      	ldrb	r1, [r1, #24]
 80128a8:	b085      	sub	sp, #20
 80128aa:	296e      	cmp	r1, #110	; 0x6e
 80128ac:	4617      	mov	r7, r2
 80128ae:	4606      	mov	r6, r0
 80128b0:	4698      	mov	r8, r3
 80128b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128b4:	f000 80b3 	beq.w	8012a1e <_printf_i+0x182>
 80128b8:	d822      	bhi.n	8012900 <_printf_i+0x64>
 80128ba:	2963      	cmp	r1, #99	; 0x63
 80128bc:	d036      	beq.n	801292c <_printf_i+0x90>
 80128be:	d80a      	bhi.n	80128d6 <_printf_i+0x3a>
 80128c0:	2900      	cmp	r1, #0
 80128c2:	f000 80b9 	beq.w	8012a38 <_printf_i+0x19c>
 80128c6:	2958      	cmp	r1, #88	; 0x58
 80128c8:	f000 8083 	beq.w	80129d2 <_printf_i+0x136>
 80128cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80128d4:	e032      	b.n	801293c <_printf_i+0xa0>
 80128d6:	2964      	cmp	r1, #100	; 0x64
 80128d8:	d001      	beq.n	80128de <_printf_i+0x42>
 80128da:	2969      	cmp	r1, #105	; 0x69
 80128dc:	d1f6      	bne.n	80128cc <_printf_i+0x30>
 80128de:	6820      	ldr	r0, [r4, #0]
 80128e0:	6813      	ldr	r3, [r2, #0]
 80128e2:	0605      	lsls	r5, r0, #24
 80128e4:	f103 0104 	add.w	r1, r3, #4
 80128e8:	d52a      	bpl.n	8012940 <_printf_i+0xa4>
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	6011      	str	r1, [r2, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	da03      	bge.n	80128fa <_printf_i+0x5e>
 80128f2:	222d      	movs	r2, #45	; 0x2d
 80128f4:	425b      	negs	r3, r3
 80128f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80128fa:	486f      	ldr	r0, [pc, #444]	; (8012ab8 <_printf_i+0x21c>)
 80128fc:	220a      	movs	r2, #10
 80128fe:	e039      	b.n	8012974 <_printf_i+0xd8>
 8012900:	2973      	cmp	r1, #115	; 0x73
 8012902:	f000 809d 	beq.w	8012a40 <_printf_i+0x1a4>
 8012906:	d808      	bhi.n	801291a <_printf_i+0x7e>
 8012908:	296f      	cmp	r1, #111	; 0x6f
 801290a:	d020      	beq.n	801294e <_printf_i+0xb2>
 801290c:	2970      	cmp	r1, #112	; 0x70
 801290e:	d1dd      	bne.n	80128cc <_printf_i+0x30>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	f043 0320 	orr.w	r3, r3, #32
 8012916:	6023      	str	r3, [r4, #0]
 8012918:	e003      	b.n	8012922 <_printf_i+0x86>
 801291a:	2975      	cmp	r1, #117	; 0x75
 801291c:	d017      	beq.n	801294e <_printf_i+0xb2>
 801291e:	2978      	cmp	r1, #120	; 0x78
 8012920:	d1d4      	bne.n	80128cc <_printf_i+0x30>
 8012922:	2378      	movs	r3, #120	; 0x78
 8012924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012928:	4864      	ldr	r0, [pc, #400]	; (8012abc <_printf_i+0x220>)
 801292a:	e055      	b.n	80129d8 <_printf_i+0x13c>
 801292c:	6813      	ldr	r3, [r2, #0]
 801292e:	1d19      	adds	r1, r3, #4
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	6011      	str	r1, [r2, #0]
 8012934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801293c:	2301      	movs	r3, #1
 801293e:	e08c      	b.n	8012a5a <_printf_i+0x1be>
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	6011      	str	r1, [r2, #0]
 8012944:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012948:	bf18      	it	ne
 801294a:	b21b      	sxthne	r3, r3
 801294c:	e7cf      	b.n	80128ee <_printf_i+0x52>
 801294e:	6813      	ldr	r3, [r2, #0]
 8012950:	6825      	ldr	r5, [r4, #0]
 8012952:	1d18      	adds	r0, r3, #4
 8012954:	6010      	str	r0, [r2, #0]
 8012956:	0628      	lsls	r0, r5, #24
 8012958:	d501      	bpl.n	801295e <_printf_i+0xc2>
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	e002      	b.n	8012964 <_printf_i+0xc8>
 801295e:	0668      	lsls	r0, r5, #25
 8012960:	d5fb      	bpl.n	801295a <_printf_i+0xbe>
 8012962:	881b      	ldrh	r3, [r3, #0]
 8012964:	4854      	ldr	r0, [pc, #336]	; (8012ab8 <_printf_i+0x21c>)
 8012966:	296f      	cmp	r1, #111	; 0x6f
 8012968:	bf14      	ite	ne
 801296a:	220a      	movne	r2, #10
 801296c:	2208      	moveq	r2, #8
 801296e:	2100      	movs	r1, #0
 8012970:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012974:	6865      	ldr	r5, [r4, #4]
 8012976:	60a5      	str	r5, [r4, #8]
 8012978:	2d00      	cmp	r5, #0
 801297a:	f2c0 8095 	blt.w	8012aa8 <_printf_i+0x20c>
 801297e:	6821      	ldr	r1, [r4, #0]
 8012980:	f021 0104 	bic.w	r1, r1, #4
 8012984:	6021      	str	r1, [r4, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d13d      	bne.n	8012a06 <_printf_i+0x16a>
 801298a:	2d00      	cmp	r5, #0
 801298c:	f040 808e 	bne.w	8012aac <_printf_i+0x210>
 8012990:	4665      	mov	r5, ip
 8012992:	2a08      	cmp	r2, #8
 8012994:	d10b      	bne.n	80129ae <_printf_i+0x112>
 8012996:	6823      	ldr	r3, [r4, #0]
 8012998:	07db      	lsls	r3, r3, #31
 801299a:	d508      	bpl.n	80129ae <_printf_i+0x112>
 801299c:	6923      	ldr	r3, [r4, #16]
 801299e:	6862      	ldr	r2, [r4, #4]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	bfde      	ittt	le
 80129a4:	2330      	movle	r3, #48	; 0x30
 80129a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129ae:	ebac 0305 	sub.w	r3, ip, r5
 80129b2:	6123      	str	r3, [r4, #16]
 80129b4:	f8cd 8000 	str.w	r8, [sp]
 80129b8:	463b      	mov	r3, r7
 80129ba:	aa03      	add	r2, sp, #12
 80129bc:	4621      	mov	r1, r4
 80129be:	4630      	mov	r0, r6
 80129c0:	f7ff fef6 	bl	80127b0 <_printf_common>
 80129c4:	3001      	adds	r0, #1
 80129c6:	d14d      	bne.n	8012a64 <_printf_i+0x1c8>
 80129c8:	f04f 30ff 	mov.w	r0, #4294967295
 80129cc:	b005      	add	sp, #20
 80129ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129d2:	4839      	ldr	r0, [pc, #228]	; (8012ab8 <_printf_i+0x21c>)
 80129d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80129d8:	6813      	ldr	r3, [r2, #0]
 80129da:	6821      	ldr	r1, [r4, #0]
 80129dc:	1d1d      	adds	r5, r3, #4
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	6015      	str	r5, [r2, #0]
 80129e2:	060a      	lsls	r2, r1, #24
 80129e4:	d50b      	bpl.n	80129fe <_printf_i+0x162>
 80129e6:	07ca      	lsls	r2, r1, #31
 80129e8:	bf44      	itt	mi
 80129ea:	f041 0120 	orrmi.w	r1, r1, #32
 80129ee:	6021      	strmi	r1, [r4, #0]
 80129f0:	b91b      	cbnz	r3, 80129fa <_printf_i+0x15e>
 80129f2:	6822      	ldr	r2, [r4, #0]
 80129f4:	f022 0220 	bic.w	r2, r2, #32
 80129f8:	6022      	str	r2, [r4, #0]
 80129fa:	2210      	movs	r2, #16
 80129fc:	e7b7      	b.n	801296e <_printf_i+0xd2>
 80129fe:	064d      	lsls	r5, r1, #25
 8012a00:	bf48      	it	mi
 8012a02:	b29b      	uxthmi	r3, r3
 8012a04:	e7ef      	b.n	80129e6 <_printf_i+0x14a>
 8012a06:	4665      	mov	r5, ip
 8012a08:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a0c:	fb02 3311 	mls	r3, r2, r1, r3
 8012a10:	5cc3      	ldrb	r3, [r0, r3]
 8012a12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a16:	460b      	mov	r3, r1
 8012a18:	2900      	cmp	r1, #0
 8012a1a:	d1f5      	bne.n	8012a08 <_printf_i+0x16c>
 8012a1c:	e7b9      	b.n	8012992 <_printf_i+0xf6>
 8012a1e:	6813      	ldr	r3, [r2, #0]
 8012a20:	6825      	ldr	r5, [r4, #0]
 8012a22:	6961      	ldr	r1, [r4, #20]
 8012a24:	1d18      	adds	r0, r3, #4
 8012a26:	6010      	str	r0, [r2, #0]
 8012a28:	0628      	lsls	r0, r5, #24
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	d501      	bpl.n	8012a32 <_printf_i+0x196>
 8012a2e:	6019      	str	r1, [r3, #0]
 8012a30:	e002      	b.n	8012a38 <_printf_i+0x19c>
 8012a32:	066a      	lsls	r2, r5, #25
 8012a34:	d5fb      	bpl.n	8012a2e <_printf_i+0x192>
 8012a36:	8019      	strh	r1, [r3, #0]
 8012a38:	2300      	movs	r3, #0
 8012a3a:	6123      	str	r3, [r4, #16]
 8012a3c:	4665      	mov	r5, ip
 8012a3e:	e7b9      	b.n	80129b4 <_printf_i+0x118>
 8012a40:	6813      	ldr	r3, [r2, #0]
 8012a42:	1d19      	adds	r1, r3, #4
 8012a44:	6011      	str	r1, [r2, #0]
 8012a46:	681d      	ldr	r5, [r3, #0]
 8012a48:	6862      	ldr	r2, [r4, #4]
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	f7ed fbff 	bl	8000250 <memchr>
 8012a52:	b108      	cbz	r0, 8012a58 <_printf_i+0x1bc>
 8012a54:	1b40      	subs	r0, r0, r5
 8012a56:	6060      	str	r0, [r4, #4]
 8012a58:	6863      	ldr	r3, [r4, #4]
 8012a5a:	6123      	str	r3, [r4, #16]
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a62:	e7a7      	b.n	80129b4 <_printf_i+0x118>
 8012a64:	6923      	ldr	r3, [r4, #16]
 8012a66:	462a      	mov	r2, r5
 8012a68:	4639      	mov	r1, r7
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	47c0      	blx	r8
 8012a6e:	3001      	adds	r0, #1
 8012a70:	d0aa      	beq.n	80129c8 <_printf_i+0x12c>
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	079b      	lsls	r3, r3, #30
 8012a76:	d413      	bmi.n	8012aa0 <_printf_i+0x204>
 8012a78:	68e0      	ldr	r0, [r4, #12]
 8012a7a:	9b03      	ldr	r3, [sp, #12]
 8012a7c:	4298      	cmp	r0, r3
 8012a7e:	bfb8      	it	lt
 8012a80:	4618      	movlt	r0, r3
 8012a82:	e7a3      	b.n	80129cc <_printf_i+0x130>
 8012a84:	2301      	movs	r3, #1
 8012a86:	464a      	mov	r2, r9
 8012a88:	4639      	mov	r1, r7
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	47c0      	blx	r8
 8012a8e:	3001      	adds	r0, #1
 8012a90:	d09a      	beq.n	80129c8 <_printf_i+0x12c>
 8012a92:	3501      	adds	r5, #1
 8012a94:	68e3      	ldr	r3, [r4, #12]
 8012a96:	9a03      	ldr	r2, [sp, #12]
 8012a98:	1a9b      	subs	r3, r3, r2
 8012a9a:	42ab      	cmp	r3, r5
 8012a9c:	dcf2      	bgt.n	8012a84 <_printf_i+0x1e8>
 8012a9e:	e7eb      	b.n	8012a78 <_printf_i+0x1dc>
 8012aa0:	2500      	movs	r5, #0
 8012aa2:	f104 0919 	add.w	r9, r4, #25
 8012aa6:	e7f5      	b.n	8012a94 <_printf_i+0x1f8>
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d1ac      	bne.n	8012a06 <_printf_i+0x16a>
 8012aac:	7803      	ldrb	r3, [r0, #0]
 8012aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ab6:	e76c      	b.n	8012992 <_printf_i+0xf6>
 8012ab8:	0801714e 	.word	0x0801714e
 8012abc:	0801715f 	.word	0x0801715f

08012ac0 <_scanf_float>:
 8012ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac4:	469a      	mov	sl, r3
 8012ac6:	688b      	ldr	r3, [r1, #8]
 8012ac8:	4616      	mov	r6, r2
 8012aca:	1e5a      	subs	r2, r3, #1
 8012acc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012ad0:	b087      	sub	sp, #28
 8012ad2:	bf83      	ittte	hi
 8012ad4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012ad8:	189b      	addhi	r3, r3, r2
 8012ada:	9301      	strhi	r3, [sp, #4]
 8012adc:	2300      	movls	r3, #0
 8012ade:	bf86      	itte	hi
 8012ae0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012ae4:	608b      	strhi	r3, [r1, #8]
 8012ae6:	9301      	strls	r3, [sp, #4]
 8012ae8:	680b      	ldr	r3, [r1, #0]
 8012aea:	4688      	mov	r8, r1
 8012aec:	f04f 0b00 	mov.w	fp, #0
 8012af0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012af4:	f848 3b1c 	str.w	r3, [r8], #28
 8012af8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012afc:	4607      	mov	r7, r0
 8012afe:	460c      	mov	r4, r1
 8012b00:	4645      	mov	r5, r8
 8012b02:	465a      	mov	r2, fp
 8012b04:	46d9      	mov	r9, fp
 8012b06:	f8cd b008 	str.w	fp, [sp, #8]
 8012b0a:	68a1      	ldr	r1, [r4, #8]
 8012b0c:	b181      	cbz	r1, 8012b30 <_scanf_float+0x70>
 8012b0e:	6833      	ldr	r3, [r6, #0]
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	2b49      	cmp	r3, #73	; 0x49
 8012b14:	d071      	beq.n	8012bfa <_scanf_float+0x13a>
 8012b16:	d84d      	bhi.n	8012bb4 <_scanf_float+0xf4>
 8012b18:	2b39      	cmp	r3, #57	; 0x39
 8012b1a:	d840      	bhi.n	8012b9e <_scanf_float+0xde>
 8012b1c:	2b31      	cmp	r3, #49	; 0x31
 8012b1e:	f080 8088 	bcs.w	8012c32 <_scanf_float+0x172>
 8012b22:	2b2d      	cmp	r3, #45	; 0x2d
 8012b24:	f000 8090 	beq.w	8012c48 <_scanf_float+0x188>
 8012b28:	d815      	bhi.n	8012b56 <_scanf_float+0x96>
 8012b2a:	2b2b      	cmp	r3, #43	; 0x2b
 8012b2c:	f000 808c 	beq.w	8012c48 <_scanf_float+0x188>
 8012b30:	f1b9 0f00 	cmp.w	r9, #0
 8012b34:	d003      	beq.n	8012b3e <_scanf_float+0x7e>
 8012b36:	6823      	ldr	r3, [r4, #0]
 8012b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b3c:	6023      	str	r3, [r4, #0]
 8012b3e:	3a01      	subs	r2, #1
 8012b40:	2a01      	cmp	r2, #1
 8012b42:	f200 80ea 	bhi.w	8012d1a <_scanf_float+0x25a>
 8012b46:	4545      	cmp	r5, r8
 8012b48:	f200 80dc 	bhi.w	8012d04 <_scanf_float+0x244>
 8012b4c:	2601      	movs	r6, #1
 8012b4e:	4630      	mov	r0, r6
 8012b50:	b007      	add	sp, #28
 8012b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b56:	2b2e      	cmp	r3, #46	; 0x2e
 8012b58:	f000 809f 	beq.w	8012c9a <_scanf_float+0x1da>
 8012b5c:	2b30      	cmp	r3, #48	; 0x30
 8012b5e:	d1e7      	bne.n	8012b30 <_scanf_float+0x70>
 8012b60:	6820      	ldr	r0, [r4, #0]
 8012b62:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012b66:	d064      	beq.n	8012c32 <_scanf_float+0x172>
 8012b68:	9b01      	ldr	r3, [sp, #4]
 8012b6a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012b6e:	6020      	str	r0, [r4, #0]
 8012b70:	f109 0901 	add.w	r9, r9, #1
 8012b74:	b11b      	cbz	r3, 8012b7e <_scanf_float+0xbe>
 8012b76:	3b01      	subs	r3, #1
 8012b78:	3101      	adds	r1, #1
 8012b7a:	9301      	str	r3, [sp, #4]
 8012b7c:	60a1      	str	r1, [r4, #8]
 8012b7e:	68a3      	ldr	r3, [r4, #8]
 8012b80:	3b01      	subs	r3, #1
 8012b82:	60a3      	str	r3, [r4, #8]
 8012b84:	6923      	ldr	r3, [r4, #16]
 8012b86:	3301      	adds	r3, #1
 8012b88:	6123      	str	r3, [r4, #16]
 8012b8a:	6873      	ldr	r3, [r6, #4]
 8012b8c:	3b01      	subs	r3, #1
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	6073      	str	r3, [r6, #4]
 8012b92:	f340 80ac 	ble.w	8012cee <_scanf_float+0x22e>
 8012b96:	6833      	ldr	r3, [r6, #0]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	6033      	str	r3, [r6, #0]
 8012b9c:	e7b5      	b.n	8012b0a <_scanf_float+0x4a>
 8012b9e:	2b45      	cmp	r3, #69	; 0x45
 8012ba0:	f000 8085 	beq.w	8012cae <_scanf_float+0x1ee>
 8012ba4:	2b46      	cmp	r3, #70	; 0x46
 8012ba6:	d06a      	beq.n	8012c7e <_scanf_float+0x1be>
 8012ba8:	2b41      	cmp	r3, #65	; 0x41
 8012baa:	d1c1      	bne.n	8012b30 <_scanf_float+0x70>
 8012bac:	2a01      	cmp	r2, #1
 8012bae:	d1bf      	bne.n	8012b30 <_scanf_float+0x70>
 8012bb0:	2202      	movs	r2, #2
 8012bb2:	e046      	b.n	8012c42 <_scanf_float+0x182>
 8012bb4:	2b65      	cmp	r3, #101	; 0x65
 8012bb6:	d07a      	beq.n	8012cae <_scanf_float+0x1ee>
 8012bb8:	d818      	bhi.n	8012bec <_scanf_float+0x12c>
 8012bba:	2b54      	cmp	r3, #84	; 0x54
 8012bbc:	d066      	beq.n	8012c8c <_scanf_float+0x1cc>
 8012bbe:	d811      	bhi.n	8012be4 <_scanf_float+0x124>
 8012bc0:	2b4e      	cmp	r3, #78	; 0x4e
 8012bc2:	d1b5      	bne.n	8012b30 <_scanf_float+0x70>
 8012bc4:	2a00      	cmp	r2, #0
 8012bc6:	d146      	bne.n	8012c56 <_scanf_float+0x196>
 8012bc8:	f1b9 0f00 	cmp.w	r9, #0
 8012bcc:	d145      	bne.n	8012c5a <_scanf_float+0x19a>
 8012bce:	6821      	ldr	r1, [r4, #0]
 8012bd0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012bd4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012bd8:	d13f      	bne.n	8012c5a <_scanf_float+0x19a>
 8012bda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012bde:	6021      	str	r1, [r4, #0]
 8012be0:	2201      	movs	r2, #1
 8012be2:	e02e      	b.n	8012c42 <_scanf_float+0x182>
 8012be4:	2b59      	cmp	r3, #89	; 0x59
 8012be6:	d01e      	beq.n	8012c26 <_scanf_float+0x166>
 8012be8:	2b61      	cmp	r3, #97	; 0x61
 8012bea:	e7de      	b.n	8012baa <_scanf_float+0xea>
 8012bec:	2b6e      	cmp	r3, #110	; 0x6e
 8012bee:	d0e9      	beq.n	8012bc4 <_scanf_float+0x104>
 8012bf0:	d815      	bhi.n	8012c1e <_scanf_float+0x15e>
 8012bf2:	2b66      	cmp	r3, #102	; 0x66
 8012bf4:	d043      	beq.n	8012c7e <_scanf_float+0x1be>
 8012bf6:	2b69      	cmp	r3, #105	; 0x69
 8012bf8:	d19a      	bne.n	8012b30 <_scanf_float+0x70>
 8012bfa:	f1bb 0f00 	cmp.w	fp, #0
 8012bfe:	d138      	bne.n	8012c72 <_scanf_float+0x1b2>
 8012c00:	f1b9 0f00 	cmp.w	r9, #0
 8012c04:	d197      	bne.n	8012b36 <_scanf_float+0x76>
 8012c06:	6821      	ldr	r1, [r4, #0]
 8012c08:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012c0c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c10:	d195      	bne.n	8012b3e <_scanf_float+0x7e>
 8012c12:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c16:	6021      	str	r1, [r4, #0]
 8012c18:	f04f 0b01 	mov.w	fp, #1
 8012c1c:	e011      	b.n	8012c42 <_scanf_float+0x182>
 8012c1e:	2b74      	cmp	r3, #116	; 0x74
 8012c20:	d034      	beq.n	8012c8c <_scanf_float+0x1cc>
 8012c22:	2b79      	cmp	r3, #121	; 0x79
 8012c24:	d184      	bne.n	8012b30 <_scanf_float+0x70>
 8012c26:	f1bb 0f07 	cmp.w	fp, #7
 8012c2a:	d181      	bne.n	8012b30 <_scanf_float+0x70>
 8012c2c:	f04f 0b08 	mov.w	fp, #8
 8012c30:	e007      	b.n	8012c42 <_scanf_float+0x182>
 8012c32:	eb12 0f0b 	cmn.w	r2, fp
 8012c36:	f47f af7b 	bne.w	8012b30 <_scanf_float+0x70>
 8012c3a:	6821      	ldr	r1, [r4, #0]
 8012c3c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012c40:	6021      	str	r1, [r4, #0]
 8012c42:	702b      	strb	r3, [r5, #0]
 8012c44:	3501      	adds	r5, #1
 8012c46:	e79a      	b.n	8012b7e <_scanf_float+0xbe>
 8012c48:	6821      	ldr	r1, [r4, #0]
 8012c4a:	0608      	lsls	r0, r1, #24
 8012c4c:	f57f af70 	bpl.w	8012b30 <_scanf_float+0x70>
 8012c50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012c54:	e7f4      	b.n	8012c40 <_scanf_float+0x180>
 8012c56:	2a02      	cmp	r2, #2
 8012c58:	d047      	beq.n	8012cea <_scanf_float+0x22a>
 8012c5a:	f1bb 0f01 	cmp.w	fp, #1
 8012c5e:	d003      	beq.n	8012c68 <_scanf_float+0x1a8>
 8012c60:	f1bb 0f04 	cmp.w	fp, #4
 8012c64:	f47f af64 	bne.w	8012b30 <_scanf_float+0x70>
 8012c68:	f10b 0b01 	add.w	fp, fp, #1
 8012c6c:	fa5f fb8b 	uxtb.w	fp, fp
 8012c70:	e7e7      	b.n	8012c42 <_scanf_float+0x182>
 8012c72:	f1bb 0f03 	cmp.w	fp, #3
 8012c76:	d0f7      	beq.n	8012c68 <_scanf_float+0x1a8>
 8012c78:	f1bb 0f05 	cmp.w	fp, #5
 8012c7c:	e7f2      	b.n	8012c64 <_scanf_float+0x1a4>
 8012c7e:	f1bb 0f02 	cmp.w	fp, #2
 8012c82:	f47f af55 	bne.w	8012b30 <_scanf_float+0x70>
 8012c86:	f04f 0b03 	mov.w	fp, #3
 8012c8a:	e7da      	b.n	8012c42 <_scanf_float+0x182>
 8012c8c:	f1bb 0f06 	cmp.w	fp, #6
 8012c90:	f47f af4e 	bne.w	8012b30 <_scanf_float+0x70>
 8012c94:	f04f 0b07 	mov.w	fp, #7
 8012c98:	e7d3      	b.n	8012c42 <_scanf_float+0x182>
 8012c9a:	6821      	ldr	r1, [r4, #0]
 8012c9c:	0588      	lsls	r0, r1, #22
 8012c9e:	f57f af47 	bpl.w	8012b30 <_scanf_float+0x70>
 8012ca2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012ca6:	6021      	str	r1, [r4, #0]
 8012ca8:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cac:	e7c9      	b.n	8012c42 <_scanf_float+0x182>
 8012cae:	6821      	ldr	r1, [r4, #0]
 8012cb0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012cb4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012cb8:	d006      	beq.n	8012cc8 <_scanf_float+0x208>
 8012cba:	0548      	lsls	r0, r1, #21
 8012cbc:	f57f af38 	bpl.w	8012b30 <_scanf_float+0x70>
 8012cc0:	f1b9 0f00 	cmp.w	r9, #0
 8012cc4:	f43f af3b 	beq.w	8012b3e <_scanf_float+0x7e>
 8012cc8:	0588      	lsls	r0, r1, #22
 8012cca:	bf58      	it	pl
 8012ccc:	9802      	ldrpl	r0, [sp, #8]
 8012cce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012cd2:	bf58      	it	pl
 8012cd4:	eba9 0000 	subpl.w	r0, r9, r0
 8012cd8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012cdc:	bf58      	it	pl
 8012cde:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012ce2:	6021      	str	r1, [r4, #0]
 8012ce4:	f04f 0900 	mov.w	r9, #0
 8012ce8:	e7ab      	b.n	8012c42 <_scanf_float+0x182>
 8012cea:	2203      	movs	r2, #3
 8012cec:	e7a9      	b.n	8012c42 <_scanf_float+0x182>
 8012cee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012cf2:	9205      	str	r2, [sp, #20]
 8012cf4:	4631      	mov	r1, r6
 8012cf6:	4638      	mov	r0, r7
 8012cf8:	4798      	blx	r3
 8012cfa:	9a05      	ldr	r2, [sp, #20]
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	f43f af04 	beq.w	8012b0a <_scanf_float+0x4a>
 8012d02:	e715      	b.n	8012b30 <_scanf_float+0x70>
 8012d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012d0c:	4632      	mov	r2, r6
 8012d0e:	4638      	mov	r0, r7
 8012d10:	4798      	blx	r3
 8012d12:	6923      	ldr	r3, [r4, #16]
 8012d14:	3b01      	subs	r3, #1
 8012d16:	6123      	str	r3, [r4, #16]
 8012d18:	e715      	b.n	8012b46 <_scanf_float+0x86>
 8012d1a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012d1e:	2b06      	cmp	r3, #6
 8012d20:	d80a      	bhi.n	8012d38 <_scanf_float+0x278>
 8012d22:	f1bb 0f02 	cmp.w	fp, #2
 8012d26:	d966      	bls.n	8012df6 <_scanf_float+0x336>
 8012d28:	f1ab 0b03 	sub.w	fp, fp, #3
 8012d2c:	fa5f fb8b 	uxtb.w	fp, fp
 8012d30:	eba5 0b0b 	sub.w	fp, r5, fp
 8012d34:	455d      	cmp	r5, fp
 8012d36:	d149      	bne.n	8012dcc <_scanf_float+0x30c>
 8012d38:	6823      	ldr	r3, [r4, #0]
 8012d3a:	05da      	lsls	r2, r3, #23
 8012d3c:	d51f      	bpl.n	8012d7e <_scanf_float+0x2be>
 8012d3e:	055b      	lsls	r3, r3, #21
 8012d40:	d466      	bmi.n	8012e10 <_scanf_float+0x350>
 8012d42:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012d46:	6923      	ldr	r3, [r4, #16]
 8012d48:	2965      	cmp	r1, #101	; 0x65
 8012d4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012d4e:	f105 3bff 	add.w	fp, r5, #4294967295
 8012d52:	6123      	str	r3, [r4, #16]
 8012d54:	d00d      	beq.n	8012d72 <_scanf_float+0x2b2>
 8012d56:	2945      	cmp	r1, #69	; 0x45
 8012d58:	d00b      	beq.n	8012d72 <_scanf_float+0x2b2>
 8012d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d5e:	4632      	mov	r2, r6
 8012d60:	4638      	mov	r0, r7
 8012d62:	4798      	blx	r3
 8012d64:	6923      	ldr	r3, [r4, #16]
 8012d66:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012d6a:	3b01      	subs	r3, #1
 8012d6c:	f1a5 0b02 	sub.w	fp, r5, #2
 8012d70:	6123      	str	r3, [r4, #16]
 8012d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012d76:	4632      	mov	r2, r6
 8012d78:	4638      	mov	r0, r7
 8012d7a:	4798      	blx	r3
 8012d7c:	465d      	mov	r5, fp
 8012d7e:	6826      	ldr	r6, [r4, #0]
 8012d80:	f016 0610 	ands.w	r6, r6, #16
 8012d84:	d170      	bne.n	8012e68 <_scanf_float+0x3a8>
 8012d86:	702e      	strb	r6, [r5, #0]
 8012d88:	6823      	ldr	r3, [r4, #0]
 8012d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d92:	d140      	bne.n	8012e16 <_scanf_float+0x356>
 8012d94:	9b02      	ldr	r3, [sp, #8]
 8012d96:	eba9 0303 	sub.w	r3, r9, r3
 8012d9a:	425a      	negs	r2, r3
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d147      	bne.n	8012e30 <_scanf_float+0x370>
 8012da0:	2200      	movs	r2, #0
 8012da2:	4638      	mov	r0, r7
 8012da4:	4641      	mov	r1, r8
 8012da6:	f000 fecf 	bl	8013b48 <_strtod_r>
 8012daa:	6820      	ldr	r0, [r4, #0]
 8012dac:	f8da 3000 	ldr.w	r3, [sl]
 8012db0:	f010 0f02 	tst.w	r0, #2
 8012db4:	f103 0204 	add.w	r2, r3, #4
 8012db8:	f8ca 2000 	str.w	r2, [sl]
 8012dbc:	d043      	beq.n	8012e46 <_scanf_float+0x386>
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	ed83 0b00 	vstr	d0, [r3]
 8012dc4:	68e3      	ldr	r3, [r4, #12]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	60e3      	str	r3, [r4, #12]
 8012dca:	e6c0      	b.n	8012b4e <_scanf_float+0x8e>
 8012dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012dd4:	4632      	mov	r2, r6
 8012dd6:	4638      	mov	r0, r7
 8012dd8:	4798      	blx	r3
 8012dda:	6923      	ldr	r3, [r4, #16]
 8012ddc:	3b01      	subs	r3, #1
 8012dde:	6123      	str	r3, [r4, #16]
 8012de0:	e7a8      	b.n	8012d34 <_scanf_float+0x274>
 8012de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012de6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012dea:	4632      	mov	r2, r6
 8012dec:	4638      	mov	r0, r7
 8012dee:	4798      	blx	r3
 8012df0:	6923      	ldr	r3, [r4, #16]
 8012df2:	3b01      	subs	r3, #1
 8012df4:	6123      	str	r3, [r4, #16]
 8012df6:	4545      	cmp	r5, r8
 8012df8:	d8f3      	bhi.n	8012de2 <_scanf_float+0x322>
 8012dfa:	e6a7      	b.n	8012b4c <_scanf_float+0x8c>
 8012dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e04:	4632      	mov	r2, r6
 8012e06:	4638      	mov	r0, r7
 8012e08:	4798      	blx	r3
 8012e0a:	6923      	ldr	r3, [r4, #16]
 8012e0c:	3b01      	subs	r3, #1
 8012e0e:	6123      	str	r3, [r4, #16]
 8012e10:	4545      	cmp	r5, r8
 8012e12:	d8f3      	bhi.n	8012dfc <_scanf_float+0x33c>
 8012e14:	e69a      	b.n	8012b4c <_scanf_float+0x8c>
 8012e16:	9b03      	ldr	r3, [sp, #12]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d0c1      	beq.n	8012da0 <_scanf_float+0x2e0>
 8012e1c:	9904      	ldr	r1, [sp, #16]
 8012e1e:	230a      	movs	r3, #10
 8012e20:	4632      	mov	r2, r6
 8012e22:	3101      	adds	r1, #1
 8012e24:	4638      	mov	r0, r7
 8012e26:	f000 ff1b 	bl	8013c60 <_strtol_r>
 8012e2a:	9b03      	ldr	r3, [sp, #12]
 8012e2c:	9d04      	ldr	r5, [sp, #16]
 8012e2e:	1ac2      	subs	r2, r0, r3
 8012e30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012e34:	429d      	cmp	r5, r3
 8012e36:	bf28      	it	cs
 8012e38:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012e3c:	490b      	ldr	r1, [pc, #44]	; (8012e6c <_scanf_float+0x3ac>)
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f000 f880 	bl	8012f44 <siprintf>
 8012e44:	e7ac      	b.n	8012da0 <_scanf_float+0x2e0>
 8012e46:	f010 0004 	ands.w	r0, r0, #4
 8012e4a:	d1b8      	bne.n	8012dbe <_scanf_float+0x2fe>
 8012e4c:	eeb4 0b40 	vcmp.f64	d0, d0
 8012e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e54:	681d      	ldr	r5, [r3, #0]
 8012e56:	d704      	bvc.n	8012e62 <_scanf_float+0x3a2>
 8012e58:	f000 f86e 	bl	8012f38 <nanf>
 8012e5c:	ed85 0a00 	vstr	s0, [r5]
 8012e60:	e7b0      	b.n	8012dc4 <_scanf_float+0x304>
 8012e62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012e66:	e7f9      	b.n	8012e5c <_scanf_float+0x39c>
 8012e68:	2600      	movs	r6, #0
 8012e6a:	e670      	b.n	8012b4e <_scanf_float+0x8e>
 8012e6c:	08017170 	.word	0x08017170

08012e70 <_puts_r>:
 8012e70:	b570      	push	{r4, r5, r6, lr}
 8012e72:	460e      	mov	r6, r1
 8012e74:	4605      	mov	r5, r0
 8012e76:	b118      	cbz	r0, 8012e80 <_puts_r+0x10>
 8012e78:	6983      	ldr	r3, [r0, #24]
 8012e7a:	b90b      	cbnz	r3, 8012e80 <_puts_r+0x10>
 8012e7c:	f001 fe8c 	bl	8014b98 <__sinit>
 8012e80:	69ab      	ldr	r3, [r5, #24]
 8012e82:	68ac      	ldr	r4, [r5, #8]
 8012e84:	b913      	cbnz	r3, 8012e8c <_puts_r+0x1c>
 8012e86:	4628      	mov	r0, r5
 8012e88:	f001 fe86 	bl	8014b98 <__sinit>
 8012e8c:	4b23      	ldr	r3, [pc, #140]	; (8012f1c <_puts_r+0xac>)
 8012e8e:	429c      	cmp	r4, r3
 8012e90:	d117      	bne.n	8012ec2 <_puts_r+0x52>
 8012e92:	686c      	ldr	r4, [r5, #4]
 8012e94:	89a3      	ldrh	r3, [r4, #12]
 8012e96:	071b      	lsls	r3, r3, #28
 8012e98:	d51d      	bpl.n	8012ed6 <_puts_r+0x66>
 8012e9a:	6923      	ldr	r3, [r4, #16]
 8012e9c:	b1db      	cbz	r3, 8012ed6 <_puts_r+0x66>
 8012e9e:	3e01      	subs	r6, #1
 8012ea0:	68a3      	ldr	r3, [r4, #8]
 8012ea2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012ea6:	3b01      	subs	r3, #1
 8012ea8:	60a3      	str	r3, [r4, #8]
 8012eaa:	b9e9      	cbnz	r1, 8012ee8 <_puts_r+0x78>
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	da2e      	bge.n	8012f0e <_puts_r+0x9e>
 8012eb0:	4622      	mov	r2, r4
 8012eb2:	210a      	movs	r1, #10
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	f000 fee5 	bl	8013c84 <__swbuf_r>
 8012eba:	3001      	adds	r0, #1
 8012ebc:	d011      	beq.n	8012ee2 <_puts_r+0x72>
 8012ebe:	200a      	movs	r0, #10
 8012ec0:	e011      	b.n	8012ee6 <_puts_r+0x76>
 8012ec2:	4b17      	ldr	r3, [pc, #92]	; (8012f20 <_puts_r+0xb0>)
 8012ec4:	429c      	cmp	r4, r3
 8012ec6:	d101      	bne.n	8012ecc <_puts_r+0x5c>
 8012ec8:	68ac      	ldr	r4, [r5, #8]
 8012eca:	e7e3      	b.n	8012e94 <_puts_r+0x24>
 8012ecc:	4b15      	ldr	r3, [pc, #84]	; (8012f24 <_puts_r+0xb4>)
 8012ece:	429c      	cmp	r4, r3
 8012ed0:	bf08      	it	eq
 8012ed2:	68ec      	ldreq	r4, [r5, #12]
 8012ed4:	e7de      	b.n	8012e94 <_puts_r+0x24>
 8012ed6:	4621      	mov	r1, r4
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f000 ff25 	bl	8013d28 <__swsetup_r>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d0dd      	beq.n	8012e9e <_puts_r+0x2e>
 8012ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	da04      	bge.n	8012ef6 <_puts_r+0x86>
 8012eec:	69a2      	ldr	r2, [r4, #24]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	dc06      	bgt.n	8012f00 <_puts_r+0x90>
 8012ef2:	290a      	cmp	r1, #10
 8012ef4:	d004      	beq.n	8012f00 <_puts_r+0x90>
 8012ef6:	6823      	ldr	r3, [r4, #0]
 8012ef8:	1c5a      	adds	r2, r3, #1
 8012efa:	6022      	str	r2, [r4, #0]
 8012efc:	7019      	strb	r1, [r3, #0]
 8012efe:	e7cf      	b.n	8012ea0 <_puts_r+0x30>
 8012f00:	4622      	mov	r2, r4
 8012f02:	4628      	mov	r0, r5
 8012f04:	f000 febe 	bl	8013c84 <__swbuf_r>
 8012f08:	3001      	adds	r0, #1
 8012f0a:	d1c9      	bne.n	8012ea0 <_puts_r+0x30>
 8012f0c:	e7e9      	b.n	8012ee2 <_puts_r+0x72>
 8012f0e:	6823      	ldr	r3, [r4, #0]
 8012f10:	200a      	movs	r0, #10
 8012f12:	1c5a      	adds	r2, r3, #1
 8012f14:	6022      	str	r2, [r4, #0]
 8012f16:	7018      	strb	r0, [r3, #0]
 8012f18:	e7e5      	b.n	8012ee6 <_puts_r+0x76>
 8012f1a:	bf00      	nop
 8012f1c:	080171f8 	.word	0x080171f8
 8012f20:	08017218 	.word	0x08017218
 8012f24:	080171d8 	.word	0x080171d8

08012f28 <puts>:
 8012f28:	4b02      	ldr	r3, [pc, #8]	; (8012f34 <puts+0xc>)
 8012f2a:	4601      	mov	r1, r0
 8012f2c:	6818      	ldr	r0, [r3, #0]
 8012f2e:	f7ff bf9f 	b.w	8012e70 <_puts_r>
 8012f32:	bf00      	nop
 8012f34:	200001b8 	.word	0x200001b8

08012f38 <nanf>:
 8012f38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012f40 <nanf+0x8>
 8012f3c:	4770      	bx	lr
 8012f3e:	bf00      	nop
 8012f40:	7fc00000 	.word	0x7fc00000

08012f44 <siprintf>:
 8012f44:	b40e      	push	{r1, r2, r3}
 8012f46:	b500      	push	{lr}
 8012f48:	b09c      	sub	sp, #112	; 0x70
 8012f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8012f4c:	9002      	str	r0, [sp, #8]
 8012f4e:	9006      	str	r0, [sp, #24]
 8012f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f54:	4809      	ldr	r0, [pc, #36]	; (8012f7c <siprintf+0x38>)
 8012f56:	9107      	str	r1, [sp, #28]
 8012f58:	9104      	str	r1, [sp, #16]
 8012f5a:	4909      	ldr	r1, [pc, #36]	; (8012f80 <siprintf+0x3c>)
 8012f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f60:	9105      	str	r1, [sp, #20]
 8012f62:	6800      	ldr	r0, [r0, #0]
 8012f64:	9301      	str	r3, [sp, #4]
 8012f66:	a902      	add	r1, sp, #8
 8012f68:	f002 ff68 	bl	8015e3c <_svfiprintf_r>
 8012f6c:	9b02      	ldr	r3, [sp, #8]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	701a      	strb	r2, [r3, #0]
 8012f72:	b01c      	add	sp, #112	; 0x70
 8012f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f78:	b003      	add	sp, #12
 8012f7a:	4770      	bx	lr
 8012f7c:	200001b8 	.word	0x200001b8
 8012f80:	ffff0208 	.word	0xffff0208

08012f84 <sulp>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	4604      	mov	r4, r0
 8012f88:	460d      	mov	r5, r1
 8012f8a:	4616      	mov	r6, r2
 8012f8c:	ec45 4b10 	vmov	d0, r4, r5
 8012f90:	f002 fd10 	bl	80159b4 <__ulp>
 8012f94:	b17e      	cbz	r6, 8012fb6 <sulp+0x32>
 8012f96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	dd09      	ble.n	8012fb6 <sulp+0x32>
 8012fa2:	051b      	lsls	r3, r3, #20
 8012fa4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012fa8:	2000      	movs	r0, #0
 8012faa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012fae:	ec41 0b17 	vmov	d7, r0, r1
 8012fb2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012fb6:	bd70      	pop	{r4, r5, r6, pc}

08012fb8 <_strtod_l>:
 8012fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fbc:	ed2d 8b0c 	vpush	{d8-d13}
 8012fc0:	4698      	mov	r8, r3
 8012fc2:	b09d      	sub	sp, #116	; 0x74
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	4640      	mov	r0, r8
 8012fca:	460e      	mov	r6, r1
 8012fcc:	9214      	str	r2, [sp, #80]	; 0x50
 8012fce:	9318      	str	r3, [sp, #96]	; 0x60
 8012fd0:	f002 f995 	bl	80152fe <__localeconv_l>
 8012fd4:	4681      	mov	r9, r0
 8012fd6:	6800      	ldr	r0, [r0, #0]
 8012fd8:	f7ed f932 	bl	8000240 <strlen>
 8012fdc:	f04f 0a00 	mov.w	sl, #0
 8012fe0:	4607      	mov	r7, r0
 8012fe2:	f04f 0b00 	mov.w	fp, #0
 8012fe6:	9617      	str	r6, [sp, #92]	; 0x5c
 8012fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012fea:	781a      	ldrb	r2, [r3, #0]
 8012fec:	2a0d      	cmp	r2, #13
 8012fee:	d834      	bhi.n	801305a <_strtod_l+0xa2>
 8012ff0:	2a09      	cmp	r2, #9
 8012ff2:	d238      	bcs.n	8013066 <_strtod_l+0xae>
 8012ff4:	2a00      	cmp	r2, #0
 8012ff6:	d040      	beq.n	801307a <_strtod_l+0xc2>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	930d      	str	r3, [sp, #52]	; 0x34
 8012ffc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8012ffe:	782b      	ldrb	r3, [r5, #0]
 8013000:	2b30      	cmp	r3, #48	; 0x30
 8013002:	f040 80b3 	bne.w	801316c <_strtod_l+0x1b4>
 8013006:	786b      	ldrb	r3, [r5, #1]
 8013008:	2b58      	cmp	r3, #88	; 0x58
 801300a:	d001      	beq.n	8013010 <_strtod_l+0x58>
 801300c:	2b78      	cmp	r3, #120	; 0x78
 801300e:	d169      	bne.n	80130e4 <_strtod_l+0x12c>
 8013010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013012:	9301      	str	r3, [sp, #4]
 8013014:	ab18      	add	r3, sp, #96	; 0x60
 8013016:	9300      	str	r3, [sp, #0]
 8013018:	f8cd 8008 	str.w	r8, [sp, #8]
 801301c:	ab19      	add	r3, sp, #100	; 0x64
 801301e:	4a8f      	ldr	r2, [pc, #572]	; (801325c <_strtod_l+0x2a4>)
 8013020:	a917      	add	r1, sp, #92	; 0x5c
 8013022:	4620      	mov	r0, r4
 8013024:	f001 fe91 	bl	8014d4a <__gethex>
 8013028:	f010 0607 	ands.w	r6, r0, #7
 801302c:	4607      	mov	r7, r0
 801302e:	d005      	beq.n	801303c <_strtod_l+0x84>
 8013030:	2e06      	cmp	r6, #6
 8013032:	d12c      	bne.n	801308e <_strtod_l+0xd6>
 8013034:	3501      	adds	r5, #1
 8013036:	2300      	movs	r3, #0
 8013038:	9517      	str	r5, [sp, #92]	; 0x5c
 801303a:	930d      	str	r3, [sp, #52]	; 0x34
 801303c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801303e:	2b00      	cmp	r3, #0
 8013040:	f040 855e 	bne.w	8013b00 <_strtod_l+0xb48>
 8013044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013046:	b1eb      	cbz	r3, 8013084 <_strtod_l+0xcc>
 8013048:	ec4b ab17 	vmov	d7, sl, fp
 801304c:	eeb1 0b47 	vneg.f64	d0, d7
 8013050:	b01d      	add	sp, #116	; 0x74
 8013052:	ecbd 8b0c 	vpop	{d8-d13}
 8013056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801305a:	2a2b      	cmp	r2, #43	; 0x2b
 801305c:	d015      	beq.n	801308a <_strtod_l+0xd2>
 801305e:	2a2d      	cmp	r2, #45	; 0x2d
 8013060:	d004      	beq.n	801306c <_strtod_l+0xb4>
 8013062:	2a20      	cmp	r2, #32
 8013064:	d1c8      	bne.n	8012ff8 <_strtod_l+0x40>
 8013066:	3301      	adds	r3, #1
 8013068:	9317      	str	r3, [sp, #92]	; 0x5c
 801306a:	e7bd      	b.n	8012fe8 <_strtod_l+0x30>
 801306c:	2201      	movs	r2, #1
 801306e:	920d      	str	r2, [sp, #52]	; 0x34
 8013070:	1c5a      	adds	r2, r3, #1
 8013072:	9217      	str	r2, [sp, #92]	; 0x5c
 8013074:	785b      	ldrb	r3, [r3, #1]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d1c0      	bne.n	8012ffc <_strtod_l+0x44>
 801307a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801307c:	9617      	str	r6, [sp, #92]	; 0x5c
 801307e:	2b00      	cmp	r3, #0
 8013080:	f040 853c 	bne.w	8013afc <_strtod_l+0xb44>
 8013084:	ec4b ab10 	vmov	d0, sl, fp
 8013088:	e7e2      	b.n	8013050 <_strtod_l+0x98>
 801308a:	2200      	movs	r2, #0
 801308c:	e7ef      	b.n	801306e <_strtod_l+0xb6>
 801308e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013090:	b13a      	cbz	r2, 80130a2 <_strtod_l+0xea>
 8013092:	2135      	movs	r1, #53	; 0x35
 8013094:	a81a      	add	r0, sp, #104	; 0x68
 8013096:	f002 fd86 	bl	8015ba6 <__copybits>
 801309a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801309c:	4620      	mov	r0, r4
 801309e:	f002 f9f1 	bl	8015484 <_Bfree>
 80130a2:	3e01      	subs	r6, #1
 80130a4:	2e04      	cmp	r6, #4
 80130a6:	d806      	bhi.n	80130b6 <_strtod_l+0xfe>
 80130a8:	e8df f006 	tbb	[pc, r6]
 80130ac:	1714030a 	.word	0x1714030a
 80130b0:	0a          	.byte	0x0a
 80130b1:	00          	.byte	0x00
 80130b2:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80130b6:	073b      	lsls	r3, r7, #28
 80130b8:	d5c0      	bpl.n	801303c <_strtod_l+0x84>
 80130ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80130be:	e7bd      	b.n	801303c <_strtod_l+0x84>
 80130c0:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80130c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80130c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80130ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80130ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80130d2:	e7f0      	b.n	80130b6 <_strtod_l+0xfe>
 80130d4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8013260 <_strtod_l+0x2a8>
 80130d8:	e7ed      	b.n	80130b6 <_strtod_l+0xfe>
 80130da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80130de:	f04f 3aff 	mov.w	sl, #4294967295
 80130e2:	e7e8      	b.n	80130b6 <_strtod_l+0xfe>
 80130e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130e6:	1c5a      	adds	r2, r3, #1
 80130e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80130ea:	785b      	ldrb	r3, [r3, #1]
 80130ec:	2b30      	cmp	r3, #48	; 0x30
 80130ee:	d0f9      	beq.n	80130e4 <_strtod_l+0x12c>
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d0a3      	beq.n	801303c <_strtod_l+0x84>
 80130f4:	2301      	movs	r3, #1
 80130f6:	930a      	str	r3, [sp, #40]	; 0x28
 80130f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130fa:	930c      	str	r3, [sp, #48]	; 0x30
 80130fc:	2300      	movs	r3, #0
 80130fe:	9306      	str	r3, [sp, #24]
 8013100:	9308      	str	r3, [sp, #32]
 8013102:	461d      	mov	r5, r3
 8013104:	220a      	movs	r2, #10
 8013106:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013108:	f890 8000 	ldrb.w	r8, [r0]
 801310c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8013110:	b2d9      	uxtb	r1, r3
 8013112:	2909      	cmp	r1, #9
 8013114:	d92c      	bls.n	8013170 <_strtod_l+0x1b8>
 8013116:	463a      	mov	r2, r7
 8013118:	f8d9 1000 	ldr.w	r1, [r9]
 801311c:	f002 ffd9 	bl	80160d2 <strncmp>
 8013120:	2800      	cmp	r0, #0
 8013122:	d035      	beq.n	8013190 <_strtod_l+0x1d8>
 8013124:	2000      	movs	r0, #0
 8013126:	4642      	mov	r2, r8
 8013128:	462b      	mov	r3, r5
 801312a:	4601      	mov	r1, r0
 801312c:	9004      	str	r0, [sp, #16]
 801312e:	2a65      	cmp	r2, #101	; 0x65
 8013130:	d001      	beq.n	8013136 <_strtod_l+0x17e>
 8013132:	2a45      	cmp	r2, #69	; 0x45
 8013134:	d117      	bne.n	8013166 <_strtod_l+0x1ae>
 8013136:	b923      	cbnz	r3, 8013142 <_strtod_l+0x18a>
 8013138:	b910      	cbnz	r0, 8013140 <_strtod_l+0x188>
 801313a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801313c:	2b00      	cmp	r3, #0
 801313e:	d09c      	beq.n	801307a <_strtod_l+0xc2>
 8013140:	2300      	movs	r3, #0
 8013142:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013144:	1c72      	adds	r2, r6, #1
 8013146:	9217      	str	r2, [sp, #92]	; 0x5c
 8013148:	7872      	ldrb	r2, [r6, #1]
 801314a:	2a2b      	cmp	r2, #43	; 0x2b
 801314c:	f000 8082 	beq.w	8013254 <_strtod_l+0x29c>
 8013150:	2a2d      	cmp	r2, #45	; 0x2d
 8013152:	d079      	beq.n	8013248 <_strtod_l+0x290>
 8013154:	f04f 0e00 	mov.w	lr, #0
 8013158:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801315c:	f1bc 0f09 	cmp.w	ip, #9
 8013160:	f240 8086 	bls.w	8013270 <_strtod_l+0x2b8>
 8013164:	9617      	str	r6, [sp, #92]	; 0x5c
 8013166:	f04f 0800 	mov.w	r8, #0
 801316a:	e0a8      	b.n	80132be <_strtod_l+0x306>
 801316c:	2300      	movs	r3, #0
 801316e:	e7c2      	b.n	80130f6 <_strtod_l+0x13e>
 8013170:	2d08      	cmp	r5, #8
 8013172:	bfd5      	itete	le
 8013174:	9908      	ldrle	r1, [sp, #32]
 8013176:	9906      	ldrgt	r1, [sp, #24]
 8013178:	fb02 3301 	mlale	r3, r2, r1, r3
 801317c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013180:	f100 0001 	add.w	r0, r0, #1
 8013184:	bfd4      	ite	le
 8013186:	9308      	strle	r3, [sp, #32]
 8013188:	9306      	strgt	r3, [sp, #24]
 801318a:	3501      	adds	r5, #1
 801318c:	9017      	str	r0, [sp, #92]	; 0x5c
 801318e:	e7ba      	b.n	8013106 <_strtod_l+0x14e>
 8013190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013192:	19da      	adds	r2, r3, r7
 8013194:	9217      	str	r2, [sp, #92]	; 0x5c
 8013196:	5dda      	ldrb	r2, [r3, r7]
 8013198:	2d00      	cmp	r5, #0
 801319a:	d038      	beq.n	801320e <_strtod_l+0x256>
 801319c:	4601      	mov	r1, r0
 801319e:	462b      	mov	r3, r5
 80131a0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80131a4:	2f09      	cmp	r7, #9
 80131a6:	d913      	bls.n	80131d0 <_strtod_l+0x218>
 80131a8:	2701      	movs	r7, #1
 80131aa:	9704      	str	r7, [sp, #16]
 80131ac:	e7bf      	b.n	801312e <_strtod_l+0x176>
 80131ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80131b0:	1c5a      	adds	r2, r3, #1
 80131b2:	9217      	str	r2, [sp, #92]	; 0x5c
 80131b4:	785a      	ldrb	r2, [r3, #1]
 80131b6:	3001      	adds	r0, #1
 80131b8:	2a30      	cmp	r2, #48	; 0x30
 80131ba:	d0f8      	beq.n	80131ae <_strtod_l+0x1f6>
 80131bc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80131c0:	2b08      	cmp	r3, #8
 80131c2:	f200 84a2 	bhi.w	8013b0a <_strtod_l+0xb52>
 80131c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80131c8:	930c      	str	r3, [sp, #48]	; 0x30
 80131ca:	4601      	mov	r1, r0
 80131cc:	2000      	movs	r0, #0
 80131ce:	4603      	mov	r3, r0
 80131d0:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80131d4:	f100 0701 	add.w	r7, r0, #1
 80131d8:	d013      	beq.n	8013202 <_strtod_l+0x24a>
 80131da:	4439      	add	r1, r7
 80131dc:	eb00 0e03 	add.w	lr, r0, r3
 80131e0:	461f      	mov	r7, r3
 80131e2:	f04f 0c0a 	mov.w	ip, #10
 80131e6:	45be      	cmp	lr, r7
 80131e8:	d113      	bne.n	8013212 <_strtod_l+0x25a>
 80131ea:	181f      	adds	r7, r3, r0
 80131ec:	2f08      	cmp	r7, #8
 80131ee:	f103 0301 	add.w	r3, r3, #1
 80131f2:	4403      	add	r3, r0
 80131f4:	dc1d      	bgt.n	8013232 <_strtod_l+0x27a>
 80131f6:	9a08      	ldr	r2, [sp, #32]
 80131f8:	200a      	movs	r0, #10
 80131fa:	fb00 8202 	mla	r2, r0, r2, r8
 80131fe:	9208      	str	r2, [sp, #32]
 8013200:	2700      	movs	r7, #0
 8013202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013204:	1c50      	adds	r0, r2, #1
 8013206:	9017      	str	r0, [sp, #92]	; 0x5c
 8013208:	7852      	ldrb	r2, [r2, #1]
 801320a:	4638      	mov	r0, r7
 801320c:	e7c8      	b.n	80131a0 <_strtod_l+0x1e8>
 801320e:	4628      	mov	r0, r5
 8013210:	e7d2      	b.n	80131b8 <_strtod_l+0x200>
 8013212:	2f08      	cmp	r7, #8
 8013214:	f107 0701 	add.w	r7, r7, #1
 8013218:	dc04      	bgt.n	8013224 <_strtod_l+0x26c>
 801321a:	9a08      	ldr	r2, [sp, #32]
 801321c:	fb0c f202 	mul.w	r2, ip, r2
 8013220:	9208      	str	r2, [sp, #32]
 8013222:	e7e0      	b.n	80131e6 <_strtod_l+0x22e>
 8013224:	2f10      	cmp	r7, #16
 8013226:	bfde      	ittt	le
 8013228:	9a06      	ldrle	r2, [sp, #24]
 801322a:	fb0c f202 	mulle.w	r2, ip, r2
 801322e:	9206      	strle	r2, [sp, #24]
 8013230:	e7d9      	b.n	80131e6 <_strtod_l+0x22e>
 8013232:	2b10      	cmp	r3, #16
 8013234:	bfdf      	itttt	le
 8013236:	9a06      	ldrle	r2, [sp, #24]
 8013238:	200a      	movle	r0, #10
 801323a:	fb00 8202 	mlale	r2, r0, r2, r8
 801323e:	9206      	strle	r2, [sp, #24]
 8013240:	e7de      	b.n	8013200 <_strtod_l+0x248>
 8013242:	2301      	movs	r3, #1
 8013244:	9304      	str	r3, [sp, #16]
 8013246:	e777      	b.n	8013138 <_strtod_l+0x180>
 8013248:	f04f 0e01 	mov.w	lr, #1
 801324c:	1cb2      	adds	r2, r6, #2
 801324e:	9217      	str	r2, [sp, #92]	; 0x5c
 8013250:	78b2      	ldrb	r2, [r6, #2]
 8013252:	e781      	b.n	8013158 <_strtod_l+0x1a0>
 8013254:	f04f 0e00 	mov.w	lr, #0
 8013258:	e7f8      	b.n	801324c <_strtod_l+0x294>
 801325a:	bf00      	nop
 801325c:	08017178 	.word	0x08017178
 8013260:	7ff00000 	.word	0x7ff00000
 8013264:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013266:	f102 0c01 	add.w	ip, r2, #1
 801326a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801326e:	7852      	ldrb	r2, [r2, #1]
 8013270:	2a30      	cmp	r2, #48	; 0x30
 8013272:	d0f7      	beq.n	8013264 <_strtod_l+0x2ac>
 8013274:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8013278:	f1bc 0f08 	cmp.w	ip, #8
 801327c:	f63f af73 	bhi.w	8013166 <_strtod_l+0x1ae>
 8013280:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8013284:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013286:	920e      	str	r2, [sp, #56]	; 0x38
 8013288:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801328a:	f102 0c01 	add.w	ip, r2, #1
 801328e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8013292:	7852      	ldrb	r2, [r2, #1]
 8013294:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8013298:	f1b9 0f09 	cmp.w	r9, #9
 801329c:	d939      	bls.n	8013312 <_strtod_l+0x35a>
 801329e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80132a0:	ebac 0c07 	sub.w	ip, ip, r7
 80132a4:	f1bc 0f08 	cmp.w	ip, #8
 80132a8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80132ac:	dc37      	bgt.n	801331e <_strtod_l+0x366>
 80132ae:	45e0      	cmp	r8, ip
 80132b0:	bfa8      	it	ge
 80132b2:	46e0      	movge	r8, ip
 80132b4:	f1be 0f00 	cmp.w	lr, #0
 80132b8:	d001      	beq.n	80132be <_strtod_l+0x306>
 80132ba:	f1c8 0800 	rsb	r8, r8, #0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d151      	bne.n	8013366 <_strtod_l+0x3ae>
 80132c2:	2800      	cmp	r0, #0
 80132c4:	f47f aeba 	bne.w	801303c <_strtod_l+0x84>
 80132c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f47f aeb6 	bne.w	801303c <_strtod_l+0x84>
 80132d0:	9b04      	ldr	r3, [sp, #16]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	f47f aed1 	bne.w	801307a <_strtod_l+0xc2>
 80132d8:	2a4e      	cmp	r2, #78	; 0x4e
 80132da:	d027      	beq.n	801332c <_strtod_l+0x374>
 80132dc:	dc21      	bgt.n	8013322 <_strtod_l+0x36a>
 80132de:	2a49      	cmp	r2, #73	; 0x49
 80132e0:	f47f aecb 	bne.w	801307a <_strtod_l+0xc2>
 80132e4:	499a      	ldr	r1, [pc, #616]	; (8013550 <_strtod_l+0x598>)
 80132e6:	a817      	add	r0, sp, #92	; 0x5c
 80132e8:	f001 ff62 	bl	80151b0 <__match>
 80132ec:	2800      	cmp	r0, #0
 80132ee:	f43f aec4 	beq.w	801307a <_strtod_l+0xc2>
 80132f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80132f4:	4997      	ldr	r1, [pc, #604]	; (8013554 <_strtod_l+0x59c>)
 80132f6:	3b01      	subs	r3, #1
 80132f8:	a817      	add	r0, sp, #92	; 0x5c
 80132fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80132fc:	f001 ff58 	bl	80151b0 <__match>
 8013300:	b910      	cbnz	r0, 8013308 <_strtod_l+0x350>
 8013302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013304:	3301      	adds	r3, #1
 8013306:	9317      	str	r3, [sp, #92]	; 0x5c
 8013308:	f8df b260 	ldr.w	fp, [pc, #608]	; 801356c <_strtod_l+0x5b4>
 801330c:	f04f 0a00 	mov.w	sl, #0
 8013310:	e694      	b.n	801303c <_strtod_l+0x84>
 8013312:	270a      	movs	r7, #10
 8013314:	fb07 2808 	mla	r8, r7, r8, r2
 8013318:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 801331c:	e7b4      	b.n	8013288 <_strtod_l+0x2d0>
 801331e:	46e0      	mov	r8, ip
 8013320:	e7c8      	b.n	80132b4 <_strtod_l+0x2fc>
 8013322:	2a69      	cmp	r2, #105	; 0x69
 8013324:	d0de      	beq.n	80132e4 <_strtod_l+0x32c>
 8013326:	2a6e      	cmp	r2, #110	; 0x6e
 8013328:	f47f aea7 	bne.w	801307a <_strtod_l+0xc2>
 801332c:	498a      	ldr	r1, [pc, #552]	; (8013558 <_strtod_l+0x5a0>)
 801332e:	a817      	add	r0, sp, #92	; 0x5c
 8013330:	f001 ff3e 	bl	80151b0 <__match>
 8013334:	2800      	cmp	r0, #0
 8013336:	f43f aea0 	beq.w	801307a <_strtod_l+0xc2>
 801333a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	2b28      	cmp	r3, #40	; 0x28
 8013340:	d10e      	bne.n	8013360 <_strtod_l+0x3a8>
 8013342:	aa1a      	add	r2, sp, #104	; 0x68
 8013344:	4985      	ldr	r1, [pc, #532]	; (801355c <_strtod_l+0x5a4>)
 8013346:	a817      	add	r0, sp, #92	; 0x5c
 8013348:	f001 ff46 	bl	80151d8 <__hexnan>
 801334c:	2805      	cmp	r0, #5
 801334e:	d107      	bne.n	8013360 <_strtod_l+0x3a8>
 8013350:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013352:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013356:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801335a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801335e:	e66d      	b.n	801303c <_strtod_l+0x84>
 8013360:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8013570 <_strtod_l+0x5b8>
 8013364:	e7d2      	b.n	801330c <_strtod_l+0x354>
 8013366:	eddd 7a08 	vldr	s15, [sp, #32]
 801336a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801336e:	eba8 0201 	sub.w	r2, r8, r1
 8013372:	2d00      	cmp	r5, #0
 8013374:	bf08      	it	eq
 8013376:	461d      	moveq	r5, r3
 8013378:	2b10      	cmp	r3, #16
 801337a:	9204      	str	r2, [sp, #16]
 801337c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013380:	461a      	mov	r2, r3
 8013382:	bfa8      	it	ge
 8013384:	2210      	movge	r2, #16
 8013386:	2b09      	cmp	r3, #9
 8013388:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801338c:	dc14      	bgt.n	80133b8 <_strtod_l+0x400>
 801338e:	9904      	ldr	r1, [sp, #16]
 8013390:	2900      	cmp	r1, #0
 8013392:	f43f ae53 	beq.w	801303c <_strtod_l+0x84>
 8013396:	9904      	ldr	r1, [sp, #16]
 8013398:	dd72      	ble.n	8013480 <_strtod_l+0x4c8>
 801339a:	2916      	cmp	r1, #22
 801339c:	dc5a      	bgt.n	8013454 <_strtod_l+0x49c>
 801339e:	4970      	ldr	r1, [pc, #448]	; (8013560 <_strtod_l+0x5a8>)
 80133a0:	9b04      	ldr	r3, [sp, #16]
 80133a2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80133a6:	ed91 7b00 	vldr	d7, [r1]
 80133aa:	ec4b ab16 	vmov	d6, sl, fp
 80133ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133b2:	ec5b ab17 	vmov	sl, fp, d7
 80133b6:	e641      	b.n	801303c <_strtod_l+0x84>
 80133b8:	4969      	ldr	r1, [pc, #420]	; (8013560 <_strtod_l+0x5a8>)
 80133ba:	eddd 7a06 	vldr	s15, [sp, #24]
 80133be:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80133c2:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80133c6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80133ca:	2b0f      	cmp	r3, #15
 80133cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80133d0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80133d4:	ec5b ab17 	vmov	sl, fp, d7
 80133d8:	ddd9      	ble.n	801338e <_strtod_l+0x3d6>
 80133da:	9904      	ldr	r1, [sp, #16]
 80133dc:	1a9a      	subs	r2, r3, r2
 80133de:	440a      	add	r2, r1
 80133e0:	2a00      	cmp	r2, #0
 80133e2:	f340 8096 	ble.w	8013512 <_strtod_l+0x55a>
 80133e6:	f012 000f 	ands.w	r0, r2, #15
 80133ea:	d00a      	beq.n	8013402 <_strtod_l+0x44a>
 80133ec:	495c      	ldr	r1, [pc, #368]	; (8013560 <_strtod_l+0x5a8>)
 80133ee:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80133f2:	ed91 7b00 	vldr	d7, [r1]
 80133f6:	ec4b ab16 	vmov	d6, sl, fp
 80133fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133fe:	ec5b ab17 	vmov	sl, fp, d7
 8013402:	f032 020f 	bics.w	r2, r2, #15
 8013406:	d072      	beq.n	80134ee <_strtod_l+0x536>
 8013408:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801340c:	dd45      	ble.n	801349a <_strtod_l+0x4e2>
 801340e:	2500      	movs	r5, #0
 8013410:	46a8      	mov	r8, r5
 8013412:	9506      	str	r5, [sp, #24]
 8013414:	46a9      	mov	r9, r5
 8013416:	2322      	movs	r3, #34	; 0x22
 8013418:	f8df b150 	ldr.w	fp, [pc, #336]	; 801356c <_strtod_l+0x5b4>
 801341c:	6023      	str	r3, [r4, #0]
 801341e:	f04f 0a00 	mov.w	sl, #0
 8013422:	9b06      	ldr	r3, [sp, #24]
 8013424:	2b00      	cmp	r3, #0
 8013426:	f43f ae09 	beq.w	801303c <_strtod_l+0x84>
 801342a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801342c:	4620      	mov	r0, r4
 801342e:	f002 f829 	bl	8015484 <_Bfree>
 8013432:	4649      	mov	r1, r9
 8013434:	4620      	mov	r0, r4
 8013436:	f002 f825 	bl	8015484 <_Bfree>
 801343a:	4641      	mov	r1, r8
 801343c:	4620      	mov	r0, r4
 801343e:	f002 f821 	bl	8015484 <_Bfree>
 8013442:	9906      	ldr	r1, [sp, #24]
 8013444:	4620      	mov	r0, r4
 8013446:	f002 f81d 	bl	8015484 <_Bfree>
 801344a:	4629      	mov	r1, r5
 801344c:	4620      	mov	r0, r4
 801344e:	f002 f819 	bl	8015484 <_Bfree>
 8013452:	e5f3      	b.n	801303c <_strtod_l+0x84>
 8013454:	9804      	ldr	r0, [sp, #16]
 8013456:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801345a:	4281      	cmp	r1, r0
 801345c:	dbbd      	blt.n	80133da <_strtod_l+0x422>
 801345e:	4a40      	ldr	r2, [pc, #256]	; (8013560 <_strtod_l+0x5a8>)
 8013460:	f1c3 030f 	rsb	r3, r3, #15
 8013464:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013468:	ed91 7b00 	vldr	d7, [r1]
 801346c:	ec4b ab16 	vmov	d6, sl, fp
 8013470:	1ac3      	subs	r3, r0, r3
 8013472:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013476:	ee27 7b06 	vmul.f64	d7, d7, d6
 801347a:	ed92 6b00 	vldr	d6, [r2]
 801347e:	e796      	b.n	80133ae <_strtod_l+0x3f6>
 8013480:	3116      	adds	r1, #22
 8013482:	dbaa      	blt.n	80133da <_strtod_l+0x422>
 8013484:	4936      	ldr	r1, [pc, #216]	; (8013560 <_strtod_l+0x5a8>)
 8013486:	9b04      	ldr	r3, [sp, #16]
 8013488:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 801348c:	ed91 7b00 	vldr	d7, [r1]
 8013490:	ec4b ab16 	vmov	d6, sl, fp
 8013494:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013498:	e78b      	b.n	80133b2 <_strtod_l+0x3fa>
 801349a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801349e:	2000      	movs	r0, #0
 80134a0:	4e30      	ldr	r6, [pc, #192]	; (8013564 <_strtod_l+0x5ac>)
 80134a2:	1112      	asrs	r2, r2, #4
 80134a4:	4601      	mov	r1, r0
 80134a6:	2a01      	cmp	r2, #1
 80134a8:	dc23      	bgt.n	80134f2 <_strtod_l+0x53a>
 80134aa:	b108      	cbz	r0, 80134b0 <_strtod_l+0x4f8>
 80134ac:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80134b0:	4a2c      	ldr	r2, [pc, #176]	; (8013564 <_strtod_l+0x5ac>)
 80134b2:	482d      	ldr	r0, [pc, #180]	; (8013568 <_strtod_l+0x5b0>)
 80134b4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80134b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80134bc:	ed91 7b00 	vldr	d7, [r1]
 80134c0:	ec4b ab16 	vmov	d6, sl, fp
 80134c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80134c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80134cc:	9907      	ldr	r1, [sp, #28]
 80134ce:	4a27      	ldr	r2, [pc, #156]	; (801356c <_strtod_l+0x5b4>)
 80134d0:	400a      	ands	r2, r1
 80134d2:	4282      	cmp	r2, r0
 80134d4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80134d8:	d899      	bhi.n	801340e <_strtod_l+0x456>
 80134da:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80134de:	4282      	cmp	r2, r0
 80134e0:	bf86      	itte	hi
 80134e2:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8013574 <_strtod_l+0x5bc>
 80134e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80134ea:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 80134ee:	2700      	movs	r7, #0
 80134f0:	e070      	b.n	80135d4 <_strtod_l+0x61c>
 80134f2:	07d7      	lsls	r7, r2, #31
 80134f4:	d50a      	bpl.n	801350c <_strtod_l+0x554>
 80134f6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80134fa:	ed90 7b00 	vldr	d7, [r0]
 80134fe:	ed9d 6b06 	vldr	d6, [sp, #24]
 8013502:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013506:	ed8d 7b06 	vstr	d7, [sp, #24]
 801350a:	2001      	movs	r0, #1
 801350c:	3101      	adds	r1, #1
 801350e:	1052      	asrs	r2, r2, #1
 8013510:	e7c9      	b.n	80134a6 <_strtod_l+0x4ee>
 8013512:	d0ec      	beq.n	80134ee <_strtod_l+0x536>
 8013514:	4252      	negs	r2, r2
 8013516:	f012 000f 	ands.w	r0, r2, #15
 801351a:	d00a      	beq.n	8013532 <_strtod_l+0x57a>
 801351c:	4910      	ldr	r1, [pc, #64]	; (8013560 <_strtod_l+0x5a8>)
 801351e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013522:	ed91 7b00 	vldr	d7, [r1]
 8013526:	ec4b ab16 	vmov	d6, sl, fp
 801352a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801352e:	ec5b ab17 	vmov	sl, fp, d7
 8013532:	1112      	asrs	r2, r2, #4
 8013534:	d0db      	beq.n	80134ee <_strtod_l+0x536>
 8013536:	2a1f      	cmp	r2, #31
 8013538:	dd1e      	ble.n	8013578 <_strtod_l+0x5c0>
 801353a:	2500      	movs	r5, #0
 801353c:	46a8      	mov	r8, r5
 801353e:	9506      	str	r5, [sp, #24]
 8013540:	46a9      	mov	r9, r5
 8013542:	2322      	movs	r3, #34	; 0x22
 8013544:	f04f 0a00 	mov.w	sl, #0
 8013548:	f04f 0b00 	mov.w	fp, #0
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	e768      	b.n	8013422 <_strtod_l+0x46a>
 8013550:	08017141 	.word	0x08017141
 8013554:	080171cb 	.word	0x080171cb
 8013558:	08017149 	.word	0x08017149
 801355c:	0801718c 	.word	0x0801718c
 8013560:	08017270 	.word	0x08017270
 8013564:	08017248 	.word	0x08017248
 8013568:	7ca00000 	.word	0x7ca00000
 801356c:	7ff00000 	.word	0x7ff00000
 8013570:	fff80000 	.word	0xfff80000
 8013574:	7fefffff 	.word	0x7fefffff
 8013578:	e9cd ab06 	strd	sl, fp, [sp, #24]
 801357c:	f012 0710 	ands.w	r7, r2, #16
 8013580:	49ab      	ldr	r1, [pc, #684]	; (8013830 <_strtod_l+0x878>)
 8013582:	bf18      	it	ne
 8013584:	276a      	movne	r7, #106	; 0x6a
 8013586:	2000      	movs	r0, #0
 8013588:	2a00      	cmp	r2, #0
 801358a:	f300 8113 	bgt.w	80137b4 <_strtod_l+0x7fc>
 801358e:	b108      	cbz	r0, 8013594 <_strtod_l+0x5dc>
 8013590:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8013594:	b1bf      	cbz	r7, 80135c6 <_strtod_l+0x60e>
 8013596:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801359a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801359e:	2a00      	cmp	r2, #0
 80135a0:	4659      	mov	r1, fp
 80135a2:	dd10      	ble.n	80135c6 <_strtod_l+0x60e>
 80135a4:	2a1f      	cmp	r2, #31
 80135a6:	f340 8113 	ble.w	80137d0 <_strtod_l+0x818>
 80135aa:	2a34      	cmp	r2, #52	; 0x34
 80135ac:	bfde      	ittt	le
 80135ae:	3a20      	suble	r2, #32
 80135b0:	f04f 30ff 	movle.w	r0, #4294967295
 80135b4:	fa00 f202 	lslle.w	r2, r0, r2
 80135b8:	f04f 0a00 	mov.w	sl, #0
 80135bc:	bfcc      	ite	gt
 80135be:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80135c2:	ea02 0b01 	andle.w	fp, r2, r1
 80135c6:	ec4b ab17 	vmov	d7, sl, fp
 80135ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80135ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d2:	d0b2      	beq.n	801353a <_strtod_l+0x582>
 80135d4:	9a08      	ldr	r2, [sp, #32]
 80135d6:	9200      	str	r2, [sp, #0]
 80135d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80135da:	462a      	mov	r2, r5
 80135dc:	4620      	mov	r0, r4
 80135de:	f001 ffa3 	bl	8015528 <__s2b>
 80135e2:	9006      	str	r0, [sp, #24]
 80135e4:	2800      	cmp	r0, #0
 80135e6:	f43f af12 	beq.w	801340e <_strtod_l+0x456>
 80135ea:	9a04      	ldr	r2, [sp, #16]
 80135ec:	9b04      	ldr	r3, [sp, #16]
 80135ee:	2a00      	cmp	r2, #0
 80135f0:	f1c3 0300 	rsb	r3, r3, #0
 80135f4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8013818 <_strtod_l+0x860>
 80135f8:	bfa8      	it	ge
 80135fa:	2300      	movge	r3, #0
 80135fc:	ed9f ab88 	vldr	d10, [pc, #544]	; 8013820 <_strtod_l+0x868>
 8013600:	ed9f bb89 	vldr	d11, [pc, #548]	; 8013828 <_strtod_l+0x870>
 8013604:	930e      	str	r3, [sp, #56]	; 0x38
 8013606:	2500      	movs	r5, #0
 8013608:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801360c:	9310      	str	r3, [sp, #64]	; 0x40
 801360e:	46a8      	mov	r8, r5
 8013610:	9b06      	ldr	r3, [sp, #24]
 8013612:	4620      	mov	r0, r4
 8013614:	6859      	ldr	r1, [r3, #4]
 8013616:	f001 ff01 	bl	801541c <_Balloc>
 801361a:	4681      	mov	r9, r0
 801361c:	2800      	cmp	r0, #0
 801361e:	f43f aefa 	beq.w	8013416 <_strtod_l+0x45e>
 8013622:	9b06      	ldr	r3, [sp, #24]
 8013624:	691a      	ldr	r2, [r3, #16]
 8013626:	3202      	adds	r2, #2
 8013628:	f103 010c 	add.w	r1, r3, #12
 801362c:	0092      	lsls	r2, r2, #2
 801362e:	300c      	adds	r0, #12
 8013630:	f7fe fdf8 	bl	8012224 <memcpy>
 8013634:	aa1a      	add	r2, sp, #104	; 0x68
 8013636:	a919      	add	r1, sp, #100	; 0x64
 8013638:	ec4b ab10 	vmov	d0, sl, fp
 801363c:	4620      	mov	r0, r4
 801363e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013642:	f002 fa2d 	bl	8015aa0 <__d2b>
 8013646:	9018      	str	r0, [sp, #96]	; 0x60
 8013648:	2800      	cmp	r0, #0
 801364a:	f43f aee4 	beq.w	8013416 <_strtod_l+0x45e>
 801364e:	2101      	movs	r1, #1
 8013650:	4620      	mov	r0, r4
 8013652:	f001 fff5 	bl	8015640 <__i2b>
 8013656:	4680      	mov	r8, r0
 8013658:	2800      	cmp	r0, #0
 801365a:	f43f aedc 	beq.w	8013416 <_strtod_l+0x45e>
 801365e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8013660:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013662:	2e00      	cmp	r6, #0
 8013664:	bfb1      	iteee	lt
 8013666:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8013668:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801366a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 801366c:	18f3      	addge	r3, r6, r3
 801366e:	bfba      	itte	lt
 8013670:	1b98      	sublt	r0, r3, r6
 8013672:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013674:	9308      	strge	r3, [sp, #32]
 8013676:	eba6 0607 	sub.w	r6, r6, r7
 801367a:	bfb8      	it	lt
 801367c:	9308      	strlt	r3, [sp, #32]
 801367e:	4416      	add	r6, r2
 8013680:	4b6c      	ldr	r3, [pc, #432]	; (8013834 <_strtod_l+0x87c>)
 8013682:	3e01      	subs	r6, #1
 8013684:	429e      	cmp	r6, r3
 8013686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801368a:	f280 80b4 	bge.w	80137f6 <_strtod_l+0x83e>
 801368e:	1b9b      	subs	r3, r3, r6
 8013690:	2b1f      	cmp	r3, #31
 8013692:	eba2 0203 	sub.w	r2, r2, r3
 8013696:	f04f 0101 	mov.w	r1, #1
 801369a:	f300 80a0 	bgt.w	80137de <_strtod_l+0x826>
 801369e:	fa01 f303 	lsl.w	r3, r1, r3
 80136a2:	9311      	str	r3, [sp, #68]	; 0x44
 80136a4:	2300      	movs	r3, #0
 80136a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80136a8:	9b08      	ldr	r3, [sp, #32]
 80136aa:	4413      	add	r3, r2
 80136ac:	4402      	add	r2, r0
 80136ae:	18be      	adds	r6, r7, r2
 80136b0:	9a08      	ldr	r2, [sp, #32]
 80136b2:	429a      	cmp	r2, r3
 80136b4:	bfa8      	it	ge
 80136b6:	461a      	movge	r2, r3
 80136b8:	42b2      	cmp	r2, r6
 80136ba:	bfa8      	it	ge
 80136bc:	4632      	movge	r2, r6
 80136be:	2a00      	cmp	r2, #0
 80136c0:	dd04      	ble.n	80136cc <_strtod_l+0x714>
 80136c2:	9908      	ldr	r1, [sp, #32]
 80136c4:	1a9b      	subs	r3, r3, r2
 80136c6:	1ab6      	subs	r6, r6, r2
 80136c8:	1a8a      	subs	r2, r1, r2
 80136ca:	9208      	str	r2, [sp, #32]
 80136cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136ce:	b1c2      	cbz	r2, 8013702 <_strtod_l+0x74a>
 80136d0:	4641      	mov	r1, r8
 80136d2:	4620      	mov	r0, r4
 80136d4:	9315      	str	r3, [sp, #84]	; 0x54
 80136d6:	f002 f853 	bl	8015780 <__pow5mult>
 80136da:	4680      	mov	r8, r0
 80136dc:	2800      	cmp	r0, #0
 80136de:	f43f ae9a 	beq.w	8013416 <_strtod_l+0x45e>
 80136e2:	4601      	mov	r1, r0
 80136e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80136e6:	4620      	mov	r0, r4
 80136e8:	f001 ffb3 	bl	8015652 <__multiply>
 80136ec:	900c      	str	r0, [sp, #48]	; 0x30
 80136ee:	2800      	cmp	r0, #0
 80136f0:	f43f ae91 	beq.w	8013416 <_strtod_l+0x45e>
 80136f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80136f6:	4620      	mov	r0, r4
 80136f8:	f001 fec4 	bl	8015484 <_Bfree>
 80136fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80136fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013700:	9218      	str	r2, [sp, #96]	; 0x60
 8013702:	2b00      	cmp	r3, #0
 8013704:	dc7c      	bgt.n	8013800 <_strtod_l+0x848>
 8013706:	9b04      	ldr	r3, [sp, #16]
 8013708:	2b00      	cmp	r3, #0
 801370a:	dd08      	ble.n	801371e <_strtod_l+0x766>
 801370c:	4649      	mov	r1, r9
 801370e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013710:	4620      	mov	r0, r4
 8013712:	f002 f835 	bl	8015780 <__pow5mult>
 8013716:	4681      	mov	r9, r0
 8013718:	2800      	cmp	r0, #0
 801371a:	f43f ae7c 	beq.w	8013416 <_strtod_l+0x45e>
 801371e:	2e00      	cmp	r6, #0
 8013720:	dd08      	ble.n	8013734 <_strtod_l+0x77c>
 8013722:	4649      	mov	r1, r9
 8013724:	4632      	mov	r2, r6
 8013726:	4620      	mov	r0, r4
 8013728:	f002 f878 	bl	801581c <__lshift>
 801372c:	4681      	mov	r9, r0
 801372e:	2800      	cmp	r0, #0
 8013730:	f43f ae71 	beq.w	8013416 <_strtod_l+0x45e>
 8013734:	9b08      	ldr	r3, [sp, #32]
 8013736:	2b00      	cmp	r3, #0
 8013738:	dd08      	ble.n	801374c <_strtod_l+0x794>
 801373a:	4641      	mov	r1, r8
 801373c:	461a      	mov	r2, r3
 801373e:	4620      	mov	r0, r4
 8013740:	f002 f86c 	bl	801581c <__lshift>
 8013744:	4680      	mov	r8, r0
 8013746:	2800      	cmp	r0, #0
 8013748:	f43f ae65 	beq.w	8013416 <_strtod_l+0x45e>
 801374c:	464a      	mov	r2, r9
 801374e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013750:	4620      	mov	r0, r4
 8013752:	f002 f8d1 	bl	80158f8 <__mdiff>
 8013756:	4605      	mov	r5, r0
 8013758:	2800      	cmp	r0, #0
 801375a:	f43f ae5c 	beq.w	8013416 <_strtod_l+0x45e>
 801375e:	68c3      	ldr	r3, [r0, #12]
 8013760:	930c      	str	r3, [sp, #48]	; 0x30
 8013762:	2300      	movs	r3, #0
 8013764:	60c3      	str	r3, [r0, #12]
 8013766:	4641      	mov	r1, r8
 8013768:	f002 f8ac 	bl	80158c4 <__mcmp>
 801376c:	2800      	cmp	r0, #0
 801376e:	da63      	bge.n	8013838 <_strtod_l+0x880>
 8013770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013772:	b9e3      	cbnz	r3, 80137ae <_strtod_l+0x7f6>
 8013774:	f1ba 0f00 	cmp.w	sl, #0
 8013778:	d119      	bne.n	80137ae <_strtod_l+0x7f6>
 801377a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801377e:	b9b3      	cbnz	r3, 80137ae <_strtod_l+0x7f6>
 8013780:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013784:	0d1b      	lsrs	r3, r3, #20
 8013786:	051b      	lsls	r3, r3, #20
 8013788:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801378c:	d90f      	bls.n	80137ae <_strtod_l+0x7f6>
 801378e:	696b      	ldr	r3, [r5, #20]
 8013790:	b913      	cbnz	r3, 8013798 <_strtod_l+0x7e0>
 8013792:	692b      	ldr	r3, [r5, #16]
 8013794:	2b01      	cmp	r3, #1
 8013796:	dd0a      	ble.n	80137ae <_strtod_l+0x7f6>
 8013798:	4629      	mov	r1, r5
 801379a:	2201      	movs	r2, #1
 801379c:	4620      	mov	r0, r4
 801379e:	f002 f83d 	bl	801581c <__lshift>
 80137a2:	4641      	mov	r1, r8
 80137a4:	4605      	mov	r5, r0
 80137a6:	f002 f88d 	bl	80158c4 <__mcmp>
 80137aa:	2800      	cmp	r0, #0
 80137ac:	dc75      	bgt.n	801389a <_strtod_l+0x8e2>
 80137ae:	2f00      	cmp	r7, #0
 80137b0:	d17f      	bne.n	80138b2 <_strtod_l+0x8fa>
 80137b2:	e63a      	b.n	801342a <_strtod_l+0x472>
 80137b4:	07d6      	lsls	r6, r2, #31
 80137b6:	d508      	bpl.n	80137ca <_strtod_l+0x812>
 80137b8:	ed9d 6b06 	vldr	d6, [sp, #24]
 80137bc:	ed91 7b00 	vldr	d7, [r1]
 80137c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80137c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80137c8:	2001      	movs	r0, #1
 80137ca:	1052      	asrs	r2, r2, #1
 80137cc:	3108      	adds	r1, #8
 80137ce:	e6db      	b.n	8013588 <_strtod_l+0x5d0>
 80137d0:	f04f 31ff 	mov.w	r1, #4294967295
 80137d4:	fa01 f202 	lsl.w	r2, r1, r2
 80137d8:	ea02 0a0a 	and.w	sl, r2, sl
 80137dc:	e6f3      	b.n	80135c6 <_strtod_l+0x60e>
 80137de:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80137e2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80137e6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80137ea:	36e2      	adds	r6, #226	; 0xe2
 80137ec:	fa01 f306 	lsl.w	r3, r1, r6
 80137f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80137f2:	9111      	str	r1, [sp, #68]	; 0x44
 80137f4:	e758      	b.n	80136a8 <_strtod_l+0x6f0>
 80137f6:	2300      	movs	r3, #0
 80137f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80137fa:	2301      	movs	r3, #1
 80137fc:	9311      	str	r3, [sp, #68]	; 0x44
 80137fe:	e753      	b.n	80136a8 <_strtod_l+0x6f0>
 8013800:	461a      	mov	r2, r3
 8013802:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013804:	4620      	mov	r0, r4
 8013806:	f002 f809 	bl	801581c <__lshift>
 801380a:	9018      	str	r0, [sp, #96]	; 0x60
 801380c:	2800      	cmp	r0, #0
 801380e:	f47f af7a 	bne.w	8013706 <_strtod_l+0x74e>
 8013812:	e600      	b.n	8013416 <_strtod_l+0x45e>
 8013814:	f3af 8000 	nop.w
 8013818:	94a03595 	.word	0x94a03595
 801381c:	3fdfffff 	.word	0x3fdfffff
 8013820:	35afe535 	.word	0x35afe535
 8013824:	3fe00000 	.word	0x3fe00000
 8013828:	94a03595 	.word	0x94a03595
 801382c:	3fcfffff 	.word	0x3fcfffff
 8013830:	080171a0 	.word	0x080171a0
 8013834:	fffffc02 	.word	0xfffffc02
 8013838:	f8cd b020 	str.w	fp, [sp, #32]
 801383c:	f040 8085 	bne.w	801394a <_strtod_l+0x992>
 8013840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013842:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013846:	b322      	cbz	r2, 8013892 <_strtod_l+0x8da>
 8013848:	4ab7      	ldr	r2, [pc, #732]	; (8013b28 <_strtod_l+0xb70>)
 801384a:	4293      	cmp	r3, r2
 801384c:	d154      	bne.n	80138f8 <_strtod_l+0x940>
 801384e:	4651      	mov	r1, sl
 8013850:	b1e7      	cbz	r7, 801388c <_strtod_l+0x8d4>
 8013852:	4bb6      	ldr	r3, [pc, #728]	; (8013b2c <_strtod_l+0xb74>)
 8013854:	465a      	mov	r2, fp
 8013856:	4013      	ands	r3, r2
 8013858:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801385c:	f04f 32ff 	mov.w	r2, #4294967295
 8013860:	d803      	bhi.n	801386a <_strtod_l+0x8b2>
 8013862:	0d1b      	lsrs	r3, r3, #20
 8013864:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013868:	409a      	lsls	r2, r3
 801386a:	4291      	cmp	r1, r2
 801386c:	d144      	bne.n	80138f8 <_strtod_l+0x940>
 801386e:	4bb0      	ldr	r3, [pc, #704]	; (8013b30 <_strtod_l+0xb78>)
 8013870:	9a08      	ldr	r2, [sp, #32]
 8013872:	429a      	cmp	r2, r3
 8013874:	d102      	bne.n	801387c <_strtod_l+0x8c4>
 8013876:	3101      	adds	r1, #1
 8013878:	f43f adcd 	beq.w	8013416 <_strtod_l+0x45e>
 801387c:	4bab      	ldr	r3, [pc, #684]	; (8013b2c <_strtod_l+0xb74>)
 801387e:	9a08      	ldr	r2, [sp, #32]
 8013880:	401a      	ands	r2, r3
 8013882:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8013886:	f04f 0a00 	mov.w	sl, #0
 801388a:	e790      	b.n	80137ae <_strtod_l+0x7f6>
 801388c:	f04f 32ff 	mov.w	r2, #4294967295
 8013890:	e7eb      	b.n	801386a <_strtod_l+0x8b2>
 8013892:	bb8b      	cbnz	r3, 80138f8 <_strtod_l+0x940>
 8013894:	f1ba 0f00 	cmp.w	sl, #0
 8013898:	d12e      	bne.n	80138f8 <_strtod_l+0x940>
 801389a:	465b      	mov	r3, fp
 801389c:	4aa3      	ldr	r2, [pc, #652]	; (8013b2c <_strtod_l+0xb74>)
 801389e:	b30f      	cbz	r7, 80138e4 <_strtod_l+0x92c>
 80138a0:	ea02 010b 	and.w	r1, r2, fp
 80138a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80138a8:	dc1c      	bgt.n	80138e4 <_strtod_l+0x92c>
 80138aa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80138ae:	f77f ae48 	ble.w	8013542 <_strtod_l+0x58a>
 80138b2:	4aa0      	ldr	r2, [pc, #640]	; (8013b34 <_strtod_l+0xb7c>)
 80138b4:	2300      	movs	r3, #0
 80138b6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80138ba:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80138be:	ec4b ab17 	vmov	d7, sl, fp
 80138c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80138c6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80138ca:	9b05      	ldr	r3, [sp, #20]
 80138cc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f47f adaa 	bne.w	801342a <_strtod_l+0x472>
 80138d6:	9b04      	ldr	r3, [sp, #16]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f47f ada6 	bne.w	801342a <_strtod_l+0x472>
 80138de:	2322      	movs	r3, #34	; 0x22
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	e5a2      	b.n	801342a <_strtod_l+0x472>
 80138e4:	4013      	ands	r3, r2
 80138e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80138ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80138ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80138f2:	f04f 3aff 	mov.w	sl, #4294967295
 80138f6:	e75a      	b.n	80137ae <_strtod_l+0x7f6>
 80138f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138fa:	b18b      	cbz	r3, 8013920 <_strtod_l+0x968>
 80138fc:	9a08      	ldr	r2, [sp, #32]
 80138fe:	4213      	tst	r3, r2
 8013900:	f43f af55 	beq.w	80137ae <_strtod_l+0x7f6>
 8013904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013906:	463a      	mov	r2, r7
 8013908:	4650      	mov	r0, sl
 801390a:	4659      	mov	r1, fp
 801390c:	b163      	cbz	r3, 8013928 <_strtod_l+0x970>
 801390e:	f7ff fb39 	bl	8012f84 <sulp>
 8013912:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013916:	ee37 7b00 	vadd.f64	d7, d7, d0
 801391a:	ec5b ab17 	vmov	sl, fp, d7
 801391e:	e746      	b.n	80137ae <_strtod_l+0x7f6>
 8013920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013922:	ea13 0f0a 	tst.w	r3, sl
 8013926:	e7eb      	b.n	8013900 <_strtod_l+0x948>
 8013928:	f7ff fb2c 	bl	8012f84 <sulp>
 801392c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013930:	ee37 7b40 	vsub.f64	d7, d7, d0
 8013934:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013938:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013940:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013944:	f43f adfd 	beq.w	8013542 <_strtod_l+0x58a>
 8013948:	e731      	b.n	80137ae <_strtod_l+0x7f6>
 801394a:	4641      	mov	r1, r8
 801394c:	4628      	mov	r0, r5
 801394e:	f002 f8f6 	bl	8015b3e <__ratio>
 8013952:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013956:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801395e:	d869      	bhi.n	8013a34 <_strtod_l+0xa7c>
 8013960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013962:	2b00      	cmp	r3, #0
 8013964:	d045      	beq.n	80139f2 <_strtod_l+0xa3a>
 8013966:	4b74      	ldr	r3, [pc, #464]	; (8013b38 <_strtod_l+0xb80>)
 8013968:	2200      	movs	r2, #0
 801396a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801396e:	9808      	ldr	r0, [sp, #32]
 8013970:	496e      	ldr	r1, [pc, #440]	; (8013b2c <_strtod_l+0xb74>)
 8013972:	ea00 0601 	and.w	r6, r0, r1
 8013976:	4871      	ldr	r0, [pc, #452]	; (8013b3c <_strtod_l+0xb84>)
 8013978:	4286      	cmp	r6, r0
 801397a:	f040 8089 	bne.w	8013a90 <_strtod_l+0xad8>
 801397e:	910f      	str	r1, [sp, #60]	; 0x3c
 8013980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013984:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8013988:	9908      	ldr	r1, [sp, #32]
 801398a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 801398e:	ec4b ab10 	vmov	d0, sl, fp
 8013992:	ec43 2b1c 	vmov	d12, r2, r3
 8013996:	f002 f80d 	bl	80159b4 <__ulp>
 801399a:	ec4b ab1d 	vmov	d13, sl, fp
 801399e:	eeac db00 	vfma.f64	d13, d12, d0
 80139a2:	ed8d db08 	vstr	d13, [sp, #32]
 80139a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80139aa:	4a65      	ldr	r2, [pc, #404]	; (8013b40 <_strtod_l+0xb88>)
 80139ac:	4019      	ands	r1, r3
 80139ae:	4291      	cmp	r1, r2
 80139b0:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80139b4:	d948      	bls.n	8013a48 <_strtod_l+0xa90>
 80139b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80139bc:	4293      	cmp	r3, r2
 80139be:	d103      	bne.n	80139c8 <_strtod_l+0xa10>
 80139c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139c2:	3301      	adds	r3, #1
 80139c4:	f43f ad27 	beq.w	8013416 <_strtod_l+0x45e>
 80139c8:	f8df b164 	ldr.w	fp, [pc, #356]	; 8013b30 <_strtod_l+0xb78>
 80139cc:	f04f 3aff 	mov.w	sl, #4294967295
 80139d0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80139d2:	4620      	mov	r0, r4
 80139d4:	f001 fd56 	bl	8015484 <_Bfree>
 80139d8:	4649      	mov	r1, r9
 80139da:	4620      	mov	r0, r4
 80139dc:	f001 fd52 	bl	8015484 <_Bfree>
 80139e0:	4641      	mov	r1, r8
 80139e2:	4620      	mov	r0, r4
 80139e4:	f001 fd4e 	bl	8015484 <_Bfree>
 80139e8:	4629      	mov	r1, r5
 80139ea:	4620      	mov	r0, r4
 80139ec:	f001 fd4a 	bl	8015484 <_Bfree>
 80139f0:	e60e      	b.n	8013610 <_strtod_l+0x658>
 80139f2:	f1ba 0f00 	cmp.w	sl, #0
 80139f6:	d113      	bne.n	8013a20 <_strtod_l+0xa68>
 80139f8:	9b08      	ldr	r3, [sp, #32]
 80139fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139fe:	b9b3      	cbnz	r3, 8013a2e <_strtod_l+0xa76>
 8013a00:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013a04:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013a10:	d401      	bmi.n	8013a16 <_strtod_l+0xa5e>
 8013a12:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013a16:	eeb1 7b48 	vneg.f64	d7, d8
 8013a1a:	ec53 2b17 	vmov	r2, r3, d7
 8013a1e:	e7a6      	b.n	801396e <_strtod_l+0x9b6>
 8013a20:	f1ba 0f01 	cmp.w	sl, #1
 8013a24:	d103      	bne.n	8013a2e <_strtod_l+0xa76>
 8013a26:	9b08      	ldr	r3, [sp, #32]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f43f ad8a 	beq.w	8013542 <_strtod_l+0x58a>
 8013a2e:	2200      	movs	r2, #0
 8013a30:	4b44      	ldr	r3, [pc, #272]	; (8013b44 <_strtod_l+0xb8c>)
 8013a32:	e79a      	b.n	801396a <_strtod_l+0x9b2>
 8013a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a36:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013a3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d0e9      	beq.n	8013a16 <_strtod_l+0xa5e>
 8013a42:	ec53 2b18 	vmov	r2, r3, d8
 8013a46:	e792      	b.n	801396e <_strtod_l+0x9b6>
 8013a48:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013a4c:	2f00      	cmp	r7, #0
 8013a4e:	d1bf      	bne.n	80139d0 <_strtod_l+0xa18>
 8013a50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013a54:	0d1b      	lsrs	r3, r3, #20
 8013a56:	051b      	lsls	r3, r3, #20
 8013a58:	429e      	cmp	r6, r3
 8013a5a:	d1b9      	bne.n	80139d0 <_strtod_l+0xa18>
 8013a5c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8013a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a62:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8013a66:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013a6a:	b92b      	cbnz	r3, 8013a78 <_strtod_l+0xac0>
 8013a6c:	f1ba 0f00 	cmp.w	sl, #0
 8013a70:	d102      	bne.n	8013a78 <_strtod_l+0xac0>
 8013a72:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8013a76:	b3d2      	cbz	r2, 8013aee <_strtod_l+0xb36>
 8013a78:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a80:	f53f acd3 	bmi.w	801342a <_strtod_l+0x472>
 8013a84:	eeb4 8bca 	vcmpe.f64	d8, d10
 8013a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a8c:	dda0      	ble.n	80139d0 <_strtod_l+0xa18>
 8013a8e:	e4cc      	b.n	801342a <_strtod_l+0x472>
 8013a90:	b1ef      	cbz	r7, 8013ace <_strtod_l+0xb16>
 8013a92:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8013a96:	d81a      	bhi.n	8013ace <_strtod_l+0xb16>
 8013a98:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013b20 <_strtod_l+0xb68>
 8013a9c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aa4:	d810      	bhi.n	8013ac8 <_strtod_l+0xb10>
 8013aa6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8013aaa:	ee17 3a90 	vmov	r3, s15
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	bf08      	it	eq
 8013ab2:	2301      	moveq	r3, #1
 8013ab4:	ee07 3a90 	vmov	s15, r3
 8013ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013aba:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8013abe:	b99b      	cbnz	r3, 8013ae8 <_strtod_l+0xb30>
 8013ac0:	eeb1 7b48 	vneg.f64	d7, d8
 8013ac4:	ec53 2b17 	vmov	r2, r3, d7
 8013ac8:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8013acc:	1b8b      	subs	r3, r1, r6
 8013ace:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013ad2:	ec43 2b1c 	vmov	d12, r2, r3
 8013ad6:	f001 ff6d 	bl	80159b4 <__ulp>
 8013ada:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013ade:	eeac 7b00 	vfma.f64	d7, d12, d0
 8013ae2:	ec5b ab17 	vmov	sl, fp, d7
 8013ae6:	e7b1      	b.n	8013a4c <_strtod_l+0xa94>
 8013ae8:	ec53 2b18 	vmov	r2, r3, d8
 8013aec:	e7ec      	b.n	8013ac8 <_strtod_l+0xb10>
 8013aee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af6:	f57f af6b 	bpl.w	80139d0 <_strtod_l+0xa18>
 8013afa:	e496      	b.n	801342a <_strtod_l+0x472>
 8013afc:	2300      	movs	r3, #0
 8013afe:	930d      	str	r3, [sp, #52]	; 0x34
 8013b00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013b02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b04:	6013      	str	r3, [r2, #0]
 8013b06:	f7ff ba9d 	b.w	8013044 <_strtod_l+0x8c>
 8013b0a:	2a65      	cmp	r2, #101	; 0x65
 8013b0c:	f04f 0100 	mov.w	r1, #0
 8013b10:	f43f ab97 	beq.w	8013242 <_strtod_l+0x28a>
 8013b14:	2701      	movs	r7, #1
 8013b16:	460b      	mov	r3, r1
 8013b18:	9704      	str	r7, [sp, #16]
 8013b1a:	f7ff bb0a 	b.w	8013132 <_strtod_l+0x17a>
 8013b1e:	bf00      	nop
 8013b20:	ffc00000 	.word	0xffc00000
 8013b24:	41dfffff 	.word	0x41dfffff
 8013b28:	000fffff 	.word	0x000fffff
 8013b2c:	7ff00000 	.word	0x7ff00000
 8013b30:	7fefffff 	.word	0x7fefffff
 8013b34:	39500000 	.word	0x39500000
 8013b38:	3ff00000 	.word	0x3ff00000
 8013b3c:	7fe00000 	.word	0x7fe00000
 8013b40:	7c9fffff 	.word	0x7c9fffff
 8013b44:	bff00000 	.word	0xbff00000

08013b48 <_strtod_r>:
 8013b48:	4b05      	ldr	r3, [pc, #20]	; (8013b60 <_strtod_r+0x18>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	b410      	push	{r4}
 8013b4e:	6a1b      	ldr	r3, [r3, #32]
 8013b50:	4c04      	ldr	r4, [pc, #16]	; (8013b64 <_strtod_r+0x1c>)
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	bf08      	it	eq
 8013b56:	4623      	moveq	r3, r4
 8013b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b5c:	f7ff ba2c 	b.w	8012fb8 <_strtod_l>
 8013b60:	200001b8 	.word	0x200001b8
 8013b64:	2000021c 	.word	0x2000021c

08013b68 <_strtol_l.isra.0>:
 8013b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b6c:	4680      	mov	r8, r0
 8013b6e:	4689      	mov	r9, r1
 8013b70:	4692      	mov	sl, r2
 8013b72:	461e      	mov	r6, r3
 8013b74:	460f      	mov	r7, r1
 8013b76:	463d      	mov	r5, r7
 8013b78:	9808      	ldr	r0, [sp, #32]
 8013b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b7e:	f001 fbbb 	bl	80152f8 <__locale_ctype_ptr_l>
 8013b82:	4420      	add	r0, r4
 8013b84:	7843      	ldrb	r3, [r0, #1]
 8013b86:	f013 0308 	ands.w	r3, r3, #8
 8013b8a:	d132      	bne.n	8013bf2 <_strtol_l.isra.0+0x8a>
 8013b8c:	2c2d      	cmp	r4, #45	; 0x2d
 8013b8e:	d132      	bne.n	8013bf6 <_strtol_l.isra.0+0x8e>
 8013b90:	787c      	ldrb	r4, [r7, #1]
 8013b92:	1cbd      	adds	r5, r7, #2
 8013b94:	2201      	movs	r2, #1
 8013b96:	2e00      	cmp	r6, #0
 8013b98:	d05d      	beq.n	8013c56 <_strtol_l.isra.0+0xee>
 8013b9a:	2e10      	cmp	r6, #16
 8013b9c:	d109      	bne.n	8013bb2 <_strtol_l.isra.0+0x4a>
 8013b9e:	2c30      	cmp	r4, #48	; 0x30
 8013ba0:	d107      	bne.n	8013bb2 <_strtol_l.isra.0+0x4a>
 8013ba2:	782b      	ldrb	r3, [r5, #0]
 8013ba4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013ba8:	2b58      	cmp	r3, #88	; 0x58
 8013baa:	d14f      	bne.n	8013c4c <_strtol_l.isra.0+0xe4>
 8013bac:	786c      	ldrb	r4, [r5, #1]
 8013bae:	2610      	movs	r6, #16
 8013bb0:	3502      	adds	r5, #2
 8013bb2:	2a00      	cmp	r2, #0
 8013bb4:	bf14      	ite	ne
 8013bb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013bba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013bbe:	2700      	movs	r7, #0
 8013bc0:	fbb1 fcf6 	udiv	ip, r1, r6
 8013bc4:	4638      	mov	r0, r7
 8013bc6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013bca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013bce:	2b09      	cmp	r3, #9
 8013bd0:	d817      	bhi.n	8013c02 <_strtol_l.isra.0+0x9a>
 8013bd2:	461c      	mov	r4, r3
 8013bd4:	42a6      	cmp	r6, r4
 8013bd6:	dd23      	ble.n	8013c20 <_strtol_l.isra.0+0xb8>
 8013bd8:	1c7b      	adds	r3, r7, #1
 8013bda:	d007      	beq.n	8013bec <_strtol_l.isra.0+0x84>
 8013bdc:	4584      	cmp	ip, r0
 8013bde:	d31c      	bcc.n	8013c1a <_strtol_l.isra.0+0xb2>
 8013be0:	d101      	bne.n	8013be6 <_strtol_l.isra.0+0x7e>
 8013be2:	45a6      	cmp	lr, r4
 8013be4:	db19      	blt.n	8013c1a <_strtol_l.isra.0+0xb2>
 8013be6:	fb00 4006 	mla	r0, r0, r6, r4
 8013bea:	2701      	movs	r7, #1
 8013bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013bf0:	e7eb      	b.n	8013bca <_strtol_l.isra.0+0x62>
 8013bf2:	462f      	mov	r7, r5
 8013bf4:	e7bf      	b.n	8013b76 <_strtol_l.isra.0+0xe>
 8013bf6:	2c2b      	cmp	r4, #43	; 0x2b
 8013bf8:	bf04      	itt	eq
 8013bfa:	1cbd      	addeq	r5, r7, #2
 8013bfc:	787c      	ldrbeq	r4, [r7, #1]
 8013bfe:	461a      	mov	r2, r3
 8013c00:	e7c9      	b.n	8013b96 <_strtol_l.isra.0+0x2e>
 8013c02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013c06:	2b19      	cmp	r3, #25
 8013c08:	d801      	bhi.n	8013c0e <_strtol_l.isra.0+0xa6>
 8013c0a:	3c37      	subs	r4, #55	; 0x37
 8013c0c:	e7e2      	b.n	8013bd4 <_strtol_l.isra.0+0x6c>
 8013c0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013c12:	2b19      	cmp	r3, #25
 8013c14:	d804      	bhi.n	8013c20 <_strtol_l.isra.0+0xb8>
 8013c16:	3c57      	subs	r4, #87	; 0x57
 8013c18:	e7dc      	b.n	8013bd4 <_strtol_l.isra.0+0x6c>
 8013c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8013c1e:	e7e5      	b.n	8013bec <_strtol_l.isra.0+0x84>
 8013c20:	1c7b      	adds	r3, r7, #1
 8013c22:	d108      	bne.n	8013c36 <_strtol_l.isra.0+0xce>
 8013c24:	2322      	movs	r3, #34	; 0x22
 8013c26:	f8c8 3000 	str.w	r3, [r8]
 8013c2a:	4608      	mov	r0, r1
 8013c2c:	f1ba 0f00 	cmp.w	sl, #0
 8013c30:	d107      	bne.n	8013c42 <_strtol_l.isra.0+0xda>
 8013c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c36:	b102      	cbz	r2, 8013c3a <_strtol_l.isra.0+0xd2>
 8013c38:	4240      	negs	r0, r0
 8013c3a:	f1ba 0f00 	cmp.w	sl, #0
 8013c3e:	d0f8      	beq.n	8013c32 <_strtol_l.isra.0+0xca>
 8013c40:	b10f      	cbz	r7, 8013c46 <_strtol_l.isra.0+0xde>
 8013c42:	f105 39ff 	add.w	r9, r5, #4294967295
 8013c46:	f8ca 9000 	str.w	r9, [sl]
 8013c4a:	e7f2      	b.n	8013c32 <_strtol_l.isra.0+0xca>
 8013c4c:	2430      	movs	r4, #48	; 0x30
 8013c4e:	2e00      	cmp	r6, #0
 8013c50:	d1af      	bne.n	8013bb2 <_strtol_l.isra.0+0x4a>
 8013c52:	2608      	movs	r6, #8
 8013c54:	e7ad      	b.n	8013bb2 <_strtol_l.isra.0+0x4a>
 8013c56:	2c30      	cmp	r4, #48	; 0x30
 8013c58:	d0a3      	beq.n	8013ba2 <_strtol_l.isra.0+0x3a>
 8013c5a:	260a      	movs	r6, #10
 8013c5c:	e7a9      	b.n	8013bb2 <_strtol_l.isra.0+0x4a>
	...

08013c60 <_strtol_r>:
 8013c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c62:	4c06      	ldr	r4, [pc, #24]	; (8013c7c <_strtol_r+0x1c>)
 8013c64:	4d06      	ldr	r5, [pc, #24]	; (8013c80 <_strtol_r+0x20>)
 8013c66:	6824      	ldr	r4, [r4, #0]
 8013c68:	6a24      	ldr	r4, [r4, #32]
 8013c6a:	2c00      	cmp	r4, #0
 8013c6c:	bf08      	it	eq
 8013c6e:	462c      	moveq	r4, r5
 8013c70:	9400      	str	r4, [sp, #0]
 8013c72:	f7ff ff79 	bl	8013b68 <_strtol_l.isra.0>
 8013c76:	b003      	add	sp, #12
 8013c78:	bd30      	pop	{r4, r5, pc}
 8013c7a:	bf00      	nop
 8013c7c:	200001b8 	.word	0x200001b8
 8013c80:	2000021c 	.word	0x2000021c

08013c84 <__swbuf_r>:
 8013c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c86:	460e      	mov	r6, r1
 8013c88:	4614      	mov	r4, r2
 8013c8a:	4605      	mov	r5, r0
 8013c8c:	b118      	cbz	r0, 8013c96 <__swbuf_r+0x12>
 8013c8e:	6983      	ldr	r3, [r0, #24]
 8013c90:	b90b      	cbnz	r3, 8013c96 <__swbuf_r+0x12>
 8013c92:	f000 ff81 	bl	8014b98 <__sinit>
 8013c96:	4b21      	ldr	r3, [pc, #132]	; (8013d1c <__swbuf_r+0x98>)
 8013c98:	429c      	cmp	r4, r3
 8013c9a:	d12a      	bne.n	8013cf2 <__swbuf_r+0x6e>
 8013c9c:	686c      	ldr	r4, [r5, #4]
 8013c9e:	69a3      	ldr	r3, [r4, #24]
 8013ca0:	60a3      	str	r3, [r4, #8]
 8013ca2:	89a3      	ldrh	r3, [r4, #12]
 8013ca4:	071a      	lsls	r2, r3, #28
 8013ca6:	d52e      	bpl.n	8013d06 <__swbuf_r+0x82>
 8013ca8:	6923      	ldr	r3, [r4, #16]
 8013caa:	b363      	cbz	r3, 8013d06 <__swbuf_r+0x82>
 8013cac:	6923      	ldr	r3, [r4, #16]
 8013cae:	6820      	ldr	r0, [r4, #0]
 8013cb0:	1ac0      	subs	r0, r0, r3
 8013cb2:	6963      	ldr	r3, [r4, #20]
 8013cb4:	b2f6      	uxtb	r6, r6
 8013cb6:	4283      	cmp	r3, r0
 8013cb8:	4637      	mov	r7, r6
 8013cba:	dc04      	bgt.n	8013cc6 <__swbuf_r+0x42>
 8013cbc:	4621      	mov	r1, r4
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f000 ff00 	bl	8014ac4 <_fflush_r>
 8013cc4:	bb28      	cbnz	r0, 8013d12 <__swbuf_r+0x8e>
 8013cc6:	68a3      	ldr	r3, [r4, #8]
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	60a3      	str	r3, [r4, #8]
 8013ccc:	6823      	ldr	r3, [r4, #0]
 8013cce:	1c5a      	adds	r2, r3, #1
 8013cd0:	6022      	str	r2, [r4, #0]
 8013cd2:	701e      	strb	r6, [r3, #0]
 8013cd4:	6963      	ldr	r3, [r4, #20]
 8013cd6:	3001      	adds	r0, #1
 8013cd8:	4283      	cmp	r3, r0
 8013cda:	d004      	beq.n	8013ce6 <__swbuf_r+0x62>
 8013cdc:	89a3      	ldrh	r3, [r4, #12]
 8013cde:	07db      	lsls	r3, r3, #31
 8013ce0:	d519      	bpl.n	8013d16 <__swbuf_r+0x92>
 8013ce2:	2e0a      	cmp	r6, #10
 8013ce4:	d117      	bne.n	8013d16 <__swbuf_r+0x92>
 8013ce6:	4621      	mov	r1, r4
 8013ce8:	4628      	mov	r0, r5
 8013cea:	f000 feeb 	bl	8014ac4 <_fflush_r>
 8013cee:	b190      	cbz	r0, 8013d16 <__swbuf_r+0x92>
 8013cf0:	e00f      	b.n	8013d12 <__swbuf_r+0x8e>
 8013cf2:	4b0b      	ldr	r3, [pc, #44]	; (8013d20 <__swbuf_r+0x9c>)
 8013cf4:	429c      	cmp	r4, r3
 8013cf6:	d101      	bne.n	8013cfc <__swbuf_r+0x78>
 8013cf8:	68ac      	ldr	r4, [r5, #8]
 8013cfa:	e7d0      	b.n	8013c9e <__swbuf_r+0x1a>
 8013cfc:	4b09      	ldr	r3, [pc, #36]	; (8013d24 <__swbuf_r+0xa0>)
 8013cfe:	429c      	cmp	r4, r3
 8013d00:	bf08      	it	eq
 8013d02:	68ec      	ldreq	r4, [r5, #12]
 8013d04:	e7cb      	b.n	8013c9e <__swbuf_r+0x1a>
 8013d06:	4621      	mov	r1, r4
 8013d08:	4628      	mov	r0, r5
 8013d0a:	f000 f80d 	bl	8013d28 <__swsetup_r>
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	d0cc      	beq.n	8013cac <__swbuf_r+0x28>
 8013d12:	f04f 37ff 	mov.w	r7, #4294967295
 8013d16:	4638      	mov	r0, r7
 8013d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	080171f8 	.word	0x080171f8
 8013d20:	08017218 	.word	0x08017218
 8013d24:	080171d8 	.word	0x080171d8

08013d28 <__swsetup_r>:
 8013d28:	4b32      	ldr	r3, [pc, #200]	; (8013df4 <__swsetup_r+0xcc>)
 8013d2a:	b570      	push	{r4, r5, r6, lr}
 8013d2c:	681d      	ldr	r5, [r3, #0]
 8013d2e:	4606      	mov	r6, r0
 8013d30:	460c      	mov	r4, r1
 8013d32:	b125      	cbz	r5, 8013d3e <__swsetup_r+0x16>
 8013d34:	69ab      	ldr	r3, [r5, #24]
 8013d36:	b913      	cbnz	r3, 8013d3e <__swsetup_r+0x16>
 8013d38:	4628      	mov	r0, r5
 8013d3a:	f000 ff2d 	bl	8014b98 <__sinit>
 8013d3e:	4b2e      	ldr	r3, [pc, #184]	; (8013df8 <__swsetup_r+0xd0>)
 8013d40:	429c      	cmp	r4, r3
 8013d42:	d10f      	bne.n	8013d64 <__swsetup_r+0x3c>
 8013d44:	686c      	ldr	r4, [r5, #4]
 8013d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	0715      	lsls	r5, r2, #28
 8013d4e:	d42c      	bmi.n	8013daa <__swsetup_r+0x82>
 8013d50:	06d0      	lsls	r0, r2, #27
 8013d52:	d411      	bmi.n	8013d78 <__swsetup_r+0x50>
 8013d54:	2209      	movs	r2, #9
 8013d56:	6032      	str	r2, [r6, #0]
 8013d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d5c:	81a3      	strh	r3, [r4, #12]
 8013d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d62:	e03e      	b.n	8013de2 <__swsetup_r+0xba>
 8013d64:	4b25      	ldr	r3, [pc, #148]	; (8013dfc <__swsetup_r+0xd4>)
 8013d66:	429c      	cmp	r4, r3
 8013d68:	d101      	bne.n	8013d6e <__swsetup_r+0x46>
 8013d6a:	68ac      	ldr	r4, [r5, #8]
 8013d6c:	e7eb      	b.n	8013d46 <__swsetup_r+0x1e>
 8013d6e:	4b24      	ldr	r3, [pc, #144]	; (8013e00 <__swsetup_r+0xd8>)
 8013d70:	429c      	cmp	r4, r3
 8013d72:	bf08      	it	eq
 8013d74:	68ec      	ldreq	r4, [r5, #12]
 8013d76:	e7e6      	b.n	8013d46 <__swsetup_r+0x1e>
 8013d78:	0751      	lsls	r1, r2, #29
 8013d7a:	d512      	bpl.n	8013da2 <__swsetup_r+0x7a>
 8013d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d7e:	b141      	cbz	r1, 8013d92 <__swsetup_r+0x6a>
 8013d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d84:	4299      	cmp	r1, r3
 8013d86:	d002      	beq.n	8013d8e <__swsetup_r+0x66>
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f001 ff55 	bl	8015c38 <_free_r>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	6363      	str	r3, [r4, #52]	; 0x34
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013d98:	81a3      	strh	r3, [r4, #12]
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	6063      	str	r3, [r4, #4]
 8013d9e:	6923      	ldr	r3, [r4, #16]
 8013da0:	6023      	str	r3, [r4, #0]
 8013da2:	89a3      	ldrh	r3, [r4, #12]
 8013da4:	f043 0308 	orr.w	r3, r3, #8
 8013da8:	81a3      	strh	r3, [r4, #12]
 8013daa:	6923      	ldr	r3, [r4, #16]
 8013dac:	b94b      	cbnz	r3, 8013dc2 <__swsetup_r+0x9a>
 8013dae:	89a3      	ldrh	r3, [r4, #12]
 8013db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013db8:	d003      	beq.n	8013dc2 <__swsetup_r+0x9a>
 8013dba:	4621      	mov	r1, r4
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f001 fad3 	bl	8015368 <__smakebuf_r>
 8013dc2:	89a2      	ldrh	r2, [r4, #12]
 8013dc4:	f012 0301 	ands.w	r3, r2, #1
 8013dc8:	d00c      	beq.n	8013de4 <__swsetup_r+0xbc>
 8013dca:	2300      	movs	r3, #0
 8013dcc:	60a3      	str	r3, [r4, #8]
 8013dce:	6963      	ldr	r3, [r4, #20]
 8013dd0:	425b      	negs	r3, r3
 8013dd2:	61a3      	str	r3, [r4, #24]
 8013dd4:	6923      	ldr	r3, [r4, #16]
 8013dd6:	b953      	cbnz	r3, 8013dee <__swsetup_r+0xc6>
 8013dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ddc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013de0:	d1ba      	bne.n	8013d58 <__swsetup_r+0x30>
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	0792      	lsls	r2, r2, #30
 8013de6:	bf58      	it	pl
 8013de8:	6963      	ldrpl	r3, [r4, #20]
 8013dea:	60a3      	str	r3, [r4, #8]
 8013dec:	e7f2      	b.n	8013dd4 <__swsetup_r+0xac>
 8013dee:	2000      	movs	r0, #0
 8013df0:	e7f7      	b.n	8013de2 <__swsetup_r+0xba>
 8013df2:	bf00      	nop
 8013df4:	200001b8 	.word	0x200001b8
 8013df8:	080171f8 	.word	0x080171f8
 8013dfc:	08017218 	.word	0x08017218
 8013e00:	080171d8 	.word	0x080171d8

08013e04 <quorem>:
 8013e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e08:	6903      	ldr	r3, [r0, #16]
 8013e0a:	690c      	ldr	r4, [r1, #16]
 8013e0c:	42a3      	cmp	r3, r4
 8013e0e:	4680      	mov	r8, r0
 8013e10:	f2c0 8082 	blt.w	8013f18 <quorem+0x114>
 8013e14:	3c01      	subs	r4, #1
 8013e16:	f101 0714 	add.w	r7, r1, #20
 8013e1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013e1e:	f100 0614 	add.w	r6, r0, #20
 8013e22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013e26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013e2a:	eb06 030c 	add.w	r3, r6, ip
 8013e2e:	3501      	adds	r5, #1
 8013e30:	eb07 090c 	add.w	r9, r7, ip
 8013e34:	9301      	str	r3, [sp, #4]
 8013e36:	fbb0 f5f5 	udiv	r5, r0, r5
 8013e3a:	b395      	cbz	r5, 8013ea2 <quorem+0x9e>
 8013e3c:	f04f 0a00 	mov.w	sl, #0
 8013e40:	4638      	mov	r0, r7
 8013e42:	46b6      	mov	lr, r6
 8013e44:	46d3      	mov	fp, sl
 8013e46:	f850 2b04 	ldr.w	r2, [r0], #4
 8013e4a:	b293      	uxth	r3, r2
 8013e4c:	fb05 a303 	mla	r3, r5, r3, sl
 8013e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	ebab 0303 	sub.w	r3, fp, r3
 8013e5a:	0c12      	lsrs	r2, r2, #16
 8013e5c:	f8de b000 	ldr.w	fp, [lr]
 8013e60:	fb05 a202 	mla	r2, r5, r2, sl
 8013e64:	fa13 f38b 	uxtah	r3, r3, fp
 8013e68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013e6c:	fa1f fb82 	uxth.w	fp, r2
 8013e70:	f8de 2000 	ldr.w	r2, [lr]
 8013e74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013e78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e82:	4581      	cmp	r9, r0
 8013e84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013e88:	f84e 3b04 	str.w	r3, [lr], #4
 8013e8c:	d2db      	bcs.n	8013e46 <quorem+0x42>
 8013e8e:	f856 300c 	ldr.w	r3, [r6, ip]
 8013e92:	b933      	cbnz	r3, 8013ea2 <quorem+0x9e>
 8013e94:	9b01      	ldr	r3, [sp, #4]
 8013e96:	3b04      	subs	r3, #4
 8013e98:	429e      	cmp	r6, r3
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	d330      	bcc.n	8013f00 <quorem+0xfc>
 8013e9e:	f8c8 4010 	str.w	r4, [r8, #16]
 8013ea2:	4640      	mov	r0, r8
 8013ea4:	f001 fd0e 	bl	80158c4 <__mcmp>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	db25      	blt.n	8013ef8 <quorem+0xf4>
 8013eac:	3501      	adds	r5, #1
 8013eae:	4630      	mov	r0, r6
 8013eb0:	f04f 0c00 	mov.w	ip, #0
 8013eb4:	f857 2b04 	ldr.w	r2, [r7], #4
 8013eb8:	f8d0 e000 	ldr.w	lr, [r0]
 8013ebc:	b293      	uxth	r3, r2
 8013ebe:	ebac 0303 	sub.w	r3, ip, r3
 8013ec2:	0c12      	lsrs	r2, r2, #16
 8013ec4:	fa13 f38e 	uxtah	r3, r3, lr
 8013ec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ed6:	45b9      	cmp	r9, r7
 8013ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013edc:	f840 3b04 	str.w	r3, [r0], #4
 8013ee0:	d2e8      	bcs.n	8013eb4 <quorem+0xb0>
 8013ee2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013ee6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013eea:	b92a      	cbnz	r2, 8013ef8 <quorem+0xf4>
 8013eec:	3b04      	subs	r3, #4
 8013eee:	429e      	cmp	r6, r3
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	d30b      	bcc.n	8013f0c <quorem+0x108>
 8013ef4:	f8c8 4010 	str.w	r4, [r8, #16]
 8013ef8:	4628      	mov	r0, r5
 8013efa:	b003      	add	sp, #12
 8013efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f00:	6812      	ldr	r2, [r2, #0]
 8013f02:	3b04      	subs	r3, #4
 8013f04:	2a00      	cmp	r2, #0
 8013f06:	d1ca      	bne.n	8013e9e <quorem+0x9a>
 8013f08:	3c01      	subs	r4, #1
 8013f0a:	e7c5      	b.n	8013e98 <quorem+0x94>
 8013f0c:	6812      	ldr	r2, [r2, #0]
 8013f0e:	3b04      	subs	r3, #4
 8013f10:	2a00      	cmp	r2, #0
 8013f12:	d1ef      	bne.n	8013ef4 <quorem+0xf0>
 8013f14:	3c01      	subs	r4, #1
 8013f16:	e7ea      	b.n	8013eee <quorem+0xea>
 8013f18:	2000      	movs	r0, #0
 8013f1a:	e7ee      	b.n	8013efa <quorem+0xf6>
 8013f1c:	0000      	movs	r0, r0
	...

08013f20 <_dtoa_r>:
 8013f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f24:	ec57 6b10 	vmov	r6, r7, d0
 8013f28:	b095      	sub	sp, #84	; 0x54
 8013f2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013f2c:	9108      	str	r1, [sp, #32]
 8013f2e:	4604      	mov	r4, r0
 8013f30:	920a      	str	r2, [sp, #40]	; 0x28
 8013f32:	9311      	str	r3, [sp, #68]	; 0x44
 8013f34:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8013f38:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013f3c:	b93d      	cbnz	r5, 8013f4e <_dtoa_r+0x2e>
 8013f3e:	2010      	movs	r0, #16
 8013f40:	f001 fa52 	bl	80153e8 <malloc>
 8013f44:	6260      	str	r0, [r4, #36]	; 0x24
 8013f46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013f4a:	6005      	str	r5, [r0, #0]
 8013f4c:	60c5      	str	r5, [r0, #12]
 8013f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f50:	6819      	ldr	r1, [r3, #0]
 8013f52:	b151      	cbz	r1, 8013f6a <_dtoa_r+0x4a>
 8013f54:	685a      	ldr	r2, [r3, #4]
 8013f56:	604a      	str	r2, [r1, #4]
 8013f58:	2301      	movs	r3, #1
 8013f5a:	4093      	lsls	r3, r2
 8013f5c:	608b      	str	r3, [r1, #8]
 8013f5e:	4620      	mov	r0, r4
 8013f60:	f001 fa90 	bl	8015484 <_Bfree>
 8013f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f66:	2200      	movs	r2, #0
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	1e3b      	subs	r3, r7, #0
 8013f6c:	bfb9      	ittee	lt
 8013f6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013f72:	9303      	strlt	r3, [sp, #12]
 8013f74:	2300      	movge	r3, #0
 8013f76:	f8c8 3000 	strge.w	r3, [r8]
 8013f7a:	9d03      	ldr	r5, [sp, #12]
 8013f7c:	4bac      	ldr	r3, [pc, #688]	; (8014230 <_dtoa_r+0x310>)
 8013f7e:	bfbc      	itt	lt
 8013f80:	2201      	movlt	r2, #1
 8013f82:	f8c8 2000 	strlt.w	r2, [r8]
 8013f86:	43ab      	bics	r3, r5
 8013f88:	d11b      	bne.n	8013fc2 <_dtoa_r+0xa2>
 8013f8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013f8c:	f242 730f 	movw	r3, #9999	; 0x270f
 8013f90:	6013      	str	r3, [r2, #0]
 8013f92:	9b02      	ldr	r3, [sp, #8]
 8013f94:	b923      	cbnz	r3, 8013fa0 <_dtoa_r+0x80>
 8013f96:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013f9a:	2d00      	cmp	r5, #0
 8013f9c:	f000 84dd 	beq.w	801495a <_dtoa_r+0xa3a>
 8013fa0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013fa2:	b953      	cbnz	r3, 8013fba <_dtoa_r+0x9a>
 8013fa4:	4ba3      	ldr	r3, [pc, #652]	; (8014234 <_dtoa_r+0x314>)
 8013fa6:	e020      	b.n	8013fea <_dtoa_r+0xca>
 8013fa8:	4ba3      	ldr	r3, [pc, #652]	; (8014238 <_dtoa_r+0x318>)
 8013faa:	9304      	str	r3, [sp, #16]
 8013fac:	3308      	adds	r3, #8
 8013fae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013fb0:	6013      	str	r3, [r2, #0]
 8013fb2:	9804      	ldr	r0, [sp, #16]
 8013fb4:	b015      	add	sp, #84	; 0x54
 8013fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fba:	4b9e      	ldr	r3, [pc, #632]	; (8014234 <_dtoa_r+0x314>)
 8013fbc:	9304      	str	r3, [sp, #16]
 8013fbe:	3303      	adds	r3, #3
 8013fc0:	e7f5      	b.n	8013fae <_dtoa_r+0x8e>
 8013fc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013fc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fce:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013fd2:	d10c      	bne.n	8013fee <_dtoa_r+0xce>
 8013fd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	6013      	str	r3, [r2, #0]
 8013fda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f000 84b9 	beq.w	8014954 <_dtoa_r+0xa34>
 8013fe2:	4b96      	ldr	r3, [pc, #600]	; (801423c <_dtoa_r+0x31c>)
 8013fe4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013fe6:	6013      	str	r3, [r2, #0]
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	9304      	str	r3, [sp, #16]
 8013fec:	e7e1      	b.n	8013fb2 <_dtoa_r+0x92>
 8013fee:	a913      	add	r1, sp, #76	; 0x4c
 8013ff0:	aa12      	add	r2, sp, #72	; 0x48
 8013ff2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f001 fd52 	bl	8015aa0 <__d2b>
 8013ffc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8014000:	9001      	str	r0, [sp, #4]
 8014002:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014004:	2e00      	cmp	r6, #0
 8014006:	d046      	beq.n	8014096 <_dtoa_r+0x176>
 8014008:	9805      	ldr	r0, [sp, #20]
 801400a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801400e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014012:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8014016:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801401a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801401e:	2700      	movs	r7, #0
 8014020:	ee07 aa90 	vmov	s15, sl
 8014024:	ec43 2b16 	vmov	d6, r2, r3
 8014028:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801402c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8014218 <_dtoa_r+0x2f8>
 8014030:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014034:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014038:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8014220 <_dtoa_r+0x300>
 801403c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014040:	eeb0 7b46 	vmov.f64	d7, d6
 8014044:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8014228 <_dtoa_r+0x308>
 8014048:	eea5 7b06 	vfma.f64	d7, d5, d6
 801404c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014050:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014058:	ee16 ba90 	vmov	fp, s13
 801405c:	d508      	bpl.n	8014070 <_dtoa_r+0x150>
 801405e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014062:	eeb4 6b47 	vcmp.f64	d6, d7
 8014066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406a:	bf18      	it	ne
 801406c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014070:	f1bb 0f16 	cmp.w	fp, #22
 8014074:	d834      	bhi.n	80140e0 <_dtoa_r+0x1c0>
 8014076:	4b72      	ldr	r3, [pc, #456]	; (8014240 <_dtoa_r+0x320>)
 8014078:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801407c:	ed93 7b00 	vldr	d7, [r3]
 8014080:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014084:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801408c:	dd01      	ble.n	8014092 <_dtoa_r+0x172>
 801408e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014092:	2300      	movs	r3, #0
 8014094:	e025      	b.n	80140e2 <_dtoa_r+0x1c2>
 8014096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014098:	eb01 0a03 	add.w	sl, r1, r3
 801409c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80140a0:	2b20      	cmp	r3, #32
 80140a2:	dd17      	ble.n	80140d4 <_dtoa_r+0x1b4>
 80140a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80140a8:	9a02      	ldr	r2, [sp, #8]
 80140aa:	409d      	lsls	r5, r3
 80140ac:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80140b0:	fa22 f303 	lsr.w	r3, r2, r3
 80140b4:	432b      	orrs	r3, r5
 80140b6:	ee07 3a90 	vmov	s15, r3
 80140ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80140be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80140c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80140c6:	9805      	ldr	r0, [sp, #20]
 80140c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140cc:	2701      	movs	r7, #1
 80140ce:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80140d2:	e7a5      	b.n	8014020 <_dtoa_r+0x100>
 80140d4:	9a02      	ldr	r2, [sp, #8]
 80140d6:	f1c3 0320 	rsb	r3, r3, #32
 80140da:	fa02 f303 	lsl.w	r3, r2, r3
 80140de:	e7ea      	b.n	80140b6 <_dtoa_r+0x196>
 80140e0:	2301      	movs	r3, #1
 80140e2:	eba1 0a0a 	sub.w	sl, r1, sl
 80140e6:	9310      	str	r3, [sp, #64]	; 0x40
 80140e8:	f1ba 0301 	subs.w	r3, sl, #1
 80140ec:	9307      	str	r3, [sp, #28]
 80140ee:	bf43      	ittte	mi
 80140f0:	2300      	movmi	r3, #0
 80140f2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80140f6:	9307      	strmi	r3, [sp, #28]
 80140f8:	f04f 0a00 	movpl.w	sl, #0
 80140fc:	f1bb 0f00 	cmp.w	fp, #0
 8014100:	db19      	blt.n	8014136 <_dtoa_r+0x216>
 8014102:	9b07      	ldr	r3, [sp, #28]
 8014104:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014108:	445b      	add	r3, fp
 801410a:	9307      	str	r3, [sp, #28]
 801410c:	f04f 0800 	mov.w	r8, #0
 8014110:	9b08      	ldr	r3, [sp, #32]
 8014112:	2b09      	cmp	r3, #9
 8014114:	d866      	bhi.n	80141e4 <_dtoa_r+0x2c4>
 8014116:	2b05      	cmp	r3, #5
 8014118:	bfc4      	itt	gt
 801411a:	3b04      	subgt	r3, #4
 801411c:	9308      	strgt	r3, [sp, #32]
 801411e:	9b08      	ldr	r3, [sp, #32]
 8014120:	f1a3 0302 	sub.w	r3, r3, #2
 8014124:	bfcc      	ite	gt
 8014126:	2500      	movgt	r5, #0
 8014128:	2501      	movle	r5, #1
 801412a:	2b03      	cmp	r3, #3
 801412c:	d866      	bhi.n	80141fc <_dtoa_r+0x2dc>
 801412e:	e8df f003 	tbb	[pc, r3]
 8014132:	5755      	.short	0x5755
 8014134:	4909      	.short	0x4909
 8014136:	2300      	movs	r3, #0
 8014138:	ebaa 0a0b 	sub.w	sl, sl, fp
 801413c:	f1cb 0800 	rsb	r8, fp, #0
 8014140:	930b      	str	r3, [sp, #44]	; 0x2c
 8014142:	e7e5      	b.n	8014110 <_dtoa_r+0x1f0>
 8014144:	2301      	movs	r3, #1
 8014146:	9309      	str	r3, [sp, #36]	; 0x24
 8014148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801414a:	2b00      	cmp	r3, #0
 801414c:	dd59      	ble.n	8014202 <_dtoa_r+0x2e2>
 801414e:	9306      	str	r3, [sp, #24]
 8014150:	4699      	mov	r9, r3
 8014152:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014154:	2200      	movs	r2, #0
 8014156:	6072      	str	r2, [r6, #4]
 8014158:	2204      	movs	r2, #4
 801415a:	f102 0014 	add.w	r0, r2, #20
 801415e:	4298      	cmp	r0, r3
 8014160:	6871      	ldr	r1, [r6, #4]
 8014162:	d953      	bls.n	801420c <_dtoa_r+0x2ec>
 8014164:	4620      	mov	r0, r4
 8014166:	f001 f959 	bl	801541c <_Balloc>
 801416a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801416c:	6030      	str	r0, [r6, #0]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	9304      	str	r3, [sp, #16]
 8014172:	f1b9 0f0e 	cmp.w	r9, #14
 8014176:	f200 80c2 	bhi.w	80142fe <_dtoa_r+0x3de>
 801417a:	2d00      	cmp	r5, #0
 801417c:	f000 80bf 	beq.w	80142fe <_dtoa_r+0x3de>
 8014180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014184:	f1bb 0f00 	cmp.w	fp, #0
 8014188:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801418c:	f340 80e6 	ble.w	801435c <_dtoa_r+0x43c>
 8014190:	4a2b      	ldr	r2, [pc, #172]	; (8014240 <_dtoa_r+0x320>)
 8014192:	f00b 030f 	and.w	r3, fp, #15
 8014196:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801419a:	ed93 7b00 	vldr	d7, [r3]
 801419e:	ea4f 132b 	mov.w	r3, fp, asr #4
 80141a2:	06da      	lsls	r2, r3, #27
 80141a4:	f140 80d8 	bpl.w	8014358 <_dtoa_r+0x438>
 80141a8:	4a26      	ldr	r2, [pc, #152]	; (8014244 <_dtoa_r+0x324>)
 80141aa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80141ae:	ed92 6b08 	vldr	d6, [r2, #32]
 80141b2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80141b6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80141ba:	f003 030f 	and.w	r3, r3, #15
 80141be:	2203      	movs	r2, #3
 80141c0:	4920      	ldr	r1, [pc, #128]	; (8014244 <_dtoa_r+0x324>)
 80141c2:	e04a      	b.n	801425a <_dtoa_r+0x33a>
 80141c4:	2301      	movs	r3, #1
 80141c6:	9309      	str	r3, [sp, #36]	; 0x24
 80141c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141ca:	445b      	add	r3, fp
 80141cc:	f103 0901 	add.w	r9, r3, #1
 80141d0:	9306      	str	r3, [sp, #24]
 80141d2:	464b      	mov	r3, r9
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	bfb8      	it	lt
 80141d8:	2301      	movlt	r3, #1
 80141da:	e7ba      	b.n	8014152 <_dtoa_r+0x232>
 80141dc:	2300      	movs	r3, #0
 80141de:	e7b2      	b.n	8014146 <_dtoa_r+0x226>
 80141e0:	2300      	movs	r3, #0
 80141e2:	e7f0      	b.n	80141c6 <_dtoa_r+0x2a6>
 80141e4:	2501      	movs	r5, #1
 80141e6:	2300      	movs	r3, #0
 80141e8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80141ec:	f04f 33ff 	mov.w	r3, #4294967295
 80141f0:	9306      	str	r3, [sp, #24]
 80141f2:	4699      	mov	r9, r3
 80141f4:	2200      	movs	r2, #0
 80141f6:	2312      	movs	r3, #18
 80141f8:	920a      	str	r2, [sp, #40]	; 0x28
 80141fa:	e7aa      	b.n	8014152 <_dtoa_r+0x232>
 80141fc:	2301      	movs	r3, #1
 80141fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014200:	e7f4      	b.n	80141ec <_dtoa_r+0x2cc>
 8014202:	2301      	movs	r3, #1
 8014204:	9306      	str	r3, [sp, #24]
 8014206:	4699      	mov	r9, r3
 8014208:	461a      	mov	r2, r3
 801420a:	e7f5      	b.n	80141f8 <_dtoa_r+0x2d8>
 801420c:	3101      	adds	r1, #1
 801420e:	6071      	str	r1, [r6, #4]
 8014210:	0052      	lsls	r2, r2, #1
 8014212:	e7a2      	b.n	801415a <_dtoa_r+0x23a>
 8014214:	f3af 8000 	nop.w
 8014218:	636f4361 	.word	0x636f4361
 801421c:	3fd287a7 	.word	0x3fd287a7
 8014220:	8b60c8b3 	.word	0x8b60c8b3
 8014224:	3fc68a28 	.word	0x3fc68a28
 8014228:	509f79fb 	.word	0x509f79fb
 801422c:	3fd34413 	.word	0x3fd34413
 8014230:	7ff00000 	.word	0x7ff00000
 8014234:	080171d1 	.word	0x080171d1
 8014238:	080171c8 	.word	0x080171c8
 801423c:	0801714d 	.word	0x0801714d
 8014240:	08017270 	.word	0x08017270
 8014244:	08017248 	.word	0x08017248
 8014248:	07de      	lsls	r6, r3, #31
 801424a:	d504      	bpl.n	8014256 <_dtoa_r+0x336>
 801424c:	ed91 6b00 	vldr	d6, [r1]
 8014250:	3201      	adds	r2, #1
 8014252:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014256:	105b      	asrs	r3, r3, #1
 8014258:	3108      	adds	r1, #8
 801425a:	2b00      	cmp	r3, #0
 801425c:	d1f4      	bne.n	8014248 <_dtoa_r+0x328>
 801425e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014262:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014266:	ed8d 7b02 	vstr	d7, [sp, #8]
 801426a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801426c:	2b00      	cmp	r3, #0
 801426e:	f000 80a7 	beq.w	80143c0 <_dtoa_r+0x4a0>
 8014272:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014276:	ed9d 7b02 	vldr	d7, [sp, #8]
 801427a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014282:	f140 809d 	bpl.w	80143c0 <_dtoa_r+0x4a0>
 8014286:	f1b9 0f00 	cmp.w	r9, #0
 801428a:	f000 8099 	beq.w	80143c0 <_dtoa_r+0x4a0>
 801428e:	9b06      	ldr	r3, [sp, #24]
 8014290:	2b00      	cmp	r3, #0
 8014292:	dd30      	ble.n	80142f6 <_dtoa_r+0x3d6>
 8014294:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014298:	ee27 7b06 	vmul.f64	d7, d7, d6
 801429c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80142a0:	9d06      	ldr	r5, [sp, #24]
 80142a2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80142a6:	3201      	adds	r2, #1
 80142a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80142ac:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80142b0:	ee07 2a90 	vmov	s15, r2
 80142b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80142b8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80142bc:	ed8d 5b02 	vstr	d5, [sp, #8]
 80142c0:	9a03      	ldr	r2, [sp, #12]
 80142c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142c6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80142ca:	2d00      	cmp	r5, #0
 80142cc:	d17b      	bne.n	80143c6 <_dtoa_r+0x4a6>
 80142ce:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80142d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80142d6:	ec41 0b17 	vmov	d7, r0, r1
 80142da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80142de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e2:	f300 8253 	bgt.w	801478c <_dtoa_r+0x86c>
 80142e6:	eeb1 7b47 	vneg.f64	d7, d7
 80142ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80142ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f2:	f100 8249 	bmi.w	8014788 <_dtoa_r+0x868>
 80142f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80142fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014300:	2b00      	cmp	r3, #0
 8014302:	f2c0 8119 	blt.w	8014538 <_dtoa_r+0x618>
 8014306:	f1bb 0f0e 	cmp.w	fp, #14
 801430a:	f300 8115 	bgt.w	8014538 <_dtoa_r+0x618>
 801430e:	4bc3      	ldr	r3, [pc, #780]	; (801461c <_dtoa_r+0x6fc>)
 8014310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014314:	ed93 6b00 	vldr	d6, [r3]
 8014318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801431a:	2b00      	cmp	r3, #0
 801431c:	f280 80ba 	bge.w	8014494 <_dtoa_r+0x574>
 8014320:	f1b9 0f00 	cmp.w	r9, #0
 8014324:	f300 80b6 	bgt.w	8014494 <_dtoa_r+0x574>
 8014328:	f040 822d 	bne.w	8014786 <_dtoa_r+0x866>
 801432c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014330:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014334:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014338:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014340:	464d      	mov	r5, r9
 8014342:	464f      	mov	r7, r9
 8014344:	f280 8204 	bge.w	8014750 <_dtoa_r+0x830>
 8014348:	9b04      	ldr	r3, [sp, #16]
 801434a:	9a04      	ldr	r2, [sp, #16]
 801434c:	1c5e      	adds	r6, r3, #1
 801434e:	2331      	movs	r3, #49	; 0x31
 8014350:	7013      	strb	r3, [r2, #0]
 8014352:	f10b 0b01 	add.w	fp, fp, #1
 8014356:	e1ff      	b.n	8014758 <_dtoa_r+0x838>
 8014358:	2202      	movs	r2, #2
 801435a:	e731      	b.n	80141c0 <_dtoa_r+0x2a0>
 801435c:	d02e      	beq.n	80143bc <_dtoa_r+0x49c>
 801435e:	f1cb 0300 	rsb	r3, fp, #0
 8014362:	4aae      	ldr	r2, [pc, #696]	; (801461c <_dtoa_r+0x6fc>)
 8014364:	f003 010f 	and.w	r1, r3, #15
 8014368:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801436c:	ed92 7b00 	vldr	d7, [r2]
 8014370:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8014374:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014378:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801437c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8014380:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014384:	49a6      	ldr	r1, [pc, #664]	; (8014620 <_dtoa_r+0x700>)
 8014386:	111b      	asrs	r3, r3, #4
 8014388:	2000      	movs	r0, #0
 801438a:	2202      	movs	r2, #2
 801438c:	b93b      	cbnz	r3, 801439e <_dtoa_r+0x47e>
 801438e:	2800      	cmp	r0, #0
 8014390:	f43f af6b 	beq.w	801426a <_dtoa_r+0x34a>
 8014394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801439c:	e765      	b.n	801426a <_dtoa_r+0x34a>
 801439e:	07dd      	lsls	r5, r3, #31
 80143a0:	d509      	bpl.n	80143b6 <_dtoa_r+0x496>
 80143a2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80143a6:	ed91 7b00 	vldr	d7, [r1]
 80143aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80143ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80143b2:	3201      	adds	r2, #1
 80143b4:	2001      	movs	r0, #1
 80143b6:	105b      	asrs	r3, r3, #1
 80143b8:	3108      	adds	r1, #8
 80143ba:	e7e7      	b.n	801438c <_dtoa_r+0x46c>
 80143bc:	2202      	movs	r2, #2
 80143be:	e754      	b.n	801426a <_dtoa_r+0x34a>
 80143c0:	465b      	mov	r3, fp
 80143c2:	464d      	mov	r5, r9
 80143c4:	e770      	b.n	80142a8 <_dtoa_r+0x388>
 80143c6:	4a95      	ldr	r2, [pc, #596]	; (801461c <_dtoa_r+0x6fc>)
 80143c8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80143cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80143d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143d2:	ec41 0b17 	vmov	d7, r0, r1
 80143d6:	b35a      	cbz	r2, 8014430 <_dtoa_r+0x510>
 80143d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80143dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80143e0:	9e04      	ldr	r6, [sp, #16]
 80143e2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80143e6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80143ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80143ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80143f2:	ee14 2a90 	vmov	r2, s9
 80143f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80143fa:	3230      	adds	r2, #48	; 0x30
 80143fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014400:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014408:	f806 2b01 	strb.w	r2, [r6], #1
 801440c:	d43b      	bmi.n	8014486 <_dtoa_r+0x566>
 801440e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014412:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441a:	d472      	bmi.n	8014502 <_dtoa_r+0x5e2>
 801441c:	9a04      	ldr	r2, [sp, #16]
 801441e:	1ab2      	subs	r2, r6, r2
 8014420:	4295      	cmp	r5, r2
 8014422:	f77f af68 	ble.w	80142f6 <_dtoa_r+0x3d6>
 8014426:	ee27 7b03 	vmul.f64	d7, d7, d3
 801442a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801442e:	e7de      	b.n	80143ee <_dtoa_r+0x4ce>
 8014430:	9a04      	ldr	r2, [sp, #16]
 8014432:	ee24 7b07 	vmul.f64	d7, d4, d7
 8014436:	1956      	adds	r6, r2, r5
 8014438:	4611      	mov	r1, r2
 801443a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801443e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014442:	ee14 2a90 	vmov	r2, s9
 8014446:	3230      	adds	r2, #48	; 0x30
 8014448:	f801 2b01 	strb.w	r2, [r1], #1
 801444c:	42b1      	cmp	r1, r6
 801444e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014452:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014456:	d11a      	bne.n	801448e <_dtoa_r+0x56e>
 8014458:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801445c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014460:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014468:	dc4b      	bgt.n	8014502 <_dtoa_r+0x5e2>
 801446a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801446e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014476:	f57f af3e 	bpl.w	80142f6 <_dtoa_r+0x3d6>
 801447a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801447e:	2a30      	cmp	r2, #48	; 0x30
 8014480:	f106 31ff 	add.w	r1, r6, #4294967295
 8014484:	d001      	beq.n	801448a <_dtoa_r+0x56a>
 8014486:	469b      	mov	fp, r3
 8014488:	e02a      	b.n	80144e0 <_dtoa_r+0x5c0>
 801448a:	460e      	mov	r6, r1
 801448c:	e7f5      	b.n	801447a <_dtoa_r+0x55a>
 801448e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014492:	e7d4      	b.n	801443e <_dtoa_r+0x51e>
 8014494:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014498:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801449c:	9e04      	ldr	r6, [sp, #16]
 801449e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80144a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80144a6:	ee15 3a10 	vmov	r3, s10
 80144aa:	3330      	adds	r3, #48	; 0x30
 80144ac:	f806 3b01 	strb.w	r3, [r6], #1
 80144b0:	9b04      	ldr	r3, [sp, #16]
 80144b2:	1af3      	subs	r3, r6, r3
 80144b4:	4599      	cmp	r9, r3
 80144b6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80144ba:	eea3 7b46 	vfms.f64	d7, d3, d6
 80144be:	d133      	bne.n	8014528 <_dtoa_r+0x608>
 80144c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80144c4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80144c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144cc:	dc18      	bgt.n	8014500 <_dtoa_r+0x5e0>
 80144ce:	eeb4 7b46 	vcmp.f64	d7, d6
 80144d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d6:	d103      	bne.n	80144e0 <_dtoa_r+0x5c0>
 80144d8:	ee15 3a10 	vmov	r3, s10
 80144dc:	07db      	lsls	r3, r3, #31
 80144de:	d40f      	bmi.n	8014500 <_dtoa_r+0x5e0>
 80144e0:	9901      	ldr	r1, [sp, #4]
 80144e2:	4620      	mov	r0, r4
 80144e4:	f000 ffce 	bl	8015484 <_Bfree>
 80144e8:	2300      	movs	r3, #0
 80144ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80144ec:	7033      	strb	r3, [r6, #0]
 80144ee:	f10b 0301 	add.w	r3, fp, #1
 80144f2:	6013      	str	r3, [r2, #0]
 80144f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f43f ad5b 	beq.w	8013fb2 <_dtoa_r+0x92>
 80144fc:	601e      	str	r6, [r3, #0]
 80144fe:	e558      	b.n	8013fb2 <_dtoa_r+0x92>
 8014500:	465b      	mov	r3, fp
 8014502:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014506:	2939      	cmp	r1, #57	; 0x39
 8014508:	f106 32ff 	add.w	r2, r6, #4294967295
 801450c:	d106      	bne.n	801451c <_dtoa_r+0x5fc>
 801450e:	9904      	ldr	r1, [sp, #16]
 8014510:	4291      	cmp	r1, r2
 8014512:	d107      	bne.n	8014524 <_dtoa_r+0x604>
 8014514:	2230      	movs	r2, #48	; 0x30
 8014516:	700a      	strb	r2, [r1, #0]
 8014518:	3301      	adds	r3, #1
 801451a:	460a      	mov	r2, r1
 801451c:	7811      	ldrb	r1, [r2, #0]
 801451e:	3101      	adds	r1, #1
 8014520:	7011      	strb	r1, [r2, #0]
 8014522:	e7b0      	b.n	8014486 <_dtoa_r+0x566>
 8014524:	4616      	mov	r6, r2
 8014526:	e7ec      	b.n	8014502 <_dtoa_r+0x5e2>
 8014528:	ee27 7b04 	vmul.f64	d7, d7, d4
 801452c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014534:	d1b3      	bne.n	801449e <_dtoa_r+0x57e>
 8014536:	e7d3      	b.n	80144e0 <_dtoa_r+0x5c0>
 8014538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801453a:	2a00      	cmp	r2, #0
 801453c:	f000 808d 	beq.w	801465a <_dtoa_r+0x73a>
 8014540:	9a08      	ldr	r2, [sp, #32]
 8014542:	2a01      	cmp	r2, #1
 8014544:	dc72      	bgt.n	801462c <_dtoa_r+0x70c>
 8014546:	2f00      	cmp	r7, #0
 8014548:	d06c      	beq.n	8014624 <_dtoa_r+0x704>
 801454a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801454e:	4645      	mov	r5, r8
 8014550:	4656      	mov	r6, sl
 8014552:	9a07      	ldr	r2, [sp, #28]
 8014554:	2101      	movs	r1, #1
 8014556:	441a      	add	r2, r3
 8014558:	4620      	mov	r0, r4
 801455a:	449a      	add	sl, r3
 801455c:	9207      	str	r2, [sp, #28]
 801455e:	f001 f86f 	bl	8015640 <__i2b>
 8014562:	4607      	mov	r7, r0
 8014564:	2e00      	cmp	r6, #0
 8014566:	dd0b      	ble.n	8014580 <_dtoa_r+0x660>
 8014568:	9b07      	ldr	r3, [sp, #28]
 801456a:	2b00      	cmp	r3, #0
 801456c:	dd08      	ble.n	8014580 <_dtoa_r+0x660>
 801456e:	42b3      	cmp	r3, r6
 8014570:	9a07      	ldr	r2, [sp, #28]
 8014572:	bfa8      	it	ge
 8014574:	4633      	movge	r3, r6
 8014576:	ebaa 0a03 	sub.w	sl, sl, r3
 801457a:	1af6      	subs	r6, r6, r3
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	9307      	str	r3, [sp, #28]
 8014580:	f1b8 0f00 	cmp.w	r8, #0
 8014584:	d01d      	beq.n	80145c2 <_dtoa_r+0x6a2>
 8014586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014588:	2b00      	cmp	r3, #0
 801458a:	d06a      	beq.n	8014662 <_dtoa_r+0x742>
 801458c:	b18d      	cbz	r5, 80145b2 <_dtoa_r+0x692>
 801458e:	4639      	mov	r1, r7
 8014590:	462a      	mov	r2, r5
 8014592:	4620      	mov	r0, r4
 8014594:	f001 f8f4 	bl	8015780 <__pow5mult>
 8014598:	9a01      	ldr	r2, [sp, #4]
 801459a:	4601      	mov	r1, r0
 801459c:	4607      	mov	r7, r0
 801459e:	4620      	mov	r0, r4
 80145a0:	f001 f857 	bl	8015652 <__multiply>
 80145a4:	9901      	ldr	r1, [sp, #4]
 80145a6:	900c      	str	r0, [sp, #48]	; 0x30
 80145a8:	4620      	mov	r0, r4
 80145aa:	f000 ff6b 	bl	8015484 <_Bfree>
 80145ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145b0:	9301      	str	r3, [sp, #4]
 80145b2:	ebb8 0205 	subs.w	r2, r8, r5
 80145b6:	d004      	beq.n	80145c2 <_dtoa_r+0x6a2>
 80145b8:	9901      	ldr	r1, [sp, #4]
 80145ba:	4620      	mov	r0, r4
 80145bc:	f001 f8e0 	bl	8015780 <__pow5mult>
 80145c0:	9001      	str	r0, [sp, #4]
 80145c2:	2101      	movs	r1, #1
 80145c4:	4620      	mov	r0, r4
 80145c6:	f001 f83b 	bl	8015640 <__i2b>
 80145ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145cc:	4605      	mov	r5, r0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	f000 81ca 	beq.w	8014968 <_dtoa_r+0xa48>
 80145d4:	461a      	mov	r2, r3
 80145d6:	4601      	mov	r1, r0
 80145d8:	4620      	mov	r0, r4
 80145da:	f001 f8d1 	bl	8015780 <__pow5mult>
 80145de:	9b08      	ldr	r3, [sp, #32]
 80145e0:	2b01      	cmp	r3, #1
 80145e2:	4605      	mov	r5, r0
 80145e4:	dc44      	bgt.n	8014670 <_dtoa_r+0x750>
 80145e6:	9b02      	ldr	r3, [sp, #8]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d13c      	bne.n	8014666 <_dtoa_r+0x746>
 80145ec:	9b03      	ldr	r3, [sp, #12]
 80145ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d137      	bne.n	8014666 <_dtoa_r+0x746>
 80145f6:	9b03      	ldr	r3, [sp, #12]
 80145f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145fc:	0d1b      	lsrs	r3, r3, #20
 80145fe:	051b      	lsls	r3, r3, #20
 8014600:	2b00      	cmp	r3, #0
 8014602:	d033      	beq.n	801466c <_dtoa_r+0x74c>
 8014604:	9b07      	ldr	r3, [sp, #28]
 8014606:	3301      	adds	r3, #1
 8014608:	f10a 0a01 	add.w	sl, sl, #1
 801460c:	9307      	str	r3, [sp, #28]
 801460e:	f04f 0801 	mov.w	r8, #1
 8014612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014614:	bb73      	cbnz	r3, 8014674 <_dtoa_r+0x754>
 8014616:	2001      	movs	r0, #1
 8014618:	e034      	b.n	8014684 <_dtoa_r+0x764>
 801461a:	bf00      	nop
 801461c:	08017270 	.word	0x08017270
 8014620:	08017248 	.word	0x08017248
 8014624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801462a:	e790      	b.n	801454e <_dtoa_r+0x62e>
 801462c:	f109 35ff 	add.w	r5, r9, #4294967295
 8014630:	45a8      	cmp	r8, r5
 8014632:	bfbf      	itttt	lt
 8014634:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8014636:	eba5 0808 	sublt.w	r8, r5, r8
 801463a:	4443      	addlt	r3, r8
 801463c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801463e:	bfb6      	itet	lt
 8014640:	46a8      	movlt	r8, r5
 8014642:	eba8 0505 	subge.w	r5, r8, r5
 8014646:	2500      	movlt	r5, #0
 8014648:	f1b9 0f00 	cmp.w	r9, #0
 801464c:	bfb9      	ittee	lt
 801464e:	ebaa 0609 	sublt.w	r6, sl, r9
 8014652:	2300      	movlt	r3, #0
 8014654:	4656      	movge	r6, sl
 8014656:	464b      	movge	r3, r9
 8014658:	e77b      	b.n	8014552 <_dtoa_r+0x632>
 801465a:	4645      	mov	r5, r8
 801465c:	4656      	mov	r6, sl
 801465e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014660:	e780      	b.n	8014564 <_dtoa_r+0x644>
 8014662:	4642      	mov	r2, r8
 8014664:	e7a8      	b.n	80145b8 <_dtoa_r+0x698>
 8014666:	f04f 0800 	mov.w	r8, #0
 801466a:	e7d2      	b.n	8014612 <_dtoa_r+0x6f2>
 801466c:	4698      	mov	r8, r3
 801466e:	e7d0      	b.n	8014612 <_dtoa_r+0x6f2>
 8014670:	f04f 0800 	mov.w	r8, #0
 8014674:	692b      	ldr	r3, [r5, #16]
 8014676:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801467a:	6918      	ldr	r0, [r3, #16]
 801467c:	f000 ff92 	bl	80155a4 <__hi0bits>
 8014680:	f1c0 0020 	rsb	r0, r0, #32
 8014684:	9b07      	ldr	r3, [sp, #28]
 8014686:	4418      	add	r0, r3
 8014688:	f010 001f 	ands.w	r0, r0, #31
 801468c:	d047      	beq.n	801471e <_dtoa_r+0x7fe>
 801468e:	f1c0 0320 	rsb	r3, r0, #32
 8014692:	2b04      	cmp	r3, #4
 8014694:	dd3b      	ble.n	801470e <_dtoa_r+0x7ee>
 8014696:	9b07      	ldr	r3, [sp, #28]
 8014698:	f1c0 001c 	rsb	r0, r0, #28
 801469c:	4482      	add	sl, r0
 801469e:	4406      	add	r6, r0
 80146a0:	4403      	add	r3, r0
 80146a2:	9307      	str	r3, [sp, #28]
 80146a4:	f1ba 0f00 	cmp.w	sl, #0
 80146a8:	dd05      	ble.n	80146b6 <_dtoa_r+0x796>
 80146aa:	4652      	mov	r2, sl
 80146ac:	9901      	ldr	r1, [sp, #4]
 80146ae:	4620      	mov	r0, r4
 80146b0:	f001 f8b4 	bl	801581c <__lshift>
 80146b4:	9001      	str	r0, [sp, #4]
 80146b6:	9b07      	ldr	r3, [sp, #28]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	dd05      	ble.n	80146c8 <_dtoa_r+0x7a8>
 80146bc:	4629      	mov	r1, r5
 80146be:	461a      	mov	r2, r3
 80146c0:	4620      	mov	r0, r4
 80146c2:	f001 f8ab 	bl	801581c <__lshift>
 80146c6:	4605      	mov	r5, r0
 80146c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146ca:	b353      	cbz	r3, 8014722 <_dtoa_r+0x802>
 80146cc:	4629      	mov	r1, r5
 80146ce:	9801      	ldr	r0, [sp, #4]
 80146d0:	f001 f8f8 	bl	80158c4 <__mcmp>
 80146d4:	2800      	cmp	r0, #0
 80146d6:	da24      	bge.n	8014722 <_dtoa_r+0x802>
 80146d8:	2300      	movs	r3, #0
 80146da:	220a      	movs	r2, #10
 80146dc:	9901      	ldr	r1, [sp, #4]
 80146de:	4620      	mov	r0, r4
 80146e0:	f000 fee7 	bl	80154b2 <__multadd>
 80146e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146e6:	9001      	str	r0, [sp, #4]
 80146e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	f000 8142 	beq.w	8014976 <_dtoa_r+0xa56>
 80146f2:	2300      	movs	r3, #0
 80146f4:	4639      	mov	r1, r7
 80146f6:	220a      	movs	r2, #10
 80146f8:	4620      	mov	r0, r4
 80146fa:	f000 feda 	bl	80154b2 <__multadd>
 80146fe:	9b06      	ldr	r3, [sp, #24]
 8014700:	2b00      	cmp	r3, #0
 8014702:	4607      	mov	r7, r0
 8014704:	dc4b      	bgt.n	801479e <_dtoa_r+0x87e>
 8014706:	9b08      	ldr	r3, [sp, #32]
 8014708:	2b02      	cmp	r3, #2
 801470a:	dd48      	ble.n	801479e <_dtoa_r+0x87e>
 801470c:	e011      	b.n	8014732 <_dtoa_r+0x812>
 801470e:	d0c9      	beq.n	80146a4 <_dtoa_r+0x784>
 8014710:	9a07      	ldr	r2, [sp, #28]
 8014712:	331c      	adds	r3, #28
 8014714:	441a      	add	r2, r3
 8014716:	449a      	add	sl, r3
 8014718:	441e      	add	r6, r3
 801471a:	4613      	mov	r3, r2
 801471c:	e7c1      	b.n	80146a2 <_dtoa_r+0x782>
 801471e:	4603      	mov	r3, r0
 8014720:	e7f6      	b.n	8014710 <_dtoa_r+0x7f0>
 8014722:	f1b9 0f00 	cmp.w	r9, #0
 8014726:	dc34      	bgt.n	8014792 <_dtoa_r+0x872>
 8014728:	9b08      	ldr	r3, [sp, #32]
 801472a:	2b02      	cmp	r3, #2
 801472c:	dd31      	ble.n	8014792 <_dtoa_r+0x872>
 801472e:	f8cd 9018 	str.w	r9, [sp, #24]
 8014732:	9b06      	ldr	r3, [sp, #24]
 8014734:	b963      	cbnz	r3, 8014750 <_dtoa_r+0x830>
 8014736:	4629      	mov	r1, r5
 8014738:	2205      	movs	r2, #5
 801473a:	4620      	mov	r0, r4
 801473c:	f000 feb9 	bl	80154b2 <__multadd>
 8014740:	4601      	mov	r1, r0
 8014742:	4605      	mov	r5, r0
 8014744:	9801      	ldr	r0, [sp, #4]
 8014746:	f001 f8bd 	bl	80158c4 <__mcmp>
 801474a:	2800      	cmp	r0, #0
 801474c:	f73f adfc 	bgt.w	8014348 <_dtoa_r+0x428>
 8014750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014752:	9e04      	ldr	r6, [sp, #16]
 8014754:	ea6f 0b03 	mvn.w	fp, r3
 8014758:	f04f 0900 	mov.w	r9, #0
 801475c:	4629      	mov	r1, r5
 801475e:	4620      	mov	r0, r4
 8014760:	f000 fe90 	bl	8015484 <_Bfree>
 8014764:	2f00      	cmp	r7, #0
 8014766:	f43f aebb 	beq.w	80144e0 <_dtoa_r+0x5c0>
 801476a:	f1b9 0f00 	cmp.w	r9, #0
 801476e:	d005      	beq.n	801477c <_dtoa_r+0x85c>
 8014770:	45b9      	cmp	r9, r7
 8014772:	d003      	beq.n	801477c <_dtoa_r+0x85c>
 8014774:	4649      	mov	r1, r9
 8014776:	4620      	mov	r0, r4
 8014778:	f000 fe84 	bl	8015484 <_Bfree>
 801477c:	4639      	mov	r1, r7
 801477e:	4620      	mov	r0, r4
 8014780:	f000 fe80 	bl	8015484 <_Bfree>
 8014784:	e6ac      	b.n	80144e0 <_dtoa_r+0x5c0>
 8014786:	2500      	movs	r5, #0
 8014788:	462f      	mov	r7, r5
 801478a:	e7e1      	b.n	8014750 <_dtoa_r+0x830>
 801478c:	469b      	mov	fp, r3
 801478e:	462f      	mov	r7, r5
 8014790:	e5da      	b.n	8014348 <_dtoa_r+0x428>
 8014792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014794:	f8cd 9018 	str.w	r9, [sp, #24]
 8014798:	2b00      	cmp	r3, #0
 801479a:	f000 80f3 	beq.w	8014984 <_dtoa_r+0xa64>
 801479e:	2e00      	cmp	r6, #0
 80147a0:	dd05      	ble.n	80147ae <_dtoa_r+0x88e>
 80147a2:	4639      	mov	r1, r7
 80147a4:	4632      	mov	r2, r6
 80147a6:	4620      	mov	r0, r4
 80147a8:	f001 f838 	bl	801581c <__lshift>
 80147ac:	4607      	mov	r7, r0
 80147ae:	f1b8 0f00 	cmp.w	r8, #0
 80147b2:	d04c      	beq.n	801484e <_dtoa_r+0x92e>
 80147b4:	6879      	ldr	r1, [r7, #4]
 80147b6:	4620      	mov	r0, r4
 80147b8:	f000 fe30 	bl	801541c <_Balloc>
 80147bc:	693a      	ldr	r2, [r7, #16]
 80147be:	3202      	adds	r2, #2
 80147c0:	4606      	mov	r6, r0
 80147c2:	0092      	lsls	r2, r2, #2
 80147c4:	f107 010c 	add.w	r1, r7, #12
 80147c8:	300c      	adds	r0, #12
 80147ca:	f7fd fd2b 	bl	8012224 <memcpy>
 80147ce:	2201      	movs	r2, #1
 80147d0:	4631      	mov	r1, r6
 80147d2:	4620      	mov	r0, r4
 80147d4:	f001 f822 	bl	801581c <__lshift>
 80147d8:	9b02      	ldr	r3, [sp, #8]
 80147da:	f8dd a010 	ldr.w	sl, [sp, #16]
 80147de:	f003 0301 	and.w	r3, r3, #1
 80147e2:	46b9      	mov	r9, r7
 80147e4:	9307      	str	r3, [sp, #28]
 80147e6:	4607      	mov	r7, r0
 80147e8:	4629      	mov	r1, r5
 80147ea:	9801      	ldr	r0, [sp, #4]
 80147ec:	f7ff fb0a 	bl	8013e04 <quorem>
 80147f0:	4649      	mov	r1, r9
 80147f2:	4606      	mov	r6, r0
 80147f4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80147f8:	9801      	ldr	r0, [sp, #4]
 80147fa:	f001 f863 	bl	80158c4 <__mcmp>
 80147fe:	463a      	mov	r2, r7
 8014800:	9002      	str	r0, [sp, #8]
 8014802:	4629      	mov	r1, r5
 8014804:	4620      	mov	r0, r4
 8014806:	f001 f877 	bl	80158f8 <__mdiff>
 801480a:	68c3      	ldr	r3, [r0, #12]
 801480c:	4602      	mov	r2, r0
 801480e:	bb03      	cbnz	r3, 8014852 <_dtoa_r+0x932>
 8014810:	4601      	mov	r1, r0
 8014812:	9009      	str	r0, [sp, #36]	; 0x24
 8014814:	9801      	ldr	r0, [sp, #4]
 8014816:	f001 f855 	bl	80158c4 <__mcmp>
 801481a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801481c:	4603      	mov	r3, r0
 801481e:	4611      	mov	r1, r2
 8014820:	4620      	mov	r0, r4
 8014822:	9309      	str	r3, [sp, #36]	; 0x24
 8014824:	f000 fe2e 	bl	8015484 <_Bfree>
 8014828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801482a:	b9a3      	cbnz	r3, 8014856 <_dtoa_r+0x936>
 801482c:	9a08      	ldr	r2, [sp, #32]
 801482e:	b992      	cbnz	r2, 8014856 <_dtoa_r+0x936>
 8014830:	9a07      	ldr	r2, [sp, #28]
 8014832:	b982      	cbnz	r2, 8014856 <_dtoa_r+0x936>
 8014834:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014838:	d029      	beq.n	801488e <_dtoa_r+0x96e>
 801483a:	9b02      	ldr	r3, [sp, #8]
 801483c:	2b00      	cmp	r3, #0
 801483e:	dd01      	ble.n	8014844 <_dtoa_r+0x924>
 8014840:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8014844:	f10a 0601 	add.w	r6, sl, #1
 8014848:	f88a 8000 	strb.w	r8, [sl]
 801484c:	e786      	b.n	801475c <_dtoa_r+0x83c>
 801484e:	4638      	mov	r0, r7
 8014850:	e7c2      	b.n	80147d8 <_dtoa_r+0x8b8>
 8014852:	2301      	movs	r3, #1
 8014854:	e7e3      	b.n	801481e <_dtoa_r+0x8fe>
 8014856:	9a02      	ldr	r2, [sp, #8]
 8014858:	2a00      	cmp	r2, #0
 801485a:	db04      	blt.n	8014866 <_dtoa_r+0x946>
 801485c:	d124      	bne.n	80148a8 <_dtoa_r+0x988>
 801485e:	9a08      	ldr	r2, [sp, #32]
 8014860:	bb12      	cbnz	r2, 80148a8 <_dtoa_r+0x988>
 8014862:	9a07      	ldr	r2, [sp, #28]
 8014864:	bb02      	cbnz	r2, 80148a8 <_dtoa_r+0x988>
 8014866:	2b00      	cmp	r3, #0
 8014868:	ddec      	ble.n	8014844 <_dtoa_r+0x924>
 801486a:	2201      	movs	r2, #1
 801486c:	9901      	ldr	r1, [sp, #4]
 801486e:	4620      	mov	r0, r4
 8014870:	f000 ffd4 	bl	801581c <__lshift>
 8014874:	4629      	mov	r1, r5
 8014876:	9001      	str	r0, [sp, #4]
 8014878:	f001 f824 	bl	80158c4 <__mcmp>
 801487c:	2800      	cmp	r0, #0
 801487e:	dc03      	bgt.n	8014888 <_dtoa_r+0x968>
 8014880:	d1e0      	bne.n	8014844 <_dtoa_r+0x924>
 8014882:	f018 0f01 	tst.w	r8, #1
 8014886:	d0dd      	beq.n	8014844 <_dtoa_r+0x924>
 8014888:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801488c:	d1d8      	bne.n	8014840 <_dtoa_r+0x920>
 801488e:	2339      	movs	r3, #57	; 0x39
 8014890:	f10a 0601 	add.w	r6, sl, #1
 8014894:	f88a 3000 	strb.w	r3, [sl]
 8014898:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801489c:	2b39      	cmp	r3, #57	; 0x39
 801489e:	f106 32ff 	add.w	r2, r6, #4294967295
 80148a2:	d04c      	beq.n	801493e <_dtoa_r+0xa1e>
 80148a4:	3301      	adds	r3, #1
 80148a6:	e051      	b.n	801494c <_dtoa_r+0xa2c>
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	f10a 0601 	add.w	r6, sl, #1
 80148ae:	dd05      	ble.n	80148bc <_dtoa_r+0x99c>
 80148b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148b4:	d0eb      	beq.n	801488e <_dtoa_r+0x96e>
 80148b6:	f108 0801 	add.w	r8, r8, #1
 80148ba:	e7c5      	b.n	8014848 <_dtoa_r+0x928>
 80148bc:	9b04      	ldr	r3, [sp, #16]
 80148be:	9a06      	ldr	r2, [sp, #24]
 80148c0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80148c4:	1af3      	subs	r3, r6, r3
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d021      	beq.n	801490e <_dtoa_r+0x9ee>
 80148ca:	2300      	movs	r3, #0
 80148cc:	220a      	movs	r2, #10
 80148ce:	9901      	ldr	r1, [sp, #4]
 80148d0:	4620      	mov	r0, r4
 80148d2:	f000 fdee 	bl	80154b2 <__multadd>
 80148d6:	45b9      	cmp	r9, r7
 80148d8:	9001      	str	r0, [sp, #4]
 80148da:	f04f 0300 	mov.w	r3, #0
 80148de:	f04f 020a 	mov.w	r2, #10
 80148e2:	4649      	mov	r1, r9
 80148e4:	4620      	mov	r0, r4
 80148e6:	d105      	bne.n	80148f4 <_dtoa_r+0x9d4>
 80148e8:	f000 fde3 	bl	80154b2 <__multadd>
 80148ec:	4681      	mov	r9, r0
 80148ee:	4607      	mov	r7, r0
 80148f0:	46b2      	mov	sl, r6
 80148f2:	e779      	b.n	80147e8 <_dtoa_r+0x8c8>
 80148f4:	f000 fddd 	bl	80154b2 <__multadd>
 80148f8:	4639      	mov	r1, r7
 80148fa:	4681      	mov	r9, r0
 80148fc:	2300      	movs	r3, #0
 80148fe:	220a      	movs	r2, #10
 8014900:	4620      	mov	r0, r4
 8014902:	f000 fdd6 	bl	80154b2 <__multadd>
 8014906:	4607      	mov	r7, r0
 8014908:	e7f2      	b.n	80148f0 <_dtoa_r+0x9d0>
 801490a:	f04f 0900 	mov.w	r9, #0
 801490e:	2201      	movs	r2, #1
 8014910:	9901      	ldr	r1, [sp, #4]
 8014912:	4620      	mov	r0, r4
 8014914:	f000 ff82 	bl	801581c <__lshift>
 8014918:	4629      	mov	r1, r5
 801491a:	9001      	str	r0, [sp, #4]
 801491c:	f000 ffd2 	bl	80158c4 <__mcmp>
 8014920:	2800      	cmp	r0, #0
 8014922:	dcb9      	bgt.n	8014898 <_dtoa_r+0x978>
 8014924:	d102      	bne.n	801492c <_dtoa_r+0xa0c>
 8014926:	f018 0f01 	tst.w	r8, #1
 801492a:	d1b5      	bne.n	8014898 <_dtoa_r+0x978>
 801492c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014930:	2b30      	cmp	r3, #48	; 0x30
 8014932:	f106 32ff 	add.w	r2, r6, #4294967295
 8014936:	f47f af11 	bne.w	801475c <_dtoa_r+0x83c>
 801493a:	4616      	mov	r6, r2
 801493c:	e7f6      	b.n	801492c <_dtoa_r+0xa0c>
 801493e:	9b04      	ldr	r3, [sp, #16]
 8014940:	4293      	cmp	r3, r2
 8014942:	d105      	bne.n	8014950 <_dtoa_r+0xa30>
 8014944:	9a04      	ldr	r2, [sp, #16]
 8014946:	f10b 0b01 	add.w	fp, fp, #1
 801494a:	2331      	movs	r3, #49	; 0x31
 801494c:	7013      	strb	r3, [r2, #0]
 801494e:	e705      	b.n	801475c <_dtoa_r+0x83c>
 8014950:	4616      	mov	r6, r2
 8014952:	e7a1      	b.n	8014898 <_dtoa_r+0x978>
 8014954:	4b16      	ldr	r3, [pc, #88]	; (80149b0 <_dtoa_r+0xa90>)
 8014956:	f7ff bb48 	b.w	8013fea <_dtoa_r+0xca>
 801495a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801495c:	2b00      	cmp	r3, #0
 801495e:	f47f ab23 	bne.w	8013fa8 <_dtoa_r+0x88>
 8014962:	4b14      	ldr	r3, [pc, #80]	; (80149b4 <_dtoa_r+0xa94>)
 8014964:	f7ff bb41 	b.w	8013fea <_dtoa_r+0xca>
 8014968:	9b08      	ldr	r3, [sp, #32]
 801496a:	2b01      	cmp	r3, #1
 801496c:	f77f ae3b 	ble.w	80145e6 <_dtoa_r+0x6c6>
 8014970:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014974:	e64f      	b.n	8014616 <_dtoa_r+0x6f6>
 8014976:	9b06      	ldr	r3, [sp, #24]
 8014978:	2b00      	cmp	r3, #0
 801497a:	dc03      	bgt.n	8014984 <_dtoa_r+0xa64>
 801497c:	9b08      	ldr	r3, [sp, #32]
 801497e:	2b02      	cmp	r3, #2
 8014980:	f73f aed7 	bgt.w	8014732 <_dtoa_r+0x812>
 8014984:	9e04      	ldr	r6, [sp, #16]
 8014986:	9801      	ldr	r0, [sp, #4]
 8014988:	4629      	mov	r1, r5
 801498a:	f7ff fa3b 	bl	8013e04 <quorem>
 801498e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014992:	f806 8b01 	strb.w	r8, [r6], #1
 8014996:	9b04      	ldr	r3, [sp, #16]
 8014998:	9a06      	ldr	r2, [sp, #24]
 801499a:	1af3      	subs	r3, r6, r3
 801499c:	429a      	cmp	r2, r3
 801499e:	ddb4      	ble.n	801490a <_dtoa_r+0x9ea>
 80149a0:	2300      	movs	r3, #0
 80149a2:	220a      	movs	r2, #10
 80149a4:	9901      	ldr	r1, [sp, #4]
 80149a6:	4620      	mov	r0, r4
 80149a8:	f000 fd83 	bl	80154b2 <__multadd>
 80149ac:	9001      	str	r0, [sp, #4]
 80149ae:	e7ea      	b.n	8014986 <_dtoa_r+0xa66>
 80149b0:	0801714c 	.word	0x0801714c
 80149b4:	080171c8 	.word	0x080171c8

080149b8 <__sflush_r>:
 80149b8:	898a      	ldrh	r2, [r1, #12]
 80149ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149be:	4605      	mov	r5, r0
 80149c0:	0710      	lsls	r0, r2, #28
 80149c2:	460c      	mov	r4, r1
 80149c4:	d458      	bmi.n	8014a78 <__sflush_r+0xc0>
 80149c6:	684b      	ldr	r3, [r1, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	dc05      	bgt.n	80149d8 <__sflush_r+0x20>
 80149cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	dc02      	bgt.n	80149d8 <__sflush_r+0x20>
 80149d2:	2000      	movs	r0, #0
 80149d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149da:	2e00      	cmp	r6, #0
 80149dc:	d0f9      	beq.n	80149d2 <__sflush_r+0x1a>
 80149de:	2300      	movs	r3, #0
 80149e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149e4:	682f      	ldr	r7, [r5, #0]
 80149e6:	6a21      	ldr	r1, [r4, #32]
 80149e8:	602b      	str	r3, [r5, #0]
 80149ea:	d032      	beq.n	8014a52 <__sflush_r+0x9a>
 80149ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149ee:	89a3      	ldrh	r3, [r4, #12]
 80149f0:	075a      	lsls	r2, r3, #29
 80149f2:	d505      	bpl.n	8014a00 <__sflush_r+0x48>
 80149f4:	6863      	ldr	r3, [r4, #4]
 80149f6:	1ac0      	subs	r0, r0, r3
 80149f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149fa:	b10b      	cbz	r3, 8014a00 <__sflush_r+0x48>
 80149fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149fe:	1ac0      	subs	r0, r0, r3
 8014a00:	2300      	movs	r3, #0
 8014a02:	4602      	mov	r2, r0
 8014a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a06:	6a21      	ldr	r1, [r4, #32]
 8014a08:	4628      	mov	r0, r5
 8014a0a:	47b0      	blx	r6
 8014a0c:	1c43      	adds	r3, r0, #1
 8014a0e:	89a3      	ldrh	r3, [r4, #12]
 8014a10:	d106      	bne.n	8014a20 <__sflush_r+0x68>
 8014a12:	6829      	ldr	r1, [r5, #0]
 8014a14:	291d      	cmp	r1, #29
 8014a16:	d848      	bhi.n	8014aaa <__sflush_r+0xf2>
 8014a18:	4a29      	ldr	r2, [pc, #164]	; (8014ac0 <__sflush_r+0x108>)
 8014a1a:	40ca      	lsrs	r2, r1
 8014a1c:	07d6      	lsls	r6, r2, #31
 8014a1e:	d544      	bpl.n	8014aaa <__sflush_r+0xf2>
 8014a20:	2200      	movs	r2, #0
 8014a22:	6062      	str	r2, [r4, #4]
 8014a24:	04d9      	lsls	r1, r3, #19
 8014a26:	6922      	ldr	r2, [r4, #16]
 8014a28:	6022      	str	r2, [r4, #0]
 8014a2a:	d504      	bpl.n	8014a36 <__sflush_r+0x7e>
 8014a2c:	1c42      	adds	r2, r0, #1
 8014a2e:	d101      	bne.n	8014a34 <__sflush_r+0x7c>
 8014a30:	682b      	ldr	r3, [r5, #0]
 8014a32:	b903      	cbnz	r3, 8014a36 <__sflush_r+0x7e>
 8014a34:	6560      	str	r0, [r4, #84]	; 0x54
 8014a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a38:	602f      	str	r7, [r5, #0]
 8014a3a:	2900      	cmp	r1, #0
 8014a3c:	d0c9      	beq.n	80149d2 <__sflush_r+0x1a>
 8014a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a42:	4299      	cmp	r1, r3
 8014a44:	d002      	beq.n	8014a4c <__sflush_r+0x94>
 8014a46:	4628      	mov	r0, r5
 8014a48:	f001 f8f6 	bl	8015c38 <_free_r>
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8014a50:	e7c0      	b.n	80149d4 <__sflush_r+0x1c>
 8014a52:	2301      	movs	r3, #1
 8014a54:	4628      	mov	r0, r5
 8014a56:	47b0      	blx	r6
 8014a58:	1c41      	adds	r1, r0, #1
 8014a5a:	d1c8      	bne.n	80149ee <__sflush_r+0x36>
 8014a5c:	682b      	ldr	r3, [r5, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d0c5      	beq.n	80149ee <__sflush_r+0x36>
 8014a62:	2b1d      	cmp	r3, #29
 8014a64:	d001      	beq.n	8014a6a <__sflush_r+0xb2>
 8014a66:	2b16      	cmp	r3, #22
 8014a68:	d101      	bne.n	8014a6e <__sflush_r+0xb6>
 8014a6a:	602f      	str	r7, [r5, #0]
 8014a6c:	e7b1      	b.n	80149d2 <__sflush_r+0x1a>
 8014a6e:	89a3      	ldrh	r3, [r4, #12]
 8014a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a74:	81a3      	strh	r3, [r4, #12]
 8014a76:	e7ad      	b.n	80149d4 <__sflush_r+0x1c>
 8014a78:	690f      	ldr	r7, [r1, #16]
 8014a7a:	2f00      	cmp	r7, #0
 8014a7c:	d0a9      	beq.n	80149d2 <__sflush_r+0x1a>
 8014a7e:	0793      	lsls	r3, r2, #30
 8014a80:	680e      	ldr	r6, [r1, #0]
 8014a82:	bf08      	it	eq
 8014a84:	694b      	ldreq	r3, [r1, #20]
 8014a86:	600f      	str	r7, [r1, #0]
 8014a88:	bf18      	it	ne
 8014a8a:	2300      	movne	r3, #0
 8014a8c:	eba6 0807 	sub.w	r8, r6, r7
 8014a90:	608b      	str	r3, [r1, #8]
 8014a92:	f1b8 0f00 	cmp.w	r8, #0
 8014a96:	dd9c      	ble.n	80149d2 <__sflush_r+0x1a>
 8014a98:	4643      	mov	r3, r8
 8014a9a:	463a      	mov	r2, r7
 8014a9c:	6a21      	ldr	r1, [r4, #32]
 8014a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	47b0      	blx	r6
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	dc06      	bgt.n	8014ab6 <__sflush_r+0xfe>
 8014aa8:	89a3      	ldrh	r3, [r4, #12]
 8014aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aae:	81a3      	strh	r3, [r4, #12]
 8014ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab4:	e78e      	b.n	80149d4 <__sflush_r+0x1c>
 8014ab6:	4407      	add	r7, r0
 8014ab8:	eba8 0800 	sub.w	r8, r8, r0
 8014abc:	e7e9      	b.n	8014a92 <__sflush_r+0xda>
 8014abe:	bf00      	nop
 8014ac0:	20400001 	.word	0x20400001

08014ac4 <_fflush_r>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	690b      	ldr	r3, [r1, #16]
 8014ac8:	4605      	mov	r5, r0
 8014aca:	460c      	mov	r4, r1
 8014acc:	b1db      	cbz	r3, 8014b06 <_fflush_r+0x42>
 8014ace:	b118      	cbz	r0, 8014ad8 <_fflush_r+0x14>
 8014ad0:	6983      	ldr	r3, [r0, #24]
 8014ad2:	b90b      	cbnz	r3, 8014ad8 <_fflush_r+0x14>
 8014ad4:	f000 f860 	bl	8014b98 <__sinit>
 8014ad8:	4b0c      	ldr	r3, [pc, #48]	; (8014b0c <_fflush_r+0x48>)
 8014ada:	429c      	cmp	r4, r3
 8014adc:	d109      	bne.n	8014af2 <_fflush_r+0x2e>
 8014ade:	686c      	ldr	r4, [r5, #4]
 8014ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ae4:	b17b      	cbz	r3, 8014b06 <_fflush_r+0x42>
 8014ae6:	4621      	mov	r1, r4
 8014ae8:	4628      	mov	r0, r5
 8014aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014aee:	f7ff bf63 	b.w	80149b8 <__sflush_r>
 8014af2:	4b07      	ldr	r3, [pc, #28]	; (8014b10 <_fflush_r+0x4c>)
 8014af4:	429c      	cmp	r4, r3
 8014af6:	d101      	bne.n	8014afc <_fflush_r+0x38>
 8014af8:	68ac      	ldr	r4, [r5, #8]
 8014afa:	e7f1      	b.n	8014ae0 <_fflush_r+0x1c>
 8014afc:	4b05      	ldr	r3, [pc, #20]	; (8014b14 <_fflush_r+0x50>)
 8014afe:	429c      	cmp	r4, r3
 8014b00:	bf08      	it	eq
 8014b02:	68ec      	ldreq	r4, [r5, #12]
 8014b04:	e7ec      	b.n	8014ae0 <_fflush_r+0x1c>
 8014b06:	2000      	movs	r0, #0
 8014b08:	bd38      	pop	{r3, r4, r5, pc}
 8014b0a:	bf00      	nop
 8014b0c:	080171f8 	.word	0x080171f8
 8014b10:	08017218 	.word	0x08017218
 8014b14:	080171d8 	.word	0x080171d8

08014b18 <std>:
 8014b18:	2300      	movs	r3, #0
 8014b1a:	b510      	push	{r4, lr}
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8014b22:	6083      	str	r3, [r0, #8]
 8014b24:	8181      	strh	r1, [r0, #12]
 8014b26:	6643      	str	r3, [r0, #100]	; 0x64
 8014b28:	81c2      	strh	r2, [r0, #14]
 8014b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b2e:	6183      	str	r3, [r0, #24]
 8014b30:	4619      	mov	r1, r3
 8014b32:	2208      	movs	r2, #8
 8014b34:	305c      	adds	r0, #92	; 0x5c
 8014b36:	f7fd fb80 	bl	801223a <memset>
 8014b3a:	4b05      	ldr	r3, [pc, #20]	; (8014b50 <std+0x38>)
 8014b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8014b3e:	4b05      	ldr	r3, [pc, #20]	; (8014b54 <std+0x3c>)
 8014b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b42:	4b05      	ldr	r3, [pc, #20]	; (8014b58 <std+0x40>)
 8014b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b46:	4b05      	ldr	r3, [pc, #20]	; (8014b5c <std+0x44>)
 8014b48:	6224      	str	r4, [r4, #32]
 8014b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8014b4c:	bd10      	pop	{r4, pc}
 8014b4e:	bf00      	nop
 8014b50:	0801604d 	.word	0x0801604d
 8014b54:	0801606f 	.word	0x0801606f
 8014b58:	080160a7 	.word	0x080160a7
 8014b5c:	080160cb 	.word	0x080160cb

08014b60 <_cleanup_r>:
 8014b60:	4901      	ldr	r1, [pc, #4]	; (8014b68 <_cleanup_r+0x8>)
 8014b62:	f000 b885 	b.w	8014c70 <_fwalk_reent>
 8014b66:	bf00      	nop
 8014b68:	08014ac5 	.word	0x08014ac5

08014b6c <__sfmoreglue>:
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	1e4a      	subs	r2, r1, #1
 8014b70:	2568      	movs	r5, #104	; 0x68
 8014b72:	4355      	muls	r5, r2
 8014b74:	460e      	mov	r6, r1
 8014b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b7a:	f001 f8ab 	bl	8015cd4 <_malloc_r>
 8014b7e:	4604      	mov	r4, r0
 8014b80:	b140      	cbz	r0, 8014b94 <__sfmoreglue+0x28>
 8014b82:	2100      	movs	r1, #0
 8014b84:	e9c0 1600 	strd	r1, r6, [r0]
 8014b88:	300c      	adds	r0, #12
 8014b8a:	60a0      	str	r0, [r4, #8]
 8014b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b90:	f7fd fb53 	bl	801223a <memset>
 8014b94:	4620      	mov	r0, r4
 8014b96:	bd70      	pop	{r4, r5, r6, pc}

08014b98 <__sinit>:
 8014b98:	6983      	ldr	r3, [r0, #24]
 8014b9a:	b510      	push	{r4, lr}
 8014b9c:	4604      	mov	r4, r0
 8014b9e:	bb33      	cbnz	r3, 8014bee <__sinit+0x56>
 8014ba0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014ba4:	6503      	str	r3, [r0, #80]	; 0x50
 8014ba6:	4b12      	ldr	r3, [pc, #72]	; (8014bf0 <__sinit+0x58>)
 8014ba8:	4a12      	ldr	r2, [pc, #72]	; (8014bf4 <__sinit+0x5c>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	6282      	str	r2, [r0, #40]	; 0x28
 8014bae:	4298      	cmp	r0, r3
 8014bb0:	bf04      	itt	eq
 8014bb2:	2301      	moveq	r3, #1
 8014bb4:	6183      	streq	r3, [r0, #24]
 8014bb6:	f000 f81f 	bl	8014bf8 <__sfp>
 8014bba:	6060      	str	r0, [r4, #4]
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f000 f81b 	bl	8014bf8 <__sfp>
 8014bc2:	60a0      	str	r0, [r4, #8]
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	f000 f817 	bl	8014bf8 <__sfp>
 8014bca:	2200      	movs	r2, #0
 8014bcc:	60e0      	str	r0, [r4, #12]
 8014bce:	2104      	movs	r1, #4
 8014bd0:	6860      	ldr	r0, [r4, #4]
 8014bd2:	f7ff ffa1 	bl	8014b18 <std>
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	2109      	movs	r1, #9
 8014bda:	68a0      	ldr	r0, [r4, #8]
 8014bdc:	f7ff ff9c 	bl	8014b18 <std>
 8014be0:	2202      	movs	r2, #2
 8014be2:	2112      	movs	r1, #18
 8014be4:	68e0      	ldr	r0, [r4, #12]
 8014be6:	f7ff ff97 	bl	8014b18 <std>
 8014bea:	2301      	movs	r3, #1
 8014bec:	61a3      	str	r3, [r4, #24]
 8014bee:	bd10      	pop	{r4, pc}
 8014bf0:	08017138 	.word	0x08017138
 8014bf4:	08014b61 	.word	0x08014b61

08014bf8 <__sfp>:
 8014bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bfa:	4b1b      	ldr	r3, [pc, #108]	; (8014c68 <__sfp+0x70>)
 8014bfc:	681e      	ldr	r6, [r3, #0]
 8014bfe:	69b3      	ldr	r3, [r6, #24]
 8014c00:	4607      	mov	r7, r0
 8014c02:	b913      	cbnz	r3, 8014c0a <__sfp+0x12>
 8014c04:	4630      	mov	r0, r6
 8014c06:	f7ff ffc7 	bl	8014b98 <__sinit>
 8014c0a:	3648      	adds	r6, #72	; 0x48
 8014c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c10:	3b01      	subs	r3, #1
 8014c12:	d503      	bpl.n	8014c1c <__sfp+0x24>
 8014c14:	6833      	ldr	r3, [r6, #0]
 8014c16:	b133      	cbz	r3, 8014c26 <__sfp+0x2e>
 8014c18:	6836      	ldr	r6, [r6, #0]
 8014c1a:	e7f7      	b.n	8014c0c <__sfp+0x14>
 8014c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c20:	b16d      	cbz	r5, 8014c3e <__sfp+0x46>
 8014c22:	3468      	adds	r4, #104	; 0x68
 8014c24:	e7f4      	b.n	8014c10 <__sfp+0x18>
 8014c26:	2104      	movs	r1, #4
 8014c28:	4638      	mov	r0, r7
 8014c2a:	f7ff ff9f 	bl	8014b6c <__sfmoreglue>
 8014c2e:	6030      	str	r0, [r6, #0]
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d1f1      	bne.n	8014c18 <__sfp+0x20>
 8014c34:	230c      	movs	r3, #12
 8014c36:	603b      	str	r3, [r7, #0]
 8014c38:	4604      	mov	r4, r0
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c3e:	4b0b      	ldr	r3, [pc, #44]	; (8014c6c <__sfp+0x74>)
 8014c40:	6665      	str	r5, [r4, #100]	; 0x64
 8014c42:	e9c4 5500 	strd	r5, r5, [r4]
 8014c46:	60a5      	str	r5, [r4, #8]
 8014c48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014c4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014c50:	2208      	movs	r2, #8
 8014c52:	4629      	mov	r1, r5
 8014c54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c58:	f7fd faef 	bl	801223a <memset>
 8014c5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c64:	e7e9      	b.n	8014c3a <__sfp+0x42>
 8014c66:	bf00      	nop
 8014c68:	08017138 	.word	0x08017138
 8014c6c:	ffff0001 	.word	0xffff0001

08014c70 <_fwalk_reent>:
 8014c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c74:	4680      	mov	r8, r0
 8014c76:	4689      	mov	r9, r1
 8014c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c7c:	2600      	movs	r6, #0
 8014c7e:	b914      	cbnz	r4, 8014c86 <_fwalk_reent+0x16>
 8014c80:	4630      	mov	r0, r6
 8014c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014c8a:	3f01      	subs	r7, #1
 8014c8c:	d501      	bpl.n	8014c92 <_fwalk_reent+0x22>
 8014c8e:	6824      	ldr	r4, [r4, #0]
 8014c90:	e7f5      	b.n	8014c7e <_fwalk_reent+0xe>
 8014c92:	89ab      	ldrh	r3, [r5, #12]
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	d907      	bls.n	8014ca8 <_fwalk_reent+0x38>
 8014c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	d003      	beq.n	8014ca8 <_fwalk_reent+0x38>
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	4640      	mov	r0, r8
 8014ca4:	47c8      	blx	r9
 8014ca6:	4306      	orrs	r6, r0
 8014ca8:	3568      	adds	r5, #104	; 0x68
 8014caa:	e7ee      	b.n	8014c8a <_fwalk_reent+0x1a>

08014cac <rshift>:
 8014cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cae:	6906      	ldr	r6, [r0, #16]
 8014cb0:	114b      	asrs	r3, r1, #5
 8014cb2:	429e      	cmp	r6, r3
 8014cb4:	f100 0414 	add.w	r4, r0, #20
 8014cb8:	dd30      	ble.n	8014d1c <rshift+0x70>
 8014cba:	f011 011f 	ands.w	r1, r1, #31
 8014cbe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014cc2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014cc6:	d108      	bne.n	8014cda <rshift+0x2e>
 8014cc8:	4621      	mov	r1, r4
 8014cca:	42b2      	cmp	r2, r6
 8014ccc:	460b      	mov	r3, r1
 8014cce:	d211      	bcs.n	8014cf4 <rshift+0x48>
 8014cd0:	f852 3b04 	ldr.w	r3, [r2], #4
 8014cd4:	f841 3b04 	str.w	r3, [r1], #4
 8014cd8:	e7f7      	b.n	8014cca <rshift+0x1e>
 8014cda:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014cde:	f1c1 0c20 	rsb	ip, r1, #32
 8014ce2:	40cd      	lsrs	r5, r1
 8014ce4:	3204      	adds	r2, #4
 8014ce6:	4623      	mov	r3, r4
 8014ce8:	42b2      	cmp	r2, r6
 8014cea:	4617      	mov	r7, r2
 8014cec:	d30c      	bcc.n	8014d08 <rshift+0x5c>
 8014cee:	601d      	str	r5, [r3, #0]
 8014cf0:	b105      	cbz	r5, 8014cf4 <rshift+0x48>
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	1b1a      	subs	r2, r3, r4
 8014cf6:	42a3      	cmp	r3, r4
 8014cf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014cfc:	bf08      	it	eq
 8014cfe:	2300      	moveq	r3, #0
 8014d00:	6102      	str	r2, [r0, #16]
 8014d02:	bf08      	it	eq
 8014d04:	6143      	streq	r3, [r0, #20]
 8014d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d08:	683f      	ldr	r7, [r7, #0]
 8014d0a:	fa07 f70c 	lsl.w	r7, r7, ip
 8014d0e:	433d      	orrs	r5, r7
 8014d10:	f843 5b04 	str.w	r5, [r3], #4
 8014d14:	f852 5b04 	ldr.w	r5, [r2], #4
 8014d18:	40cd      	lsrs	r5, r1
 8014d1a:	e7e5      	b.n	8014ce8 <rshift+0x3c>
 8014d1c:	4623      	mov	r3, r4
 8014d1e:	e7e9      	b.n	8014cf4 <rshift+0x48>

08014d20 <__hexdig_fun>:
 8014d20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014d24:	2b09      	cmp	r3, #9
 8014d26:	d802      	bhi.n	8014d2e <__hexdig_fun+0xe>
 8014d28:	3820      	subs	r0, #32
 8014d2a:	b2c0      	uxtb	r0, r0
 8014d2c:	4770      	bx	lr
 8014d2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014d32:	2b05      	cmp	r3, #5
 8014d34:	d801      	bhi.n	8014d3a <__hexdig_fun+0x1a>
 8014d36:	3847      	subs	r0, #71	; 0x47
 8014d38:	e7f7      	b.n	8014d2a <__hexdig_fun+0xa>
 8014d3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014d3e:	2b05      	cmp	r3, #5
 8014d40:	d801      	bhi.n	8014d46 <__hexdig_fun+0x26>
 8014d42:	3827      	subs	r0, #39	; 0x27
 8014d44:	e7f1      	b.n	8014d2a <__hexdig_fun+0xa>
 8014d46:	2000      	movs	r0, #0
 8014d48:	4770      	bx	lr

08014d4a <__gethex>:
 8014d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4e:	b08b      	sub	sp, #44	; 0x2c
 8014d50:	468a      	mov	sl, r1
 8014d52:	9002      	str	r0, [sp, #8]
 8014d54:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014d56:	9306      	str	r3, [sp, #24]
 8014d58:	4690      	mov	r8, r2
 8014d5a:	f000 fad0 	bl	80152fe <__localeconv_l>
 8014d5e:	6803      	ldr	r3, [r0, #0]
 8014d60:	9303      	str	r3, [sp, #12]
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7eb fa6c 	bl	8000240 <strlen>
 8014d68:	9b03      	ldr	r3, [sp, #12]
 8014d6a:	9001      	str	r0, [sp, #4]
 8014d6c:	4403      	add	r3, r0
 8014d6e:	f04f 0b00 	mov.w	fp, #0
 8014d72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014d76:	9307      	str	r3, [sp, #28]
 8014d78:	f8da 3000 	ldr.w	r3, [sl]
 8014d7c:	3302      	adds	r3, #2
 8014d7e:	461f      	mov	r7, r3
 8014d80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014d84:	2830      	cmp	r0, #48	; 0x30
 8014d86:	d06c      	beq.n	8014e62 <__gethex+0x118>
 8014d88:	f7ff ffca 	bl	8014d20 <__hexdig_fun>
 8014d8c:	4604      	mov	r4, r0
 8014d8e:	2800      	cmp	r0, #0
 8014d90:	d16a      	bne.n	8014e68 <__gethex+0x11e>
 8014d92:	9a01      	ldr	r2, [sp, #4]
 8014d94:	9903      	ldr	r1, [sp, #12]
 8014d96:	4638      	mov	r0, r7
 8014d98:	f001 f99b 	bl	80160d2 <strncmp>
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	d166      	bne.n	8014e6e <__gethex+0x124>
 8014da0:	9b01      	ldr	r3, [sp, #4]
 8014da2:	5cf8      	ldrb	r0, [r7, r3]
 8014da4:	18fe      	adds	r6, r7, r3
 8014da6:	f7ff ffbb 	bl	8014d20 <__hexdig_fun>
 8014daa:	2800      	cmp	r0, #0
 8014dac:	d062      	beq.n	8014e74 <__gethex+0x12a>
 8014dae:	4633      	mov	r3, r6
 8014db0:	7818      	ldrb	r0, [r3, #0]
 8014db2:	2830      	cmp	r0, #48	; 0x30
 8014db4:	461f      	mov	r7, r3
 8014db6:	f103 0301 	add.w	r3, r3, #1
 8014dba:	d0f9      	beq.n	8014db0 <__gethex+0x66>
 8014dbc:	f7ff ffb0 	bl	8014d20 <__hexdig_fun>
 8014dc0:	fab0 f580 	clz	r5, r0
 8014dc4:	096d      	lsrs	r5, r5, #5
 8014dc6:	4634      	mov	r4, r6
 8014dc8:	f04f 0b01 	mov.w	fp, #1
 8014dcc:	463a      	mov	r2, r7
 8014dce:	4616      	mov	r6, r2
 8014dd0:	3201      	adds	r2, #1
 8014dd2:	7830      	ldrb	r0, [r6, #0]
 8014dd4:	f7ff ffa4 	bl	8014d20 <__hexdig_fun>
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	d1f8      	bne.n	8014dce <__gethex+0x84>
 8014ddc:	9a01      	ldr	r2, [sp, #4]
 8014dde:	9903      	ldr	r1, [sp, #12]
 8014de0:	4630      	mov	r0, r6
 8014de2:	f001 f976 	bl	80160d2 <strncmp>
 8014de6:	b950      	cbnz	r0, 8014dfe <__gethex+0xb4>
 8014de8:	b954      	cbnz	r4, 8014e00 <__gethex+0xb6>
 8014dea:	9b01      	ldr	r3, [sp, #4]
 8014dec:	18f4      	adds	r4, r6, r3
 8014dee:	4622      	mov	r2, r4
 8014df0:	4616      	mov	r6, r2
 8014df2:	3201      	adds	r2, #1
 8014df4:	7830      	ldrb	r0, [r6, #0]
 8014df6:	f7ff ff93 	bl	8014d20 <__hexdig_fun>
 8014dfa:	2800      	cmp	r0, #0
 8014dfc:	d1f8      	bne.n	8014df0 <__gethex+0xa6>
 8014dfe:	b10c      	cbz	r4, 8014e04 <__gethex+0xba>
 8014e00:	1ba4      	subs	r4, r4, r6
 8014e02:	00a4      	lsls	r4, r4, #2
 8014e04:	7833      	ldrb	r3, [r6, #0]
 8014e06:	2b50      	cmp	r3, #80	; 0x50
 8014e08:	d001      	beq.n	8014e0e <__gethex+0xc4>
 8014e0a:	2b70      	cmp	r3, #112	; 0x70
 8014e0c:	d140      	bne.n	8014e90 <__gethex+0x146>
 8014e0e:	7873      	ldrb	r3, [r6, #1]
 8014e10:	2b2b      	cmp	r3, #43	; 0x2b
 8014e12:	d031      	beq.n	8014e78 <__gethex+0x12e>
 8014e14:	2b2d      	cmp	r3, #45	; 0x2d
 8014e16:	d033      	beq.n	8014e80 <__gethex+0x136>
 8014e18:	1c71      	adds	r1, r6, #1
 8014e1a:	f04f 0900 	mov.w	r9, #0
 8014e1e:	7808      	ldrb	r0, [r1, #0]
 8014e20:	f7ff ff7e 	bl	8014d20 <__hexdig_fun>
 8014e24:	1e43      	subs	r3, r0, #1
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	2b18      	cmp	r3, #24
 8014e2a:	d831      	bhi.n	8014e90 <__gethex+0x146>
 8014e2c:	f1a0 0210 	sub.w	r2, r0, #16
 8014e30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014e34:	f7ff ff74 	bl	8014d20 <__hexdig_fun>
 8014e38:	1e43      	subs	r3, r0, #1
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	2b18      	cmp	r3, #24
 8014e3e:	d922      	bls.n	8014e86 <__gethex+0x13c>
 8014e40:	f1b9 0f00 	cmp.w	r9, #0
 8014e44:	d000      	beq.n	8014e48 <__gethex+0xfe>
 8014e46:	4252      	negs	r2, r2
 8014e48:	4414      	add	r4, r2
 8014e4a:	f8ca 1000 	str.w	r1, [sl]
 8014e4e:	b30d      	cbz	r5, 8014e94 <__gethex+0x14a>
 8014e50:	f1bb 0f00 	cmp.w	fp, #0
 8014e54:	bf0c      	ite	eq
 8014e56:	2706      	moveq	r7, #6
 8014e58:	2700      	movne	r7, #0
 8014e5a:	4638      	mov	r0, r7
 8014e5c:	b00b      	add	sp, #44	; 0x2c
 8014e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e62:	f10b 0b01 	add.w	fp, fp, #1
 8014e66:	e78a      	b.n	8014d7e <__gethex+0x34>
 8014e68:	2500      	movs	r5, #0
 8014e6a:	462c      	mov	r4, r5
 8014e6c:	e7ae      	b.n	8014dcc <__gethex+0x82>
 8014e6e:	463e      	mov	r6, r7
 8014e70:	2501      	movs	r5, #1
 8014e72:	e7c7      	b.n	8014e04 <__gethex+0xba>
 8014e74:	4604      	mov	r4, r0
 8014e76:	e7fb      	b.n	8014e70 <__gethex+0x126>
 8014e78:	f04f 0900 	mov.w	r9, #0
 8014e7c:	1cb1      	adds	r1, r6, #2
 8014e7e:	e7ce      	b.n	8014e1e <__gethex+0xd4>
 8014e80:	f04f 0901 	mov.w	r9, #1
 8014e84:	e7fa      	b.n	8014e7c <__gethex+0x132>
 8014e86:	230a      	movs	r3, #10
 8014e88:	fb03 0202 	mla	r2, r3, r2, r0
 8014e8c:	3a10      	subs	r2, #16
 8014e8e:	e7cf      	b.n	8014e30 <__gethex+0xe6>
 8014e90:	4631      	mov	r1, r6
 8014e92:	e7da      	b.n	8014e4a <__gethex+0x100>
 8014e94:	1bf3      	subs	r3, r6, r7
 8014e96:	3b01      	subs	r3, #1
 8014e98:	4629      	mov	r1, r5
 8014e9a:	2b07      	cmp	r3, #7
 8014e9c:	dc49      	bgt.n	8014f32 <__gethex+0x1e8>
 8014e9e:	9802      	ldr	r0, [sp, #8]
 8014ea0:	f000 fabc 	bl	801541c <_Balloc>
 8014ea4:	9b01      	ldr	r3, [sp, #4]
 8014ea6:	f100 0914 	add.w	r9, r0, #20
 8014eaa:	f04f 0b00 	mov.w	fp, #0
 8014eae:	f1c3 0301 	rsb	r3, r3, #1
 8014eb2:	4605      	mov	r5, r0
 8014eb4:	f8cd 9010 	str.w	r9, [sp, #16]
 8014eb8:	46da      	mov	sl, fp
 8014eba:	9308      	str	r3, [sp, #32]
 8014ebc:	42b7      	cmp	r7, r6
 8014ebe:	d33b      	bcc.n	8014f38 <__gethex+0x1ee>
 8014ec0:	9804      	ldr	r0, [sp, #16]
 8014ec2:	f840 ab04 	str.w	sl, [r0], #4
 8014ec6:	eba0 0009 	sub.w	r0, r0, r9
 8014eca:	1080      	asrs	r0, r0, #2
 8014ecc:	6128      	str	r0, [r5, #16]
 8014ece:	0147      	lsls	r7, r0, #5
 8014ed0:	4650      	mov	r0, sl
 8014ed2:	f000 fb67 	bl	80155a4 <__hi0bits>
 8014ed6:	f8d8 6000 	ldr.w	r6, [r8]
 8014eda:	1a3f      	subs	r7, r7, r0
 8014edc:	42b7      	cmp	r7, r6
 8014ede:	dd64      	ble.n	8014faa <__gethex+0x260>
 8014ee0:	1bbf      	subs	r7, r7, r6
 8014ee2:	4639      	mov	r1, r7
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	f000 fe78 	bl	8015bda <__any_on>
 8014eea:	4682      	mov	sl, r0
 8014eec:	b178      	cbz	r0, 8014f0e <__gethex+0x1c4>
 8014eee:	1e7b      	subs	r3, r7, #1
 8014ef0:	1159      	asrs	r1, r3, #5
 8014ef2:	f003 021f 	and.w	r2, r3, #31
 8014ef6:	f04f 0a01 	mov.w	sl, #1
 8014efa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014efe:	fa0a f202 	lsl.w	r2, sl, r2
 8014f02:	420a      	tst	r2, r1
 8014f04:	d003      	beq.n	8014f0e <__gethex+0x1c4>
 8014f06:	4553      	cmp	r3, sl
 8014f08:	dc46      	bgt.n	8014f98 <__gethex+0x24e>
 8014f0a:	f04f 0a02 	mov.w	sl, #2
 8014f0e:	4639      	mov	r1, r7
 8014f10:	4628      	mov	r0, r5
 8014f12:	f7ff fecb 	bl	8014cac <rshift>
 8014f16:	443c      	add	r4, r7
 8014f18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f1c:	42a3      	cmp	r3, r4
 8014f1e:	da52      	bge.n	8014fc6 <__gethex+0x27c>
 8014f20:	4629      	mov	r1, r5
 8014f22:	9802      	ldr	r0, [sp, #8]
 8014f24:	f000 faae 	bl	8015484 <_Bfree>
 8014f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	6013      	str	r3, [r2, #0]
 8014f2e:	27a3      	movs	r7, #163	; 0xa3
 8014f30:	e793      	b.n	8014e5a <__gethex+0x110>
 8014f32:	3101      	adds	r1, #1
 8014f34:	105b      	asrs	r3, r3, #1
 8014f36:	e7b0      	b.n	8014e9a <__gethex+0x150>
 8014f38:	1e73      	subs	r3, r6, #1
 8014f3a:	9305      	str	r3, [sp, #20]
 8014f3c:	9a07      	ldr	r2, [sp, #28]
 8014f3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d018      	beq.n	8014f78 <__gethex+0x22e>
 8014f46:	f1bb 0f20 	cmp.w	fp, #32
 8014f4a:	d107      	bne.n	8014f5c <__gethex+0x212>
 8014f4c:	9b04      	ldr	r3, [sp, #16]
 8014f4e:	f8c3 a000 	str.w	sl, [r3]
 8014f52:	3304      	adds	r3, #4
 8014f54:	f04f 0a00 	mov.w	sl, #0
 8014f58:	9304      	str	r3, [sp, #16]
 8014f5a:	46d3      	mov	fp, sl
 8014f5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014f60:	f7ff fede 	bl	8014d20 <__hexdig_fun>
 8014f64:	f000 000f 	and.w	r0, r0, #15
 8014f68:	fa00 f00b 	lsl.w	r0, r0, fp
 8014f6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8014f70:	f10b 0b04 	add.w	fp, fp, #4
 8014f74:	9b05      	ldr	r3, [sp, #20]
 8014f76:	e00d      	b.n	8014f94 <__gethex+0x24a>
 8014f78:	9b05      	ldr	r3, [sp, #20]
 8014f7a:	9a08      	ldr	r2, [sp, #32]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	42bb      	cmp	r3, r7
 8014f80:	d3e1      	bcc.n	8014f46 <__gethex+0x1fc>
 8014f82:	4618      	mov	r0, r3
 8014f84:	9a01      	ldr	r2, [sp, #4]
 8014f86:	9903      	ldr	r1, [sp, #12]
 8014f88:	9309      	str	r3, [sp, #36]	; 0x24
 8014f8a:	f001 f8a2 	bl	80160d2 <strncmp>
 8014f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f90:	2800      	cmp	r0, #0
 8014f92:	d1d8      	bne.n	8014f46 <__gethex+0x1fc>
 8014f94:	461e      	mov	r6, r3
 8014f96:	e791      	b.n	8014ebc <__gethex+0x172>
 8014f98:	1eb9      	subs	r1, r7, #2
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	f000 fe1d 	bl	8015bda <__any_on>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d0b2      	beq.n	8014f0a <__gethex+0x1c0>
 8014fa4:	f04f 0a03 	mov.w	sl, #3
 8014fa8:	e7b1      	b.n	8014f0e <__gethex+0x1c4>
 8014faa:	da09      	bge.n	8014fc0 <__gethex+0x276>
 8014fac:	1bf7      	subs	r7, r6, r7
 8014fae:	4629      	mov	r1, r5
 8014fb0:	463a      	mov	r2, r7
 8014fb2:	9802      	ldr	r0, [sp, #8]
 8014fb4:	f000 fc32 	bl	801581c <__lshift>
 8014fb8:	1be4      	subs	r4, r4, r7
 8014fba:	4605      	mov	r5, r0
 8014fbc:	f100 0914 	add.w	r9, r0, #20
 8014fc0:	f04f 0a00 	mov.w	sl, #0
 8014fc4:	e7a8      	b.n	8014f18 <__gethex+0x1ce>
 8014fc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014fca:	42a0      	cmp	r0, r4
 8014fcc:	dd6a      	ble.n	80150a4 <__gethex+0x35a>
 8014fce:	1b04      	subs	r4, r0, r4
 8014fd0:	42a6      	cmp	r6, r4
 8014fd2:	dc2e      	bgt.n	8015032 <__gethex+0x2e8>
 8014fd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014fd8:	2b02      	cmp	r3, #2
 8014fda:	d022      	beq.n	8015022 <__gethex+0x2d8>
 8014fdc:	2b03      	cmp	r3, #3
 8014fde:	d024      	beq.n	801502a <__gethex+0x2e0>
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d115      	bne.n	8015010 <__gethex+0x2c6>
 8014fe4:	42a6      	cmp	r6, r4
 8014fe6:	d113      	bne.n	8015010 <__gethex+0x2c6>
 8014fe8:	2e01      	cmp	r6, #1
 8014fea:	dc0b      	bgt.n	8015004 <__gethex+0x2ba>
 8014fec:	9a06      	ldr	r2, [sp, #24]
 8014fee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ff2:	6013      	str	r3, [r2, #0]
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	612b      	str	r3, [r5, #16]
 8014ff8:	f8c9 3000 	str.w	r3, [r9]
 8014ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ffe:	2762      	movs	r7, #98	; 0x62
 8015000:	601d      	str	r5, [r3, #0]
 8015002:	e72a      	b.n	8014e5a <__gethex+0x110>
 8015004:	1e71      	subs	r1, r6, #1
 8015006:	4628      	mov	r0, r5
 8015008:	f000 fde7 	bl	8015bda <__any_on>
 801500c:	2800      	cmp	r0, #0
 801500e:	d1ed      	bne.n	8014fec <__gethex+0x2a2>
 8015010:	4629      	mov	r1, r5
 8015012:	9802      	ldr	r0, [sp, #8]
 8015014:	f000 fa36 	bl	8015484 <_Bfree>
 8015018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801501a:	2300      	movs	r3, #0
 801501c:	6013      	str	r3, [r2, #0]
 801501e:	2750      	movs	r7, #80	; 0x50
 8015020:	e71b      	b.n	8014e5a <__gethex+0x110>
 8015022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015024:	2b00      	cmp	r3, #0
 8015026:	d0e1      	beq.n	8014fec <__gethex+0x2a2>
 8015028:	e7f2      	b.n	8015010 <__gethex+0x2c6>
 801502a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801502c:	2b00      	cmp	r3, #0
 801502e:	d1dd      	bne.n	8014fec <__gethex+0x2a2>
 8015030:	e7ee      	b.n	8015010 <__gethex+0x2c6>
 8015032:	1e67      	subs	r7, r4, #1
 8015034:	f1ba 0f00 	cmp.w	sl, #0
 8015038:	d131      	bne.n	801509e <__gethex+0x354>
 801503a:	b127      	cbz	r7, 8015046 <__gethex+0x2fc>
 801503c:	4639      	mov	r1, r7
 801503e:	4628      	mov	r0, r5
 8015040:	f000 fdcb 	bl	8015bda <__any_on>
 8015044:	4682      	mov	sl, r0
 8015046:	117a      	asrs	r2, r7, #5
 8015048:	2301      	movs	r3, #1
 801504a:	f007 071f 	and.w	r7, r7, #31
 801504e:	fa03 f707 	lsl.w	r7, r3, r7
 8015052:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015056:	4621      	mov	r1, r4
 8015058:	421f      	tst	r7, r3
 801505a:	4628      	mov	r0, r5
 801505c:	bf18      	it	ne
 801505e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015062:	1b36      	subs	r6, r6, r4
 8015064:	f7ff fe22 	bl	8014cac <rshift>
 8015068:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801506c:	2702      	movs	r7, #2
 801506e:	f1ba 0f00 	cmp.w	sl, #0
 8015072:	d048      	beq.n	8015106 <__gethex+0x3bc>
 8015074:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015078:	2b02      	cmp	r3, #2
 801507a:	d015      	beq.n	80150a8 <__gethex+0x35e>
 801507c:	2b03      	cmp	r3, #3
 801507e:	d017      	beq.n	80150b0 <__gethex+0x366>
 8015080:	2b01      	cmp	r3, #1
 8015082:	d109      	bne.n	8015098 <__gethex+0x34e>
 8015084:	f01a 0f02 	tst.w	sl, #2
 8015088:	d006      	beq.n	8015098 <__gethex+0x34e>
 801508a:	f8d9 3000 	ldr.w	r3, [r9]
 801508e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015092:	f01a 0f01 	tst.w	sl, #1
 8015096:	d10e      	bne.n	80150b6 <__gethex+0x36c>
 8015098:	f047 0710 	orr.w	r7, r7, #16
 801509c:	e033      	b.n	8015106 <__gethex+0x3bc>
 801509e:	f04f 0a01 	mov.w	sl, #1
 80150a2:	e7d0      	b.n	8015046 <__gethex+0x2fc>
 80150a4:	2701      	movs	r7, #1
 80150a6:	e7e2      	b.n	801506e <__gethex+0x324>
 80150a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150aa:	f1c3 0301 	rsb	r3, r3, #1
 80150ae:	9315      	str	r3, [sp, #84]	; 0x54
 80150b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d0f0      	beq.n	8015098 <__gethex+0x34e>
 80150b6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80150ba:	f105 0314 	add.w	r3, r5, #20
 80150be:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80150c2:	eb03 010a 	add.w	r1, r3, sl
 80150c6:	f04f 0c00 	mov.w	ip, #0
 80150ca:	4618      	mov	r0, r3
 80150cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80150d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80150d4:	d01c      	beq.n	8015110 <__gethex+0x3c6>
 80150d6:	3201      	adds	r2, #1
 80150d8:	6002      	str	r2, [r0, #0]
 80150da:	2f02      	cmp	r7, #2
 80150dc:	f105 0314 	add.w	r3, r5, #20
 80150e0:	d138      	bne.n	8015154 <__gethex+0x40a>
 80150e2:	f8d8 2000 	ldr.w	r2, [r8]
 80150e6:	3a01      	subs	r2, #1
 80150e8:	42b2      	cmp	r2, r6
 80150ea:	d10a      	bne.n	8015102 <__gethex+0x3b8>
 80150ec:	1171      	asrs	r1, r6, #5
 80150ee:	2201      	movs	r2, #1
 80150f0:	f006 061f 	and.w	r6, r6, #31
 80150f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80150f8:	fa02 f606 	lsl.w	r6, r2, r6
 80150fc:	421e      	tst	r6, r3
 80150fe:	bf18      	it	ne
 8015100:	4617      	movne	r7, r2
 8015102:	f047 0720 	orr.w	r7, r7, #32
 8015106:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015108:	601d      	str	r5, [r3, #0]
 801510a:	9b06      	ldr	r3, [sp, #24]
 801510c:	601c      	str	r4, [r3, #0]
 801510e:	e6a4      	b.n	8014e5a <__gethex+0x110>
 8015110:	4299      	cmp	r1, r3
 8015112:	f843 cc04 	str.w	ip, [r3, #-4]
 8015116:	d8d8      	bhi.n	80150ca <__gethex+0x380>
 8015118:	68ab      	ldr	r3, [r5, #8]
 801511a:	4599      	cmp	r9, r3
 801511c:	db12      	blt.n	8015144 <__gethex+0x3fa>
 801511e:	6869      	ldr	r1, [r5, #4]
 8015120:	9802      	ldr	r0, [sp, #8]
 8015122:	3101      	adds	r1, #1
 8015124:	f000 f97a 	bl	801541c <_Balloc>
 8015128:	692a      	ldr	r2, [r5, #16]
 801512a:	3202      	adds	r2, #2
 801512c:	f105 010c 	add.w	r1, r5, #12
 8015130:	4683      	mov	fp, r0
 8015132:	0092      	lsls	r2, r2, #2
 8015134:	300c      	adds	r0, #12
 8015136:	f7fd f875 	bl	8012224 <memcpy>
 801513a:	4629      	mov	r1, r5
 801513c:	9802      	ldr	r0, [sp, #8]
 801513e:	f000 f9a1 	bl	8015484 <_Bfree>
 8015142:	465d      	mov	r5, fp
 8015144:	692b      	ldr	r3, [r5, #16]
 8015146:	1c5a      	adds	r2, r3, #1
 8015148:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801514c:	612a      	str	r2, [r5, #16]
 801514e:	2201      	movs	r2, #1
 8015150:	615a      	str	r2, [r3, #20]
 8015152:	e7c2      	b.n	80150da <__gethex+0x390>
 8015154:	692a      	ldr	r2, [r5, #16]
 8015156:	454a      	cmp	r2, r9
 8015158:	dd0b      	ble.n	8015172 <__gethex+0x428>
 801515a:	2101      	movs	r1, #1
 801515c:	4628      	mov	r0, r5
 801515e:	f7ff fda5 	bl	8014cac <rshift>
 8015162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015166:	3401      	adds	r4, #1
 8015168:	42a3      	cmp	r3, r4
 801516a:	f6ff aed9 	blt.w	8014f20 <__gethex+0x1d6>
 801516e:	2701      	movs	r7, #1
 8015170:	e7c7      	b.n	8015102 <__gethex+0x3b8>
 8015172:	f016 061f 	ands.w	r6, r6, #31
 8015176:	d0fa      	beq.n	801516e <__gethex+0x424>
 8015178:	449a      	add	sl, r3
 801517a:	f1c6 0620 	rsb	r6, r6, #32
 801517e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015182:	f000 fa0f 	bl	80155a4 <__hi0bits>
 8015186:	42b0      	cmp	r0, r6
 8015188:	dbe7      	blt.n	801515a <__gethex+0x410>
 801518a:	e7f0      	b.n	801516e <__gethex+0x424>

0801518c <L_shift>:
 801518c:	f1c2 0208 	rsb	r2, r2, #8
 8015190:	0092      	lsls	r2, r2, #2
 8015192:	b570      	push	{r4, r5, r6, lr}
 8015194:	f1c2 0620 	rsb	r6, r2, #32
 8015198:	6843      	ldr	r3, [r0, #4]
 801519a:	6804      	ldr	r4, [r0, #0]
 801519c:	fa03 f506 	lsl.w	r5, r3, r6
 80151a0:	432c      	orrs	r4, r5
 80151a2:	40d3      	lsrs	r3, r2
 80151a4:	6004      	str	r4, [r0, #0]
 80151a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80151aa:	4288      	cmp	r0, r1
 80151ac:	d3f4      	bcc.n	8015198 <L_shift+0xc>
 80151ae:	bd70      	pop	{r4, r5, r6, pc}

080151b0 <__match>:
 80151b0:	b530      	push	{r4, r5, lr}
 80151b2:	6803      	ldr	r3, [r0, #0]
 80151b4:	3301      	adds	r3, #1
 80151b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151ba:	b914      	cbnz	r4, 80151c2 <__match+0x12>
 80151bc:	6003      	str	r3, [r0, #0]
 80151be:	2001      	movs	r0, #1
 80151c0:	bd30      	pop	{r4, r5, pc}
 80151c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80151ca:	2d19      	cmp	r5, #25
 80151cc:	bf98      	it	ls
 80151ce:	3220      	addls	r2, #32
 80151d0:	42a2      	cmp	r2, r4
 80151d2:	d0f0      	beq.n	80151b6 <__match+0x6>
 80151d4:	2000      	movs	r0, #0
 80151d6:	e7f3      	b.n	80151c0 <__match+0x10>

080151d8 <__hexnan>:
 80151d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151dc:	680b      	ldr	r3, [r1, #0]
 80151de:	6801      	ldr	r1, [r0, #0]
 80151e0:	115f      	asrs	r7, r3, #5
 80151e2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80151e6:	f013 031f 	ands.w	r3, r3, #31
 80151ea:	b087      	sub	sp, #28
 80151ec:	bf18      	it	ne
 80151ee:	3704      	addne	r7, #4
 80151f0:	2500      	movs	r5, #0
 80151f2:	1f3e      	subs	r6, r7, #4
 80151f4:	4682      	mov	sl, r0
 80151f6:	4690      	mov	r8, r2
 80151f8:	9301      	str	r3, [sp, #4]
 80151fa:	f847 5c04 	str.w	r5, [r7, #-4]
 80151fe:	46b1      	mov	r9, r6
 8015200:	4634      	mov	r4, r6
 8015202:	9502      	str	r5, [sp, #8]
 8015204:	46ab      	mov	fp, r5
 8015206:	784a      	ldrb	r2, [r1, #1]
 8015208:	1c4b      	adds	r3, r1, #1
 801520a:	9303      	str	r3, [sp, #12]
 801520c:	b342      	cbz	r2, 8015260 <__hexnan+0x88>
 801520e:	4610      	mov	r0, r2
 8015210:	9105      	str	r1, [sp, #20]
 8015212:	9204      	str	r2, [sp, #16]
 8015214:	f7ff fd84 	bl	8014d20 <__hexdig_fun>
 8015218:	2800      	cmp	r0, #0
 801521a:	d143      	bne.n	80152a4 <__hexnan+0xcc>
 801521c:	9a04      	ldr	r2, [sp, #16]
 801521e:	9905      	ldr	r1, [sp, #20]
 8015220:	2a20      	cmp	r2, #32
 8015222:	d818      	bhi.n	8015256 <__hexnan+0x7e>
 8015224:	9b02      	ldr	r3, [sp, #8]
 8015226:	459b      	cmp	fp, r3
 8015228:	dd13      	ble.n	8015252 <__hexnan+0x7a>
 801522a:	454c      	cmp	r4, r9
 801522c:	d206      	bcs.n	801523c <__hexnan+0x64>
 801522e:	2d07      	cmp	r5, #7
 8015230:	dc04      	bgt.n	801523c <__hexnan+0x64>
 8015232:	462a      	mov	r2, r5
 8015234:	4649      	mov	r1, r9
 8015236:	4620      	mov	r0, r4
 8015238:	f7ff ffa8 	bl	801518c <L_shift>
 801523c:	4544      	cmp	r4, r8
 801523e:	d944      	bls.n	80152ca <__hexnan+0xf2>
 8015240:	2300      	movs	r3, #0
 8015242:	f1a4 0904 	sub.w	r9, r4, #4
 8015246:	f844 3c04 	str.w	r3, [r4, #-4]
 801524a:	f8cd b008 	str.w	fp, [sp, #8]
 801524e:	464c      	mov	r4, r9
 8015250:	461d      	mov	r5, r3
 8015252:	9903      	ldr	r1, [sp, #12]
 8015254:	e7d7      	b.n	8015206 <__hexnan+0x2e>
 8015256:	2a29      	cmp	r2, #41	; 0x29
 8015258:	d14a      	bne.n	80152f0 <__hexnan+0x118>
 801525a:	3102      	adds	r1, #2
 801525c:	f8ca 1000 	str.w	r1, [sl]
 8015260:	f1bb 0f00 	cmp.w	fp, #0
 8015264:	d044      	beq.n	80152f0 <__hexnan+0x118>
 8015266:	454c      	cmp	r4, r9
 8015268:	d206      	bcs.n	8015278 <__hexnan+0xa0>
 801526a:	2d07      	cmp	r5, #7
 801526c:	dc04      	bgt.n	8015278 <__hexnan+0xa0>
 801526e:	462a      	mov	r2, r5
 8015270:	4649      	mov	r1, r9
 8015272:	4620      	mov	r0, r4
 8015274:	f7ff ff8a 	bl	801518c <L_shift>
 8015278:	4544      	cmp	r4, r8
 801527a:	d928      	bls.n	80152ce <__hexnan+0xf6>
 801527c:	4643      	mov	r3, r8
 801527e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015282:	f843 2b04 	str.w	r2, [r3], #4
 8015286:	42a6      	cmp	r6, r4
 8015288:	d2f9      	bcs.n	801527e <__hexnan+0xa6>
 801528a:	2200      	movs	r2, #0
 801528c:	f843 2b04 	str.w	r2, [r3], #4
 8015290:	429e      	cmp	r6, r3
 8015292:	d2fb      	bcs.n	801528c <__hexnan+0xb4>
 8015294:	6833      	ldr	r3, [r6, #0]
 8015296:	b91b      	cbnz	r3, 80152a0 <__hexnan+0xc8>
 8015298:	4546      	cmp	r6, r8
 801529a:	d127      	bne.n	80152ec <__hexnan+0x114>
 801529c:	2301      	movs	r3, #1
 801529e:	6033      	str	r3, [r6, #0]
 80152a0:	2005      	movs	r0, #5
 80152a2:	e026      	b.n	80152f2 <__hexnan+0x11a>
 80152a4:	3501      	adds	r5, #1
 80152a6:	2d08      	cmp	r5, #8
 80152a8:	f10b 0b01 	add.w	fp, fp, #1
 80152ac:	dd06      	ble.n	80152bc <__hexnan+0xe4>
 80152ae:	4544      	cmp	r4, r8
 80152b0:	d9cf      	bls.n	8015252 <__hexnan+0x7a>
 80152b2:	2300      	movs	r3, #0
 80152b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80152b8:	2501      	movs	r5, #1
 80152ba:	3c04      	subs	r4, #4
 80152bc:	6822      	ldr	r2, [r4, #0]
 80152be:	f000 000f 	and.w	r0, r0, #15
 80152c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80152c6:	6020      	str	r0, [r4, #0]
 80152c8:	e7c3      	b.n	8015252 <__hexnan+0x7a>
 80152ca:	2508      	movs	r5, #8
 80152cc:	e7c1      	b.n	8015252 <__hexnan+0x7a>
 80152ce:	9b01      	ldr	r3, [sp, #4]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d0df      	beq.n	8015294 <__hexnan+0xbc>
 80152d4:	f04f 32ff 	mov.w	r2, #4294967295
 80152d8:	f1c3 0320 	rsb	r3, r3, #32
 80152dc:	fa22 f303 	lsr.w	r3, r2, r3
 80152e0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80152e4:	401a      	ands	r2, r3
 80152e6:	f847 2c04 	str.w	r2, [r7, #-4]
 80152ea:	e7d3      	b.n	8015294 <__hexnan+0xbc>
 80152ec:	3e04      	subs	r6, #4
 80152ee:	e7d1      	b.n	8015294 <__hexnan+0xbc>
 80152f0:	2004      	movs	r0, #4
 80152f2:	b007      	add	sp, #28
 80152f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152f8 <__locale_ctype_ptr_l>:
 80152f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80152fc:	4770      	bx	lr

080152fe <__localeconv_l>:
 80152fe:	30f0      	adds	r0, #240	; 0xf0
 8015300:	4770      	bx	lr
	...

08015304 <_localeconv_r>:
 8015304:	4b04      	ldr	r3, [pc, #16]	; (8015318 <_localeconv_r+0x14>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	6a18      	ldr	r0, [r3, #32]
 801530a:	4b04      	ldr	r3, [pc, #16]	; (801531c <_localeconv_r+0x18>)
 801530c:	2800      	cmp	r0, #0
 801530e:	bf08      	it	eq
 8015310:	4618      	moveq	r0, r3
 8015312:	30f0      	adds	r0, #240	; 0xf0
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	200001b8 	.word	0x200001b8
 801531c:	2000021c 	.word	0x2000021c

08015320 <__swhatbuf_r>:
 8015320:	b570      	push	{r4, r5, r6, lr}
 8015322:	460e      	mov	r6, r1
 8015324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015328:	2900      	cmp	r1, #0
 801532a:	b096      	sub	sp, #88	; 0x58
 801532c:	4614      	mov	r4, r2
 801532e:	461d      	mov	r5, r3
 8015330:	da07      	bge.n	8015342 <__swhatbuf_r+0x22>
 8015332:	2300      	movs	r3, #0
 8015334:	602b      	str	r3, [r5, #0]
 8015336:	89b3      	ldrh	r3, [r6, #12]
 8015338:	061a      	lsls	r2, r3, #24
 801533a:	d410      	bmi.n	801535e <__swhatbuf_r+0x3e>
 801533c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015340:	e00e      	b.n	8015360 <__swhatbuf_r+0x40>
 8015342:	466a      	mov	r2, sp
 8015344:	f000 ff06 	bl	8016154 <_fstat_r>
 8015348:	2800      	cmp	r0, #0
 801534a:	dbf2      	blt.n	8015332 <__swhatbuf_r+0x12>
 801534c:	9a01      	ldr	r2, [sp, #4]
 801534e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015352:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015356:	425a      	negs	r2, r3
 8015358:	415a      	adcs	r2, r3
 801535a:	602a      	str	r2, [r5, #0]
 801535c:	e7ee      	b.n	801533c <__swhatbuf_r+0x1c>
 801535e:	2340      	movs	r3, #64	; 0x40
 8015360:	2000      	movs	r0, #0
 8015362:	6023      	str	r3, [r4, #0]
 8015364:	b016      	add	sp, #88	; 0x58
 8015366:	bd70      	pop	{r4, r5, r6, pc}

08015368 <__smakebuf_r>:
 8015368:	898b      	ldrh	r3, [r1, #12]
 801536a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801536c:	079d      	lsls	r5, r3, #30
 801536e:	4606      	mov	r6, r0
 8015370:	460c      	mov	r4, r1
 8015372:	d507      	bpl.n	8015384 <__smakebuf_r+0x1c>
 8015374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015378:	6023      	str	r3, [r4, #0]
 801537a:	6123      	str	r3, [r4, #16]
 801537c:	2301      	movs	r3, #1
 801537e:	6163      	str	r3, [r4, #20]
 8015380:	b002      	add	sp, #8
 8015382:	bd70      	pop	{r4, r5, r6, pc}
 8015384:	ab01      	add	r3, sp, #4
 8015386:	466a      	mov	r2, sp
 8015388:	f7ff ffca 	bl	8015320 <__swhatbuf_r>
 801538c:	9900      	ldr	r1, [sp, #0]
 801538e:	4605      	mov	r5, r0
 8015390:	4630      	mov	r0, r6
 8015392:	f000 fc9f 	bl	8015cd4 <_malloc_r>
 8015396:	b948      	cbnz	r0, 80153ac <__smakebuf_r+0x44>
 8015398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801539c:	059a      	lsls	r2, r3, #22
 801539e:	d4ef      	bmi.n	8015380 <__smakebuf_r+0x18>
 80153a0:	f023 0303 	bic.w	r3, r3, #3
 80153a4:	f043 0302 	orr.w	r3, r3, #2
 80153a8:	81a3      	strh	r3, [r4, #12]
 80153aa:	e7e3      	b.n	8015374 <__smakebuf_r+0xc>
 80153ac:	4b0d      	ldr	r3, [pc, #52]	; (80153e4 <__smakebuf_r+0x7c>)
 80153ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80153b0:	89a3      	ldrh	r3, [r4, #12]
 80153b2:	6020      	str	r0, [r4, #0]
 80153b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153b8:	81a3      	strh	r3, [r4, #12]
 80153ba:	9b00      	ldr	r3, [sp, #0]
 80153bc:	6163      	str	r3, [r4, #20]
 80153be:	9b01      	ldr	r3, [sp, #4]
 80153c0:	6120      	str	r0, [r4, #16]
 80153c2:	b15b      	cbz	r3, 80153dc <__smakebuf_r+0x74>
 80153c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153c8:	4630      	mov	r0, r6
 80153ca:	f000 fed5 	bl	8016178 <_isatty_r>
 80153ce:	b128      	cbz	r0, 80153dc <__smakebuf_r+0x74>
 80153d0:	89a3      	ldrh	r3, [r4, #12]
 80153d2:	f023 0303 	bic.w	r3, r3, #3
 80153d6:	f043 0301 	orr.w	r3, r3, #1
 80153da:	81a3      	strh	r3, [r4, #12]
 80153dc:	89a3      	ldrh	r3, [r4, #12]
 80153de:	431d      	orrs	r5, r3
 80153e0:	81a5      	strh	r5, [r4, #12]
 80153e2:	e7cd      	b.n	8015380 <__smakebuf_r+0x18>
 80153e4:	08014b61 	.word	0x08014b61

080153e8 <malloc>:
 80153e8:	4b02      	ldr	r3, [pc, #8]	; (80153f4 <malloc+0xc>)
 80153ea:	4601      	mov	r1, r0
 80153ec:	6818      	ldr	r0, [r3, #0]
 80153ee:	f000 bc71 	b.w	8015cd4 <_malloc_r>
 80153f2:	bf00      	nop
 80153f4:	200001b8 	.word	0x200001b8

080153f8 <__ascii_mbtowc>:
 80153f8:	b082      	sub	sp, #8
 80153fa:	b901      	cbnz	r1, 80153fe <__ascii_mbtowc+0x6>
 80153fc:	a901      	add	r1, sp, #4
 80153fe:	b142      	cbz	r2, 8015412 <__ascii_mbtowc+0x1a>
 8015400:	b14b      	cbz	r3, 8015416 <__ascii_mbtowc+0x1e>
 8015402:	7813      	ldrb	r3, [r2, #0]
 8015404:	600b      	str	r3, [r1, #0]
 8015406:	7812      	ldrb	r2, [r2, #0]
 8015408:	1c10      	adds	r0, r2, #0
 801540a:	bf18      	it	ne
 801540c:	2001      	movne	r0, #1
 801540e:	b002      	add	sp, #8
 8015410:	4770      	bx	lr
 8015412:	4610      	mov	r0, r2
 8015414:	e7fb      	b.n	801540e <__ascii_mbtowc+0x16>
 8015416:	f06f 0001 	mvn.w	r0, #1
 801541a:	e7f8      	b.n	801540e <__ascii_mbtowc+0x16>

0801541c <_Balloc>:
 801541c:	b570      	push	{r4, r5, r6, lr}
 801541e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015420:	4604      	mov	r4, r0
 8015422:	460e      	mov	r6, r1
 8015424:	b93d      	cbnz	r5, 8015436 <_Balloc+0x1a>
 8015426:	2010      	movs	r0, #16
 8015428:	f7ff ffde 	bl	80153e8 <malloc>
 801542c:	6260      	str	r0, [r4, #36]	; 0x24
 801542e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015432:	6005      	str	r5, [r0, #0]
 8015434:	60c5      	str	r5, [r0, #12]
 8015436:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015438:	68eb      	ldr	r3, [r5, #12]
 801543a:	b183      	cbz	r3, 801545e <_Balloc+0x42>
 801543c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801543e:	68db      	ldr	r3, [r3, #12]
 8015440:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015444:	b9b8      	cbnz	r0, 8015476 <_Balloc+0x5a>
 8015446:	2101      	movs	r1, #1
 8015448:	fa01 f506 	lsl.w	r5, r1, r6
 801544c:	1d6a      	adds	r2, r5, #5
 801544e:	0092      	lsls	r2, r2, #2
 8015450:	4620      	mov	r0, r4
 8015452:	f000 fbe3 	bl	8015c1c <_calloc_r>
 8015456:	b160      	cbz	r0, 8015472 <_Balloc+0x56>
 8015458:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801545c:	e00e      	b.n	801547c <_Balloc+0x60>
 801545e:	2221      	movs	r2, #33	; 0x21
 8015460:	2104      	movs	r1, #4
 8015462:	4620      	mov	r0, r4
 8015464:	f000 fbda 	bl	8015c1c <_calloc_r>
 8015468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801546a:	60e8      	str	r0, [r5, #12]
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d1e4      	bne.n	801543c <_Balloc+0x20>
 8015472:	2000      	movs	r0, #0
 8015474:	bd70      	pop	{r4, r5, r6, pc}
 8015476:	6802      	ldr	r2, [r0, #0]
 8015478:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801547c:	2300      	movs	r3, #0
 801547e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015482:	e7f7      	b.n	8015474 <_Balloc+0x58>

08015484 <_Bfree>:
 8015484:	b570      	push	{r4, r5, r6, lr}
 8015486:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015488:	4606      	mov	r6, r0
 801548a:	460d      	mov	r5, r1
 801548c:	b93c      	cbnz	r4, 801549e <_Bfree+0x1a>
 801548e:	2010      	movs	r0, #16
 8015490:	f7ff ffaa 	bl	80153e8 <malloc>
 8015494:	6270      	str	r0, [r6, #36]	; 0x24
 8015496:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801549a:	6004      	str	r4, [r0, #0]
 801549c:	60c4      	str	r4, [r0, #12]
 801549e:	b13d      	cbz	r5, 80154b0 <_Bfree+0x2c>
 80154a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80154a2:	686a      	ldr	r2, [r5, #4]
 80154a4:	68db      	ldr	r3, [r3, #12]
 80154a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154aa:	6029      	str	r1, [r5, #0]
 80154ac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80154b0:	bd70      	pop	{r4, r5, r6, pc}

080154b2 <__multadd>:
 80154b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b6:	690d      	ldr	r5, [r1, #16]
 80154b8:	461f      	mov	r7, r3
 80154ba:	4606      	mov	r6, r0
 80154bc:	460c      	mov	r4, r1
 80154be:	f101 0c14 	add.w	ip, r1, #20
 80154c2:	2300      	movs	r3, #0
 80154c4:	f8dc 0000 	ldr.w	r0, [ip]
 80154c8:	b281      	uxth	r1, r0
 80154ca:	fb02 7101 	mla	r1, r2, r1, r7
 80154ce:	0c0f      	lsrs	r7, r1, #16
 80154d0:	0c00      	lsrs	r0, r0, #16
 80154d2:	fb02 7000 	mla	r0, r2, r0, r7
 80154d6:	b289      	uxth	r1, r1
 80154d8:	3301      	adds	r3, #1
 80154da:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80154de:	429d      	cmp	r5, r3
 80154e0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80154e4:	f84c 1b04 	str.w	r1, [ip], #4
 80154e8:	dcec      	bgt.n	80154c4 <__multadd+0x12>
 80154ea:	b1d7      	cbz	r7, 8015522 <__multadd+0x70>
 80154ec:	68a3      	ldr	r3, [r4, #8]
 80154ee:	42ab      	cmp	r3, r5
 80154f0:	dc12      	bgt.n	8015518 <__multadd+0x66>
 80154f2:	6861      	ldr	r1, [r4, #4]
 80154f4:	4630      	mov	r0, r6
 80154f6:	3101      	adds	r1, #1
 80154f8:	f7ff ff90 	bl	801541c <_Balloc>
 80154fc:	6922      	ldr	r2, [r4, #16]
 80154fe:	3202      	adds	r2, #2
 8015500:	f104 010c 	add.w	r1, r4, #12
 8015504:	4680      	mov	r8, r0
 8015506:	0092      	lsls	r2, r2, #2
 8015508:	300c      	adds	r0, #12
 801550a:	f7fc fe8b 	bl	8012224 <memcpy>
 801550e:	4621      	mov	r1, r4
 8015510:	4630      	mov	r0, r6
 8015512:	f7ff ffb7 	bl	8015484 <_Bfree>
 8015516:	4644      	mov	r4, r8
 8015518:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801551c:	3501      	adds	r5, #1
 801551e:	615f      	str	r7, [r3, #20]
 8015520:	6125      	str	r5, [r4, #16]
 8015522:	4620      	mov	r0, r4
 8015524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015528 <__s2b>:
 8015528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801552c:	460c      	mov	r4, r1
 801552e:	4615      	mov	r5, r2
 8015530:	461f      	mov	r7, r3
 8015532:	2209      	movs	r2, #9
 8015534:	3308      	adds	r3, #8
 8015536:	4606      	mov	r6, r0
 8015538:	fb93 f3f2 	sdiv	r3, r3, r2
 801553c:	2100      	movs	r1, #0
 801553e:	2201      	movs	r2, #1
 8015540:	429a      	cmp	r2, r3
 8015542:	db20      	blt.n	8015586 <__s2b+0x5e>
 8015544:	4630      	mov	r0, r6
 8015546:	f7ff ff69 	bl	801541c <_Balloc>
 801554a:	9b08      	ldr	r3, [sp, #32]
 801554c:	6143      	str	r3, [r0, #20]
 801554e:	2d09      	cmp	r5, #9
 8015550:	f04f 0301 	mov.w	r3, #1
 8015554:	6103      	str	r3, [r0, #16]
 8015556:	dd19      	ble.n	801558c <__s2b+0x64>
 8015558:	f104 0809 	add.w	r8, r4, #9
 801555c:	46c1      	mov	r9, r8
 801555e:	442c      	add	r4, r5
 8015560:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015564:	4601      	mov	r1, r0
 8015566:	3b30      	subs	r3, #48	; 0x30
 8015568:	220a      	movs	r2, #10
 801556a:	4630      	mov	r0, r6
 801556c:	f7ff ffa1 	bl	80154b2 <__multadd>
 8015570:	45a1      	cmp	r9, r4
 8015572:	d1f5      	bne.n	8015560 <__s2b+0x38>
 8015574:	eb08 0405 	add.w	r4, r8, r5
 8015578:	3c08      	subs	r4, #8
 801557a:	1b2d      	subs	r5, r5, r4
 801557c:	1963      	adds	r3, r4, r5
 801557e:	42bb      	cmp	r3, r7
 8015580:	db07      	blt.n	8015592 <__s2b+0x6a>
 8015582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015586:	0052      	lsls	r2, r2, #1
 8015588:	3101      	adds	r1, #1
 801558a:	e7d9      	b.n	8015540 <__s2b+0x18>
 801558c:	340a      	adds	r4, #10
 801558e:	2509      	movs	r5, #9
 8015590:	e7f3      	b.n	801557a <__s2b+0x52>
 8015592:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015596:	4601      	mov	r1, r0
 8015598:	3b30      	subs	r3, #48	; 0x30
 801559a:	220a      	movs	r2, #10
 801559c:	4630      	mov	r0, r6
 801559e:	f7ff ff88 	bl	80154b2 <__multadd>
 80155a2:	e7eb      	b.n	801557c <__s2b+0x54>

080155a4 <__hi0bits>:
 80155a4:	0c02      	lsrs	r2, r0, #16
 80155a6:	0412      	lsls	r2, r2, #16
 80155a8:	4603      	mov	r3, r0
 80155aa:	b9b2      	cbnz	r2, 80155da <__hi0bits+0x36>
 80155ac:	0403      	lsls	r3, r0, #16
 80155ae:	2010      	movs	r0, #16
 80155b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80155b4:	bf04      	itt	eq
 80155b6:	021b      	lsleq	r3, r3, #8
 80155b8:	3008      	addeq	r0, #8
 80155ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80155be:	bf04      	itt	eq
 80155c0:	011b      	lsleq	r3, r3, #4
 80155c2:	3004      	addeq	r0, #4
 80155c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80155c8:	bf04      	itt	eq
 80155ca:	009b      	lsleq	r3, r3, #2
 80155cc:	3002      	addeq	r0, #2
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	db06      	blt.n	80155e0 <__hi0bits+0x3c>
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	d503      	bpl.n	80155de <__hi0bits+0x3a>
 80155d6:	3001      	adds	r0, #1
 80155d8:	4770      	bx	lr
 80155da:	2000      	movs	r0, #0
 80155dc:	e7e8      	b.n	80155b0 <__hi0bits+0xc>
 80155de:	2020      	movs	r0, #32
 80155e0:	4770      	bx	lr

080155e2 <__lo0bits>:
 80155e2:	6803      	ldr	r3, [r0, #0]
 80155e4:	f013 0207 	ands.w	r2, r3, #7
 80155e8:	4601      	mov	r1, r0
 80155ea:	d00b      	beq.n	8015604 <__lo0bits+0x22>
 80155ec:	07da      	lsls	r2, r3, #31
 80155ee:	d423      	bmi.n	8015638 <__lo0bits+0x56>
 80155f0:	0798      	lsls	r0, r3, #30
 80155f2:	bf49      	itett	mi
 80155f4:	085b      	lsrmi	r3, r3, #1
 80155f6:	089b      	lsrpl	r3, r3, #2
 80155f8:	2001      	movmi	r0, #1
 80155fa:	600b      	strmi	r3, [r1, #0]
 80155fc:	bf5c      	itt	pl
 80155fe:	600b      	strpl	r3, [r1, #0]
 8015600:	2002      	movpl	r0, #2
 8015602:	4770      	bx	lr
 8015604:	b298      	uxth	r0, r3
 8015606:	b9a8      	cbnz	r0, 8015634 <__lo0bits+0x52>
 8015608:	0c1b      	lsrs	r3, r3, #16
 801560a:	2010      	movs	r0, #16
 801560c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015610:	bf04      	itt	eq
 8015612:	0a1b      	lsreq	r3, r3, #8
 8015614:	3008      	addeq	r0, #8
 8015616:	071a      	lsls	r2, r3, #28
 8015618:	bf04      	itt	eq
 801561a:	091b      	lsreq	r3, r3, #4
 801561c:	3004      	addeq	r0, #4
 801561e:	079a      	lsls	r2, r3, #30
 8015620:	bf04      	itt	eq
 8015622:	089b      	lsreq	r3, r3, #2
 8015624:	3002      	addeq	r0, #2
 8015626:	07da      	lsls	r2, r3, #31
 8015628:	d402      	bmi.n	8015630 <__lo0bits+0x4e>
 801562a:	085b      	lsrs	r3, r3, #1
 801562c:	d006      	beq.n	801563c <__lo0bits+0x5a>
 801562e:	3001      	adds	r0, #1
 8015630:	600b      	str	r3, [r1, #0]
 8015632:	4770      	bx	lr
 8015634:	4610      	mov	r0, r2
 8015636:	e7e9      	b.n	801560c <__lo0bits+0x2a>
 8015638:	2000      	movs	r0, #0
 801563a:	4770      	bx	lr
 801563c:	2020      	movs	r0, #32
 801563e:	4770      	bx	lr

08015640 <__i2b>:
 8015640:	b510      	push	{r4, lr}
 8015642:	460c      	mov	r4, r1
 8015644:	2101      	movs	r1, #1
 8015646:	f7ff fee9 	bl	801541c <_Balloc>
 801564a:	2201      	movs	r2, #1
 801564c:	6144      	str	r4, [r0, #20]
 801564e:	6102      	str	r2, [r0, #16]
 8015650:	bd10      	pop	{r4, pc}

08015652 <__multiply>:
 8015652:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015656:	4614      	mov	r4, r2
 8015658:	690a      	ldr	r2, [r1, #16]
 801565a:	6923      	ldr	r3, [r4, #16]
 801565c:	429a      	cmp	r2, r3
 801565e:	bfb8      	it	lt
 8015660:	460b      	movlt	r3, r1
 8015662:	4688      	mov	r8, r1
 8015664:	bfbc      	itt	lt
 8015666:	46a0      	movlt	r8, r4
 8015668:	461c      	movlt	r4, r3
 801566a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801566e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015676:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801567a:	eb07 0609 	add.w	r6, r7, r9
 801567e:	42b3      	cmp	r3, r6
 8015680:	bfb8      	it	lt
 8015682:	3101      	addlt	r1, #1
 8015684:	f7ff feca 	bl	801541c <_Balloc>
 8015688:	f100 0514 	add.w	r5, r0, #20
 801568c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015690:	462b      	mov	r3, r5
 8015692:	2200      	movs	r2, #0
 8015694:	4573      	cmp	r3, lr
 8015696:	d316      	bcc.n	80156c6 <__multiply+0x74>
 8015698:	f104 0214 	add.w	r2, r4, #20
 801569c:	f108 0114 	add.w	r1, r8, #20
 80156a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80156a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80156a8:	9300      	str	r3, [sp, #0]
 80156aa:	9b00      	ldr	r3, [sp, #0]
 80156ac:	9201      	str	r2, [sp, #4]
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d80c      	bhi.n	80156cc <__multiply+0x7a>
 80156b2:	2e00      	cmp	r6, #0
 80156b4:	dd03      	ble.n	80156be <__multiply+0x6c>
 80156b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d05d      	beq.n	801577a <__multiply+0x128>
 80156be:	6106      	str	r6, [r0, #16]
 80156c0:	b003      	add	sp, #12
 80156c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156c6:	f843 2b04 	str.w	r2, [r3], #4
 80156ca:	e7e3      	b.n	8015694 <__multiply+0x42>
 80156cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80156d0:	f1bb 0f00 	cmp.w	fp, #0
 80156d4:	d023      	beq.n	801571e <__multiply+0xcc>
 80156d6:	4689      	mov	r9, r1
 80156d8:	46ac      	mov	ip, r5
 80156da:	f04f 0800 	mov.w	r8, #0
 80156de:	f859 4b04 	ldr.w	r4, [r9], #4
 80156e2:	f8dc a000 	ldr.w	sl, [ip]
 80156e6:	b2a3      	uxth	r3, r4
 80156e8:	fa1f fa8a 	uxth.w	sl, sl
 80156ec:	fb0b a303 	mla	r3, fp, r3, sl
 80156f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80156f4:	f8dc 4000 	ldr.w	r4, [ip]
 80156f8:	4443      	add	r3, r8
 80156fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80156fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8015702:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015706:	46e2      	mov	sl, ip
 8015708:	b29b      	uxth	r3, r3
 801570a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801570e:	454f      	cmp	r7, r9
 8015710:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015714:	f84a 3b04 	str.w	r3, [sl], #4
 8015718:	d82b      	bhi.n	8015772 <__multiply+0x120>
 801571a:	f8cc 8004 	str.w	r8, [ip, #4]
 801571e:	9b01      	ldr	r3, [sp, #4]
 8015720:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015724:	3204      	adds	r2, #4
 8015726:	f1ba 0f00 	cmp.w	sl, #0
 801572a:	d020      	beq.n	801576e <__multiply+0x11c>
 801572c:	682b      	ldr	r3, [r5, #0]
 801572e:	4689      	mov	r9, r1
 8015730:	46a8      	mov	r8, r5
 8015732:	f04f 0b00 	mov.w	fp, #0
 8015736:	f8b9 c000 	ldrh.w	ip, [r9]
 801573a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801573e:	fb0a 440c 	mla	r4, sl, ip, r4
 8015742:	445c      	add	r4, fp
 8015744:	46c4      	mov	ip, r8
 8015746:	b29b      	uxth	r3, r3
 8015748:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801574c:	f84c 3b04 	str.w	r3, [ip], #4
 8015750:	f859 3b04 	ldr.w	r3, [r9], #4
 8015754:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015758:	0c1b      	lsrs	r3, r3, #16
 801575a:	fb0a b303 	mla	r3, sl, r3, fp
 801575e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015762:	454f      	cmp	r7, r9
 8015764:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015768:	d805      	bhi.n	8015776 <__multiply+0x124>
 801576a:	f8c8 3004 	str.w	r3, [r8, #4]
 801576e:	3504      	adds	r5, #4
 8015770:	e79b      	b.n	80156aa <__multiply+0x58>
 8015772:	46d4      	mov	ip, sl
 8015774:	e7b3      	b.n	80156de <__multiply+0x8c>
 8015776:	46e0      	mov	r8, ip
 8015778:	e7dd      	b.n	8015736 <__multiply+0xe4>
 801577a:	3e01      	subs	r6, #1
 801577c:	e799      	b.n	80156b2 <__multiply+0x60>
	...

08015780 <__pow5mult>:
 8015780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015784:	4615      	mov	r5, r2
 8015786:	f012 0203 	ands.w	r2, r2, #3
 801578a:	4606      	mov	r6, r0
 801578c:	460f      	mov	r7, r1
 801578e:	d007      	beq.n	80157a0 <__pow5mult+0x20>
 8015790:	3a01      	subs	r2, #1
 8015792:	4c21      	ldr	r4, [pc, #132]	; (8015818 <__pow5mult+0x98>)
 8015794:	2300      	movs	r3, #0
 8015796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801579a:	f7ff fe8a 	bl	80154b2 <__multadd>
 801579e:	4607      	mov	r7, r0
 80157a0:	10ad      	asrs	r5, r5, #2
 80157a2:	d035      	beq.n	8015810 <__pow5mult+0x90>
 80157a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80157a6:	b93c      	cbnz	r4, 80157b8 <__pow5mult+0x38>
 80157a8:	2010      	movs	r0, #16
 80157aa:	f7ff fe1d 	bl	80153e8 <malloc>
 80157ae:	6270      	str	r0, [r6, #36]	; 0x24
 80157b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80157b4:	6004      	str	r4, [r0, #0]
 80157b6:	60c4      	str	r4, [r0, #12]
 80157b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80157bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80157c0:	b94c      	cbnz	r4, 80157d6 <__pow5mult+0x56>
 80157c2:	f240 2171 	movw	r1, #625	; 0x271
 80157c6:	4630      	mov	r0, r6
 80157c8:	f7ff ff3a 	bl	8015640 <__i2b>
 80157cc:	2300      	movs	r3, #0
 80157ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80157d2:	4604      	mov	r4, r0
 80157d4:	6003      	str	r3, [r0, #0]
 80157d6:	f04f 0800 	mov.w	r8, #0
 80157da:	07eb      	lsls	r3, r5, #31
 80157dc:	d50a      	bpl.n	80157f4 <__pow5mult+0x74>
 80157de:	4639      	mov	r1, r7
 80157e0:	4622      	mov	r2, r4
 80157e2:	4630      	mov	r0, r6
 80157e4:	f7ff ff35 	bl	8015652 <__multiply>
 80157e8:	4639      	mov	r1, r7
 80157ea:	4681      	mov	r9, r0
 80157ec:	4630      	mov	r0, r6
 80157ee:	f7ff fe49 	bl	8015484 <_Bfree>
 80157f2:	464f      	mov	r7, r9
 80157f4:	106d      	asrs	r5, r5, #1
 80157f6:	d00b      	beq.n	8015810 <__pow5mult+0x90>
 80157f8:	6820      	ldr	r0, [r4, #0]
 80157fa:	b938      	cbnz	r0, 801580c <__pow5mult+0x8c>
 80157fc:	4622      	mov	r2, r4
 80157fe:	4621      	mov	r1, r4
 8015800:	4630      	mov	r0, r6
 8015802:	f7ff ff26 	bl	8015652 <__multiply>
 8015806:	6020      	str	r0, [r4, #0]
 8015808:	f8c0 8000 	str.w	r8, [r0]
 801580c:	4604      	mov	r4, r0
 801580e:	e7e4      	b.n	80157da <__pow5mult+0x5a>
 8015810:	4638      	mov	r0, r7
 8015812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015816:	bf00      	nop
 8015818:	08017338 	.word	0x08017338

0801581c <__lshift>:
 801581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015820:	460c      	mov	r4, r1
 8015822:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015826:	6923      	ldr	r3, [r4, #16]
 8015828:	6849      	ldr	r1, [r1, #4]
 801582a:	eb0a 0903 	add.w	r9, sl, r3
 801582e:	68a3      	ldr	r3, [r4, #8]
 8015830:	4607      	mov	r7, r0
 8015832:	4616      	mov	r6, r2
 8015834:	f109 0501 	add.w	r5, r9, #1
 8015838:	42ab      	cmp	r3, r5
 801583a:	db32      	blt.n	80158a2 <__lshift+0x86>
 801583c:	4638      	mov	r0, r7
 801583e:	f7ff fded 	bl	801541c <_Balloc>
 8015842:	2300      	movs	r3, #0
 8015844:	4680      	mov	r8, r0
 8015846:	f100 0114 	add.w	r1, r0, #20
 801584a:	461a      	mov	r2, r3
 801584c:	4553      	cmp	r3, sl
 801584e:	db2b      	blt.n	80158a8 <__lshift+0x8c>
 8015850:	6920      	ldr	r0, [r4, #16]
 8015852:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015856:	f104 0314 	add.w	r3, r4, #20
 801585a:	f016 021f 	ands.w	r2, r6, #31
 801585e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015862:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015866:	d025      	beq.n	80158b4 <__lshift+0x98>
 8015868:	f1c2 0e20 	rsb	lr, r2, #32
 801586c:	2000      	movs	r0, #0
 801586e:	681e      	ldr	r6, [r3, #0]
 8015870:	468a      	mov	sl, r1
 8015872:	4096      	lsls	r6, r2
 8015874:	4330      	orrs	r0, r6
 8015876:	f84a 0b04 	str.w	r0, [sl], #4
 801587a:	f853 0b04 	ldr.w	r0, [r3], #4
 801587e:	459c      	cmp	ip, r3
 8015880:	fa20 f00e 	lsr.w	r0, r0, lr
 8015884:	d814      	bhi.n	80158b0 <__lshift+0x94>
 8015886:	6048      	str	r0, [r1, #4]
 8015888:	b108      	cbz	r0, 801588e <__lshift+0x72>
 801588a:	f109 0502 	add.w	r5, r9, #2
 801588e:	3d01      	subs	r5, #1
 8015890:	4638      	mov	r0, r7
 8015892:	f8c8 5010 	str.w	r5, [r8, #16]
 8015896:	4621      	mov	r1, r4
 8015898:	f7ff fdf4 	bl	8015484 <_Bfree>
 801589c:	4640      	mov	r0, r8
 801589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158a2:	3101      	adds	r1, #1
 80158a4:	005b      	lsls	r3, r3, #1
 80158a6:	e7c7      	b.n	8015838 <__lshift+0x1c>
 80158a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80158ac:	3301      	adds	r3, #1
 80158ae:	e7cd      	b.n	801584c <__lshift+0x30>
 80158b0:	4651      	mov	r1, sl
 80158b2:	e7dc      	b.n	801586e <__lshift+0x52>
 80158b4:	3904      	subs	r1, #4
 80158b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80158ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80158be:	459c      	cmp	ip, r3
 80158c0:	d8f9      	bhi.n	80158b6 <__lshift+0x9a>
 80158c2:	e7e4      	b.n	801588e <__lshift+0x72>

080158c4 <__mcmp>:
 80158c4:	6903      	ldr	r3, [r0, #16]
 80158c6:	690a      	ldr	r2, [r1, #16]
 80158c8:	1a9b      	subs	r3, r3, r2
 80158ca:	b530      	push	{r4, r5, lr}
 80158cc:	d10c      	bne.n	80158e8 <__mcmp+0x24>
 80158ce:	0092      	lsls	r2, r2, #2
 80158d0:	3014      	adds	r0, #20
 80158d2:	3114      	adds	r1, #20
 80158d4:	1884      	adds	r4, r0, r2
 80158d6:	4411      	add	r1, r2
 80158d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80158dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80158e0:	4295      	cmp	r5, r2
 80158e2:	d003      	beq.n	80158ec <__mcmp+0x28>
 80158e4:	d305      	bcc.n	80158f2 <__mcmp+0x2e>
 80158e6:	2301      	movs	r3, #1
 80158e8:	4618      	mov	r0, r3
 80158ea:	bd30      	pop	{r4, r5, pc}
 80158ec:	42a0      	cmp	r0, r4
 80158ee:	d3f3      	bcc.n	80158d8 <__mcmp+0x14>
 80158f0:	e7fa      	b.n	80158e8 <__mcmp+0x24>
 80158f2:	f04f 33ff 	mov.w	r3, #4294967295
 80158f6:	e7f7      	b.n	80158e8 <__mcmp+0x24>

080158f8 <__mdiff>:
 80158f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158fc:	460d      	mov	r5, r1
 80158fe:	4607      	mov	r7, r0
 8015900:	4611      	mov	r1, r2
 8015902:	4628      	mov	r0, r5
 8015904:	4614      	mov	r4, r2
 8015906:	f7ff ffdd 	bl	80158c4 <__mcmp>
 801590a:	1e06      	subs	r6, r0, #0
 801590c:	d108      	bne.n	8015920 <__mdiff+0x28>
 801590e:	4631      	mov	r1, r6
 8015910:	4638      	mov	r0, r7
 8015912:	f7ff fd83 	bl	801541c <_Balloc>
 8015916:	2301      	movs	r3, #1
 8015918:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015920:	bfa4      	itt	ge
 8015922:	4623      	movge	r3, r4
 8015924:	462c      	movge	r4, r5
 8015926:	4638      	mov	r0, r7
 8015928:	6861      	ldr	r1, [r4, #4]
 801592a:	bfa6      	itte	ge
 801592c:	461d      	movge	r5, r3
 801592e:	2600      	movge	r6, #0
 8015930:	2601      	movlt	r6, #1
 8015932:	f7ff fd73 	bl	801541c <_Balloc>
 8015936:	692b      	ldr	r3, [r5, #16]
 8015938:	60c6      	str	r6, [r0, #12]
 801593a:	6926      	ldr	r6, [r4, #16]
 801593c:	f105 0914 	add.w	r9, r5, #20
 8015940:	f104 0214 	add.w	r2, r4, #20
 8015944:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015948:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801594c:	f100 0514 	add.w	r5, r0, #20
 8015950:	f04f 0e00 	mov.w	lr, #0
 8015954:	f852 ab04 	ldr.w	sl, [r2], #4
 8015958:	f859 4b04 	ldr.w	r4, [r9], #4
 801595c:	fa1e f18a 	uxtah	r1, lr, sl
 8015960:	b2a3      	uxth	r3, r4
 8015962:	1ac9      	subs	r1, r1, r3
 8015964:	0c23      	lsrs	r3, r4, #16
 8015966:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801596a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801596e:	b289      	uxth	r1, r1
 8015970:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015974:	45c8      	cmp	r8, r9
 8015976:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801597a:	4694      	mov	ip, r2
 801597c:	f845 3b04 	str.w	r3, [r5], #4
 8015980:	d8e8      	bhi.n	8015954 <__mdiff+0x5c>
 8015982:	45bc      	cmp	ip, r7
 8015984:	d304      	bcc.n	8015990 <__mdiff+0x98>
 8015986:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801598a:	b183      	cbz	r3, 80159ae <__mdiff+0xb6>
 801598c:	6106      	str	r6, [r0, #16]
 801598e:	e7c5      	b.n	801591c <__mdiff+0x24>
 8015990:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015994:	fa1e f381 	uxtah	r3, lr, r1
 8015998:	141a      	asrs	r2, r3, #16
 801599a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801599e:	b29b      	uxth	r3, r3
 80159a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80159a8:	f845 3b04 	str.w	r3, [r5], #4
 80159ac:	e7e9      	b.n	8015982 <__mdiff+0x8a>
 80159ae:	3e01      	subs	r6, #1
 80159b0:	e7e9      	b.n	8015986 <__mdiff+0x8e>
	...

080159b4 <__ulp>:
 80159b4:	4b12      	ldr	r3, [pc, #72]	; (8015a00 <__ulp+0x4c>)
 80159b6:	ee10 2a90 	vmov	r2, s1
 80159ba:	401a      	ands	r2, r3
 80159bc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	dd04      	ble.n	80159ce <__ulp+0x1a>
 80159c4:	2000      	movs	r0, #0
 80159c6:	4619      	mov	r1, r3
 80159c8:	ec41 0b10 	vmov	d0, r0, r1
 80159cc:	4770      	bx	lr
 80159ce:	425b      	negs	r3, r3
 80159d0:	151b      	asrs	r3, r3, #20
 80159d2:	2b13      	cmp	r3, #19
 80159d4:	f04f 0000 	mov.w	r0, #0
 80159d8:	f04f 0100 	mov.w	r1, #0
 80159dc:	dc04      	bgt.n	80159e8 <__ulp+0x34>
 80159de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80159e2:	fa42 f103 	asr.w	r1, r2, r3
 80159e6:	e7ef      	b.n	80159c8 <__ulp+0x14>
 80159e8:	3b14      	subs	r3, #20
 80159ea:	2b1e      	cmp	r3, #30
 80159ec:	f04f 0201 	mov.w	r2, #1
 80159f0:	bfda      	itte	le
 80159f2:	f1c3 031f 	rsble	r3, r3, #31
 80159f6:	fa02 f303 	lslle.w	r3, r2, r3
 80159fa:	4613      	movgt	r3, r2
 80159fc:	4618      	mov	r0, r3
 80159fe:	e7e3      	b.n	80159c8 <__ulp+0x14>
 8015a00:	7ff00000 	.word	0x7ff00000

08015a04 <__b2d>:
 8015a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a06:	6905      	ldr	r5, [r0, #16]
 8015a08:	f100 0714 	add.w	r7, r0, #20
 8015a0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015a10:	1f2e      	subs	r6, r5, #4
 8015a12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015a16:	4620      	mov	r0, r4
 8015a18:	f7ff fdc4 	bl	80155a4 <__hi0bits>
 8015a1c:	f1c0 0320 	rsb	r3, r0, #32
 8015a20:	280a      	cmp	r0, #10
 8015a22:	600b      	str	r3, [r1, #0]
 8015a24:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015a9c <__b2d+0x98>
 8015a28:	dc14      	bgt.n	8015a54 <__b2d+0x50>
 8015a2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015a2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015a32:	42b7      	cmp	r7, r6
 8015a34:	ea41 030c 	orr.w	r3, r1, ip
 8015a38:	bf34      	ite	cc
 8015a3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015a3e:	2100      	movcs	r1, #0
 8015a40:	3015      	adds	r0, #21
 8015a42:	fa04 f000 	lsl.w	r0, r4, r0
 8015a46:	fa21 f10e 	lsr.w	r1, r1, lr
 8015a4a:	ea40 0201 	orr.w	r2, r0, r1
 8015a4e:	ec43 2b10 	vmov	d0, r2, r3
 8015a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a54:	42b7      	cmp	r7, r6
 8015a56:	bf3a      	itte	cc
 8015a58:	f1a5 0608 	subcc.w	r6, r5, #8
 8015a5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015a60:	2100      	movcs	r1, #0
 8015a62:	380b      	subs	r0, #11
 8015a64:	d015      	beq.n	8015a92 <__b2d+0x8e>
 8015a66:	4084      	lsls	r4, r0
 8015a68:	f1c0 0520 	rsb	r5, r0, #32
 8015a6c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015a70:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015a74:	42be      	cmp	r6, r7
 8015a76:	fa21 fc05 	lsr.w	ip, r1, r5
 8015a7a:	ea44 030c 	orr.w	r3, r4, ip
 8015a7e:	bf8c      	ite	hi
 8015a80:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015a84:	2400      	movls	r4, #0
 8015a86:	fa01 f000 	lsl.w	r0, r1, r0
 8015a8a:	40ec      	lsrs	r4, r5
 8015a8c:	ea40 0204 	orr.w	r2, r0, r4
 8015a90:	e7dd      	b.n	8015a4e <__b2d+0x4a>
 8015a92:	ea44 030c 	orr.w	r3, r4, ip
 8015a96:	460a      	mov	r2, r1
 8015a98:	e7d9      	b.n	8015a4e <__b2d+0x4a>
 8015a9a:	bf00      	nop
 8015a9c:	3ff00000 	.word	0x3ff00000

08015aa0 <__d2b>:
 8015aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015aa4:	460e      	mov	r6, r1
 8015aa6:	2101      	movs	r1, #1
 8015aa8:	ec59 8b10 	vmov	r8, r9, d0
 8015aac:	4615      	mov	r5, r2
 8015aae:	f7ff fcb5 	bl	801541c <_Balloc>
 8015ab2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015ab6:	4607      	mov	r7, r0
 8015ab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015abc:	bb34      	cbnz	r4, 8015b0c <__d2b+0x6c>
 8015abe:	9301      	str	r3, [sp, #4]
 8015ac0:	f1b8 0300 	subs.w	r3, r8, #0
 8015ac4:	d027      	beq.n	8015b16 <__d2b+0x76>
 8015ac6:	a802      	add	r0, sp, #8
 8015ac8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015acc:	f7ff fd89 	bl	80155e2 <__lo0bits>
 8015ad0:	9900      	ldr	r1, [sp, #0]
 8015ad2:	b1f0      	cbz	r0, 8015b12 <__d2b+0x72>
 8015ad4:	9a01      	ldr	r2, [sp, #4]
 8015ad6:	f1c0 0320 	rsb	r3, r0, #32
 8015ada:	fa02 f303 	lsl.w	r3, r2, r3
 8015ade:	430b      	orrs	r3, r1
 8015ae0:	40c2      	lsrs	r2, r0
 8015ae2:	617b      	str	r3, [r7, #20]
 8015ae4:	9201      	str	r2, [sp, #4]
 8015ae6:	9b01      	ldr	r3, [sp, #4]
 8015ae8:	61bb      	str	r3, [r7, #24]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	bf14      	ite	ne
 8015aee:	2102      	movne	r1, #2
 8015af0:	2101      	moveq	r1, #1
 8015af2:	6139      	str	r1, [r7, #16]
 8015af4:	b1c4      	cbz	r4, 8015b28 <__d2b+0x88>
 8015af6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015afa:	4404      	add	r4, r0
 8015afc:	6034      	str	r4, [r6, #0]
 8015afe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015b02:	6028      	str	r0, [r5, #0]
 8015b04:	4638      	mov	r0, r7
 8015b06:	b003      	add	sp, #12
 8015b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b10:	e7d5      	b.n	8015abe <__d2b+0x1e>
 8015b12:	6179      	str	r1, [r7, #20]
 8015b14:	e7e7      	b.n	8015ae6 <__d2b+0x46>
 8015b16:	a801      	add	r0, sp, #4
 8015b18:	f7ff fd63 	bl	80155e2 <__lo0bits>
 8015b1c:	9b01      	ldr	r3, [sp, #4]
 8015b1e:	617b      	str	r3, [r7, #20]
 8015b20:	2101      	movs	r1, #1
 8015b22:	6139      	str	r1, [r7, #16]
 8015b24:	3020      	adds	r0, #32
 8015b26:	e7e5      	b.n	8015af4 <__d2b+0x54>
 8015b28:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015b2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015b30:	6030      	str	r0, [r6, #0]
 8015b32:	6918      	ldr	r0, [r3, #16]
 8015b34:	f7ff fd36 	bl	80155a4 <__hi0bits>
 8015b38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015b3c:	e7e1      	b.n	8015b02 <__d2b+0x62>

08015b3e <__ratio>:
 8015b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b42:	4688      	mov	r8, r1
 8015b44:	4669      	mov	r1, sp
 8015b46:	4681      	mov	r9, r0
 8015b48:	f7ff ff5c 	bl	8015a04 <__b2d>
 8015b4c:	a901      	add	r1, sp, #4
 8015b4e:	4640      	mov	r0, r8
 8015b50:	ec57 6b10 	vmov	r6, r7, d0
 8015b54:	ee10 4a10 	vmov	r4, s0
 8015b58:	f7ff ff54 	bl	8015a04 <__b2d>
 8015b5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015b60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015b64:	eba3 0c02 	sub.w	ip, r3, r2
 8015b68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015b6c:	1a9b      	subs	r3, r3, r2
 8015b6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015b72:	ec51 0b10 	vmov	r0, r1, d0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	ee10 aa10 	vmov	sl, s0
 8015b7c:	bfce      	itee	gt
 8015b7e:	463a      	movgt	r2, r7
 8015b80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015b84:	460a      	movle	r2, r1
 8015b86:	463d      	mov	r5, r7
 8015b88:	468b      	mov	fp, r1
 8015b8a:	bfcc      	ite	gt
 8015b8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015b90:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015b94:	ec45 4b17 	vmov	d7, r4, r5
 8015b98:	ec4b ab16 	vmov	d6, sl, fp
 8015b9c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8015ba0:	b003      	add	sp, #12
 8015ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ba6 <__copybits>:
 8015ba6:	3901      	subs	r1, #1
 8015ba8:	b510      	push	{r4, lr}
 8015baa:	1149      	asrs	r1, r1, #5
 8015bac:	6914      	ldr	r4, [r2, #16]
 8015bae:	3101      	adds	r1, #1
 8015bb0:	f102 0314 	add.w	r3, r2, #20
 8015bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015bb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015bbc:	42a3      	cmp	r3, r4
 8015bbe:	4602      	mov	r2, r0
 8015bc0:	d303      	bcc.n	8015bca <__copybits+0x24>
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	428a      	cmp	r2, r1
 8015bc6:	d305      	bcc.n	8015bd4 <__copybits+0x2e>
 8015bc8:	bd10      	pop	{r4, pc}
 8015bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bce:	f840 2b04 	str.w	r2, [r0], #4
 8015bd2:	e7f3      	b.n	8015bbc <__copybits+0x16>
 8015bd4:	f842 3b04 	str.w	r3, [r2], #4
 8015bd8:	e7f4      	b.n	8015bc4 <__copybits+0x1e>

08015bda <__any_on>:
 8015bda:	f100 0214 	add.w	r2, r0, #20
 8015bde:	6900      	ldr	r0, [r0, #16]
 8015be0:	114b      	asrs	r3, r1, #5
 8015be2:	4298      	cmp	r0, r3
 8015be4:	b510      	push	{r4, lr}
 8015be6:	db11      	blt.n	8015c0c <__any_on+0x32>
 8015be8:	dd0a      	ble.n	8015c00 <__any_on+0x26>
 8015bea:	f011 011f 	ands.w	r1, r1, #31
 8015bee:	d007      	beq.n	8015c00 <__any_on+0x26>
 8015bf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015bf4:	fa24 f001 	lsr.w	r0, r4, r1
 8015bf8:	fa00 f101 	lsl.w	r1, r0, r1
 8015bfc:	428c      	cmp	r4, r1
 8015bfe:	d10b      	bne.n	8015c18 <__any_on+0x3e>
 8015c00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c04:	4293      	cmp	r3, r2
 8015c06:	d803      	bhi.n	8015c10 <__any_on+0x36>
 8015c08:	2000      	movs	r0, #0
 8015c0a:	bd10      	pop	{r4, pc}
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	e7f7      	b.n	8015c00 <__any_on+0x26>
 8015c10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015c14:	2900      	cmp	r1, #0
 8015c16:	d0f5      	beq.n	8015c04 <__any_on+0x2a>
 8015c18:	2001      	movs	r0, #1
 8015c1a:	e7f6      	b.n	8015c0a <__any_on+0x30>

08015c1c <_calloc_r>:
 8015c1c:	b538      	push	{r3, r4, r5, lr}
 8015c1e:	fb02 f401 	mul.w	r4, r2, r1
 8015c22:	4621      	mov	r1, r4
 8015c24:	f000 f856 	bl	8015cd4 <_malloc_r>
 8015c28:	4605      	mov	r5, r0
 8015c2a:	b118      	cbz	r0, 8015c34 <_calloc_r+0x18>
 8015c2c:	4622      	mov	r2, r4
 8015c2e:	2100      	movs	r1, #0
 8015c30:	f7fc fb03 	bl	801223a <memset>
 8015c34:	4628      	mov	r0, r5
 8015c36:	bd38      	pop	{r3, r4, r5, pc}

08015c38 <_free_r>:
 8015c38:	b538      	push	{r3, r4, r5, lr}
 8015c3a:	4605      	mov	r5, r0
 8015c3c:	2900      	cmp	r1, #0
 8015c3e:	d045      	beq.n	8015ccc <_free_r+0x94>
 8015c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c44:	1f0c      	subs	r4, r1, #4
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	bfb8      	it	lt
 8015c4a:	18e4      	addlt	r4, r4, r3
 8015c4c:	f000 facf 	bl	80161ee <__malloc_lock>
 8015c50:	4a1f      	ldr	r2, [pc, #124]	; (8015cd0 <_free_r+0x98>)
 8015c52:	6813      	ldr	r3, [r2, #0]
 8015c54:	4610      	mov	r0, r2
 8015c56:	b933      	cbnz	r3, 8015c66 <_free_r+0x2e>
 8015c58:	6063      	str	r3, [r4, #4]
 8015c5a:	6014      	str	r4, [r2, #0]
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c62:	f000 bac5 	b.w	80161f0 <__malloc_unlock>
 8015c66:	42a3      	cmp	r3, r4
 8015c68:	d90c      	bls.n	8015c84 <_free_r+0x4c>
 8015c6a:	6821      	ldr	r1, [r4, #0]
 8015c6c:	1862      	adds	r2, r4, r1
 8015c6e:	4293      	cmp	r3, r2
 8015c70:	bf04      	itt	eq
 8015c72:	681a      	ldreq	r2, [r3, #0]
 8015c74:	685b      	ldreq	r3, [r3, #4]
 8015c76:	6063      	str	r3, [r4, #4]
 8015c78:	bf04      	itt	eq
 8015c7a:	1852      	addeq	r2, r2, r1
 8015c7c:	6022      	streq	r2, [r4, #0]
 8015c7e:	6004      	str	r4, [r0, #0]
 8015c80:	e7ec      	b.n	8015c5c <_free_r+0x24>
 8015c82:	4613      	mov	r3, r2
 8015c84:	685a      	ldr	r2, [r3, #4]
 8015c86:	b10a      	cbz	r2, 8015c8c <_free_r+0x54>
 8015c88:	42a2      	cmp	r2, r4
 8015c8a:	d9fa      	bls.n	8015c82 <_free_r+0x4a>
 8015c8c:	6819      	ldr	r1, [r3, #0]
 8015c8e:	1858      	adds	r0, r3, r1
 8015c90:	42a0      	cmp	r0, r4
 8015c92:	d10b      	bne.n	8015cac <_free_r+0x74>
 8015c94:	6820      	ldr	r0, [r4, #0]
 8015c96:	4401      	add	r1, r0
 8015c98:	1858      	adds	r0, r3, r1
 8015c9a:	4282      	cmp	r2, r0
 8015c9c:	6019      	str	r1, [r3, #0]
 8015c9e:	d1dd      	bne.n	8015c5c <_free_r+0x24>
 8015ca0:	6810      	ldr	r0, [r2, #0]
 8015ca2:	6852      	ldr	r2, [r2, #4]
 8015ca4:	605a      	str	r2, [r3, #4]
 8015ca6:	4401      	add	r1, r0
 8015ca8:	6019      	str	r1, [r3, #0]
 8015caa:	e7d7      	b.n	8015c5c <_free_r+0x24>
 8015cac:	d902      	bls.n	8015cb4 <_free_r+0x7c>
 8015cae:	230c      	movs	r3, #12
 8015cb0:	602b      	str	r3, [r5, #0]
 8015cb2:	e7d3      	b.n	8015c5c <_free_r+0x24>
 8015cb4:	6820      	ldr	r0, [r4, #0]
 8015cb6:	1821      	adds	r1, r4, r0
 8015cb8:	428a      	cmp	r2, r1
 8015cba:	bf04      	itt	eq
 8015cbc:	6811      	ldreq	r1, [r2, #0]
 8015cbe:	6852      	ldreq	r2, [r2, #4]
 8015cc0:	6062      	str	r2, [r4, #4]
 8015cc2:	bf04      	itt	eq
 8015cc4:	1809      	addeq	r1, r1, r0
 8015cc6:	6021      	streq	r1, [r4, #0]
 8015cc8:	605c      	str	r4, [r3, #4]
 8015cca:	e7c7      	b.n	8015c5c <_free_r+0x24>
 8015ccc:	bd38      	pop	{r3, r4, r5, pc}
 8015cce:	bf00      	nop
 8015cd0:	20028a7c 	.word	0x20028a7c

08015cd4 <_malloc_r>:
 8015cd4:	b570      	push	{r4, r5, r6, lr}
 8015cd6:	1ccd      	adds	r5, r1, #3
 8015cd8:	f025 0503 	bic.w	r5, r5, #3
 8015cdc:	3508      	adds	r5, #8
 8015cde:	2d0c      	cmp	r5, #12
 8015ce0:	bf38      	it	cc
 8015ce2:	250c      	movcc	r5, #12
 8015ce4:	2d00      	cmp	r5, #0
 8015ce6:	4606      	mov	r6, r0
 8015ce8:	db01      	blt.n	8015cee <_malloc_r+0x1a>
 8015cea:	42a9      	cmp	r1, r5
 8015cec:	d903      	bls.n	8015cf6 <_malloc_r+0x22>
 8015cee:	230c      	movs	r3, #12
 8015cf0:	6033      	str	r3, [r6, #0]
 8015cf2:	2000      	movs	r0, #0
 8015cf4:	bd70      	pop	{r4, r5, r6, pc}
 8015cf6:	f000 fa7a 	bl	80161ee <__malloc_lock>
 8015cfa:	4a21      	ldr	r2, [pc, #132]	; (8015d80 <_malloc_r+0xac>)
 8015cfc:	6814      	ldr	r4, [r2, #0]
 8015cfe:	4621      	mov	r1, r4
 8015d00:	b991      	cbnz	r1, 8015d28 <_malloc_r+0x54>
 8015d02:	4c20      	ldr	r4, [pc, #128]	; (8015d84 <_malloc_r+0xb0>)
 8015d04:	6823      	ldr	r3, [r4, #0]
 8015d06:	b91b      	cbnz	r3, 8015d10 <_malloc_r+0x3c>
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f000 f98f 	bl	801602c <_sbrk_r>
 8015d0e:	6020      	str	r0, [r4, #0]
 8015d10:	4629      	mov	r1, r5
 8015d12:	4630      	mov	r0, r6
 8015d14:	f000 f98a 	bl	801602c <_sbrk_r>
 8015d18:	1c43      	adds	r3, r0, #1
 8015d1a:	d124      	bne.n	8015d66 <_malloc_r+0x92>
 8015d1c:	230c      	movs	r3, #12
 8015d1e:	6033      	str	r3, [r6, #0]
 8015d20:	4630      	mov	r0, r6
 8015d22:	f000 fa65 	bl	80161f0 <__malloc_unlock>
 8015d26:	e7e4      	b.n	8015cf2 <_malloc_r+0x1e>
 8015d28:	680b      	ldr	r3, [r1, #0]
 8015d2a:	1b5b      	subs	r3, r3, r5
 8015d2c:	d418      	bmi.n	8015d60 <_malloc_r+0x8c>
 8015d2e:	2b0b      	cmp	r3, #11
 8015d30:	d90f      	bls.n	8015d52 <_malloc_r+0x7e>
 8015d32:	600b      	str	r3, [r1, #0]
 8015d34:	50cd      	str	r5, [r1, r3]
 8015d36:	18cc      	adds	r4, r1, r3
 8015d38:	4630      	mov	r0, r6
 8015d3a:	f000 fa59 	bl	80161f0 <__malloc_unlock>
 8015d3e:	f104 000b 	add.w	r0, r4, #11
 8015d42:	1d23      	adds	r3, r4, #4
 8015d44:	f020 0007 	bic.w	r0, r0, #7
 8015d48:	1ac3      	subs	r3, r0, r3
 8015d4a:	d0d3      	beq.n	8015cf4 <_malloc_r+0x20>
 8015d4c:	425a      	negs	r2, r3
 8015d4e:	50e2      	str	r2, [r4, r3]
 8015d50:	e7d0      	b.n	8015cf4 <_malloc_r+0x20>
 8015d52:	428c      	cmp	r4, r1
 8015d54:	684b      	ldr	r3, [r1, #4]
 8015d56:	bf16      	itet	ne
 8015d58:	6063      	strne	r3, [r4, #4]
 8015d5a:	6013      	streq	r3, [r2, #0]
 8015d5c:	460c      	movne	r4, r1
 8015d5e:	e7eb      	b.n	8015d38 <_malloc_r+0x64>
 8015d60:	460c      	mov	r4, r1
 8015d62:	6849      	ldr	r1, [r1, #4]
 8015d64:	e7cc      	b.n	8015d00 <_malloc_r+0x2c>
 8015d66:	1cc4      	adds	r4, r0, #3
 8015d68:	f024 0403 	bic.w	r4, r4, #3
 8015d6c:	42a0      	cmp	r0, r4
 8015d6e:	d005      	beq.n	8015d7c <_malloc_r+0xa8>
 8015d70:	1a21      	subs	r1, r4, r0
 8015d72:	4630      	mov	r0, r6
 8015d74:	f000 f95a 	bl	801602c <_sbrk_r>
 8015d78:	3001      	adds	r0, #1
 8015d7a:	d0cf      	beq.n	8015d1c <_malloc_r+0x48>
 8015d7c:	6025      	str	r5, [r4, #0]
 8015d7e:	e7db      	b.n	8015d38 <_malloc_r+0x64>
 8015d80:	20028a7c 	.word	0x20028a7c
 8015d84:	20028a80 	.word	0x20028a80

08015d88 <__ssputs_r>:
 8015d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d8c:	688e      	ldr	r6, [r1, #8]
 8015d8e:	429e      	cmp	r6, r3
 8015d90:	4682      	mov	sl, r0
 8015d92:	460c      	mov	r4, r1
 8015d94:	4690      	mov	r8, r2
 8015d96:	4699      	mov	r9, r3
 8015d98:	d837      	bhi.n	8015e0a <__ssputs_r+0x82>
 8015d9a:	898a      	ldrh	r2, [r1, #12]
 8015d9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015da0:	d031      	beq.n	8015e06 <__ssputs_r+0x7e>
 8015da2:	6825      	ldr	r5, [r4, #0]
 8015da4:	6909      	ldr	r1, [r1, #16]
 8015da6:	1a6f      	subs	r7, r5, r1
 8015da8:	6965      	ldr	r5, [r4, #20]
 8015daa:	2302      	movs	r3, #2
 8015dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015db0:	fb95 f5f3 	sdiv	r5, r5, r3
 8015db4:	f109 0301 	add.w	r3, r9, #1
 8015db8:	443b      	add	r3, r7
 8015dba:	429d      	cmp	r5, r3
 8015dbc:	bf38      	it	cc
 8015dbe:	461d      	movcc	r5, r3
 8015dc0:	0553      	lsls	r3, r2, #21
 8015dc2:	d530      	bpl.n	8015e26 <__ssputs_r+0x9e>
 8015dc4:	4629      	mov	r1, r5
 8015dc6:	f7ff ff85 	bl	8015cd4 <_malloc_r>
 8015dca:	4606      	mov	r6, r0
 8015dcc:	b950      	cbnz	r0, 8015de4 <__ssputs_r+0x5c>
 8015dce:	230c      	movs	r3, #12
 8015dd0:	f8ca 3000 	str.w	r3, [sl]
 8015dd4:	89a3      	ldrh	r3, [r4, #12]
 8015dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dda:	81a3      	strh	r3, [r4, #12]
 8015ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8015de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015de4:	463a      	mov	r2, r7
 8015de6:	6921      	ldr	r1, [r4, #16]
 8015de8:	f7fc fa1c 	bl	8012224 <memcpy>
 8015dec:	89a3      	ldrh	r3, [r4, #12]
 8015dee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015df6:	81a3      	strh	r3, [r4, #12]
 8015df8:	6126      	str	r6, [r4, #16]
 8015dfa:	6165      	str	r5, [r4, #20]
 8015dfc:	443e      	add	r6, r7
 8015dfe:	1bed      	subs	r5, r5, r7
 8015e00:	6026      	str	r6, [r4, #0]
 8015e02:	60a5      	str	r5, [r4, #8]
 8015e04:	464e      	mov	r6, r9
 8015e06:	454e      	cmp	r6, r9
 8015e08:	d900      	bls.n	8015e0c <__ssputs_r+0x84>
 8015e0a:	464e      	mov	r6, r9
 8015e0c:	4632      	mov	r2, r6
 8015e0e:	4641      	mov	r1, r8
 8015e10:	6820      	ldr	r0, [r4, #0]
 8015e12:	f000 f9d3 	bl	80161bc <memmove>
 8015e16:	68a3      	ldr	r3, [r4, #8]
 8015e18:	1b9b      	subs	r3, r3, r6
 8015e1a:	60a3      	str	r3, [r4, #8]
 8015e1c:	6823      	ldr	r3, [r4, #0]
 8015e1e:	441e      	add	r6, r3
 8015e20:	6026      	str	r6, [r4, #0]
 8015e22:	2000      	movs	r0, #0
 8015e24:	e7dc      	b.n	8015de0 <__ssputs_r+0x58>
 8015e26:	462a      	mov	r2, r5
 8015e28:	f000 f9e3 	bl	80161f2 <_realloc_r>
 8015e2c:	4606      	mov	r6, r0
 8015e2e:	2800      	cmp	r0, #0
 8015e30:	d1e2      	bne.n	8015df8 <__ssputs_r+0x70>
 8015e32:	6921      	ldr	r1, [r4, #16]
 8015e34:	4650      	mov	r0, sl
 8015e36:	f7ff feff 	bl	8015c38 <_free_r>
 8015e3a:	e7c8      	b.n	8015dce <__ssputs_r+0x46>

08015e3c <_svfiprintf_r>:
 8015e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e40:	461d      	mov	r5, r3
 8015e42:	898b      	ldrh	r3, [r1, #12]
 8015e44:	061f      	lsls	r7, r3, #24
 8015e46:	b09d      	sub	sp, #116	; 0x74
 8015e48:	4680      	mov	r8, r0
 8015e4a:	460c      	mov	r4, r1
 8015e4c:	4616      	mov	r6, r2
 8015e4e:	d50f      	bpl.n	8015e70 <_svfiprintf_r+0x34>
 8015e50:	690b      	ldr	r3, [r1, #16]
 8015e52:	b96b      	cbnz	r3, 8015e70 <_svfiprintf_r+0x34>
 8015e54:	2140      	movs	r1, #64	; 0x40
 8015e56:	f7ff ff3d 	bl	8015cd4 <_malloc_r>
 8015e5a:	6020      	str	r0, [r4, #0]
 8015e5c:	6120      	str	r0, [r4, #16]
 8015e5e:	b928      	cbnz	r0, 8015e6c <_svfiprintf_r+0x30>
 8015e60:	230c      	movs	r3, #12
 8015e62:	f8c8 3000 	str.w	r3, [r8]
 8015e66:	f04f 30ff 	mov.w	r0, #4294967295
 8015e6a:	e0c8      	b.n	8015ffe <_svfiprintf_r+0x1c2>
 8015e6c:	2340      	movs	r3, #64	; 0x40
 8015e6e:	6163      	str	r3, [r4, #20]
 8015e70:	2300      	movs	r3, #0
 8015e72:	9309      	str	r3, [sp, #36]	; 0x24
 8015e74:	2320      	movs	r3, #32
 8015e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e7a:	2330      	movs	r3, #48	; 0x30
 8015e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e80:	9503      	str	r5, [sp, #12]
 8015e82:	f04f 0b01 	mov.w	fp, #1
 8015e86:	4637      	mov	r7, r6
 8015e88:	463d      	mov	r5, r7
 8015e8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015e8e:	b10b      	cbz	r3, 8015e94 <_svfiprintf_r+0x58>
 8015e90:	2b25      	cmp	r3, #37	; 0x25
 8015e92:	d13e      	bne.n	8015f12 <_svfiprintf_r+0xd6>
 8015e94:	ebb7 0a06 	subs.w	sl, r7, r6
 8015e98:	d00b      	beq.n	8015eb2 <_svfiprintf_r+0x76>
 8015e9a:	4653      	mov	r3, sl
 8015e9c:	4632      	mov	r2, r6
 8015e9e:	4621      	mov	r1, r4
 8015ea0:	4640      	mov	r0, r8
 8015ea2:	f7ff ff71 	bl	8015d88 <__ssputs_r>
 8015ea6:	3001      	adds	r0, #1
 8015ea8:	f000 80a4 	beq.w	8015ff4 <_svfiprintf_r+0x1b8>
 8015eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eae:	4453      	add	r3, sl
 8015eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb2:	783b      	ldrb	r3, [r7, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	f000 809d 	beq.w	8015ff4 <_svfiprintf_r+0x1b8>
 8015eba:	2300      	movs	r3, #0
 8015ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8015ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ec4:	9304      	str	r3, [sp, #16]
 8015ec6:	9307      	str	r3, [sp, #28]
 8015ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8015ece:	462f      	mov	r7, r5
 8015ed0:	2205      	movs	r2, #5
 8015ed2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015ed6:	4850      	ldr	r0, [pc, #320]	; (8016018 <_svfiprintf_r+0x1dc>)
 8015ed8:	f7ea f9ba 	bl	8000250 <memchr>
 8015edc:	9b04      	ldr	r3, [sp, #16]
 8015ede:	b9d0      	cbnz	r0, 8015f16 <_svfiprintf_r+0xda>
 8015ee0:	06d9      	lsls	r1, r3, #27
 8015ee2:	bf44      	itt	mi
 8015ee4:	2220      	movmi	r2, #32
 8015ee6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015eea:	071a      	lsls	r2, r3, #28
 8015eec:	bf44      	itt	mi
 8015eee:	222b      	movmi	r2, #43	; 0x2b
 8015ef0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015ef4:	782a      	ldrb	r2, [r5, #0]
 8015ef6:	2a2a      	cmp	r2, #42	; 0x2a
 8015ef8:	d015      	beq.n	8015f26 <_svfiprintf_r+0xea>
 8015efa:	9a07      	ldr	r2, [sp, #28]
 8015efc:	462f      	mov	r7, r5
 8015efe:	2000      	movs	r0, #0
 8015f00:	250a      	movs	r5, #10
 8015f02:	4639      	mov	r1, r7
 8015f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f08:	3b30      	subs	r3, #48	; 0x30
 8015f0a:	2b09      	cmp	r3, #9
 8015f0c:	d94d      	bls.n	8015faa <_svfiprintf_r+0x16e>
 8015f0e:	b1b8      	cbz	r0, 8015f40 <_svfiprintf_r+0x104>
 8015f10:	e00f      	b.n	8015f32 <_svfiprintf_r+0xf6>
 8015f12:	462f      	mov	r7, r5
 8015f14:	e7b8      	b.n	8015e88 <_svfiprintf_r+0x4c>
 8015f16:	4a40      	ldr	r2, [pc, #256]	; (8016018 <_svfiprintf_r+0x1dc>)
 8015f18:	1a80      	subs	r0, r0, r2
 8015f1a:	fa0b f000 	lsl.w	r0, fp, r0
 8015f1e:	4318      	orrs	r0, r3
 8015f20:	9004      	str	r0, [sp, #16]
 8015f22:	463d      	mov	r5, r7
 8015f24:	e7d3      	b.n	8015ece <_svfiprintf_r+0x92>
 8015f26:	9a03      	ldr	r2, [sp, #12]
 8015f28:	1d11      	adds	r1, r2, #4
 8015f2a:	6812      	ldr	r2, [r2, #0]
 8015f2c:	9103      	str	r1, [sp, #12]
 8015f2e:	2a00      	cmp	r2, #0
 8015f30:	db01      	blt.n	8015f36 <_svfiprintf_r+0xfa>
 8015f32:	9207      	str	r2, [sp, #28]
 8015f34:	e004      	b.n	8015f40 <_svfiprintf_r+0x104>
 8015f36:	4252      	negs	r2, r2
 8015f38:	f043 0302 	orr.w	r3, r3, #2
 8015f3c:	9207      	str	r2, [sp, #28]
 8015f3e:	9304      	str	r3, [sp, #16]
 8015f40:	783b      	ldrb	r3, [r7, #0]
 8015f42:	2b2e      	cmp	r3, #46	; 0x2e
 8015f44:	d10c      	bne.n	8015f60 <_svfiprintf_r+0x124>
 8015f46:	787b      	ldrb	r3, [r7, #1]
 8015f48:	2b2a      	cmp	r3, #42	; 0x2a
 8015f4a:	d133      	bne.n	8015fb4 <_svfiprintf_r+0x178>
 8015f4c:	9b03      	ldr	r3, [sp, #12]
 8015f4e:	1d1a      	adds	r2, r3, #4
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	9203      	str	r2, [sp, #12]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	bfb8      	it	lt
 8015f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f5c:	3702      	adds	r7, #2
 8015f5e:	9305      	str	r3, [sp, #20]
 8015f60:	4d2e      	ldr	r5, [pc, #184]	; (801601c <_svfiprintf_r+0x1e0>)
 8015f62:	7839      	ldrb	r1, [r7, #0]
 8015f64:	2203      	movs	r2, #3
 8015f66:	4628      	mov	r0, r5
 8015f68:	f7ea f972 	bl	8000250 <memchr>
 8015f6c:	b138      	cbz	r0, 8015f7e <_svfiprintf_r+0x142>
 8015f6e:	2340      	movs	r3, #64	; 0x40
 8015f70:	1b40      	subs	r0, r0, r5
 8015f72:	fa03 f000 	lsl.w	r0, r3, r0
 8015f76:	9b04      	ldr	r3, [sp, #16]
 8015f78:	4303      	orrs	r3, r0
 8015f7a:	3701      	adds	r7, #1
 8015f7c:	9304      	str	r3, [sp, #16]
 8015f7e:	7839      	ldrb	r1, [r7, #0]
 8015f80:	4827      	ldr	r0, [pc, #156]	; (8016020 <_svfiprintf_r+0x1e4>)
 8015f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f86:	2206      	movs	r2, #6
 8015f88:	1c7e      	adds	r6, r7, #1
 8015f8a:	f7ea f961 	bl	8000250 <memchr>
 8015f8e:	2800      	cmp	r0, #0
 8015f90:	d038      	beq.n	8016004 <_svfiprintf_r+0x1c8>
 8015f92:	4b24      	ldr	r3, [pc, #144]	; (8016024 <_svfiprintf_r+0x1e8>)
 8015f94:	bb13      	cbnz	r3, 8015fdc <_svfiprintf_r+0x1a0>
 8015f96:	9b03      	ldr	r3, [sp, #12]
 8015f98:	3307      	adds	r3, #7
 8015f9a:	f023 0307 	bic.w	r3, r3, #7
 8015f9e:	3308      	adds	r3, #8
 8015fa0:	9303      	str	r3, [sp, #12]
 8015fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fa4:	444b      	add	r3, r9
 8015fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8015fa8:	e76d      	b.n	8015e86 <_svfiprintf_r+0x4a>
 8015faa:	fb05 3202 	mla	r2, r5, r2, r3
 8015fae:	2001      	movs	r0, #1
 8015fb0:	460f      	mov	r7, r1
 8015fb2:	e7a6      	b.n	8015f02 <_svfiprintf_r+0xc6>
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	3701      	adds	r7, #1
 8015fb8:	9305      	str	r3, [sp, #20]
 8015fba:	4619      	mov	r1, r3
 8015fbc:	250a      	movs	r5, #10
 8015fbe:	4638      	mov	r0, r7
 8015fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fc4:	3a30      	subs	r2, #48	; 0x30
 8015fc6:	2a09      	cmp	r2, #9
 8015fc8:	d903      	bls.n	8015fd2 <_svfiprintf_r+0x196>
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d0c8      	beq.n	8015f60 <_svfiprintf_r+0x124>
 8015fce:	9105      	str	r1, [sp, #20]
 8015fd0:	e7c6      	b.n	8015f60 <_svfiprintf_r+0x124>
 8015fd2:	fb05 2101 	mla	r1, r5, r1, r2
 8015fd6:	2301      	movs	r3, #1
 8015fd8:	4607      	mov	r7, r0
 8015fda:	e7f0      	b.n	8015fbe <_svfiprintf_r+0x182>
 8015fdc:	ab03      	add	r3, sp, #12
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	4622      	mov	r2, r4
 8015fe2:	4b11      	ldr	r3, [pc, #68]	; (8016028 <_svfiprintf_r+0x1ec>)
 8015fe4:	a904      	add	r1, sp, #16
 8015fe6:	4640      	mov	r0, r8
 8015fe8:	f7fc f9b6 	bl	8012358 <_printf_float>
 8015fec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015ff0:	4681      	mov	r9, r0
 8015ff2:	d1d6      	bne.n	8015fa2 <_svfiprintf_r+0x166>
 8015ff4:	89a3      	ldrh	r3, [r4, #12]
 8015ff6:	065b      	lsls	r3, r3, #25
 8015ff8:	f53f af35 	bmi.w	8015e66 <_svfiprintf_r+0x2a>
 8015ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ffe:	b01d      	add	sp, #116	; 0x74
 8016000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016004:	ab03      	add	r3, sp, #12
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	4622      	mov	r2, r4
 801600a:	4b07      	ldr	r3, [pc, #28]	; (8016028 <_svfiprintf_r+0x1ec>)
 801600c:	a904      	add	r1, sp, #16
 801600e:	4640      	mov	r0, r8
 8016010:	f7fc fc44 	bl	801289c <_printf_i>
 8016014:	e7ea      	b.n	8015fec <_svfiprintf_r+0x1b0>
 8016016:	bf00      	nop
 8016018:	08017344 	.word	0x08017344
 801601c:	0801734a 	.word	0x0801734a
 8016020:	0801734e 	.word	0x0801734e
 8016024:	08012359 	.word	0x08012359
 8016028:	08015d89 	.word	0x08015d89

0801602c <_sbrk_r>:
 801602c:	b538      	push	{r3, r4, r5, lr}
 801602e:	4c06      	ldr	r4, [pc, #24]	; (8016048 <_sbrk_r+0x1c>)
 8016030:	2300      	movs	r3, #0
 8016032:	4605      	mov	r5, r0
 8016034:	4608      	mov	r0, r1
 8016036:	6023      	str	r3, [r4, #0]
 8016038:	f7f2 fb6c 	bl	8008714 <_sbrk>
 801603c:	1c43      	adds	r3, r0, #1
 801603e:	d102      	bne.n	8016046 <_sbrk_r+0x1a>
 8016040:	6823      	ldr	r3, [r4, #0]
 8016042:	b103      	cbz	r3, 8016046 <_sbrk_r+0x1a>
 8016044:	602b      	str	r3, [r5, #0]
 8016046:	bd38      	pop	{r3, r4, r5, pc}
 8016048:	20030b54 	.word	0x20030b54

0801604c <__sread>:
 801604c:	b510      	push	{r4, lr}
 801604e:	460c      	mov	r4, r1
 8016050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016054:	f000 f8f4 	bl	8016240 <_read_r>
 8016058:	2800      	cmp	r0, #0
 801605a:	bfab      	itete	ge
 801605c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801605e:	89a3      	ldrhlt	r3, [r4, #12]
 8016060:	181b      	addge	r3, r3, r0
 8016062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016066:	bfac      	ite	ge
 8016068:	6563      	strge	r3, [r4, #84]	; 0x54
 801606a:	81a3      	strhlt	r3, [r4, #12]
 801606c:	bd10      	pop	{r4, pc}

0801606e <__swrite>:
 801606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016072:	461f      	mov	r7, r3
 8016074:	898b      	ldrh	r3, [r1, #12]
 8016076:	05db      	lsls	r3, r3, #23
 8016078:	4605      	mov	r5, r0
 801607a:	460c      	mov	r4, r1
 801607c:	4616      	mov	r6, r2
 801607e:	d505      	bpl.n	801608c <__swrite+0x1e>
 8016080:	2302      	movs	r3, #2
 8016082:	2200      	movs	r2, #0
 8016084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016088:	f000 f886 	bl	8016198 <_lseek_r>
 801608c:	89a3      	ldrh	r3, [r4, #12]
 801608e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016096:	81a3      	strh	r3, [r4, #12]
 8016098:	4632      	mov	r2, r6
 801609a:	463b      	mov	r3, r7
 801609c:	4628      	mov	r0, r5
 801609e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160a2:	f000 b835 	b.w	8016110 <_write_r>

080160a6 <__sseek>:
 80160a6:	b510      	push	{r4, lr}
 80160a8:	460c      	mov	r4, r1
 80160aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ae:	f000 f873 	bl	8016198 <_lseek_r>
 80160b2:	1c43      	adds	r3, r0, #1
 80160b4:	89a3      	ldrh	r3, [r4, #12]
 80160b6:	bf15      	itete	ne
 80160b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80160ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80160be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80160c2:	81a3      	strheq	r3, [r4, #12]
 80160c4:	bf18      	it	ne
 80160c6:	81a3      	strhne	r3, [r4, #12]
 80160c8:	bd10      	pop	{r4, pc}

080160ca <__sclose>:
 80160ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ce:	f000 b831 	b.w	8016134 <_close_r>

080160d2 <strncmp>:
 80160d2:	b510      	push	{r4, lr}
 80160d4:	b16a      	cbz	r2, 80160f2 <strncmp+0x20>
 80160d6:	3901      	subs	r1, #1
 80160d8:	1884      	adds	r4, r0, r2
 80160da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80160de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80160e2:	4293      	cmp	r3, r2
 80160e4:	d103      	bne.n	80160ee <strncmp+0x1c>
 80160e6:	42a0      	cmp	r0, r4
 80160e8:	d001      	beq.n	80160ee <strncmp+0x1c>
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d1f5      	bne.n	80160da <strncmp+0x8>
 80160ee:	1a98      	subs	r0, r3, r2
 80160f0:	bd10      	pop	{r4, pc}
 80160f2:	4610      	mov	r0, r2
 80160f4:	e7fc      	b.n	80160f0 <strncmp+0x1e>

080160f6 <__ascii_wctomb>:
 80160f6:	b149      	cbz	r1, 801610c <__ascii_wctomb+0x16>
 80160f8:	2aff      	cmp	r2, #255	; 0xff
 80160fa:	bf85      	ittet	hi
 80160fc:	238a      	movhi	r3, #138	; 0x8a
 80160fe:	6003      	strhi	r3, [r0, #0]
 8016100:	700a      	strbls	r2, [r1, #0]
 8016102:	f04f 30ff 	movhi.w	r0, #4294967295
 8016106:	bf98      	it	ls
 8016108:	2001      	movls	r0, #1
 801610a:	4770      	bx	lr
 801610c:	4608      	mov	r0, r1
 801610e:	4770      	bx	lr

08016110 <_write_r>:
 8016110:	b538      	push	{r3, r4, r5, lr}
 8016112:	4c07      	ldr	r4, [pc, #28]	; (8016130 <_write_r+0x20>)
 8016114:	4605      	mov	r5, r0
 8016116:	4608      	mov	r0, r1
 8016118:	4611      	mov	r1, r2
 801611a:	2200      	movs	r2, #0
 801611c:	6022      	str	r2, [r4, #0]
 801611e:	461a      	mov	r2, r3
 8016120:	f7f2 faa7 	bl	8008672 <_write>
 8016124:	1c43      	adds	r3, r0, #1
 8016126:	d102      	bne.n	801612e <_write_r+0x1e>
 8016128:	6823      	ldr	r3, [r4, #0]
 801612a:	b103      	cbz	r3, 801612e <_write_r+0x1e>
 801612c:	602b      	str	r3, [r5, #0]
 801612e:	bd38      	pop	{r3, r4, r5, pc}
 8016130:	20030b54 	.word	0x20030b54

08016134 <_close_r>:
 8016134:	b538      	push	{r3, r4, r5, lr}
 8016136:	4c06      	ldr	r4, [pc, #24]	; (8016150 <_close_r+0x1c>)
 8016138:	2300      	movs	r3, #0
 801613a:	4605      	mov	r5, r0
 801613c:	4608      	mov	r0, r1
 801613e:	6023      	str	r3, [r4, #0]
 8016140:	f7f2 fab3 	bl	80086aa <_close>
 8016144:	1c43      	adds	r3, r0, #1
 8016146:	d102      	bne.n	801614e <_close_r+0x1a>
 8016148:	6823      	ldr	r3, [r4, #0]
 801614a:	b103      	cbz	r3, 801614e <_close_r+0x1a>
 801614c:	602b      	str	r3, [r5, #0]
 801614e:	bd38      	pop	{r3, r4, r5, pc}
 8016150:	20030b54 	.word	0x20030b54

08016154 <_fstat_r>:
 8016154:	b538      	push	{r3, r4, r5, lr}
 8016156:	4c07      	ldr	r4, [pc, #28]	; (8016174 <_fstat_r+0x20>)
 8016158:	2300      	movs	r3, #0
 801615a:	4605      	mov	r5, r0
 801615c:	4608      	mov	r0, r1
 801615e:	4611      	mov	r1, r2
 8016160:	6023      	str	r3, [r4, #0]
 8016162:	f7f2 faae 	bl	80086c2 <_fstat>
 8016166:	1c43      	adds	r3, r0, #1
 8016168:	d102      	bne.n	8016170 <_fstat_r+0x1c>
 801616a:	6823      	ldr	r3, [r4, #0]
 801616c:	b103      	cbz	r3, 8016170 <_fstat_r+0x1c>
 801616e:	602b      	str	r3, [r5, #0]
 8016170:	bd38      	pop	{r3, r4, r5, pc}
 8016172:	bf00      	nop
 8016174:	20030b54 	.word	0x20030b54

08016178 <_isatty_r>:
 8016178:	b538      	push	{r3, r4, r5, lr}
 801617a:	4c06      	ldr	r4, [pc, #24]	; (8016194 <_isatty_r+0x1c>)
 801617c:	2300      	movs	r3, #0
 801617e:	4605      	mov	r5, r0
 8016180:	4608      	mov	r0, r1
 8016182:	6023      	str	r3, [r4, #0]
 8016184:	f7f2 faad 	bl	80086e2 <_isatty>
 8016188:	1c43      	adds	r3, r0, #1
 801618a:	d102      	bne.n	8016192 <_isatty_r+0x1a>
 801618c:	6823      	ldr	r3, [r4, #0]
 801618e:	b103      	cbz	r3, 8016192 <_isatty_r+0x1a>
 8016190:	602b      	str	r3, [r5, #0]
 8016192:	bd38      	pop	{r3, r4, r5, pc}
 8016194:	20030b54 	.word	0x20030b54

08016198 <_lseek_r>:
 8016198:	b538      	push	{r3, r4, r5, lr}
 801619a:	4c07      	ldr	r4, [pc, #28]	; (80161b8 <_lseek_r+0x20>)
 801619c:	4605      	mov	r5, r0
 801619e:	4608      	mov	r0, r1
 80161a0:	4611      	mov	r1, r2
 80161a2:	2200      	movs	r2, #0
 80161a4:	6022      	str	r2, [r4, #0]
 80161a6:	461a      	mov	r2, r3
 80161a8:	f7f2 faa6 	bl	80086f8 <_lseek>
 80161ac:	1c43      	adds	r3, r0, #1
 80161ae:	d102      	bne.n	80161b6 <_lseek_r+0x1e>
 80161b0:	6823      	ldr	r3, [r4, #0]
 80161b2:	b103      	cbz	r3, 80161b6 <_lseek_r+0x1e>
 80161b4:	602b      	str	r3, [r5, #0]
 80161b6:	bd38      	pop	{r3, r4, r5, pc}
 80161b8:	20030b54 	.word	0x20030b54

080161bc <memmove>:
 80161bc:	4288      	cmp	r0, r1
 80161be:	b510      	push	{r4, lr}
 80161c0:	eb01 0302 	add.w	r3, r1, r2
 80161c4:	d807      	bhi.n	80161d6 <memmove+0x1a>
 80161c6:	1e42      	subs	r2, r0, #1
 80161c8:	4299      	cmp	r1, r3
 80161ca:	d00a      	beq.n	80161e2 <memmove+0x26>
 80161cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80161d4:	e7f8      	b.n	80161c8 <memmove+0xc>
 80161d6:	4283      	cmp	r3, r0
 80161d8:	d9f5      	bls.n	80161c6 <memmove+0xa>
 80161da:	1881      	adds	r1, r0, r2
 80161dc:	1ad2      	subs	r2, r2, r3
 80161de:	42d3      	cmn	r3, r2
 80161e0:	d100      	bne.n	80161e4 <memmove+0x28>
 80161e2:	bd10      	pop	{r4, pc}
 80161e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80161ec:	e7f7      	b.n	80161de <memmove+0x22>

080161ee <__malloc_lock>:
 80161ee:	4770      	bx	lr

080161f0 <__malloc_unlock>:
 80161f0:	4770      	bx	lr

080161f2 <_realloc_r>:
 80161f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161f4:	4607      	mov	r7, r0
 80161f6:	4614      	mov	r4, r2
 80161f8:	460e      	mov	r6, r1
 80161fa:	b921      	cbnz	r1, 8016206 <_realloc_r+0x14>
 80161fc:	4611      	mov	r1, r2
 80161fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016202:	f7ff bd67 	b.w	8015cd4 <_malloc_r>
 8016206:	b922      	cbnz	r2, 8016212 <_realloc_r+0x20>
 8016208:	f7ff fd16 	bl	8015c38 <_free_r>
 801620c:	4625      	mov	r5, r4
 801620e:	4628      	mov	r0, r5
 8016210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016212:	f000 f827 	bl	8016264 <_malloc_usable_size_r>
 8016216:	42a0      	cmp	r0, r4
 8016218:	d20f      	bcs.n	801623a <_realloc_r+0x48>
 801621a:	4621      	mov	r1, r4
 801621c:	4638      	mov	r0, r7
 801621e:	f7ff fd59 	bl	8015cd4 <_malloc_r>
 8016222:	4605      	mov	r5, r0
 8016224:	2800      	cmp	r0, #0
 8016226:	d0f2      	beq.n	801620e <_realloc_r+0x1c>
 8016228:	4631      	mov	r1, r6
 801622a:	4622      	mov	r2, r4
 801622c:	f7fb fffa 	bl	8012224 <memcpy>
 8016230:	4631      	mov	r1, r6
 8016232:	4638      	mov	r0, r7
 8016234:	f7ff fd00 	bl	8015c38 <_free_r>
 8016238:	e7e9      	b.n	801620e <_realloc_r+0x1c>
 801623a:	4635      	mov	r5, r6
 801623c:	e7e7      	b.n	801620e <_realloc_r+0x1c>
	...

08016240 <_read_r>:
 8016240:	b538      	push	{r3, r4, r5, lr}
 8016242:	4c07      	ldr	r4, [pc, #28]	; (8016260 <_read_r+0x20>)
 8016244:	4605      	mov	r5, r0
 8016246:	4608      	mov	r0, r1
 8016248:	4611      	mov	r1, r2
 801624a:	2200      	movs	r2, #0
 801624c:	6022      	str	r2, [r4, #0]
 801624e:	461a      	mov	r2, r3
 8016250:	f7f2 f9f2 	bl	8008638 <_read>
 8016254:	1c43      	adds	r3, r0, #1
 8016256:	d102      	bne.n	801625e <_read_r+0x1e>
 8016258:	6823      	ldr	r3, [r4, #0]
 801625a:	b103      	cbz	r3, 801625e <_read_r+0x1e>
 801625c:	602b      	str	r3, [r5, #0]
 801625e:	bd38      	pop	{r3, r4, r5, pc}
 8016260:	20030b54 	.word	0x20030b54

08016264 <_malloc_usable_size_r>:
 8016264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016268:	1f18      	subs	r0, r3, #4
 801626a:	2b00      	cmp	r3, #0
 801626c:	bfbc      	itt	lt
 801626e:	580b      	ldrlt	r3, [r1, r0]
 8016270:	18c0      	addlt	r0, r0, r3
 8016272:	4770      	bx	lr

08016274 <_init>:
 8016274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016276:	bf00      	nop
 8016278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801627a:	bc08      	pop	{r3}
 801627c:	469e      	mov	lr, r3
 801627e:	4770      	bx	lr

08016280 <_fini>:
 8016280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016282:	bf00      	nop
 8016284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016286:	bc08      	pop	{r3}
 8016288:	469e      	mov	lr, r3
 801628a:	4770      	bx	lr
