
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017338  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001580  08017538  08017538  00027538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ab8  08018ab8  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08018ab8  08018ab8  00028ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018ac0  08018ac0  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018ac0  08018ac0  00028ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018ac4  08018ac4  00028ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08018ac8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030e24  20000378  08018e40  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003119c  08018e40  0003119c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033a7b  00000000  00000000  000303a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000563f  00000000  00000000  00063e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023a8  00000000  00000000  00069460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  0006b808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000073a3  00000000  00000000  0006d958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e1a8  00000000  00000000  00074cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011bea7  00000000  00000000  00092ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aed4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a830  00000000  00000000  001aedc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000378 	.word	0x20000378
 800021c:	00000000 	.word	0x00000000
 8000220:	08017520 	.word	0x08017520

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000037c 	.word	0x2000037c
 800023c:	08017520 	.word	0x08017520

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f00a fdc7 	bl	800b1b4 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f00a fdc2 	bl	800b1b4 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f00a fdbd 	bl	800b1b4 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f00a fdb7 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f012 fe34 	bl	80132e4 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f9bf 	bl	8000a00 <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20028a84 	.word	0x20028a84
 8000694:	20028a8c 	.word	0x20028a8c

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
HAL_StatusTypeDef SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	HAL_StatusTypeDef Status = HAL_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
	SMLCD_SCS_H;
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <SMLCD_Clear+0x40>)
 80006a8:	f00a fd84 	bl	800b1b4 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006ac:	2320      	movs	r3, #32
 80006ae:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006b0:	2300      	movs	r3, #0
 80006b2:	717b      	strb	r3, [r7, #5]
	Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2202      	movs	r2, #2
 80006ba:	4808      	ldr	r0, [pc, #32]	; (80006dc <SMLCD_Clear+0x44>)
 80006bc:	f00d f8c4 	bl	800d848 <HAL_SPI_Transmit>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006c4:	2200      	movs	r2, #0
 80006c6:	2110      	movs	r1, #16
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <SMLCD_Clear+0x40>)
 80006ca:	f00a fd73 	bl	800b1b4 <HAL_GPIO_WritePin>
	return Status;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	20028a8c 	.word	0x20028a8c

080006e0 <SMLCD_Flush>:
	return HAL_OK;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
HAL_StatusTypeDef SMLCD_Flush(void) {
 80006e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e4:	b08c      	sub	sp, #48	; 0x30
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	466b      	mov	r3, sp
 80006ea:	4698      	mov	r8, r3
	HAL_StatusTypeDef Status = HAL_OK;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	int commandByte=1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
	int lineByte=1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
	int lineAmount=SCR_H;
 80006fa:	23f0      	movs	r3, #240	; 0xf0
 80006fc:	61fb      	str	r3, [r7, #28]
	int nopBytesPerLine= 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
	int dataBytesPerLine=SCR_W/8;
 8000702:	2332      	movs	r3, #50	; 0x32
 8000704:	617b      	str	r3, [r7, #20]
	int finalNOPByte=1;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	441a      	add	r2, r3
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	441a      	add	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	441a      	add	r2, r3
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	18d6      	adds	r6, r2, r3
 800071c:	1e73      	subs	r3, r6, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4633      	mov	r3, r6
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	f04f 0400 	mov.w	r4, #0
 8000730:	00d4      	lsls	r4, r2, #3
 8000732:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000736:	00cb      	lsls	r3, r1, #3
 8000738:	4633      	mov	r3, r6
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 0200 	mov.w	r2, #0
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	f04f 0400 	mov.w	r4, #0
 8000748:	00d4      	lsls	r4, r2, #3
 800074a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800074e:	00cb      	lsls	r3, r1, #3
 8000750:	4633      	mov	r3, r6
 8000752:	3307      	adds	r3, #7
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	ebad 0d03 	sub.w	sp, sp, r3
 800075c:	466b      	mov	r3, sp
 800075e:	3300      	adds	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4632      	mov	r2, r6
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f012 fdc6 	bl	80132fa <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 800076e:	4d9f      	ldr	r5, [pc, #636]	; (80009ec <SMLCD_Flush+0x30c>)
	register uint8_t line = 0;
 8000770:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000772:	2301      	movs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
	int x=0;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	2288      	movs	r2, #136	; 0x88
 800077e:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000780:	4b9b      	ldr	r3, [pc, #620]	; (80009f0 <SMLCD_Flush+0x310>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d046      	beq.n	8000816 <SMLCD_Flush+0x136>
 8000788:	2b08      	cmp	r3, #8
 800078a:	f000 8097 	beq.w	80008bc <SMLCD_Flush+0x1dc>
 800078e:	2b02      	cmp	r3, #2
 8000790:	f040 80e3 	bne.w	800095a <SMLCD_Flush+0x27a>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000794:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000796:	e039      	b.n	800080c <SMLCD_Flush+0x12c>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2288      	movs	r2, #136	; 0x88
 800079c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	4622      	mov	r2, r4
 80007a6:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007a8:	2302      	movs	r3, #2
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007ac:	e009      	b.n	80007c2 <SMLCD_Flush+0xe2>
					transmitBuffer[x]=*ptr;
 80007ae:	7829      	ldrb	r1, [r5, #0]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007ba:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007be:	3301      	adds	r3, #1
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	2b33      	cmp	r3, #51	; 0x33
 80007c6:	ddf2      	ble.n	80007ae <SMLCD_Flush+0xce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4885      	ldr	r0, [pc, #532]	; (80009f4 <SMLCD_Flush+0x314>)
 80007de:	f00a fce9 	bl	800b1b4 <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	b2b2      	uxth	r2, r6
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	4883      	ldr	r0, [pc, #524]	; (80009f8 <SMLCD_Flush+0x318>)
 80007ea:	f00d f82d 	bl	800d848 <HAL_SPI_Transmit>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	487e      	ldr	r0, [pc, #504]	; (80009f4 <SMLCD_Flush+0x314>)
 80007fa:	f00a fcdb 	bl	800b1b4 <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 80007fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <SMLCD_Flush+0x12c>
				{
					return Status;
 8000806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800080a:	e0e9      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (--line > 0) {
 800080c:	1e63      	subs	r3, r4, #1
 800080e:	b2dc      	uxtb	r4, r3
 8000810:	2c00      	cmp	r4, #0
 8000812:	d1c1      	bne.n	8000798 <SMLCD_Flush+0xb8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 8000814:	e0e3      	b.n	80009de <SMLCD_Flush+0x2fe>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 8000816:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000818:	4d78      	ldr	r5, [pc, #480]	; (80009fc <SMLCD_Flush+0x31c>)
			while (--line > 0) {
 800081a:	e04a      	b.n	80008b2 <SMLCD_Flush+0x1d2>

				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 800081c:	4620      	mov	r0, r4
 800081e:	f7ff fee7 	bl	80005f0 <__reverse8bit>
 8000822:	4603      	mov	r3, r0
 8000824:	4619      	mov	r1, r3
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	2201      	movs	r2, #1
 800082a:	4873      	ldr	r0, [pc, #460]	; (80009f8 <SMLCD_Flush+0x318>)
 800082c:	f00d f80c 	bl	800d848 <HAL_SPI_Transmit>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800083a:	2b00      	cmp	r3, #0
 800083c:	d007      	beq.n	800084e <SMLCD_Flush+0x16e>
				{
					SMLCD_SCS_L;
 800083e:	2200      	movs	r2, #0
 8000840:	2110      	movs	r1, #16
 8000842:	486c      	ldr	r0, [pc, #432]	; (80009f4 <SMLCD_Flush+0x314>)
 8000844:	f00a fcb6 	bl	800b1b4 <HAL_GPIO_WritePin>
					return Status;
 8000848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800084c:	e0c8      	b.n	80009e0 <SMLCD_Flush+0x300>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800084e:	2600      	movs	r6, #0
 8000850:	e018      	b.n	8000884 <SMLCD_Flush+0x1a4>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000852:	462b      	mov	r3, r5
 8000854:	1e5d      	subs	r5, r3, #1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	2364      	movs	r3, #100	; 0x64
 800085c:	2201      	movs	r2, #1
 800085e:	4866      	ldr	r0, [pc, #408]	; (80009f8 <SMLCD_Flush+0x318>)
 8000860:	f00c fff2 	bl	800d848 <HAL_SPI_Transmit>
 8000864:	4603      	mov	r3, r0
 8000866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 800086a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800086e:	2b00      	cmp	r3, #0
 8000870:	d007      	beq.n	8000882 <SMLCD_Flush+0x1a2>
					{
						SMLCD_SCS_L;
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	485f      	ldr	r0, [pc, #380]	; (80009f4 <SMLCD_Flush+0x314>)
 8000878:	f00a fc9c 	bl	800b1b4 <HAL_GPIO_WritePin>
						return Status;
 800087c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000880:	e0ae      	b.n	80009e0 <SMLCD_Flush+0x300>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000882:	3601      	adds	r6, #1
 8000884:	2e31      	cmp	r6, #49	; 0x31
 8000886:	d9e4      	bls.n	8000852 <SMLCD_Flush+0x172>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	2201      	movs	r2, #1
 800088c:	2100      	movs	r1, #0
 800088e:	485a      	ldr	r0, [pc, #360]	; (80009f8 <SMLCD_Flush+0x318>)
 8000890:	f00c ffda 	bl	800d848 <HAL_SPI_Transmit>
 8000894:	4603      	mov	r3, r0
 8000896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 800089a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d007      	beq.n	80008b2 <SMLCD_Flush+0x1d2>
				{
					SMLCD_SCS_L;
 80008a2:	2200      	movs	r2, #0
 80008a4:	2110      	movs	r1, #16
 80008a6:	4853      	ldr	r0, [pc, #332]	; (80009f4 <SMLCD_Flush+0x314>)
 80008a8:	f00a fc84 	bl	800b1b4 <HAL_GPIO_WritePin>
					return Status;
 80008ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008b0:	e096      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (--line > 0) {
 80008b2:	1e63      	subs	r3, r4, #1
 80008b4:	b2dc      	uxtb	r4, r3
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d1b0      	bne.n	800081c <SMLCD_Flush+0x13c>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 80008ba:	e090      	b.n	80009de <SMLCD_Flush+0x2fe>
		case LCD_ORIENT_180:
			line = 0;
 80008bc:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80008be:	4d4f      	ldr	r5, [pc, #316]	; (80009fc <SMLCD_Flush+0x31c>)
			while (line++ < SCR_H + 1) {
 80008c0:	e045      	b.n	800094e <SMLCD_Flush+0x26e>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80008c2:	4620      	mov	r0, r4
 80008c4:	f7ff fe94 	bl	80005f0 <__reverse8bit>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4619      	mov	r1, r3
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	2201      	movs	r2, #1
 80008d0:	4849      	ldr	r0, [pc, #292]	; (80009f8 <SMLCD_Flush+0x318>)
 80008d2:	f00c ffb9 	bl	800d848 <HAL_SPI_Transmit>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 80008dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d007      	beq.n	80008f4 <SMLCD_Flush+0x214>
				{
					SMLCD_SCS_L;
 80008e4:	2200      	movs	r2, #0
 80008e6:	2110      	movs	r1, #16
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <SMLCD_Flush+0x314>)
 80008ea:	f00a fc63 	bl	800b1b4 <HAL_GPIO_WritePin>
					return Status;
 80008ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008f2:	e075      	b.n	80009e0 <SMLCD_Flush+0x300>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 80008f4:	2600      	movs	r6, #0
 80008f6:	e013      	b.n	8000920 <SMLCD_Flush+0x240>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 80008f8:	462b      	mov	r3, r5
 80008fa:	1e5d      	subs	r5, r3, #1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	2201      	movs	r2, #1
 8000904:	483c      	ldr	r0, [pc, #240]	; (80009f8 <SMLCD_Flush+0x318>)
 8000906:	f00c ff9f 	bl	800d848 <HAL_SPI_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 8000910:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <SMLCD_Flush+0x23e>
					{
						return Status;
 8000918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800091c:	e060      	b.n	80009e0 <SMLCD_Flush+0x300>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800091e:	3601      	adds	r6, #1
 8000920:	2e31      	cmp	r6, #49	; 0x31
 8000922:	d9e9      	bls.n	80008f8 <SMLCD_Flush+0x218>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	2201      	movs	r2, #1
 8000928:	2100      	movs	r1, #0
 800092a:	4833      	ldr	r0, [pc, #204]	; (80009f8 <SMLCD_Flush+0x318>)
 800092c:	f00c ff8c 	bl	800d848 <HAL_SPI_Transmit>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800093a:	2b00      	cmp	r3, #0
 800093c:	d007      	beq.n	800094e <SMLCD_Flush+0x26e>
				{
					SMLCD_SCS_L;
 800093e:	2200      	movs	r2, #0
 8000940:	2110      	movs	r1, #16
 8000942:	482c      	ldr	r0, [pc, #176]	; (80009f4 <SMLCD_Flush+0x314>)
 8000944:	f00a fc36 	bl	800b1b4 <HAL_GPIO_WritePin>
					return Status;
 8000948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800094c:	e048      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (line++ < SCR_H + 1) {
 800094e:	4623      	mov	r3, r4
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	b2d4      	uxtb	r4, r2
 8000954:	2bf0      	cmp	r3, #240	; 0xf0
 8000956:	d9b4      	bls.n	80008c2 <SMLCD_Flush+0x1e2>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 8000958:	e041      	b.n	80009de <SMLCD_Flush+0x2fe>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800095a:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800095c:	e039      	b.n	80009d2 <SMLCD_Flush+0x2f2>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2288      	movs	r2, #136	; 0x88
 8000962:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4622      	mov	r2, r4
 800096c:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 800096e:	2302      	movs	r3, #2
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000972:	e009      	b.n	8000988 <SMLCD_Flush+0x2a8>
					transmitBuffer[x]=*ptr;
 8000974:	7829      	ldrb	r1, [r5, #0]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097a:	4413      	add	r3, r2
 800097c:	460a      	mov	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
					ptr++;
 8000980:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000984:	3301      	adds	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098a:	2b33      	cmp	r3, #51	; 0x33
 800098c:	ddf2      	ble.n	8000974 <SMLCD_Flush+0x294>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <SMLCD_Flush+0x314>)
 80009a4:	f00a fc06 	bl	800b1b4 <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	b2b2      	uxth	r2, r6
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <SMLCD_Flush+0x318>)
 80009b0:	f00c ff4a 	bl	800d848 <HAL_SPI_Transmit>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 80009ba:	2200      	movs	r2, #0
 80009bc:	2110      	movs	r1, #16
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <SMLCD_Flush+0x314>)
 80009c0:	f00a fbf8 	bl	800b1b4 <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 80009c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <SMLCD_Flush+0x2f2>
				{
					return Status;
 80009cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80009d0:	e006      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (line++ < SCR_H + 1) {
 80009d2:	4623      	mov	r3, r4
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	b2d4      	uxtb	r4, r2
 80009d8:	2bf0      	cmp	r3, #240	; 0xf0
 80009da:	d9c0      	bls.n	800095e <SMLCD_Flush+0x27e>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80009dc:	bf00      	nop
	}
	return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009ec:	20000394 	.word	0x20000394
 80009f0:	20000000 	.word	0x20000000
 80009f4:	40021000 	.word	0x40021000
 80009f8:	20028a8c 	.word	0x20028a8c
 80009fc:	20003273 	.word	0x20003273

08000a00 <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 0306 	and.w	r3, r3, #6
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d007      	beq.n	8000a24 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <SMLCD_Orientation+0x44>)
 8000a16:	22f0      	movs	r2, #240	; 0xf0
 8000a18:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <SMLCD_Orientation+0x48>)
 8000a1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a20:	801a      	strh	r2, [r3, #0]
 8000a22:	e006      	b.n	8000a32 <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <SMLCD_Orientation+0x44>)
 8000a26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a2a:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SMLCD_Orientation+0x48>)
 8000a2e:	22f0      	movs	r2, #240	; 0xf0
 8000a30:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <SMLCD_Orientation+0x4c>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	7013      	strb	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20028a86 	.word	0x20028a86
 8000a48:	20028a88 	.word	0x20028a88
 8000a4c:	20000000 	.word	0x20000000

08000a50 <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000a54:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <LCD_Clear+0x18>)
 8000a5e:	f012 fc4c 	bl	80132fa <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000394 	.word	0x20000394

08000a6c <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000a6c:	b4b0      	push	{r4, r5, r7}
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000a74:	4928      	ldr	r1, [pc, #160]	; (8000b18 <LCD_Pixel+0xac>)
 8000a76:	7809      	ldrb	r1, [r1, #0]
 8000a78:	2904      	cmp	r1, #4
 8000a7a:	d009      	beq.n	8000a90 <LCD_Pixel+0x24>
 8000a7c:	2908      	cmp	r1, #8
 8000a7e:	d002      	beq.n	8000a86 <LCD_Pixel+0x1a>
 8000a80:	2902      	cmp	r1, #2
 8000a82:	d00d      	beq.n	8000aa0 <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000a84:	e010      	b.n	8000aa8 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 8000a86:	f240 118f 	movw	r1, #399	; 0x18f
 8000a8a:	1ac9      	subs	r1, r1, r3
 8000a8c:	460b      	mov	r3, r1
			break;
 8000a8e:	e00b      	b.n	8000aa8 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 8000a90:	4053      	eors	r3, r2
 8000a92:	405a      	eors	r2, r3
 8000a94:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 8000a96:	f240 118f 	movw	r1, #399	; 0x18f
 8000a9a:	1ac9      	subs	r1, r1, r3
 8000a9c:	460b      	mov	r3, r1
			break;
 8000a9e:	e003      	b.n	8000aa8 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 8000aa0:	4053      	eors	r3, r2
 8000aa2:	405a      	eors	r2, r3
 8000aa4:	4053      	eors	r3, r2
			break;
 8000aa6:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 8000aa8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000aac:	fb01 f202 	mul.w	r2, r1, r2
 8000ab0:	441a      	add	r2, r3
 8000ab2:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 8000ab4:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000ab8:	4294      	cmp	r4, r2
 8000aba:	d829      	bhi.n	8000b10 <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <LCD_Pixel+0xb0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d002      	beq.n	8000ad2 <LCD_Pixel+0x66>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d00a      	beq.n	8000ae6 <LCD_Pixel+0x7a>
 8000ad0:	e013      	b.n	8000afa <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <LCD_Pixel+0xb4>)
 8000ad4:	5d1a      	ldrb	r2, [r3, r4]
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <LCD_Pixel+0xb8>)
 8000ada:	5c5b      	ldrb	r3, [r3, r1]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <LCD_Pixel+0xb4>)
 8000ae2:	551a      	strb	r2, [r3, r4]
			break;
 8000ae4:	e015      	b.n	8000b12 <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <LCD_Pixel+0xb4>)
 8000ae8:	5d1a      	ldrb	r2, [r3, r4]
 8000aea:	4629      	mov	r1, r5
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <LCD_Pixel+0xb8>)
 8000aee:	5c5b      	ldrb	r3, [r3, r1]
 8000af0:	4053      	eors	r3, r2
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <LCD_Pixel+0xb4>)
 8000af6:	551a      	strb	r2, [r3, r4]
			break;
 8000af8:	e00b      	b.n	8000b12 <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <LCD_Pixel+0xb4>)
 8000afc:	5d1a      	ldrb	r2, [r3, r4]
 8000afe:	4629      	mov	r1, r5
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <LCD_Pixel+0xbc>)
 8000b02:	5c5b      	ldrb	r3, [r3, r1]
 8000b04:	4013      	ands	r3, r2
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LCD_Pixel+0xb4>)
 8000b0a:	551a      	strb	r2, [r3, r4]
			break;
 8000b0c:	bf00      	nop
 8000b0e:	e000      	b.n	8000b12 <LCD_Pixel+0xa6>
		return;
 8000b10:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bcb0      	pop	{r4, r5, r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20028a84 	.word	0x20028a84
 8000b20:	20000394 	.word	0x20000394
 8000b24:	08017f64 	.word	0x08017f64
 8000b28:	08017f5c 	.word	0x08017f5c

08000b2c <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000b2c:	b4b0      	push	{r4, r5, r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
 8000b36:	460b      	mov	r3, r1
 8000b38:	80bb      	strh	r3, [r7, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b44:	fb02 f203 	mul.w	r2, r2, r3
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	10db      	asrs	r3, r3, #3
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <LCD_VLineInt+0xa0>)
 8000b50:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <LCD_VLineInt+0xa4>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d002      	beq.n	8000b68 <LCD_VLineInt+0x3c>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d00f      	beq.n	8000b86 <LCD_VLineInt+0x5a>
 8000b66:	e01d      	b.n	8000ba4 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <LCD_VLineInt+0xa8>)
 8000b6c:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000b6e:	e004      	b.n	8000b7a <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	432b      	orrs	r3, r5
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000b78:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	1e5a      	subs	r2, r3, #1
 8000b7e:	807a      	strh	r2, [r7, #2]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f5      	bne.n	8000b70 <LCD_VLineInt+0x44>
			}
			break;
 8000b84:	e01d      	b.n	8000bc2 <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <LCD_VLineInt+0xa8>)
 8000b8a:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000b8c:	e004      	b.n	8000b98 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000b8e:	7823      	ldrb	r3, [r4, #0]
 8000b90:	406b      	eors	r3, r5
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000b96:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	1e5a      	subs	r2, r3, #1
 8000b9c:	807a      	strh	r2, [r7, #2]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f5      	bne.n	8000b8e <LCD_VLineInt+0x62>
			}
			break;
 8000ba2:	e00e      	b.n	8000bc2 <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <LCD_VLineInt+0xac>)
 8000ba8:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000baa:	e004      	b.n	8000bb6 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000bac:	7823      	ldrb	r3, [r4, #0]
 8000bae:	402b      	ands	r3, r5
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000bb4:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	807a      	strh	r2, [r7, #2]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f5      	bne.n	8000bac <LCD_VLineInt+0x80>
			}
			break;
 8000bc0:	bf00      	nop
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bcb0      	pop	{r4, r5, r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000394 	.word	0x20000394
 8000bd0:	20028a84 	.word	0x20028a84
 8000bd4:	08017f64 	.word	0x08017f64
 8000bd8:	08017f5c 	.word	0x08017f5c

08000bdc <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000bdc:	b4f0      	push	{r4, r5, r6, r7}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
 8000be6:	460b      	mov	r3, r1
 8000be8:	80bb      	strh	r3, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bf4:	fb02 f203 	mul.w	r2, r2, r3
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	10db      	asrs	r3, r3, #3
 8000bfe:	4a69      	ldr	r2, [pc, #420]	; (8000da4 <LCD_HLineInt+0x1c8>)
 8000c00:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d03a      	beq.n	8000c86 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000c10:	f1c6 0308 	rsb	r3, r6, #8
 8000c14:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000c16:	4632      	mov	r2, r6
 8000c18:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <LCD_HLineInt+0x1cc>)
 8000c1a:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000c1c:	b2b3      	uxth	r3, r6
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d206      	bcs.n	8000c32 <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000c24:	4632      	mov	r2, r6
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	4a60      	ldr	r2, [pc, #384]	; (8000dac <LCD_HLineInt+0x1d0>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	432b      	orrs	r3, r5
 8000c30:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d002      	beq.n	8000c40 <LCD_HLineInt+0x64>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d00a      	beq.n	8000c54 <LCD_HLineInt+0x78>
 8000c3e:	e013      	b.n	8000c68 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c40:	7823      	ldrb	r3, [r4, #0]
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	b26b      	sxtb	r3, r5
 8000c46:	43db      	mvns	r3, r3
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	7023      	strb	r3, [r4, #0]
				break;
 8000c52:	e00e      	b.n	8000c72 <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c54:	7823      	ldrb	r3, [r4, #0]
 8000c56:	b25a      	sxtb	r2, r3
 8000c58:	b26b      	sxtb	r3, r5
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	4053      	eors	r3, r2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	7023      	strb	r3, [r4, #0]
				break;
 8000c66:	e004      	b.n	8000c72 <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000c68:	7823      	ldrb	r3, [r4, #0]
 8000c6a:	402b      	ands	r3, r5
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	7023      	strb	r3, [r4, #0]
				break;
 8000c70:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000c72:	b2b3      	uxth	r3, r6
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f0c0 808f 	bcc.w	8000d9a <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000c7c:	3401      	adds	r4, #1
		W -= modulo;
 8000c7e:	b2b3      	uxth	r3, r6
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d92c      	bls.n	8000ce6 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d003      	beq.n	8000c9c <LCD_HLineInt+0xc0>
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d00e      	beq.n	8000cb6 <LCD_HLineInt+0xda>
 8000c98:	e01a      	b.n	8000cd0 <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000c9a:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	1d1c      	adds	r4, r3, #4
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	3b20      	subs	r3, #32
 8000caa:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	2b1f      	cmp	r3, #31
 8000cb0:	d8f3      	bhi.n	8000c9a <LCD_HLineInt+0xbe>
				break;
 8000cb2:	e018      	b.n	8000ce6 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000cb4:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	1d1c      	adds	r4, r3, #4
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	3b20      	subs	r3, #32
 8000cc4:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	2b1f      	cmp	r3, #31
 8000cca:	d8f3      	bhi.n	8000cb4 <LCD_HLineInt+0xd8>
				break;
 8000ccc:	e00b      	b.n	8000ce6 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000cce:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000cd0:	4623      	mov	r3, r4
 8000cd2:	1d1c      	adds	r4, r3, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	3b20      	subs	r3, #32
 8000cdc:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	2b1f      	cmp	r3, #31
 8000ce2:	d8f4      	bhi.n	8000cce <LCD_HLineInt+0xf2>
				break;
 8000ce4:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000ce6:	887b      	ldrh	r3, [r7, #2]
 8000ce8:	2b07      	cmp	r3, #7
 8000cea:	d92c      	bls.n	8000d46 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d003      	beq.n	8000cfc <LCD_HLineInt+0x120>
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d00d      	beq.n	8000d14 <LCD_HLineInt+0x138>
 8000cf8:	e01a      	b.n	8000d30 <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000cfa:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	1c5c      	adds	r4, r3, #1
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	3b08      	subs	r3, #8
 8000d08:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	d8f4      	bhi.n	8000cfa <LCD_HLineInt+0x11e>
				break;
 8000d10:	e01a      	b.n	8000d48 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000d12:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000d14:	4623      	mov	r3, r4
 8000d16:	1c5c      	adds	r4, r3, #1
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	43d2      	mvns	r2, r2
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	3b08      	subs	r3, #8
 8000d24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d8f2      	bhi.n	8000d12 <LCD_HLineInt+0x136>
				break;
 8000d2c:	e00c      	b.n	8000d48 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000d2e:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000d30:	4623      	mov	r3, r4
 8000d32:	1c5c      	adds	r4, r3, #1
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	3b08      	subs	r3, #8
 8000d3c:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	2b07      	cmp	r3, #7
 8000d42:	d8f4      	bhi.n	8000d2e <LCD_HLineInt+0x152>
				break;
 8000d44:	e000      	b.n	8000d48 <LCD_HLineInt+0x16c>
		}
	}
 8000d46:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d026      	beq.n	8000d9c <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	f1c3 0308 	rsb	r3, r3, #8
 8000d54:	4a15      	ldr	r2, [pc, #84]	; (8000dac <LCD_HLineInt+0x1d0>)
 8000d56:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d002      	beq.n	8000d66 <LCD_HLineInt+0x18a>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d00a      	beq.n	8000d7a <LCD_HLineInt+0x19e>
 8000d64:	e013      	b.n	8000d8e <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000d66:	7823      	ldrb	r3, [r4, #0]
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	b26b      	sxtb	r3, r5
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	7023      	strb	r3, [r4, #0]
				break;
 8000d78:	e010      	b.n	8000d9c <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000d7a:	7823      	ldrb	r3, [r4, #0]
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	b26b      	sxtb	r3, r5
 8000d80:	43db      	mvns	r3, r3
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	4053      	eors	r3, r2
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	7023      	strb	r3, [r4, #0]
				break;
 8000d8c:	e006      	b.n	8000d9c <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000d8e:	7823      	ldrb	r3, [r4, #0]
 8000d90:	402b      	ands	r3, r5
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	7023      	strb	r3, [r4, #0]
				break;
 8000d96:	bf00      	nop
 8000d98:	e000      	b.n	8000d9c <LCD_HLineInt+0x1c0>
			return;
 8000d9a:	bf00      	nop
		}
	}
}
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bcf0      	pop	{r4, r5, r6, r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000394 	.word	0x20000394
 8000da8:	08017f6c 	.word	0x08017f6c
 8000dac:	08017f74 	.word	0x08017f74
 8000db0:	20028a84 	.word	0x20028a84

08000db4 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	80bb      	strh	r3, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000dc6:	88fa      	ldrh	r2, [r7, #6]
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d905      	bls.n	8000dda <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000dce:	88bd      	ldrh	r5, [r7, #4]
 8000dd0:	88fa      	ldrh	r2, [r7, #6]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	b29c      	uxth	r4, r3
 8000dd8:	e004      	b.n	8000de4 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000dda:	88fd      	ldrh	r5, [r7, #6]
 8000ddc:	88ba      	ldrh	r2, [r7, #4]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b29c      	uxth	r4, r3
	}
	L++;
 8000de4:	4623      	mov	r3, r4
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <LCD_HLine+0x9c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d00a      	beq.n	8000e08 <LCD_HLine+0x54>
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d013      	beq.n	8000e1e <LCD_HLine+0x6a>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d11f      	bne.n	8000e3a <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe93 	bl	8000b2c <LCD_VLineInt>
			break;
 8000e06:	e01f      	b.n	8000e48 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4622      	mov	r2, r4
 8000e14:	4629      	mov	r1, r5
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe88 	bl	8000b2c <LCD_VLineInt>
			break;
 8000e1c:	e014      	b.n	8000e48 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000e1e:	462b      	mov	r3, r5
 8000e20:	425b      	negs	r3, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	1b1b      	subs	r3, r3, r4
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	8879      	ldrh	r1, [r7, #2]
 8000e30:	4622      	mov	r2, r4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fed2 	bl	8000bdc <LCD_HLineInt>
			break;
 8000e38:	e006      	b.n	8000e48 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	4622      	mov	r2, r4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4628      	mov	r0, r5
 8000e42:	f7ff fecb 	bl	8000bdc <LCD_HLineInt>
			break;
 8000e46:	bf00      	nop
	}
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e50:	20000000 	.word	0x20000000

08000e54 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000e66:	88ba      	ldrh	r2, [r7, #4]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d905      	bls.n	8000e7a <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000e6e:	887d      	ldrh	r5, [r7, #2]
 8000e70:	88ba      	ldrh	r2, [r7, #4]
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b29c      	uxth	r4, r3
 8000e78:	e004      	b.n	8000e84 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000e7a:	88bd      	ldrh	r5, [r7, #4]
 8000e7c:	887a      	ldrh	r2, [r7, #2]
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b29c      	uxth	r4, r3
	}
	L++;
 8000e84:	4623      	mov	r3, r4
 8000e86:	3301      	adds	r3, #1
 8000e88:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <LCD_VLine+0x9c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d00a      	beq.n	8000ea8 <LCD_VLine+0x54>
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d016      	beq.n	8000ec4 <LCD_VLine+0x70>
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d11f      	bne.n	8000eda <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff fe9b 	bl	8000bdc <LCD_HLineInt>
			break;
 8000ea6:	e01f      	b.n	8000ee8 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	425b      	negs	r3, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	1b1b      	subs	r3, r3, r4
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	88f9      	ldrh	r1, [r7, #6]
 8000eba:	4622      	mov	r2, r4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe8d 	bl	8000bdc <LCD_HLineInt>
			break;
 8000ec2:	e011      	b.n	8000ee8 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe2a 	bl	8000b2c <LCD_VLineInt>
			break;
 8000ed8:	e006      	b.n	8000ee8 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4622      	mov	r2, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fe23 	bl	8000b2c <LCD_VLineInt>
			break;
 8000ee6:	bf00      	nop
	}
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	80fb      	strh	r3, [r7, #6]
 8000f06:	4603      	mov	r3, r0
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	8879      	ldrh	r1, [r7, #2]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff4b 	bl	8000db4 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000f1e:	883a      	ldrh	r2, [r7, #0]
 8000f20:	8879      	ldrh	r1, [r7, #2]
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff45 	bl	8000db4 <LCD_HLine>
	if (Y1 > Y2) {
 8000f2a:	88ba      	ldrh	r2, [r7, #4]
 8000f2c:	883b      	ldrh	r3, [r7, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d90b      	bls.n	8000f4a <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000f32:	88ba      	ldrh	r2, [r7, #4]
 8000f34:	883b      	ldrh	r3, [r7, #0]
 8000f36:	4053      	eors	r3, r2
 8000f38:	80bb      	strh	r3, [r7, #4]
 8000f3a:	883a      	ldrh	r2, [r7, #0]
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	4053      	eors	r3, r2
 8000f40:	803b      	strh	r3, [r7, #0]
 8000f42:	88ba      	ldrh	r2, [r7, #4]
 8000f44:	883b      	ldrh	r3, [r7, #0]
 8000f46:	4053      	eors	r3, r2
 8000f48:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000f56:	883a      	ldrh	r2, [r7, #0]
 8000f58:	88b9      	ldrh	r1, [r7, #4]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff79 	bl	8000e54 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000f62:	883a      	ldrh	r2, [r7, #0]
 8000f64:	88b9      	ldrh	r1, [r7, #4]
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff73 	bl	8000e54 <LCD_VLine>
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
	...

08000f78 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000f78:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4604      	mov	r4, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	80fb      	strh	r3, [r7, #6]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000f98:	88fa      	ldrh	r2, [r7, #6]
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d90b      	bls.n	8000fb8 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	4053      	eors	r3, r2
 8000fa6:	80fb      	strh	r3, [r7, #6]
 8000fa8:	887a      	ldrh	r2, [r7, #2]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4053      	eors	r3, r2
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000fb8:	88ba      	ldrh	r2, [r7, #4]
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d90b      	bls.n	8000fd8 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	883b      	ldrh	r3, [r7, #0]
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	80bb      	strh	r3, [r7, #4]
 8000fc8:	883a      	ldrh	r2, [r7, #0]
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	4053      	eors	r3, r2
 8000fce:	803b      	strh	r3, [r7, #0]
 8000fd0:	88ba      	ldrh	r2, [r7, #4]
 8000fd2:	883b      	ldrh	r3, [r7, #0]
 8000fd4:	4053      	eors	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000fd8:	4b95      	ldr	r3, [pc, #596]	; (8001230 <LCD_FillRect+0x2b8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d011      	beq.n	8001004 <LCD_FillRect+0x8c>
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d002      	beq.n	8000fea <LCD_FillRect+0x72>
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d032      	beq.n	800104e <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000fe8:	e04a      	b.n	8001080 <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000ffe:	897b      	ldrh	r3, [r7, #10]
 8001000:	80fb      	strh	r3, [r7, #6]
			break;
 8001002:	e03d      	b.n	8001080 <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8001004:	88fa      	ldrh	r2, [r7, #6]
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	4053      	eors	r3, r2
 800100a:	80fb      	strh	r3, [r7, #6]
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4053      	eors	r3, r2
 8001012:	80bb      	strh	r3, [r7, #4]
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	4053      	eors	r3, r2
 800101a:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 800101c:	887a      	ldrh	r2, [r7, #2]
 800101e:	883b      	ldrh	r3, [r7, #0]
 8001020:	4053      	eors	r3, r2
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	883a      	ldrh	r2, [r7, #0]
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	4053      	eors	r3, r2
 800102a:	803b      	strh	r3, [r7, #0]
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	883b      	ldrh	r3, [r7, #0]
 8001030:	4053      	eors	r3, r2
 8001032:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 800103a:	3301      	adds	r3, #1
 800103c:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001044:	3301      	adds	r3, #1
 8001046:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8001048:	897b      	ldrh	r3, [r7, #10]
 800104a:	80fb      	strh	r3, [r7, #6]
			break;
 800104c:	e018      	b.n	8001080 <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 800104e:	88fa      	ldrh	r2, [r7, #6]
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	4053      	eors	r3, r2
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	88ba      	ldrh	r2, [r7, #4]
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4053      	eors	r3, r2
 800105c:	80bb      	strh	r3, [r7, #4]
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	4053      	eors	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	883b      	ldrh	r3, [r7, #0]
 800106a:	4053      	eors	r3, r2
 800106c:	807b      	strh	r3, [r7, #2]
 800106e:	883a      	ldrh	r2, [r7, #0]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4053      	eors	r3, r2
 8001074:	803b      	strh	r3, [r7, #0]
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	883b      	ldrh	r3, [r7, #0]
 800107a:	4053      	eors	r3, r2
 800107c:	807b      	strh	r3, [r7, #2]
			break;
 800107e:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	4a6b      	ldr	r2, [pc, #428]	; (8001234 <LCD_FillRect+0x2bc>)
 8001088:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	4a69      	ldr	r2, [pc, #420]	; (8001238 <LCD_FillRect+0x2c0>)
 8001092:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800109c:	fb02 f203 	mul.w	r2, r2, r3
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4413      	add	r3, r2
 80010a4:	10db      	asrs	r3, r3, #3
 80010a6:	4a65      	ldr	r2, [pc, #404]	; (800123c <LCD_FillRect+0x2c4>)
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	817b      	strh	r3, [r7, #10]

	if (dW) {
 80010bc:	897b      	ldrh	r3, [r7, #10]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d071      	beq.n	80011a6 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 80010c2:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <LCD_FillRect+0x2c8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d003      	beq.n	80010d2 <LCD_FillRect+0x15a>
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d022      	beq.n	8001114 <LCD_FillRect+0x19c>
 80010ce:	e043      	b.n	8001158 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 80010d0:	bf00      	nop
				do {
					cntr = dW;
 80010d2:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 80010d4:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 80010d6:	4623      	mov	r3, r4
 80010d8:	1c5c      	adds	r4, r3, #1
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	432a      	orrs	r2, r5
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80010e2:	e003      	b.n	80010ec <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 80010e4:	4623      	mov	r3, r4
 80010e6:	1c5c      	adds	r4, r3, #1
 80010e8:	22ff      	movs	r2, #255	; 0xff
 80010ea:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80010ec:	1e73      	subs	r3, r6, #1
 80010ee:	b29e      	uxth	r6, r3
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	d1f7      	bne.n	80010e4 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 80010f4:	7823      	ldrb	r3, [r4, #0]
 80010f6:	ea48 0303 	orr.w	r3, r8, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3332      	adds	r3, #50	; 0x32
 8001102:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	80ba      	strh	r2, [r7, #4]
 800110a:	883a      	ldrh	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8df      	bhi.n	80010d0 <LCD_FillRect+0x158>
				break;
 8001110:	e087      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PINV:
 8001112:	bf00      	nop
				do {
					cntr = dW;
 8001114:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001116:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001118:	4623      	mov	r3, r4
 800111a:	1c5c      	adds	r4, r3, #1
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	406a      	eors	r2, r5
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001124:	e005      	b.n	8001132 <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001126:	4623      	mov	r3, r4
 8001128:	1c5c      	adds	r4, r3, #1
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	43d2      	mvns	r2, r2
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001132:	1e73      	subs	r3, r6, #1
 8001134:	b29e      	uxth	r6, r3
 8001136:	2e00      	cmp	r6, #0
 8001138:	d1f5      	bne.n	8001126 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 800113a:	7823      	ldrb	r3, [r4, #0]
 800113c:	ea88 0303 	eor.w	r3, r8, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3332      	adds	r3, #50	; 0x32
 8001148:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	80ba      	strh	r2, [r7, #4]
 8001150:	883a      	ldrh	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d8dd      	bhi.n	8001112 <LCD_FillRect+0x19a>
				break;
 8001156:	e064      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001158:	43eb      	mvns	r3, r5
 800115a:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 800115c:	ea6f 0308 	mvn.w	r3, r8
 8001160:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001164:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001166:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001168:	4623      	mov	r3, r4
 800116a:	1c5c      	adds	r4, r3, #1
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	402a      	ands	r2, r5
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001174:	e003      	b.n	800117e <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001176:	4623      	mov	r3, r4
 8001178:	1c5c      	adds	r4, r3, #1
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800117e:	1e73      	subs	r3, r6, #1
 8001180:	b29e      	uxth	r6, r3
 8001182:	2e00      	cmp	r6, #0
 8001184:	d1f7      	bne.n	8001176 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 8001186:	7823      	ldrb	r3, [r4, #0]
 8001188:	ea08 0303 	and.w	r3, r8, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3332      	adds	r3, #50	; 0x32
 8001194:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	80ba      	strh	r2, [r7, #4]
 800119c:	883a      	ldrh	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d8e0      	bhi.n	8001164 <LCD_FillRect+0x1ec>
				break;
 80011a2:	bf00      	nop
 80011a4:	e03d      	b.n	8001222 <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80011a6:	ea05 0308 	and.w	r3, r5, r8
 80011aa:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <LCD_FillRect+0x2c8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d003      	beq.n	80011bc <LCD_FillRect+0x244>
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d012      	beq.n	80011de <LCD_FillRect+0x266>
 80011b8:	e021      	b.n	80011fe <LCD_FillRect+0x286>
			case LCD_PRES:
 80011ba:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	432b      	orrs	r3, r5
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3332      	adds	r3, #50	; 0x32
 80011cc:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	80ba      	strh	r2, [r7, #4]
 80011d4:	883a      	ldrh	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d8ef      	bhi.n	80011ba <LCD_FillRect+0x242>
				break;
 80011da:	e022      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80011dc:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	406b      	eors	r3, r5
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3332      	adds	r3, #50	; 0x32
 80011ee:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	80ba      	strh	r2, [r7, #4]
 80011f6:	883a      	ldrh	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8ef      	bhi.n	80011dc <LCD_FillRect+0x264>
				break;
 80011fc:	e011      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 80011fe:	43eb      	mvns	r3, r5
 8001200:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	402b      	ands	r3, r5
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3332      	adds	r3, #50	; 0x32
 8001212:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	80ba      	strh	r2, [r7, #4]
 800121a:	883a      	ldrh	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f0      	bhi.n	8001202 <LCD_FillRect+0x28a>
				break;
 8001220:	bf00      	nop
		}
	}
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000
 8001234:	08017f7c 	.word	0x08017f7c
 8001238:	08017f84 	.word	0x08017f84
 800123c:	20000394 	.word	0x20000394
 8001240:	20028a84 	.word	0x20028a84

08001244 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	4604      	mov	r4, r0
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	4603      	mov	r3, r0
 8001258:	80bb      	strh	r3, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	807b      	strh	r3, [r7, #2]
 800125e:	4613      	mov	r3, r2
 8001260:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 800126c:	883a      	ldrh	r2, [r7, #0]
 800126e:	88bb      	ldrh	r3, [r7, #4]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001276:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	dd01      	ble.n	8001282 <LCD_Line+0x3e>
 800127e:	2301      	movs	r3, #1
 8001280:	e001      	b.n	8001286 <LCD_Line+0x42>
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 8001288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd01      	ble.n	8001294 <LCD_Line+0x50>
 8001290:	2301      	movs	r3, #1
 8001292:	e001      	b.n	8001298 <LCD_Line+0x54>
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 800129a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	88b9      	ldrh	r1, [r7, #4]
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fdd3 	bl	8000e54 <LCD_VLine>
		return;
 80012ae:	e08d      	b.n	80013cc <LCD_Line+0x188>
	}
	if (dY == 0) {
 80012b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	8879      	ldrh	r1, [r7, #2]
 80012bc:	88ba      	ldrh	r2, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd78 	bl	8000db4 <LCD_HLine>
		return;
 80012c4:	e082      	b.n	80013cc <LCD_Line+0x188>
	}

	dX *= dXsym;
 80012c6:	8aba      	ldrh	r2, [r7, #20]
 80012c8:	8a3b      	ldrh	r3, [r7, #16]
 80012ca:	fb12 f303 	smulbb	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80012d2:	8a7a      	ldrh	r2, [r7, #18]
 80012d4:	89fb      	ldrh	r3, [r7, #14]
 80012d6:	fb12 f303 	smulbb	r3, r2, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80012de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 80012e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 80012ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	db30      	blt.n	800135c <LCD_Line+0x118>
		di = dY2 - dX;
 80012fa:	897a      	ldrh	r2, [r7, #10]
 80012fc:	8abb      	ldrh	r3, [r7, #20]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b29b      	uxth	r3, r3
 8001302:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001304:	e023      	b.n	800134e <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fbab 	bl	8000a6c <LCD_Pixel>
			X1 += dXsym;
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	8a3b      	ldrh	r3, [r7, #16]
 800131a:	4413      	add	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 8001320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001324:	2b00      	cmp	r3, #0
 8001326:	da05      	bge.n	8001334 <LCD_Line+0xf0>
				di += dY2;
 8001328:	8afa      	ldrh	r2, [r7, #22]
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	4413      	add	r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	82fb      	strh	r3, [r7, #22]
 8001332:	e00c      	b.n	800134e <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001334:	897a      	ldrh	r2, [r7, #10]
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001344:	88ba      	ldrh	r2, [r7, #4]
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800134e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001352:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001356:	429a      	cmp	r2, r3
 8001358:	d1d5      	bne.n	8001306 <LCD_Line+0xc2>
 800135a:	e02f      	b.n	80013bc <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 800135c:	89ba      	ldrh	r2, [r7, #12]
 800135e:	8a7b      	ldrh	r3, [r7, #18]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001366:	e023      	b.n	80013b0 <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fb7a 	bl	8000a6c <LCD_Pixel>
			Y1 += dYsym;
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	4413      	add	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 8001382:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da05      	bge.n	8001396 <LCD_Line+0x152>
				di += dX2;
 800138a:	8afa      	ldrh	r2, [r7, #22]
 800138c:	89bb      	ldrh	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	82fb      	strh	r3, [r7, #22]
 8001394:	e00c      	b.n	80013b0 <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 8001396:	89ba      	ldrh	r2, [r7, #12]
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	8a3b      	ldrh	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80013b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d1d5      	bne.n	8001368 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80013bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb50 	bl	8000a6c <LCD_Pixel>
}
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}

080013d2 <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4603      	mov	r3, r0
 80013dc:	81fb      	strh	r3, [r7, #14]
 80013de:	460b      	mov	r3, r1
 80013e0:	81bb      	strh	r3, [r7, #12]
 80013e2:	4613      	mov	r3, r2
 80013e4:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	7afa      	ldrb	r2, [r7, #11]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d304      	bcc.n	80013fa <LCD_PutChar+0x28>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	795b      	ldrb	r3, [r3, #5]
 80013f4:	7afa      	ldrb	r2, [r7, #11]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d902      	bls.n	8001400 <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	7912      	ldrb	r2, [r2, #4]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	7892      	ldrb	r2, [r2, #2]
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	3307      	adds	r3, #7
 8001416:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d177      	bne.n	8001510 <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d829      	bhi.n	800147c <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800142c:	e01e      	b.n	800146c <LCD_PutChar+0x9a>
				pY = Y;
 800142e:	89bb      	ldrh	r3, [r7, #12]
 8001430:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	617a      	str	r2, [r7, #20]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 800143c:	e010      	b.n	8001460 <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800143e:	7efb      	ldrb	r3, [r7, #27]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001448:	8bfb      	ldrh	r3, [r7, #30]
 800144a:	8bba      	ldrh	r2, [r7, #28]
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb0c 	bl	8000a6c <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001454:	7efb      	ldrb	r3, [r7, #27]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	76fb      	strb	r3, [r7, #27]
					pY++;
 800145a:	8bbb      	ldrh	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1eb      	bne.n	800143e <LCD_PutChar+0x6c>
				}
				pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800146c:	8bfa      	ldrh	r2, [r7, #30]
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	7809      	ldrb	r1, [r1, #0]
 8001474:	440b      	add	r3, r1
 8001476:	429a      	cmp	r2, r3
 8001478:	dbd9      	blt.n	800142e <LCD_PutChar+0x5c>
 800147a:	e0c0      	b.n	80015fe <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001480:	e03e      	b.n	8001500 <LCD_PutChar+0x12e>
				pY = Y;
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001486:	e031      	b.n	80014ec <LCD_PutChar+0x11a>
					bL = 8;
 8001488:	2308      	movs	r3, #8
 800148a:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	617a      	str	r2, [r7, #20]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 8001496:	7efb      	ldrb	r3, [r7, #27]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d022      	beq.n	80014e2 <LCD_PutChar+0x110>
						while (bL) {
 800149c:	e01d      	b.n	80014da <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 800149e:	7efb      	ldrb	r3, [r7, #27]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80014a8:	8bfb      	ldrh	r3, [r7, #30]
 80014aa:	8bba      	ldrh	r2, [r7, #28]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fadc 	bl	8000a6c <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014b4:	7efb      	ldrb	r3, [r7, #27]
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014ba:	7efb      	ldrb	r3, [r7, #27]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <LCD_PutChar+0xfc>
								pY++;
 80014c0:	8bbb      	ldrh	r3, [r7, #28]
 80014c2:	3301      	adds	r3, #1
 80014c4:	83bb      	strh	r3, [r7, #28]
								bL--;
 80014c6:	7ebb      	ldrb	r3, [r7, #26]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e005      	b.n	80014da <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80014ce:	7ebb      	ldrb	r3, [r7, #26]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	8bbb      	ldrh	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	83bb      	strh	r3, [r7, #28]
								break;
 80014d8:	e008      	b.n	80014ec <LCD_PutChar+0x11a>
						while (bL) {
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1de      	bne.n	800149e <LCD_PutChar+0xcc>
 80014e0:	e004      	b.n	80014ec <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80014e2:	7ebb      	ldrb	r3, [r7, #26]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	8bbb      	ldrh	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80014ec:	8bba      	ldrh	r2, [r7, #28]
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	7849      	ldrb	r1, [r1, #1]
 80014f4:	440b      	add	r3, r1
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbc6      	blt.n	8001488 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 80014fa:	8bfb      	ldrh	r3, [r7, #30]
 80014fc:	3301      	adds	r3, #1
 80014fe:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001500:	8bfa      	ldrh	r2, [r7, #30]
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	7809      	ldrb	r1, [r1, #0]
 8001508:	440b      	add	r3, r1
 800150a:	429a      	cmp	r2, r3
 800150c:	dbb9      	blt.n	8001482 <LCD_PutChar+0xb0>
 800150e:	e076      	b.n	80015fe <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d829      	bhi.n	800156c <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001518:	89bb      	ldrh	r3, [r7, #12]
 800151a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800151c:	e01e      	b.n	800155c <LCD_PutChar+0x18a>
				pX = X;
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	617a      	str	r2, [r7, #20]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 800152c:	e010      	b.n	8001550 <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800152e:	7efb      	ldrb	r3, [r7, #27]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001538:	8bfb      	ldrh	r3, [r7, #30]
 800153a:	8bba      	ldrh	r2, [r7, #28]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fa94 	bl	8000a6c <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001544:	7efb      	ldrb	r3, [r7, #27]
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	76fb      	strb	r3, [r7, #27]
					pX++;
 800154a:	8bfb      	ldrh	r3, [r7, #30]
 800154c:	3301      	adds	r3, #1
 800154e:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 8001550:	7efb      	ldrb	r3, [r7, #27]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1eb      	bne.n	800152e <LCD_PutChar+0x15c>
				}
				pY++;
 8001556:	8bbb      	ldrh	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800155c:	8bba      	ldrh	r2, [r7, #28]
 800155e:	89bb      	ldrh	r3, [r7, #12]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	7849      	ldrb	r1, [r1, #1]
 8001564:	440b      	add	r3, r1
 8001566:	429a      	cmp	r2, r3
 8001568:	dbd9      	blt.n	800151e <LCD_PutChar+0x14c>
 800156a:	e048      	b.n	80015fe <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001570:	e03e      	b.n	80015f0 <LCD_PutChar+0x21e>
				pX = X;
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001576:	e031      	b.n	80015dc <LCD_PutChar+0x20a>
					bL = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	617a      	str	r2, [r7, #20]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <LCD_PutChar+0x200>
						while (bL) {
 800158c:	e01d      	b.n	80015ca <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 800158e:	7efb      	ldrb	r3, [r7, #27]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 8001598:	8bfb      	ldrh	r3, [r7, #30]
 800159a:	8bba      	ldrh	r2, [r7, #28]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fa64 	bl	8000a6c <LCD_Pixel>
							}
							tmpCh >>= 1;
 80015a4:	7efb      	ldrb	r3, [r7, #27]
 80015a6:	085b      	lsrs	r3, r3, #1
 80015a8:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80015aa:	7efb      	ldrb	r3, [r7, #27]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <LCD_PutChar+0x1ec>
								pX++;
 80015b0:	8bfb      	ldrh	r3, [r7, #30]
 80015b2:	3301      	adds	r3, #1
 80015b4:	83fb      	strh	r3, [r7, #30]
								bL--;
 80015b6:	7ebb      	ldrb	r3, [r7, #26]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	76bb      	strb	r3, [r7, #26]
 80015bc:	e005      	b.n	80015ca <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80015be:	7ebb      	ldrb	r3, [r7, #26]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	8bfb      	ldrh	r3, [r7, #30]
 80015c4:	4413      	add	r3, r2
 80015c6:	83fb      	strh	r3, [r7, #30]
								break;
 80015c8:	e008      	b.n	80015dc <LCD_PutChar+0x20a>
						while (bL) {
 80015ca:	7ebb      	ldrb	r3, [r7, #26]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1de      	bne.n	800158e <LCD_PutChar+0x1bc>
 80015d0:	e004      	b.n	80015dc <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80015d2:	7ebb      	ldrb	r3, [r7, #26]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	8bfb      	ldrh	r3, [r7, #30]
 80015d8:	4413      	add	r3, r2
 80015da:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80015dc:	8bfa      	ldrh	r2, [r7, #30]
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	7809      	ldrb	r1, [r1, #0]
 80015e4:	440b      	add	r3, r1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbc6      	blt.n	8001578 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 80015ea:	8bbb      	ldrh	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 80015f0:	8bba      	ldrh	r2, [r7, #28]
 80015f2:	89bb      	ldrh	r3, [r7, #12]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	7849      	ldrb	r1, [r1, #1]
 80015f8:	440b      	add	r3, r1
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbb9      	blt.n	8001572 <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	b2db      	uxtb	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4603      	mov	r3, r0
 800161c:	81fb      	strh	r3, [r7, #14]
 800161e:	460b      	mov	r3, r1
 8001620:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <LCD_PutStr+0x6c>)
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	b29b      	uxth	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001638:	e011      	b.n	800165e <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	89b9      	ldrh	r1, [r7, #12]
 8001644:	8af8      	ldrh	r0, [r7, #22]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f7ff fec3 	bl	80013d2 <LCD_PutChar>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	4413      	add	r3, r2
 8001654:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001656:	8afa      	ldrh	r2, [r7, #22]
 8001658:	8abb      	ldrh	r3, [r7, #20]
 800165a:	429a      	cmp	r2, r3
 800165c:	d804      	bhi.n	8001668 <LCD_PutStr+0x58>
	while (*str) {
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e9      	bne.n	800163a <LCD_PutStr+0x2a>
 8001666:	e000      	b.n	800166a <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001668:	bf00      	nop
	}

	return (pX - X);
 800166a:	8afa      	ldrh	r2, [r7, #22]
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b29b      	uxth	r3, r3
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20028a86 	.word	0x20028a86

08001680 <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4603      	mov	r3, r0
 800168c:	81fb      	strh	r3, [r7, #14]
 800168e:	460b      	mov	r3, r1
 8001690:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	627a      	str	r2, [r7, #36]	; 0x24
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da05      	bge.n	80016be <LCD_PutInt+0x3e>
		neg = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	425b      	negs	r3, r3
 80016bc:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <LCD_PutInt+0xc8>)
 80016c2:	fb83 1302 	smull	r1, r3, r3, r2
 80016c6:	1099      	asrs	r1, r3, #2
 80016c8:	17d3      	asrs	r3, r2, #31
 80016ca:	1ac9      	subs	r1, r1, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	1ad1      	subs	r1, r2, r3
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1c59      	adds	r1, r3, #1
 80016dc:	6279      	str	r1, [r7, #36]	; 0x24
 80016de:	3230      	adds	r2, #48	; 0x30
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <LCD_PutInt+0xc8>)
 80016e8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ec:	1092      	asrs	r2, r2, #2
 80016ee:	17db      	asrs	r3, r3, #31
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e1      	bne.n	80016be <LCD_PutInt+0x3e>
	if (neg) {
 80016fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	222d      	movs	r2, #45	; 0x2d
 800170a:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 800170c:	e00b      	b.n	8001726 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	89b9      	ldrh	r1, [r7, #12]
 8001714:	8c38      	ldrh	r0, [r7, #32]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f7ff fe5b 	bl	80013d2 <LCD_PutChar>
 800171c:	4603      	mov	r3, r0
 800171e:	b29a      	uxth	r2, r3
 8001720:	8c3b      	ldrh	r3, [r7, #32]
 8001722:	4413      	add	r3, r2
 8001724:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3b01      	subs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ec      	bne.n	800170e <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001734:	8c3b      	ldrh	r3, [r7, #32]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	66666667 	.word	0x66666667

0800174c <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b08b      	sub	sp, #44	; 0x2c
 8001750:	af00      	add	r7, sp, #0
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	460b      	mov	r3, r1
 800175c:	81bb      	strh	r3, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	627a      	str	r2, [r7, #36]	; 0x24
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	da05      	bge.n	8001794 <LCD_PutIntF+0x48>
		neg = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	425b      	negs	r3, r3
 8001792:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <LCD_PutIntF+0x160>)
 8001798:	fb83 1302 	smull	r1, r3, r3, r2
 800179c:	1099      	asrs	r1, r3, #2
 800179e:	17d3      	asrs	r3, r2, #31
 80017a0:	1ac9      	subs	r1, r1, r3
 80017a2:	460b      	mov	r3, r1
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	1ad1      	subs	r1, r2, r3
 80017ac:	b2ca      	uxtb	r2, r1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	1c59      	adds	r1, r3, #1
 80017b2:	6279      	str	r1, [r7, #36]	; 0x24
 80017b4:	3230      	adds	r2, #48	; 0x30
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
		strLen++;
 80017ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017be:	3301      	adds	r3, #1
 80017c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4a39      	ldr	r2, [pc, #228]	; (80018ac <LCD_PutIntF+0x160>)
 80017c8:	fb82 1203 	smull	r1, r2, r2, r3
 80017cc:	1092      	asrs	r2, r2, #2
 80017ce:	17db      	asrs	r3, r3, #31
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1dc      	bne.n	8001794 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80017da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d80f      	bhi.n	8001804 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 80017e4:	e009      	b.n	80017fa <LCD_PutIntF+0xae>
			*pStr++ = '0';
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	627a      	str	r2, [r7, #36]	; 0x24
 80017ec:	2230      	movs	r2, #48	; 0x30
 80017ee:	701a      	strb	r2, [r3, #0]
			strLen++;
 80017f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017f4:	3301      	adds	r3, #1
 80017f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 80017fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	429a      	cmp	r2, r3
 8001802:	d9f0      	bls.n	80017e6 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03d      	beq.n	8001888 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	627a      	str	r2, [r7, #36]	; 0x24
 8001812:	222d      	movs	r2, #45	; 0x2d
 8001814:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001816:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800181a:	3301      	adds	r3, #1
 800181c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 8001820:	e032      	b.n	8001888 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	89b9      	ldrh	r1, [r7, #12]
 8001828:	8c38      	ldrh	r0, [r7, #32]
 800182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182c:	f7ff fdd1 	bl	80013d2 <LCD_PutChar>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	8c3b      	ldrh	r3, [r7, #32]
 8001836:	4413      	add	r3, r2
 8001838:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d023      	beq.n	8001888 <LCD_PutIntF+0x13c>
 8001840:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001844:	3b01      	subs	r3, #1
 8001846:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800184a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	429a      	cmp	r2, r3
 8001852:	d119      	bne.n	8001888 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	b29a      	uxth	r2, r3
 800185a:	89bb      	ldrh	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b02      	subs	r3, #2
 8001862:	b299      	uxth	r1, r3
 8001864:	8c3b      	ldrh	r3, [r7, #32]
 8001866:	3301      	adds	r3, #1
 8001868:	b29c      	uxth	r4, r3
 800186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	b29a      	uxth	r2, r3
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	8c38      	ldrh	r0, [r7, #32]
 800187c:	4622      	mov	r2, r4
 800187e:	f7ff fb39 	bl	8000ef4 <LCD_Rect>
			pX += 3;
 8001882:	8c3b      	ldrh	r3, [r7, #32]
 8001884:	3303      	adds	r3, #3
 8001886:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	3b01      	subs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1c5      	bne.n	8001822 <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 8001896:	8c3b      	ldrh	r3, [r7, #32]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b2db      	uxtb	r3, r3
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	372c      	adds	r7, #44	; 0x2c
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	66666667 	.word	0x66666667

080018b0 <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	int i=X;
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80018d2:	88bb      	ldrh	r3, [r7, #4]
 80018d4:	617b      	str	r3, [r7, #20]
	int size=S;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80018da:	883b      	ldrh	r3, [r7, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <drawUpDownArrow+0x3a>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d11f      	bne.n	800192a <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b298      	uxth	r0, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	b299      	uxth	r1, r3
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	b29a      	uxth	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b29c      	uxth	r4, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	b29b      	uxth	r3, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	4622      	mov	r2, r4
 8001924:	f7ff fb28 	bl	8000f78 <LCD_FillRect>
 8001928:	e01e      	b.n	8001968 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	b29a      	uxth	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	b29b      	uxth	r3, r3
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	b29b      	uxth	r3, r3
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b298      	uxth	r0, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	b29a      	uxth	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	b29b      	uxth	r3, r3
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b299      	uxth	r1, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29c      	uxth	r4, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	b29a      	uxth	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	4622      	mov	r2, r4
 8001964:	f7ff fb08 	bl	8000f78 <LCD_FillRect>
	}
	switch(direction)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b03      	cmp	r3, #3
 800196c:	f200 8234 	bhi.w	8001dd8 <drawUpDownArrow+0x528>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <drawUpDownArrow+0xc8>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	08001a9f 	.word	0x08001a9f
 8001980:	08001bb5 	.word	0x08001bb5
 8001984:	08001cc7 	.word	0x08001cc7
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	e03d      	b.n	8001a0a <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	b29a      	uxth	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	b29b      	uxth	r3, r3
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29a      	uxth	r2, r3
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b218      	sxth	r0, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b219      	sxth	r1, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	b29b      	uxth	r3, r3
 80019de:	b21c      	sxth	r4, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4622      	mov	r2, r4
 8001a00:	f7ff fc20 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbbc      	blt.n	800198e <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b218      	sxth	r0, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b219      	sxth	r1, r3
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	b21c      	sxth	r4, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4622      	mov	r2, r4
 8001a54:	f7ff fbf6 	bl	8001244 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b218      	sxth	r0, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b219      	sxth	r1, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	b21c      	sxth	r4, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4622      	mov	r2, r4
 8001a98:	f7ff fbd4 	bl	8001244 <LCD_Line>
		break;
 8001a9c:	e19c      	b.n	8001dd8 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e03d      	b.n	8001b20 <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b218      	sxth	r0, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b219      	sxth	r1, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21c      	sxth	r4, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4622      	mov	r2, r4
 8001b16:	f7ff fb95 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbbc      	blt.n	8001aa4 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b218      	sxth	r0, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b219      	sxth	r1, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	b21c      	sxth	r4, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	4622      	mov	r2, r4
 8001b6a:	f7ff fb6b 	bl	8001244 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b218      	sxth	r0, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b219      	sxth	r1, r3
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	b21c      	sxth	r4, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4622      	mov	r2, r4
 8001bae:	f7ff fb49 	bl	8001244 <LCD_Line>
		break;
 8001bb2:	e111      	b.n	8001dd8 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	e03d      	b.n	8001c36 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b218      	sxth	r0, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b219      	sxth	r1, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21c      	sxth	r4, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	f7ff fb0a 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	3301      	adds	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbbc      	blt.n	8001bba <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b218      	sxth	r0, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b219      	sxth	r1, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	f7ff fae1 	bl	8001244 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b218      	sxth	r0, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b219      	sxth	r1, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	f7ff fac0 	bl	8001244 <LCD_Line>
		break;
 8001cc4:	e088      	b.n	8001dd8 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e03d      	b.n	8001d48 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b218      	sxth	r0, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	b219      	sxth	r1, r3
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b21c      	sxth	r4, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21b      	sxth	r3, r3
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	f7ff fa81 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbbc      	blt.n	8001ccc <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b218      	sxth	r0, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b219      	sxth	r1, r3
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	f7ff fa58 	bl	8001244 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b218      	sxth	r0, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b219      	sxth	r1, r3
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	f7ff fa37 	bl	8001244 <LCD_Line>
		break;
 8001dd6:	bf00      	nop
	}
	}

}
 8001dd8:	bf00      	nop
 8001dda:	3724      	adds	r7, #36	; 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}

08001de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 //static _Bool ON = 1;
 //static _Bool OFF = 0;
  HAL_StatusTypeDef Status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dea:	f007 fd3c 	bl	8009866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dee:	f000 f9a3 	bl	8002138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df2:	f000 ffe9 	bl	8002dc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001df6:	f000 ff95 	bl	8002d24 <MX_DMA_Init>
  MX_ADC1_Init();
 8001dfa:	f000 fa45 	bl	8002288 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001dfe:	f000 fb21 	bl	8002444 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001e02:	f000 fb9b 	bl	800253c <MX_ADC3_Init>
  MX_I2C1_Init();
 8001e06:	f000 fc31 	bl	800266c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e0a:	f000 fc6f 	bl	80026ec <MX_I2C2_Init>
  MX_I2C3_Init();
 8001e0e:	f000 fcad 	bl	800276c <MX_I2C3_Init>
  MX_I2C4_Init();
 8001e12:	f000 fced 	bl	80027f0 <MX_I2C4_Init>
  MX_RTC_Init();
 8001e16:	f000 fd2b 	bl	8002870 <MX_RTC_Init>
  MX_SPI4_Init();
 8001e1a:	f000 fd4f 	bl	80028bc <MX_SPI4_Init>
  MX_SPI5_Init();
 8001e1e:	f000 fd8b 	bl	8002938 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001e22:	f000 fdc7 	bl	80029b4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e26:	f000 fe3d 	bl	8002aa4 <MX_TIM5_Init>
  MX_UART4_Init();
 8001e2a:	f000 febd 	bl	8002ba8 <MX_UART4_Init>
  MX_UART5_Init();
 8001e2e:	f000 feeb 	bl	8002c08 <MX_UART5_Init>
  MX_UART7_Init();
 8001e32:	f000 ff19 	bl	8002c68 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001e36:	f000 ff47 	bl	8002cc8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001e3a:	f001 f99d 	bl	8003178 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8001e3e:	220c      	movs	r2, #12
 8001e40:	2100      	movs	r1, #0
 8001e42:	488a      	ldr	r0, [pc, #552]	; (800206c <main+0x28c>)
 8001e44:	f011 fa59 	bl	80132fa <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4988      	ldr	r1, [pc, #544]	; (8002070 <main+0x290>)
 8001e4e:	4889      	ldr	r0, [pc, #548]	; (8002074 <main+0x294>)
 8001e50:	f007 fede 	bl	8009c10 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <main+0x8a>
  {
  	  DevUI_Error_Handler("ADC1 Failed to start.", Status, 0, 0, true);
 8001e5a:	78f9      	ldrb	r1, [r7, #3]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	2200      	movs	r2, #0
 8001e64:	4884      	ldr	r0, [pc, #528]	; (8002078 <main+0x298>)
 8001e66:	f001 f94d 	bl	8003104 <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4983      	ldr	r1, [pc, #524]	; (800207c <main+0x29c>)
 8001e70:	4883      	ldr	r0, [pc, #524]	; (8002080 <main+0x2a0>)
 8001e72:	f007 fecd 	bl	8009c10 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <main+0xac>
  {
  	  DevUI_Error_Handler("ADC2 Failed to start.", Status, 0, 0, true);
 8001e7c:	78f9      	ldrb	r1, [r7, #3]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	2200      	movs	r2, #0
 8001e86:	487f      	ldr	r0, [pc, #508]	; (8002084 <main+0x2a4>)
 8001e88:	f001 f93c 	bl	8003104 <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	497d      	ldr	r1, [pc, #500]	; (8002088 <main+0x2a8>)
 8001e92:	487e      	ldr	r0, [pc, #504]	; (800208c <main+0x2ac>)
 8001e94:	f007 febc 	bl	8009c10 <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <main+0xce>
  {
  	  DevUI_Error_Handler("ADC3 Failed to start.", Status, 0, 0, true);
 8001e9e:	78f9      	ldrb	r1, [r7, #3]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4879      	ldr	r0, [pc, #484]	; (8002090 <main+0x2b0>)
 8001eaa:	f001 f92b 	bl	8003104 <DevUI_Error_Handler>
  }
   int x=1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]

   HAL_UART_Receive_DMA(&SPARE_UART, spare_Uart_RX_Buf, sizeof(spare_Uart_RX_Buf));
 8001eb2:	22c8      	movs	r2, #200	; 0xc8
 8001eb4:	4977      	ldr	r1, [pc, #476]	; (8002094 <main+0x2b4>)
 8001eb6:	4878      	ldr	r0, [pc, #480]	; (8002098 <main+0x2b8>)
 8001eb8:	f00d f930 	bl	800f11c <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&SOC_UART, soc_Uart_RX_Buf, sizeof(soc_Uart_RX_Buf));
 8001ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec0:	4976      	ldr	r1, [pc, #472]	; (800209c <main+0x2bc>)
 8001ec2:	4877      	ldr	r0, [pc, #476]	; (80020a0 <main+0x2c0>)
 8001ec4:	f00d f92a 	bl	800f11c <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&DEBUG_UART, debug_Uart_RX_Buf, sizeof(debug_Uart_RX_Buf));
 8001ec8:	22c8      	movs	r2, #200	; 0xc8
 8001eca:	4976      	ldr	r1, [pc, #472]	; (80020a4 <main+0x2c4>)
 8001ecc:	4876      	ldr	r0, [pc, #472]	; (80020a8 <main+0x2c8>)
 8001ece:	f00d f925 	bl	800f11c <HAL_UART_Receive_DMA>
//  winbondSPIDeviceIDRead(hspi5,(uint8_t*)spiDataRead);
//  //char buf[30];
//  spareUartTransmitRead("Lets see what comes out!");
//  x=0;

  configureLEDDriver();
 8001ed2:	f001 fc53 	bl	800377c <configureLEDDriver>
  
    setErrorLED(0,ON);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f001 fd01 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee2:	f007 fced 	bl	80098c0 <HAL_Delay>
    setErrorLED(1,OFF);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f001 fcf9 	bl	80038e0 <setErrorLED>
    setErrorLED(8,ON);
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2008      	movs	r0, #8
 8001ef2:	f001 fcf5 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efa:	f007 fce1 	bl	80098c0 <HAL_Delay>
    setErrorLED(8,OFF);
 8001efe:	2100      	movs	r1, #0
 8001f00:	2008      	movs	r0, #8
 8001f02:	f001 fced 	bl	80038e0 <setErrorLED>
    setErrorLED(9,ON);
 8001f06:	2101      	movs	r1, #1
 8001f08:	2009      	movs	r0, #9
 8001f0a:	f001 fce9 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f12:	f007 fcd5 	bl	80098c0 <HAL_Delay>
    setErrorLED(8,ON);
 8001f16:	2101      	movs	r1, #1
 8001f18:	2008      	movs	r0, #8
 8001f1a:	f001 fce1 	bl	80038e0 <setErrorLED>
    setErrorLED(9,ON);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2009      	movs	r0, #9
 8001f22:	f001 fcdd 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2a:	f007 fcc9 	bl	80098c0 <HAL_Delay>
    setErrorLED(9,OFF);
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2009      	movs	r0, #9
 8001f32:	f001 fcd5 	bl	80038e0 <setErrorLED>
//    EX_SW_OFF;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f36:	f00e f909 	bl	801014c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001f3a:	4a5c      	ldr	r2, [pc, #368]	; (80020ac <main+0x2cc>)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	485c      	ldr	r0, [pc, #368]	; (80020b0 <main+0x2d0>)
 8001f40:	f00e f96e 	bl	8010220 <osThreadNew>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <main+0x2d4>)
 8001f48:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	; (80020b8 <main+0x2d8>)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	485b      	ldr	r0, [pc, #364]	; (80020bc <main+0x2dc>)
 8001f50:	f00e f966 	bl	8010220 <osThreadNew>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <main+0x2e0>)
 8001f58:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <main+0x2e4>)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	485a      	ldr	r0, [pc, #360]	; (80020c8 <main+0x2e8>)
 8001f60:	f00e f95e 	bl	8010220 <osThreadNew>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b59      	ldr	r3, [pc, #356]	; (80020cc <main+0x2ec>)
 8001f68:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001f6a:	4a59      	ldr	r2, [pc, #356]	; (80020d0 <main+0x2f0>)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4859      	ldr	r0, [pc, #356]	; (80020d4 <main+0x2f4>)
 8001f70:	f00e f956 	bl	8010220 <osThreadNew>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <main+0x2f8>)
 8001f78:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001f7a:	4a58      	ldr	r2, [pc, #352]	; (80020dc <main+0x2fc>)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4858      	ldr	r0, [pc, #352]	; (80020e0 <main+0x300>)
 8001f80:	f00e f94e 	bl	8010220 <osThreadNew>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <main+0x304>)
 8001f88:	601a      	str	r2, [r3, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <main+0x308>)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4857      	ldr	r0, [pc, #348]	; (80020ec <main+0x30c>)
 8001f90:	f00e f946 	bl	8010220 <osThreadNew>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <main+0x310>)
 8001f98:	601a      	str	r2, [r3, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 8001f9a:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <main+0x314>)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4856      	ldr	r0, [pc, #344]	; (80020f8 <main+0x318>)
 8001fa0:	f00e f93e 	bl	8010220 <osThreadNew>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b55      	ldr	r3, [pc, #340]	; (80020fc <main+0x31c>)
 8001fa8:	601a      	str	r2, [r3, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 8001faa:	4a55      	ldr	r2, [pc, #340]	; (8002100 <main+0x320>)
 8001fac:	2100      	movs	r1, #0
 8001fae:	4855      	ldr	r0, [pc, #340]	; (8002104 <main+0x324>)
 8001fb0:	f00e f936 	bl	8010220 <osThreadNew>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <main+0x328>)
 8001fb8:	601a      	str	r2, [r3, #0]

  /* creation of socUart */
  socUartHandle = osThreadNew(startSocUart, NULL, &socUart_attributes);
 8001fba:	4a54      	ldr	r2, [pc, #336]	; (800210c <main+0x32c>)
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4854      	ldr	r0, [pc, #336]	; (8002110 <main+0x330>)
 8001fc0:	f00e f92e 	bl	8010220 <osThreadNew>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b53      	ldr	r3, [pc, #332]	; (8002114 <main+0x334>)
 8001fc8:	601a      	str	r2, [r3, #0]

  /* creation of debugUart */
  debugUartHandle = osThreadNew(startDebugUart, NULL, &debugUart_attributes);
 8001fca:	4a53      	ldr	r2, [pc, #332]	; (8002118 <main+0x338>)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4853      	ldr	r0, [pc, #332]	; (800211c <main+0x33c>)
 8001fd0:	f00e f926 	bl	8010220 <osThreadNew>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b52      	ldr	r3, [pc, #328]	; (8002120 <main+0x340>)
 8001fd8:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Fault_Events */
  Fault_EventsHandle = osEventFlagsNew(&Fault_Events_attributes);
 8001fda:	4852      	ldr	r0, [pc, #328]	; (8002124 <main+0x344>)
 8001fdc:	f00e f9fa 	bl	80103d4 <osEventFlagsNew>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b51      	ldr	r3, [pc, #324]	; (8002128 <main+0x348>)
 8001fe4:	601a      	str	r2, [r3, #0]
	   bit 8: fault 9
	   bit 9: standard boot
	   bit 10: edl boot
	   bit 11: uefi boot
   */
  if (Fault_EventsHandle == NULL)
 8001fe6:	4b50      	ldr	r3, [pc, #320]	; (8002128 <main+0x348>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <main+0x220>
  {
	  // Event flags object not created, handle failure.
	  DevUI_Error_Handler("Faults Event Flag could not be created.\r\n",HAL_ERROR,0,0,true);
 8001fee:	2301      	movs	r3, #1
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	484c      	ldr	r0, [pc, #304]	; (800212c <main+0x34c>)
 8001ffa:	f001 f883 	bl	8003104 <DevUI_Error_Handler>
 8001ffe:	e006      	b.n	800200e <main+0x22e>
  }
  else
  {
	  // clear all event flags
	  osEventFlagsClear(Fault_EventsHandle, 0xFFFF);
 8002000:	4b49      	ldr	r3, [pc, #292]	; (8002128 <main+0x348>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002008:	4618      	mov	r0, r3
 800200a:	f00e fa35 	bl	8010478 <osEventFlagsClear>
  }
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800200e:	f00e f8d1 	bl	80101b4 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8002012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002016:	f007 fc53 	bl	80098c0 <HAL_Delay>
	  if (!x) {
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d112      	bne.n	8002046 <main+0x266>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002026:	4842      	ldr	r0, [pc, #264]	; (8002130 <main+0x350>)
 8002028:	f009 f8c4 	bl	800b1b4 <HAL_GPIO_WritePin>
		  x=1;
 800202c:	2301      	movs	r3, #1
 800202e:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	2110      	movs	r1, #16
 8002034:	483f      	ldr	r0, [pc, #252]	; (8002134 <main+0x354>)
 8002036:	f009 f8bd 	bl	800b1b4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	2110      	movs	r1, #16
 800203e:	483d      	ldr	r0, [pc, #244]	; (8002134 <main+0x354>)
 8002040:	f009 f8b8 	bl	800b1b4 <HAL_GPIO_WritePin>
 8002044:	e7e5      	b.n	8002012 <main+0x232>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204c:	4838      	ldr	r0, [pc, #224]	; (8002130 <main+0x350>)
 800204e:	f009 f8b1 	bl	800b1b4 <HAL_GPIO_WritePin>
		  x=0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	2110      	movs	r1, #16
 800205a:	4836      	ldr	r0, [pc, #216]	; (8002134 <main+0x354>)
 800205c:	f009 f8aa 	bl	800b1b4 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	4833      	ldr	r0, [pc, #204]	; (8002134 <main+0x354>)
 8002066:	f009 f8a5 	bl	800b1b4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800206a:	e7d2      	b.n	8002012 <main+0x232>
 800206c:	2002e850 	.word	0x2002e850
 8002070:	20029690 	.word	0x20029690
 8002074:	2002be24 	.word	0x2002be24
 8002078:	080175c4 	.word	0x080175c4
 800207c:	2002e8e8 	.word	0x2002e8e8
 8002080:	20028d20 	.word	0x20028d20
 8002084:	080175dc 	.word	0x080175dc
 8002088:	2002c140 	.word	0x2002c140
 800208c:	2002bed0 	.word	0x2002bed0
 8002090:	080175f4 	.word	0x080175f4
 8002094:	2002bf18 	.word	0x2002bf18
 8002098:	2002e864 	.word	0x2002e864
 800209c:	200292a8 	.word	0x200292a8
 80020a0:	2002bda4 	.word	0x2002bda4
 80020a4:	2002c078 	.word	0x2002c078
 80020a8:	20028be8 	.word	0x20028be8
 80020ac:	08017f8c 	.word	0x08017f8c
 80020b0:	0800445d 	.word	0x0800445d
 80020b4:	2002e8e4 	.word	0x2002e8e4
 80020b8:	08017fb0 	.word	0x08017fb0
 80020bc:	0800447d 	.word	0x0800447d
 80020c0:	200310bc 	.word	0x200310bc
 80020c4:	08017fd4 	.word	0x08017fd4
 80020c8:	08004559 	.word	0x08004559
 80020cc:	200310b8 	.word	0x200310b8
 80020d0:	08017ff8 	.word	0x08017ff8
 80020d4:	080045f9 	.word	0x080045f9
 80020d8:	2002becc 	.word	0x2002becc
 80020dc:	0801801c 	.word	0x0801801c
 80020e0:	08004725 	.word	0x08004725
 80020e4:	2002c074 	.word	0x2002c074
 80020e8:	08018040 	.word	0x08018040
 80020ec:	080048a5 	.word	0x080048a5
 80020f0:	20028d10 	.word	0x20028d10
 80020f4:	08018064 	.word	0x08018064
 80020f8:	08004b5d 	.word	0x08004b5d
 80020fc:	2002e85c 	.word	0x2002e85c
 8002100:	08018088 	.word	0x08018088
 8002104:	08004d6d 	.word	0x08004d6d
 8002108:	2002bda0 	.word	0x2002bda0
 800210c:	080180ac 	.word	0x080180ac
 8002110:	08005181 	.word	0x08005181
 8002114:	2002e860 	.word	0x2002e860
 8002118:	080180d0 	.word	0x080180d0
 800211c:	08005195 	.word	0x08005195
 8002120:	2002bfe0 	.word	0x2002bfe0
 8002124:	080180f4 	.word	0x080180f4
 8002128:	20028c68 	.word	0x20028c68
 800212c:	0801760c 	.word	0x0801760c
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000

08002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0b8      	sub	sp, #224	; 0xe0
 800213c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002142:	2234      	movs	r2, #52	; 0x34
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f011 f8d7 	bl	80132fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	2290      	movs	r2, #144	; 0x90
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f011 f8c8 	bl	80132fa <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800216a:	f00a f94b 	bl	800c404 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <SystemClock_Config+0x144>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a42      	ldr	r2, [pc, #264]	; (800227c <SystemClock_Config+0x144>)
 8002174:	f023 0318 	bic.w	r3, r3, #24
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <SystemClock_Config+0x144>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a3f      	ldr	r2, [pc, #252]	; (800227c <SystemClock_Config+0x144>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <SystemClock_Config+0x144>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <SystemClock_Config+0x148>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800219a:	4a39      	ldr	r2, [pc, #228]	; (8002280 <SystemClock_Config+0x148>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <SystemClock_Config+0x148>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80021ae:	2305      	movs	r3, #5
 80021b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 80021d0:	230f      	movs	r3, #15
 80021d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80021d6:	2390      	movs	r3, #144	; 0x90
 80021d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80021e2:	2305      	movs	r3, #5
 80021e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00a f919 	bl	800c424 <HAL_RCC_OscConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021f8:	f003 f8c2 	bl	8005380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021fc:	230f      	movs	r3, #15
 80021fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800220e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800221e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002222:	2103      	movs	r1, #3
 8002224:	4618      	mov	r0, r3
 8002226:	f00a fbab 	bl	800c980 <HAL_RCC_ClockConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002230:	f003 f8a6 	bl	8005380 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <SystemClock_Config+0x14c>)
 8002236:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800223e:	2300      	movs	r3, #0
 8002240:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002242:	2300      	movs	r3, #0
 8002244:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002246:	2300      	movs	r3, #0
 8002248:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800224a:	2300      	movs	r3, #0
 800224c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800224e:	2300      	movs	r3, #0
 8002250:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002252:	2300      	movs	r3, #0
 8002254:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002256:	2300      	movs	r3, #0
 8002258:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4618      	mov	r0, r3
 8002266:	f00a fd8f 	bl	800cd88 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002270:	f003 f886 	bl	8005380 <Error_Handler>
  }
}
 8002274:	bf00      	nop
 8002276:	37e0      	adds	r7, #224	; 0xe0
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	0023d620 	.word	0x0023d620

08002288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800228e:	463b      	mov	r3, r7
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800229c:	4a67      	ldr	r2, [pc, #412]	; (800243c <MX_ADC1_Init+0x1b4>)
 800229e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022ae:	4b62      	ldr	r3, [pc, #392]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ba:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c8:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022ca:	4a5d      	ldr	r2, [pc, #372]	; (8002440 <MX_ADC1_Init+0x1b8>)
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022d6:	220b      	movs	r2, #11
 80022d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e2:	4b55      	ldr	r3, [pc, #340]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e8:	4853      	ldr	r0, [pc, #332]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022ea:	f007 fb0b 	bl	8009904 <HAL_ADC_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022f4:	f003 f844 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022f8:	2303      	movs	r3, #3
 80022fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002300:	2307      	movs	r3, #7
 8002302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	484b      	ldr	r0, [pc, #300]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800230a:	f007 fdd7 	bl	8009ebc <HAL_ADC_ConfigChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002314:	f003 f834 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002318:	2304      	movs	r3, #4
 800231a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800231c:	2302      	movs	r3, #2
 800231e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4844      	ldr	r0, [pc, #272]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002326:	f007 fdc9 	bl	8009ebc <HAL_ADC_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002330:	f003 f826 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002334:	2305      	movs	r3, #5
 8002336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002338:	2303      	movs	r3, #3
 800233a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	4619      	mov	r1, r3
 8002340:	483d      	ldr	r0, [pc, #244]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002342:	f007 fdbb 	bl	8009ebc <HAL_ADC_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800234c:	f003 f818 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002350:	2306      	movs	r3, #6
 8002352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002354:	2304      	movs	r3, #4
 8002356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002358:	463b      	mov	r3, r7
 800235a:	4619      	mov	r1, r3
 800235c:	4836      	ldr	r0, [pc, #216]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800235e:	f007 fdad 	bl	8009ebc <HAL_ADC_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002368:	f003 f80a 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800236c:	2307      	movs	r3, #7
 800236e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002370:	2305      	movs	r3, #5
 8002372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	482f      	ldr	r0, [pc, #188]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800237a:	f007 fd9f 	bl	8009ebc <HAL_ADC_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002384:	f002 fffc 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002388:	2308      	movs	r3, #8
 800238a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800238c:	2306      	movs	r3, #6
 800238e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	4828      	ldr	r0, [pc, #160]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002396:	f007 fd91 	bl	8009ebc <HAL_ADC_ConfigChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80023a0:	f002 ffee 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80023a4:	2309      	movs	r3, #9
 80023a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80023a8:	2307      	movs	r3, #7
 80023aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	4821      	ldr	r0, [pc, #132]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80023b2:	f007 fd83 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80023bc:	f002 ffe0 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80023c0:	230a      	movs	r3, #10
 80023c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80023c4:	2308      	movs	r3, #8
 80023c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	4619      	mov	r1, r3
 80023cc:	481a      	ldr	r0, [pc, #104]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80023ce:	f007 fd75 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80023d8:	f002 ffd2 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023dc:	230b      	movs	r3, #11
 80023de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80023e0:	2309      	movs	r3, #9
 80023e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4813      	ldr	r0, [pc, #76]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80023ea:	f007 fd67 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80023f4:	f002 ffc4 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023f8:	230c      	movs	r3, #12
 80023fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80023fc:	230a      	movs	r3, #10
 80023fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002406:	f007 fd59 	bl	8009ebc <HAL_ADC_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002410:	f002 ffb6 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002414:	230d      	movs	r3, #13
 8002416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002418:	230b      	movs	r3, #11
 800241a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002422:	f007 fd4b 	bl	8009ebc <HAL_ADC_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800242c:	f002 ffa8 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2002be24 	.word	0x2002be24
 800243c:	40012000 	.word	0x40012000
 8002440:	0f000001 	.word	0x0f000001

08002444 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800244a:	463b      	mov	r3, r7
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002456:	4b36      	ldr	r3, [pc, #216]	; (8002530 <MX_ADC2_Init+0xec>)
 8002458:	4a36      	ldr	r2, [pc, #216]	; (8002534 <MX_ADC2_Init+0xf0>)
 800245a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <MX_ADC2_Init+0xec>)
 800245e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002462:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <MX_ADC2_Init+0xec>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <MX_ADC2_Init+0xec>)
 800246c:	2201      	movs	r2, #1
 800246e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <MX_ADC2_Init+0xec>)
 8002472:	2201      	movs	r2, #1
 8002474:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <MX_ADC2_Init+0xec>)
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <MX_ADC2_Init+0xec>)
 8002480:	2200      	movs	r2, #0
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <MX_ADC2_Init+0xec>)
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <MX_ADC2_Init+0xf4>)
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <MX_ADC2_Init+0xec>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <MX_ADC2_Init+0xec>)
 8002492:	2204      	movs	r2, #4
 8002494:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <MX_ADC2_Init+0xec>)
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <MX_ADC2_Init+0xec>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80024a4:	4822      	ldr	r0, [pc, #136]	; (8002530 <MX_ADC2_Init+0xec>)
 80024a6:	f007 fa2d 	bl	8009904 <HAL_ADC_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80024b0:	f002 ff66 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024bc:	2307      	movs	r3, #7
 80024be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	4619      	mov	r1, r3
 80024c4:	481a      	ldr	r0, [pc, #104]	; (8002530 <MX_ADC2_Init+0xec>)
 80024c6:	f007 fcf9 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80024d0:	f002 ff56 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024d8:	2302      	movs	r3, #2
 80024da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4813      	ldr	r0, [pc, #76]	; (8002530 <MX_ADC2_Init+0xec>)
 80024e2:	f007 fceb 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80024ec:	f002 ff48 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80024f0:	230e      	movs	r3, #14
 80024f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80024f4:	2303      	movs	r3, #3
 80024f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024f8:	463b      	mov	r3, r7
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_ADC2_Init+0xec>)
 80024fe:	f007 fcdd 	bl	8009ebc <HAL_ADC_ConfigChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002508:	f002 ff3a 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800250c:	230f      	movs	r3, #15
 800250e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002510:	2304      	movs	r3, #4
 8002512:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_ADC2_Init+0xec>)
 800251a:	f007 fccf 	bl	8009ebc <HAL_ADC_ConfigChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002524:	f002 ff2c 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20028d20 	.word	0x20028d20
 8002534:	40012100 	.word	0x40012100
 8002538:	0f000001 	.word	0x0f000001

0800253c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002542:	463b      	mov	r3, r7
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <MX_ADC3_Init+0x124>)
 8002550:	4a44      	ldr	r2, [pc, #272]	; (8002664 <MX_ADC3_Init+0x128>)
 8002552:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002554:	4b42      	ldr	r3, [pc, #264]	; (8002660 <MX_ADC3_Init+0x124>)
 8002556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800255a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <MX_ADC3_Init+0x124>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002562:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <MX_ADC3_Init+0x124>)
 8002564:	2201      	movs	r2, #1
 8002566:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <MX_ADC3_Init+0x124>)
 800256a:	2201      	movs	r2, #1
 800256c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <MX_ADC3_Init+0x124>)
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002576:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <MX_ADC3_Init+0x124>)
 8002578:	2200      	movs	r2, #0
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <MX_ADC3_Init+0x124>)
 800257e:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <MX_ADC3_Init+0x12c>)
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <MX_ADC3_Init+0x124>)
 8002584:	2200      	movs	r2, #0
 8002586:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <MX_ADC3_Init+0x124>)
 800258a:	2206      	movs	r2, #6
 800258c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <MX_ADC3_Init+0x124>)
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002596:	4b32      	ldr	r3, [pc, #200]	; (8002660 <MX_ADC3_Init+0x124>)
 8002598:	2201      	movs	r2, #1
 800259a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800259c:	4830      	ldr	r0, [pc, #192]	; (8002660 <MX_ADC3_Init+0x124>)
 800259e:	f007 f9b1 	bl	8009904 <HAL_ADC_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80025a8:	f002 feea 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80025ac:	2302      	movs	r3, #2
 80025ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80025b4:	2307      	movs	r3, #7
 80025b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025b8:	463b      	mov	r3, r7
 80025ba:	4619      	mov	r1, r3
 80025bc:	4828      	ldr	r0, [pc, #160]	; (8002660 <MX_ADC3_Init+0x124>)
 80025be:	f007 fc7d 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80025c8:	f002 feda 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025cc:	2304      	movs	r3, #4
 80025ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025d0:	2302      	movs	r3, #2
 80025d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025d4:	463b      	mov	r3, r7
 80025d6:	4619      	mov	r1, r3
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <MX_ADC3_Init+0x124>)
 80025da:	f007 fc6f 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80025e4:	f002 fecc 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025e8:	2305      	movs	r3, #5
 80025ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025ec:	2303      	movs	r3, #3
 80025ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025f0:	463b      	mov	r3, r7
 80025f2:	4619      	mov	r1, r3
 80025f4:	481a      	ldr	r0, [pc, #104]	; (8002660 <MX_ADC3_Init+0x124>)
 80025f6:	f007 fc61 	bl	8009ebc <HAL_ADC_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002600:	f002 febe 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002604:	2306      	movs	r3, #6
 8002606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002608:	2304      	movs	r3, #4
 800260a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800260c:	463b      	mov	r3, r7
 800260e:	4619      	mov	r1, r3
 8002610:	4813      	ldr	r0, [pc, #76]	; (8002660 <MX_ADC3_Init+0x124>)
 8002612:	f007 fc53 	bl	8009ebc <HAL_ADC_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800261c:	f002 feb0 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002620:	2307      	movs	r3, #7
 8002622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002624:	2305      	movs	r3, #5
 8002626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <MX_ADC3_Init+0x124>)
 800262e:	f007 fc45 	bl	8009ebc <HAL_ADC_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002638:	f002 fea2 	bl	8005380 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800263c:	2308      	movs	r3, #8
 800263e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002640:	2306      	movs	r3, #6
 8002642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002644:	463b      	mov	r3, r7
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_ADC3_Init+0x124>)
 800264a:	f007 fc37 	bl	8009ebc <HAL_ADC_ConfigChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002654:	f002 fe94 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2002bed0 	.word	0x2002bed0
 8002664:	40012200 	.word	0x40012200
 8002668:	0f000001 	.word	0x0f000001

0800266c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <MX_I2C1_Init+0x78>)
 8002674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <MX_I2C1_Init+0x7c>)
 800267a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <MX_I2C1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002684:	2201      	movs	r2, #1
 8002686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <MX_I2C1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_I2C1_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026a6:	480e      	ldr	r0, [pc, #56]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026a8:	f008 fddc 	bl	800b264 <HAL_I2C_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026b2:	f002 fe65 	bl	8005380 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4809      	ldr	r0, [pc, #36]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026ba:	f009 fca3 	bl	800c004 <HAL_I2CEx_ConfigAnalogFilter>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026c4:	f002 fe5c 	bl	8005380 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026c8:	2100      	movs	r1, #0
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026cc:	f009 fce5 	bl	800c09a <HAL_I2CEx_ConfigDigitalFilter>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026d6:	f002 fe53 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20028d68 	.word	0x20028d68
 80026e4:	40005400 	.word	0x40005400
 80026e8:	007074af 	.word	0x007074af

080026ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MX_I2C2_Init+0x74>)
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <MX_I2C2_Init+0x78>)
 80026f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_I2C2_Init+0x74>)
 80026f8:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <MX_I2C2_Init+0x7c>)
 80026fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <MX_I2C2_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_I2C2_Init+0x74>)
 8002704:	2201      	movs	r2, #1
 8002706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <MX_I2C2_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_I2C2_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MX_I2C2_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_I2C2_Init+0x74>)
 800271c:	2200      	movs	r2, #0
 800271e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_I2C2_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002726:	480e      	ldr	r0, [pc, #56]	; (8002760 <MX_I2C2_Init+0x74>)
 8002728:	f008 fd9c 	bl	800b264 <HAL_I2C_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002732:	f002 fe25 	bl	8005380 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002736:	2100      	movs	r1, #0
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <MX_I2C2_Init+0x74>)
 800273a:	f009 fc63 	bl	800c004 <HAL_I2CEx_ConfigAnalogFilter>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002744:	f002 fe1c 	bl	8005380 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002748:	2100      	movs	r1, #0
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_I2C2_Init+0x74>)
 800274c:	f009 fca5 	bl	800c09a <HAL_I2CEx_ConfigDigitalFilter>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002756:	f002 fe13 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200291b8 	.word	0x200291b8
 8002764:	40005800 	.word	0x40005800
 8002768:	007074af 	.word	0x007074af

0800276c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <MX_I2C3_Init+0x7c>)
 8002774:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <MX_I2C3_Init+0x80>)
 800277a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <MX_I2C3_Init+0x78>)
 800277e:	2298      	movs	r2, #152	; 0x98
 8002780:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002784:	2201      	movs	r2, #1
 8002786:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <MX_I2C3_Init+0x78>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <MX_I2C3_Init+0x78>)
 800279c:	2200      	movs	r2, #0
 800279e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027a6:	480f      	ldr	r0, [pc, #60]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027a8:	f008 fd5c 	bl	800b264 <HAL_I2C_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80027b2:	f002 fde5 	bl	8005380 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027b6:	2100      	movs	r1, #0
 80027b8:	480a      	ldr	r0, [pc, #40]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027ba:	f009 fc23 	bl	800c004 <HAL_I2CEx_ConfigAnalogFilter>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80027c4:	f002 fddc 	bl	8005380 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027cc:	f009 fc65 	bl	800c09a <HAL_I2CEx_ConfigDigitalFilter>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80027d6:	f002 fdd3 	bl	8005380 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80027da:	2004      	movs	r0, #4
 80027dc:	f009 fcaa 	bl	800c134 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20028b50 	.word	0x20028b50
 80027e8:	40005c00 	.word	0x40005c00
 80027ec:	100029fe 	.word	0x100029fe

080027f0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_I2C4_Init+0x74>)
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <MX_I2C4_Init+0x78>)
 80027f8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <MX_I2C4_Init+0x74>)
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <MX_I2C4_Init+0x7c>)
 80027fe:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_I2C4_Init+0x74>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <MX_I2C4_Init+0x74>)
 8002808:	2201      	movs	r2, #1
 800280a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_I2C4_Init+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_I2C4_Init+0x74>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <MX_I2C4_Init+0x74>)
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_I2C4_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_I2C4_Init+0x74>)
 8002826:	2200      	movs	r2, #0
 8002828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800282a:	480e      	ldr	r0, [pc, #56]	; (8002864 <MX_I2C4_Init+0x74>)
 800282c:	f008 fd1a 	bl	800b264 <HAL_I2C_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002836:	f002 fda3 	bl	8005380 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800283a:	2100      	movs	r1, #0
 800283c:	4809      	ldr	r0, [pc, #36]	; (8002864 <MX_I2C4_Init+0x74>)
 800283e:	f009 fbe1 	bl	800c004 <HAL_I2CEx_ConfigAnalogFilter>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002848:	f002 fd9a 	bl	8005380 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800284c:	2100      	movs	r1, #0
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_I2C4_Init+0x74>)
 8002850:	f009 fc23 	bl	800c09a <HAL_I2CEx_ConfigDigitalFilter>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800285a:	f002 fd91 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20028b9c 	.word	0x20028b9c
 8002868:	40006000 	.word	0x40006000
 800286c:	007074af 	.word	0x007074af

08002870 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <MX_RTC_Init+0x44>)
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <MX_RTC_Init+0x48>)
 8002878:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_RTC_Init+0x44>)
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <MX_RTC_Init+0x44>)
 8002882:	227f      	movs	r2, #127	; 0x7f
 8002884:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MX_RTC_Init+0x44>)
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MX_RTC_Init+0x44>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MX_RTC_Init+0x44>)
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_RTC_Init+0x44>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_RTC_Init+0x44>)
 80028a0:	f00a fe98 	bl	800d5d4 <HAL_RTC_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80028aa:	f002 fd69 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2002c054 	.word	0x2002c054
 80028b8:	40002800 	.word	0x40002800

080028bc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <MX_SPI4_Init+0x74>)
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <MX_SPI4_Init+0x78>)
 80028c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <MX_SPI4_Init+0x74>)
 80028c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028cc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <MX_SPI4_Init+0x74>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <MX_SPI4_Init+0x74>)
 80028d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028da:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <MX_SPI4_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_SPI4_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_SPI4_Init+0x74>)
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <MX_SPI4_Init+0x74>)
 80028f2:	2210      	movs	r2, #16
 80028f4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_SPI4_Init+0x74>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_SPI4_Init+0x74>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_SPI4_Init+0x74>)
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_SPI4_Init+0x74>)
 800290a:	2207      	movs	r2, #7
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_SPI4_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_SPI4_Init+0x74>)
 8002916:	2200      	movs	r2, #0
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_SPI4_Init+0x74>)
 800291c:	f00a ff02 	bl	800d724 <HAL_SPI_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002926:	f002 fd2b 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20028a8c 	.word	0x20028a8c
 8002934:	40013400 	.word	0x40013400

08002938 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <MX_SPI5_Init+0x74>)
 800293e:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <MX_SPI5_Init+0x78>)
 8002940:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_SPI5_Init+0x74>)
 8002944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002948:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_SPI5_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_SPI5_Init+0x74>)
 8002952:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002956:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_SPI5_Init+0x74>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_SPI5_Init+0x74>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_SPI5_Init+0x74>)
 8002966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800296a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <MX_SPI5_Init+0x74>)
 800296e:	2218      	movs	r2, #24
 8002970:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_SPI5_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_SPI5_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <MX_SPI5_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_SPI5_Init+0x74>)
 8002986:	2207      	movs	r2, #7
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <MX_SPI5_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_SPI5_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_SPI5_Init+0x74>)
 8002998:	f00a fec4 	bl	800d724 <HAL_SPI_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80029a2:	f002 fced 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20028c6c 	.word	0x20028c6c
 80029b0:	40015000 	.word	0x40015000

080029b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08e      	sub	sp, #56	; 0x38
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d4:	463b      	mov	r3, r7
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	611a      	str	r2, [r3, #16]
 80029e2:	615a      	str	r2, [r3, #20]
 80029e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029e8:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <MX_TIM4_Init+0xec>)
 80029ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a0c:	4823      	ldr	r0, [pc, #140]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a0e:	f00b fabd 	bl	800df8c <HAL_TIM_Base_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002a18:	f002 fcb2 	bl	8005380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a26:	4619      	mov	r1, r3
 8002a28:	481c      	ldr	r0, [pc, #112]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a2a:	f00b fd71 	bl	800e510 <HAL_TIM_ConfigClockSource>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002a34:	f002 fca4 	bl	8005380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a38:	4818      	ldr	r0, [pc, #96]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a3a:	f00b fafd 	bl	800e038 <HAL_TIM_PWM_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002a44:	f002 fc9c 	bl	8005380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	4619      	mov	r1, r3
 8002a56:	4811      	ldr	r0, [pc, #68]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a58:	f00c f9d4 	bl	800ee04 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002a62:	f002 fc8d 	bl	8005380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a66:	2360      	movs	r3, #96	; 0x60
 8002a68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a76:	463b      	mov	r3, r7
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a7e:	f00b fc2f 	bl	800e2e0 <HAL_TIM_PWM_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002a88:	f002 fc7a 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a8e:	f005 ffa7 	bl	80089e0 <HAL_TIM_MspPostInit>

}
 8002a92:	bf00      	nop
 8002a94:	3738      	adds	r7, #56	; 0x38
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20028cd0 	.word	0x20028cd0
 8002aa0:	40000800 	.word	0x40000800

08002aa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac4:	463b      	mov	r3, r7
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	615a      	str	r2, [r3, #20]
 8002ad4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ad6:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002ad8:	4a32      	ldr	r2, [pc, #200]	; (8002ba4 <MX_TIM5_Init+0x100>)
 8002ada:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002aea:	f04f 32ff 	mov.w	r2, #4294967295
 8002aee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002afc:	4828      	ldr	r0, [pc, #160]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002afe:	f00b fa45 	bl	800df8c <HAL_TIM_Base_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002b08:	f002 fc3a 	bl	8005380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	4619      	mov	r1, r3
 8002b18:	4821      	ldr	r0, [pc, #132]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b1a:	f00b fcf9 	bl	800e510 <HAL_TIM_ConfigClockSource>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002b24:	f002 fc2c 	bl	8005380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b28:	481d      	ldr	r0, [pc, #116]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b2a:	f00b fa85 	bl	800e038 <HAL_TIM_PWM_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002b34:	f002 fc24 	bl	8005380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	4619      	mov	r1, r3
 8002b46:	4816      	ldr	r0, [pc, #88]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b48:	f00c f95c 	bl	800ee04 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002b52:	f002 fc15 	bl	8005380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b56:	2360      	movs	r3, #96	; 0x60
 8002b58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b66:	463b      	mov	r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b6e:	f00b fbb7 	bl	800e2e0 <HAL_TIM_PWM_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b78:	f002 fc02 	bl	8005380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b84:	f00b fbac 	bl	800e2e0 <HAL_TIM_PWM_ConfigChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002b8e:	f002 fbf7 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b94:	f005 ff24 	bl	80089e0 <HAL_TIM_MspPostInit>

}
 8002b98:	bf00      	nop
 8002b9a:	3738      	adds	r7, #56	; 0x38
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20029268 	.word	0x20029268
 8002ba4:	40000c00 	.word	0x40000c00

08002ba8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <MX_UART4_Init+0x5c>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <MX_UART4_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_UART4_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bec:	f00c f9b6 	bl	800ef5c <HAL_UART_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002bf6:	f002 fbc3 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2002e864 	.word	0x2002e864
 8002c04:	40004c00 	.word	0x40004c00

08002c08 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c0e:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <MX_UART5_Init+0x5c>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c18:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c4c:	f00c f986 	bl	800ef5c <HAL_UART_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002c56:	f002 fb93 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2002bda4 	.word	0x2002bda4
 8002c64:	40005000 	.word	0x40005000

08002c68 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <MX_UART7_Init+0x5c>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c98:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002cae:	f00c f955 	bl	800ef5c <HAL_UART_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002cb8:	f002 fb62 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20028be8 	.word	0x20028be8
 8002cc4:	40007800 	.word	0x40007800

08002cc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002cd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cd6:	2206      	movs	r2, #6
 8002cd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cdc:	2202      	movs	r2, #2
 8002cde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ce8:	2202      	movs	r2, #2
 8002cea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d0c:	f009 fa32 	bl	800c174 <HAL_PCD_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002d16:	f002 fb33 	bl	8005380 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20028db4 	.word	0x20028db4

08002d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	200b      	movs	r0, #11
 8002d60:	f007 fc34 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d64:	200b      	movs	r0, #11
 8002d66:	f007 fc4d 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2105      	movs	r1, #5
 8002d6e:	200d      	movs	r0, #13
 8002d70:	f007 fc2c 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d74:	200d      	movs	r0, #13
 8002d76:	f007 fc45 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2105      	movs	r1, #5
 8002d7e:	200e      	movs	r0, #14
 8002d80:	f007 fc24 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d84:	200e      	movs	r0, #14
 8002d86:	f007 fc3d 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2105      	movs	r1, #5
 8002d8e:	2038      	movs	r0, #56	; 0x38
 8002d90:	f007 fc1c 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d94:	2038      	movs	r0, #56	; 0x38
 8002d96:	f007 fc35 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2105      	movs	r1, #5
 8002d9e:	2039      	movs	r0, #57	; 0x39
 8002da0:	f007 fc14 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002da4:	2039      	movs	r0, #57	; 0x39
 8002da6:	f007 fc2d 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2105      	movs	r1, #5
 8002dae:	203a      	movs	r0, #58	; 0x3a
 8002db0:	f007 fc0c 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002db4:	203a      	movs	r0, #58	; 0x3a
 8002db6:	f007 fc25 	bl	800a604 <HAL_NVIC_EnableIRQ>

}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b090      	sub	sp, #64	; 0x40
 8002dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dde:	4bb0      	ldr	r3, [pc, #704]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4aaf      	ldr	r2, [pc, #700]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4bad      	ldr	r3, [pc, #692]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002df6:	4baa      	ldr	r3, [pc, #680]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4aa9      	ldr	r2, [pc, #676]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4ba7      	ldr	r3, [pc, #668]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	4ba4      	ldr	r3, [pc, #656]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4aa3      	ldr	r2, [pc, #652]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4ba1      	ldr	r3, [pc, #644]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e26:	4b9e      	ldr	r3, [pc, #632]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a9d      	ldr	r2, [pc, #628]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b9b      	ldr	r3, [pc, #620]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	4b98      	ldr	r3, [pc, #608]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a97      	ldr	r2, [pc, #604]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b95      	ldr	r3, [pc, #596]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e56:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a91      	ldr	r2, [pc, #580]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e6e:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a8b      	ldr	r2, [pc, #556]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e86:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a85      	ldr	r2, [pc, #532]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e8c:	f043 0320 	orr.w	r3, r3, #32
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b83      	ldr	r3, [pc, #524]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9e:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a7f      	ldr	r2, [pc, #508]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b7d      	ldr	r3, [pc, #500]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a79      	ldr	r2, [pc, #484]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b77      	ldr	r3, [pc, #476]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ece:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a73      	ldr	r2, [pc, #460]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2110      	movs	r1, #16
 8002eea:	486e      	ldr	r0, [pc, #440]	; (80030a4 <MX_GPIO_Init+0x2dc>)
 8002eec:	f008 f962 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f244 012f 	movw	r1, #16431	; 0x402f
 8002ef6:	486c      	ldr	r0, [pc, #432]	; (80030a8 <MX_GPIO_Init+0x2e0>)
 8002ef8:	f008 f95c 	bl	800b1b4 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002efc:	2200      	movs	r2, #0
 8002efe:	f241 1150 	movw	r1, #4432	; 0x1150
 8002f02:	486a      	ldr	r0, [pc, #424]	; (80030ac <MX_GPIO_Init+0x2e4>)
 8002f04:	f008 f956 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	4868      	ldr	r0, [pc, #416]	; (80030b0 <MX_GPIO_Init+0x2e8>)
 8002f0e:	f008 f951 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002f12:	2200      	movs	r2, #0
 8002f14:	f243 013c 	movw	r1, #12348	; 0x303c
 8002f18:	4866      	ldr	r0, [pc, #408]	; (80030b4 <MX_GPIO_Init+0x2ec>)
 8002f1a:	f008 f94b 	bl	800b1b4 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f241 0104 	movw	r1, #4100	; 0x1004
 8002f24:	4864      	ldr	r0, [pc, #400]	; (80030b8 <MX_GPIO_Init+0x2f0>)
 8002f26:	f008 f945 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002f30:	4862      	ldr	r0, [pc, #392]	; (80030bc <MX_GPIO_Init+0x2f4>)
 8002f32:	f008 f93f 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	211b      	movs	r1, #27
 8002f3a:	4861      	ldr	r0, [pc, #388]	; (80030c0 <MX_GPIO_Init+0x2f8>)
 8002f3c:	f008 f93a 	bl	800b1b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002f40:	2310      	movs	r3, #16
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f54:	4619      	mov	r1, r3
 8002f56:	4853      	ldr	r0, [pc, #332]	; (80030a4 <MX_GPIO_Init+0x2dc>)
 8002f58:	f007 ff6a 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f60:	2300      	movs	r3, #0
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	484d      	ldr	r0, [pc, #308]	; (80030a4 <MX_GPIO_Init+0x2dc>)
 8002f70:	f007 ff5e 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002f74:	f244 032f 	movw	r3, #16431	; 0x402f
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4846      	ldr	r0, [pc, #280]	; (80030a8 <MX_GPIO_Init+0x2e0>)
 8002f8e:	f007 ff4f 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f96:	2300      	movs	r3, #0
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4845      	ldr	r0, [pc, #276]	; (80030bc <MX_GPIO_Init+0x2f4>)
 8002fa6:	f007 ff43 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002faa:	f241 1350 	movw	r3, #4432	; 0x1150
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	483a      	ldr	r0, [pc, #232]	; (80030ac <MX_GPIO_Init+0x2e4>)
 8002fc4:	f007 ff34 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002fc8:	23f0      	movs	r3, #240	; 0xf0
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <MX_GPIO_Init+0x2fc>)
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4835      	ldr	r0, [pc, #212]	; (80030b0 <MX_GPIO_Init+0x2e8>)
 8002fdc:	f007 ff28 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4834      	ldr	r0, [pc, #208]	; (80030c8 <MX_GPIO_Init+0x300>)
 8002ff6:	f007 ff1b 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002ffa:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300c:	4619      	mov	r1, r3
 800300e:	482f      	ldr	r0, [pc, #188]	; (80030cc <MX_GPIO_Init+0x304>)
 8003010:	f007 ff0e 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8003014:	2303      	movs	r3, #3
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003018:	2301      	movs	r3, #1
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003028:	4619      	mov	r1, r3
 800302a:	4821      	ldr	r0, [pc, #132]	; (80030b0 <MX_GPIO_Init+0x2e8>)
 800302c:	f007 ff00 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8003030:	f243 033c 	movw	r3, #12348	; 0x303c
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003036:	2301      	movs	r3, #1
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003046:	4619      	mov	r1, r3
 8003048:	481a      	ldr	r0, [pc, #104]	; (80030b4 <MX_GPIO_Init+0x2ec>)
 800304a:	f007 fef1 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 800304e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003054:	2301      	movs	r3, #1
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003064:	4619      	mov	r1, r3
 8003066:	4814      	ldr	r0, [pc, #80]	; (80030b8 <MX_GPIO_Init+0x2f0>)
 8003068:	f007 fee2 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 800306c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003072:	2301      	movs	r3, #1
 8003074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	480d      	ldr	r0, [pc, #52]	; (80030bc <MX_GPIO_Init+0x2f4>)
 8003086:	f007 fed3 	bl	800ae30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 800308a:	231b      	movs	r3, #27
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308e:	2301      	movs	r3, #1
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800309a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800309e:	e017      	b.n	80030d0 <MX_GPIO_Init+0x308>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40021800 	.word	0x40021800
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022800 	.word	0x40022800
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40021c00 	.word	0x40021c00
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40022400 	.word	0x40022400
 80030c4:	10210000 	.word	0x10210000
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	4619      	mov	r1, r3
 80030d2:	480b      	ldr	r0, [pc, #44]	; (8003100 <MX_GPIO_Init+0x338>)
 80030d4:	f007 feac 	bl	800ae30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2105      	movs	r1, #5
 80030dc:	200a      	movs	r0, #10
 80030de:	f007 fa75 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80030e2:	200a      	movs	r0, #10
 80030e4:	f007 fa8e 	bl	800a604 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2105      	movs	r1, #5
 80030ec:	2017      	movs	r0, #23
 80030ee:	f007 fa6d 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030f2:	2017      	movs	r0, #23
 80030f4:	f007 fa86 	bl	800a604 <HAL_NVIC_EnableIRQ>

}
 80030f8:	bf00      	nop
 80030fa:	3740      	adds	r7, #64	; 0x40
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40022400 	.word	0x40022400

08003104 <DevUI_Error_Handler>:
// Generic Error Handler for DevUI HAL hardware.
// char *msg is an error message that can be sent to the handler from the caller.
// err_param1 & err_param2 are additional error parameters that can be printed.
// For I2C errors, I2C device address in param1 and register address in param2.
void DevUI_Error_Handler(char *msg, HAL_StatusTypeDef ErrorCode, uint8_t err_param1, uint8_t err_param2, uint8_t critical_fault)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af02      	add	r7, sp, #8
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	70fb      	strb	r3, [r7, #3]
 8003116:	460b      	mov	r3, r1
 8003118:	70bb      	strb	r3, [r7, #2]
 800311a:	4613      	mov	r3, r2
 800311c:	707b      	strb	r3, [r7, #1]
  __ASM volatile ("cpsid i" : : : "memory");
 800311e:	b672      	cpsid	i
	__disable_irq();
	printf("ERROR: %s" " Code: %d Param1: 0x%x Param2: 0x%x\r\n", msg, ErrorCode, err_param1, err_param2);
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	78b9      	ldrb	r1, [r7, #2]
 8003124:	787b      	ldrb	r3, [r7, #1]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	460b      	mov	r3, r1
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4807      	ldr	r0, [pc, #28]	; (800314c <DevUI_Error_Handler+0x48>)
 800312e:	f010 feff 	bl	8013f30 <iprintf>

	// Set error LED
	//setErrorLED(FAULT9, true);
	errorLED.fault9 = true;
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <DevUI_Error_Handler+0x4c>)
 8003134:	2201      	movs	r2, #1
 8003136:	731a      	strb	r2, [r3, #12]
	// Use event group flag to indicate an error for the startErrorLED task.

	// If the fault is labeled as "critical" stay here.  Else keep running RTOS.
	if (critical_fault == true)
 8003138:	7c3b      	ldrb	r3, [r7, #16]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d100      	bne.n	8003140 <DevUI_Error_Handler+0x3c>
	{
	  while (1)
 800313e:	e7fe      	b.n	800313e <DevUI_Error_Handler+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8003140:	b662      	cpsie	i
	  }
	}
	else
	{
		__enable_irq();
		return;
 8003142:	bf00      	nop
	}
}
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	08017638 	.word	0x08017638
 8003150:	200032d8 	.word	0x200032d8

08003154 <__io_putchar>:

int __io_putchar(int ch)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 800315c:	1d39      	adds	r1, r7, #4
 800315e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003162:	2201      	movs	r2, #1
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <__io_putchar+0x20>)
 8003166:	f00b ff47 	bl	800eff8 <HAL_UART_Transmit>

	return ch;
 800316a:	687b      	ldr	r3, [r7, #4]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20028be8 	.word	0x20028be8

08003178 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 800317c:	220e      	movs	r2, #14
 800317e:	2100      	movs	r1, #0
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <outputGPIOBufInitialization+0x40>)
 8003182:	f010 f8ba 	bl	80132fa <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <outputGPIOBufInitialization+0x44>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f817 	bl	80031c0 <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <outputGPIOBufInitialization+0x44>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f811 	bl	80031c0 <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <outputGPIOBufInitialization+0x44>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <outputGPIOBufInitialization+0x40>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <outputGPIOBufInitialization+0x44>)
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <outputGPIOBufInitialization+0x40>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	54d1      	strb	r1, [r2, r3]
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2002c044 	.word	0x2002c044
 80031bc:	20000044 	.word	0x20000044

080031c0 <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 80031ca:	4b87      	ldr	r3, [pc, #540]	; (80033e8 <setOutputGPIOState+0x228>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d10d      	bne.n	80031f0 <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	2104      	movs	r1, #4
 80031dc:	4883      	ldr	r0, [pc, #524]	; (80033ec <setOutputGPIOState+0x22c>)
 80031de:	f007 ffe9 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 80031e2:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <setOutputGPIOState+0x228>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	b2d1      	uxtb	r1, r2
 80031ea:	4a81      	ldr	r2, [pc, #516]	; (80033f0 <setOutputGPIOState+0x230>)
 80031ec:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 80031ee:	e0f7      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 80031f0:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <setOutputGPIOState+0x228>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10d      	bne.n	8003216 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	2110      	movs	r1, #16
 8003202:	487c      	ldr	r0, [pc, #496]	; (80033f4 <setOutputGPIOState+0x234>)
 8003204:	f007 ffd6 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <setOutputGPIOState+0x228>)
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	b2d1      	uxtb	r1, r2
 8003210:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <setOutputGPIOState+0x230>)
 8003212:	54d1      	strb	r1, [r2, r3]
}
 8003214:	e0e4      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 8003216:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <setOutputGPIOState+0x228>)
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d10d      	bne.n	800323c <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	2140      	movs	r1, #64	; 0x40
 8003228:	4872      	ldr	r0, [pc, #456]	; (80033f4 <setOutputGPIOState+0x234>)
 800322a:	f007 ffc3 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 800322e:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <setOutputGPIOState+0x228>)
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	b2d1      	uxtb	r1, r2
 8003236:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <setOutputGPIOState+0x230>)
 8003238:	54d1      	strb	r1, [r2, r3]
}
 800323a:	e0d1      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <setOutputGPIOState+0x228>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	d10e      	bne.n	8003264 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003250:	4868      	ldr	r0, [pc, #416]	; (80033f4 <setOutputGPIOState+0x234>)
 8003252:	f007 ffaf 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 8003256:	4b64      	ldr	r3, [pc, #400]	; (80033e8 <setOutputGPIOState+0x228>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	b2d1      	uxtb	r1, r2
 800325e:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <setOutputGPIOState+0x230>)
 8003260:	54d1      	strb	r1, [r2, r3]
}
 8003262:	e0bd      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <setOutputGPIOState+0x228>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d10d      	bne.n	800328a <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	2110      	movs	r1, #16
 8003276:	4860      	ldr	r0, [pc, #384]	; (80033f8 <setOutputGPIOState+0x238>)
 8003278:	f007 ff9c 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 800327c:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <setOutputGPIOState+0x228>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d1      	uxtb	r1, r2
 8003284:	4a5a      	ldr	r2, [pc, #360]	; (80033f0 <setOutputGPIOState+0x230>)
 8003286:	54d1      	strb	r1, [r2, r3]
}
 8003288:	e0aa      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 800328a:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <setOutputGPIOState+0x228>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d10d      	bne.n	80032b0 <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	2101      	movs	r1, #1
 800329c:	4857      	ldr	r0, [pc, #348]	; (80033fc <setOutputGPIOState+0x23c>)
 800329e:	f007 ff89 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <setOutputGPIOState+0x228>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	b2d1      	uxtb	r1, r2
 80032aa:	4a51      	ldr	r2, [pc, #324]	; (80033f0 <setOutputGPIOState+0x230>)
 80032ac:	54d1      	strb	r1, [r2, r3]
}
 80032ae:	e097      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 80032b0:	4b4d      	ldr	r3, [pc, #308]	; (80033e8 <setOutputGPIOState+0x228>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10d      	bne.n	80032d6 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	2102      	movs	r1, #2
 80032c2:	484e      	ldr	r0, [pc, #312]	; (80033fc <setOutputGPIOState+0x23c>)
 80032c4:	f007 ff76 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 80032c8:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <setOutputGPIOState+0x228>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d1      	uxtb	r1, r2
 80032d0:	4a47      	ldr	r2, [pc, #284]	; (80033f0 <setOutputGPIOState+0x230>)
 80032d2:	54d1      	strb	r1, [r2, r3]
}
 80032d4:	e084      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <setOutputGPIOState+0x228>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d10d      	bne.n	80032fc <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	2108      	movs	r1, #8
 80032e8:	4843      	ldr	r0, [pc, #268]	; (80033f8 <setOutputGPIOState+0x238>)
 80032ea:	f007 ff63 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <setOutputGPIOState+0x228>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	b2d1      	uxtb	r1, r2
 80032f6:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <setOutputGPIOState+0x230>)
 80032f8:	54d1      	strb	r1, [r2, r3]
}
 80032fa:	e071      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <setOutputGPIOState+0x228>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d10d      	bne.n	8003322 <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	2101      	movs	r1, #1
 800330e:	483c      	ldr	r0, [pc, #240]	; (8003400 <setOutputGPIOState+0x240>)
 8003310:	f007 ff50 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <setOutputGPIOState+0x228>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d1      	uxtb	r1, r2
 800331c:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <setOutputGPIOState+0x230>)
 800331e:	54d1      	strb	r1, [r2, r3]
}
 8003320:	e05e      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <setOutputGPIOState+0x228>)
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d10d      	bne.n	8003348 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	2102      	movs	r1, #2
 8003334:	4832      	ldr	r0, [pc, #200]	; (8003400 <setOutputGPIOState+0x240>)
 8003336:	f007 ff3d 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <setOutputGPIOState+0x228>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	b2d1      	uxtb	r1, r2
 8003342:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <setOutputGPIOState+0x230>)
 8003344:	54d1      	strb	r1, [r2, r3]
}
 8003346:	e04b      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 8003348:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <setOutputGPIOState+0x228>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d10d      	bne.n	800336e <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	2120      	movs	r1, #32
 800335a:	4829      	ldr	r0, [pc, #164]	; (8003400 <setOutputGPIOState+0x240>)
 800335c:	f007 ff2a 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <setOutputGPIOState+0x228>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d1      	uxtb	r1, r2
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <setOutputGPIOState+0x230>)
 800336a:	54d1      	strb	r1, [r2, r3]
}
 800336c:	e038      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <setOutputGPIOState+0x228>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d10e      	bne.n	8003396 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003382:	481f      	ldr	r0, [pc, #124]	; (8003400 <setOutputGPIOState+0x240>)
 8003384:	f007 ff16 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <setOutputGPIOState+0x228>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d1      	uxtb	r1, r2
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <setOutputGPIOState+0x230>)
 8003392:	54d1      	strb	r1, [r2, r3]
}
 8003394:	e024      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <setOutputGPIOState+0x228>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d10d      	bne.n	80033bc <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	2104      	movs	r1, #4
 80033a8:	4815      	ldr	r0, [pc, #84]	; (8003400 <setOutputGPIOState+0x240>)
 80033aa:	f007 ff03 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <setOutputGPIOState+0x228>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	b2d1      	uxtb	r1, r2
 80033b6:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <setOutputGPIOState+0x230>)
 80033b8:	54d1      	strb	r1, [r2, r3]
}
 80033ba:	e011      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <setOutputGPIOState+0x228>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d10c      	bne.n	80033e0 <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	2108      	movs	r1, #8
 80033ce:	480c      	ldr	r0, [pc, #48]	; (8003400 <setOutputGPIOState+0x240>)
 80033d0:	f007 fef0 	bl	800b1b4 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <setOutputGPIOState+0x228>)
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	b2d1      	uxtb	r1, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <setOutputGPIOState+0x230>)
 80033de:	54d1      	strb	r1, [r2, r3]
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000044 	.word	0x20000044
 80033ec:	40021c00 	.word	0x40021c00
 80033f0:	2002c044 	.word	0x2002c044
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40022400 	.word	0x40022400
 80033fc:	40022800 	.word	0x40022800
 8003400:	40021800 	.word	0x40021800

08003404 <debugUartTransmitChar>:

void debugUartTransmitChar(char *message){
 8003404:	b580      	push	{r7, lr}
 8003406:	b0b6      	sub	sp, #216	; 0xd8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	f010 fdaa 	bl	8013f6c <siprintf>
 8003418:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, uart_buf_len,100);
 800341c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003420:	b29a      	uxth	r2, r3
 8003422:	f107 010c 	add.w	r1, r7, #12
 8003426:	2364      	movs	r3, #100	; 0x64
 8003428:	4803      	ldr	r0, [pc, #12]	; (8003438 <debugUartTransmitChar+0x34>)
 800342a:	f00b fde5 	bl	800eff8 <HAL_UART_Transmit>
}
 800342e:	bf00      	nop
 8003430:	37d8      	adds	r7, #216	; 0xd8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20028be8 	.word	0x20028be8

0800343c <debugUartTransmitStuff>:
void debugUartTransmitStuff(char *message, int size){
 800343c:	b580      	push	{r7, lr}
 800343e:	b0b6      	sub	sp, #216	; 0xd8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	f010 fd8d 	bl	8013f6c <siprintf>
 8003452:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, size,100);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b29a      	uxth	r2, r3
 800345a:	f107 010c 	add.w	r1, r7, #12
 800345e:	2364      	movs	r3, #100	; 0x64
 8003460:	4803      	ldr	r0, [pc, #12]	; (8003470 <debugUartTransmitStuff+0x34>)
 8003462:	f00b fdc9 	bl	800eff8 <HAL_UART_Transmit>
}
 8003466:	bf00      	nop
 8003468:	37d8      	adds	r7, #216	; 0xd8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20028be8 	.word	0x20028be8

08003474 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60ba      	str	r2, [r7, #8]
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	460b      	mov	r3, r1
 8003484:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8003486:	4a5d      	ldr	r2, [pc, #372]	; (80035fc <readI2CRegister+0x188>)
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	7013      	strb	r3, [r2, #0]
	char *err_msg;
  	if(i2CBank == 1){
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10e      	bne.n	80034b0 <readI2CRegister+0x3c>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	b299      	uxth	r1, r3
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	4a57      	ldr	r2, [pc, #348]	; (80035fc <readI2CRegister+0x188>)
 80034a0:	4857      	ldr	r0, [pc, #348]	; (8003600 <readI2CRegister+0x18c>)
 80034a2:	f007 ff6f 	bl	800b384 <HAL_I2C_Master_Transmit>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 1.";
 80034aa:	4b56      	ldr	r3, [pc, #344]	; (8003604 <readI2CRegister+0x190>)
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e034      	b.n	800351a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 2){
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d10e      	bne.n	80034d4 <readI2CRegister+0x60>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	b299      	uxth	r1, r3
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <readI2CRegister+0x188>)
 80034c4:	4850      	ldr	r0, [pc, #320]	; (8003608 <readI2CRegister+0x194>)
 80034c6:	f007 ff5d 	bl	800b384 <HAL_I2C_Master_Transmit>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 2.";
 80034ce:	4b4f      	ldr	r3, [pc, #316]	; (800360c <readI2CRegister+0x198>)
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e022      	b.n	800351a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 3){
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d10e      	bne.n	80034f8 <readI2CRegister+0x84>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	b299      	uxth	r1, r3
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	4a45      	ldr	r2, [pc, #276]	; (80035fc <readI2CRegister+0x188>)
 80034e8:	4849      	ldr	r0, [pc, #292]	; (8003610 <readI2CRegister+0x19c>)
 80034ea:	f007 ff4b 	bl	800b384 <HAL_I2C_Master_Transmit>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 3.";
 80034f2:	4b48      	ldr	r3, [pc, #288]	; (8003614 <readI2CRegister+0x1a0>)
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	e010      	b.n	800351a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 4){
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d10d      	bne.n	800351a <readI2CRegister+0xa6>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	b299      	uxth	r1, r3
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <readI2CRegister+0x188>)
 800350c:	4842      	ldr	r0, [pc, #264]	; (8003618 <readI2CRegister+0x1a4>)
 800350e:	f007 ff39 	bl	800b384 <HAL_I2C_Master_Transmit>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 4.";
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <readI2CRegister+0x1a8>)
 8003518:	613b      	str	r3, [r7, #16]
  	}
	  if ( ret != HAL_OK ) {
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <readI2CRegister+0xc2>
		  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 8003520:	7bb8      	ldrb	r0, [r7, #14]
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	7df9      	ldrb	r1, [r7, #23]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	6938      	ldr	r0, [r7, #16]
 800352e:	f7ff fde9 	bl	8003104 <DevUI_Error_Handler>
	          return (uint8_t*)0xfe;
 8003532:	23fe      	movs	r3, #254	; 0xfe
 8003534:	e05d      	b.n	80035f2 <readI2CRegister+0x17e>
	        }
	  else {
		  if(i2CBank == 1){
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d110      	bne.n	800355e <readI2CRegister+0xea>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	b299      	uxth	r1, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	b29a      	uxth	r2, r3
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <readI2CRegister+0x188>)
 800354e:	482c      	ldr	r0, [pc, #176]	; (8003600 <readI2CRegister+0x18c>)
 8003550:	f008 f80c 	bl	800b56c <HAL_I2C_Master_Receive>
 8003554:	4603      	mov	r3, r0
 8003556:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 1.";
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <readI2CRegister+0x1ac>)
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	e03a      	b.n	80035d4 <readI2CRegister+0x160>
			}
			else if(i2CBank == 2){
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d110      	bne.n	8003586 <readI2CRegister+0x112>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	b299      	uxth	r1, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	b29a      	uxth	r2, r3
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <readI2CRegister+0x188>)
 8003576:	4824      	ldr	r0, [pc, #144]	; (8003608 <readI2CRegister+0x194>)
 8003578:	f007 fff8 	bl	800b56c <HAL_I2C_Master_Receive>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 2.";
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <readI2CRegister+0x1b0>)
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	e026      	b.n	80035d4 <readI2CRegister+0x160>
			}
			else if(i2CBank == 3){
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d110      	bne.n	80035ae <readI2CRegister+0x13a>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	b299      	uxth	r1, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	b29a      	uxth	r2, r3
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <readI2CRegister+0x188>)
 800359e:	481c      	ldr	r0, [pc, #112]	; (8003610 <readI2CRegister+0x19c>)
 80035a0:	f007 ffe4 	bl	800b56c <HAL_I2C_Master_Receive>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 3.";
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <readI2CRegister+0x1b4>)
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e012      	b.n	80035d4 <readI2CRegister+0x160>
			}
			else if(i2CBank == 4){
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d10f      	bne.n	80035d4 <readI2CRegister+0x160>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	b299      	uxth	r1, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <readI2CRegister+0x188>)
 80035c6:	4814      	ldr	r0, [pc, #80]	; (8003618 <readI2CRegister+0x1a4>)
 80035c8:	f007 ffd0 	bl	800b56c <HAL_I2C_Master_Receive>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 4.";
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <readI2CRegister+0x1b8>)
 80035d2:	613b      	str	r3, [r7, #16]
			}
		  if ( ret != HAL_OK ) {
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <readI2CRegister+0x17c>
			  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 80035da:	7bb8      	ldrb	r0, [r7, #14]
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	7df9      	ldrb	r1, [r7, #23]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	6938      	ldr	r0, [r7, #16]
 80035e8:	f7ff fd8c 	bl	8003104 <DevUI_Error_Handler>
		          return (uint8_t*)0xfe;
 80035ec:	23fe      	movs	r3, #254	; 0xfe
 80035ee:	e000      	b.n	80035f2 <readI2CRegister+0x17e>
		        }
		  else{
			  //uartTransmitInt(buf[0],7);
			  return buf;
 80035f0:	4b02      	ldr	r3, [pc, #8]	; (80035fc <readI2CRegister+0x188>)
		  }
}
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200032e8 	.word	0x200032e8
 8003600:	20028d68 	.word	0x20028d68
 8003604:	08017678 	.word	0x08017678
 8003608:	200291b8 	.word	0x200291b8
 800360c:	0801769c 	.word	0x0801769c
 8003610:	20028b50 	.word	0x20028b50
 8003614:	080176c0 	.word	0x080176c0
 8003618:	20028b9c 	.word	0x20028b9c
 800361c:	080176e4 	.word	0x080176e4
 8003620:	08017708 	.word	0x08017708
 8003624:	0801772c 	.word	0x0801772c
 8003628:	08017750 	.word	0x08017750
 800362c:	08017774 	.word	0x08017774

08003630 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003630:	b580      	push	{r7, lr}
 8003632:	b08e      	sub	sp, #56	; 0x38
 8003634:	af02      	add	r7, sp, #8
 8003636:	60ba      	str	r2, [r7, #8]
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	460b      	mov	r3, r1
 8003640:	73bb      	strb	r3, [r7, #14]
  	uint8_t buf[20];
  	HAL_StatusTypeDef ret;
  	buf[0]=reg;
 8003642:	7bbb      	ldrb	r3, [r7, #14]
 8003644:	743b      	strb	r3, [r7, #16]
  	int x = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
  	char *err_msg;
  	for (x=0;x<(sizeof(bytes)-1);x++){
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
 800364e:	e00d      	b.n	800366c <writeI2CRegister+0x3c>
  		buf[1+x] = bytes[x];
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	441a      	add	r2, r3
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	3301      	adds	r3, #1
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003660:	440b      	add	r3, r1
 8003662:	f803 2c20 	strb.w	r2, [r3, #-32]
  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	3301      	adds	r3, #1
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	2b02      	cmp	r3, #2
 8003670:	d9ee      	bls.n	8003650 <writeI2CRegister+0x20>
  	}
  	if(i2CBank == 1){
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b01      	cmp	r3, #1
 8003676:	d114      	bne.n	80036a2 <writeI2CRegister+0x72>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	b29b      	uxth	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	b298      	uxth	r0, r3
 8003684:	f107 0210 	add.w	r2, r7, #16
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4603      	mov	r3, r0
 8003690:	4832      	ldr	r0, [pc, #200]	; (800375c <writeI2CRegister+0x12c>)
 8003692:	f007 fe77 	bl	800b384 <HAL_I2C_Master_Transmit>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 1.";
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <writeI2CRegister+0x130>)
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e046      	b.n	8003730 <writeI2CRegister+0x100>
  	}
  	else if(i2CBank == 2){
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d114      	bne.n	80036d2 <writeI2CRegister+0xa2>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	b299      	uxth	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	b298      	uxth	r0, r3
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	4603      	mov	r3, r0
 80036c0:	4828      	ldr	r0, [pc, #160]	; (8003764 <writeI2CRegister+0x134>)
 80036c2:	f007 fe5f 	bl	800b384 <HAL_I2C_Master_Transmit>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 2.";
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <writeI2CRegister+0x138>)
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	e02e      	b.n	8003730 <writeI2CRegister+0x100>
  	}
  	else if(i2CBank == 3){
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d114      	bne.n	8003702 <writeI2CRegister+0xd2>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	b299      	uxth	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	b298      	uxth	r0, r3
 80036e4:	f107 0210 	add.w	r2, r7, #16
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4603      	mov	r3, r0
 80036f0:	481e      	ldr	r0, [pc, #120]	; (800376c <writeI2CRegister+0x13c>)
 80036f2:	f007 fe47 	bl	800b384 <HAL_I2C_Master_Transmit>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 3.";
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <writeI2CRegister+0x140>)
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003700:	e016      	b.n	8003730 <writeI2CRegister+0x100>
  	}
  	else if(i2CBank == 4){
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b04      	cmp	r3, #4
 8003706:	d113      	bne.n	8003730 <writeI2CRegister+0x100>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	b299      	uxth	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	b29b      	uxth	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	b298      	uxth	r0, r3
 8003714:	f107 0210 	add.w	r2, r7, #16
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	4603      	mov	r3, r0
 8003720:	4814      	ldr	r0, [pc, #80]	; (8003774 <writeI2CRegister+0x144>)
 8003722:	f007 fe2f 	bl	800b384 <HAL_I2C_Master_Transmit>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 4.";
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <writeI2CRegister+0x148>)
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  	}
  	if (ret != HAL_OK)
 8003730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <writeI2CRegister+0x122>
  	{
  		DevUI_Error_Handler(err_msg, ret, address, reg, false);
 8003738:	7bb8      	ldrb	r0, [r7, #14]
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4603      	mov	r3, r0
 8003746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003748:	f7ff fcdc 	bl	8003104 <DevUI_Error_Handler>
  		return ret;
 800374c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003750:	e000      	b.n	8003754 <writeI2CRegister+0x124>
  	}
  	else
  	{
  		return HAL_OK;
 8003752:	2300      	movs	r3, #0
  	}
}
 8003754:	4618      	mov	r0, r3
 8003756:	3730      	adds	r7, #48	; 0x30
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20028d68 	.word	0x20028d68
 8003760:	08017798 	.word	0x08017798
 8003764:	200291b8 	.word	0x200291b8
 8003768:	080177b4 	.word	0x080177b4
 800376c:	20028b50 	.word	0x20028b50
 8003770:	080177d0 	.word	0x080177d0
 8003774:	20028b9c 	.word	0x20028b9c
 8003778:	080177ec 	.word	0x080177ec

0800377c <configureLEDDriver>:
void configureLEDDriver(){
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003782:	2301      	movs	r3, #1
 8003784:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <configureLEDDriver+0x104>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, (uint8_t*)currentMultiplier,1,LED.i2cBank);
 800378c:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <configureLEDDriver+0x108>)
 800378e:	7818      	ldrb	r0, [r3, #0]
 8003790:	4b3c      	ldr	r3, [pc, #240]	; (8003884 <configureLEDDriver+0x108>)
 8003792:	7999      	ldrb	r1, [r3, #6]
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	461a      	mov	r2, r3
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <configureLEDDriver+0x108>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2301      	movs	r3, #1
 80037a0:	f7ff ff46 	bl	8003630 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <configureLEDDriver+0x108>)
 80037a6:	7818      	ldrb	r0, [r3, #0]
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <configureLEDDriver+0x108>)
 80037aa:	7999      	ldrb	r1, [r3, #6]
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <configureLEDDriver+0x108>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f7ff fe5f 	bl	8003474 <readI2CRegister>
 80037b6:	6038      	str	r0, [r7, #0]
	//uartTransmitInt(buf[0],7);
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,(uint8_t*)LED.mode0_oscon_value,1,LED.i2cBank);
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <configureLEDDriver+0x108>)
 80037ba:	7818      	ldrb	r0, [r3, #0]
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <configureLEDDriver+0x108>)
 80037be:	7859      	ldrb	r1, [r3, #1]
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <configureLEDDriver+0x108>)
 80037c2:	79db      	ldrb	r3, [r3, #7]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <configureLEDDriver+0x108>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2301      	movs	r3, #1
 80037ce:	f7ff ff2f 	bl	8003630 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,(uint8_t*)clear,1,LED.i2cBank);
 80037d2:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <configureLEDDriver+0x108>)
 80037d4:	7818      	ldrb	r0, [r3, #0]
 80037d6:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <configureLEDDriver+0x108>)
 80037d8:	7899      	ldrb	r1, [r3, #2]
 80037da:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <configureLEDDriver+0x108>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2301      	movs	r3, #1
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <configureLEDDriver+0x104>)
 80037e4:	f7ff ff24 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,(uint8_t*)clear,1,LED.i2cBank);
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <configureLEDDriver+0x108>)
 80037ea:	7818      	ldrb	r0, [r3, #0]
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <configureLEDDriver+0x108>)
 80037ee:	78d9      	ldrb	r1, [r3, #3]
 80037f0:	4b24      	ldr	r3, [pc, #144]	; (8003884 <configureLEDDriver+0x108>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2301      	movs	r3, #1
 80037f8:	4a21      	ldr	r2, [pc, #132]	; (8003880 <configureLEDDriver+0x104>)
 80037fa:	f7ff ff19 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,(uint8_t*)clear,1,LED.i2cBank);
 80037fe:	4b21      	ldr	r3, [pc, #132]	; (8003884 <configureLEDDriver+0x108>)
 8003800:	7818      	ldrb	r0, [r3, #0]
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <configureLEDDriver+0x108>)
 8003804:	7919      	ldrb	r1, [r3, #4]
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <configureLEDDriver+0x108>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2301      	movs	r3, #1
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <configureLEDDriver+0x104>)
 8003810:	f7ff ff0e 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <configureLEDDriver+0x108>)
 8003816:	7818      	ldrb	r0, [r3, #0]
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <configureLEDDriver+0x108>)
 800381a:	7959      	ldrb	r1, [r3, #5]
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <configureLEDDriver+0x108>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2301      	movs	r3, #1
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <configureLEDDriver+0x104>)
 8003826:	f7ff ff03 	bl	8003630 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <configureLEDDriver+0x108>)
 800382c:	7818      	ldrb	r0, [r3, #0]
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <configureLEDDriver+0x108>)
 8003830:	7a19      	ldrb	r1, [r3, #8]
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <configureLEDDriver+0x108>)
 8003834:	7adb      	ldrb	r3, [r3, #11]
 8003836:	461a      	mov	r2, r3
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <configureLEDDriver+0x108>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2301      	movs	r3, #1
 8003840:	f7ff fef6 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <configureLEDDriver+0x108>)
 8003846:	7818      	ldrb	r0, [r3, #0]
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <configureLEDDriver+0x108>)
 800384a:	7a59      	ldrb	r1, [r3, #9]
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <configureLEDDriver+0x108>)
 800384e:	7adb      	ldrb	r3, [r3, #11]
 8003850:	461a      	mov	r2, r3
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <configureLEDDriver+0x108>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	f7ff fee9 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <configureLEDDriver+0x108>)
 8003860:	7818      	ldrb	r0, [r3, #0]
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <configureLEDDriver+0x108>)
 8003864:	7a99      	ldrb	r1, [r3, #10]
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <configureLEDDriver+0x108>)
 8003868:	7adb      	ldrb	r3, [r3, #11]
 800386a:	461a      	mov	r2, r3
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <configureLEDDriver+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2301      	movs	r3, #1
 8003874:	f7ff fedc 	bl	8003630 <writeI2CRegister>
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200032fc 	.word	0x200032fc
 8003884:	20000004 	.word	0x20000004

08003888 <setRGBLED>:

//Configure & set RGB LED
void setRGBLED(uint8_t R, uint8_t G, uint8_t B)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
 8003892:	460b      	mov	r3, r1
 8003894:	71bb      	strb	r3, [r7, #6]
 8003896:	4613      	mov	r3, r2
 8003898:	717b      	strb	r3, [r7, #5]
	setErrorLED(RED, R);
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4619      	mov	r1, r3
 80038a8:	2007      	movs	r0, #7
 80038aa:	f000 f819 	bl	80038e0 <setErrorLED>
	setErrorLED(GREEN, G);
 80038ae:	79bb      	ldrb	r3, [r7, #6]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	2008      	movs	r0, #8
 80038be:	f000 f80f 	bl	80038e0 <setErrorLED>
	setErrorLED(BLUE, B);
 80038c2:	797b      	ldrb	r3, [r7, #5]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	4619      	mov	r1, r3
 80038d0:	2009      	movs	r0, #9
 80038d2:	f000 f805 	bl	80038e0 <setErrorLED>

	return;
 80038d6:	bf00      	nop
}
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80038ec:	2301      	movs	r3, #1
 80038ee:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80038f0:	2304      	movs	r3, #4
 80038f2:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80038f4:	2310      	movs	r3, #16
 80038f6:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80038fc:	2302      	movs	r3, #2
 80038fe:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8003900:	2308      	movs	r3, #8
 8003902:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8003904:	2320      	movs	r3, #32
 8003906:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b03      	cmp	r3, #3
 8003910:	dc05      	bgt.n	800391e <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8003912:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <setErrorLED+0x234>)
 8003914:	789b      	ldrb	r3, [r3, #2]
 8003916:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	e019      	b.n	8003952 <setErrorLED+0x72>
	}
	else if(led <8){
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b07      	cmp	r3, #7
 8003922:	dc06      	bgt.n	8003932 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8003924:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <setErrorLED+0x234>)
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3b04      	subs	r3, #4
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e00f      	b.n	8003952 <setErrorLED+0x72>
	}
	else if(led <12){
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0b      	cmp	r3, #11
 8003936:	dc06      	bgt.n	8003946 <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003938:	4b76      	ldr	r3, [pc, #472]	; (8003b14 <setErrorLED+0x234>)
 800393a:	791b      	ldrb	r3, [r3, #4]
 800393c:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3b08      	subs	r3, #8
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	e005      	b.n	8003952 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8003946:	4b73      	ldr	r3, [pc, #460]	; (8003b14 <setErrorLED+0x234>)
 8003948:	795b      	ldrb	r3, [r3, #5]
 800394a:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b0c      	subs	r3, #12
 8003950:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003952:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <setErrorLED+0x234>)
 8003954:	7818      	ldrb	r0, [r3, #0]
 8003956:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <setErrorLED+0x234>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	7ef9      	ldrb	r1, [r7, #27]
 800395c:	2201      	movs	r2, #1
 800395e:	f7ff fd89 	bl	8003474 <readI2CRegister>
 8003962:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b03      	cmp	r3, #3
 8003968:	f200 80bd 	bhi.w	8003ae6 <setErrorLED+0x206>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <setErrorLED+0x94>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003985 	.word	0x08003985
 8003978:	080039eb 	.word	0x080039eb
 800397c:	08003a51 	.word	0x08003a51
 8003980:	08003a81 	.word	0x08003a81

	case 0:
		if(change){
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <setErrorLED+0xd0>
			if(led == 8){
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d107      	bne.n	80039a0 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	7dbb      	ldrb	r3, [r7, #22]
 8003996:	4313      	orrs	r3, r2
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 800399e:	e0a2      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	7ebb      	ldrb	r3, [r7, #26]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	701a      	strb	r2, [r3, #0]
		break;
 80039ae:	e09a      	b.n	8003ae6 <setErrorLED+0x206>
			if(led == 8){
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d10c      	bne.n	80039d0 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b25a      	sxtb	r2, r3
 80039bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	4013      	ands	r3, r2
 80039c6:	b25b      	sxtb	r3, r3
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
		break;
 80039ce:	e08a      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b25a      	sxtb	r2, r3
 80039d6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80039da:	43db      	mvns	r3, r3
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	4013      	ands	r3, r2
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	701a      	strb	r2, [r3, #0]
		break;
 80039e8:	e07d      	b.n	8003ae6 <setErrorLED+0x206>

	case 1:
		if(change){
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <setErrorLED+0x136>
			if(led == 9){
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	d107      	bne.n	8003a06 <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	7d7b      	ldrb	r3, [r7, #21]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8003a04:	e06f      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	7e7b      	ldrb	r3, [r7, #25]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	701a      	strb	r2, [r3, #0]
		break;
 8003a14:	e067      	b.n	8003ae6 <setErrorLED+0x206>
			if(led == 9){
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d10c      	bne.n	8003a36 <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b25a      	sxtb	r2, r3
 8003a22:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	b25b      	sxtb	r3, r3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	701a      	strb	r2, [r3, #0]
		break;
 8003a34:	e057      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b25a      	sxtb	r2, r3
 8003a3c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	4013      	ands	r3, r2
 8003a46:	b25b      	sxtb	r3, r3
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	701a      	strb	r2, [r3, #0]
		break;
 8003a4e:	e04a      	b.n	8003ae6 <setErrorLED+0x206>

	case 2:
		if(change){
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	7e3b      	ldrb	r3, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003a64:	e03f      	b.n	8003ae6 <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b25a      	sxtb	r2, r3
 8003a6c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	4013      	ands	r3, r2
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]
		break;
 8003a7e:	e032      	b.n	8003ae6 <setErrorLED+0x206>

	case 3:
		if(change){
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <setErrorLED+0x1cc>
			if(led == 7){
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b07      	cmp	r3, #7
 8003a8a:	d107      	bne.n	8003a9c <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003a9a:	e023      	b.n	8003ae4 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	701a      	strb	r2, [r3, #0]
		break;
 8003aaa:	e01b      	b.n	8003ae4 <setErrorLED+0x204>
			if(led == 7){
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d10c      	bne.n	8003acc <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b25a      	sxtb	r2, r3
 8003ab8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	b25b      	sxtb	r3, r3
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	701a      	strb	r2, [r3, #0]
		break;
 8003aca:	e00b      	b.n	8003ae4 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b25a      	sxtb	r2, r3
 8003ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	4013      	ands	r3, r2
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	701a      	strb	r2, [r3, #0]
		break;
 8003ae4:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <setErrorLED+0x234>)
 8003ae8:	7818      	ldrb	r0, [r3, #0]
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <setErrorLED+0x234>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	7ef9      	ldrb	r1, [r7, #27]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	f7ff fd9b 	bl	8003630 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <setErrorLED+0x234>)
 8003afc:	7818      	ldrb	r0, [r3, #0]
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <setErrorLED+0x234>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	7ef9      	ldrb	r1, [r7, #27]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f7ff fcb5 	bl	8003474 <readI2CRegister>
 8003b0a:	60f8      	str	r0, [r7, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000004 	.word	0x20000004

08003b18 <getADCValues>:


float* getADCValues(){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09e      	sub	sp, #120	; 0x78
 8003b1c:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8003b1e:	463b      	mov	r3, r7
 8003b20:	2254      	movs	r2, #84	; 0x54
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f00f fbe8 	bl	80132fa <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 8003b2a:	2316      	movs	r3, #22
 8003b2c:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8003b2e:	2308      	movs	r3, #8
 8003b30:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8003b32:	230c      	movs	r3, #12
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003b36:	2300      	movs	r3, #0
 8003b38:	677b      	str	r3, [r7, #116]	; 0x74
 8003b3a:	e171      	b.n	8003e20 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003b3c:	4b97      	ldr	r3, [pc, #604]	; (8003d9c <getADCValues+0x284>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d009      	beq.n	8003b5a <getADCValues+0x42>
 8003b46:	4b95      	ldr	r3, [pc, #596]	; (8003d9c <getADCValues+0x284>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d004      	beq.n	8003b5a <getADCValues+0x42>
 8003b50:	4b92      	ldr	r3, [pc, #584]	; (8003d9c <getADCValues+0x284>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d102      	bne.n	8003b60 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5e:	e071      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003b60:	4b8e      	ldr	r3, [pc, #568]	; (8003d9c <getADCValues+0x284>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d009      	beq.n	8003b7e <getADCValues+0x66>
 8003b6a:	4b8c      	ldr	r3, [pc, #560]	; (8003d9c <getADCValues+0x284>)
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d004      	beq.n	8003b7e <getADCValues+0x66>
 8003b74:	4b89      	ldr	r3, [pc, #548]	; (8003d9c <getADCValues+0x284>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d102      	bne.n	8003b84 <getADCValues+0x6c>
			adcIndex=2;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b82:	e05f      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003b84:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <getADCValues+0x284>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d009      	beq.n	8003ba2 <getADCValues+0x8a>
 8003b8e:	4b83      	ldr	r3, [pc, #524]	; (8003d9c <getADCValues+0x284>)
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d004      	beq.n	8003ba2 <getADCValues+0x8a>
 8003b98:	4b80      	ldr	r3, [pc, #512]	; (8003d9c <getADCValues+0x284>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d102      	bne.n	8003ba8 <getADCValues+0x90>
			adcIndex=4;
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba6:	e04d      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003ba8:	4b7c      	ldr	r3, [pc, #496]	; (8003d9c <getADCValues+0x284>)
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d009      	beq.n	8003bc6 <getADCValues+0xae>
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <getADCValues+0x284>)
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d004      	beq.n	8003bc6 <getADCValues+0xae>
 8003bbc:	4b77      	ldr	r3, [pc, #476]	; (8003d9c <getADCValues+0x284>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d102      	bne.n	8003bcc <getADCValues+0xb4>
			adcIndex=6;
 8003bc6:	2306      	movs	r3, #6
 8003bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bca:	e03b      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <getADCValues+0x284>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d004      	beq.n	8003be0 <getADCValues+0xc8>
 8003bd6:	4b71      	ldr	r3, [pc, #452]	; (8003d9c <getADCValues+0x284>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d102      	bne.n	8003be6 <getADCValues+0xce>
			adcIndex=8;
 8003be0:	2308      	movs	r3, #8
 8003be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be4:	e02e      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 8003be6:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <getADCValues+0x284>)
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d004      	beq.n	8003bfa <getADCValues+0xe2>
 8003bf0:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <getADCValues+0x284>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d102      	bne.n	8003c00 <getADCValues+0xe8>
			adcIndex=10;
 8003bfa:	230a      	movs	r3, #10
 8003bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bfe:	e021      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 8003c00:	4b66      	ldr	r3, [pc, #408]	; (8003d9c <getADCValues+0x284>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d102      	bne.n	8003c10 <getADCValues+0xf8>
			adcIndex=12;
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c0e:	e019      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 8003c10:	4b62      	ldr	r3, [pc, #392]	; (8003d9c <getADCValues+0x284>)
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d102      	bne.n	8003c20 <getADCValues+0x108>
			adcIndex=14;
 8003c1a:	230e      	movs	r3, #14
 8003c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1e:	e011      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 8003c20:	4b5e      	ldr	r3, [pc, #376]	; (8003d9c <getADCValues+0x284>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d102      	bne.n	8003c30 <getADCValues+0x118>
			adcIndex=16;
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c2e:	e009      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003c30:	4b5a      	ldr	r3, [pc, #360]	; (8003d9c <getADCValues+0x284>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d102      	bne.n	8003c40 <getADCValues+0x128>
			adcIndex=18;
 8003c3a:	2312      	movs	r3, #18
 8003c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c3e:	e001      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8003c40:	2314      	movs	r3, #20
 8003c42:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003c44:	4b55      	ldr	r3, [pc, #340]	; (8003d9c <getADCValues+0x284>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d00e      	beq.n	8003c6c <getADCValues+0x154>
 8003c4e:	4b53      	ldr	r3, [pc, #332]	; (8003d9c <getADCValues+0x284>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d009      	beq.n	8003c6c <getADCValues+0x154>
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <getADCValues+0x284>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d004      	beq.n	8003c6c <getADCValues+0x154>
 8003c62:	4b4e      	ldr	r3, [pc, #312]	; (8003d9c <getADCValues+0x284>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d13a      	bne.n	8003ce2 <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c70:	e033      	b.n	8003cda <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 8003c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c7c:	4413      	add	r3, r2
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8003c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c88:	4413      	add	r3, r2
 8003c8a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c8e:	4944      	ldr	r1, [pc, #272]	; (8003da0 <getADCValues+0x288>)
 8003c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c92:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c96:	441a      	add	r2, r3
 8003c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003ca0:	440b      	add	r3, r1
 8003ca2:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca8:	2b13      	cmp	r3, #19
 8003caa:	d113      	bne.n	8003cd4 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cba:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <getADCValues+0x28c>)
 8003cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8003cc0:	10d2      	asrs	r2, r2, #3
 8003cc2:	17db      	asrs	r3, r3, #31
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003cce:	440b      	add	r3, r1
 8003cd0:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8003cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cdc:	2b13      	cmp	r3, #19
 8003cde:	ddc8      	ble.n	8003c72 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003ce0:	e09b      	b.n	8003e1a <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <getADCValues+0x284>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d018      	beq.n	8003d1e <getADCValues+0x206>
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <getADCValues+0x284>)
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d013      	beq.n	8003d1e <getADCValues+0x206>
 8003cf6:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <getADCValues+0x284>)
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d00e      	beq.n	8003d1e <getADCValues+0x206>
 8003d00:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <getADCValues+0x284>)
 8003d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d009      	beq.n	8003d1e <getADCValues+0x206>
 8003d0a:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <getADCValues+0x284>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d004      	beq.n	8003d1e <getADCValues+0x206>
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <getADCValues+0x284>)
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d13a      	bne.n	8003d94 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003d1e:	2300      	movs	r3, #0
 8003d20:	673b      	str	r3, [r7, #112]	; 0x70
 8003d22:	e033      	b.n	8003d8c <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8003d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d2e:	4413      	add	r3, r2
 8003d30:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d40:	4919      	ldr	r1, [pc, #100]	; (8003da8 <getADCValues+0x290>)
 8003d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d44:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003d48:	441a      	add	r2, r3
 8003d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003d52:	440b      	add	r3, r1
 8003d54:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5a:	2b13      	cmp	r3, #19
 8003d5c:	d113      	bne.n	8003d86 <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d66:	4413      	add	r3, r2
 8003d68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <getADCValues+0x28c>)
 8003d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d72:	10d2      	asrs	r2, r2, #3
 8003d74:	17db      	asrs	r3, r3, #31
 8003d76:	1ad2      	subs	r2, r2, r3
 8003d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003d80:	440b      	add	r3, r1
 8003d82:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d88:	3301      	adds	r3, #1
 8003d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d8e:	2b13      	cmp	r3, #19
 8003d90:	ddc8      	ble.n	8003d24 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003d92:	e042      	b.n	8003e1a <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003d94:	2300      	movs	r3, #0
 8003d96:	673b      	str	r3, [r7, #112]	; 0x70
 8003d98:	e03c      	b.n	8003e14 <getADCValues+0x2fc>
 8003d9a:	bf00      	nop
 8003d9c:	2000007c 	.word	0x2000007c
 8003da0:	2002e8e8 	.word	0x2002e8e8
 8003da4:	66666667 	.word	0x66666667
 8003da8:	2002c140 	.word	0x2002c140
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003db6:	4413      	add	r3, r2
 8003db8:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003dc8:	49c9      	ldr	r1, [pc, #804]	; (80040f0 <getADCValues+0x5d8>)
 8003dca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dcc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003dda:	440b      	add	r3, r1
 8003ddc:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de2:	2b13      	cmp	r3, #19
 8003de4:	d113      	bne.n	8003e0e <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dee:	4413      	add	r3, r2
 8003df0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003df4:	4abf      	ldr	r2, [pc, #764]	; (80040f4 <getADCValues+0x5dc>)
 8003df6:	fb82 1203 	smull	r1, r2, r2, r3
 8003dfa:	10d2      	asrs	r2, r2, #3
 8003dfc:	17db      	asrs	r3, r3, #31
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003e08:	440b      	add	r3, r1
 8003e0a:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	3301      	adds	r3, #1
 8003e12:	673b      	str	r3, [r7, #112]	; 0x70
 8003e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e16:	2b13      	cmp	r3, #19
 8003e18:	ddc8      	ble.n	8003dac <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	677b      	str	r3, [r7, #116]	; 0x74
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	2b14      	cmp	r3, #20
 8003e24:	f77f ae8a 	ble.w	8003b3c <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e28:	4bb3      	ldr	r3, [pc, #716]	; (80040f8 <getADCValues+0x5e0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e32:	4413      	add	r3, r2
 8003e34:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e40:	4bad      	ldr	r3, [pc, #692]	; (80040f8 <getADCValues+0x5e0>)
 8003e42:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e4a:	4bab      	ldr	r3, [pc, #684]	; (80040f8 <getADCValues+0x5e0>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e56:	4ba8      	ldr	r3, [pc, #672]	; (80040f8 <getADCValues+0x5e0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5e:	4aa7      	ldr	r2, [pc, #668]	; (80040fc <getADCValues+0x5e4>)
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e68:	4ba3      	ldr	r3, [pc, #652]	; (80040f8 <getADCValues+0x5e0>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e72:	4413      	add	r3, r2
 8003e74:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e80:	4b9d      	ldr	r3, [pc, #628]	; (80040f8 <getADCValues+0x5e0>)
 8003e82:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e8a:	4b9b      	ldr	r3, [pc, #620]	; (80040f8 <getADCValues+0x5e0>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e96:	4b98      	ldr	r3, [pc, #608]	; (80040f8 <getADCValues+0x5e0>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	4a97      	ldr	r2, [pc, #604]	; (80040fc <getADCValues+0x5e4>)
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ea8:	4b93      	ldr	r3, [pc, #588]	; (80040f8 <getADCValues+0x5e0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec0:	4b8d      	ldr	r3, [pc, #564]	; (80040f8 <getADCValues+0x5e0>)
 8003ec2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <getADCValues+0x5e0>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <getADCValues+0x5e0>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	4a87      	ldr	r2, [pc, #540]	; (80040fc <getADCValues+0x5e4>)
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ee8:	4b83      	ldr	r3, [pc, #524]	; (80040f8 <getADCValues+0x5e0>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f00:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <getADCValues+0x5e0>)
 8003f02:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f0a:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <getADCValues+0x5e0>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f16:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <getADCValues+0x5e0>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	4a77      	ldr	r2, [pc, #476]	; (80040fc <getADCValues+0x5e4>)
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f28:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <getADCValues+0x5e0>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f32:	4413      	add	r3, r2
 8003f34:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f40:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <getADCValues+0x5e0>)
 8003f42:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <getADCValues+0x5e0>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f56:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <getADCValues+0x5e0>)
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	4a67      	ldr	r2, [pc, #412]	; (80040fc <getADCValues+0x5e4>)
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f68:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <getADCValues+0x5e0>)
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f72:	4413      	add	r3, r2
 8003f74:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f80:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <getADCValues+0x5e0>)
 8003f82:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <getADCValues+0x5e0>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <getADCValues+0x5e0>)
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	4a57      	ldr	r2, [pc, #348]	; (80040fc <getADCValues+0x5e4>)
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <getADCValues+0x5e0>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc0:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <getADCValues+0x5e0>)
 8003fc2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fca:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <getADCValues+0x5e0>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <getADCValues+0x5e0>)
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	4a47      	ldr	r2, [pc, #284]	; (80040fc <getADCValues+0x5e4>)
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <getADCValues+0x5e0>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004000:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <getADCValues+0x5e0>)
 8004002:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400a:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <getADCValues+0x5e0>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004016:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <getADCValues+0x5e0>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	4a37      	ldr	r2, [pc, #220]	; (80040fc <getADCValues+0x5e4>)
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004028:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <getADCValues+0x5e0>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004032:	4413      	add	r3, r2
 8004034:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <getADCValues+0x5e0>)
 8004042:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <getADCValues+0x5e0>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <getADCValues+0x5e0>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	4a27      	ldr	r2, [pc, #156]	; (80040fc <getADCValues+0x5e4>)
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004068:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <getADCValues+0x5e0>)
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004072:	4413      	add	r3, r2
 8004074:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <getADCValues+0x5e0>)
 8004082:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <getADCValues+0x5e0>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004096:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <getADCValues+0x5e0>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <getADCValues+0x5e4>)
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <getADCValues+0x5e0>)
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040b2:	4413      	add	r3, r2
 80040b4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c0:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <getADCValues+0x5e0>)
 80040c2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <getADCValues+0x5e0>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <getADCValues+0x5e0>)
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <getADCValues+0x5e4>)
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <getADCValues+0x5e0>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	e007      	b.n	8004100 <getADCValues+0x5e8>
 80040f0:	20029690 	.word	0x20029690
 80040f4:	66666667 	.word	0x66666667
 80040f8:	2000007c 	.word	0x2000007c
 80040fc:	20003300 	.word	0x20003300
 8004100:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004104:	4413      	add	r3, r2
 8004106:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004112:	4b9c      	ldr	r3, [pc, #624]	; (8004384 <getADCValues+0x86c>)
 8004114:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800411c:	4b99      	ldr	r3, [pc, #612]	; (8004384 <getADCValues+0x86c>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004128:	4b96      	ldr	r3, [pc, #600]	; (8004384 <getADCValues+0x86c>)
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004130:	4a95      	ldr	r2, [pc, #596]	; (8004388 <getADCValues+0x870>)
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800413a:	4b92      	ldr	r3, [pc, #584]	; (8004384 <getADCValues+0x86c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004144:	4413      	add	r3, r2
 8004146:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004152:	4b8c      	ldr	r3, [pc, #560]	; (8004384 <getADCValues+0x86c>)
 8004154:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800415c:	4b89      	ldr	r3, [pc, #548]	; (8004384 <getADCValues+0x86c>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004168:	4b86      	ldr	r3, [pc, #536]	; (8004384 <getADCValues+0x86c>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004170:	4a85      	ldr	r2, [pc, #532]	; (8004388 <getADCValues+0x870>)
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800417a:	4b82      	ldr	r3, [pc, #520]	; (8004384 <getADCValues+0x86c>)
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004184:	4413      	add	r3, r2
 8004186:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004192:	4b7c      	ldr	r3, [pc, #496]	; (8004384 <getADCValues+0x86c>)
 8004194:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800419c:	4b79      	ldr	r3, [pc, #484]	; (8004384 <getADCValues+0x86c>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a8:	4b76      	ldr	r3, [pc, #472]	; (8004384 <getADCValues+0x86c>)
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b0:	4a75      	ldr	r2, [pc, #468]	; (8004388 <getADCValues+0x870>)
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80041ba:	4b72      	ldr	r3, [pc, #456]	; (8004384 <getADCValues+0x86c>)
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041c4:	4413      	add	r3, r2
 80041c6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041d2:	4b6c      	ldr	r3, [pc, #432]	; (8004384 <getADCValues+0x86c>)
 80041d4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80041d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041dc:	4b69      	ldr	r3, [pc, #420]	; (8004384 <getADCValues+0x86c>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e8:	4b66      	ldr	r3, [pc, #408]	; (8004384 <getADCValues+0x86c>)
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f0:	4a65      	ldr	r2, [pc, #404]	; (8004388 <getADCValues+0x870>)
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80041fa:	4b62      	ldr	r3, [pc, #392]	; (8004384 <getADCValues+0x86c>)
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004204:	4413      	add	r3, r2
 8004206:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004212:	4b5c      	ldr	r3, [pc, #368]	; (8004384 <getADCValues+0x86c>)
 8004214:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800421c:	4b59      	ldr	r3, [pc, #356]	; (8004384 <getADCValues+0x86c>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <getADCValues+0x86c>)
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004230:	4a55      	ldr	r2, [pc, #340]	; (8004388 <getADCValues+0x870>)
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800423a:	4b52      	ldr	r3, [pc, #328]	; (8004384 <getADCValues+0x86c>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004244:	4413      	add	r3, r2
 8004246:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004252:	4b4c      	ldr	r3, [pc, #304]	; (8004384 <getADCValues+0x86c>)
 8004254:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800425c:	4b49      	ldr	r3, [pc, #292]	; (8004384 <getADCValues+0x86c>)
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <getADCValues+0x86c>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004270:	4a45      	ldr	r2, [pc, #276]	; (8004388 <getADCValues+0x870>)
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800427a:	4b42      	ldr	r3, [pc, #264]	; (8004384 <getADCValues+0x86c>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004284:	4413      	add	r3, r2
 8004286:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004292:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <getADCValues+0x86c>)
 8004294:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800429c:	4b39      	ldr	r3, [pc, #228]	; (8004384 <getADCValues+0x86c>)
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <getADCValues+0x86c>)
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b0:	4a35      	ldr	r2, [pc, #212]	; (8004388 <getADCValues+0x870>)
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80042ba:	4b32      	ldr	r3, [pc, #200]	; (8004384 <getADCValues+0x86c>)
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80042c4:	4413      	add	r3, r2
 80042c6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <getADCValues+0x86c>)
 80042d4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80042d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <getADCValues+0x86c>)
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	ee07 3a90 	vmov	s15, r3
 80042e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e8:	4b26      	ldr	r3, [pc, #152]	; (8004384 <getADCValues+0x86c>)
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f0:	4a25      	ldr	r2, [pc, #148]	; (8004388 <getADCValues+0x870>)
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <getADCValues+0x86c>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004304:	4413      	add	r3, r2
 8004306:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <getADCValues+0x86c>)
 8004314:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <getADCValues+0x86c>)
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <getADCValues+0x86c>)
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004330:	4a15      	ldr	r2, [pc, #84]	; (8004388 <getADCValues+0x870>)
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <getADCValues+0x86c>)
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004344:	4413      	add	r3, r2
 8004346:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <getADCValues+0x86c>)
 8004354:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <getADCValues+0x86c>)
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <getADCValues+0x86c>)
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004370:	4a05      	ldr	r2, [pc, #20]	; (8004388 <getADCValues+0x870>)
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 800437a:	4b03      	ldr	r3, [pc, #12]	; (8004388 <getADCValues+0x870>)
}
 800437c:	4618      	mov	r0, r3
 800437e:	3778      	adds	r7, #120	; 0x78
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	2000007c 	.word	0x2000007c
 8004388:	20003300 	.word	0x20003300

0800438c <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <debugUartParser>:
	HAL_UART_Transmit(&SPARE_UART,(uint8_t *)uart_buf, uart_buf_len,100);
	//HAL_UART_Receive(&SPARE_UART,(uint8_t*)uart_receive_buf, sizeof(uart_receive_buf),1000);
	int x;
}

uint8_t debugUartParser(){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
	int x;
	uint8_t  key_uint8[4];
	uint8_t var_Seen[4];
	key_uint8[0] = (uint8_t)'G';
 80043a6:	2347      	movs	r3, #71	; 0x47
 80043a8:	723b      	strb	r3, [r7, #8]
	key_uint8[1] = (uint8_t)'I';
 80043aa:	2349      	movs	r3, #73	; 0x49
 80043ac:	727b      	strb	r3, [r7, #9]
	key_uint8[2] = (uint8_t)'V';
 80043ae:	2356      	movs	r3, #86	; 0x56
 80043b0:	72bb      	strb	r3, [r7, #10]
	key_uint8[3] = (uint8_t)'E';
 80043b2:	2345      	movs	r3, #69	; 0x45
 80043b4:	72fb      	strb	r3, [r7, #11]
	//memcpy(key_uint8,(const uint8_t*)key, 4);
	x=5;
 80043b6:	2305      	movs	r3, #5
 80043b8:	60fb      	str	r3, [r7, #12]

	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e039      	b.n	8004434 <debugUartParser+0x94>
		if(debug_Uart_RX_Buf[x]==key_uint8[0]){
 80043c0:	4a25      	ldr	r2, [pc, #148]	; (8004458 <debugUartParser+0xb8>)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	7a3b      	ldrb	r3, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d102      	bne.n	80043d4 <debugUartParser+0x34>
			var_Seen[0] = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	713b      	strb	r3, [r7, #4]
 80043d2:	e02c      	b.n	800442e <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[1] && var_Seen[0]){
 80043d4:	4a20      	ldr	r2, [pc, #128]	; (8004458 <debugUartParser+0xb8>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	7a7b      	ldrb	r3, [r7, #9]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d105      	bne.n	80043ee <debugUartParser+0x4e>
 80043e2:	793b      	ldrb	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <debugUartParser+0x4e>
			var_Seen[1] = 1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	717b      	strb	r3, [r7, #5]
 80043ec:	e01f      	b.n	800442e <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[2] && var_Seen[1]){
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <debugUartParser+0xb8>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	7abb      	ldrb	r3, [r7, #10]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d105      	bne.n	8004408 <debugUartParser+0x68>
 80043fc:	797b      	ldrb	r3, [r7, #5]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <debugUartParser+0x68>
			var_Seen[2] = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	71bb      	strb	r3, [r7, #6]
 8004406:	e012      	b.n	800442e <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[3] && var_Seen[2]){
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <debugUartParser+0xb8>)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	7afb      	ldrb	r3, [r7, #11]
 8004412:	429a      	cmp	r2, r3
 8004414:	d105      	bne.n	8004422 <debugUartParser+0x82>
 8004416:	79bb      	ldrb	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <debugUartParser+0x82>
			var_Seen[3] = 1;
 800441c:	2301      	movs	r3, #1
 800441e:	71fb      	strb	r3, [r7, #7]
			break;
 8004420:	e00b      	b.n	800443a <debugUartParser+0x9a>
		}
		else{
			memset(var_Seen,0x00,sizeof(var_Seen));
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	2204      	movs	r2, #4
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f00e ff66 	bl	80132fa <memset>
	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2bc7      	cmp	r3, #199	; 0xc7
 8004438:	d9c2      	bls.n	80043c0 <debugUartParser+0x20>
		}
	}
	if(var_Seen[3]){
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <debugUartParser+0xae>
		memset(debug_Uart_RX_Buf,0x00,sizeof(debug_Uart_RX_Buf));
 8004440:	22c8      	movs	r2, #200	; 0xc8
 8004442:	2100      	movs	r1, #0
 8004444:	4804      	ldr	r0, [pc, #16]	; (8004458 <debugUartParser+0xb8>)
 8004446:	f00e ff58 	bl	80132fa <memset>
		return true;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <debugUartParser+0xb0>
	}
	else{
		return false;
 800444e:	2300      	movs	r3, #0
	}
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	2002c078 	.word	0x2002c078

0800445c <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8004464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004468:	4803      	ldr	r0, [pc, #12]	; (8004478 <startHeartbeat+0x1c>)
 800446a:	f006 febc 	bl	800b1e6 <HAL_GPIO_TogglePin>
	  //spareUartTransmitRead("YOYOYO!\r\n");
	  osDelay(500);
 800446e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004472:	f00b ff81 	bl	8010378 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8004476:	e7f5      	b.n	8004464 <startHeartbeat+0x8>
 8004478:	40022000 	.word	0x40022000

0800447c <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af02      	add	r7, sp, #8
 8004482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  HAL_StatusTypeDef Status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  // Clear HAL fault LED
	  errorLED.fault9 = false;
 8004488:	4b28      	ldr	r3, [pc, #160]	; (800452c <startADCRead+0xb0>)
 800448a:	2200      	movs	r2, #0
 800448c:	731a      	strb	r2, [r3, #12]
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 800448e:	2203      	movs	r2, #3
 8004490:	2100      	movs	r1, #0
 8004492:	4827      	ldr	r0, [pc, #156]	; (8004530 <startADCRead+0xb4>)
 8004494:	f00e ff31 	bl	80132fa <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 8004498:	f242 7210 	movw	r2, #10000	; 0x2710
 800449c:	2100      	movs	r1, #0
 800449e:	4825      	ldr	r0, [pc, #148]	; (8004534 <startADCRead+0xb8>)
 80044a0:	f00e ff2b 	bl	80132fa <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80044a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80044a8:	2100      	movs	r1, #0
 80044aa:	4823      	ldr	r0, [pc, #140]	; (8004538 <startADCRead+0xbc>)
 80044ac:	f00e ff25 	bl	80132fa <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80044b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80044b4:	2100      	movs	r1, #0
 80044b6:	4821      	ldr	r0, [pc, #132]	; (800453c <startADCRead+0xc0>)
 80044b8:	f00e ff1f 	bl	80132fa <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	491c      	ldr	r1, [pc, #112]	; (8004534 <startADCRead+0xb8>)
 80044c2:	481f      	ldr	r0, [pc, #124]	; (8004540 <startADCRead+0xc4>)
 80044c4:	f005 fba4 	bl	8009c10 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <startADCRead+0x62>
	{
		DevUI_Error_Handler("ADC1 Failed read.", Status, 0, 0, true);
 80044ce:	7bf9      	ldrb	r1, [r7, #15]
 80044d0:	2301      	movs	r3, #1
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	2200      	movs	r2, #0
 80044d8:	481a      	ldr	r0, [pc, #104]	; (8004544 <startADCRead+0xc8>)
 80044da:	f7fe fe13 	bl	8003104 <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4915      	ldr	r1, [pc, #84]	; (8004538 <startADCRead+0xbc>)
 80044e4:	4818      	ldr	r0, [pc, #96]	; (8004548 <startADCRead+0xcc>)
 80044e6:	f005 fb93 	bl	8009c10 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <startADCRead+0x84>
	{
		DevUI_Error_Handler("ADC2 Failed read.", Status, 0, 0, true);
 80044f0:	7bf9      	ldrb	r1, [r7, #15]
 80044f2:	2301      	movs	r3, #1
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	2200      	movs	r2, #0
 80044fa:	4814      	ldr	r0, [pc, #80]	; (800454c <startADCRead+0xd0>)
 80044fc:	f7fe fe02 	bl	8003104 <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	490d      	ldr	r1, [pc, #52]	; (800453c <startADCRead+0xc0>)
 8004506:	4812      	ldr	r0, [pc, #72]	; (8004550 <startADCRead+0xd4>)
 8004508:	f005 fb82 	bl	8009c10 <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <startADCRead+0xa6>
	{
		DevUI_Error_Handler("ADC3 Failed read.", Status, 0, 0, true);
 8004512:	7bf9      	ldrb	r1, [r7, #15]
 8004514:	2301      	movs	r3, #1
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2300      	movs	r3, #0
 800451a:	2200      	movs	r2, #0
 800451c:	480d      	ldr	r0, [pc, #52]	; (8004554 <startADCRead+0xd8>)
 800451e:	f7fe fdf1 	bl	8003104 <DevUI_Error_Handler>
	}
    osDelay(600);
 8004522:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004526:	f00b ff27 	bl	8010378 <osDelay>
	  errorLED.fault9 = false;
 800452a:	e7ad      	b.n	8004488 <startADCRead+0xc>
 800452c:	200032d8 	.word	0x200032d8
 8004530:	20029264 	.word	0x20029264
 8004534:	20029690 	.word	0x20029690
 8004538:	2002e8e8 	.word	0x2002e8e8
 800453c:	2002c140 	.word	0x2002c140
 8004540:	2002be24 	.word	0x2002be24
 8004544:	08017808 	.word	0x08017808
 8004548:	20028d20 	.word	0x20028d20
 800454c:	0801781c 	.word	0x0801781c
 8004550:	2002bed0 	.word	0x2002bed0
 8004554:	08017830 	.word	0x08017830

08004558 <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
//	 int x = 0;
//	 float *adcValues;
//	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8004560:	f000 ff1e 	bl	80053a0 <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	737b      	strb	r3, [r7, #13]
//	 int *readI2c;
//	 int zionCleared=0;
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8004574:	f107 0208 	add.w	r2, r7, #8
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	21ff      	movs	r1, #255	; 0xff
 800457e:	2000      	movs	r0, #0
 8004580:	f00d fd9a 	bl	80120b8 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	737b      	strb	r3, [r7, #13]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 80045a6:	7b7b      	ldrb	r3, [r7, #13]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d820      	bhi.n	80045f0 <GetDaScreenBlink+0x98>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <GetDaScreenBlink+0x5c>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045d3 	.word	0x080045d3
 80045b8:	080045c5 	.word	0x080045c5
 80045bc:	080045dd 	.word	0x080045dd
 80045c0:	080045e7 	.word	0x080045e7
		  {
		  case BOOT_MENU:
		  {
			  //printf("BOOT_MENU\r\n");
			  drawBootMenu(menu_val, button_val, running_menu);
 80045c4:	7bbb      	ldrb	r3, [r7, #14]
 80045c6:	7b7a      	ldrb	r2, [r7, #13]
 80045c8:	7bf9      	ldrb	r1, [r7, #15]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f003 f812 	bl	80075f4 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 80045d0:	e00e      	b.n	80045f0 <GetDaScreenBlink+0x98>
		  }
		  case MAIN_MENU:
		  {
			  //printf("MAIN_MENU\r\n");
			  drawMainMenu(menu_val);
 80045d2:	7bbb      	ldrb	r3, [r7, #14]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 ff1d 	bl	8005414 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 80045da:	e009      	b.n	80045f0 <GetDaScreenBlink+0x98>
		  }
		  case STATUS_MENU:
		  {
			  //printf("STATUS_MENU\r\n");
			  drawStatusMenu(menu_val);
 80045dc:	7bbb      	ldrb	r3, [r7, #14]
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 fa1a 	bl	8005a18 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 80045e4:	e004      	b.n	80045f0 <GetDaScreenBlink+0x98>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  //printf("SYSTEM INFO MENU\r\n");
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 80045e6:	7bbb      	ldrb	r3, [r7, #14]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f002 fbb3 	bl	8006d54 <drawSystemInfoMenu>
			  break;
 80045ee:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 80045f0:	2064      	movs	r0, #100	; 0x64
 80045f2:	f00b fec1 	bl	8010378 <osDelay>
	 	  ulNotifiedValue = 0;
 80045f6:	e7bb      	b.n	8004570 <GetDaScreenBlink+0x18>

080045f8 <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004600:	4b42      	ldr	r3, [pc, #264]	; (800470c <startGpioInputRead+0x114>)
 8004602:	681c      	ldr	r4, [r3, #0]
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	4842      	ldr	r0, [pc, #264]	; (8004710 <startGpioInputRead+0x118>)
 8004608:	f006 fdbc 	bl	800b184 <HAL_GPIO_ReadPin>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <startGpioInputRead+0x11c>)
 8004612:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004614:	4b3d      	ldr	r3, [pc, #244]	; (800470c <startGpioInputRead+0x114>)
 8004616:	685c      	ldr	r4, [r3, #4]
 8004618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800461c:	483e      	ldr	r0, [pc, #248]	; (8004718 <startGpioInputRead+0x120>)
 800461e:	f006 fdb1 	bl	800b184 <HAL_GPIO_ReadPin>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <startGpioInputRead+0x11c>)
 8004628:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 800462a:	4b38      	ldr	r3, [pc, #224]	; (800470c <startGpioInputRead+0x114>)
 800462c:	689c      	ldr	r4, [r3, #8]
 800462e:	2110      	movs	r1, #16
 8004630:	483a      	ldr	r0, [pc, #232]	; (800471c <startGpioInputRead+0x124>)
 8004632:	f006 fda7 	bl	800b184 <HAL_GPIO_ReadPin>
 8004636:	4603      	mov	r3, r0
 8004638:	461a      	mov	r2, r3
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <startGpioInputRead+0x11c>)
 800463c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <startGpioInputRead+0x114>)
 8004640:	68dc      	ldr	r4, [r3, #12]
 8004642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004646:	4835      	ldr	r0, [pc, #212]	; (800471c <startGpioInputRead+0x124>)
 8004648:	f006 fd9c 	bl	800b184 <HAL_GPIO_ReadPin>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <startGpioInputRead+0x11c>)
 8004652:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <startGpioInputRead+0x114>)
 8004656:	691c      	ldr	r4, [r3, #16]
 8004658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800465c:	482f      	ldr	r0, [pc, #188]	; (800471c <startGpioInputRead+0x124>)
 800465e:	f006 fd91 	bl	800b184 <HAL_GPIO_ReadPin>
 8004662:	4603      	mov	r3, r0
 8004664:	461a      	mov	r2, r3
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <startGpioInputRead+0x11c>)
 8004668:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800466a:	4b28      	ldr	r3, [pc, #160]	; (800470c <startGpioInputRead+0x114>)
 800466c:	695c      	ldr	r4, [r3, #20]
 800466e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004672:	482a      	ldr	r0, [pc, #168]	; (800471c <startGpioInputRead+0x124>)
 8004674:	f006 fd86 	bl	800b184 <HAL_GPIO_ReadPin>
 8004678:	4603      	mov	r3, r0
 800467a:	461a      	mov	r2, r3
 800467c:	4b25      	ldr	r3, [pc, #148]	; (8004714 <startGpioInputRead+0x11c>)
 800467e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8004680:	4b22      	ldr	r3, [pc, #136]	; (800470c <startGpioInputRead+0x114>)
 8004682:	699c      	ldr	r4, [r3, #24]
 8004684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004688:	4824      	ldr	r0, [pc, #144]	; (800471c <startGpioInputRead+0x124>)
 800468a:	f006 fd7b 	bl	800b184 <HAL_GPIO_ReadPin>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	4b20      	ldr	r3, [pc, #128]	; (8004714 <startGpioInputRead+0x11c>)
 8004694:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <startGpioInputRead+0x114>)
 8004698:	69dc      	ldr	r4, [r3, #28]
 800469a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800469e:	481f      	ldr	r0, [pc, #124]	; (800471c <startGpioInputRead+0x124>)
 80046a0:	f006 fd70 	bl	800b184 <HAL_GPIO_ReadPin>
 80046a4:	4603      	mov	r3, r0
 80046a6:	461a      	mov	r2, r3
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <startGpioInputRead+0x11c>)
 80046aa:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 80046ac:	4b17      	ldr	r3, [pc, #92]	; (800470c <startGpioInputRead+0x114>)
 80046ae:	6a1c      	ldr	r4, [r3, #32]
 80046b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046b4:	4819      	ldr	r0, [pc, #100]	; (800471c <startGpioInputRead+0x124>)
 80046b6:	f006 fd65 	bl	800b184 <HAL_GPIO_ReadPin>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <startGpioInputRead+0x11c>)
 80046c0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 80046c2:	4b12      	ldr	r3, [pc, #72]	; (800470c <startGpioInputRead+0x114>)
 80046c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80046c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046ca:	4814      	ldr	r0, [pc, #80]	; (800471c <startGpioInputRead+0x124>)
 80046cc:	f006 fd5a 	bl	800b184 <HAL_GPIO_ReadPin>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <startGpioInputRead+0x11c>)
 80046d6:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <startGpioInputRead+0x114>)
 80046da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80046dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046e0:	480e      	ldr	r0, [pc, #56]	; (800471c <startGpioInputRead+0x124>)
 80046e2:	f006 fd4f 	bl	800b184 <HAL_GPIO_ReadPin>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <startGpioInputRead+0x11c>)
 80046ec:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <startGpioInputRead+0x114>)
 80046f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80046f2:	2108      	movs	r1, #8
 80046f4:	480a      	ldr	r0, [pc, #40]	; (8004720 <startGpioInputRead+0x128>)
 80046f6:	f006 fd45 	bl	800b184 <HAL_GPIO_ReadPin>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <startGpioInputRead+0x11c>)
 8004700:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004702:	f240 30b6 	movw	r0, #950	; 0x3b6
 8004706:	f00b fe37 	bl	8010378 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 800470a:	e779      	b.n	8004600 <startGpioInputRead+0x8>
 800470c:	20000014 	.word	0x20000014
 8004710:	40020400 	.word	0x40020400
 8004714:	20028d14 	.word	0x20028d14
 8004718:	40020800 	.word	0x40020800
 800471c:	40020c00 	.word	0x40020c00
 8004720:	40021000 	.word	0x40021000

08004724 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004730:	2301      	movs	r3, #1
 8004732:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004734:	7bbb      	ldrb	r3, [r7, #14]
 8004736:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004738:	2303      	movs	r3, #3
 800473a:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004740:	4b55      	ldr	r3, [pc, #340]	; (8004898 <startNavigationTask+0x174>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	3b01      	subs	r3, #1
 8004746:	2b03      	cmp	r3, #3
 8004748:	d86f      	bhi.n	800482a <startNavigationTask+0x106>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <startNavigationTask+0x2c>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004761 	.word	0x08004761
 8004754:	08004793 	.word	0x08004793
 8004758:	080047c7 	.word	0x080047c7
 800475c:	080047f5 	.word	0x080047f5
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d070      	beq.n	8004848 <startNavigationTask+0x124>
 8004766:	4b4d      	ldr	r3, [pc, #308]	; (800489c <startNavigationTask+0x178>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d16c      	bne.n	8004848 <startNavigationTask+0x124>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	3b01      	subs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004774:	4b4a      	ldr	r3, [pc, #296]	; (80048a0 <startNavigationTask+0x17c>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	f043 0201 	orr.w	r2, r3, #1
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	4313      	orrs	r3, r2
 8004786:	4619      	mov	r1, r3
 8004788:	2300      	movs	r3, #0
 800478a:	2204      	movs	r2, #4
 800478c:	f00d fcee 	bl	801216c <xTaskGenericNotify>
		}
		break;
 8004790:	e05a      	b.n	8004848 <startNavigationTask+0x124>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	7b3b      	ldrb	r3, [r7, #12]
 8004796:	429a      	cmp	r2, r3
 8004798:	d258      	bcs.n	800484c <startNavigationTask+0x128>
 800479a:	4b40      	ldr	r3, [pc, #256]	; (800489c <startNavigationTask+0x178>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d154      	bne.n	800484c <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	3301      	adds	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80047a8:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <startNavigationTask+0x17c>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	f043 0202 	orr.w	r2, r3, #2
 80047b4:	7bbb      	ldrb	r3, [r7, #14]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	4313      	orrs	r3, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	2300      	movs	r3, #0
 80047be:	2204      	movs	r2, #4
 80047c0:	f00d fcd4 	bl	801216c <xTaskGenericNotify>
		}
		break;
 80047c4:	e042      	b.n	800484c <startNavigationTask+0x128>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 80047c6:	4b35      	ldr	r3, [pc, #212]	; (800489c <startNavigationTask+0x178>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <startNavigationTask+0xb2>
			menu_run = prev_menu;
 80047ce:	7b7b      	ldrb	r3, [r7, #13]
 80047d0:	73bb      	strb	r3, [r7, #14]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80047d6:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <startNavigationTask+0x17c>)
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	f043 0203 	orr.w	r2, r3, #3
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	4313      	orrs	r3, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	2204      	movs	r2, #4
 80047ee:	f00d fcbd 	bl	801216c <xTaskGenericNotify>
		break;
 80047f2:	e02c      	b.n	800484e <startNavigationTask+0x12a>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d108      	bne.n	800480c <startNavigationTask+0xe8>
			prev_menu = menu_run;		// save currently running menu for BACK button
 80047fa:	7bbb      	ldrb	r3, [r7, #14]
 80047fc:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	3301      	adds	r3, #1
 8004802:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800480c:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <startNavigationTask+0x17c>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	7bbb      	ldrb	r3, [r7, #14]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	4313      	orrs	r3, r2
 800481e:	4619      	mov	r1, r3
 8004820:	2300      	movs	r3, #0
 8004822:	2204      	movs	r2, #4
 8004824:	f00d fca2 	bl	801216c <xTaskGenericNotify>
		break;
 8004828:	e011      	b.n	800484e <startNavigationTask+0x12a>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <startNavigationTask+0x17c>)
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	f043 0205 	orr.w	r2, r3, #5
 8004836:	7bbb      	ldrb	r3, [r7, #14]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	4313      	orrs	r3, r2
 800483c:	4619      	mov	r1, r3
 800483e:	2300      	movs	r3, #0
 8004840:	2204      	movs	r2, #4
 8004842:	f00d fc93 	bl	801216c <xTaskGenericNotify>
		break;
 8004846:	e002      	b.n	800484e <startNavigationTask+0x12a>
		break;
 8004848:	bf00      	nop
 800484a:	e000      	b.n	800484e <startNavigationTask+0x12a>
		break;
 800484c:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 800484e:	7bbb      	ldrb	r3, [r7, #14]
 8004850:	3b01      	subs	r3, #1
 8004852:	2b03      	cmp	r3, #3
 8004854:	d816      	bhi.n	8004884 <startNavigationTask+0x160>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <startNavigationTask+0x138>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	08004873 	.word	0x08004873
 8004860:	0800486d 	.word	0x0800486d
 8004864:	08004879 	.word	0x08004879
 8004868:	0800487f 	.word	0x0800487f

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 800486c:	2305      	movs	r3, #5
 800486e:	733b      	strb	r3, [r7, #12]
		break;
 8004870:	e00b      	b.n	800488a <startNavigationTask+0x166>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004872:	2303      	movs	r3, #3
 8004874:	733b      	strb	r3, [r7, #12]
		break;
 8004876:	e008      	b.n	800488a <startNavigationTask+0x166>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 8004878:	2303      	movs	r3, #3
 800487a:	733b      	strb	r3, [r7, #12]
		break;
 800487c:	e005      	b.n	800488a <startNavigationTask+0x166>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 800487e:	2302      	movs	r3, #2
 8004880:	733b      	strb	r3, [r7, #12]
		break;
 8004882:	e002      	b.n	800488a <startNavigationTask+0x166>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004884:	2305      	movs	r3, #5
 8004886:	733b      	strb	r3, [r7, #12]
		break;
 8004888:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 800488a:	4b03      	ldr	r3, [pc, #12]	; (8004898 <startNavigationTask+0x174>)
 800488c:	2205      	movs	r2, #5
 800488e:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 8004890:	20c8      	movs	r0, #200	; 0xc8
 8004892:	f00b fd71 	bl	8010378 <osDelay>
	switch(inputButtonSet)
 8004896:	e753      	b.n	8004740 <startNavigationTask+0x1c>
 8004898:	200000dc 	.word	0x200000dc
 800489c:	200032ac 	.word	0x200032ac
 80048a0:	200310b8 	.word	0x200310b8

080048a4 <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
	uint8_t G;
	uint8_t B;
	float * presentADCValues;
  for(;;)
  {
	  R = false;
 80048ac:	2300      	movs	r3, #0
 80048ae:	75fb      	strb	r3, [r7, #23]
	  G = false;
 80048b0:	2300      	movs	r3, #0
 80048b2:	75bb      	strb	r3, [r7, #22]
	  B = false;
 80048b4:	2300      	movs	r3, #0
 80048b6:	757b      	strb	r3, [r7, #21]
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 80048b8:	4ba2      	ldr	r3, [pc, #648]	; (8004b44 <startErrorLEDs+0x2a0>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <startErrorLEDs+0x32>
 80048c0:	4ba0      	ldr	r3, [pc, #640]	; (8004b44 <startErrorLEDs+0x2a0>)
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <startErrorLEDs+0x32>
 80048c8:	4b9e      	ldr	r3, [pc, #632]	; (8004b44 <startErrorLEDs+0x2a0>)
 80048ca:	789b      	ldrb	r3, [r3, #2]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <startErrorLEDs+0x32>
		  presentADCValues = getADCValues();
 80048d0:	f7ff f922 	bl	8003b18 <getADCValues>
 80048d4:	6138      	str	r0, [r7, #16]
	  }
	  if(*(presentADCValues+Adc.adc0) > VSYS_FLT){
 80048d6:	4b9c      	ldr	r3, [pc, #624]	; (8004b48 <startErrorLEDs+0x2a4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80048e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	dd03      	ble.n	80048fa <startErrorLEDs+0x56>
		  errorLED.vsysPMIFault=false;
 80048f2:	4b96      	ldr	r3, [pc, #600]	; (8004b4c <startErrorLEDs+0x2a8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	705a      	strb	r2, [r3, #1]
 80048f8:	e002      	b.n	8004900 <startErrorLEDs+0x5c>
	  }
	  else{
		  errorLED.vsysPMIFault=true;
 80048fa:	4b94      	ldr	r3, [pc, #592]	; (8004b4c <startErrorLEDs+0x2a8>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	705a      	strb	r2, [r3, #1]
	  }
	  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 8004900:	4b93      	ldr	r3, [pc, #588]	; (8004b50 <startErrorLEDs+0x2ac>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <startErrorLEDs+0x6c>
 8004908:	4b91      	ldr	r3, [pc, #580]	; (8004b50 <startErrorLEDs+0x2ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <startErrorLEDs+0x74>
 8004910:	4b8f      	ldr	r3, [pc, #572]	; (8004b50 <startErrorLEDs+0x2ac>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	da03      	bge.n	8004920 <startErrorLEDs+0x7c>
		  errorLED.zionFault=true;
 8004918:	4b8c      	ldr	r3, [pc, #560]	; (8004b4c <startErrorLEDs+0x2a8>)
 800491a:	2201      	movs	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e002      	b.n	8004926 <startErrorLEDs+0x82>
	  }
	  else{
		  errorLED.zionFault=false;
 8004920:	4b8a      	ldr	r3, [pc, #552]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	  }
	  i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8004926:	4b8b      	ldr	r3, [pc, #556]	; (8004b54 <startErrorLEDs+0x2b0>)
 8004928:	7818      	ldrb	r0, [r3, #0]
 800492a:	4b8a      	ldr	r3, [pc, #552]	; (8004b54 <startErrorLEDs+0x2b0>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2301      	movs	r3, #1
 8004932:	2200      	movs	r2, #0
 8004934:	21f0      	movs	r1, #240	; 0xf0
 8004936:	f7fe fe7b 	bl	8003630 <writeI2CRegister>
 800493a:	60f8      	str	r0, [r7, #12]

	  //only allow the error led write commands if the led driver responds.
	  if(i2cCheck == HAL_OK)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f040 80f8 	bne.w	8004b34 <startErrorLEDs+0x290>
	  {
		  errorLED.ledDriver=false;
 8004944:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004946:	2200      	movs	r2, #0
 8004948:	735a      	strb	r2, [r3, #13]

		  switch(bootButtons.bootMode)
 800494a:	4b83      	ldr	r3, [pc, #524]	; (8004b58 <startErrorLEDs+0x2b4>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	2b05      	cmp	r3, #5
 8004950:	d86e      	bhi.n	8004a30 <startErrorLEDs+0x18c>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <startErrorLEDs+0xb4>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004971 	.word	0x08004971
 800495c:	0800498f 	.word	0x0800498f
 8004960:	080049ad 	.word	0x080049ad
 8004964:	080049cf 	.word	0x080049cf
 8004968:	08004a0f 	.word	0x08004a0f
 800496c:	080049ed 	.word	0x080049ed
		  {
			case UNINITIALIZED:
				errorLED.standard_boot=false;
 8004970:	4b76      	ldr	r3, [pc, #472]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004972:	2200      	movs	r2, #0
 8004974:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 8004976:	4b75      	ldr	r3, [pc, #468]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004978:	2200      	movs	r2, #0
 800497a:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=false;
 800497c:	4b73      	ldr	r3, [pc, #460]	; (8004b4c <startErrorLEDs+0x2a8>)
 800497e:	2200      	movs	r2, #0
 8004980:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004982:	4b72      	ldr	r3, [pc, #456]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004984:	2200      	movs	r2, #0
 8004986:	71da      	strb	r2, [r3, #7]
				R = false;
 8004988:	2300      	movs	r3, #0
 800498a:	75fb      	strb	r3, [r7, #23]
				break;
 800498c:	e050      	b.n	8004a30 <startErrorLEDs+0x18c>
			case STANDARD:
				errorLED.standard_boot=true;
 800498e:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004990:	2201      	movs	r2, #1
 8004992:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 8004994:	4b6d      	ldr	r3, [pc, #436]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004996:	2200      	movs	r2, #0
 8004998:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=false;
 800499a:	4b6c      	ldr	r3, [pc, #432]	; (8004b4c <startErrorLEDs+0x2a8>)
 800499c:	2200      	movs	r2, #0
 800499e:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	71da      	strb	r2, [r3, #7]
				G = true;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75bb      	strb	r3, [r7, #22]
				break;
 80049aa:	e041      	b.n	8004a30 <startErrorLEDs+0x18c>
			case UEFI:
				errorLED.standard_boot=false;
 80049ac:	4b67      	ldr	r3, [pc, #412]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=true;
 80049b2:	4b66      	ldr	r3, [pc, #408]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=false;
 80049b8:	4b64      	ldr	r3, [pc, #400]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 80049be:	4b63      	ldr	r3, [pc, #396]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	71da      	strb	r2, [r3, #7]
				G = true;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75bb      	strb	r3, [r7, #22]
				B = true;
 80049c8:	2301      	movs	r3, #1
 80049ca:	757b      	strb	r3, [r7, #21]
				break;
 80049cc:	e030      	b.n	8004a30 <startErrorLEDs+0x18c>
			case EDL:
				errorLED.standard_boot=false;
 80049ce:	4b5f      	ldr	r3, [pc, #380]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 80049d4:	4b5d      	ldr	r3, [pc, #372]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=true;
 80049da:	4b5c      	ldr	r3, [pc, #368]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049dc:	2201      	movs	r2, #1
 80049de:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 80049e0:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	71da      	strb	r2, [r3, #7]
				B = true;
 80049e6:	2301      	movs	r3, #1
 80049e8:	757b      	strb	r3, [r7, #21]
				break;
 80049ea:	e021      	b.n	8004a30 <startErrorLEDs+0x18c>
			case MASS_STORAGE:
				errorLED.standard_boot=true;
 80049ec:	4b57      	ldr	r3, [pc, #348]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=true;
 80049f8:	4b54      	ldr	r3, [pc, #336]	; (8004b4c <startErrorLEDs+0x2a8>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 80049fe:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	71da      	strb	r2, [r3, #7]
				R = true;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
				B = true;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	757b      	strb	r3, [r7, #21]
				break;
 8004a0c:	e010      	b.n	8004a30 <startErrorLEDs+0x18c>
			case RECOVERY:
				errorLED.standard_boot=false;
 8004a0e:	4b4f      	ldr	r3, [pc, #316]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=true;
 8004a14:	4b4d      	ldr	r3, [pc, #308]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=true;
 8004a1a:	4b4c      	ldr	r3, [pc, #304]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004a20:	4b4a      	ldr	r3, [pc, #296]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	71da      	strb	r2, [r3, #7]
				R = true;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
				G = true;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75bb      	strb	r3, [r7, #22]
				break;
 8004a2e:	bf00      	nop
		  }
		  setRGBLED(R,G,B);
 8004a30:	7d7a      	ldrb	r2, [r7, #21]
 8004a32:	7db9      	ldrb	r1, [r7, #22]
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe ff26 	bl	8003888 <setRGBLED>
		  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	f7fe ff47 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004a52:	2014      	movs	r0, #20
 8004a54:	f00b fc90 	bl	8010378 <osDelay>
		  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 8004a58:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a5a:	785b      	ldrb	r3, [r3, #1]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	4619      	mov	r1, r3
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f7fe ff39 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004a6e:	2014      	movs	r0, #20
 8004a70:	f00b fc82 	bl	8010378 <osDelay>
		  setErrorLED(FAULT3,errorLED.fault3);
 8004a74:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a76:	789b      	ldrb	r3, [r3, #2]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	4619      	mov	r1, r3
 8004a84:	2002      	movs	r0, #2
 8004a86:	f7fe ff2b 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004a8a:	2014      	movs	r0, #20
 8004a8c:	f00b fc74 	bl	8010378 <osDelay>
		  setErrorLED(FAULT4,errorLED.fault4);
 8004a90:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004a92:	78db      	ldrb	r3, [r3, #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	2003      	movs	r0, #3
 8004aa2:	f7fe ff1d 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004aa6:	2014      	movs	r0, #20
 8004aa8:	f00b fc66 	bl	8010378 <osDelay>
		  setErrorLED(FAULT5,errorLED.fault5);
 8004aac:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004aae:	791b      	ldrb	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	4619      	mov	r1, r3
 8004abc:	2004      	movs	r0, #4
 8004abe:	f7fe ff0f 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004ac2:	2014      	movs	r0, #20
 8004ac4:	f00b fc58 	bl	8010378 <osDelay>
		  setErrorLED(FAULT6,errorLED.fault6);
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004aca:	795b      	ldrb	r3, [r3, #5]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	2005      	movs	r0, #5
 8004ada:	f7fe ff01 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004ade:	2014      	movs	r0, #20
 8004ae0:	f00b fc4a 	bl	8010378 <osDelay>
		  setErrorLED(FAULT7,errorLED.fault7);
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004ae6:	799b      	ldrb	r3, [r3, #6]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	4619      	mov	r1, r3
 8004af4:	2006      	movs	r0, #6
 8004af6:	f7fe fef3 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004afa:	2014      	movs	r0, #20
 8004afc:	f00b fc3c 	bl	8010378 <osDelay>
		  setErrorLED(FAULT8,errorLED.fault8);
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004b02:	7adb      	ldrb	r3, [r3, #11]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf14      	ite	ne
 8004b08:	2301      	movne	r3, #1
 8004b0a:	2300      	moveq	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	4619      	mov	r1, r3
 8004b10:	200a      	movs	r0, #10
 8004b12:	f7fe fee5 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004b16:	2014      	movs	r0, #20
 8004b18:	f00b fc2e 	bl	8010378 <osDelay>
		  setErrorLED(FAULT9,errorLED.fault9);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004b1e:	7b1b      	ldrb	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	200b      	movs	r0, #11
 8004b2e:	f7fe fed7 	bl	80038e0 <setErrorLED>
 8004b32:	e002      	b.n	8004b3a <startErrorLEDs+0x296>
	  }
	  else
		  errorLED.ledDriver = true;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <startErrorLEDs+0x2a8>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	735a      	strb	r2, [r3, #13]

    osDelay(500);
 8004b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b3e:	f00b fc1b 	bl	8010378 <osDelay>
	  R = false;
 8004b42:	e6b3      	b.n	80048ac <startErrorLEDs+0x8>
 8004b44:	20029264 	.word	0x20029264
 8004b48:	2000007c 	.word	0x2000007c
 8004b4c:	200032d8 	.word	0x200032d8
 8004b50:	20003274 	.word	0x20003274
 8004b54:	20000004 	.word	0x20000004
 8004b58:	200032ac 	.word	0x200032ac

08004b5c <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004b68:	4b79      	ldr	r3, [pc, #484]	; (8004d50 <startZionRead+0x1f4>)
 8004b6a:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 8004b6c:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <startZionRead+0x1f8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 80e5 	bne.w	8004d40 <startZionRead+0x1e4>
		  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8004b76:	4b78      	ldr	r3, [pc, #480]	; (8004d58 <startZionRead+0x1fc>)
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	4b77      	ldr	r3, [pc, #476]	; (8004d58 <startZionRead+0x1fc>)
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b75      	ldr	r3, [pc, #468]	; (8004d58 <startZionRead+0x1fc>)
 8004b84:	789b      	ldrb	r3, [r3, #2]
 8004b86:	4013      	ands	r3, r2
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 8004b8e:	f7fe ffc3 	bl	8003b18 <getADCValues>
 8004b92:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 8004b94:	4b71      	ldr	r3, [pc, #452]	; (8004d5c <startZionRead+0x200>)
 8004b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 8004ba2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ba6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004d60 <startZionRead+0x204>
 8004baa:	eef4 7a47 	vcmp.f32	s15, s14
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	f000 80c8 	beq.w	8004d46 <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004bb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bba:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	dd5d      	ble.n	8004c84 <startZionRead+0x128>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d15a      	bne.n	8004c84 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 8004bce:	f004 fe6b 	bl	80098a8 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <startZionRead+0x208>)
 8004bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	613b      	str	r3, [r7, #16]
				  if(runtime > 15){
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b0f      	cmp	r3, #15
 8004be2:	f340 80af 	ble.w	8004d44 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 8004be6:	f004 fb5f 	bl	80092a8 <zionEEPROMPresence>
 8004bea:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d012      	beq.n	8004c1a <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 8004bf4:	4b57      	ldr	r3, [pc, #348]	; (8004d54 <startZionRead+0x1f8>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004bfa:	20a6      	movs	r0, #166	; 0xa6
 8004bfc:	f004 fba4 	bl	8009348 <parseZionEEPROM>
 8004c00:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a53      	ldr	r2, [pc, #332]	; (8004d54 <startZionRead+0x1f8>)
 8004c08:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4a51      	ldr	r2, [pc, #324]	; (8004d54 <startZionRead+0x1f8>)
 8004c10:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4a4f      	ldr	r2, [pc, #316]	; (8004d54 <startZionRead+0x1f8>)
 8004c18:	61d3      	str	r3, [r2, #28]
					  }

					  if(*(zionEEPROMPresent+1)){
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d012      	beq.n	8004c4a <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004c24:	4b4b      	ldr	r3, [pc, #300]	; (8004d54 <startZionRead+0x1f8>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004c2a:	20a8      	movs	r0, #168	; 0xa8
 8004c2c:	f004 fb8c 	bl	8009348 <parseZionEEPROM>
 8004c30:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a47      	ldr	r2, [pc, #284]	; (8004d54 <startZionRead+0x1f8>)
 8004c38:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4a45      	ldr	r2, [pc, #276]	; (8004d54 <startZionRead+0x1f8>)
 8004c40:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4a43      	ldr	r2, [pc, #268]	; (8004d54 <startZionRead+0x1f8>)
 8004c48:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004c54:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <startZionRead+0x1f8>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004c5a:	20aa      	movs	r0, #170	; 0xaa
 8004c5c:	f004 fb74 	bl	8009348 <parseZionEEPROM>
 8004c60:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3b      	ldr	r2, [pc, #236]	; (8004d54 <startZionRead+0x1f8>)
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4a39      	ldr	r2, [pc, #228]	; (8004d54 <startZionRead+0x1f8>)
 8004c70:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	4a37      	ldr	r2, [pc, #220]	; (8004d54 <startZionRead+0x1f8>)
 8004c78:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004c7a:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <startZionRead+0x1f8>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004c80:	f00b fb74 	bl	801036c <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10b      	bne.n	8004ca2 <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c90:	4835      	ldr	r0, [pc, #212]	; (8004d68 <startZionRead+0x20c>)
 8004c92:	f006 fa8f 	bl	800b1b4 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <startZionRead+0x1f8>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e051      	b.n	8004d46 <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 8004ca2:	f004 fb01 	bl	80092a8 <zionEEPROMPresence>
 8004ca6:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d012      	beq.n	8004cd6 <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004cb0:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <startZionRead+0x1f8>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004cb6:	20a6      	movs	r0, #166	; 0xa6
 8004cb8:	f004 fb46 	bl	8009348 <parseZionEEPROM>
 8004cbc:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <startZionRead+0x1f8>)
 8004cc4:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <startZionRead+0x1f8>)
 8004ccc:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	4a20      	ldr	r2, [pc, #128]	; (8004d54 <startZionRead+0x1f8>)
 8004cd4:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004ce0:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <startZionRead+0x1f8>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004ce6:	20a8      	movs	r0, #168	; 0xa8
 8004ce8:	f004 fb2e 	bl	8009348 <parseZionEEPROM>
 8004cec:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <startZionRead+0x1f8>)
 8004cf4:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <startZionRead+0x1f8>)
 8004cfc:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <startZionRead+0x1f8>)
 8004d04:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004d10:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <startZionRead+0x1f8>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004d16:	20aa      	movs	r0, #170	; 0xaa
 8004d18:	f004 fb16 	bl	8009348 <parseZionEEPROM>
 8004d1c:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <startZionRead+0x1f8>)
 8004d24:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	; (8004d54 <startZionRead+0x1f8>)
 8004d2c:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <startZionRead+0x1f8>)
 8004d34:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004d36:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <startZionRead+0x1f8>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004d3c:	f00b fb16 	bl	801036c <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 8004d40:	f00b fb14 	bl	801036c <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004d44:	bf00      	nop
	  }
    osDelay(400);
 8004d46:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004d4a:	f00b fb15 	bl	8010378 <osDelay>
	  if(!ZION.zionFinished){
 8004d4e:	e70d      	b.n	8004b6c <startZionRead+0x10>
 8004d50:	429a0000 	.word	0x429a0000
 8004d54:	20003274 	.word	0x20003274
 8004d58:	20029264 	.word	0x20029264
 8004d5c:	2000007c 	.word	0x2000007c
 8004d60:	429a0000 	.word	0x429a0000
 8004d64:	10624dd3 	.word	0x10624dd3
 8004d68:	40020400 	.word	0x40020400

08004d6c <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
	int pwrOn=0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
	int presentTime=0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 8004d84:	4b92      	ldr	r3, [pc, #584]	; (8004fd0 <startBootButtons+0x264>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 81ed 	beq.w	8005168 <startBootButtons+0x3fc>
		  presentTime = (HAL_GetTick());
 8004d8e:	f004 fd8b 	bl	80098a8 <HAL_GetTick>
 8004d92:	4603      	mov	r3, r0
 8004d94:	60bb      	str	r3, [r7, #8]
		  if(timeTurnedOn==0){
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <startBootButtons+0x34>
			  timeTurnedOn=presentTime;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	613b      	str	r3, [r7, #16]
		  }
		  if(bootButtons.bootMode !=0){
 8004da0:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <startBootButtons+0x264>)
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80ce 	beq.w	8004f46 <startBootButtons+0x1da>
			  if(bootButtons.btn1){ //DPAD UP
 8004daa:	4b89      	ldr	r3, [pc, #548]	; (8004fd0 <startBootButtons+0x264>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <startBootButtons+0x54>
				  BTN1_ON;
 8004db2:	2201      	movs	r2, #1
 8004db4:	2108      	movs	r1, #8
 8004db6:	4887      	ldr	r0, [pc, #540]	; (8004fd4 <startBootButtons+0x268>)
 8004db8:	f006 f9fc 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004dc0:	4b83      	ldr	r3, [pc, #524]	; (8004fd0 <startBootButtons+0x264>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d006      	beq.n	8004dd6 <startBootButtons+0x6a>
				  BTN2_ON;
 8004dc8:	2201      	movs	r2, #1
 8004dca:	2110      	movs	r1, #16
 8004dcc:	4881      	ldr	r0, [pc, #516]	; (8004fd4 <startBootButtons+0x268>)
 8004dce:	f006 f9f1 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004dd6:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <startBootButtons+0x264>)
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d006      	beq.n	8004dec <startBootButtons+0x80>
				  BTN3_ON;
 8004dde:	2201      	movs	r2, #1
 8004de0:	2120      	movs	r1, #32
 8004de2:	487c      	ldr	r0, [pc, #496]	; (8004fd4 <startBootButtons+0x268>)
 8004de4:	f006 f9e6 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004de8:	2301      	movs	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn4){
 8004dec:	4b78      	ldr	r3, [pc, #480]	; (8004fd0 <startBootButtons+0x264>)
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <startBootButtons+0x98>
				  BTN4_ON;
 8004df4:	2201      	movs	r2, #1
 8004df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dfa:	4876      	ldr	r0, [pc, #472]	; (8004fd4 <startBootButtons+0x268>)
 8004dfc:	f006 f9da 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn5){
 8004e04:	4b72      	ldr	r3, [pc, #456]	; (8004fd0 <startBootButtons+0x264>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <startBootButtons+0xb0>
				  BTN5_ON;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e12:	4870      	ldr	r0, [pc, #448]	; (8004fd4 <startBootButtons+0x268>)
 8004e14:	f006 f9ce 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.edl_sw){
 8004e1c:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <startBootButtons+0x264>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <startBootButtons+0xc8>
				  EDL_SW_ON;
 8004e24:	2201      	movs	r2, #1
 8004e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e2a:	486b      	ldr	r0, [pc, #428]	; (8004fd8 <startBootButtons+0x26c>)
 8004e2c:	f006 f9c2 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e30:	2301      	movs	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.ex_sw){
 8004e34:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <startBootButtons+0x264>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <startBootButtons+0xe0>
				  EX_SW_ON;
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e42:	4865      	ldr	r0, [pc, #404]	; (8004fd8 <startBootButtons+0x26c>)
 8004e44:	f006 f9b6 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	617b      	str	r3, [r7, #20]
			  }
			  setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
 8004e4c:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <startBootButtons+0x270>)
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe f9b4 	bl	80031c0 <setOutputGPIOState>
			  osDelay(500);
 8004e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e5c:	f00b fa8c 	bl	8010378 <osDelay>
			  setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
 8004e60:	4b5e      	ldr	r3, [pc, #376]	; (8004fdc <startBootButtons+0x270>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	2101      	movs	r1, #1
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe f9aa 	bl	80031c0 <setOutputGPIOState>
			  osDelay(500);
 8004e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e70:	f00b fa82 	bl	8010378 <osDelay>
			  BTN1_OFF;
 8004e74:	2200      	movs	r2, #0
 8004e76:	2108      	movs	r1, #8
 8004e78:	4856      	ldr	r0, [pc, #344]	; (8004fd4 <startBootButtons+0x268>)
 8004e7a:	f006 f99b 	bl	800b1b4 <HAL_GPIO_WritePin>
			  BTN2_OFF;
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2110      	movs	r1, #16
 8004e82:	4854      	ldr	r0, [pc, #336]	; (8004fd4 <startBootButtons+0x268>)
 8004e84:	f006 f996 	bl	800b1b4 <HAL_GPIO_WritePin>
			  BTN3_OFF;
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	4851      	ldr	r0, [pc, #324]	; (8004fd4 <startBootButtons+0x268>)
 8004e8e:	f006 f991 	bl	800b1b4 <HAL_GPIO_WritePin>
			  BTN4_OFF;
 8004e92:	2200      	movs	r2, #0
 8004e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e98:	484e      	ldr	r0, [pc, #312]	; (8004fd4 <startBootButtons+0x268>)
 8004e9a:	f006 f98b 	bl	800b1b4 <HAL_GPIO_WritePin>
			  BTN5_OFF;
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ea4:	484b      	ldr	r0, [pc, #300]	; (8004fd4 <startBootButtons+0x268>)
 8004ea6:	f006 f985 	bl	800b1b4 <HAL_GPIO_WritePin>
			  EDL_SW_OFF;
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eb0:	4849      	ldr	r0, [pc, #292]	; (8004fd8 <startBootButtons+0x26c>)
 8004eb2:	f006 f97f 	bl	800b1b4 <HAL_GPIO_WritePin>
			  EX_SW_OFF;
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ebc:	4846      	ldr	r0, [pc, #280]	; (8004fd8 <startBootButtons+0x26c>)
 8004ebe:	f006 f979 	bl	800b1b4 <HAL_GPIO_WritePin>
			  if(bootButtons.btn1){
 8004ec2:	4b43      	ldr	r3, [pc, #268]	; (8004fd0 <startBootButtons+0x264>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <startBootButtons+0x166>
				  bootButtons.bootMode= RECOVERY;
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <startBootButtons+0x264>)
 8004ecc:	2204      	movs	r2, #4
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
 8004ed0:	e01a      	b.n	8004f08 <startBootButtons+0x19c>
				  //errorLEDState[RECOVERY_LED]=1;
			  }
			  else if(bootButtons.btn2){
 8004ed2:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <startBootButtons+0x264>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <startBootButtons+0x176>
				  bootButtons.bootMode= MASS_STORAGE;
 8004eda:	4b3d      	ldr	r3, [pc, #244]	; (8004fd0 <startBootButtons+0x264>)
 8004edc:	2205      	movs	r2, #5
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee0:	e012      	b.n	8004f08 <startBootButtons+0x19c>
				 // errorLEDState[MASS_STORAGE_LED]=1;
			  }
			  else if(bootButtons.btn3){
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <startBootButtons+0x264>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <startBootButtons+0x186>
				  bootButtons.bootMode= UEFI;
 8004eea:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <startBootButtons+0x264>)
 8004eec:	2202      	movs	r2, #2
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef0:	e00a      	b.n	8004f08 <startBootButtons+0x19c>
				  //errorLEDState[UEFI_LED]=1;
			  }
			  else if(bootButtons.edl_sw){
 8004ef2:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <startBootButtons+0x264>)
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <startBootButtons+0x196>
				  bootButtons.bootMode= EDL;
 8004efa:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <startBootButtons+0x264>)
 8004efc:	2203      	movs	r2, #3
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28
 8004f00:	e002      	b.n	8004f08 <startBootButtons+0x19c>
				  //errorLEDState[EDL_LED]=1;
			  }
			  else{
				  bootButtons.bootMode=STANDARD;
 8004f02:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <startBootButtons+0x264>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
				  //errorLEDState[STANDARD_LED]=1;
			  }
			  bootButtons.btn0=0;
 8004f08:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <startBootButtons+0x264>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 8004f0e:	4b30      	ldr	r3, [pc, #192]	; (8004fd0 <startBootButtons+0x264>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8004f14:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <startBootButtons+0x264>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <startBootButtons+0x264>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 8004f20:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <startBootButtons+0x264>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 8004f26:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <startBootButtons+0x264>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 8004f2c:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <startBootButtons+0x264>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8004f32:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <startBootButtons+0x264>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <startBootButtons+0x264>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <startBootButtons+0x264>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e110      	b.n	8005168 <startBootButtons+0x3fc>

		  }
		  else{
			  if((bootButtons.btn0) || pwrBtnReady){ //power button
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <startBootButtons+0x264>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <startBootButtons+0x1e8>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d06a      	beq.n	800502a <startBootButtons+0x2be>
				  BTN0_ON;
 8004f54:	2201      	movs	r2, #1
 8004f56:	2104      	movs	r1, #4
 8004f58:	481e      	ldr	r0, [pc, #120]	; (8004fd4 <startBootButtons+0x268>)
 8004f5a:	f006 f92b 	bl	800b1b4 <HAL_GPIO_WritePin>
				  timeTurnedOn = (HAL_GetTick());
 8004f5e:	f004 fca3 	bl	80098a8 <HAL_GetTick>
 8004f62:	4603      	mov	r3, r0
 8004f64:	613b      	str	r3, [r7, #16]
				  pwrBtnReady=0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
				  pwrOn = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
				  osDelay(500);
 8004f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f72:	f00b fa01 	bl	8010378 <osDelay>
				  BTN0_OFF;
 8004f76:	2200      	movs	r2, #0
 8004f78:	2104      	movs	r1, #4
 8004f7a:	4816      	ldr	r0, [pc, #88]	; (8004fd4 <startBootButtons+0x268>)
 8004f7c:	f006 f91a 	bl	800b1b4 <HAL_GPIO_WritePin>
				  osDelay(500);
 8004f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f84:	f00b f9f8 	bl	8010378 <osDelay>
				  pwrOn=0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
				  timeTurnedOn=0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
				  if(bootButtons.btn0){
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <startBootButtons+0x264>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <startBootButtons+0x234>
					  bootButtons.bootMode= STANDARD;
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <startBootButtons+0x264>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f9e:	e026      	b.n	8004fee <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn1){
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <startBootButtons+0x264>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <startBootButtons+0x244>
					  bootButtons.bootMode= RECOVERY;
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <startBootButtons+0x264>)
 8004faa:	2204      	movs	r2, #4
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28
 8004fae:	e01e      	b.n	8004fee <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn2){
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <startBootButtons+0x264>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <startBootButtons+0x254>
					  bootButtons.bootMode= MASS_STORAGE;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <startBootButtons+0x264>)
 8004fba:	2205      	movs	r2, #5
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28
 8004fbe:	e016      	b.n	8004fee <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn3){
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <startBootButtons+0x264>)
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <startBootButtons+0x274>
					  bootButtons.bootMode= UEFI;
 8004fc8:	4b01      	ldr	r3, [pc, #4]	; (8004fd0 <startBootButtons+0x264>)
 8004fca:	2202      	movs	r2, #2
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8004fce:	e00e      	b.n	8004fee <startBootButtons+0x282>
 8004fd0:	200032ac 	.word	0x200032ac
 8004fd4:	40021400 	.word	0x40021400
 8004fd8:	40020400 	.word	0x40020400
 8004fdc:	20000044 	.word	0x20000044
				  }
				  else if(bootButtons.edl_sw){
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <startBootButtons+0x408>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <startBootButtons+0x282>
					  bootButtons.bootMode= EDL;
 8004fe8:	4b62      	ldr	r3, [pc, #392]	; (8005174 <startBootButtons+0x408>)
 8004fea:	2203      	movs	r2, #3
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
				  }
				  bootButtons.btn0=0;
 8004fee:	4b61      	ldr	r3, [pc, #388]	; (8005174 <startBootButtons+0x408>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
				  bootButtons.btn1=0;
 8004ff4:	4b5f      	ldr	r3, [pc, #380]	; (8005174 <startBootButtons+0x408>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
				  bootButtons.btn2=0;
 8004ffa:	4b5e      	ldr	r3, [pc, #376]	; (8005174 <startBootButtons+0x408>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	60da      	str	r2, [r3, #12]
				  bootButtons.btn3=0;
 8005000:	4b5c      	ldr	r3, [pc, #368]	; (8005174 <startBootButtons+0x408>)
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
				  bootButtons.btn4=0;
 8005006:	4b5b      	ldr	r3, [pc, #364]	; (8005174 <startBootButtons+0x408>)
 8005008:	2200      	movs	r2, #0
 800500a:	615a      	str	r2, [r3, #20]
				  bootButtons.btn5=0;
 800500c:	4b59      	ldr	r3, [pc, #356]	; (8005174 <startBootButtons+0x408>)
 800500e:	2200      	movs	r2, #0
 8005010:	619a      	str	r2, [r3, #24]
				  bootButtons.edl_sw=0;
 8005012:	4b58      	ldr	r3, [pc, #352]	; (8005174 <startBootButtons+0x408>)
 8005014:	2200      	movs	r2, #0
 8005016:	61da      	str	r2, [r3, #28]
				  bootButtons.ex_sw=0;
 8005018:	4b56      	ldr	r3, [pc, #344]	; (8005174 <startBootButtons+0x408>)
 800501a:	2200      	movs	r2, #0
 800501c:	621a      	str	r2, [r3, #32]
				  bootButtons.modeClear=1;
 800501e:	4b55      	ldr	r3, [pc, #340]	; (8005174 <startBootButtons+0x408>)
 8005020:	2201      	movs	r2, #1
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
				  bootButtons.bootModeSet=0;
 8005024:	4b53      	ldr	r3, [pc, #332]	; (8005174 <startBootButtons+0x408>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
				  //osDelay(300);
			  }
			  if(bootButtons.btn1){ //DPAD UP
 800502a:	4b52      	ldr	r3, [pc, #328]	; (8005174 <startBootButtons+0x408>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <startBootButtons+0x2d6>
				  BTN1_ON;
 8005032:	2201      	movs	r2, #1
 8005034:	2108      	movs	r1, #8
 8005036:	4850      	ldr	r0, [pc, #320]	; (8005178 <startBootButtons+0x40c>)
 8005038:	f006 f8bc 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 800503c:	2301      	movs	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e008      	b.n	8005054 <startBootButtons+0x2e8>
			  }
			  else if(!(bootButtons.btn1)){ //DPAD UP
 8005042:	4b4c      	ldr	r3, [pc, #304]	; (8005174 <startBootButtons+0x408>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <startBootButtons+0x2e8>
				  BTN1_OFF;
 800504a:	2200      	movs	r2, #0
 800504c:	2108      	movs	r1, #8
 800504e:	484a      	ldr	r0, [pc, #296]	; (8005178 <startBootButtons+0x40c>)
 8005050:	f006 f8b0 	bl	800b1b4 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8005054:	4b47      	ldr	r3, [pc, #284]	; (8005174 <startBootButtons+0x408>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <startBootButtons+0x300>
				  BTN2_ON;
 800505c:	2201      	movs	r2, #1
 800505e:	2110      	movs	r1, #16
 8005060:	4845      	ldr	r0, [pc, #276]	; (8005178 <startBootButtons+0x40c>)
 8005062:	f006 f8a7 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8005066:	2301      	movs	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e008      	b.n	800507e <startBootButtons+0x312>
			  }
			  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 800506c:	4b41      	ldr	r3, [pc, #260]	; (8005174 <startBootButtons+0x408>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <startBootButtons+0x312>
				  BTN2_OFF;
 8005074:	2200      	movs	r2, #0
 8005076:	2110      	movs	r1, #16
 8005078:	483f      	ldr	r0, [pc, #252]	; (8005178 <startBootButtons+0x40c>)
 800507a:	f006 f89b 	bl	800b1b4 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 800507e:	4b3d      	ldr	r3, [pc, #244]	; (8005174 <startBootButtons+0x408>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <startBootButtons+0x32a>
				  BTN3_ON;
 8005086:	2201      	movs	r2, #1
 8005088:	2120      	movs	r1, #32
 800508a:	483b      	ldr	r0, [pc, #236]	; (8005178 <startBootButtons+0x40c>)
 800508c:	f006 f892 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8005090:	2301      	movs	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e008      	b.n	80050a8 <startBootButtons+0x33c>
			  }
			  else if(!(bootButtons.btn3)){ //DPAD LEFT
 8005096:	4b37      	ldr	r3, [pc, #220]	; (8005174 <startBootButtons+0x408>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <startBootButtons+0x33c>
				  BTN3_OFF;
 800509e:	2200      	movs	r2, #0
 80050a0:	2120      	movs	r1, #32
 80050a2:	4835      	ldr	r0, [pc, #212]	; (8005178 <startBootButtons+0x40c>)
 80050a4:	f006 f886 	bl	800b1b4 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn4){
 80050a8:	4b32      	ldr	r3, [pc, #200]	; (8005174 <startBootButtons+0x408>)
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <startBootButtons+0x356>
				  BTN4_ON;
 80050b0:	2201      	movs	r2, #1
 80050b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050b6:	4830      	ldr	r0, [pc, #192]	; (8005178 <startBootButtons+0x40c>)
 80050b8:	f006 f87c 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 80050bc:	2301      	movs	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	e00d      	b.n	80050de <startBootButtons+0x372>
			  }
			  else if(!(bootButtons.btn4)){
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <startBootButtons+0x408>)
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <startBootButtons+0x372>
				  BTN4_OFF;
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050d0:	4829      	ldr	r0, [pc, #164]	; (8005178 <startBootButtons+0x40c>)
 80050d2:	f006 f86f 	bl	800b1b4 <HAL_GPIO_WritePin>
				  osDelay(300);
 80050d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80050da:	f00b f94d 	bl	8010378 <osDelay>
			  }
			  if(bootButtons.btn5){
 80050de:	4b25      	ldr	r3, [pc, #148]	; (8005174 <startBootButtons+0x408>)
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <startBootButtons+0x38c>
				  BTN5_ON;
 80050e6:	2201      	movs	r2, #1
 80050e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050ec:	4822      	ldr	r0, [pc, #136]	; (8005178 <startBootButtons+0x40c>)
 80050ee:	f006 f861 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 80050f2:	2301      	movs	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e009      	b.n	800510c <startBootButtons+0x3a0>
			  }
			  else if(!(bootButtons.btn5)){
 80050f8:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <startBootButtons+0x408>)
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d105      	bne.n	800510c <startBootButtons+0x3a0>
				  BTN5_OFF;
 8005100:	2200      	movs	r2, #0
 8005102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005106:	481c      	ldr	r0, [pc, #112]	; (8005178 <startBootButtons+0x40c>)
 8005108:	f006 f854 	bl	800b1b4 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.edl_sw){
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <startBootButtons+0x408>)
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <startBootButtons+0x3ba>
				  EDL_SW_ON;
 8005114:	2201      	movs	r2, #1
 8005116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800511a:	4818      	ldr	r0, [pc, #96]	; (800517c <startBootButtons+0x410>)
 800511c:	f006 f84a 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8005120:	2301      	movs	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e009      	b.n	800513a <startBootButtons+0x3ce>
			  }
			  else if(!(bootButtons.edl_sw)){
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <startBootButtons+0x408>)
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d105      	bne.n	800513a <startBootButtons+0x3ce>
				  EDL_SW_OFF;
 800512e:	2200      	movs	r2, #0
 8005130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005134:	4811      	ldr	r0, [pc, #68]	; (800517c <startBootButtons+0x410>)
 8005136:	f006 f83d 	bl	800b1b4 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.ex_sw){
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <startBootButtons+0x408>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <startBootButtons+0x3e8>
				  EX_SW_ON;
 8005142:	2201      	movs	r2, #1
 8005144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005148:	480c      	ldr	r0, [pc, #48]	; (800517c <startBootButtons+0x410>)
 800514a:	f006 f833 	bl	800b1b4 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 800514e:	2301      	movs	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e009      	b.n	8005168 <startBootButtons+0x3fc>
			  }
			  else if(!(bootButtons.ex_sw)){
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <startBootButtons+0x408>)
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <startBootButtons+0x3fc>
				  EX_SW_OFF;
 800515c:	2200      	movs	r2, #0
 800515e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005162:	4806      	ldr	r0, [pc, #24]	; (800517c <startBootButtons+0x410>)
 8005164:	f006 f826 	bl	800b1b4 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
		  }
	  }
    osDelay(800);
 8005168:	f44f 7048 	mov.w	r0, #800	; 0x320
 800516c:	f00b f904 	bl	8010378 <osDelay>
	  if(bootButtons.bootModeSet){
 8005170:	e608      	b.n	8004d84 <startBootButtons+0x18>
 8005172:	bf00      	nop
 8005174:	200032ac 	.word	0x200032ac
 8005178:	40021400 	.word	0x40021400
 800517c:	40020400 	.word	0x40020400

08005180 <startSocUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSocUart */
void startSocUart(void *argument)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSocUart */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8005188:	f242 7010 	movw	r0, #10000	; 0x2710
 800518c:	f00b f8f4 	bl	8010378 <osDelay>
 8005190:	e7fa      	b.n	8005188 <startSocUart+0x8>
	...

08005194 <startDebugUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDebugUart */
void startDebugUart(void *argument)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	float * presentADCValues;


  for(;;)
  {
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 800519c:	4b62      	ldr	r3, [pc, #392]	; (8005328 <startDebugUart+0x194>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <startDebugUart+0x26>
 80051a4:	4b60      	ldr	r3, [pc, #384]	; (8005328 <startDebugUart+0x194>)
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d006      	beq.n	80051ba <startDebugUart+0x26>
 80051ac:	4b5e      	ldr	r3, [pc, #376]	; (8005328 <startDebugUart+0x194>)
 80051ae:	789b      	ldrb	r3, [r3, #2]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <startDebugUart+0x26>
		  presentADCValues = getADCValues();
 80051b4:	f7fe fcb0 	bl	8003b18 <getADCValues>
 80051b8:	6238      	str	r0, [r7, #32]

	  }
	  commandSent = debugUartParser();
 80051ba:	f7ff f8f1 	bl	80043a0 <debugUartParser>
 80051be:	4603      	mov	r3, r0
 80051c0:	77fb      	strb	r3, [r7, #31]
	  if(commandSent == true){
 80051c2:	7ffb      	ldrb	r3, [r7, #31]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	f040 80a9 	bne.w	800531c <startDebugUart+0x188>
		  char buf[5];
		  debugUartTransmitChar("ADCValues:");
 80051ca:	4858      	ldr	r0, [pc, #352]	; (800532c <startDebugUart+0x198>)
 80051cc:	f7fe f91a 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
 80051d4:	e01d      	b.n	8005212 <startDebugUart+0x7e>
			  sprintf(buf, "%f", *(presentADCValues+x));
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	4413      	add	r3, r2
 80051de:	edd3 7a00 	vldr	s15, [r3]
 80051e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051e6:	f107 0018 	add.w	r0, r7, #24
 80051ea:	ec53 2b17 	vmov	r2, r3, d7
 80051ee:	4950      	ldr	r1, [pc, #320]	; (8005330 <startDebugUart+0x19c>)
 80051f0:	f00e febc 	bl	8013f6c <siprintf>
			  //snprintf(buf, 5, "%f", *(presentADCValues+x));
			  debugUartTransmitStuff(buf,5);
 80051f4:	f107 0318 	add.w	r3, r7, #24
 80051f8:	2105      	movs	r1, #5
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe f91e 	bl	800343c <debugUartTransmitStuff>
			  if(x<20){
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	2b13      	cmp	r3, #19
 8005204:	dc02      	bgt.n	800520c <startDebugUart+0x78>
				  debugUartTransmitChar(",");
 8005206:	484b      	ldr	r0, [pc, #300]	; (8005334 <startDebugUart+0x1a0>)
 8005208:	f7fe f8fc 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	3301      	adds	r3, #1
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	2b14      	cmp	r3, #20
 8005216:	ddde      	ble.n	80051d6 <startDebugUart+0x42>
			  }

		  }
		  debugUartTransmitChar("\r\n");
 8005218:	4847      	ldr	r0, [pc, #284]	; (8005338 <startDebugUart+0x1a4>)
 800521a:	f7fe f8f3 	bl	8003404 <debugUartTransmitChar>
		  debugUartTransmitChar("INPUT GPIOs:");
 800521e:	4847      	ldr	r0, [pc, #284]	; (800533c <startDebugUart+0x1a8>)
 8005220:	f7fe f8f0 	bl	8003404 <debugUartTransmitChar>
		  //uint8_t gpioInputs[12];
		  //memcpy(gpioInputs,gpioInputBuf,sizeof(gpioInputBuf));
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 8005224:	2300      	movs	r3, #0
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
 8005228:	e018      	b.n	800525c <startDebugUart+0xc8>
			  sprintf(buf,"%x",gpioInputBuf[x]);
 800522a:	4a45      	ldr	r2, [pc, #276]	; (8005340 <startDebugUart+0x1ac>)
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	4413      	add	r3, r2
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	f107 0318 	add.w	r3, r7, #24
 8005238:	4942      	ldr	r1, [pc, #264]	; (8005344 <startDebugUart+0x1b0>)
 800523a:	4618      	mov	r0, r3
 800523c:	f00e fe96 	bl	8013f6c <siprintf>
			  debugUartTransmitChar(buf);
 8005240:	f107 0318 	add.w	r3, r7, #24
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe f8dd 	bl	8003404 <debugUartTransmitChar>
			  if(x<(sizeof(gpioInputBuf))-1){
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	2b0a      	cmp	r3, #10
 800524e:	d802      	bhi.n	8005256 <startDebugUart+0xc2>
				  debugUartTransmitChar(",");
 8005250:	4838      	ldr	r0, [pc, #224]	; (8005334 <startDebugUart+0x1a0>)
 8005252:	f7fe f8d7 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	3301      	adds	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	2b0b      	cmp	r3, #11
 8005260:	d9e3      	bls.n	800522a <startDebugUart+0x96>
			  }
		  }
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)gpioInputs, sizeof(gpioInputs),100);
		  debugUartTransmitChar("\r\n");
 8005262:	4835      	ldr	r0, [pc, #212]	; (8005338 <startDebugUart+0x1a4>)
 8005264:	f7fe f8ce 	bl	8003404 <debugUartTransmitChar>
		  debugUartTransmitChar("Errors:");
 8005268:	4837      	ldr	r0, [pc, #220]	; (8005348 <startDebugUart+0x1b4>)
 800526a:	f7fe f8cb 	bl	8003404 <debugUartTransmitChar>
		  uint8_t errors[11];
		  errors[0] = errorLED.zionFault;
 800526e:	4b37      	ldr	r3, [pc, #220]	; (800534c <startDebugUart+0x1b8>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	733b      	strb	r3, [r7, #12]
		  errors[1] = errorLED.vsysPMIFault;
 8005274:	4b35      	ldr	r3, [pc, #212]	; (800534c <startDebugUart+0x1b8>)
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	737b      	strb	r3, [r7, #13]
		  errors[2] = errorLED.fault3;
 800527a:	4b34      	ldr	r3, [pc, #208]	; (800534c <startDebugUart+0x1b8>)
 800527c:	789b      	ldrb	r3, [r3, #2]
 800527e:	73bb      	strb	r3, [r7, #14]
		  errors[3] = errorLED.fault4;
 8005280:	4b32      	ldr	r3, [pc, #200]	; (800534c <startDebugUart+0x1b8>)
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	73fb      	strb	r3, [r7, #15]
		  errors[4] = errorLED.fault5;
 8005286:	4b31      	ldr	r3, [pc, #196]	; (800534c <startDebugUart+0x1b8>)
 8005288:	791b      	ldrb	r3, [r3, #4]
 800528a:	743b      	strb	r3, [r7, #16]
		  errors[5] = errorLED.fault6;
 800528c:	4b2f      	ldr	r3, [pc, #188]	; (800534c <startDebugUart+0x1b8>)
 800528e:	795b      	ldrb	r3, [r3, #5]
 8005290:	747b      	strb	r3, [r7, #17]
		  errors[6] = errorLED.fault7;
 8005292:	4b2e      	ldr	r3, [pc, #184]	; (800534c <startDebugUart+0x1b8>)
 8005294:	799b      	ldrb	r3, [r3, #6]
 8005296:	74bb      	strb	r3, [r7, #18]
		  errors[7] = errorLED.fault8;
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <startDebugUart+0x1b8>)
 800529a:	7adb      	ldrb	r3, [r3, #11]
 800529c:	74fb      	strb	r3, [r7, #19]
		  errors[8] = errorLED.fault9;
 800529e:	4b2b      	ldr	r3, [pc, #172]	; (800534c <startDebugUart+0x1b8>)
 80052a0:	7b1b      	ldrb	r3, [r3, #12]
 80052a2:	753b      	strb	r3, [r7, #20]
		  errors[9] = errorLED.boot_fault;
 80052a4:	4b29      	ldr	r3, [pc, #164]	; (800534c <startDebugUart+0x1b8>)
 80052a6:	79db      	ldrb	r3, [r3, #7]
 80052a8:	757b      	strb	r3, [r7, #21]
		  errors[10] = errorLED.ledDriver;
 80052aa:	4b28      	ldr	r3, [pc, #160]	; (800534c <startDebugUart+0x1b8>)
 80052ac:	7b5b      	ldrb	r3, [r3, #13]
 80052ae:	75bb      	strb	r3, [r7, #22]
		  for(x=0;x<sizeof(errors);x++){
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
 80052b4:	e019      	b.n	80052ea <startDebugUart+0x156>
			  sprintf(buf,"%x",errors[x]);
 80052b6:	f107 020c 	add.w	r2, r7, #12
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	4413      	add	r3, r2
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	f107 0318 	add.w	r3, r7, #24
 80052c6:	491f      	ldr	r1, [pc, #124]	; (8005344 <startDebugUart+0x1b0>)
 80052c8:	4618      	mov	r0, r3
 80052ca:	f00e fe4f 	bl	8013f6c <siprintf>
			  debugUartTransmitChar(buf);
 80052ce:	f107 0318 	add.w	r3, r7, #24
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe f896 	bl	8003404 <debugUartTransmitChar>
			  if(x<(sizeof(errors))-1){
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	2b09      	cmp	r3, #9
 80052dc:	d802      	bhi.n	80052e4 <startDebugUart+0x150>
				  debugUartTransmitChar(",");
 80052de:	4815      	ldr	r0, [pc, #84]	; (8005334 <startDebugUart+0x1a0>)
 80052e0:	f7fe f890 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<sizeof(errors);x++){
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	3301      	adds	r3, #1
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	2b0a      	cmp	r3, #10
 80052ee:	d9e2      	bls.n	80052b6 <startDebugUart+0x122>
			  }
		  }
		  debugUartTransmitChar("\r\n");
 80052f0:	4811      	ldr	r0, [pc, #68]	; (8005338 <startDebugUart+0x1a4>)
 80052f2:	f7fe f887 	bl	8003404 <debugUartTransmitChar>
		  debugUartTransmitChar("Boot Mode:");
 80052f6:	4816      	ldr	r0, [pc, #88]	; (8005350 <startDebugUart+0x1bc>)
 80052f8:	f7fe f884 	bl	8003404 <debugUartTransmitChar>
		  sprintf(buf,"%d",bootButtons.bootMode);
 80052fc:	4b15      	ldr	r3, [pc, #84]	; (8005354 <startDebugUart+0x1c0>)
 80052fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005300:	f107 0318 	add.w	r3, r7, #24
 8005304:	4914      	ldr	r1, [pc, #80]	; (8005358 <startDebugUart+0x1c4>)
 8005306:	4618      	mov	r0, r3
 8005308:	f00e fe30 	bl	8013f6c <siprintf>
		  debugUartTransmitChar(buf);
 800530c:	f107 0318 	add.w	r3, r7, #24
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe f877 	bl	8003404 <debugUartTransmitChar>
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)bootButtons.bootMode, 1,100);
		  debugUartTransmitChar("\r\n");
 8005316:	4808      	ldr	r0, [pc, #32]	; (8005338 <startDebugUart+0x1a4>)
 8005318:	f7fe f874 	bl	8003404 <debugUartTransmitChar>
	  }
    osDelay(500);
 800531c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005320:	f00b f82a 	bl	8010378 <osDelay>
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 8005324:	e73a      	b.n	800519c <startDebugUart+0x8>
 8005326:	bf00      	nop
 8005328:	20029264 	.word	0x20029264
 800532c:	08017844 	.word	0x08017844
 8005330:	08017850 	.word	0x08017850
 8005334:	08017854 	.word	0x08017854
 8005338:	08017858 	.word	0x08017858
 800533c:	0801785c 	.word	0x0801785c
 8005340:	20028d14 	.word	0x20028d14
 8005344:	0801786c 	.word	0x0801786c
 8005348:	08017870 	.word	0x08017870
 800534c:	200032d8 	.word	0x200032d8
 8005350:	08017878 	.word	0x08017878
 8005354:	200032ac 	.word	0x200032ac
 8005358:	08017884 	.word	0x08017884

0800535c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a04      	ldr	r2, [pc, #16]	; (800537c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800536e:	f004 fa87 	bl	8009880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40001000 	.word	0x40001000

08005380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005384:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005386:	e7fe      	b.n	8005386 <Error_Handler+0x6>

08005388 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 800538c:	2201      	movs	r2, #1
 800538e:	2102      	movs	r1, #2
 8005390:	4802      	ldr	r0, [pc, #8]	; (800539c <SMLCD_Enable+0x14>)
 8005392:	f005 ff0f 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40022400 	.word	0x40022400

080053a0 <initializeDisplay>:

int previousMenu = 0;
float displayAdcValues[21];
int setIndicator=0;

void initializeDisplay(){
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b099      	sub	sp, #100	; 0x64
 80053a4:	af16      	add	r7, sp, #88	; 0x58
	HAL_StatusTypeDef Status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	71fb      	strb	r3, [r7, #7]
	SMLCD_InitGPIO();
 80053aa:	f7fb f935 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 80053ae:	4c16      	ldr	r4, [pc, #88]	; (8005408 <initializeDisplay+0x68>)
 80053b0:	4668      	mov	r0, sp
 80053b2:	f104 0310 	add.w	r3, r4, #16
 80053b6:	2254      	movs	r2, #84	; 0x54
 80053b8:	4619      	mov	r1, r3
 80053ba:	f00d ff93 	bl	80132e4 <memcpy>
 80053be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80053c2:	f7fb f949 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 80053c6:	f7ff ffdf 	bl	8005388 <SMLCD_Enable>
	SMLCD_Clear();
 80053ca:	f7fb f965 	bl	8000698 <SMLCD_Clear>
	if (Status != HAL_OK)
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <initializeDisplay+0x44>
	{
		DevUI_Error_Handler("SPI LCD Clear Command Failed.", Status, 0, 0, true);
 80053d4:	79f9      	ldrb	r1, [r7, #7]
 80053d6:	2301      	movs	r3, #1
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	2200      	movs	r2, #0
 80053de:	480b      	ldr	r0, [pc, #44]	; (800540c <initializeDisplay+0x6c>)
 80053e0:	f7fd fe90 	bl	8003104 <DevUI_Error_Handler>
	}
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 80053e4:	2301      	movs	r3, #1
 80053e6:	71bb      	strb	r3, [r7, #6]
	}
	SMLCD_Orientation(ori);
 80053e8:	79bb      	ldrb	r3, [r7, #6]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fb fb08 	bl	8000a00 <SMLCD_Orientation>
	LCD_Clear();
 80053f0:	f7fb fb2e 	bl	8000a50 <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 80053f4:	2254      	movs	r2, #84	; 0x54
 80053f6:	2100      	movs	r1, #0
 80053f8:	4805      	ldr	r0, [pc, #20]	; (8005410 <initializeDisplay+0x70>)
 80053fa:	f00d ff7e 	bl	80132fa <memset>
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bd90      	pop	{r4, r7, pc}
 8005406:	bf00      	nop
 8005408:	20028a8c 	.word	0x20028a8c
 800540c:	08017888 	.word	0x08017888
 8005410:	200310c0 	.word	0x200310c0

08005414 <drawMainMenu>:

void drawMainMenu(int indicator){
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 800541c:	4b48      	ldr	r3, [pc, #288]	; (8005540 <drawMainMenu+0x12c>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
	getLatestADC();
 8005422:	f002 fdbf 	bl	8007fa4 <getLatestADC>
	LCD_Clear();
 8005426:	f7fb fb13 	bl	8000a50 <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 800542a:	4b46      	ldr	r3, [pc, #280]	; (8005544 <drawMainMenu+0x130>)
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8005430:	4b45      	ldr	r3, [pc, #276]	; (8005548 <drawMainMenu+0x134>)
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	4b44      	ldr	r3, [pc, #272]	; (800554c <drawMainMenu+0x138>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	2100      	movs	r1, #0
 8005442:	2000      	movs	r0, #0
 8005444:	f7fb fd56 	bl	8000ef4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8005448:	4b3f      	ldr	r3, [pc, #252]	; (8005548 <drawMainMenu+0x134>)
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	3b03      	subs	r3, #3
 800544e:	b29a      	uxth	r2, r3
 8005450:	4b3e      	ldr	r3, [pc, #248]	; (800554c <drawMainMenu+0x138>)
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	3b03      	subs	r3, #3
 8005456:	b29b      	uxth	r3, r3
 8005458:	2102      	movs	r1, #2
 800545a:	2002      	movs	r0, #2
 800545c:	f7fb fd4a 	bl	8000ef4 <LCD_Rect>

	// RTC :)
	i  = 10;
 8005460:	230a      	movs	r3, #10
 8005462:	60bb      	str	r3, [r7, #8]
	j  = 10;
 8005464:	230a      	movs	r3, #10
 8005466:	60fb      	str	r3, [r7, #12]
	printFaults(i,j);
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	68b8      	ldr	r0, [r7, #8]
 800546c:	f002 fdc8 	bl	8008000 <printFaults>
	//i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
	//i += LCD_PutStr(i, j, "So many!", fnt7x10);
	i=150;
 8005470:	2396      	movs	r3, #150	; 0x96
 8005472:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	b298      	uxth	r0, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	b299      	uxth	r1, r3
 800547c:	4b34      	ldr	r3, [pc, #208]	; (8005550 <drawMainMenu+0x13c>)
 800547e:	4a35      	ldr	r2, [pc, #212]	; (8005554 <drawMainMenu+0x140>)
 8005480:	f7fc f8c6 	bl	8001610 <LCD_PutStr>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4413      	add	r3, r2
 800548c:	60bb      	str	r3, [r7, #8]
	if(displayAdcValues[Adc.adc0] >VSYS_FLT){
 800548e:	4b32      	ldr	r3, [pc, #200]	; (8005558 <drawMainMenu+0x144>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a32      	ldr	r2, [pc, #200]	; (800555c <drawMainMenu+0x148>)
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	edd3 7a00 	vldr	s15, [r3]
 800549c:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80054a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	dd68      	ble.n	800557c <drawMainMenu+0x168>
		//errorLED.vsysPMIFault=0;
		switch(bootButtons.bootMode){
 80054aa:	4b2d      	ldr	r3, [pc, #180]	; (8005560 <drawMainMenu+0x14c>)
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d86f      	bhi.n	8005592 <drawMainMenu+0x17e>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <drawMainMenu+0xa4>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054d1 	.word	0x080054d1
 80054bc:	080054e3 	.word	0x080054e3
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	08005507 	.word	0x08005507
 80054c8:	0800552b 	.word	0x0800552b
 80054cc:	08005519 	.word	0x08005519
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	b298      	uxth	r0, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	b299      	uxth	r1, r3
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <drawMainMenu+0x13c>)
 80054da:	4a22      	ldr	r2, [pc, #136]	; (8005564 <drawMainMenu+0x150>)
 80054dc:	f7fc f898 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 80054e0:	e057      	b.n	8005592 <drawMainMenu+0x17e>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	b298      	uxth	r0, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	b299      	uxth	r1, r3
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <drawMainMenu+0x13c>)
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <drawMainMenu+0x154>)
 80054ee:	f7fc f88f 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 80054f2:	e04e      	b.n	8005592 <drawMainMenu+0x17e>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	b298      	uxth	r0, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	b299      	uxth	r1, r3
 80054fc:	4b14      	ldr	r3, [pc, #80]	; (8005550 <drawMainMenu+0x13c>)
 80054fe:	4a1b      	ldr	r2, [pc, #108]	; (800556c <drawMainMenu+0x158>)
 8005500:	f7fc f886 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8005504:	e045      	b.n	8005592 <drawMainMenu+0x17e>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	b298      	uxth	r0, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	b299      	uxth	r1, r3
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <drawMainMenu+0x13c>)
 8005510:	4a17      	ldr	r2, [pc, #92]	; (8005570 <drawMainMenu+0x15c>)
 8005512:	f7fc f87d 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 1;
			break;
 8005516:	e03c      	b.n	8005592 <drawMainMenu+0x17e>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	b298      	uxth	r0, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	b299      	uxth	r1, r3
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <drawMainMenu+0x13c>)
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <drawMainMenu+0x160>)
 8005524:	f7fc f874 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8005528:	e033      	b.n	8005592 <drawMainMenu+0x17e>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	b298      	uxth	r0, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	b299      	uxth	r1, r3
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <drawMainMenu+0x13c>)
 8005534:	4a10      	ldr	r2, [pc, #64]	; (8005578 <drawMainMenu+0x164>)
 8005536:	f7fc f86b 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 1;
			break;
 800553a:	bf00      	nop
 800553c:	e029      	b.n	8005592 <drawMainMenu+0x17e>
 800553e:	bf00      	nop
 8005540:	20003354 	.word	0x20003354
 8005544:	20028a84 	.word	0x20028a84
 8005548:	20028a86 	.word	0x20028a86
 800554c:	20028a88 	.word	0x20028a88
 8005550:	08018104 	.word	0x08018104
 8005554:	080178a8 	.word	0x080178a8
 8005558:	20000128 	.word	0x20000128
 800555c:	200310c0 	.word	0x200310c0
 8005560:	200032ac 	.word	0x200032ac
 8005564:	080178b0 	.word	0x080178b0
 8005568:	080178b4 	.word	0x080178b4
 800556c:	080178b8 	.word	0x080178b8
 8005570:	080178c0 	.word	0x080178c0
 8005574:	080178c4 	.word	0x080178c4
 8005578:	080178cc 	.word	0x080178cc
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	b298      	uxth	r0, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	b299      	uxth	r1, r3
 8005584:	4b96      	ldr	r3, [pc, #600]	; (80057e0 <drawMainMenu+0x3cc>)
 8005586:	4a97      	ldr	r2, [pc, #604]	; (80057e4 <drawMainMenu+0x3d0>)
 8005588:	f7fc f842 	bl	8001610 <LCD_PutStr>
		bootButtons.bootMode=0;
 800558c:	4b96      	ldr	r3, [pc, #600]	; (80057e8 <drawMainMenu+0x3d4>)
 800558e:	2200      	movs	r2, #0
 8005590:	629a      	str	r2, [r3, #40]	; 0x28
		//errorLED.standard_boot = 0;
		//errorLED.uefi_boot  = 0;
		//errorLED.edl_boot  = 0;

	}
	i  = 135;
 8005592:	2387      	movs	r3, #135	; 0x87
 8005594:	60bb      	str	r3, [r7, #8]
	j += 14;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	330e      	adds	r3, #14
 800559a:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	b299      	uxth	r1, r3
 80055a0:	4b92      	ldr	r3, [pc, #584]	; (80057ec <drawMainMenu+0x3d8>)
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	3b5e      	subs	r3, #94	; 0x5e
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3303      	adds	r3, #3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2002      	movs	r0, #2
 80055b2:	f7fb fce1 	bl	8000f78 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3305      	adds	r3, #5
 80055bc:	b298      	uxth	r0, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3308      	adds	r3, #8
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2102      	movs	r1, #2
 80055cc:	f7fb fcd4 	bl	8000f78 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 80055d0:	4b86      	ldr	r3, [pc, #536]	; (80057ec <drawMainMenu+0x3d8>)
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	3b61      	subs	r3, #97	; 0x61
 80055d6:	b298      	uxth	r0, r3
 80055d8:	4b84      	ldr	r3, [pc, #528]	; (80057ec <drawMainMenu+0x3d8>)
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	3b5e      	subs	r3, #94	; 0x5e
 80055de:	b29a      	uxth	r2, r3
 80055e0:	4b83      	ldr	r3, [pc, #524]	; (80057f0 <drawMainMenu+0x3dc>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2102      	movs	r1, #2
 80055ea:	f7fb fcc5 	bl	8000f78 <LCD_FillRect>
	i  = scr_width-90;
 80055ee:	4b7f      	ldr	r3, [pc, #508]	; (80057ec <drawMainMenu+0x3d8>)
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	3b5a      	subs	r3, #90	; 0x5a
 80055f4:	60bb      	str	r3, [r7, #8]
	j  = 3;
 80055f6:	2303      	movs	r3, #3
 80055f8:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	b298      	uxth	r0, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b02      	subs	r3, #2
 8005604:	b299      	uxth	r1, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	b29b      	uxth	r3, r3
 800560a:	330c      	adds	r3, #12
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	b29b      	uxth	r3, r3
 8005612:	3308      	adds	r3, #8
 8005614:	b29b      	uxth	r3, r3
 8005616:	f7fb fcaf 	bl	8000f78 <LCD_FillRect>
	i+=20;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3314      	adds	r3, #20
 800561e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "ZION FLT", fnt7x10);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	b298      	uxth	r0, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	b299      	uxth	r1, r3
 8005628:	4b6d      	ldr	r3, [pc, #436]	; (80057e0 <drawMainMenu+0x3cc>)
 800562a:	4a72      	ldr	r2, [pc, #456]	; (80057f4 <drawMainMenu+0x3e0>)
 800562c:	f7fb fff0 	bl	8001610 <LCD_PutStr>
	j+=22;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3316      	adds	r3, #22
 8005634:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005636:	4b6d      	ldr	r3, [pc, #436]	; (80057ec <drawMainMenu+0x3d8>)
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	3b5a      	subs	r3, #90	; 0x5a
 800563c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	b298      	uxth	r0, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b02      	subs	r3, #2
 8005648:	b299      	uxth	r1, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	b29b      	uxth	r3, r3
 800564e:	330c      	adds	r3, #12
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	b29b      	uxth	r3, r3
 8005656:	3308      	adds	r3, #8
 8005658:	b29b      	uxth	r3, r3
 800565a:	f7fb fc8d 	bl	8000f78 <LCD_FillRect>
	i+=20;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3314      	adds	r3, #20
 8005662:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "VSYS FLT", fnt7x10);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	b298      	uxth	r0, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	b299      	uxth	r1, r3
 800566c:	4b5c      	ldr	r3, [pc, #368]	; (80057e0 <drawMainMenu+0x3cc>)
 800566e:	4a62      	ldr	r2, [pc, #392]	; (80057f8 <drawMainMenu+0x3e4>)
 8005670:	f7fb ffce 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 8005674:	4b5d      	ldr	r3, [pc, #372]	; (80057ec <drawMainMenu+0x3d8>)
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	3b5a      	subs	r3, #90	; 0x5a
 800567a:	60bb      	str	r3, [r7, #8]
	j  += 22;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3316      	adds	r3, #22
 8005680:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	b298      	uxth	r0, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b02      	subs	r3, #2
 800568c:	b299      	uxth	r1, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	b29b      	uxth	r3, r3
 8005692:	330c      	adds	r3, #12
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	b29b      	uxth	r3, r3
 800569a:	3308      	adds	r3, #8
 800569c:	b29b      	uxth	r3, r3
 800569e:	f7fb fc6b 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3314      	adds	r3, #20
 80056a6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3", fnt7x10);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	b298      	uxth	r0, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	b299      	uxth	r1, r3
 80056b0:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <drawMainMenu+0x3cc>)
 80056b2:	4a52      	ldr	r2, [pc, #328]	; (80057fc <drawMainMenu+0x3e8>)
 80056b4:	f7fb ffac 	bl	8001610 <LCD_PutStr>
	j+=22;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3316      	adds	r3, #22
 80056bc:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80056be:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <drawMainMenu+0x3d8>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	3b5a      	subs	r3, #90	; 0x5a
 80056c4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	b298      	uxth	r0, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b02      	subs	r3, #2
 80056d0:	b299      	uxth	r1, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	330c      	adds	r3, #12
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3308      	adds	r3, #8
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f7fb fc49 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3314      	adds	r3, #20
 80056ea:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4", fnt7x10);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	b298      	uxth	r0, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	b299      	uxth	r1, r3
 80056f4:	4b3a      	ldr	r3, [pc, #232]	; (80057e0 <drawMainMenu+0x3cc>)
 80056f6:	4a42      	ldr	r2, [pc, #264]	; (8005800 <drawMainMenu+0x3ec>)
 80056f8:	f7fb ff8a 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 80056fc:	4b3b      	ldr	r3, [pc, #236]	; (80057ec <drawMainMenu+0x3d8>)
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	3b5a      	subs	r3, #90	; 0x5a
 8005702:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3316      	adds	r3, #22
 8005708:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	b298      	uxth	r0, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b02      	subs	r3, #2
 8005714:	b299      	uxth	r1, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	b29b      	uxth	r3, r3
 800571a:	330c      	adds	r3, #12
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	b29b      	uxth	r3, r3
 8005722:	3308      	adds	r3, #8
 8005724:	b29b      	uxth	r3, r3
 8005726:	f7fb fc27 	bl	8000f78 <LCD_FillRect>
	i+=20;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	3314      	adds	r3, #20
 800572e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5", fnt7x10);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	b298      	uxth	r0, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	b299      	uxth	r1, r3
 8005738:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <drawMainMenu+0x3cc>)
 800573a:	4a32      	ldr	r2, [pc, #200]	; (8005804 <drawMainMenu+0x3f0>)
 800573c:	f7fb ff68 	bl	8001610 <LCD_PutStr>
	j+=22;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3316      	adds	r3, #22
 8005744:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005746:	4b29      	ldr	r3, [pc, #164]	; (80057ec <drawMainMenu+0x3d8>)
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	3b5a      	subs	r3, #90	; 0x5a
 800574c:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	b298      	uxth	r0, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b02      	subs	r3, #2
 8005758:	b299      	uxth	r1, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	b29b      	uxth	r3, r3
 800575e:	330c      	adds	r3, #12
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	b29b      	uxth	r3, r3
 8005766:	3308      	adds	r3, #8
 8005768:	b29b      	uxth	r3, r3
 800576a:	f7fb fc05 	bl	8000f78 <LCD_FillRect>
	i+=20;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3314      	adds	r3, #20
 8005772:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6", fnt7x10);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	b298      	uxth	r0, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	b299      	uxth	r1, r3
 800577c:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <drawMainMenu+0x3cc>)
 800577e:	4a22      	ldr	r2, [pc, #136]	; (8005808 <drawMainMenu+0x3f4>)
 8005780:	f7fb ff46 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <drawMainMenu+0x3d8>)
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	3b5a      	subs	r3, #90	; 0x5a
 800578a:	60bb      	str	r3, [r7, #8]
	j  +=22;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3316      	adds	r3, #22
 8005790:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	b298      	uxth	r0, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b02      	subs	r3, #2
 800579c:	b299      	uxth	r1, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	330c      	adds	r3, #12
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3308      	adds	r3, #8
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f7fb fbe3 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	3314      	adds	r3, #20
 80057b6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7", fnt7x10);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	b298      	uxth	r0, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	b299      	uxth	r1, r3
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <drawMainMenu+0x3cc>)
 80057c2:	4a12      	ldr	r2, [pc, #72]	; (800580c <drawMainMenu+0x3f8>)
 80057c4:	f7fb ff24 	bl	8001610 <LCD_PutStr>
	j+=22;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3316      	adds	r3, #22
 80057cc:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <drawMainMenu+0x3d8>)
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	3b5a      	subs	r3, #90	; 0x5a
 80057d4:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	b298      	uxth	r0, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	e018      	b.n	8005810 <drawMainMenu+0x3fc>
 80057de:	bf00      	nop
 80057e0:	08018104 	.word	0x08018104
 80057e4:	080178b0 	.word	0x080178b0
 80057e8:	200032ac 	.word	0x200032ac
 80057ec:	20028a86 	.word	0x20028a86
 80057f0:	20028a88 	.word	0x20028a88
 80057f4:	080178d0 	.word	0x080178d0
 80057f8:	080178dc 	.word	0x080178dc
 80057fc:	080178e8 	.word	0x080178e8
 8005800:	080178f0 	.word	0x080178f0
 8005804:	080178f8 	.word	0x080178f8
 8005808:	08017900 	.word	0x08017900
 800580c:	08017908 	.word	0x08017908
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b02      	subs	r3, #2
 8005814:	b299      	uxth	r1, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	b29b      	uxth	r3, r3
 800581a:	330c      	adds	r3, #12
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	b29b      	uxth	r3, r3
 8005822:	3308      	adds	r3, #8
 8005824:	b29b      	uxth	r3, r3
 8005826:	f7fb fba7 	bl	8000f78 <LCD_FillRect>
	i+=20;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3314      	adds	r3, #20
 800582e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8", fnt7x10);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	b298      	uxth	r0, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	b299      	uxth	r1, r3
 8005838:	4b6e      	ldr	r3, [pc, #440]	; (80059f4 <drawMainMenu+0x5e0>)
 800583a:	4a6f      	ldr	r2, [pc, #444]	; (80059f8 <drawMainMenu+0x5e4>)
 800583c:	f7fb fee8 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 8005840:	4b6e      	ldr	r3, [pc, #440]	; (80059fc <drawMainMenu+0x5e8>)
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	3b5a      	subs	r3, #90	; 0x5a
 8005846:	60bb      	str	r3, [r7, #8]
	j  +=22;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3316      	adds	r3, #22
 800584c:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	b298      	uxth	r0, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b02      	subs	r3, #2
 8005858:	b299      	uxth	r1, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	b29b      	uxth	r3, r3
 800585e:	330c      	adds	r3, #12
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	b29b      	uxth	r3, r3
 8005866:	3308      	adds	r3, #8
 8005868:	b29b      	uxth	r3, r3
 800586a:	f7fb fb85 	bl	8000f78 <LCD_FillRect>
	i+=20;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3314      	adds	r3, #20
 8005872:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9", fnt7x10);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	b298      	uxth	r0, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	b299      	uxth	r1, r3
 800587c:	4b5d      	ldr	r3, [pc, #372]	; (80059f4 <drawMainMenu+0x5e0>)
 800587e:	4a60      	ldr	r2, [pc, #384]	; (8005a00 <drawMainMenu+0x5ec>)
 8005880:	f7fb fec6 	bl	8001610 <LCD_PutStr>
	j = scr_height-20;
 8005884:	4b5f      	ldr	r3, [pc, #380]	; (8005a04 <drawMainMenu+0x5f0>)
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	3b14      	subs	r3, #20
 800588a:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 800588c:	4b5b      	ldr	r3, [pc, #364]	; (80059fc <drawMainMenu+0x5e8>)
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	3b5a      	subs	r3, #90	; 0x5a
 8005892:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	b298      	uxth	r0, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b02      	subs	r3, #2
 800589e:	b299      	uxth	r1, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	330c      	adds	r3, #12
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3308      	adds	r3, #8
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f7fb fb62 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	3314      	adds	r3, #20
 80058b8:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	b298      	uxth	r0, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	b299      	uxth	r1, r3
 80058c2:	4b4c      	ldr	r3, [pc, #304]	; (80059f4 <drawMainMenu+0x5e0>)
 80058c4:	4a50      	ldr	r2, [pc, #320]	; (8005a08 <drawMainMenu+0x5f4>)
 80058c6:	f7fb fea3 	bl	8001610 <LCD_PutStr>

	i=100;
 80058ca:	2364      	movs	r3, #100	; 0x64
 80058cc:	60bb      	str	r3, [r7, #8]
	j=75;
 80058ce:	234b      	movs	r3, #75	; 0x4b
 80058d0:	60fb      	str	r3, [r7, #12]
	i+=20;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3314      	adds	r3, #20
 80058d6:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	b298      	uxth	r0, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	b299      	uxth	r1, r3
 80058e0:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <drawMainMenu+0x5e0>)
 80058e2:	4a4a      	ldr	r2, [pc, #296]	; (8005a0c <drawMainMenu+0x5f8>)
 80058e4:	f7fb fe94 	bl	8001610 <LCD_PutStr>
	j+=15;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	330f      	adds	r3, #15
 80058ec:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b03      	subs	r3, #3
 80058f4:	b298      	uxth	r0, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b02      	subs	r3, #2
 80058fc:	b299      	uxth	r1, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	b29b      	uxth	r3, r3
 8005902:	3347      	adds	r3, #71	; 0x47
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	b29b      	uxth	r3, r3
 800590a:	3302      	adds	r3, #2
 800590c:	b29b      	uxth	r3, r3
 800590e:	f7fb fb33 	bl	8000f78 <LCD_FillRect>

	i=100;
 8005912:	2364      	movs	r3, #100	; 0x64
 8005914:	60bb      	str	r3, [r7, #8]
	j=110;
 8005916:	236e      	movs	r3, #110	; 0x6e
 8005918:	60fb      	str	r3, [r7, #12]
	i+=20;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	3314      	adds	r3, #20
 800591e:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	b298      	uxth	r0, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	b299      	uxth	r1, r3
 8005928:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <drawMainMenu+0x5e0>)
 800592a:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <drawMainMenu+0x5fc>)
 800592c:	f7fb fe70 	bl	8001610 <LCD_PutStr>
	j+=15;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	330f      	adds	r3, #15
 8005934:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b03      	subs	r3, #3
 800593c:	b298      	uxth	r0, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b02      	subs	r3, #2
 8005944:	b299      	uxth	r1, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	b29b      	uxth	r3, r3
 800594a:	3332      	adds	r3, #50	; 0x32
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	b29b      	uxth	r3, r3
 8005952:	3302      	adds	r3, #2
 8005954:	b29b      	uxth	r3, r3
 8005956:	f7fb fb0f 	bl	8000f78 <LCD_FillRect>

	i=100;
 800595a:	2364      	movs	r3, #100	; 0x64
 800595c:	60bb      	str	r3, [r7, #8]
	j=145;
 800595e:	2391      	movs	r3, #145	; 0x91
 8005960:	60fb      	str	r3, [r7, #12]
	i+=20;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	3314      	adds	r3, #20
 8005966:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	b298      	uxth	r0, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	b299      	uxth	r1, r3
 8005970:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <drawMainMenu+0x5e0>)
 8005972:	4a28      	ldr	r2, [pc, #160]	; (8005a14 <drawMainMenu+0x600>)
 8005974:	f7fb fe4c 	bl	8001610 <LCD_PutStr>
	j+=15;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	330f      	adds	r3, #15
 800597c:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b03      	subs	r3, #3
 8005984:	b298      	uxth	r0, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b02      	subs	r3, #2
 800598c:	b299      	uxth	r1, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	b29b      	uxth	r3, r3
 8005992:	3355      	adds	r3, #85	; 0x55
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	b29b      	uxth	r3, r3
 800599a:	3302      	adds	r3, #2
 800599c:	b29b      	uxth	r3, r3
 800599e:	f7fb faeb 	bl	8000f78 <LCD_FillRect>
	i=100;
 80059a2:	2364      	movs	r3, #100	; 0x64
 80059a4:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d006      	beq.n	80059ba <drawMainMenu+0x5a6>
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d007      	beq.n	80059c0 <drawMainMenu+0x5ac>
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d108      	bne.n	80059c6 <drawMainMenu+0x5b2>
	case FIRST:
	{
		j=75;
 80059b4:	234b      	movs	r3, #75	; 0x4b
 80059b6:	60fb      	str	r3, [r7, #12]
		break;
 80059b8:	e008      	b.n	80059cc <drawMainMenu+0x5b8>
	}
	case SECOND:
	{
		j=110;
 80059ba:	236e      	movs	r3, #110	; 0x6e
 80059bc:	60fb      	str	r3, [r7, #12]
		break;
 80059be:	e005      	b.n	80059cc <drawMainMenu+0x5b8>
	}
	case THIRD:
	{
		j=145;
 80059c0:	2391      	movs	r3, #145	; 0x91
 80059c2:	60fb      	str	r3, [r7, #12]
		break;
 80059c4:	e002      	b.n	80059cc <drawMainMenu+0x5b8>
	}
	default:
	{
		j=75;
 80059c6:	234b      	movs	r3, #75	; 0x4b
 80059c8:	60fb      	str	r3, [r7, #12]
		break;
 80059ca:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	b298      	uxth	r0, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	b299      	uxth	r1, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	330c      	adds	r3, #12
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	330a      	adds	r3, #10
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f7fb fac8 	bl	8000f78 <LCD_FillRect>
	SMLCD_Flush();
 80059e8:	f7fa fe7a 	bl	80006e0 <SMLCD_Flush>
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	08018104 	.word	0x08018104
 80059f8:	08017910 	.word	0x08017910
 80059fc:	20028a86 	.word	0x20028a86
 8005a00:	08017918 	.word	0x08017918
 8005a04:	20028a88 	.word	0x20028a88
 8005a08:	08017920 	.word	0x08017920
 8005a0c:	08017928 	.word	0x08017928
 8005a10:	08017934 	.word	0x08017934
 8005a14:	0801793c 	.word	0x0801793c

08005a18 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b090      	sub	sp, #64	; 0x40
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005a20:	2314      	movs	r3, #20
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
	int inputGpioAlignment=245;
 8005a24:	23f5      	movs	r3, #245	; 0xf5
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
	int daughterCardAlignment=240;
 8005a28:	23f0      	movs	r3, #240	; 0xf0
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i2cCheck;
	int arrowUp = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowDown=1;
 8005a30:	2301      	movs	r3, #1
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowSize=3;
 8005a34:	2303      	movs	r3, #3
 8005a36:	623b      	str	r3, [r7, #32]
	previousMenu=0;
 8005a38:	4b95      	ldr	r3, [pc, #596]	; (8005c90 <drawStatusMenu+0x278>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005a3e:	f7fb f807 	bl	8000a50 <LCD_Clear>
	getLatestADC();
 8005a42:	f002 faaf 	bl	8007fa4 <getLatestADC>
	drawMenuHeader();
 8005a46:	f002 f9f1 	bl	8007e2c <drawMenuHeader>
	i  = 135;
 8005a4a:	2387      	movs	r3, #135	; 0x87
 8005a4c:	61fb      	str	r3, [r7, #28]
	j = 24;
 8005a4e:	2318      	movs	r3, #24
 8005a50:	61bb      	str	r3, [r7, #24]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	b299      	uxth	r1, r3
 8005a56:	4b8f      	ldr	r3, [pc, #572]	; (8005c94 <drawStatusMenu+0x27c>)
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	3b02      	subs	r3, #2
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3303      	adds	r3, #3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2002      	movs	r0, #2
 8005a68:	f7fb fa86 	bl	8000f78 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);
	switch(indicator){
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	f000 829a 	beq.w	8005fa8 <drawStatusMenu+0x590>
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	f001 8037 	beq.w	8006ae8 <drawStatusMenu+0x10d0>
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	f041 8141 	bne.w	8006d02 <drawStatusMenu+0x12ea>
	case 1:{
		i=35;
 8005a80:	2323      	movs	r3, #35	; 0x23
 8005a82:	61fb      	str	r3, [r7, #28]
		j=90;
 8005a84:	235a      	movs	r3, #90	; 0x5a
 8005a86:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b02      	subs	r3, #2
 8005a8e:	b299      	uxth	r1, r3
 8005a90:	4b80      	ldr	r3, [pc, #512]	; (8005c94 <drawStatusMenu+0x27c>)
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	3b02      	subs	r3, #2
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2002      	movs	r0, #2
 8005aa2:	f7fb fa69 	bl	8000f78 <LCD_FillRect>
		j=75;
 8005aa6:	234b      	movs	r3, #75	; 0x4b
 8005aa8:	61bb      	str	r3, [r7, #24]
		i=62;
 8005aaa:	233e      	movs	r3, #62	; 0x3e
 8005aac:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	b298      	uxth	r0, r3
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	b299      	uxth	r1, r3
 8005ab6:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <drawStatusMenu+0x280>)
 8005ab8:	4a78      	ldr	r2, [pc, #480]	; (8005c9c <drawStatusMenu+0x284>)
 8005aba:	f7fb fda9 	bl	8001610 <LCD_PutStr>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	61fb      	str	r3, [r7, #28]
		i+=145;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	3391      	adds	r3, #145	; 0x91
 8005acc:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	b298      	uxth	r0, r3
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	b299      	uxth	r1, r3
 8005ad6:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <drawStatusMenu+0x280>)
 8005ad8:	4a71      	ldr	r2, [pc, #452]	; (8005ca0 <drawStatusMenu+0x288>)
 8005ada:	f7fb fd99 	bl	8001610 <LCD_PutStr>

		i=10;
 8005ade:	230a      	movs	r3, #10
 8005ae0:	61fb      	str	r3, [r7, #28]
		j=95;
 8005ae2:	235f      	movs	r3, #95	; 0x5f
 8005ae4:	61bb      	str	r3, [r7, #24]

		i+= LCD_PutStr(i, j, "ZION FLT: ", fnt7x10);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	b298      	uxth	r0, r3
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	b299      	uxth	r1, r3
 8005aee:	4b6a      	ldr	r3, [pc, #424]	; (8005c98 <drawStatusMenu+0x280>)
 8005af0:	4a6c      	ldr	r2, [pc, #432]	; (8005ca4 <drawStatusMenu+0x28c>)
 8005af2:	f7fb fd8d 	bl	8001610 <LCD_PutStr>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	61fb      	str	r3, [r7, #28]
		if(errorLED.zionFault){
 8005b00:	4b69      	ldr	r3, [pc, #420]	; (8005ca8 <drawStatusMenu+0x290>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <drawStatusMenu+0x102>
			LCD_PutStr(i, j, "SOC ZION ERROR", fnt7x10);
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	b298      	uxth	r0, r3
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	b299      	uxth	r1, r3
 8005b10:	4b61      	ldr	r3, [pc, #388]	; (8005c98 <drawStatusMenu+0x280>)
 8005b12:	4a66      	ldr	r2, [pc, #408]	; (8005cac <drawStatusMenu+0x294>)
 8005b14:	f7fb fd7c 	bl	8001610 <LCD_PutStr>
 8005b18:	e007      	b.n	8005b2a <drawStatusMenu+0x112>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	b298      	uxth	r0, r3
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	b299      	uxth	r1, r3
 8005b22:	4b5d      	ldr	r3, [pc, #372]	; (8005c98 <drawStatusMenu+0x280>)
 8005b24:	4a62      	ldr	r2, [pc, #392]	; (8005cb0 <drawStatusMenu+0x298>)
 8005b26:	f7fb fd73 	bl	8001610 <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	b298      	uxth	r0, r3
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	b299      	uxth	r1, r3
 8005b36:	4b58      	ldr	r3, [pc, #352]	; (8005c98 <drawStatusMenu+0x280>)
 8005b38:	4a5e      	ldr	r2, [pc, #376]	; (8005cb4 <drawStatusMenu+0x29c>)
 8005b3a:	f7fb fd69 	bl	8001610 <LCD_PutStr>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	61fb      	str	r3, [r7, #28]
		if(ZION.SOC_EEPROM_Detected){
 8005b48:	4b5b      	ldr	r3, [pc, #364]	; (8005cb8 <drawStatusMenu+0x2a0>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <drawStatusMenu+0x14a>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	b298      	uxth	r0, r3
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	b299      	uxth	r1, r3
 8005b58:	4b4f      	ldr	r3, [pc, #316]	; (8005c98 <drawStatusMenu+0x280>)
 8005b5a:	4a58      	ldr	r2, [pc, #352]	; (8005cbc <drawStatusMenu+0x2a4>)
 8005b5c:	f7fb fd58 	bl	8001610 <LCD_PutStr>
 8005b60:	e007      	b.n	8005b72 <drawStatusMenu+0x15a>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	b298      	uxth	r0, r3
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	b299      	uxth	r1, r3
 8005b6a:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <drawStatusMenu+0x280>)
 8005b6c:	4a54      	ldr	r2, [pc, #336]	; (8005cc0 <drawStatusMenu+0x2a8>)
 8005b6e:	f7fb fd4f 	bl	8001610 <LCD_PutStr>
		}
		i=10;
 8005b72:	230a      	movs	r3, #10
 8005b74:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	330f      	adds	r3, #15
 8005b7a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "VSYS_PMI: ", fnt7x10);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	b298      	uxth	r0, r3
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	b299      	uxth	r1, r3
 8005b84:	4b44      	ldr	r3, [pc, #272]	; (8005c98 <drawStatusMenu+0x280>)
 8005b86:	4a4f      	ldr	r2, [pc, #316]	; (8005cc4 <drawStatusMenu+0x2ac>)
 8005b88:	f7fb fd42 	bl	8001610 <LCD_PutStr>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	61fb      	str	r3, [r7, #28]
		if(errorLED.vsysPMIFault){
 8005b96:	4b44      	ldr	r3, [pc, #272]	; (8005ca8 <drawStatusMenu+0x290>)
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <drawStatusMenu+0x198>
			LCD_PutStr(i, j, "VSYS PMI LOW", fnt7x10);
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	b298      	uxth	r0, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	b299      	uxth	r1, r3
 8005ba6:	4b3c      	ldr	r3, [pc, #240]	; (8005c98 <drawStatusMenu+0x280>)
 8005ba8:	4a47      	ldr	r2, [pc, #284]	; (8005cc8 <drawStatusMenu+0x2b0>)
 8005baa:	f7fb fd31 	bl	8001610 <LCD_PutStr>
 8005bae:	e007      	b.n	8005bc0 <drawStatusMenu+0x1a8>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	b298      	uxth	r0, r3
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	b299      	uxth	r1, r3
 8005bb8:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <drawStatusMenu+0x280>)
 8005bba:	4a3d      	ldr	r2, [pc, #244]	; (8005cb0 <drawStatusMenu+0x298>)
 8005bbc:	f7fb fd28 	bl	8001610 <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	b298      	uxth	r0, r3
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	b299      	uxth	r1, r3
 8005bcc:	4b32      	ldr	r3, [pc, #200]	; (8005c98 <drawStatusMenu+0x280>)
 8005bce:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <drawStatusMenu+0x2b4>)
 8005bd0:	f7fb fd1e 	bl	8001610 <LCD_PutStr>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	61fb      	str	r3, [r7, #28]
		if(ZION.ASIC_EEPROM_Detected){
 8005bde:	4b36      	ldr	r3, [pc, #216]	; (8005cb8 <drawStatusMenu+0x2a0>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <drawStatusMenu+0x1e0>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	b298      	uxth	r0, r3
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	b299      	uxth	r1, r3
 8005bee:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <drawStatusMenu+0x280>)
 8005bf0:	4a32      	ldr	r2, [pc, #200]	; (8005cbc <drawStatusMenu+0x2a4>)
 8005bf2:	f7fb fd0d 	bl	8001610 <LCD_PutStr>
 8005bf6:	e007      	b.n	8005c08 <drawStatusMenu+0x1f0>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	b298      	uxth	r0, r3
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	b299      	uxth	r1, r3
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <drawStatusMenu+0x280>)
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <drawStatusMenu+0x2a8>)
 8005c04:	f7fb fd04 	bl	8001610 <LCD_PutStr>
		}
		i=10;
 8005c08:	230a      	movs	r3, #10
 8005c0a:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	330f      	adds	r3, #15
 8005c10:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	b298      	uxth	r0, r3
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	b299      	uxth	r1, r3
 8005c1a:	4b1f      	ldr	r3, [pc, #124]	; (8005c98 <drawStatusMenu+0x280>)
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <drawStatusMenu+0x2b8>)
 8005c1e:	f7fb fcf7 	bl	8001610 <LCD_PutStr>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault3){
 8005c2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <drawStatusMenu+0x290>)
 8005c2e:	789b      	ldrb	r3, [r3, #2]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <drawStatusMenu+0x22e>
			LCD_PutStr(i, j, "FAULT 3 Triggered", fnt7x10);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	b298      	uxth	r0, r3
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	b299      	uxth	r1, r3
 8005c3c:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <drawStatusMenu+0x280>)
 8005c3e:	4a25      	ldr	r2, [pc, #148]	; (8005cd4 <drawStatusMenu+0x2bc>)
 8005c40:	f7fb fce6 	bl	8001610 <LCD_PutStr>
 8005c44:	e007      	b.n	8005c56 <drawStatusMenu+0x23e>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	b298      	uxth	r0, r3
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	b299      	uxth	r1, r3
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <drawStatusMenu+0x280>)
 8005c50:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <drawStatusMenu+0x298>)
 8005c52:	f7fb fcdd 	bl	8001610 <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	b298      	uxth	r0, r3
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b299      	uxth	r1, r3
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <drawStatusMenu+0x280>)
 8005c64:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <drawStatusMenu+0x2c0>)
 8005c66:	f7fb fcd3 	bl	8001610 <LCD_PutStr>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	61fb      	str	r3, [r7, #28]
		if(ZION.DISPLAY_EEPROM_Detected){
 8005c74:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <drawStatusMenu+0x2a0>)
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d02f      	beq.n	8005cdc <drawStatusMenu+0x2c4>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	b298      	uxth	r0, r3
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	b299      	uxth	r1, r3
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <drawStatusMenu+0x280>)
 8005c86:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <drawStatusMenu+0x2a4>)
 8005c88:	f7fb fcc2 	bl	8001610 <LCD_PutStr>
 8005c8c:	e02e      	b.n	8005cec <drawStatusMenu+0x2d4>
 8005c8e:	bf00      	nop
 8005c90:	20003354 	.word	0x20003354
 8005c94:	20028a86 	.word	0x20028a86
 8005c98:	08018104 	.word	0x08018104
 8005c9c:	08017948 	.word	0x08017948
 8005ca0:	08017950 	.word	0x08017950
 8005ca4:	08017960 	.word	0x08017960
 8005ca8:	200032d8 	.word	0x200032d8
 8005cac:	0801796c 	.word	0x0801796c
 8005cb0:	0801797c 	.word	0x0801797c
 8005cb4:	08017984 	.word	0x08017984
 8005cb8:	20003274 	.word	0x20003274
 8005cbc:	0801798c 	.word	0x0801798c
 8005cc0:	08017998 	.word	0x08017998
 8005cc4:	080179a4 	.word	0x080179a4
 8005cc8:	080179b0 	.word	0x080179b0
 8005ccc:	080179c0 	.word	0x080179c0
 8005cd0:	080179c8 	.word	0x080179c8
 8005cd4:	080179d4 	.word	0x080179d4
 8005cd8:	080179e8 	.word	0x080179e8
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	b298      	uxth	r0, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	b299      	uxth	r1, r3
 8005ce4:	4b72      	ldr	r3, [pc, #456]	; (8005eb0 <drawStatusMenu+0x498>)
 8005ce6:	4a73      	ldr	r2, [pc, #460]	; (8005eb4 <drawStatusMenu+0x49c>)
 8005ce8:	f7fb fc92 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005cec:	230a      	movs	r3, #10
 8005cee:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	330f      	adds	r3, #15
 8005cf4:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	b298      	uxth	r0, r3
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	b299      	uxth	r1, r3
 8005cfe:	4b6c      	ldr	r3, [pc, #432]	; (8005eb0 <drawStatusMenu+0x498>)
 8005d00:	4a6d      	ldr	r2, [pc, #436]	; (8005eb8 <drawStatusMenu+0x4a0>)
 8005d02:	f7fb fc85 	bl	8001610 <LCD_PutStr>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault4){
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <drawStatusMenu+0x4a4>)
 8005d12:	78db      	ldrb	r3, [r3, #3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <drawStatusMenu+0x312>
			LCD_PutStr(i, j, "FAULT 4 Triggered", fnt7x10);
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	b298      	uxth	r0, r3
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	4b63      	ldr	r3, [pc, #396]	; (8005eb0 <drawStatusMenu+0x498>)
 8005d22:	4a67      	ldr	r2, [pc, #412]	; (8005ec0 <drawStatusMenu+0x4a8>)
 8005d24:	f7fb fc74 	bl	8001610 <LCD_PutStr>
 8005d28:	e007      	b.n	8005d3a <drawStatusMenu+0x322>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	b298      	uxth	r0, r3
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	b299      	uxth	r1, r3
 8005d32:	4b5f      	ldr	r3, [pc, #380]	; (8005eb0 <drawStatusMenu+0x498>)
 8005d34:	4a63      	ldr	r2, [pc, #396]	; (8005ec4 <drawStatusMenu+0x4ac>)
 8005d36:	f7fb fc6b 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005d3a:	230a      	movs	r3, #10
 8005d3c:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	330f      	adds	r3, #15
 8005d42:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	b298      	uxth	r0, r3
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	b299      	uxth	r1, r3
 8005d4c:	4b58      	ldr	r3, [pc, #352]	; (8005eb0 <drawStatusMenu+0x498>)
 8005d4e:	4a5e      	ldr	r2, [pc, #376]	; (8005ec8 <drawStatusMenu+0x4b0>)
 8005d50:	f7fb fc5e 	bl	8001610 <LCD_PutStr>
 8005d54:	4603      	mov	r3, r0
 8005d56:	461a      	mov	r2, r3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault5){
 8005d5e:	4b57      	ldr	r3, [pc, #348]	; (8005ebc <drawStatusMenu+0x4a4>)
 8005d60:	791b      	ldrb	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <drawStatusMenu+0x360>
			LCD_PutStr(i, j, "FAULT 5 Triggered", fnt7x10);
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	b298      	uxth	r0, r3
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	b299      	uxth	r1, r3
 8005d6e:	4b50      	ldr	r3, [pc, #320]	; (8005eb0 <drawStatusMenu+0x498>)
 8005d70:	4a56      	ldr	r2, [pc, #344]	; (8005ecc <drawStatusMenu+0x4b4>)
 8005d72:	f7fb fc4d 	bl	8001610 <LCD_PutStr>
 8005d76:	e007      	b.n	8005d88 <drawStatusMenu+0x370>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	b298      	uxth	r0, r3
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	b299      	uxth	r1, r3
 8005d80:	4b4b      	ldr	r3, [pc, #300]	; (8005eb0 <drawStatusMenu+0x498>)
 8005d82:	4a50      	ldr	r2, [pc, #320]	; (8005ec4 <drawStatusMenu+0x4ac>)
 8005d84:	f7fb fc44 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005d88:	230a      	movs	r3, #10
 8005d8a:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	330f      	adds	r3, #15
 8005d90:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	b298      	uxth	r0, r3
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	b299      	uxth	r1, r3
 8005d9a:	4b45      	ldr	r3, [pc, #276]	; (8005eb0 <drawStatusMenu+0x498>)
 8005d9c:	4a4c      	ldr	r2, [pc, #304]	; (8005ed0 <drawStatusMenu+0x4b8>)
 8005d9e:	f7fb fc37 	bl	8001610 <LCD_PutStr>
 8005da2:	4603      	mov	r3, r0
 8005da4:	461a      	mov	r2, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault6){
 8005dac:	4b43      	ldr	r3, [pc, #268]	; (8005ebc <drawStatusMenu+0x4a4>)
 8005dae:	795b      	ldrb	r3, [r3, #5]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <drawStatusMenu+0x3ae>
			LCD_PutStr(i, j, "FAULT 6 Triggered", fnt7x10);
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	b298      	uxth	r0, r3
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	b299      	uxth	r1, r3
 8005dbc:	4b3c      	ldr	r3, [pc, #240]	; (8005eb0 <drawStatusMenu+0x498>)
 8005dbe:	4a45      	ldr	r2, [pc, #276]	; (8005ed4 <drawStatusMenu+0x4bc>)
 8005dc0:	f7fb fc26 	bl	8001610 <LCD_PutStr>
 8005dc4:	e007      	b.n	8005dd6 <drawStatusMenu+0x3be>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	b298      	uxth	r0, r3
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	b299      	uxth	r1, r3
 8005dce:	4b38      	ldr	r3, [pc, #224]	; (8005eb0 <drawStatusMenu+0x498>)
 8005dd0:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <drawStatusMenu+0x4ac>)
 8005dd2:	f7fb fc1d 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	330f      	adds	r3, #15
 8005dde:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	b298      	uxth	r0, r3
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	b299      	uxth	r1, r3
 8005de8:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <drawStatusMenu+0x498>)
 8005dea:	4a3b      	ldr	r2, [pc, #236]	; (8005ed8 <drawStatusMenu+0x4c0>)
 8005dec:	f7fb fc10 	bl	8001610 <LCD_PutStr>
 8005df0:	4603      	mov	r3, r0
 8005df2:	461a      	mov	r2, r3
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault7){
 8005dfa:	4b30      	ldr	r3, [pc, #192]	; (8005ebc <drawStatusMenu+0x4a4>)
 8005dfc:	799b      	ldrb	r3, [r3, #6]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <drawStatusMenu+0x3fc>
			LCD_PutStr(i, j, "FAULT 7 Triggered", fnt7x10);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	b298      	uxth	r0, r3
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	b299      	uxth	r1, r3
 8005e0a:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <drawStatusMenu+0x498>)
 8005e0c:	4a33      	ldr	r2, [pc, #204]	; (8005edc <drawStatusMenu+0x4c4>)
 8005e0e:	f7fb fbff 	bl	8001610 <LCD_PutStr>
 8005e12:	e007      	b.n	8005e24 <drawStatusMenu+0x40c>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	b298      	uxth	r0, r3
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	b299      	uxth	r1, r3
 8005e1c:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <drawStatusMenu+0x498>)
 8005e1e:	4a29      	ldr	r2, [pc, #164]	; (8005ec4 <drawStatusMenu+0x4ac>)
 8005e20:	f7fb fbf6 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005e24:	230a      	movs	r3, #10
 8005e26:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	330f      	adds	r3, #15
 8005e2c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	b298      	uxth	r0, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	b299      	uxth	r1, r3
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <drawStatusMenu+0x498>)
 8005e38:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <drawStatusMenu+0x4c8>)
 8005e3a:	f7fb fbe9 	bl	8001610 <LCD_PutStr>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault8){
 8005e48:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <drawStatusMenu+0x4a4>)
 8005e4a:	7adb      	ldrb	r3, [r3, #11]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <drawStatusMenu+0x44a>
			LCD_PutStr(i, j, "FAULT 8 Triggered", fnt7x10);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	b298      	uxth	r0, r3
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	b299      	uxth	r1, r3
 8005e58:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <drawStatusMenu+0x498>)
 8005e5a:	4a22      	ldr	r2, [pc, #136]	; (8005ee4 <drawStatusMenu+0x4cc>)
 8005e5c:	f7fb fbd8 	bl	8001610 <LCD_PutStr>
 8005e60:	e007      	b.n	8005e72 <drawStatusMenu+0x45a>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	b298      	uxth	r0, r3
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <drawStatusMenu+0x498>)
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <drawStatusMenu+0x4ac>)
 8005e6e:	f7fb fbcf 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005e72:	230a      	movs	r3, #10
 8005e74:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	330f      	adds	r3, #15
 8005e7a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault9: ", fnt7x10);
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	b298      	uxth	r0, r3
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	b299      	uxth	r1, r3
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <drawStatusMenu+0x498>)
 8005e86:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <drawStatusMenu+0x4d0>)
 8005e88:	f7fb fbc2 	bl	8001610 <LCD_PutStr>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault9){
 8005e96:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <drawStatusMenu+0x4a4>)
 8005e98:	7b1b      	ldrb	r3, [r3, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d028      	beq.n	8005ef0 <drawStatusMenu+0x4d8>
			LCD_PutStr(i, j, "FAULT 9 Triggered", fnt7x10);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	b298      	uxth	r0, r3
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	b299      	uxth	r1, r3
 8005ea6:	4b02      	ldr	r3, [pc, #8]	; (8005eb0 <drawStatusMenu+0x498>)
 8005ea8:	4a10      	ldr	r2, [pc, #64]	; (8005eec <drawStatusMenu+0x4d4>)
 8005eaa:	f7fb fbb1 	bl	8001610 <LCD_PutStr>
 8005eae:	e027      	b.n	8005f00 <drawStatusMenu+0x4e8>
 8005eb0:	08018104 	.word	0x08018104
 8005eb4:	08017998 	.word	0x08017998
 8005eb8:	080179f4 	.word	0x080179f4
 8005ebc:	200032d8 	.word	0x200032d8
 8005ec0:	08017a00 	.word	0x08017a00
 8005ec4:	0801797c 	.word	0x0801797c
 8005ec8:	08017a14 	.word	0x08017a14
 8005ecc:	08017a20 	.word	0x08017a20
 8005ed0:	08017a34 	.word	0x08017a34
 8005ed4:	08017a40 	.word	0x08017a40
 8005ed8:	08017a54 	.word	0x08017a54
 8005edc:	08017a60 	.word	0x08017a60
 8005ee0:	08017a74 	.word	0x08017a74
 8005ee4:	08017a80 	.word	0x08017a80
 8005ee8:	08017a94 	.word	0x08017a94
 8005eec:	08017aa0 	.word	0x08017aa0
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	b298      	uxth	r0, r3
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	b299      	uxth	r1, r3
 8005ef8:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <drawStatusMenu+0x580>)
 8005efa:	4a28      	ldr	r2, [pc, #160]	; (8005f9c <drawStatusMenu+0x584>)
 8005efc:	f7fb fb88 	bl	8001610 <LCD_PutStr>
		}


		//horizontal divider
		j=65;
 8005f00:	2341      	movs	r3, #65	; 0x41
 8005f02:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b299      	uxth	r1, r3
 8005f0c:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <drawStatusMenu+0x588>)
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	3b02      	subs	r3, #2
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3301      	adds	r3, #1
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2002      	movs	r0, #2
 8005f1e:	f7fb f82b 	bl	8000f78 <LCD_FillRect>
		//vertical divider
		i=230;
 8005f22:	23e6      	movs	r3, #230	; 0xe6
 8005f24:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b03      	subs	r3, #3
 8005f2c:	b298      	uxth	r0, r3
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	b299      	uxth	r1, r3
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3303      	adds	r3, #3
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <drawStatusMenu+0x58c>)
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	3b02      	subs	r3, #2
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f7fb f819 	bl	8000f78 <LCD_FillRect>

		i=200;
 8005f46:	23c8      	movs	r3, #200	; 0xc8
 8005f48:	61fb      	str	r3, [r7, #28]
		j=220;
 8005f4a:	23dc      	movs	r3, #220	; 0xdc
 8005f4c:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	b298      	uxth	r0, r3
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	b299      	uxth	r1, r3
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f7fb fca7 	bl	80018b0 <drawUpDownArrow>
		i=180;
 8005f62:	23b4      	movs	r3, #180	; 0xb4
 8005f64:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	b298      	uxth	r0, r3
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	b299      	uxth	r1, r3
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f7fb fc9b 	bl	80018b0 <drawUpDownArrow>
		i=220;
 8005f7a:	23dc      	movs	r3, #220	; 0xdc
 8005f7c:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	b298      	uxth	r0, r3
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	b299      	uxth	r1, r3
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f7fb fc8f 	bl	80018b0 <drawUpDownArrow>
		break;
 8005f92:	f000 beb6 	b.w	8006d02 <drawStatusMenu+0x12ea>
 8005f96:	bf00      	nop
 8005f98:	08018104 	.word	0x08018104
 8005f9c:	0801797c 	.word	0x0801797c
 8005fa0:	20028a86 	.word	0x20028a86
 8005fa4:	20028a88 	.word	0x20028a88
	}
	case 2:{
		i=35;
 8005fa8:	2323      	movs	r3, #35	; 0x23
 8005faa:	61fb      	str	r3, [r7, #28]
		j=90;
 8005fac:	235a      	movs	r3, #90	; 0x5a
 8005fae:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b02      	subs	r3, #2
 8005fb6:	b299      	uxth	r1, r3
 8005fb8:	4ba4      	ldr	r3, [pc, #656]	; (800624c <drawStatusMenu+0x834>)
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	3b02      	subs	r3, #2
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2002      	movs	r0, #2
 8005fca:	f7fa ffd5 	bl	8000f78 <LCD_FillRect>
		j=75;
 8005fce:	234b      	movs	r3, #75	; 0x4b
 8005fd0:	61bb      	str	r3, [r7, #24]
		i=42;
 8005fd2:	232a      	movs	r3, #42	; 0x2a
 8005fd4:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	b298      	uxth	r0, r3
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	b299      	uxth	r1, r3
 8005fde:	4b9c      	ldr	r3, [pc, #624]	; (8006250 <drawStatusMenu+0x838>)
 8005fe0:	4a9c      	ldr	r2, [pc, #624]	; (8006254 <drawStatusMenu+0x83c>)
 8005fe2:	f7fb fb15 	bl	8001610 <LCD_PutStr>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	61fb      	str	r3, [r7, #28]
		i+=125;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	337d      	adds	r3, #125	; 0x7d
 8005ff4:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	b298      	uxth	r0, r3
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	b299      	uxth	r1, r3
 8005ffe:	4b94      	ldr	r3, [pc, #592]	; (8006250 <drawStatusMenu+0x838>)
 8006000:	4a95      	ldr	r2, [pc, #596]	; (8006258 <drawStatusMenu+0x840>)
 8006002:	f7fb fb05 	bl	8001610 <LCD_PutStr>

		i=10;
 8006006:	230a      	movs	r3, #10
 8006008:	61fb      	str	r3, [r7, #28]
		j=95;
 800600a:	235f      	movs	r3, #95	; 0x5f
 800600c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	b298      	uxth	r0, r3
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	b299      	uxth	r1, r3
 8006016:	4b8e      	ldr	r3, [pc, #568]	; (8006250 <drawStatusMenu+0x838>)
 8006018:	4a90      	ldr	r2, [pc, #576]	; (800625c <drawStatusMenu+0x844>)
 800601a:	f7fb faf9 	bl	8001610 <LCD_PutStr>
 800601e:	4603      	mov	r3, r0
 8006020:	461a      	mov	r2, r3
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8006028:	4b8d      	ldr	r3, [pc, #564]	; (8006260 <drawStatusMenu+0x848>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a8d      	ldr	r2, [pc, #564]	; (8006264 <drawStatusMenu+0x84c>)
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	edd3 7a00 	vldr	s15, [r3]
 8006036:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006268 <drawStatusMenu+0x850>
 800603a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800603e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006042:	ee17 3a90 	vmov	r3, s15
 8006046:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	b298      	uxth	r0, r3
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	b299      	uxth	r1, r3
 8006050:	4b7f      	ldr	r3, [pc, #508]	; (8006250 <drawStatusMenu+0x838>)
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	2303      	movs	r3, #3
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f7fb fb78 	bl	800174c <LCD_PutIntF>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	4413      	add	r3, r2
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	b298      	uxth	r0, r3
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	b299      	uxth	r1, r3
 8006072:	4b77      	ldr	r3, [pc, #476]	; (8006250 <drawStatusMenu+0x838>)
 8006074:	4a7d      	ldr	r2, [pc, #500]	; (800626c <drawStatusMenu+0x854>)
 8006076:	f7fb facb 	bl	8001610 <LCD_PutStr>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 8006084:	4b76      	ldr	r3, [pc, #472]	; (8006260 <drawStatusMenu+0x848>)
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	4a76      	ldr	r2, [pc, #472]	; (8006264 <drawStatusMenu+0x84c>)
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	edd3 7a00 	vldr	s15, [r3]
 8006092:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006268 <drawStatusMenu+0x850>
 8006096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800609a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800609e:	ee17 3a90 	vmov	r3, s15
 80060a2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	b298      	uxth	r0, r3
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	b299      	uxth	r1, r3
 80060ac:	4b68      	ldr	r3, [pc, #416]	; (8006250 <drawStatusMenu+0x838>)
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2303      	movs	r3, #3
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	f7fb fb4a 	bl	800174c <LCD_PutIntF>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	b298      	uxth	r0, r3
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	b299      	uxth	r1, r3
 80060ce:	4b60      	ldr	r3, [pc, #384]	; (8006250 <drawStatusMenu+0x838>)
 80060d0:	4a67      	ldr	r2, [pc, #412]	; (8006270 <drawStatusMenu+0x858>)
 80060d2:	f7fb fa9d 	bl	8001610 <LCD_PutStr>
 80060d6:	4603      	mov	r3, r0
 80060d8:	461a      	mov	r2, r3
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	b298      	uxth	r0, r3
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	b299      	uxth	r1, r3
 80060e8:	4b62      	ldr	r3, [pc, #392]	; (8006274 <drawStatusMenu+0x85c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a62      	ldr	r2, [pc, #392]	; (8006278 <drawStatusMenu+0x860>)
 80060ee:	5cd3      	ldrb	r3, [r2, r3]
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b57      	ldr	r3, [pc, #348]	; (8006250 <drawStatusMenu+0x838>)
 80060f4:	f7fb fac4 	bl	8001680 <LCD_PutInt>
 80060f8:	4603      	mov	r3, r0
 80060fa:	461a      	mov	r2, r3
 80060fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fe:	4413      	add	r3, r2
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	4413      	add	r3, r2
 8006104:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	b298      	uxth	r0, r3
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	b299      	uxth	r1, r3
 800610e:	4b50      	ldr	r3, [pc, #320]	; (8006250 <drawStatusMenu+0x838>)
 8006110:	4a5a      	ldr	r2, [pc, #360]	; (800627c <drawStatusMenu+0x864>)
 8006112:	f7fb fa7d 	bl	8001610 <LCD_PutStr>
 8006116:	4603      	mov	r3, r0
 8006118:	461a      	mov	r2, r3
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	b298      	uxth	r0, r3
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	b299      	uxth	r1, r3
 8006128:	4b52      	ldr	r3, [pc, #328]	; (8006274 <drawStatusMenu+0x85c>)
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	4a52      	ldr	r2, [pc, #328]	; (8006278 <drawStatusMenu+0x860>)
 800612e:	5cd3      	ldrb	r3, [r2, r3]
 8006130:	461a      	mov	r2, r3
 8006132:	4b47      	ldr	r3, [pc, #284]	; (8006250 <drawStatusMenu+0x838>)
 8006134:	f7fb faa4 	bl	8001680 <LCD_PutInt>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	61fb      	str	r3, [r7, #28]


		i=10;
 8006142:	230a      	movs	r3, #10
 8006144:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	330f      	adds	r3, #15
 800614a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	b298      	uxth	r0, r3
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	b299      	uxth	r1, r3
 8006154:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <drawStatusMenu+0x838>)
 8006156:	4a4a      	ldr	r2, [pc, #296]	; (8006280 <drawStatusMenu+0x868>)
 8006158:	f7fb fa5a 	bl	8001610 <LCD_PutStr>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 8006166:	4b3e      	ldr	r3, [pc, #248]	; (8006260 <drawStatusMenu+0x848>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4a3e      	ldr	r2, [pc, #248]	; (8006264 <drawStatusMenu+0x84c>)
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	edd3 7a00 	vldr	s15, [r3]
 8006174:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006268 <drawStatusMenu+0x850>
 8006178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800617c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006180:	ee17 3a90 	vmov	r3, s15
 8006184:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	b298      	uxth	r0, r3
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	b299      	uxth	r1, r3
 800618e:	4b30      	ldr	r3, [pc, #192]	; (8006250 <drawStatusMenu+0x838>)
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	2303      	movs	r3, #3
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	f7fb fad9 	bl	800174c <LCD_PutIntF>
 800619a:	4603      	mov	r3, r0
 800619c:	461a      	mov	r2, r3
 800619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a0:	4413      	add	r3, r2
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	b298      	uxth	r0, r3
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	b299      	uxth	r1, r3
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <drawStatusMenu+0x838>)
 80061b2:	4a34      	ldr	r2, [pc, #208]	; (8006284 <drawStatusMenu+0x86c>)
 80061b4:	f7fb fa2c 	bl	8001610 <LCD_PutStr>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 80061c2:	4b27      	ldr	r3, [pc, #156]	; (8006260 <drawStatusMenu+0x848>)
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	4a27      	ldr	r2, [pc, #156]	; (8006264 <drawStatusMenu+0x84c>)
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	edd3 7a00 	vldr	s15, [r3]
 80061d0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006268 <drawStatusMenu+0x850>
 80061d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061dc:	ee17 3a90 	vmov	r3, s15
 80061e0:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	b298      	uxth	r0, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	b299      	uxth	r1, r3
 80061ea:	4b19      	ldr	r3, [pc, #100]	; (8006250 <drawStatusMenu+0x838>)
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	2303      	movs	r3, #3
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f7fb faab 	bl	800174c <LCD_PutIntF>
 80061f6:	4603      	mov	r3, r0
 80061f8:	461a      	mov	r2, r3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	b298      	uxth	r0, r3
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	b299      	uxth	r1, r3
 800620c:	4b10      	ldr	r3, [pc, #64]	; (8006250 <drawStatusMenu+0x838>)
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <drawStatusMenu+0x870>)
 8006210:	f7fb f9fe 	bl	8001610 <LCD_PutStr>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	b298      	uxth	r0, r3
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	b299      	uxth	r1, r3
 8006226:	4b13      	ldr	r3, [pc, #76]	; (8006274 <drawStatusMenu+0x85c>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	4a13      	ldr	r2, [pc, #76]	; (8006278 <drawStatusMenu+0x860>)
 800622c:	5cd3      	ldrb	r3, [r2, r3]
 800622e:	461a      	mov	r2, r3
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <drawStatusMenu+0x838>)
 8006232:	f7fb fa25 	bl	8001680 <LCD_PutInt>
 8006236:	4603      	mov	r3, r0
 8006238:	461a      	mov	r2, r3
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	4413      	add	r3, r2
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	b298      	uxth	r0, r3
 8006248:	e020      	b.n	800628c <drawStatusMenu+0x874>
 800624a:	bf00      	nop
 800624c:	20028a86 	.word	0x20028a86
 8006250:	08018104 	.word	0x08018104
 8006254:	08017ab4 	.word	0x08017ab4
 8006258:	08017ac4 	.word	0x08017ac4
 800625c:	08017ad4 	.word	0x08017ad4
 8006260:	20000128 	.word	0x20000128
 8006264:	200310c0 	.word	0x200310c0
 8006268:	447a0000 	.word	0x447a0000
 800626c:	08017adc 	.word	0x08017adc
 8006270:	08017ae4 	.word	0x08017ae4
 8006274:	200000f8 	.word	0x200000f8
 8006278:	20028d14 	.word	0x20028d14
 800627c:	08017aec 	.word	0x08017aec
 8006280:	08017af4 	.word	0x08017af4
 8006284:	08017afc 	.word	0x08017afc
 8006288:	08017b04 	.word	0x08017b04
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	b299      	uxth	r1, r3
 8006290:	4ba3      	ldr	r3, [pc, #652]	; (8006520 <drawStatusMenu+0xb08>)
 8006292:	4aa4      	ldr	r2, [pc, #656]	; (8006524 <drawStatusMenu+0xb0c>)
 8006294:	f7fb f9bc 	bl	8001610 <LCD_PutStr>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	b298      	uxth	r0, r3
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	b299      	uxth	r1, r3
 80062aa:	4b9f      	ldr	r3, [pc, #636]	; (8006528 <drawStatusMenu+0xb10>)
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	4a9f      	ldr	r2, [pc, #636]	; (800652c <drawStatusMenu+0xb14>)
 80062b0:	5cd3      	ldrb	r3, [r2, r3]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b9a      	ldr	r3, [pc, #616]	; (8006520 <drawStatusMenu+0xb08>)
 80062b6:	f7fb f9e3 	bl	8001680 <LCD_PutInt>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	61fb      	str	r3, [r7, #28]

		i=10;
 80062c4:	230a      	movs	r3, #10
 80062c6:	61fb      	str	r3, [r7, #28]
		j+=15;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	330f      	adds	r3, #15
 80062cc:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	b298      	uxth	r0, r3
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	b299      	uxth	r1, r3
 80062d6:	4b92      	ldr	r3, [pc, #584]	; (8006520 <drawStatusMenu+0xb08>)
 80062d8:	4a95      	ldr	r2, [pc, #596]	; (8006530 <drawStatusMenu+0xb18>)
 80062da:	f7fb f999 	bl	8001610 <LCD_PutStr>
 80062de:	4603      	mov	r3, r0
 80062e0:	461a      	mov	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 80062e8:	4b92      	ldr	r3, [pc, #584]	; (8006534 <drawStatusMenu+0xb1c>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	4a92      	ldr	r2, [pc, #584]	; (8006538 <drawStatusMenu+0xb20>)
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	edd3 7a00 	vldr	s15, [r3]
 80062f6:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800653c <drawStatusMenu+0xb24>
 80062fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006302:	ee17 3a90 	vmov	r3, s15
 8006306:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	b298      	uxth	r0, r3
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	b299      	uxth	r1, r3
 8006310:	4b83      	ldr	r3, [pc, #524]	; (8006520 <drawStatusMenu+0xb08>)
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2303      	movs	r3, #3
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f7fb fa18 	bl	800174c <LCD_PutIntF>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	4413      	add	r3, r2
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	b298      	uxth	r0, r3
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	b299      	uxth	r1, r3
 8006332:	4b7b      	ldr	r3, [pc, #492]	; (8006520 <drawStatusMenu+0xb08>)
 8006334:	4a82      	ldr	r2, [pc, #520]	; (8006540 <drawStatusMenu+0xb28>)
 8006336:	f7fb f96b 	bl	8001610 <LCD_PutStr>
 800633a:	4603      	mov	r3, r0
 800633c:	461a      	mov	r2, r3
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 8006344:	4b7b      	ldr	r3, [pc, #492]	; (8006534 <drawStatusMenu+0xb1c>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a7b      	ldr	r2, [pc, #492]	; (8006538 <drawStatusMenu+0xb20>)
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	edd3 7a00 	vldr	s15, [r3]
 8006352:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800653c <drawStatusMenu+0xb24>
 8006356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800635a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800635e:	ee17 3a90 	vmov	r3, s15
 8006362:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	b298      	uxth	r0, r3
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	b299      	uxth	r1, r3
 800636c:	4b6c      	ldr	r3, [pc, #432]	; (8006520 <drawStatusMenu+0xb08>)
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2303      	movs	r3, #3
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f7fb f9ea 	bl	800174c <LCD_PutIntF>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	b298      	uxth	r0, r3
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	b299      	uxth	r1, r3
 800638e:	4b64      	ldr	r3, [pc, #400]	; (8006520 <drawStatusMenu+0xb08>)
 8006390:	4a6c      	ldr	r2, [pc, #432]	; (8006544 <drawStatusMenu+0xb2c>)
 8006392:	f7fb f93d 	bl	8001610 <LCD_PutStr>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	b298      	uxth	r0, r3
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	b299      	uxth	r1, r3
 80063a8:	4b5f      	ldr	r3, [pc, #380]	; (8006528 <drawStatusMenu+0xb10>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a5f      	ldr	r2, [pc, #380]	; (800652c <drawStatusMenu+0xb14>)
 80063ae:	5cd3      	ldrb	r3, [r2, r3]
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b5b      	ldr	r3, [pc, #364]	; (8006520 <drawStatusMenu+0xb08>)
 80063b4:	f7fb f964 	bl	8001680 <LCD_PutInt>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461a      	mov	r2, r3
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	4413      	add	r3, r2
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	b298      	uxth	r0, r3
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	b299      	uxth	r1, r3
 80063ce:	4b54      	ldr	r3, [pc, #336]	; (8006520 <drawStatusMenu+0xb08>)
 80063d0:	4a5d      	ldr	r2, [pc, #372]	; (8006548 <drawStatusMenu+0xb30>)
 80063d2:	f7fb f91d 	bl	8001610 <LCD_PutStr>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	b298      	uxth	r0, r3
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	b299      	uxth	r1, r3
 80063e8:	4b4f      	ldr	r3, [pc, #316]	; (8006528 <drawStatusMenu+0xb10>)
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a4f      	ldr	r2, [pc, #316]	; (800652c <drawStatusMenu+0xb14>)
 80063ee:	5cd3      	ldrb	r3, [r2, r3]
 80063f0:	461a      	mov	r2, r3
 80063f2:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <drawStatusMenu+0xb08>)
 80063f4:	f7fb f944 	bl	8001680 <LCD_PutInt>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	61fb      	str	r3, [r7, #28]

		i=10;
 8006402:	230a      	movs	r3, #10
 8006404:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	330f      	adds	r3, #15
 800640a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	b298      	uxth	r0, r3
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	b299      	uxth	r1, r3
 8006414:	4b42      	ldr	r3, [pc, #264]	; (8006520 <drawStatusMenu+0xb08>)
 8006416:	4a4d      	ldr	r2, [pc, #308]	; (800654c <drawStatusMenu+0xb34>)
 8006418:	f7fb f8fa 	bl	8001610 <LCD_PutStr>
 800641c:	4603      	mov	r3, r0
 800641e:	461a      	mov	r2, r3
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	4413      	add	r3, r2
 8006424:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 8006426:	4b43      	ldr	r3, [pc, #268]	; (8006534 <drawStatusMenu+0xb1c>)
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	4a43      	ldr	r2, [pc, #268]	; (8006538 <drawStatusMenu+0xb20>)
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	edd3 7a00 	vldr	s15, [r3]
 8006434:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800653c <drawStatusMenu+0xb24>
 8006438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800643c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006440:	ee17 3a90 	vmov	r3, s15
 8006444:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	b298      	uxth	r0, r3
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	b299      	uxth	r1, r3
 800644e:	4b34      	ldr	r3, [pc, #208]	; (8006520 <drawStatusMenu+0xb08>)
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	2303      	movs	r3, #3
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	f7fb f979 	bl	800174c <LCD_PutIntF>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	4413      	add	r3, r2
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	4413      	add	r3, r2
 8006466:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	b298      	uxth	r0, r3
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	b299      	uxth	r1, r3
 8006470:	4b2b      	ldr	r3, [pc, #172]	; (8006520 <drawStatusMenu+0xb08>)
 8006472:	4a37      	ldr	r2, [pc, #220]	; (8006550 <drawStatusMenu+0xb38>)
 8006474:	f7fb f8cc 	bl	8001610 <LCD_PutStr>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	4413      	add	r3, r2
 8006480:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 8006482:	4b2c      	ldr	r3, [pc, #176]	; (8006534 <drawStatusMenu+0xb1c>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	4a2c      	ldr	r2, [pc, #176]	; (8006538 <drawStatusMenu+0xb20>)
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	edd3 7a00 	vldr	s15, [r3]
 8006490:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800653c <drawStatusMenu+0xb24>
 8006494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800649c:	ee17 3a90 	vmov	r3, s15
 80064a0:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	b298      	uxth	r0, r3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	b299      	uxth	r1, r3
 80064aa:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <drawStatusMenu+0xb08>)
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2303      	movs	r3, #3
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	f7fb f94b 	bl	800174c <LCD_PutIntF>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	b298      	uxth	r0, r3
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	b299      	uxth	r1, r3
 80064cc:	4b14      	ldr	r3, [pc, #80]	; (8006520 <drawStatusMenu+0xb08>)
 80064ce:	4a21      	ldr	r2, [pc, #132]	; (8006554 <drawStatusMenu+0xb3c>)
 80064d0:	f7fb f89e 	bl	8001610 <LCD_PutStr>
 80064d4:	4603      	mov	r3, r0
 80064d6:	461a      	mov	r2, r3
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	b298      	uxth	r0, r3
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	b299      	uxth	r1, r3
 80064e6:	4b10      	ldr	r3, [pc, #64]	; (8006528 <drawStatusMenu+0xb10>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	4a10      	ldr	r2, [pc, #64]	; (800652c <drawStatusMenu+0xb14>)
 80064ec:	5cd3      	ldrb	r3, [r2, r3]
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <drawStatusMenu+0xb08>)
 80064f2:	f7fb f8c5 	bl	8001680 <LCD_PutInt>


		i=10;
 80064f6:	230a      	movs	r3, #10
 80064f8:	61fb      	str	r3, [r7, #28]
		j+=15;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	330f      	adds	r3, #15
 80064fe:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	b298      	uxth	r0, r3
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	b299      	uxth	r1, r3
 8006508:	4b05      	ldr	r3, [pc, #20]	; (8006520 <drawStatusMenu+0xb08>)
 800650a:	4a13      	ldr	r2, [pc, #76]	; (8006558 <drawStatusMenu+0xb40>)
 800650c:	f7fb f880 	bl	8001610 <LCD_PutStr>
 8006510:	4603      	mov	r3, r0
 8006512:	461a      	mov	r2, r3
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <drawStatusMenu+0xb1c>)
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	e01d      	b.n	800655c <drawStatusMenu+0xb44>
 8006520:	08018104 	.word	0x08018104
 8006524:	08017b0c 	.word	0x08017b0c
 8006528:	200000f8 	.word	0x200000f8
 800652c:	20028d14 	.word	0x20028d14
 8006530:	08017b14 	.word	0x08017b14
 8006534:	20000128 	.word	0x20000128
 8006538:	200310c0 	.word	0x200310c0
 800653c:	447a0000 	.word	0x447a0000
 8006540:	08017b1c 	.word	0x08017b1c
 8006544:	08017b24 	.word	0x08017b24
 8006548:	08017b2c 	.word	0x08017b2c
 800654c:	08017b34 	.word	0x08017b34
 8006550:	08017b3c 	.word	0x08017b3c
 8006554:	08017b44 	.word	0x08017b44
 8006558:	08017b4c 	.word	0x08017b4c
 800655c:	4aa7      	ldr	r2, [pc, #668]	; (80067fc <drawStatusMenu+0xde4>)
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	edd3 7a00 	vldr	s15, [r3]
 8006566:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8006800 <drawStatusMenu+0xde8>
 800656a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800656e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006572:	ee17 3a90 	vmov	r3, s15
 8006576:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	b298      	uxth	r0, r3
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	b299      	uxth	r1, r3
 8006580:	4ba0      	ldr	r3, [pc, #640]	; (8006804 <drawStatusMenu+0xdec>)
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	2303      	movs	r3, #3
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	f7fb f8e0 	bl	800174c <LCD_PutIntF>
 800658c:	4603      	mov	r3, r0
 800658e:	461a      	mov	r2, r3
 8006590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006592:	4413      	add	r3, r2
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	b298      	uxth	r0, r3
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	b299      	uxth	r1, r3
 80065a2:	4b98      	ldr	r3, [pc, #608]	; (8006804 <drawStatusMenu+0xdec>)
 80065a4:	4a98      	ldr	r2, [pc, #608]	; (8006808 <drawStatusMenu+0xdf0>)
 80065a6:	f7fb f833 	bl	8001610 <LCD_PutStr>
 80065aa:	4603      	mov	r3, r0
 80065ac:	461a      	mov	r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 80065b4:	4b95      	ldr	r3, [pc, #596]	; (800680c <drawStatusMenu+0xdf4>)
 80065b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b8:	4a90      	ldr	r2, [pc, #576]	; (80067fc <drawStatusMenu+0xde4>)
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	edd3 7a00 	vldr	s15, [r3]
 80065c2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8006800 <drawStatusMenu+0xde8>
 80065c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ce:	ee17 3a90 	vmov	r3, s15
 80065d2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	b298      	uxth	r0, r3
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	b299      	uxth	r1, r3
 80065dc:	4b89      	ldr	r3, [pc, #548]	; (8006804 <drawStatusMenu+0xdec>)
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2303      	movs	r3, #3
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f7fb f8b2 	bl	800174c <LCD_PutIntF>
 80065e8:	4603      	mov	r3, r0
 80065ea:	461a      	mov	r2, r3
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	b298      	uxth	r0, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	b299      	uxth	r1, r3
 80065fe:	4b81      	ldr	r3, [pc, #516]	; (8006804 <drawStatusMenu+0xdec>)
 8006600:	4a83      	ldr	r2, [pc, #524]	; (8006810 <drawStatusMenu+0xdf8>)
 8006602:	f7fb f805 	bl	8001610 <LCD_PutStr>
 8006606:	4603      	mov	r3, r0
 8006608:	461a      	mov	r2, r3
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	b298      	uxth	r0, r3
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	b299      	uxth	r1, r3
 8006618:	4b7e      	ldr	r3, [pc, #504]	; (8006814 <drawStatusMenu+0xdfc>)
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	4a7e      	ldr	r2, [pc, #504]	; (8006818 <drawStatusMenu+0xe00>)
 800661e:	5cd3      	ldrb	r3, [r2, r3]
 8006620:	461a      	mov	r2, r3
 8006622:	4b78      	ldr	r3, [pc, #480]	; (8006804 <drawStatusMenu+0xdec>)
 8006624:	f7fb f82c 	bl	8001680 <LCD_PutInt>

		i=10;
 8006628:	230a      	movs	r3, #10
 800662a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	330f      	adds	r3, #15
 8006630:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	b298      	uxth	r0, r3
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	b299      	uxth	r1, r3
 800663a:	4b72      	ldr	r3, [pc, #456]	; (8006804 <drawStatusMenu+0xdec>)
 800663c:	4a77      	ldr	r2, [pc, #476]	; (800681c <drawStatusMenu+0xe04>)
 800663e:	f7fa ffe7 	bl	8001610 <LCD_PutStr>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 800664c:	4b6f      	ldr	r3, [pc, #444]	; (800680c <drawStatusMenu+0xdf4>)
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <drawStatusMenu+0xde4>)
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	edd3 7a00 	vldr	s15, [r3]
 800665a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8006800 <drawStatusMenu+0xde8>
 800665e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006666:	ee17 3a90 	vmov	r3, s15
 800666a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	b298      	uxth	r0, r3
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	b299      	uxth	r1, r3
 8006674:	4b63      	ldr	r3, [pc, #396]	; (8006804 <drawStatusMenu+0xdec>)
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	2303      	movs	r3, #3
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f7fb f866 	bl	800174c <LCD_PutIntF>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	4413      	add	r3, r2
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	b298      	uxth	r0, r3
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	b299      	uxth	r1, r3
 8006696:	4b5b      	ldr	r3, [pc, #364]	; (8006804 <drawStatusMenu+0xdec>)
 8006698:	4a61      	ldr	r2, [pc, #388]	; (8006820 <drawStatusMenu+0xe08>)
 800669a:	f7fa ffb9 	bl	8001610 <LCD_PutStr>
 800669e:	4603      	mov	r3, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 80066a8:	4b58      	ldr	r3, [pc, #352]	; (800680c <drawStatusMenu+0xdf4>)
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	4a53      	ldr	r2, [pc, #332]	; (80067fc <drawStatusMenu+0xde4>)
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	edd3 7a00 	vldr	s15, [r3]
 80066b6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8006800 <drawStatusMenu+0xde8>
 80066ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c2:	ee17 3a90 	vmov	r3, s15
 80066c6:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	b298      	uxth	r0, r3
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	b299      	uxth	r1, r3
 80066d0:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <drawStatusMenu+0xdec>)
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2303      	movs	r3, #3
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	f7fb f838 	bl	800174c <LCD_PutIntF>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	b298      	uxth	r0, r3
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	b299      	uxth	r1, r3
 80066f2:	4b44      	ldr	r3, [pc, #272]	; (8006804 <drawStatusMenu+0xdec>)
 80066f4:	4a4b      	ldr	r2, [pc, #300]	; (8006824 <drawStatusMenu+0xe0c>)
 80066f6:	f7fa ff8b 	bl	8001610 <LCD_PutStr>
 80066fa:	4603      	mov	r3, r0
 80066fc:	461a      	mov	r2, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	b298      	uxth	r0, r3
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	b299      	uxth	r1, r3
 800670c:	4b41      	ldr	r3, [pc, #260]	; (8006814 <drawStatusMenu+0xdfc>)
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	4a41      	ldr	r2, [pc, #260]	; (8006818 <drawStatusMenu+0xe00>)
 8006712:	5cd3      	ldrb	r3, [r2, r3]
 8006714:	461a      	mov	r2, r3
 8006716:	4b3b      	ldr	r3, [pc, #236]	; (8006804 <drawStatusMenu+0xdec>)
 8006718:	f7fa ffb2 	bl	8001680 <LCD_PutInt>

		i=10;
 800671c:	230a      	movs	r3, #10
 800671e:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	330f      	adds	r3, #15
 8006724:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	b298      	uxth	r0, r3
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	b299      	uxth	r1, r3
 800672e:	4b35      	ldr	r3, [pc, #212]	; (8006804 <drawStatusMenu+0xdec>)
 8006730:	4a3d      	ldr	r2, [pc, #244]	; (8006828 <drawStatusMenu+0xe10>)
 8006732:	f7fa ff6d 	bl	8001610 <LCD_PutStr>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 8006740:	4b32      	ldr	r3, [pc, #200]	; (800680c <drawStatusMenu+0xdf4>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	4a2d      	ldr	r2, [pc, #180]	; (80067fc <drawStatusMenu+0xde4>)
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	edd3 7a00 	vldr	s15, [r3]
 800674e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006800 <drawStatusMenu+0xde8>
 8006752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800675a:	ee17 3a90 	vmov	r3, s15
 800675e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	b298      	uxth	r0, r3
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	b299      	uxth	r1, r3
 8006768:	4b26      	ldr	r3, [pc, #152]	; (8006804 <drawStatusMenu+0xdec>)
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2303      	movs	r3, #3
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f7fa ffec 	bl	800174c <LCD_PutIntF>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	4413      	add	r3, r2
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	b298      	uxth	r0, r3
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	b299      	uxth	r1, r3
 800678a:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <drawStatusMenu+0xdec>)
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <drawStatusMenu+0xe14>)
 800678e:	f7fa ff3f 	bl	8001610 <LCD_PutStr>
 8006792:	4603      	mov	r3, r0
 8006794:	461a      	mov	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <drawStatusMenu+0xdf4>)
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	4a16      	ldr	r2, [pc, #88]	; (80067fc <drawStatusMenu+0xde4>)
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	edd3 7a00 	vldr	s15, [r3]
 80067aa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006800 <drawStatusMenu+0xde8>
 80067ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067b6:	ee17 3a90 	vmov	r3, s15
 80067ba:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	b298      	uxth	r0, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	b299      	uxth	r1, r3
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <drawStatusMenu+0xdec>)
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2303      	movs	r3, #3
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	f7fa ffbe 	bl	800174c <LCD_PutIntF>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	b298      	uxth	r0, r3
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	b299      	uxth	r1, r3
 80067e6:	4b07      	ldr	r3, [pc, #28]	; (8006804 <drawStatusMenu+0xdec>)
 80067e8:	4a11      	ldr	r2, [pc, #68]	; (8006830 <drawStatusMenu+0xe18>)
 80067ea:	f7fa ff11 	bl	8001610 <LCD_PutStr>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e01c      	b.n	8006834 <drawStatusMenu+0xe1c>
 80067fa:	bf00      	nop
 80067fc:	200310c0 	.word	0x200310c0
 8006800:	447a0000 	.word	0x447a0000
 8006804:	08018104 	.word	0x08018104
 8006808:	08017b54 	.word	0x08017b54
 800680c:	20000128 	.word	0x20000128
 8006810:	08017b5c 	.word	0x08017b5c
 8006814:	200000f8 	.word	0x200000f8
 8006818:	20028d14 	.word	0x20028d14
 800681c:	08017b64 	.word	0x08017b64
 8006820:	08017b6c 	.word	0x08017b6c
 8006824:	08017b74 	.word	0x08017b74
 8006828:	08017b7c 	.word	0x08017b7c
 800682c:	08017b84 	.word	0x08017b84
 8006830:	08017b8c 	.word	0x08017b8c
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	b298      	uxth	r0, r3
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	b299      	uxth	r1, r3
 800683c:	4b9b      	ldr	r3, [pc, #620]	; (8006aac <drawStatusMenu+0x1094>)
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	4a9b      	ldr	r2, [pc, #620]	; (8006ab0 <drawStatusMenu+0x1098>)
 8006842:	5cd3      	ldrb	r3, [r2, r3]
 8006844:	461a      	mov	r2, r3
 8006846:	4b9b      	ldr	r3, [pc, #620]	; (8006ab4 <drawStatusMenu+0x109c>)
 8006848:	f7fa ff1a 	bl	8001680 <LCD_PutInt>

		i=10;
 800684c:	230a      	movs	r3, #10
 800684e:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	330f      	adds	r3, #15
 8006854:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	b298      	uxth	r0, r3
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	b299      	uxth	r1, r3
 800685e:	4b95      	ldr	r3, [pc, #596]	; (8006ab4 <drawStatusMenu+0x109c>)
 8006860:	4a95      	ldr	r2, [pc, #596]	; (8006ab8 <drawStatusMenu+0x10a0>)
 8006862:	f7fa fed5 	bl	8001610 <LCD_PutStr>
 8006866:	4603      	mov	r3, r0
 8006868:	461a      	mov	r2, r3
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 8006870:	4b92      	ldr	r3, [pc, #584]	; (8006abc <drawStatusMenu+0x10a4>)
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	4a92      	ldr	r2, [pc, #584]	; (8006ac0 <drawStatusMenu+0x10a8>)
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	edd3 7a00 	vldr	s15, [r3]
 800687e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006ac4 <drawStatusMenu+0x10ac>
 8006882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800688a:	ee17 3a90 	vmov	r3, s15
 800688e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	b298      	uxth	r0, r3
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	b299      	uxth	r1, r3
 8006898:	4b86      	ldr	r3, [pc, #536]	; (8006ab4 <drawStatusMenu+0x109c>)
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	2303      	movs	r3, #3
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	f7fa ff54 	bl	800174c <LCD_PutIntF>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	b298      	uxth	r0, r3
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	b299      	uxth	r1, r3
 80068ba:	4b7e      	ldr	r3, [pc, #504]	; (8006ab4 <drawStatusMenu+0x109c>)
 80068bc:	4a82      	ldr	r2, [pc, #520]	; (8006ac8 <drawStatusMenu+0x10b0>)
 80068be:	f7fa fea7 	bl	8001610 <LCD_PutStr>
 80068c2:	4603      	mov	r3, r0
 80068c4:	461a      	mov	r2, r3
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	4413      	add	r3, r2
 80068ca:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	b298      	uxth	r0, r3
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	b299      	uxth	r1, r3
 80068d4:	4b75      	ldr	r3, [pc, #468]	; (8006aac <drawStatusMenu+0x1094>)
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	4a75      	ldr	r2, [pc, #468]	; (8006ab0 <drawStatusMenu+0x1098>)
 80068da:	5cd3      	ldrb	r3, [r2, r3]
 80068dc:	461a      	mov	r2, r3
 80068de:	4b75      	ldr	r3, [pc, #468]	; (8006ab4 <drawStatusMenu+0x109c>)
 80068e0:	f7fa fece 	bl	8001680 <LCD_PutInt>

		i=10;
 80068e4:	230a      	movs	r3, #10
 80068e6:	61fb      	str	r3, [r7, #28]
		j+=15;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	330f      	adds	r3, #15
 80068ec:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	b298      	uxth	r0, r3
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	b299      	uxth	r1, r3
 80068f6:	4b6f      	ldr	r3, [pc, #444]	; (8006ab4 <drawStatusMenu+0x109c>)
 80068f8:	4a74      	ldr	r2, [pc, #464]	; (8006acc <drawStatusMenu+0x10b4>)
 80068fa:	f7fa fe89 	bl	8001610 <LCD_PutStr>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 8006908:	4b6c      	ldr	r3, [pc, #432]	; (8006abc <drawStatusMenu+0x10a4>)
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	4a6c      	ldr	r2, [pc, #432]	; (8006ac0 <drawStatusMenu+0x10a8>)
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	edd3 7a00 	vldr	s15, [r3]
 8006916:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8006ac4 <drawStatusMenu+0x10ac>
 800691a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800691e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006922:	ee17 3a90 	vmov	r3, s15
 8006926:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	b298      	uxth	r0, r3
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	b299      	uxth	r1, r3
 8006930:	4b60      	ldr	r3, [pc, #384]	; (8006ab4 <drawStatusMenu+0x109c>)
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2303      	movs	r3, #3
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	f7fa ff08 	bl	800174c <LCD_PutIntF>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	b298      	uxth	r0, r3
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	b299      	uxth	r1, r3
 8006952:	4b58      	ldr	r3, [pc, #352]	; (8006ab4 <drawStatusMenu+0x109c>)
 8006954:	4a5e      	ldr	r2, [pc, #376]	; (8006ad0 <drawStatusMenu+0x10b8>)
 8006956:	f7fa fe5b 	bl	8001610 <LCD_PutStr>
 800695a:	4603      	mov	r3, r0
 800695c:	461a      	mov	r2, r3
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	b298      	uxth	r0, r3
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	b299      	uxth	r1, r3
 800696c:	4b4f      	ldr	r3, [pc, #316]	; (8006aac <drawStatusMenu+0x1094>)
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	4a4f      	ldr	r2, [pc, #316]	; (8006ab0 <drawStatusMenu+0x1098>)
 8006972:	5cd3      	ldrb	r3, [r2, r3]
 8006974:	461a      	mov	r2, r3
 8006976:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <drawStatusMenu+0x109c>)
 8006978:	f7fa fe82 	bl	8001680 <LCD_PutInt>
		//horizontal divider
		j=65;
 800697c:	2341      	movs	r3, #65	; 0x41
 800697e:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b299      	uxth	r1, r3
 8006988:	4b52      	ldr	r3, [pc, #328]	; (8006ad4 <drawStatusMenu+0x10bc>)
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	3b02      	subs	r3, #2
 800698e:	b29a      	uxth	r2, r3
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	b29b      	uxth	r3, r3
 8006994:	3301      	adds	r3, #1
 8006996:	b29b      	uxth	r3, r3
 8006998:	2002      	movs	r0, #2
 800699a:	f7fa faed 	bl	8000f78 <LCD_FillRect>
		//vertical divider
		i=230;
 800699e:	23e6      	movs	r3, #230	; 0xe6
 80069a0:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b03      	subs	r3, #3
 80069a8:	b298      	uxth	r0, r3
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	b299      	uxth	r1, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3303      	adds	r3, #3
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	4b48      	ldr	r3, [pc, #288]	; (8006ad8 <drawStatusMenu+0x10c0>)
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	3b02      	subs	r3, #2
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f7fa fadb 	bl	8000f78 <LCD_FillRect>

		i=155;
 80069c2:	239b      	movs	r3, #155	; 0x9b
 80069c4:	61fb      	str	r3, [r7, #28]
		j=35;
 80069c6:	2323      	movs	r3, #35	; 0x23
 80069c8:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	b298      	uxth	r0, r3
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	b299      	uxth	r1, r3
 80069d2:	4b38      	ldr	r3, [pc, #224]	; (8006ab4 <drawStatusMenu+0x109c>)
 80069d4:	4a41      	ldr	r2, [pc, #260]	; (8006adc <drawStatusMenu+0x10c4>)
 80069d6:	f7fa fe1b 	bl	8001610 <LCD_PutStr>
		i=155;
 80069da:	239b      	movs	r3, #155	; 0x9b
 80069dc:	61fb      	str	r3, [r7, #28]
		j=50;
 80069de:	2332      	movs	r3, #50	; 0x32
 80069e0:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	b298      	uxth	r0, r3
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	b299      	uxth	r1, r3
 80069ea:	4b32      	ldr	r3, [pc, #200]	; (8006ab4 <drawStatusMenu+0x109c>)
 80069ec:	4a3c      	ldr	r2, [pc, #240]	; (8006ae0 <drawStatusMenu+0x10c8>)
 80069ee:	f7fa fe0f 	bl	8001610 <LCD_PutStr>
 80069f2:	4603      	mov	r3, r0
 80069f4:	3308      	adds	r3, #8
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	61fb      	str	r3, [r7, #28]
		j=28;
 80069fc:	231c      	movs	r3, #28
 80069fe:	61bb      	str	r3, [r7, #24]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	b298      	uxth	r0, r3
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	b299      	uxth	r1, r3
 8006a08:	4b36      	ldr	r3, [pc, #216]	; (8006ae4 <drawStatusMenu+0x10cc>)
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006a12:	f7fa fe9b 	bl	800174c <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 8006a16:	23c8      	movs	r3, #200	; 0xc8
 8006a18:	61fb      	str	r3, [r7, #28]
		j=220;
 8006a1a:	23dc      	movs	r3, #220	; 0xdc
 8006a1c:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	b298      	uxth	r0, r3
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	b299      	uxth	r1, r3
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f7fa ff3f 	bl	80018b0 <drawUpDownArrow>
		j=15;
 8006a32:	230f      	movs	r3, #15
 8006a34:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	b298      	uxth	r0, r3
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	b299      	uxth	r1, r3
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f7fa ff33 	bl	80018b0 <drawUpDownArrow>
		i=180;
 8006a4a:	23b4      	movs	r3, #180	; 0xb4
 8006a4c:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	b298      	uxth	r0, r3
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	b299      	uxth	r1, r3
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f7fa ff27 	bl	80018b0 <drawUpDownArrow>
		j=220;
 8006a62:	23dc      	movs	r3, #220	; 0xdc
 8006a64:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	b298      	uxth	r0, r3
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	b299      	uxth	r1, r3
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f7fa ff1b 	bl	80018b0 <drawUpDownArrow>
		i=220;
 8006a7a:	23dc      	movs	r3, #220	; 0xdc
 8006a7c:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	b298      	uxth	r0, r3
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	b299      	uxth	r1, r3
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f7fa ff0f 	bl	80018b0 <drawUpDownArrow>
		j=15;
 8006a92:	230f      	movs	r3, #15
 8006a94:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	b298      	uxth	r0, r3
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	b299      	uxth	r1, r3
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f7fa ff03 	bl	80018b0 <drawUpDownArrow>
		break;
 8006aaa:	e12a      	b.n	8006d02 <drawStatusMenu+0x12ea>
 8006aac:	200000f8 	.word	0x200000f8
 8006ab0:	20028d14 	.word	0x20028d14
 8006ab4:	08018104 	.word	0x08018104
 8006ab8:	08017b94 	.word	0x08017b94
 8006abc:	20000128 	.word	0x20000128
 8006ac0:	200310c0 	.word	0x200310c0
 8006ac4:	447a0000 	.word	0x447a0000
 8006ac8:	08017b9c 	.word	0x08017b9c
 8006acc:	08017ba4 	.word	0x08017ba4
 8006ad0:	08017bac 	.word	0x08017bac
 8006ad4:	20028a86 	.word	0x20028a86
 8006ad8:	20028a88 	.word	0x20028a88
 8006adc:	08017bb4 	.word	0x08017bb4
 8006ae0:	08017bc4 	.word	0x08017bc4
 8006ae4:	080184c4 	.word	0x080184c4
	}
	case 3:{
		i=35;
 8006ae8:	2323      	movs	r3, #35	; 0x23
 8006aea:	61fb      	str	r3, [r7, #28]
		j=75;
 8006aec:	234b      	movs	r3, #75	; 0x4b
 8006aee:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b02      	subs	r3, #2
 8006af6:	b299      	uxth	r1, r3
 8006af8:	4b85      	ldr	r3, [pc, #532]	; (8006d10 <drawStatusMenu+0x12f8>)
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	3b02      	subs	r3, #2
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3302      	adds	r3, #2
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2002      	movs	r0, #2
 8006b0a:	f7fa fa35 	bl	8000f78 <LCD_FillRect>
		j=55;
 8006b0e:	2337      	movs	r3, #55	; 0x37
 8006b10:	61bb      	str	r3, [r7, #24]
		i=150;
 8006b12:	2396      	movs	r3, #150	; 0x96
 8006b14:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	b298      	uxth	r0, r3
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	b299      	uxth	r1, r3
 8006b1e:	4b7d      	ldr	r3, [pc, #500]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006b20:	4a7d      	ldr	r2, [pc, #500]	; (8006d18 <drawStatusMenu+0x1300>)
 8006b22:	f7fa fd75 	bl	8001610 <LCD_PutStr>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61fb      	str	r3, [r7, #28]

		i=40;
 8006b30:	2328      	movs	r3, #40	; 0x28
 8006b32:	61fb      	str	r3, [r7, #28]
		j=85;
 8006b34:	2355      	movs	r3, #85	; 0x55
 8006b36:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	b298      	uxth	r0, r3
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	b299      	uxth	r1, r3
 8006b40:	4b74      	ldr	r3, [pc, #464]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006b42:	4a76      	ldr	r2, [pc, #472]	; (8006d1c <drawStatusMenu+0x1304>)
 8006b44:	f7fa fd64 	bl	8001610 <LCD_PutStr>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	4413      	add	r3, r2
 8006b50:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	b298      	uxth	r0, r3
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	b299      	uxth	r1, r3
 8006b5a:	4b6e      	ldr	r3, [pc, #440]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006b5c:	4a70      	ldr	r2, [pc, #448]	; (8006d20 <drawStatusMenu+0x1308>)
 8006b5e:	f7fa fd57 	bl	8001610 <LCD_PutStr>

		i=40;
 8006b62:	2328      	movs	r3, #40	; 0x28
 8006b64:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3319      	adds	r3, #25
 8006b6a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	b298      	uxth	r0, r3
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	b299      	uxth	r1, r3
 8006b74:	4b67      	ldr	r3, [pc, #412]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006b76:	4a6b      	ldr	r2, [pc, #428]	; (8006d24 <drawStatusMenu+0x130c>)
 8006b78:	f7fa fd4a 	bl	8001610 <LCD_PutStr>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	61fb      	str	r3, [r7, #28]
		if(!(errorLED.ledDriver)){
 8006b86:	4b68      	ldr	r3, [pc, #416]	; (8006d28 <drawStatusMenu+0x1310>)
 8006b88:	7b5b      	ldrb	r3, [r3, #13]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d108      	bne.n	8006ba0 <drawStatusMenu+0x1188>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	b298      	uxth	r0, r3
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	b299      	uxth	r1, r3
 8006b96:	4b5f      	ldr	r3, [pc, #380]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006b98:	4a64      	ldr	r2, [pc, #400]	; (8006d2c <drawStatusMenu+0x1314>)
 8006b9a:	f7fa fd39 	bl	8001610 <LCD_PutStr>
 8006b9e:	e007      	b.n	8006bb0 <drawStatusMenu+0x1198>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	b298      	uxth	r0, r3
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	b299      	uxth	r1, r3
 8006ba8:	4b5a      	ldr	r3, [pc, #360]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006baa:	4a61      	ldr	r2, [pc, #388]	; (8006d30 <drawStatusMenu+0x1318>)
 8006bac:	f7fa fd30 	bl	8001610 <LCD_PutStr>
		}

		i=40;
 8006bb0:	2328      	movs	r3, #40	; 0x28
 8006bb2:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	3319      	adds	r3, #25
 8006bb8:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	b298      	uxth	r0, r3
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	b299      	uxth	r1, r3
 8006bc2:	4b54      	ldr	r3, [pc, #336]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006bc4:	4a5b      	ldr	r2, [pc, #364]	; (8006d34 <drawStatusMenu+0x131c>)
 8006bc6:	f7fa fd23 	bl	8001610 <LCD_PutStr>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	461a      	mov	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	b298      	uxth	r0, r3
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	b299      	uxth	r1, r3
 8006bdc:	4b4d      	ldr	r3, [pc, #308]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006bde:	4a56      	ldr	r2, [pc, #344]	; (8006d38 <drawStatusMenu+0x1320>)
 8006be0:	f7fa fd16 	bl	8001610 <LCD_PutStr>

		i=40;
 8006be4:	2328      	movs	r3, #40	; 0x28
 8006be6:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	3319      	adds	r3, #25
 8006bec:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	b298      	uxth	r0, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	b299      	uxth	r1, r3
 8006bf6:	4b47      	ldr	r3, [pc, #284]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006bf8:	4a50      	ldr	r2, [pc, #320]	; (8006d3c <drawStatusMenu+0x1324>)
 8006bfa:	f7fa fd09 	bl	8001610 <LCD_PutStr>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	61fb      	str	r3, [r7, #28]
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8006c08:	4b4d      	ldr	r3, [pc, #308]	; (8006d40 <drawStatusMenu+0x1328>)
 8006c0a:	7818      	ldrb	r0, [r3, #0]
 8006c0c:	4b4c      	ldr	r3, [pc, #304]	; (8006d40 <drawStatusMenu+0x1328>)
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2301      	movs	r3, #1
 8006c14:	2200      	movs	r2, #0
 8006c16:	2111      	movs	r1, #17
 8006c18:	f7fc fd0a 	bl	8003630 <writeI2CRegister>
 8006c1c:	6178      	str	r0, [r7, #20]
		if(i2cCheck == HAL_OK){
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <drawStatusMenu+0x1224>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	b298      	uxth	r0, r3
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	b299      	uxth	r1, r3
 8006c2c:	4b39      	ldr	r3, [pc, #228]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006c2e:	4a3f      	ldr	r2, [pc, #252]	; (8006d2c <drawStatusMenu+0x1314>)
 8006c30:	f7fa fcee 	bl	8001610 <LCD_PutStr>
			// Clear the HAL fault LED.
			errorLED.fault9 = false;
 8006c34:	4b3c      	ldr	r3, [pc, #240]	; (8006d28 <drawStatusMenu+0x1310>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	731a      	strb	r2, [r3, #12]
 8006c3a:	e007      	b.n	8006c4c <drawStatusMenu+0x1234>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	b298      	uxth	r0, r3
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	b299      	uxth	r1, r3
 8006c44:	4b33      	ldr	r3, [pc, #204]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006c46:	4a3f      	ldr	r2, [pc, #252]	; (8006d44 <drawStatusMenu+0x132c>)
 8006c48:	f7fa fce2 	bl	8001610 <LCD_PutStr>
		}


		i=40;
 8006c4c:	2328      	movs	r3, #40	; 0x28
 8006c4e:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	3319      	adds	r3, #25
 8006c54:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	b298      	uxth	r0, r3
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	b299      	uxth	r1, r3
 8006c5e:	4b2d      	ldr	r3, [pc, #180]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006c60:	4a39      	ldr	r2, [pc, #228]	; (8006d48 <drawStatusMenu+0x1330>)
 8006c62:	f7fa fcd5 	bl	8001610 <LCD_PutStr>
 8006c66:	4603      	mov	r3, r0
 8006c68:	461a      	mov	r2, r3
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61fb      	str	r3, [r7, #28]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8006c70:	f002 fe1a 	bl	80098a8 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <drawStatusMenu+0x1334>)
 8006c78:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7c:	099b      	lsrs	r3, r3, #6
 8006c7e:	613b      	str	r3, [r7, #16]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	b298      	uxth	r0, r3
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	b299      	uxth	r1, r3
 8006c88:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	f7fa fcf8 	bl	8001680 <LCD_PutInt>
 8006c90:	4603      	mov	r3, r0
 8006c92:	461a      	mov	r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	b298      	uxth	r0, r3
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	b299      	uxth	r1, r3
 8006ca2:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <drawStatusMenu+0x12fc>)
 8006ca4:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <drawStatusMenu+0x1338>)
 8006ca6:	f7fa fcb3 	bl	8001610 <LCD_PutStr>
 8006caa:	4603      	mov	r3, r0
 8006cac:	461a      	mov	r2, r3
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	61fb      	str	r3, [r7, #28]

		i=200;
 8006cb4:	23c8      	movs	r3, #200	; 0xc8
 8006cb6:	61fb      	str	r3, [r7, #28]
		j=15;
 8006cb8:	230f      	movs	r3, #15
 8006cba:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	b298      	uxth	r0, r3
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f7fa fdf0 	bl	80018b0 <drawUpDownArrow>
		i=180;
 8006cd0:	23b4      	movs	r3, #180	; 0xb4
 8006cd2:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	b298      	uxth	r0, r3
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	b299      	uxth	r1, r3
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f7fa fde4 	bl	80018b0 <drawUpDownArrow>
		i=220;
 8006ce8:	23dc      	movs	r3, #220	; 0xdc
 8006cea:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	b298      	uxth	r0, r3
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	b299      	uxth	r1, r3
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f7fa fdd8 	bl	80018b0 <drawUpDownArrow>

		break;
 8006d00:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8006d02:	f7f9 fced 	bl	80006e0 <SMLCD_Flush>



}
 8006d06:	bf00      	nop
 8006d08:	3738      	adds	r7, #56	; 0x38
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20028a86 	.word	0x20028a86
 8006d14:	08018104 	.word	0x08018104
 8006d18:	08017bd4 	.word	0x08017bd4
 8006d1c:	08017be4 	.word	0x08017be4
 8006d20:	08017bec 	.word	0x08017bec
 8006d24:	08017c0c 	.word	0x08017c0c
 8006d28:	200032d8 	.word	0x200032d8
 8006d2c:	08017c1c 	.word	0x08017c1c
 8006d30:	08017c24 	.word	0x08017c24
 8006d34:	08017c34 	.word	0x08017c34
 8006d38:	08017c40 	.word	0x08017c40
 8006d3c:	08017c58 	.word	0x08017c58
 8006d40:	200000e0 	.word	0x200000e0
 8006d44:	08017998 	.word	0x08017998
 8006d48:	08017c64 	.word	0x08017c64
 8006d4c:	10624dd3 	.word	0x10624dd3
 8006d50:	08017c78 	.word	0x08017c78

08006d54 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08e      	sub	sp, #56	; 0x38
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8006d5c:	2314      	movs	r3, #20
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indentAlignment=20;
 8006d60:	2314      	movs	r3, #20
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowUp = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowDown=1;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	623b      	str	r3, [r7, #32]
	int arrowSize=3;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	61fb      	str	r3, [r7, #28]
	int otherBoardAlignment = 230;
 8006d70:	23e6      	movs	r3, #230	; 0xe6
 8006d72:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 8006d74:	4b8f      	ldr	r3, [pc, #572]	; (8006fb4 <drawSystemInfoMenu+0x260>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8006d7a:	f7f9 fe69 	bl	8000a50 <LCD_Clear>
	getLatestADC();
 8006d7e:	f001 f911 	bl	8007fa4 <getLatestADC>
	drawMenuHeader();
 8006d82:	f001 f853 	bl	8007e2c <drawMenuHeader>
	i  = 135;
 8006d86:	2387      	movs	r3, #135	; 0x87
 8006d88:	617b      	str	r3, [r7, #20]
	j = 24;
 8006d8a:	2318      	movs	r3, #24
 8006d8c:	613b      	str	r3, [r7, #16]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	b299      	uxth	r1, r3
 8006d92:	4b89      	ldr	r3, [pc, #548]	; (8006fb8 <drawSystemInfoMenu+0x264>)
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	3b02      	subs	r3, #2
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3303      	adds	r3, #3
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2002      	movs	r0, #2
 8006da4:	f7fa f8e8 	bl	8000f78 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);

	switch(indicator){
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d003      	beq.n	8006db6 <drawSystemInfoMenu+0x62>
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	f000 82be 	beq.w	8007330 <drawSystemInfoMenu+0x5dc>
 8006db4:	e3fe      	b.n	80075b4 <drawSystemInfoMenu+0x860>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8006db6:	232d      	movs	r3, #45	; 0x2d
 8006db8:	613b      	str	r3, [r7, #16]
		i=42;
 8006dba:	232a      	movs	r3, #42	; 0x2a
 8006dbc:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	b298      	uxth	r0, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	b299      	uxth	r1, r3
 8006dc6:	4b7d      	ldr	r3, [pc, #500]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006dc8:	4a7d      	ldr	r2, [pc, #500]	; (8006fc0 <drawSystemInfoMenu+0x26c>)
 8006dca:	f7fa fc21 	bl	8001610 <LCD_PutStr>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	b298      	uxth	r0, r3
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	b299      	uxth	r1, r3
 8006de0:	4b76      	ldr	r3, [pc, #472]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006de2:	4a78      	ldr	r2, [pc, #480]	; (8006fc4 <drawSystemInfoMenu+0x270>)
 8006de4:	f7fa fc14 	bl	8001610 <LCD_PutStr>

		j+=15;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	330f      	adds	r3, #15
 8006dec:	613b      	str	r3, [r7, #16]
		i=42;
 8006dee:	232a      	movs	r3, #42	; 0x2a
 8006df0:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	b298      	uxth	r0, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	b299      	uxth	r1, r3
 8006dfa:	4b70      	ldr	r3, [pc, #448]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006dfc:	4a72      	ldr	r2, [pc, #456]	; (8006fc8 <drawSystemInfoMenu+0x274>)
 8006dfe:	f7fa fc07 	bl	8001610 <LCD_PutStr>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	4413      	add	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	b298      	uxth	r0, r3
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	b299      	uxth	r1, r3
 8006e14:	4b69      	ldr	r3, [pc, #420]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006e16:	4a6d      	ldr	r2, [pc, #436]	; (8006fcc <drawSystemInfoMenu+0x278>)
 8006e18:	f7fa fbfa 	bl	8001610 <LCD_PutStr>

		j+=30;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	331e      	adds	r3, #30
 8006e20:	613b      	str	r3, [r7, #16]
		i=10;
 8006e22:	230a      	movs	r3, #10
 8006e24:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	b298      	uxth	r0, r3
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	b299      	uxth	r1, r3
 8006e2e:	4b63      	ldr	r3, [pc, #396]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006e30:	4a67      	ldr	r2, [pc, #412]	; (8006fd0 <drawSystemInfoMenu+0x27c>)
 8006e32:	f7fa fbed 	bl	8001610 <LCD_PutStr>

		j+=15;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	330f      	adds	r3, #15
 8006e3a:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	617b      	str	r3, [r7, #20]
		if((ZION.SOC_BoardID==1) || (ZION.ASIC_BoardID==1) || (ZION.DISPLAY_BoardID==1)){
 8006e40:	4b64      	ldr	r3, [pc, #400]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d007      	beq.n	8006e58 <drawSystemInfoMenu+0x104>
 8006e48:	4b62      	ldr	r3, [pc, #392]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d003      	beq.n	8006e58 <drawSystemInfoMenu+0x104>
 8006e50:	4b60      	ldr	r3, [pc, #384]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d108      	bne.n	8006e6a <drawSystemInfoMenu+0x116>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	b298      	uxth	r0, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	b299      	uxth	r1, r3
 8006e60:	4b56      	ldr	r3, [pc, #344]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006e62:	4a5d      	ldr	r2, [pc, #372]	; (8006fd8 <drawSystemInfoMenu+0x284>)
 8006e64:	f7fa fbd4 	bl	8001610 <LCD_PutStr>
 8006e68:	e007      	b.n	8006e7a <drawSystemInfoMenu+0x126>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	b298      	uxth	r0, r3
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	b299      	uxth	r1, r3
 8006e72:	4b52      	ldr	r3, [pc, #328]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006e74:	4a53      	ldr	r2, [pc, #332]	; (8006fc4 <drawSystemInfoMenu+0x270>)
 8006e76:	f7fa fbcb 	bl	8001610 <LCD_PutStr>
		}

		j+=15;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	330f      	adds	r3, #15
 8006e7e:	613b      	str	r3, [r7, #16]
		i=10;
 8006e80:	230a      	movs	r3, #10
 8006e82:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	b298      	uxth	r0, r3
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	b299      	uxth	r1, r3
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006e8e:	4a53      	ldr	r2, [pc, #332]	; (8006fdc <drawSystemInfoMenu+0x288>)
 8006e90:	f7fa fbbe 	bl	8001610 <LCD_PutStr>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
		i=otherBoardAlignment;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	b298      	uxth	r0, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	b299      	uxth	r1, r3
 8006eaa:	4b44      	ldr	r3, [pc, #272]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006eac:	4a4c      	ldr	r2, [pc, #304]	; (8006fe0 <drawSystemInfoMenu+0x28c>)
 8006eae:	f7fa fbaf 	bl	8001610 <LCD_PutStr>

		j+=15;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	330f      	adds	r3, #15
 8006eb6:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	b298      	uxth	r0, r3
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	b299      	uxth	r1, r3
 8006ec4:	4b3d      	ldr	r3, [pc, #244]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006ec6:	4a47      	ldr	r2, [pc, #284]	; (8006fe4 <drawSystemInfoMenu+0x290>)
 8006ec8:	f7fa fba2 	bl	8001610 <LCD_PutStr>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	461a      	mov	r2, r3
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
		if(ZION.SOC_BoardID==1){
 8006ed6:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d14a      	bne.n	8006f74 <drawSystemInfoMenu+0x220>
			i+=LCD_PutStr(i, j, "TRIDENT ", fnt7x10);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	b298      	uxth	r0, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	b299      	uxth	r1, r3
 8006ee6:	4b35      	ldr	r3, [pc, #212]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006ee8:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <drawSystemInfoMenu+0x294>)
 8006eea:	f7fa fb91 	bl	8001610 <LCD_PutStr>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
			switch(ZION.SOC_BoardFab){
 8006ef8:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d82e      	bhi.n	8006f60 <drawSystemInfoMenu+0x20c>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <drawSystemInfoMenu+0x1b4>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f19 	.word	0x08006f19
 8006f0c:	08006f2b 	.word	0x08006f2b
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	08006f4f 	.word	0x08006f4f
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	b298      	uxth	r0, r3
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	b299      	uxth	r1, r3
 8006f20:	4b26      	ldr	r3, [pc, #152]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006f22:	4a32      	ldr	r2, [pc, #200]	; (8006fec <drawSystemInfoMenu+0x298>)
 8006f24:	f7fa fb74 	bl	8001610 <LCD_PutStr>
				break;
 8006f28:	e076      	b.n	8007018 <drawSystemInfoMenu+0x2c4>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	b298      	uxth	r0, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	b299      	uxth	r1, r3
 8006f32:	4b22      	ldr	r3, [pc, #136]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006f34:	4a2e      	ldr	r2, [pc, #184]	; (8006ff0 <drawSystemInfoMenu+0x29c>)
 8006f36:	f7fa fb6b 	bl	8001610 <LCD_PutStr>
				break;
 8006f3a:	e06d      	b.n	8007018 <drawSystemInfoMenu+0x2c4>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	b298      	uxth	r0, r3
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	b299      	uxth	r1, r3
 8006f44:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006f46:	4a2b      	ldr	r2, [pc, #172]	; (8006ff4 <drawSystemInfoMenu+0x2a0>)
 8006f48:	f7fa fb62 	bl	8001610 <LCD_PutStr>
				break;
 8006f4c:	e064      	b.n	8007018 <drawSystemInfoMenu+0x2c4>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	b298      	uxth	r0, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	b299      	uxth	r1, r3
 8006f56:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006f58:	4a27      	ldr	r2, [pc, #156]	; (8006ff8 <drawSystemInfoMenu+0x2a4>)
 8006f5a:	f7fa fb59 	bl	8001610 <LCD_PutStr>
				break;
 8006f5e:	e05b      	b.n	8007018 <drawSystemInfoMenu+0x2c4>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	b298      	uxth	r0, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	b299      	uxth	r1, r3
 8006f68:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006f6a:	4a24      	ldr	r2, [pc, #144]	; (8006ffc <drawSystemInfoMenu+0x2a8>)
 8006f6c:	f7fa fb50 	bl	8001610 <LCD_PutStr>
				break;
 8006f70:	bf00      	nop
 8006f72:	e051      	b.n	8007018 <drawSystemInfoMenu+0x2c4>
			}
			}
		}
		else{
			if(ZION.SOC_EEPROM_Detected){
 8006f74:	4b17      	ldr	r3, [pc, #92]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d045      	beq.n	8007008 <drawSystemInfoMenu+0x2b4>
				if(ZION.SOC_BoardFab == -2){
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f113 0f02 	cmn.w	r3, #2
 8006f84:	d108      	bne.n	8006f98 <drawSystemInfoMenu+0x244>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	b298      	uxth	r0, r3
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	b299      	uxth	r1, r3
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006f90:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <drawSystemInfoMenu+0x2ac>)
 8006f92:	f7fa fb3d 	bl	8001610 <LCD_PutStr>
 8006f96:	e03f      	b.n	8007018 <drawSystemInfoMenu+0x2c4>
				}
				else if(ZION.SOC_BoardFab ==-1){
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <drawSystemInfoMenu+0x280>)
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d13a      	bne.n	8007018 <drawSystemInfoMenu+0x2c4>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	b298      	uxth	r0, r3
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	b299      	uxth	r1, r3
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <drawSystemInfoMenu+0x268>)
 8006fac:	4a15      	ldr	r2, [pc, #84]	; (8007004 <drawSystemInfoMenu+0x2b0>)
 8006fae:	f7fa fb2f 	bl	8001610 <LCD_PutStr>
 8006fb2:	e031      	b.n	8007018 <drawSystemInfoMenu+0x2c4>
 8006fb4:	20003354 	.word	0x20003354
 8006fb8:	20028a86 	.word	0x20028a86
 8006fbc:	08018104 	.word	0x08018104
 8006fc0:	08017c84 	.word	0x08017c84
 8006fc4:	08017c94 	.word	0x08017c94
 8006fc8:	08017c9c 	.word	0x08017c9c
 8006fcc:	08017cb4 	.word	0x08017cb4
 8006fd0:	08017cbc 	.word	0x08017cbc
 8006fd4:	20003274 	.word	0x20003274
 8006fd8:	08017cc8 	.word	0x08017cc8
 8006fdc:	08017cd0 	.word	0x08017cd0
 8006fe0:	08017ce4 	.word	0x08017ce4
 8006fe4:	08017984 	.word	0x08017984
 8006fe8:	08017cf4 	.word	0x08017cf4
 8006fec:	08017d00 	.word	0x08017d00
 8006ff0:	08017d08 	.word	0x08017d08
 8006ff4:	08017d10 	.word	0x08017d10
 8006ff8:	08017d18 	.word	0x08017d18
 8006ffc:	08017d20 	.word	0x08017d20
 8007000:	08017d28 	.word	0x08017d28
 8007004:	08017d40 	.word	0x08017d40
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	b298      	uxth	r0, r3
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	b299      	uxth	r1, r3
 8007010:	4b93      	ldr	r3, [pc, #588]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007012:	4a94      	ldr	r2, [pc, #592]	; (8007264 <drawSystemInfoMenu+0x510>)
 8007014:	f7fa fafc 	bl	8001610 <LCD_PutStr>
			}
		}
		i=otherBoardAlignment+indentAlignment;
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	4413      	add	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	b298      	uxth	r0, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	b299      	uxth	r1, r3
 8007028:	4b8d      	ldr	r3, [pc, #564]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800702a:	4a8f      	ldr	r2, [pc, #572]	; (8007268 <drawSystemInfoMenu+0x514>)
 800702c:	f7fa faf0 	bl	8001610 <LCD_PutStr>
 8007030:	4603      	mov	r3, r0
 8007032:	461a      	mov	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	4413      	add	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch){
 800703a:	4b8c      	ldr	r3, [pc, #560]	; (800726c <drawSystemInfoMenu+0x518>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <drawSystemInfoMenu+0x300>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	b298      	uxth	r0, r3
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	b299      	uxth	r1, r3
 800704a:	4b85      	ldr	r3, [pc, #532]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800704c:	4a88      	ldr	r2, [pc, #544]	; (8007270 <drawSystemInfoMenu+0x51c>)
 800704e:	f7fa fadf 	bl	8001610 <LCD_PutStr>
 8007052:	e007      	b.n	8007064 <drawSystemInfoMenu+0x310>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	b298      	uxth	r0, r3
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	b299      	uxth	r1, r3
 800705c:	4b80      	ldr	r3, [pc, #512]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800705e:	4a85      	ldr	r2, [pc, #532]	; (8007274 <drawSystemInfoMenu+0x520>)
 8007060:	f7fa fad6 	bl	8001610 <LCD_PutStr>
		}

		j+=15;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	330f      	adds	r3, #15
 8007068:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	b298      	uxth	r0, r3
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	b299      	uxth	r1, r3
 8007076:	4b7a      	ldr	r3, [pc, #488]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007078:	4a7f      	ldr	r2, [pc, #508]	; (8007278 <drawSystemInfoMenu+0x524>)
 800707a:	f7fa fac9 	bl	8001610 <LCD_PutStr>
 800707e:	4603      	mov	r3, r0
 8007080:	461a      	mov	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	4413      	add	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
		if(ZION.ASIC_BoardID==1){
 8007088:	4b78      	ldr	r3, [pc, #480]	; (800726c <drawSystemInfoMenu+0x518>)
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d14b      	bne.n	8007128 <drawSystemInfoMenu+0x3d4>
			i+=LCD_PutStr(i, j, "TOGA ", fnt7x10);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	b298      	uxth	r0, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	b299      	uxth	r1, r3
 8007098:	4b71      	ldr	r3, [pc, #452]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800709a:	4a78      	ldr	r2, [pc, #480]	; (800727c <drawSystemInfoMenu+0x528>)
 800709c:	f7fa fab8 	bl	8001610 <LCD_PutStr>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	4413      	add	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
			switch(ZION.ASIC_BoardFab){
 80070aa:	4b70      	ldr	r3, [pc, #448]	; (800726c <drawSystemInfoMenu+0x518>)
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	3b01      	subs	r3, #1
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d82f      	bhi.n	8007114 <drawSystemInfoMenu+0x3c0>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <drawSystemInfoMenu+0x368>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070df 	.word	0x080070df
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	08007103 	.word	0x08007103
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	b298      	uxth	r0, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	b299      	uxth	r1, r3
 80070d4:	4b62      	ldr	r3, [pc, #392]	; (8007260 <drawSystemInfoMenu+0x50c>)
 80070d6:	4a6a      	ldr	r2, [pc, #424]	; (8007280 <drawSystemInfoMenu+0x52c>)
 80070d8:	f7fa fa9a 	bl	8001610 <LCD_PutStr>
				break;
 80070dc:	e04c      	b.n	8007178 <drawSystemInfoMenu+0x424>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	b298      	uxth	r0, r3
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	b299      	uxth	r1, r3
 80070e6:	4b5e      	ldr	r3, [pc, #376]	; (8007260 <drawSystemInfoMenu+0x50c>)
 80070e8:	4a66      	ldr	r2, [pc, #408]	; (8007284 <drawSystemInfoMenu+0x530>)
 80070ea:	f7fa fa91 	bl	8001610 <LCD_PutStr>
				break;
 80070ee:	e043      	b.n	8007178 <drawSystemInfoMenu+0x424>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	b298      	uxth	r0, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	b299      	uxth	r1, r3
 80070f8:	4b59      	ldr	r3, [pc, #356]	; (8007260 <drawSystemInfoMenu+0x50c>)
 80070fa:	4a63      	ldr	r2, [pc, #396]	; (8007288 <drawSystemInfoMenu+0x534>)
 80070fc:	f7fa fa88 	bl	8001610 <LCD_PutStr>
				break;
 8007100:	e03a      	b.n	8007178 <drawSystemInfoMenu+0x424>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	b298      	uxth	r0, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	b299      	uxth	r1, r3
 800710a:	4b55      	ldr	r3, [pc, #340]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800710c:	4a5f      	ldr	r2, [pc, #380]	; (800728c <drawSystemInfoMenu+0x538>)
 800710e:	f7fa fa7f 	bl	8001610 <LCD_PutStr>
				break;
 8007112:	e031      	b.n	8007178 <drawSystemInfoMenu+0x424>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	b298      	uxth	r0, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	b299      	uxth	r1, r3
 800711c:	4b50      	ldr	r3, [pc, #320]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800711e:	4a5c      	ldr	r2, [pc, #368]	; (8007290 <drawSystemInfoMenu+0x53c>)
 8007120:	f7fa fa76 	bl	8001610 <LCD_PutStr>
				break;
 8007124:	bf00      	nop
 8007126:	e027      	b.n	8007178 <drawSystemInfoMenu+0x424>
			}
			}
		}
		else{
			if(ZION.ASIC_EEPROM_Detected){
 8007128:	4b50      	ldr	r3, [pc, #320]	; (800726c <drawSystemInfoMenu+0x518>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01b      	beq.n	8007168 <drawSystemInfoMenu+0x414>
				if(ZION.ASIC_BoardFab == -2){
 8007130:	4b4e      	ldr	r3, [pc, #312]	; (800726c <drawSystemInfoMenu+0x518>)
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	f113 0f02 	cmn.w	r3, #2
 8007138:	d108      	bne.n	800714c <drawSystemInfoMenu+0x3f8>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	b298      	uxth	r0, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	b299      	uxth	r1, r3
 8007142:	4b47      	ldr	r3, [pc, #284]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007144:	4a53      	ldr	r2, [pc, #332]	; (8007294 <drawSystemInfoMenu+0x540>)
 8007146:	f7fa fa63 	bl	8001610 <LCD_PutStr>
 800714a:	e015      	b.n	8007178 <drawSystemInfoMenu+0x424>
				}
				else if(ZION.ASIC_BoardFab ==-1){
 800714c:	4b47      	ldr	r3, [pc, #284]	; (800726c <drawSystemInfoMenu+0x518>)
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d110      	bne.n	8007178 <drawSystemInfoMenu+0x424>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	b298      	uxth	r0, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	b299      	uxth	r1, r3
 800715e:	4b40      	ldr	r3, [pc, #256]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007160:	4a4d      	ldr	r2, [pc, #308]	; (8007298 <drawSystemInfoMenu+0x544>)
 8007162:	f7fa fa55 	bl	8001610 <LCD_PutStr>
 8007166:	e007      	b.n	8007178 <drawSystemInfoMenu+0x424>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	b298      	uxth	r0, r3
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	b299      	uxth	r1, r3
 8007170:	4b3b      	ldr	r3, [pc, #236]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007172:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <drawSystemInfoMenu+0x510>)
 8007174:	f7fa fa4c 	bl	8001610 <LCD_PutStr>
			}
		}

		j+=15;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	330f      	adds	r3, #15
 800717c:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	b298      	uxth	r0, r3
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	b299      	uxth	r1, r3
 800718a:	4b35      	ldr	r3, [pc, #212]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800718c:	4a43      	ldr	r2, [pc, #268]	; (800729c <drawSystemInfoMenu+0x548>)
 800718e:	f7fa fa3f 	bl	8001610 <LCD_PutStr>
 8007192:	4603      	mov	r3, r0
 8007194:	461a      	mov	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	4413      	add	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
		if(ZION.DISPLAY_BoardID==1){
 800719c:	4b33      	ldr	r3, [pc, #204]	; (800726c <drawSystemInfoMenu+0x518>)
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d14b      	bne.n	800723c <drawSystemInfoMenu+0x4e8>
			i+=LCD_PutStr(i, j, "KANU ", fnt7x10);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	b298      	uxth	r0, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	b299      	uxth	r1, r3
 80071ac:	4b2c      	ldr	r3, [pc, #176]	; (8007260 <drawSystemInfoMenu+0x50c>)
 80071ae:	4a3c      	ldr	r2, [pc, #240]	; (80072a0 <drawSystemInfoMenu+0x54c>)
 80071b0:	f7fa fa2e 	bl	8001610 <LCD_PutStr>
 80071b4:	4603      	mov	r3, r0
 80071b6:	461a      	mov	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	4413      	add	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
			switch(ZION.DISPLAY_BoardFab){
 80071be:	4b2b      	ldr	r3, [pc, #172]	; (800726c <drawSystemInfoMenu+0x518>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	3b01      	subs	r3, #1
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d82f      	bhi.n	8007228 <drawSystemInfoMenu+0x4d4>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <drawSystemInfoMenu+0x47c>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071f3 	.word	0x080071f3
 80071d8:	08007205 	.word	0x08007205
 80071dc:	08007217 	.word	0x08007217
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	b298      	uxth	r0, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	b299      	uxth	r1, r3
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <drawSystemInfoMenu+0x50c>)
 80071ea:	4a25      	ldr	r2, [pc, #148]	; (8007280 <drawSystemInfoMenu+0x52c>)
 80071ec:	f7fa fa10 	bl	8001610 <LCD_PutStr>
				break;
 80071f0:	e06e      	b.n	80072d0 <drawSystemInfoMenu+0x57c>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	b298      	uxth	r0, r3
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	b299      	uxth	r1, r3
 80071fa:	4b19      	ldr	r3, [pc, #100]	; (8007260 <drawSystemInfoMenu+0x50c>)
 80071fc:	4a21      	ldr	r2, [pc, #132]	; (8007284 <drawSystemInfoMenu+0x530>)
 80071fe:	f7fa fa07 	bl	8001610 <LCD_PutStr>
				break;
 8007202:	e065      	b.n	80072d0 <drawSystemInfoMenu+0x57c>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	b298      	uxth	r0, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	b299      	uxth	r1, r3
 800720c:	4b14      	ldr	r3, [pc, #80]	; (8007260 <drawSystemInfoMenu+0x50c>)
 800720e:	4a1e      	ldr	r2, [pc, #120]	; (8007288 <drawSystemInfoMenu+0x534>)
 8007210:	f7fa f9fe 	bl	8001610 <LCD_PutStr>
				break;
 8007214:	e05c      	b.n	80072d0 <drawSystemInfoMenu+0x57c>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	b298      	uxth	r0, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	b299      	uxth	r1, r3
 800721e:	4b10      	ldr	r3, [pc, #64]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007220:	4a1a      	ldr	r2, [pc, #104]	; (800728c <drawSystemInfoMenu+0x538>)
 8007222:	f7fa f9f5 	bl	8001610 <LCD_PutStr>
				break;
 8007226:	e053      	b.n	80072d0 <drawSystemInfoMenu+0x57c>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	b298      	uxth	r0, r3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	b299      	uxth	r1, r3
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <drawSystemInfoMenu+0x53c>)
 8007234:	f7fa f9ec 	bl	8001610 <LCD_PutStr>
				break;
 8007238:	bf00      	nop
 800723a:	e049      	b.n	80072d0 <drawSystemInfoMenu+0x57c>
			}
			}
		}
		else{
			if(ZION.DISPLAY_EEPROM_Detected){
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <drawSystemInfoMenu+0x518>)
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d03d      	beq.n	80072c0 <drawSystemInfoMenu+0x56c>
				if(ZION.DISPLAY_BoardFab == -2){
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <drawSystemInfoMenu+0x518>)
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	f113 0f02 	cmn.w	r3, #2
 800724c:	d12a      	bne.n	80072a4 <drawSystemInfoMenu+0x550>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	b298      	uxth	r0, r3
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	b299      	uxth	r1, r3
 8007256:	4b02      	ldr	r3, [pc, #8]	; (8007260 <drawSystemInfoMenu+0x50c>)
 8007258:	4a0e      	ldr	r2, [pc, #56]	; (8007294 <drawSystemInfoMenu+0x540>)
 800725a:	f7fa f9d9 	bl	8001610 <LCD_PutStr>
 800725e:	e037      	b.n	80072d0 <drawSystemInfoMenu+0x57c>
 8007260:	08018104 	.word	0x08018104
 8007264:	08017d58 	.word	0x08017d58
 8007268:	08017d6c 	.word	0x08017d6c
 800726c:	20003274 	.word	0x20003274
 8007270:	08017d74 	.word	0x08017d74
 8007274:	0801798c 	.word	0x0801798c
 8007278:	080179c0 	.word	0x080179c0
 800727c:	08017d84 	.word	0x08017d84
 8007280:	08017d00 	.word	0x08017d00
 8007284:	08017d08 	.word	0x08017d08
 8007288:	08017d10 	.word	0x08017d10
 800728c:	08017d18 	.word	0x08017d18
 8007290:	08017d20 	.word	0x08017d20
 8007294:	08017d28 	.word	0x08017d28
 8007298:	08017d40 	.word	0x08017d40
 800729c:	08017d8c 	.word	0x08017d8c
 80072a0:	08017d98 	.word	0x08017d98
				}
				else if(ZION.DISPLAY_BoardFab ==-1){
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <drawSystemInfoMenu+0x5cc>)
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d110      	bne.n	80072d0 <drawSystemInfoMenu+0x57c>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	b298      	uxth	r0, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	b299      	uxth	r1, r3
 80072b6:	4b1b      	ldr	r3, [pc, #108]	; (8007324 <drawSystemInfoMenu+0x5d0>)
 80072b8:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <drawSystemInfoMenu+0x5d4>)
 80072ba:	f7fa f9a9 	bl	8001610 <LCD_PutStr>
 80072be:	e007      	b.n	80072d0 <drawSystemInfoMenu+0x57c>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	b298      	uxth	r0, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	b299      	uxth	r1, r3
 80072c8:	4b16      	ldr	r3, [pc, #88]	; (8007324 <drawSystemInfoMenu+0x5d0>)
 80072ca:	4a18      	ldr	r2, [pc, #96]	; (800732c <drawSystemInfoMenu+0x5d8>)
 80072cc:	f7fa f9a0 	bl	8001610 <LCD_PutStr>
			}
		}

		i=200;
 80072d0:	23c8      	movs	r3, #200	; 0xc8
 80072d2:	617b      	str	r3, [r7, #20]
		j=220;
 80072d4:	23dc      	movs	r3, #220	; 0xdc
 80072d6:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	b298      	uxth	r0, r3
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	b299      	uxth	r1, r3
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f7fa fae2 	bl	80018b0 <drawUpDownArrow>
		i=180;
 80072ec:	23b4      	movs	r3, #180	; 0xb4
 80072ee:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	b298      	uxth	r0, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	b299      	uxth	r1, r3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f7fa fad6 	bl	80018b0 <drawUpDownArrow>
		i=220;
 8007304:	23dc      	movs	r3, #220	; 0xdc
 8007306:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	b298      	uxth	r0, r3
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	b299      	uxth	r1, r3
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	b29a      	uxth	r2, r3
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f7fa faca 	bl	80018b0 <drawUpDownArrow>
		break;
 800731c:	e14a      	b.n	80075b4 <drawSystemInfoMenu+0x860>
 800731e:	bf00      	nop
 8007320:	20003274 	.word	0x20003274
 8007324:	08018104 	.word	0x08018104
 8007328:	08017d40 	.word	0x08017d40
 800732c:	08017d58 	.word	0x08017d58
	}
	case 2:{
		j=45;
 8007330:	232d      	movs	r3, #45	; 0x2d
 8007332:	613b      	str	r3, [r7, #16]
		i=10;
 8007334:	230a      	movs	r3, #10
 8007336:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	b298      	uxth	r0, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	b299      	uxth	r1, r3
 8007340:	4b9f      	ldr	r3, [pc, #636]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 8007342:	4aa0      	ldr	r2, [pc, #640]	; (80075c4 <drawSystemInfoMenu+0x870>)
 8007344:	f7fa f964 	bl	8001610 <LCD_PutStr>

		j+=25;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3319      	adds	r3, #25
 800734c:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	b298      	uxth	r0, r3
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	b299      	uxth	r1, r3
 800735a:	4b99      	ldr	r3, [pc, #612]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 800735c:	4a9a      	ldr	r2, [pc, #616]	; (80075c8 <drawSystemInfoMenu+0x874>)
 800735e:	f7fa f957 	bl	8001610 <LCD_PutStr>
 8007362:	4603      	mov	r3, r0
 8007364:	461a      	mov	r2, r3
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 800736c:	4b97      	ldr	r3, [pc, #604]	; (80075cc <drawSystemInfoMenu+0x878>)
 800736e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007370:	4a97      	ldr	r2, [pc, #604]	; (80075d0 <drawSystemInfoMenu+0x87c>)
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	edd3 7a00 	vldr	s15, [r3]
 800737a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800737e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007382:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007386:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800738a:	ee17 3a90 	vmov	r3, s15
 800738e:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	b298      	uxth	r0, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	b299      	uxth	r1, r3
 8007398:	4b89      	ldr	r3, [pc, #548]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2301      	movs	r3, #1
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	f7fa f9d4 	bl	800174c <LCD_PutIntF>

		j+=25;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	3319      	adds	r3, #25
 80073a8:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	b298      	uxth	r0, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	b299      	uxth	r1, r3
 80073b6:	4b82      	ldr	r3, [pc, #520]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 80073b8:	4a86      	ldr	r2, [pc, #536]	; (80075d4 <drawSystemInfoMenu+0x880>)
 80073ba:	f7fa f929 	bl	8001610 <LCD_PutStr>
 80073be:	4603      	mov	r3, r0
 80073c0:	461a      	mov	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	4413      	add	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 80073c8:	4b80      	ldr	r3, [pc, #512]	; (80075cc <drawSystemInfoMenu+0x878>)
 80073ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073cc:	4a80      	ldr	r2, [pc, #512]	; (80075d0 <drawSystemInfoMenu+0x87c>)
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	edd3 7a00 	vldr	s15, [r3]
 80073d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80073da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80073de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073e6:	ee17 3a90 	vmov	r3, s15
 80073ea:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	b298      	uxth	r0, r3
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	b299      	uxth	r1, r3
 80073f4:	4b72      	ldr	r3, [pc, #456]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2301      	movs	r3, #1
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	f7fa f9a6 	bl	800174c <LCD_PutIntF>

		j+=25;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	3319      	adds	r3, #25
 8007404:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	b298      	uxth	r0, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	b299      	uxth	r1, r3
 8007412:	4b6b      	ldr	r3, [pc, #428]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 8007414:	4a70      	ldr	r2, [pc, #448]	; (80075d8 <drawSystemInfoMenu+0x884>)
 8007416:	f7fa f8fb 	bl	8001610 <LCD_PutStr>
 800741a:	4603      	mov	r3, r0
 800741c:	461a      	mov	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8007424:	4b69      	ldr	r3, [pc, #420]	; (80075cc <drawSystemInfoMenu+0x878>)
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	4a69      	ldr	r2, [pc, #420]	; (80075d0 <drawSystemInfoMenu+0x87c>)
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	edd3 7a00 	vldr	s15, [r3]
 8007432:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007436:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800743a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800743e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007442:	ee17 3a90 	vmov	r3, s15
 8007446:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	b298      	uxth	r0, r3
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	b299      	uxth	r1, r3
 8007450:	4b5b      	ldr	r3, [pc, #364]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2301      	movs	r3, #1
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	f7fa f978 	bl	800174c <LCD_PutIntF>

		j+=25;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	3319      	adds	r3, #25
 8007460:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	b298      	uxth	r0, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	b299      	uxth	r1, r3
 800746e:	4b54      	ldr	r3, [pc, #336]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 8007470:	4a5a      	ldr	r2, [pc, #360]	; (80075dc <drawSystemInfoMenu+0x888>)
 8007472:	f7fa f8cd 	bl	8001610 <LCD_PutStr>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 8007480:	4b52      	ldr	r3, [pc, #328]	; (80075cc <drawSystemInfoMenu+0x878>)
 8007482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007484:	4a52      	ldr	r2, [pc, #328]	; (80075d0 <drawSystemInfoMenu+0x87c>)
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	edd3 7a00 	vldr	s15, [r3]
 800748e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007492:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007496:	ee27 7b06 	vmul.f64	d7, d7, d6
 800749a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800749e:	ee17 3a90 	vmov	r3, s15
 80074a2:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	b298      	uxth	r0, r3
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	b299      	uxth	r1, r3
 80074ac:	4b44      	ldr	r3, [pc, #272]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2301      	movs	r3, #1
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	f7fa f94a 	bl	800174c <LCD_PutIntF>

		j+=25;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	3319      	adds	r3, #25
 80074bc:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	b298      	uxth	r0, r3
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	b299      	uxth	r1, r3
 80074ca:	4b3d      	ldr	r3, [pc, #244]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 80074cc:	4a44      	ldr	r2, [pc, #272]	; (80075e0 <drawSystemInfoMenu+0x88c>)
 80074ce:	f7fa f89f 	bl	8001610 <LCD_PutStr>
 80074d2:	4603      	mov	r3, r0
 80074d4:	461a      	mov	r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	4413      	add	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 80074dc:	4b3b      	ldr	r3, [pc, #236]	; (80075cc <drawSystemInfoMenu+0x878>)
 80074de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e0:	4a3b      	ldr	r2, [pc, #236]	; (80075d0 <drawSystemInfoMenu+0x87c>)
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	edd3 7a00 	vldr	s15, [r3]
 80074ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80074ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80074f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80074fa:	ee17 3a90 	vmov	r3, s15
 80074fe:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	b298      	uxth	r0, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	b299      	uxth	r1, r3
 8007508:	4b2d      	ldr	r3, [pc, #180]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	2301      	movs	r3, #1
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	f7fa f91c 	bl	800174c <LCD_PutIntF>
 8007514:	4603      	mov	r3, r0
 8007516:	461a      	mov	r2, r3
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	4413      	add	r3, r2
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4413      	add	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	b298      	uxth	r0, r3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	b299      	uxth	r1, r3
 800752a:	4b25      	ldr	r3, [pc, #148]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 800752c:	4a2d      	ldr	r2, [pc, #180]	; (80075e4 <drawSystemInfoMenu+0x890>)
 800752e:	f7fa f86f 	bl	8001610 <LCD_PutStr>
 8007532:	4603      	mov	r3, r0
 8007534:	461a      	mov	r2, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch ==1){
 800753c:	4b2a      	ldr	r3, [pc, #168]	; (80075e8 <drawSystemInfoMenu+0x894>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d108      	bne.n	8007556 <drawSystemInfoMenu+0x802>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	b298      	uxth	r0, r3
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	b299      	uxth	r1, r3
 800754c:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 800754e:	4a27      	ldr	r2, [pc, #156]	; (80075ec <drawSystemInfoMenu+0x898>)
 8007550:	f7fa f85e 	bl	8001610 <LCD_PutStr>
 8007554:	e007      	b.n	8007566 <drawSystemInfoMenu+0x812>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	b298      	uxth	r0, r3
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	b299      	uxth	r1, r3
 800755e:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <drawSystemInfoMenu+0x86c>)
 8007560:	4a23      	ldr	r2, [pc, #140]	; (80075f0 <drawSystemInfoMenu+0x89c>)
 8007562:	f7fa f855 	bl	8001610 <LCD_PutStr>
		}



		i=200;
 8007566:	23c8      	movs	r3, #200	; 0xc8
 8007568:	617b      	str	r3, [r7, #20]
		j=15;
 800756a:	230f      	movs	r3, #15
 800756c:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	b298      	uxth	r0, r3
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	b299      	uxth	r1, r3
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	b29a      	uxth	r2, r3
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	b29b      	uxth	r3, r3
 800757e:	f7fa f997 	bl	80018b0 <drawUpDownArrow>
		i=180;
 8007582:	23b4      	movs	r3, #180	; 0xb4
 8007584:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	b298      	uxth	r0, r3
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	b299      	uxth	r1, r3
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	b29a      	uxth	r2, r3
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	b29b      	uxth	r3, r3
 8007596:	f7fa f98b 	bl	80018b0 <drawUpDownArrow>
		i=220;
 800759a:	23dc      	movs	r3, #220	; 0xdc
 800759c:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	b298      	uxth	r0, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	b299      	uxth	r1, r3
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f7fa f97f 	bl	80018b0 <drawUpDownArrow>

		break;
 80075b2:	bf00      	nop
	}
	}
	SMLCD_Flush();
 80075b4:	f7f9 f894 	bl	80006e0 <SMLCD_Flush>
}
 80075b8:	bf00      	nop
 80075ba:	3730      	adds	r7, #48	; 0x30
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	08018104 	.word	0x08018104
 80075c4:	08017da0 	.word	0x08017da0
 80075c8:	08017db8 	.word	0x08017db8
 80075cc:	20000128 	.word	0x20000128
 80075d0:	200310c0 	.word	0x200310c0
 80075d4:	08017dc8 	.word	0x08017dc8
 80075d8:	08017dd4 	.word	0x08017dd4
 80075dc:	08017de0 	.word	0x08017de0
 80075e0:	08017d6c 	.word	0x08017d6c
 80075e4:	08017dec 	.word	0x08017dec
 80075e8:	20003274 	.word	0x20003274
 80075ec:	08017dfc 	.word	0x08017dfc
 80075f0:	08017e04 	.word	0x08017e04

080075f4 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	460b      	mov	r3, r1
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 8007602:	2314      	movs	r3, #20
 8007604:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 8007606:	2332      	movs	r3, #50	; 0x32
 8007608:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 800760a:	f7f9 fa21 	bl	8000a50 <LCD_Clear>
		getLatestADC();
 800760e:	f000 fcc9 	bl	8007fa4 <getLatestADC>
		drawMenuHeader();
 8007612:	f000 fc0b 	bl	8007e2c <drawMenuHeader>
		i  = 135;
 8007616:	2387      	movs	r3, #135	; 0x87
 8007618:	613b      	str	r3, [r7, #16]
		j = 24;
 800761a:	2318      	movs	r3, #24
 800761c:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	b299      	uxth	r1, r3
 8007622:	4b8d      	ldr	r3, [pc, #564]	; (8007858 <drawBootMenu+0x264>)
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	3b02      	subs	r3, #2
 8007628:	b29a      	uxth	r2, r3
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	b29b      	uxth	r3, r3
 800762e:	3303      	adds	r3, #3
 8007630:	b29b      	uxth	r3, r3
 8007632:	2002      	movs	r0, #2
 8007634:	f7f9 fca0 	bl	8000f78 <LCD_FillRect>
		if(displayAdcValues[Adc.adc0] >3.5){
 8007638:	4b88      	ldr	r3, [pc, #544]	; (800785c <drawBootMenu+0x268>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a88      	ldr	r2, [pc, #544]	; (8007860 <drawBootMenu+0x26c>)
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	edd3 7a00 	vldr	s15, [r3]
 8007646:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800764a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800764e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007652:	f340 839a 	ble.w	8007d8a <drawBootMenu+0x796>
			if(ZION.zionFinished){
 8007656:	4b83      	ldr	r3, [pc, #524]	; (8007864 <drawBootMenu+0x270>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 82d1 	beq.w	8007c02 <drawBootMenu+0x60e>
				if((ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS)){
 8007660:	4b80      	ldr	r3, [pc, #512]	; (8007864 <drawBootMenu+0x270>)
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d008      	beq.n	800767a <drawBootMenu+0x86>
 8007668:	4b7e      	ldr	r3, [pc, #504]	; (8007864 <drawBootMenu+0x270>)
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b01      	cmp	r3, #1
 800766e:	d004      	beq.n	800767a <drawBootMenu+0x86>
 8007670:	4b7c      	ldr	r3, [pc, #496]	; (8007864 <drawBootMenu+0x270>)
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	2b01      	cmp	r3, #1
 8007676:	f040 820d 	bne.w	8007a94 <drawBootMenu+0x4a0>
					j=45;
 800767a:	232d      	movs	r3, #45	; 0x2d
 800767c:	61fb      	str	r3, [r7, #28]
					i=5;
 800767e:	2305      	movs	r3, #5
 8007680:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	b298      	uxth	r0, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	b299      	uxth	r1, r3
 800768a:	4b77      	ldr	r3, [pc, #476]	; (8007868 <drawBootMenu+0x274>)
 800768c:	4a77      	ldr	r2, [pc, #476]	; (800786c <drawBootMenu+0x278>)
 800768e:	f7f9 ffbf 	bl	8001610 <LCD_PutStr>
					j+=30;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	331e      	adds	r3, #30
 8007696:	61fb      	str	r3, [r7, #28]
					i=42;
 8007698:	232a      	movs	r3, #42	; 0x2a
 800769a:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	b298      	uxth	r0, r3
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	b299      	uxth	r1, r3
 80076a4:	4b70      	ldr	r3, [pc, #448]	; (8007868 <drawBootMenu+0x274>)
 80076a6:	4a72      	ldr	r2, [pc, #456]	; (8007870 <drawBootMenu+0x27c>)
 80076a8:	f7f9 ffb2 	bl	8001610 <LCD_PutStr>
					i=indentAlignment;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	613b      	str	r3, [r7, #16]
					j+=20;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	3314      	adds	r3, #20
 80076b4:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	b298      	uxth	r0, r3
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	b299      	uxth	r1, r3
 80076be:	4b6a      	ldr	r3, [pc, #424]	; (8007868 <drawBootMenu+0x274>)
 80076c0:	4a6c      	ldr	r2, [pc, #432]	; (8007874 <drawBootMenu+0x280>)
 80076c2:	f7f9 ffa5 	bl	8001610 <LCD_PutStr>
					j+=20;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	3314      	adds	r3, #20
 80076ca:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	b298      	uxth	r0, r3
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	b299      	uxth	r1, r3
 80076d4:	4b64      	ldr	r3, [pc, #400]	; (8007868 <drawBootMenu+0x274>)
 80076d6:	4a68      	ldr	r2, [pc, #416]	; (8007878 <drawBootMenu+0x284>)
 80076d8:	f7f9 ff9a 	bl	8001610 <LCD_PutStr>
					j+=20;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3314      	adds	r3, #20
 80076e0:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	b298      	uxth	r0, r3
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	b299      	uxth	r1, r3
 80076ea:	4b5f      	ldr	r3, [pc, #380]	; (8007868 <drawBootMenu+0x274>)
 80076ec:	4a63      	ldr	r2, [pc, #396]	; (800787c <drawBootMenu+0x288>)
 80076ee:	f7f9 ff8f 	bl	8001610 <LCD_PutStr>
					j+=20;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3314      	adds	r3, #20
 80076f6:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	b298      	uxth	r0, r3
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	b299      	uxth	r1, r3
 8007700:	4b59      	ldr	r3, [pc, #356]	; (8007868 <drawBootMenu+0x274>)
 8007702:	4a5f      	ldr	r2, [pc, #380]	; (8007880 <drawBootMenu+0x28c>)
 8007704:	f7f9 ff84 	bl	8001610 <LCD_PutStr>
					j+=20;
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	3314      	adds	r3, #20
 800770c:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "UEFI", fnt7x10);
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	b298      	uxth	r0, r3
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	b299      	uxth	r1, r3
 8007716:	4b54      	ldr	r3, [pc, #336]	; (8007868 <drawBootMenu+0x274>)
 8007718:	4a5a      	ldr	r2, [pc, #360]	; (8007884 <drawBootMenu+0x290>)
 800771a:	f7f9 ff79 	bl	8001610 <LCD_PutStr>
					i-= 17;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	3b11      	subs	r3, #17
 8007722:	613b      	str	r3, [r7, #16]
					if(setIndicator==0){
 8007724:	4b58      	ldr	r3, [pc, #352]	; (8007888 <drawBootMenu+0x294>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f040 810d 	bne.w	8007948 <drawBootMenu+0x354>
						switch(indicator){
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3b01      	subs	r3, #1
 8007732:	2b04      	cmp	r3, #4
 8007734:	f200 8104 	bhi.w	8007940 <drawBootMenu+0x34c>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <drawBootMenu+0x14c>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007755 	.word	0x08007755
 8007744:	080077ab 	.word	0x080077ab
 8007748:	08007801 	.word	0x08007801
 800774c:	08007895 	.word	0x08007895
 8007750:	080078eb 	.word	0x080078eb
						case FIRST:
						{
							j=95;
 8007754:	235f      	movs	r3, #95	; 0x5f
 8007756:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	2b04      	cmp	r3, #4
 800775c:	bf0c      	ite	eq
 800775e:	2301      	moveq	r3, #1
 8007760:	2300      	movne	r3, #0
 8007762:	b2da      	uxtb	r2, r3
 8007764:	4b49      	ldr	r3, [pc, #292]	; (800788c <drawBootMenu+0x298>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	4299      	cmp	r1, r3
 800776c:	bf0c      	ite	eq
 800776e:	2301      	moveq	r3, #1
 8007770:	2300      	movne	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	4013      	ands	r3, r2
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8170 	beq.w	8007a5e <drawBootMenu+0x46a>
								i=140;
 800777e:	238c      	movs	r3, #140	; 0x8c
 8007780:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	b298      	uxth	r0, r3
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	b29b      	uxth	r3, r3
 800778a:	3305      	adds	r3, #5
 800778c:	b299      	uxth	r1, r3
 800778e:	2303      	movs	r3, #3
 8007790:	2203      	movs	r2, #3
 8007792:	f7fa f88d 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn0=1;
 8007796:	4b3e      	ldr	r3, [pc, #248]	; (8007890 <drawBootMenu+0x29c>)
 8007798:	2201      	movs	r2, #1
 800779a:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 800779c:	4b3c      	ldr	r3, [pc, #240]	; (8007890 <drawBootMenu+0x29c>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 80077a2:	4b39      	ldr	r3, [pc, #228]	; (8007888 <drawBootMenu+0x294>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
							}

							break;
 80077a8:	e159      	b.n	8007a5e <drawBootMenu+0x46a>
						}
						case SECOND:
						{
							j=115;
 80077aa:	2373      	movs	r3, #115	; 0x73
 80077ac:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	4b34      	ldr	r3, [pc, #208]	; (800788c <drawBootMenu+0x298>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4299      	cmp	r1, r3
 80077c2:	bf0c      	ite	eq
 80077c4:	2301      	moveq	r3, #1
 80077c6:	2300      	movne	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	4013      	ands	r3, r2
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 8147 	beq.w	8007a62 <drawBootMenu+0x46e>
								i=220;
 80077d4:	23dc      	movs	r3, #220	; 0xdc
 80077d6:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	b298      	uxth	r0, r3
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3305      	adds	r3, #5
 80077e2:	b299      	uxth	r1, r3
 80077e4:	2303      	movs	r3, #3
 80077e6:	2203      	movs	r2, #3
 80077e8:	f7fa f862 	bl	80018b0 <drawUpDownArrow>
								bootButtons.edl_sw=1;
 80077ec:	4b28      	ldr	r3, [pc, #160]	; (8007890 <drawBootMenu+0x29c>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	61da      	str	r2, [r3, #28]
								bootButtons.bootModeSet=1;
 80077f2:	4b27      	ldr	r3, [pc, #156]	; (8007890 <drawBootMenu+0x29c>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
								setIndicator=2;
 80077f8:	4b23      	ldr	r3, [pc, #140]	; (8007888 <drawBootMenu+0x294>)
 80077fa:	2202      	movs	r2, #2
 80077fc:	601a      	str	r2, [r3, #0]
							}

							break;
 80077fe:	e130      	b.n	8007a62 <drawBootMenu+0x46e>
						}
						case THIRD:
						{
							j=135;
 8007800:	2387      	movs	r3, #135	; 0x87
 8007802:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	2b04      	cmp	r3, #4
 8007808:	bf0c      	ite	eq
 800780a:	2301      	moveq	r3, #1
 800780c:	2300      	movne	r3, #0
 800780e:	b2da      	uxtb	r2, r3
 8007810:	4b1e      	ldr	r3, [pc, #120]	; (800788c <drawBootMenu+0x298>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	4299      	cmp	r1, r3
 8007818:	bf0c      	ite	eq
 800781a:	2301      	moveq	r3, #1
 800781c:	2300      	movne	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	4013      	ands	r3, r2
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 811e 	beq.w	8007a66 <drawBootMenu+0x472>
								i=130;
 800782a:	2382      	movs	r3, #130	; 0x82
 800782c:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	b298      	uxth	r0, r3
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	b29b      	uxth	r3, r3
 8007836:	3305      	adds	r3, #5
 8007838:	b299      	uxth	r1, r3
 800783a:	2303      	movs	r3, #3
 800783c:	2203      	movs	r2, #3
 800783e:	f7fa f837 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn1=1;
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <drawBootMenu+0x29c>)
 8007844:	2201      	movs	r2, #1
 8007846:	609a      	str	r2, [r3, #8]
								bootButtons.bootModeSet=1;
 8007848:	4b11      	ldr	r3, [pc, #68]	; (8007890 <drawBootMenu+0x29c>)
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
								setIndicator=3;
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <drawBootMenu+0x294>)
 8007850:	2203      	movs	r2, #3
 8007852:	601a      	str	r2, [r3, #0]
							}

							break;
 8007854:	e107      	b.n	8007a66 <drawBootMenu+0x472>
 8007856:	bf00      	nop
 8007858:	20028a86 	.word	0x20028a86
 800785c:	20000128 	.word	0x20000128
 8007860:	200310c0 	.word	0x200310c0
 8007864:	20003274 	.word	0x20003274
 8007868:	08018104 	.word	0x08018104
 800786c:	08017e10 	.word	0x08017e10
 8007870:	08017e40 	.word	0x08017e40
 8007874:	08017e5c 	.word	0x08017e5c
 8007878:	08017e68 	.word	0x08017e68
 800787c:	08017e7c 	.word	0x08017e7c
 8007880:	08017e88 	.word	0x08017e88
 8007884:	080178b8 	.word	0x080178b8
 8007888:	20003358 	.word	0x20003358
 800788c:	20003354 	.word	0x20003354
 8007890:	200032ac 	.word	0x200032ac
						}
						case FOURTH:
						{
							j=155;
 8007894:	239b      	movs	r3, #155	; 0x9b
 8007896:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	2b04      	cmp	r3, #4
 800789c:	bf0c      	ite	eq
 800789e:	2301      	moveq	r3, #1
 80078a0:	2300      	movne	r3, #0
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	4b78      	ldr	r3, [pc, #480]	; (8007a88 <drawBootMenu+0x494>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4299      	cmp	r1, r3
 80078ac:	bf0c      	ite	eq
 80078ae:	2301      	moveq	r3, #1
 80078b0:	2300      	movne	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	4013      	ands	r3, r2
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80d6 	beq.w	8007a6a <drawBootMenu+0x476>
								i=160;
 80078be:	23a0      	movs	r3, #160	; 0xa0
 80078c0:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	b298      	uxth	r0, r3
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3305      	adds	r3, #5
 80078cc:	b299      	uxth	r1, r3
 80078ce:	2303      	movs	r3, #3
 80078d0:	2203      	movs	r2, #3
 80078d2:	f7f9 ffed 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn2=1;
 80078d6:	4b6d      	ldr	r3, [pc, #436]	; (8007a8c <drawBootMenu+0x498>)
 80078d8:	2201      	movs	r2, #1
 80078da:	60da      	str	r2, [r3, #12]
								bootButtons.bootModeSet=1;
 80078dc:	4b6b      	ldr	r3, [pc, #428]	; (8007a8c <drawBootMenu+0x498>)
 80078de:	2201      	movs	r2, #1
 80078e0:	601a      	str	r2, [r3, #0]
								setIndicator=4;
 80078e2:	4b6b      	ldr	r3, [pc, #428]	; (8007a90 <drawBootMenu+0x49c>)
 80078e4:	2204      	movs	r2, #4
 80078e6:	601a      	str	r2, [r3, #0]
							}

							break;
 80078e8:	e0bf      	b.n	8007a6a <drawBootMenu+0x476>
						}
						case FIFTH:
						{
							j=175;
 80078ea:	23af      	movs	r3, #175	; 0xaf
 80078ec:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80078ee:	7afb      	ldrb	r3, [r7, #11]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4b63      	ldr	r3, [pc, #396]	; (8007a88 <drawBootMenu+0x494>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	4299      	cmp	r1, r3
 8007902:	bf0c      	ite	eq
 8007904:	2301      	moveq	r3, #1
 8007906:	2300      	movne	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	4013      	ands	r3, r2
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80ad 	beq.w	8007a6e <drawBootMenu+0x47a>
								i=100;
 8007914:	2364      	movs	r3, #100	; 0x64
 8007916:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	b298      	uxth	r0, r3
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	b29b      	uxth	r3, r3
 8007920:	3305      	adds	r3, #5
 8007922:	b299      	uxth	r1, r3
 8007924:	2303      	movs	r3, #3
 8007926:	2203      	movs	r2, #3
 8007928:	f7f9 ffc2 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn3=1;
 800792c:	4b57      	ldr	r3, [pc, #348]	; (8007a8c <drawBootMenu+0x498>)
 800792e:	2201      	movs	r2, #1
 8007930:	611a      	str	r2, [r3, #16]
								bootButtons.bootModeSet=1;
 8007932:	4b56      	ldr	r3, [pc, #344]	; (8007a8c <drawBootMenu+0x498>)
 8007934:	2201      	movs	r2, #1
 8007936:	601a      	str	r2, [r3, #0]
								setIndicator=5;
 8007938:	4b55      	ldr	r3, [pc, #340]	; (8007a90 <drawBootMenu+0x49c>)
 800793a:	2205      	movs	r2, #5
 800793c:	601a      	str	r2, [r3, #0]
							}

							break;
 800793e:	e096      	b.n	8007a6e <drawBootMenu+0x47a>
						}
						default:
						{
							j=95;
 8007940:	235f      	movs	r3, #95	; 0x5f
 8007942:	61fb      	str	r3, [r7, #28]
							break;
 8007944:	bf00      	nop
 8007946:	e09d      	b.n	8007a84 <drawBootMenu+0x490>
						}
						}
					}
					else{
						switch(setIndicator){
 8007948:	4b51      	ldr	r3, [pc, #324]	; (8007a90 <drawBootMenu+0x49c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	2b04      	cmp	r3, #4
 8007950:	d87a      	bhi.n	8007a48 <drawBootMenu+0x454>
 8007952:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <drawBootMenu+0x364>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	0800796d 	.word	0x0800796d
 800795c:	08007999 	.word	0x08007999
 8007960:	080079c5 	.word	0x080079c5
 8007964:	080079f1 	.word	0x080079f1
 8007968:	08007a1d 	.word	0x08007a1d
						case FIRST:
						{
							j=95;
 800796c:	235f      	movs	r3, #95	; 0x5f
 800796e:	61fb      	str	r3, [r7, #28]
							i=140;
 8007970:	238c      	movs	r3, #140	; 0x8c
 8007972:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	b298      	uxth	r0, r3
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	b29b      	uxth	r3, r3
 800797c:	3305      	adds	r3, #5
 800797e:	b299      	uxth	r1, r3
 8007980:	2303      	movs	r3, #3
 8007982:	2203      	movs	r2, #3
 8007984:	f7f9 ff94 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007988:	4b40      	ldr	r3, [pc, #256]	; (8007a8c <drawBootMenu+0x498>)
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	d070      	beq.n	8007a72 <drawBootMenu+0x47e>
								setIndicator=0;
 8007990:	4b3f      	ldr	r3, [pc, #252]	; (8007a90 <drawBootMenu+0x49c>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
							}
							break;
 8007996:	e06c      	b.n	8007a72 <drawBootMenu+0x47e>
						}
						case SECOND:
						{
							j=115;
 8007998:	2373      	movs	r3, #115	; 0x73
 800799a:	61fb      	str	r3, [r7, #28]
							i=220;
 800799c:	23dc      	movs	r3, #220	; 0xdc
 800799e:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	b298      	uxth	r0, r3
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3305      	adds	r3, #5
 80079aa:	b299      	uxth	r1, r3
 80079ac:	2303      	movs	r3, #3
 80079ae:	2203      	movs	r2, #3
 80079b0:	f7f9 ff7e 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 80079b4:	4b35      	ldr	r3, [pc, #212]	; (8007a8c <drawBootMenu+0x498>)
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d05c      	beq.n	8007a76 <drawBootMenu+0x482>
								setIndicator=0;
 80079bc:	4b34      	ldr	r3, [pc, #208]	; (8007a90 <drawBootMenu+0x49c>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
							}
							break;
 80079c2:	e058      	b.n	8007a76 <drawBootMenu+0x482>
						}
						case THIRD:
						{
							j=135;
 80079c4:	2387      	movs	r3, #135	; 0x87
 80079c6:	61fb      	str	r3, [r7, #28]
							i=130;
 80079c8:	2382      	movs	r3, #130	; 0x82
 80079ca:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	b298      	uxth	r0, r3
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3305      	adds	r3, #5
 80079d6:	b299      	uxth	r1, r3
 80079d8:	2303      	movs	r3, #3
 80079da:	2203      	movs	r2, #3
 80079dc:	f7f9 ff68 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 80079e0:	4b2a      	ldr	r3, [pc, #168]	; (8007a8c <drawBootMenu+0x498>)
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d048      	beq.n	8007a7a <drawBootMenu+0x486>
								setIndicator=0;
 80079e8:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <drawBootMenu+0x49c>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]
							}
							break;
 80079ee:	e044      	b.n	8007a7a <drawBootMenu+0x486>
						}
						case FOURTH:
						{
							j=155;
 80079f0:	239b      	movs	r3, #155	; 0x9b
 80079f2:	61fb      	str	r3, [r7, #28]
							i=160;
 80079f4:	23a0      	movs	r3, #160	; 0xa0
 80079f6:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	b298      	uxth	r0, r3
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3305      	adds	r3, #5
 8007a02:	b299      	uxth	r1, r3
 8007a04:	2303      	movs	r3, #3
 8007a06:	2203      	movs	r2, #3
 8007a08:	f7f9 ff52 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007a0c:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <drawBootMenu+0x498>)
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d034      	beq.n	8007a7e <drawBootMenu+0x48a>
								setIndicator=0;
 8007a14:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <drawBootMenu+0x49c>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
							}
							break;
 8007a1a:	e030      	b.n	8007a7e <drawBootMenu+0x48a>
						}
						case FIFTH:
						{
							j=175;
 8007a1c:	23af      	movs	r3, #175	; 0xaf
 8007a1e:	61fb      	str	r3, [r7, #28]
							i=100;
 8007a20:	2364      	movs	r3, #100	; 0x64
 8007a22:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	b298      	uxth	r0, r3
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3305      	adds	r3, #5
 8007a2e:	b299      	uxth	r1, r3
 8007a30:	2303      	movs	r3, #3
 8007a32:	2203      	movs	r2, #3
 8007a34:	f7f9 ff3c 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007a38:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <drawBootMenu+0x498>)
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d020      	beq.n	8007a82 <drawBootMenu+0x48e>
								setIndicator=0;
 8007a40:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <drawBootMenu+0x49c>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
							}
							break;
 8007a46:	e01c      	b.n	8007a82 <drawBootMenu+0x48e>
						}
						default:
						{
							drawUpDownArrow(i, j+5, 3, 3);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	b298      	uxth	r0, r3
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3305      	adds	r3, #5
 8007a52:	b299      	uxth	r1, r3
 8007a54:	2303      	movs	r3, #3
 8007a56:	2203      	movs	r2, #3
 8007a58:	f7f9 ff2a 	bl	80018b0 <drawUpDownArrow>
							break;
 8007a5c:	e012      	b.n	8007a84 <drawBootMenu+0x490>
							break;
 8007a5e:	bf00      	nop
 8007a60:	e1bf      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a62:	bf00      	nop
 8007a64:	e1bd      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a66:	bf00      	nop
 8007a68:	e1bb      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a6a:	bf00      	nop
 8007a6c:	e1b9      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a6e:	bf00      	nop
 8007a70:	e1b7      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a72:	bf00      	nop
 8007a74:	e1b5      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a76:	bf00      	nop
 8007a78:	e1b3      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a7a:	bf00      	nop
 8007a7c:	e1b1      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a7e:	bf00      	nop
 8007a80:	e1af      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007a82:	bf00      	nop
					if(setIndicator==0){
 8007a84:	e1ad      	b.n	8007de2 <drawBootMenu+0x7ee>
 8007a86:	bf00      	nop
 8007a88:	20003354 	.word	0x20003354
 8007a8c:	200032ac 	.word	0x200032ac
 8007a90:	20003358 	.word	0x20003358
						}
						}
					}
				}
				else{
					j=45;
 8007a94:	232d      	movs	r3, #45	; 0x2d
 8007a96:	61fb      	str	r3, [r7, #28]
					i=5;
 8007a98:	2305      	movs	r3, #5
 8007a9a:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	b298      	uxth	r0, r3
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	b299      	uxth	r1, r3
 8007aa4:	4b98      	ldr	r3, [pc, #608]	; (8007d08 <drawBootMenu+0x714>)
 8007aa6:	4a99      	ldr	r2, [pc, #612]	; (8007d0c <drawBootMenu+0x718>)
 8007aa8:	f7f9 fdb2 	bl	8001610 <LCD_PutStr>
					j+=30;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	331e      	adds	r3, #30
 8007ab0:	61fb      	str	r3, [r7, #28]
					i=42;
 8007ab2:	232a      	movs	r3, #42	; 0x2a
 8007ab4:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	b298      	uxth	r0, r3
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	b299      	uxth	r1, r3
 8007abe:	4b92      	ldr	r3, [pc, #584]	; (8007d08 <drawBootMenu+0x714>)
 8007ac0:	4a93      	ldr	r2, [pc, #588]	; (8007d10 <drawBootMenu+0x71c>)
 8007ac2:	f7f9 fda5 	bl	8001610 <LCD_PutStr>
					i=indentAlignment;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	613b      	str	r3, [r7, #16]
					j+=20;
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	3314      	adds	r3, #20
 8007ace:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	b298      	uxth	r0, r3
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	b299      	uxth	r1, r3
 8007ad8:	4b8b      	ldr	r3, [pc, #556]	; (8007d08 <drawBootMenu+0x714>)
 8007ada:	4a8e      	ldr	r2, [pc, #568]	; (8007d14 <drawBootMenu+0x720>)
 8007adc:	f7f9 fd98 	bl	8001610 <LCD_PutStr>
					if(setIndicator==0){
 8007ae0:	4b8d      	ldr	r3, [pc, #564]	; (8007d18 <drawBootMenu+0x724>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d159      	bne.n	8007b9c <drawBootMenu+0x5a8>
						switch(indicator){
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d12a      	bne.n	8007b44 <drawBootMenu+0x550>
						case FIRST:
						{
							j=95;
 8007aee:	235f      	movs	r3, #95	; 0x5f
 8007af0:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	4b87      	ldr	r3, [pc, #540]	; (8007d1c <drawBootMenu+0x728>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	4299      	cmp	r1, r3
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8156 	beq.w	8007dc4 <drawBootMenu+0x7d0>
								i=140;
 8007b18:	238c      	movs	r3, #140	; 0x8c
 8007b1a:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	b298      	uxth	r0, r3
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3305      	adds	r3, #5
 8007b26:	b299      	uxth	r1, r3
 8007b28:	2303      	movs	r3, #3
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	f7f9 fec0 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn0=1;
 8007b30:	4b7b      	ldr	r3, [pc, #492]	; (8007d20 <drawBootMenu+0x72c>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8007b36:	4b7a      	ldr	r3, [pc, #488]	; (8007d20 <drawBootMenu+0x72c>)
 8007b38:	2201      	movs	r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8007b3c:	4b76      	ldr	r3, [pc, #472]	; (8007d18 <drawBootMenu+0x724>)
 8007b3e:	2201      	movs	r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
							}
							break;
 8007b42:	e13f      	b.n	8007dc4 <drawBootMenu+0x7d0>
						}
						default:
						{
							j=95;
 8007b44:	235f      	movs	r3, #95	; 0x5f
 8007b46:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	2300      	movne	r3, #0
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	4b71      	ldr	r3, [pc, #452]	; (8007d1c <drawBootMenu+0x728>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4299      	cmp	r1, r3
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2301      	moveq	r3, #1
 8007b60:	2300      	movne	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	4013      	ands	r3, r2
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 812d 	beq.w	8007dc8 <drawBootMenu+0x7d4>
								i=140;
 8007b6e:	238c      	movs	r3, #140	; 0x8c
 8007b70:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	b298      	uxth	r0, r3
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3305      	adds	r3, #5
 8007b7c:	b299      	uxth	r1, r3
 8007b7e:	2303      	movs	r3, #3
 8007b80:	2203      	movs	r2, #3
 8007b82:	f7f9 fe95 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn0=1;
 8007b86:	4b66      	ldr	r3, [pc, #408]	; (8007d20 <drawBootMenu+0x72c>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8007b8c:	4b64      	ldr	r3, [pc, #400]	; (8007d20 <drawBootMenu+0x72c>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8007b92:	4b61      	ldr	r3, [pc, #388]	; (8007d18 <drawBootMenu+0x724>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
							}
							break;
 8007b98:	bf00      	nop
 8007b9a:	e115      	b.n	8007dc8 <drawBootMenu+0x7d4>
						}
						}
					}
					else{
						switch(setIndicator){
 8007b9c:	4b5e      	ldr	r3, [pc, #376]	; (8007d18 <drawBootMenu+0x724>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d116      	bne.n	8007bd2 <drawBootMenu+0x5de>
						case FIRST:
						{
							j=95;
 8007ba4:	235f      	movs	r3, #95	; 0x5f
 8007ba6:	61fb      	str	r3, [r7, #28]
							i=140;
 8007ba8:	238c      	movs	r3, #140	; 0x8c
 8007baa:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	b298      	uxth	r0, r3
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3305      	adds	r3, #5
 8007bb6:	b299      	uxth	r1, r3
 8007bb8:	2303      	movs	r3, #3
 8007bba:	2203      	movs	r2, #3
 8007bbc:	f7f9 fe78 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007bc0:	4b57      	ldr	r3, [pc, #348]	; (8007d20 <drawBootMenu+0x72c>)
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8101 	beq.w	8007dcc <drawBootMenu+0x7d8>
								setIndicator=0;
 8007bca:	4b53      	ldr	r3, [pc, #332]	; (8007d18 <drawBootMenu+0x724>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
							}
							break;
 8007bd0:	e0fc      	b.n	8007dcc <drawBootMenu+0x7d8>
						}
						default:
						{
							j=95;
 8007bd2:	235f      	movs	r3, #95	; 0x5f
 8007bd4:	61fb      	str	r3, [r7, #28]
							i=140;
 8007bd6:	238c      	movs	r3, #140	; 0x8c
 8007bd8:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	b298      	uxth	r0, r3
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3305      	adds	r3, #5
 8007be4:	b299      	uxth	r1, r3
 8007be6:	2303      	movs	r3, #3
 8007be8:	2203      	movs	r2, #3
 8007bea:	f7f9 fe61 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007bee:	4b4c      	ldr	r3, [pc, #304]	; (8007d20 <drawBootMenu+0x72c>)
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80ec 	beq.w	8007dd0 <drawBootMenu+0x7dc>
								setIndicator=0;
 8007bf8:	4b47      	ldr	r3, [pc, #284]	; (8007d18 <drawBootMenu+0x724>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
							}
							break;
 8007bfe:	bf00      	nop
 8007c00:	e0e6      	b.n	8007dd0 <drawBootMenu+0x7dc>
						}
					}
				}
			}
			else{
				j=45;
 8007c02:	232d      	movs	r3, #45	; 0x2d
 8007c04:	61fb      	str	r3, [r7, #28]
				i=15;
 8007c06:	230f      	movs	r3, #15
 8007c08:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	b298      	uxth	r0, r3
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	b299      	uxth	r1, r3
 8007c12:	4b3d      	ldr	r3, [pc, #244]	; (8007d08 <drawBootMenu+0x714>)
 8007c14:	4a43      	ldr	r2, [pc, #268]	; (8007d24 <drawBootMenu+0x730>)
 8007c16:	f7f9 fcfb 	bl	8001610 <LCD_PutStr>
				j+=30;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	331e      	adds	r3, #30
 8007c1e:	61fb      	str	r3, [r7, #28]
				i=42;
 8007c20:	232a      	movs	r3, #42	; 0x2a
 8007c22:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	b298      	uxth	r0, r3
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	b299      	uxth	r1, r3
 8007c2c:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <drawBootMenu+0x714>)
 8007c2e:	4a38      	ldr	r2, [pc, #224]	; (8007d10 <drawBootMenu+0x71c>)
 8007c30:	f7f9 fcee 	bl	8001610 <LCD_PutStr>
				i=indentAlignment;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	613b      	str	r3, [r7, #16]
				j+=20;
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	3314      	adds	r3, #20
 8007c3c:	61fb      	str	r3, [r7, #28]
				LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	b298      	uxth	r0, r3
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	b299      	uxth	r1, r3
 8007c46:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <drawBootMenu+0x714>)
 8007c48:	4a32      	ldr	r2, [pc, #200]	; (8007d14 <drawBootMenu+0x720>)
 8007c4a:	f7f9 fce1 	bl	8001610 <LCD_PutStr>
				if(setIndicator==0){
 8007c4e:	4b32      	ldr	r3, [pc, #200]	; (8007d18 <drawBootMenu+0x724>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d168      	bne.n	8007d28 <drawBootMenu+0x734>
					switch(indicator){
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d12a      	bne.n	8007cb2 <drawBootMenu+0x6be>
					case FIRST:
					{
						j=95;
 8007c5c:	235f      	movs	r3, #95	; 0x5f
 8007c5e:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	bf0c      	ite	eq
 8007c66:	2301      	moveq	r3, #1
 8007c68:	2300      	movne	r3, #0
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <drawBootMenu+0x728>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4299      	cmp	r1, r3
 8007c74:	bf0c      	ite	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	2300      	movne	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80a7 	beq.w	8007dd4 <drawBootMenu+0x7e0>
							i=140;
 8007c86:	238c      	movs	r3, #140	; 0x8c
 8007c88:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	b298      	uxth	r0, r3
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3305      	adds	r3, #5
 8007c94:	b299      	uxth	r1, r3
 8007c96:	2303      	movs	r3, #3
 8007c98:	2203      	movs	r2, #3
 8007c9a:	f7f9 fe09 	bl	80018b0 <drawUpDownArrow>
							bootButtons.btn0=1;
 8007c9e:	4b20      	ldr	r3, [pc, #128]	; (8007d20 <drawBootMenu+0x72c>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 8007ca4:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <drawBootMenu+0x72c>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <drawBootMenu+0x724>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
						}
						break;
 8007cb0:	e090      	b.n	8007dd4 <drawBootMenu+0x7e0>
					}
					default:
					{
						j=95;
 8007cb2:	235f      	movs	r3, #95	; 0x5f
 8007cb4:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	4b16      	ldr	r3, [pc, #88]	; (8007d1c <drawBootMenu+0x728>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	bf0c      	ite	eq
 8007ccc:	2301      	moveq	r3, #1
 8007cce:	2300      	movne	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d07e      	beq.n	8007dd8 <drawBootMenu+0x7e4>
							i=140;
 8007cda:	238c      	movs	r3, #140	; 0x8c
 8007cdc:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	b298      	uxth	r0, r3
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3305      	adds	r3, #5
 8007ce8:	b299      	uxth	r1, r3
 8007cea:	2303      	movs	r3, #3
 8007cec:	2203      	movs	r2, #3
 8007cee:	f7f9 fddf 	bl	80018b0 <drawUpDownArrow>
							bootButtons.btn0=1;
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <drawBootMenu+0x72c>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <drawBootMenu+0x72c>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007cfe:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <drawBootMenu+0x724>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
						}
						break;
 8007d04:	bf00      	nop
 8007d06:	e067      	b.n	8007dd8 <drawBootMenu+0x7e4>
 8007d08:	08018104 	.word	0x08018104
 8007d0c:	08017e98 	.word	0x08017e98
 8007d10:	08017e40 	.word	0x08017e40
 8007d14:	08017e5c 	.word	0x08017e5c
 8007d18:	20003358 	.word	0x20003358
 8007d1c:	20003354 	.word	0x20003354
 8007d20:	200032ac 	.word	0x200032ac
 8007d24:	08017ebc 	.word	0x08017ebc
					}
					}
				}
				else{
					switch(setIndicator){
 8007d28:	4b3a      	ldr	r3, [pc, #232]	; (8007e14 <drawBootMenu+0x820>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d115      	bne.n	8007d5c <drawBootMenu+0x768>
					case FIRST:
					{
						j=95;
 8007d30:	235f      	movs	r3, #95	; 0x5f
 8007d32:	61fb      	str	r3, [r7, #28]
						i=140;
 8007d34:	238c      	movs	r3, #140	; 0x8c
 8007d36:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	b298      	uxth	r0, r3
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3305      	adds	r3, #5
 8007d42:	b299      	uxth	r1, r3
 8007d44:	2303      	movs	r3, #3
 8007d46:	2203      	movs	r2, #3
 8007d48:	f7f9 fdb2 	bl	80018b0 <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <drawBootMenu+0x824>)
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d043      	beq.n	8007ddc <drawBootMenu+0x7e8>
							setIndicator=0;
 8007d54:	4b2f      	ldr	r3, [pc, #188]	; (8007e14 <drawBootMenu+0x820>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
						}
						break;
 8007d5a:	e03f      	b.n	8007ddc <drawBootMenu+0x7e8>
					}
					default:
					{
						j=95;
 8007d5c:	235f      	movs	r3, #95	; 0x5f
 8007d5e:	61fb      	str	r3, [r7, #28]
						i=140;
 8007d60:	238c      	movs	r3, #140	; 0x8c
 8007d62:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	b298      	uxth	r0, r3
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3305      	adds	r3, #5
 8007d6e:	b299      	uxth	r1, r3
 8007d70:	2303      	movs	r3, #3
 8007d72:	2203      	movs	r2, #3
 8007d74:	f7f9 fd9c 	bl	80018b0 <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007d78:	4b27      	ldr	r3, [pc, #156]	; (8007e18 <drawBootMenu+0x824>)
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d02f      	beq.n	8007de0 <drawBootMenu+0x7ec>
							setIndicator=0;
 8007d80:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <drawBootMenu+0x820>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
						}
						break;
 8007d86:	bf00      	nop
 8007d88:	e02a      	b.n	8007de0 <drawBootMenu+0x7ec>
					}
				}
			}
		}
		else{
			j=110;
 8007d8a:	236e      	movs	r3, #110	; 0x6e
 8007d8c:	61fb      	str	r3, [r7, #28]
			i=120;
 8007d8e:	2378      	movs	r3, #120	; 0x78
 8007d90:	613b      	str	r3, [r7, #16]
			bootButtons.bootMode=0;
 8007d92:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <drawBootMenu+0x824>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	b298      	uxth	r0, r3
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	b299      	uxth	r1, r3
 8007da0:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <drawBootMenu+0x828>)
 8007da2:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <drawBootMenu+0x82c>)
 8007da4:	f7f9 fc34 	bl	8001610 <LCD_PutStr>
			j+=14;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	330e      	adds	r3, #14
 8007dac:	61fb      	str	r3, [r7, #28]
			i=75;
 8007dae:	234b      	movs	r3, #75	; 0x4b
 8007db0:	613b      	str	r3, [r7, #16]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	b298      	uxth	r0, r3
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	b299      	uxth	r1, r3
 8007dba:	4b18      	ldr	r3, [pc, #96]	; (8007e1c <drawBootMenu+0x828>)
 8007dbc:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <drawBootMenu+0x830>)
 8007dbe:	f7f9 fc27 	bl	8001610 <LCD_PutStr>
 8007dc2:	e00e      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007dc4:	bf00      	nop
 8007dc6:	e00c      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007dc8:	bf00      	nop
 8007dca:	e00a      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007dcc:	bf00      	nop
 8007dce:	e008      	b.n	8007de2 <drawBootMenu+0x7ee>
							break;
 8007dd0:	bf00      	nop
 8007dd2:	e006      	b.n	8007de2 <drawBootMenu+0x7ee>
						break;
 8007dd4:	bf00      	nop
 8007dd6:	e004      	b.n	8007de2 <drawBootMenu+0x7ee>
						break;
 8007dd8:	bf00      	nop
 8007dda:	e002      	b.n	8007de2 <drawBootMenu+0x7ee>
						break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <drawBootMenu+0x7ee>
						break;
 8007de0:	bf00      	nop
		}
		previousMenu=menu;
 8007de2:	4a11      	ldr	r2, [pc, #68]	; (8007e28 <drawBootMenu+0x834>)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6013      	str	r3, [r2, #0]
		i=25;
 8007de8:	2319      	movs	r3, #25
 8007dea:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	b298      	uxth	r0, r3
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	b299      	uxth	r1, r3
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	330c      	adds	r3, #12
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	330a      	adds	r3, #10
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f7f9 f8b8 	bl	8000f78 <LCD_FillRect>
		SMLCD_Flush();
 8007e08:	f7f8 fc6a 	bl	80006e0 <SMLCD_Flush>
}
 8007e0c:	bf00      	nop
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20003358 	.word	0x20003358
 8007e18:	200032ac 	.word	0x200032ac
 8007e1c:	08018104 	.word	0x08018104
 8007e20:	08017ee8 	.word	0x08017ee8
 8007e24:	08017f00 	.word	0x08017f00
 8007e28:	20003354 	.word	0x20003354

08007e2c <drawMenuHeader>:

void drawMenuHeader(){
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 8007e32:	4b4e      	ldr	r3, [pc, #312]	; (8007f6c <drawMenuHeader+0x140>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8007e38:	4b4d      	ldr	r3, [pc, #308]	; (8007f70 <drawMenuHeader+0x144>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	4b4c      	ldr	r3, [pc, #304]	; (8007f74 <drawMenuHeader+0x148>)
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2100      	movs	r1, #0
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f7f9 f852 	bl	8000ef4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8007e50:	4b47      	ldr	r3, [pc, #284]	; (8007f70 <drawMenuHeader+0x144>)
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	3b03      	subs	r3, #3
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	4b46      	ldr	r3, [pc, #280]	; (8007f74 <drawMenuHeader+0x148>)
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	3b03      	subs	r3, #3
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2102      	movs	r1, #2
 8007e62:	2002      	movs	r0, #2
 8007e64:	f7f9 f846 	bl	8000ef4 <LCD_Rect>

	// RTC :)
	i  = 10;
 8007e68:	230a      	movs	r3, #10
 8007e6a:	607b      	str	r3, [r7, #4]
	j  = 10;
 8007e6c:	230a      	movs	r3, #10
 8007e6e:	603b      	str	r3, [r7, #0]
	printFaults(i,j);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f8c4 	bl	8008000 <printFaults>
	i=275;
 8007e78:	f240 1313 	movw	r3, #275	; 0x113
 8007e7c:	607b      	str	r3, [r7, #4]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	b298      	uxth	r0, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	b299      	uxth	r1, r3
 8007e86:	4b3c      	ldr	r3, [pc, #240]	; (8007f78 <drawMenuHeader+0x14c>)
 8007e88:	4a3c      	ldr	r2, [pc, #240]	; (8007f7c <drawMenuHeader+0x150>)
 8007e8a:	f7f9 fbc1 	bl	8001610 <LCD_PutStr>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4413      	add	r3, r2
 8007e96:	607b      	str	r3, [r7, #4]
	if(displayAdcValues[Adc.adc0] >VSYS_FLT){
 8007e98:	4b39      	ldr	r3, [pc, #228]	; (8007f80 <drawMenuHeader+0x154>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a39      	ldr	r2, [pc, #228]	; (8007f84 <drawMenuHeader+0x158>)
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	edd3 7a00 	vldr	s15, [r3]
 8007ea6:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8007eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb2:	dd4a      	ble.n	8007f4a <drawMenuHeader+0x11e>
		switch(bootButtons.bootMode){
 8007eb4:	4b34      	ldr	r3, [pc, #208]	; (8007f88 <drawMenuHeader+0x15c>)
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb8:	2b05      	cmp	r3, #5
 8007eba:	d84e      	bhi.n	8007f5a <drawMenuHeader+0x12e>
 8007ebc:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <drawMenuHeader+0x98>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007edd 	.word	0x08007edd
 8007ec8:	08007eef 	.word	0x08007eef
 8007ecc:	08007f01 	.word	0x08007f01
 8007ed0:	08007f13 	.word	0x08007f13
 8007ed4:	08007f37 	.word	0x08007f37
 8007ed8:	08007f25 	.word	0x08007f25
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	b298      	uxth	r0, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	b299      	uxth	r1, r3
 8007ee4:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <drawMenuHeader+0x14c>)
 8007ee6:	4a29      	ldr	r2, [pc, #164]	; (8007f8c <drawMenuHeader+0x160>)
 8007ee8:	f7f9 fb92 	bl	8001610 <LCD_PutStr>
			break;
 8007eec:	e035      	b.n	8007f5a <drawMenuHeader+0x12e>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	b298      	uxth	r0, r3
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	b299      	uxth	r1, r3
 8007ef6:	4b20      	ldr	r3, [pc, #128]	; (8007f78 <drawMenuHeader+0x14c>)
 8007ef8:	4a25      	ldr	r2, [pc, #148]	; (8007f90 <drawMenuHeader+0x164>)
 8007efa:	f7f9 fb89 	bl	8001610 <LCD_PutStr>
			break;
 8007efe:	e02c      	b.n	8007f5a <drawMenuHeader+0x12e>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	b298      	uxth	r0, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	b299      	uxth	r1, r3
 8007f08:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <drawMenuHeader+0x14c>)
 8007f0a:	4a22      	ldr	r2, [pc, #136]	; (8007f94 <drawMenuHeader+0x168>)
 8007f0c:	f7f9 fb80 	bl	8001610 <LCD_PutStr>
			break;
 8007f10:	e023      	b.n	8007f5a <drawMenuHeader+0x12e>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	b298      	uxth	r0, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	b299      	uxth	r1, r3
 8007f1a:	4b17      	ldr	r3, [pc, #92]	; (8007f78 <drawMenuHeader+0x14c>)
 8007f1c:	4a1e      	ldr	r2, [pc, #120]	; (8007f98 <drawMenuHeader+0x16c>)
 8007f1e:	f7f9 fb77 	bl	8001610 <LCD_PutStr>
			break;
 8007f22:	e01a      	b.n	8007f5a <drawMenuHeader+0x12e>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	b298      	uxth	r0, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	b299      	uxth	r1, r3
 8007f2c:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <drawMenuHeader+0x14c>)
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <drawMenuHeader+0x170>)
 8007f30:	f7f9 fb6e 	bl	8001610 <LCD_PutStr>
			break;
 8007f34:	e011      	b.n	8007f5a <drawMenuHeader+0x12e>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	b298      	uxth	r0, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	b299      	uxth	r1, r3
 8007f3e:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <drawMenuHeader+0x14c>)
 8007f40:	4a17      	ldr	r2, [pc, #92]	; (8007fa0 <drawMenuHeader+0x174>)
 8007f42:	f7f9 fb65 	bl	8001610 <LCD_PutStr>
			break;
 8007f46:	bf00      	nop
 8007f48:	e007      	b.n	8007f5a <drawMenuHeader+0x12e>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	b298      	uxth	r0, r3
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	b299      	uxth	r1, r3
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <drawMenuHeader+0x14c>)
 8007f54:	4a0d      	ldr	r2, [pc, #52]	; (8007f8c <drawMenuHeader+0x160>)
 8007f56:	f7f9 fb5b 	bl	8001610 <LCD_PutStr>
	}

	i  = 135;
 8007f5a:	2387      	movs	r3, #135	; 0x87
 8007f5c:	607b      	str	r3, [r7, #4]
	j += 14;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	330e      	adds	r3, #14
 8007f62:	603b      	str	r3, [r7, #0]


}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20028a84 	.word	0x20028a84
 8007f70:	20028a86 	.word	0x20028a86
 8007f74:	20028a88 	.word	0x20028a88
 8007f78:	08018104 	.word	0x08018104
 8007f7c:	080178a8 	.word	0x080178a8
 8007f80:	20000128 	.word	0x20000128
 8007f84:	200310c0 	.word	0x200310c0
 8007f88:	200032ac 	.word	0x200032ac
 8007f8c:	080178b0 	.word	0x080178b0
 8007f90:	080178b4 	.word	0x080178b4
 8007f94:	080178b8 	.word	0x080178b8
 8007f98:	080178c0 	.word	0x080178c0
 8007f9c:	080178c4 	.word	0x080178c4
 8007fa0:	080178cc 	.word	0x080178cc

08007fa4 <getLatestADC>:

void getLatestADC(){
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8007faa:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <getLatestADC+0x54>)
 8007fac:	781a      	ldrb	r2, [r3, #0]
 8007fae:	4b12      	ldr	r3, [pc, #72]	; (8007ff8 <getLatestADC+0x54>)
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <getLatestADC+0x54>)
 8007fb8:	789b      	ldrb	r3, [r3, #2]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d016      	beq.n	8007ff0 <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 8007fc2:	f7fb fda9 	bl	8003b18 <getADCValues>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	603b      	str	r3, [r7, #0]
		  for(i=0;i<21;i++){
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	e00c      	b.n	8007fea <getLatestADC+0x46>
	  		  displayAdcValues[i]=*(adcValuePointer+i);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4908      	ldr	r1, [pc, #32]	; (8007ffc <getLatestADC+0x58>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	601a      	str	r2, [r3, #0]
		  for(i=0;i<21;i++){
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b14      	cmp	r3, #20
 8007fee:	ddef      	ble.n	8007fd0 <getLatestADC+0x2c>
		  }
	 }
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20029264 	.word	0x20029264
 8007ffc:	200310c0 	.word	0x200310c0

08008000 <printFaults>:
//print only the critical faults. Order is VSYS_PMI, ZION, FAULT3-9
int printFaults(int i, int j){
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
	int x = i;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60fb      	str	r3, [r7, #12]
	int y = j;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	60bb      	str	r3, [r7, #8]
	x += LCD_PutStr(x, y, "FAULTS:", fnt7x10);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	b298      	uxth	r0, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	b299      	uxth	r1, r3
 800801a:	4b67      	ldr	r3, [pc, #412]	; (80081b8 <printFaults+0x1b8>)
 800801c:	4a67      	ldr	r2, [pc, #412]	; (80081bc <printFaults+0x1bc>)
 800801e:	f7f9 faf7 	bl	8001610 <LCD_PutStr>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]
	if(errorLED.vsysPMIFault){
 800802c:	4b64      	ldr	r3, [pc, #400]	; (80081c0 <printFaults+0x1c0>)
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00d      	beq.n	8008050 <printFaults+0x50>
		x += LCD_PutStr(x, y, "VSYS", fnt7x10);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	b298      	uxth	r0, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	b299      	uxth	r1, r3
 800803c:	4b5e      	ldr	r3, [pc, #376]	; (80081b8 <printFaults+0x1b8>)
 800803e:	4a61      	ldr	r2, [pc, #388]	; (80081c4 <printFaults+0x1c4>)
 8008040:	f7f9 fae6 	bl	8001610 <LCD_PutStr>
 8008044:	4603      	mov	r3, r0
 8008046:	461a      	mov	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e0ae      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.zionFault){
 8008050:	4b5b      	ldr	r3, [pc, #364]	; (80081c0 <printFaults+0x1c0>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00d      	beq.n	8008074 <printFaults+0x74>
		x += LCD_PutStr(x, y, "ZION", fnt7x10);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	b298      	uxth	r0, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	b299      	uxth	r1, r3
 8008060:	4b55      	ldr	r3, [pc, #340]	; (80081b8 <printFaults+0x1b8>)
 8008062:	4a59      	ldr	r2, [pc, #356]	; (80081c8 <printFaults+0x1c8>)
 8008064:	f7f9 fad4 	bl	8001610 <LCD_PutStr>
 8008068:	4603      	mov	r3, r0
 800806a:	461a      	mov	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
 8008072:	e09c      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.fault3){
 8008074:	4b52      	ldr	r3, [pc, #328]	; (80081c0 <printFaults+0x1c0>)
 8008076:	789b      	ldrb	r3, [r3, #2]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00d      	beq.n	8008098 <printFaults+0x98>
		x += LCD_PutStr(x, y, "FAULT3", fnt7x10);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	b298      	uxth	r0, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	b299      	uxth	r1, r3
 8008084:	4b4c      	ldr	r3, [pc, #304]	; (80081b8 <printFaults+0x1b8>)
 8008086:	4a51      	ldr	r2, [pc, #324]	; (80081cc <printFaults+0x1cc>)
 8008088:	f7f9 fac2 	bl	8001610 <LCD_PutStr>
 800808c:	4603      	mov	r3, r0
 800808e:	461a      	mov	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e08a      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.fault4){
 8008098:	4b49      	ldr	r3, [pc, #292]	; (80081c0 <printFaults+0x1c0>)
 800809a:	78db      	ldrb	r3, [r3, #3]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00d      	beq.n	80080bc <printFaults+0xbc>
		x += LCD_PutStr(x, y, "FAULT4", fnt7x10);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	b298      	uxth	r0, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	b299      	uxth	r1, r3
 80080a8:	4b43      	ldr	r3, [pc, #268]	; (80081b8 <printFaults+0x1b8>)
 80080aa:	4a49      	ldr	r2, [pc, #292]	; (80081d0 <printFaults+0x1d0>)
 80080ac:	f7f9 fab0 	bl	8001610 <LCD_PutStr>
 80080b0:	4603      	mov	r3, r0
 80080b2:	461a      	mov	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4413      	add	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	e078      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.fault5){
 80080bc:	4b40      	ldr	r3, [pc, #256]	; (80081c0 <printFaults+0x1c0>)
 80080be:	791b      	ldrb	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00d      	beq.n	80080e0 <printFaults+0xe0>
		x += LCD_PutStr(x, y, "FAULT5", fnt7x10);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	b298      	uxth	r0, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	b299      	uxth	r1, r3
 80080cc:	4b3a      	ldr	r3, [pc, #232]	; (80081b8 <printFaults+0x1b8>)
 80080ce:	4a41      	ldr	r2, [pc, #260]	; (80081d4 <printFaults+0x1d4>)
 80080d0:	f7f9 fa9e 	bl	8001610 <LCD_PutStr>
 80080d4:	4603      	mov	r3, r0
 80080d6:	461a      	mov	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
 80080de:	e066      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.fault6){
 80080e0:	4b37      	ldr	r3, [pc, #220]	; (80081c0 <printFaults+0x1c0>)
 80080e2:	795b      	ldrb	r3, [r3, #5]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00d      	beq.n	8008104 <printFaults+0x104>
		x += LCD_PutStr(x, y, "FAULT6", fnt7x10);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	b298      	uxth	r0, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	b299      	uxth	r1, r3
 80080f0:	4b31      	ldr	r3, [pc, #196]	; (80081b8 <printFaults+0x1b8>)
 80080f2:	4a39      	ldr	r2, [pc, #228]	; (80081d8 <printFaults+0x1d8>)
 80080f4:	f7f9 fa8c 	bl	8001610 <LCD_PutStr>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	e054      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.fault7){
 8008104:	4b2e      	ldr	r3, [pc, #184]	; (80081c0 <printFaults+0x1c0>)
 8008106:	799b      	ldrb	r3, [r3, #6]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00d      	beq.n	8008128 <printFaults+0x128>
		x += LCD_PutStr(x, y, "FAULT7", fnt7x10);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	b298      	uxth	r0, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	b299      	uxth	r1, r3
 8008114:	4b28      	ldr	r3, [pc, #160]	; (80081b8 <printFaults+0x1b8>)
 8008116:	4a31      	ldr	r2, [pc, #196]	; (80081dc <printFaults+0x1dc>)
 8008118:	f7f9 fa7a 	bl	8001610 <LCD_PutStr>
 800811c:	4603      	mov	r3, r0
 800811e:	461a      	mov	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	e042      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.fault8){
 8008128:	4b25      	ldr	r3, [pc, #148]	; (80081c0 <printFaults+0x1c0>)
 800812a:	7adb      	ldrb	r3, [r3, #11]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00d      	beq.n	800814c <printFaults+0x14c>
		x += LCD_PutStr(x, y, "FAULT8", fnt7x10);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	b298      	uxth	r0, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	b299      	uxth	r1, r3
 8008138:	4b1f      	ldr	r3, [pc, #124]	; (80081b8 <printFaults+0x1b8>)
 800813a:	4a29      	ldr	r2, [pc, #164]	; (80081e0 <printFaults+0x1e0>)
 800813c:	f7f9 fa68 	bl	8001610 <LCD_PutStr>
 8008140:	4603      	mov	r3, r0
 8008142:	461a      	mov	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e030      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.fault9){
 800814c:	4b1c      	ldr	r3, [pc, #112]	; (80081c0 <printFaults+0x1c0>)
 800814e:	7b1b      	ldrb	r3, [r3, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <printFaults+0x170>
		x += LCD_PutStr(x, y, "FAULT9", fnt7x10);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	b298      	uxth	r0, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	b299      	uxth	r1, r3
 800815c:	4b16      	ldr	r3, [pc, #88]	; (80081b8 <printFaults+0x1b8>)
 800815e:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <printFaults+0x1e4>)
 8008160:	f7f9 fa56 	bl	8001610 <LCD_PutStr>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	e01e      	b.n	80081ae <printFaults+0x1ae>
	}
	else if(errorLED.ledDriver){
 8008170:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <printFaults+0x1c0>)
 8008172:	7b5b      	ldrb	r3, [r3, #13]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00d      	beq.n	8008194 <printFaults+0x194>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	b298      	uxth	r0, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	b299      	uxth	r1, r3
 8008180:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <printFaults+0x1b8>)
 8008182:	4a19      	ldr	r2, [pc, #100]	; (80081e8 <printFaults+0x1e8>)
 8008184:	f7f9 fa44 	bl	8001610 <LCD_PutStr>
 8008188:	4603      	mov	r3, r0
 800818a:	461a      	mov	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e00c      	b.n	80081ae <printFaults+0x1ae>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	b298      	uxth	r0, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	b299      	uxth	r1, r3
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <printFaults+0x1b8>)
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <printFaults+0x1ec>)
 80081a0:	f7f9 fa36 	bl	8001610 <LCD_PutStr>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
	}
	return x;
 80081ae:	68fb      	ldr	r3, [r7, #12]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	08018104 	.word	0x08018104
 80081bc:	08017948 	.word	0x08017948
 80081c0:	200032d8 	.word	0x200032d8
 80081c4:	08017f24 	.word	0x08017f24
 80081c8:	08017f2c 	.word	0x08017f2c
 80081cc:	080178e8 	.word	0x080178e8
 80081d0:	080178f0 	.word	0x080178f0
 80081d4:	080178f8 	.word	0x080178f8
 80081d8:	08017900 	.word	0x08017900
 80081dc:	08017908 	.word	0x08017908
 80081e0:	08017910 	.word	0x08017910
 80081e4:	08017918 	.word	0x08017918
 80081e8:	08017f34 	.word	0x08017f34
 80081ec:	08017f3c 	.word	0x08017f3c

080081f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80081f6:	4b11      	ldr	r3, [pc, #68]	; (800823c <HAL_MspInit+0x4c>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	4a10      	ldr	r2, [pc, #64]	; (800823c <HAL_MspInit+0x4c>)
 80081fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008200:	6413      	str	r3, [r2, #64]	; 0x40
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <HAL_MspInit+0x4c>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820a:	607b      	str	r3, [r7, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800820e:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_MspInit+0x4c>)
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	4a0a      	ldr	r2, [pc, #40]	; (800823c <HAL_MspInit+0x4c>)
 8008214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008218:	6453      	str	r3, [r2, #68]	; 0x44
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <HAL_MspInit+0x4c>)
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008226:	2200      	movs	r2, #0
 8008228:	210f      	movs	r1, #15
 800822a:	f06f 0001 	mvn.w	r0, #1
 800822e:	f002 f9cd 	bl	800a5cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40023800 	.word	0x40023800

08008240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b094      	sub	sp, #80	; 0x50
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008248:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	609a      	str	r2, [r3, #8]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a91      	ldr	r2, [pc, #580]	; (80084a4 <HAL_ADC_MspInit+0x264>)
 800825e:	4293      	cmp	r3, r2
 8008260:	f040 808c 	bne.w	800837c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008264:	4b90      	ldr	r3, [pc, #576]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	4a8f      	ldr	r2, [pc, #572]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 800826a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800826e:	6453      	str	r3, [r2, #68]	; 0x44
 8008270:	4b8d      	ldr	r3, [pc, #564]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 8008272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	63bb      	str	r3, [r7, #56]	; 0x38
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800827c:	4b8a      	ldr	r3, [pc, #552]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	4a89      	ldr	r2, [pc, #548]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 8008282:	f043 0304 	orr.w	r3, r3, #4
 8008286:	6313      	str	r3, [r2, #48]	; 0x30
 8008288:	4b87      	ldr	r3, [pc, #540]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 800828a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008294:	4b84      	ldr	r3, [pc, #528]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	4a83      	ldr	r2, [pc, #524]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6313      	str	r3, [r2, #48]	; 0x30
 80082a0:	4b81      	ldr	r3, [pc, #516]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	633b      	str	r3, [r7, #48]	; 0x30
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ac:	4b7e      	ldr	r3, [pc, #504]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	4a7d      	ldr	r2, [pc, #500]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	6313      	str	r3, [r2, #48]	; 0x30
 80082b8:	4b7b      	ldr	r3, [pc, #492]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 80082c4:	230f      	movs	r3, #15
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082c8:	2303      	movs	r3, #3
 80082ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80082d4:	4619      	mov	r1, r3
 80082d6:	4875      	ldr	r0, [pc, #468]	; (80084ac <HAL_ADC_MspInit+0x26c>)
 80082d8:	f002 fdaa 	bl	800ae30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 80082dc:	23f8      	movs	r3, #248	; 0xf8
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082e0:	2303      	movs	r3, #3
 80082e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80082ec:	4619      	mov	r1, r3
 80082ee:	4870      	ldr	r0, [pc, #448]	; (80084b0 <HAL_ADC_MspInit+0x270>)
 80082f0:	f002 fd9e 	bl	800ae30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 80082f4:	2303      	movs	r3, #3
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082f8:	2303      	movs	r3, #3
 80082fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fc:	2300      	movs	r3, #0
 80082fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008300:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008304:	4619      	mov	r1, r3
 8008306:	486b      	ldr	r0, [pc, #428]	; (80084b4 <HAL_ADC_MspInit+0x274>)
 8008308:	f002 fd92 	bl	800ae30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800830c:	4b6a      	ldr	r3, [pc, #424]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 800830e:	4a6b      	ldr	r2, [pc, #428]	; (80084bc <HAL_ADC_MspInit+0x27c>)
 8008310:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008312:	4b69      	ldr	r3, [pc, #420]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008314:	2200      	movs	r2, #0
 8008316:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008318:	4b67      	ldr	r3, [pc, #412]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 800831a:	2200      	movs	r2, #0
 800831c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800831e:	4b66      	ldr	r3, [pc, #408]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008320:	2200      	movs	r2, #0
 8008322:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008324:	4b64      	ldr	r3, [pc, #400]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800832a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800832c:	4b62      	ldr	r3, [pc, #392]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 800832e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008332:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008334:	4b60      	ldr	r3, [pc, #384]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800833a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800833c:	4b5e      	ldr	r3, [pc, #376]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 800833e:	2200      	movs	r2, #0
 8008340:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008342:	4b5d      	ldr	r3, [pc, #372]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008344:	2200      	movs	r2, #0
 8008346:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008348:	4b5b      	ldr	r3, [pc, #364]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 800834a:	2200      	movs	r2, #0
 800834c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800834e:	485a      	ldr	r0, [pc, #360]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008350:	f002 f966 	bl	800a620 <HAL_DMA_Init>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 800835a:	f7fd f811 	bl	8005380 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a55      	ldr	r2, [pc, #340]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
 8008364:	4a54      	ldr	r2, [pc, #336]	; (80084b8 <HAL_ADC_MspInit+0x278>)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800836a:	2200      	movs	r2, #0
 800836c:	2105      	movs	r1, #5
 800836e:	2012      	movs	r0, #18
 8008370:	f002 f92c 	bl	800a5cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008374:	2012      	movs	r0, #18
 8008376:	f002 f945 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800837a:	e13a      	b.n	80085f2 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a4f      	ldr	r2, [pc, #316]	; (80084c0 <HAL_ADC_MspInit+0x280>)
 8008382:	4293      	cmp	r3, r2
 8008384:	f040 80a2 	bne.w	80084cc <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8008388:	4b47      	ldr	r3, [pc, #284]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 800838a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838c:	4a46      	ldr	r2, [pc, #280]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 800838e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008392:	6453      	str	r3, [r2, #68]	; 0x44
 8008394:	4b44      	ldr	r3, [pc, #272]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083a0:	4b41      	ldr	r3, [pc, #260]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a4:	4a40      	ldr	r2, [pc, #256]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083a6:	f043 0304 	orr.w	r3, r3, #4
 80083aa:	6313      	str	r3, [r2, #48]	; 0x30
 80083ac:	4b3e      	ldr	r3, [pc, #248]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083b8:	4b3b      	ldr	r3, [pc, #236]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083bc:	4a3a      	ldr	r2, [pc, #232]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	6313      	str	r3, [r2, #48]	; 0x30
 80083c4:	4b38      	ldr	r3, [pc, #224]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	623b      	str	r3, [r7, #32]
 80083ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083d0:	4b35      	ldr	r3, [pc, #212]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	4a34      	ldr	r2, [pc, #208]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083d6:	f043 0302 	orr.w	r3, r3, #2
 80083da:	6313      	str	r3, [r2, #48]	; 0x30
 80083dc:	4b32      	ldr	r3, [pc, #200]	; (80084a8 <HAL_ADC_MspInit+0x268>)
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 80083e8:	233f      	movs	r3, #63	; 0x3f
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80083ec:	2303      	movs	r3, #3
 80083ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f0:	2300      	movs	r3, #0
 80083f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083f8:	4619      	mov	r1, r3
 80083fa:	482c      	ldr	r0, [pc, #176]	; (80084ac <HAL_ADC_MspInit+0x26c>)
 80083fc:	f002 fd18 	bl	800ae30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8008400:	237b      	movs	r3, #123	; 0x7b
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008404:	2303      	movs	r3, #3
 8008406:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008408:	2300      	movs	r3, #0
 800840a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800840c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008410:	4619      	mov	r1, r3
 8008412:	4827      	ldr	r0, [pc, #156]	; (80084b0 <HAL_ADC_MspInit+0x270>)
 8008414:	f002 fd0c 	bl	800ae30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8008418:	2302      	movs	r3, #2
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800841c:	2303      	movs	r3, #3
 800841e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008420:	2300      	movs	r3, #0
 8008422:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8008424:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008428:	4619      	mov	r1, r3
 800842a:	4822      	ldr	r0, [pc, #136]	; (80084b4 <HAL_ADC_MspInit+0x274>)
 800842c:	f002 fd00 	bl	800ae30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8008430:	4b24      	ldr	r3, [pc, #144]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008432:	4a25      	ldr	r2, [pc, #148]	; (80084c8 <HAL_ADC_MspInit+0x288>)
 8008434:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8008436:	4b23      	ldr	r3, [pc, #140]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800843c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800843e:	4b21      	ldr	r3, [pc, #132]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008440:	2200      	movs	r2, #0
 8008442:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008444:	4b1f      	ldr	r3, [pc, #124]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008446:	2200      	movs	r2, #0
 8008448:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800844a:	4b1e      	ldr	r3, [pc, #120]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 800844c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008450:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008458:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800845a:	4b1a      	ldr	r3, [pc, #104]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 800845c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008460:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8008462:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008464:	2200      	movs	r2, #0
 8008466:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008468:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 800846a:	2200      	movs	r2, #0
 800846c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008470:	2200      	movs	r2, #0
 8008472:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8008474:	4813      	ldr	r0, [pc, #76]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008476:	f002 f8d3 	bl	800a620 <HAL_DMA_Init>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8008480:	f7fc ff7e 	bl	8005380 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a0f      	ldr	r2, [pc, #60]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 8008488:	639a      	str	r2, [r3, #56]	; 0x38
 800848a:	4a0e      	ldr	r2, [pc, #56]	; (80084c4 <HAL_ADC_MspInit+0x284>)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8008490:	2200      	movs	r2, #0
 8008492:	2105      	movs	r1, #5
 8008494:	2012      	movs	r0, #18
 8008496:	f002 f899 	bl	800a5cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800849a:	2012      	movs	r0, #18
 800849c:	f002 f8b2 	bl	800a604 <HAL_NVIC_EnableIRQ>
}
 80084a0:	e0a7      	b.n	80085f2 <HAL_ADC_MspInit+0x3b2>
 80084a2:	bf00      	nop
 80084a4:	40012000 	.word	0x40012000
 80084a8:	40023800 	.word	0x40023800
 80084ac:	40020800 	.word	0x40020800
 80084b0:	40020000 	.word	0x40020000
 80084b4:	40020400 	.word	0x40020400
 80084b8:	2002bfe4 	.word	0x2002bfe4
 80084bc:	40026410 	.word	0x40026410
 80084c0:	40012100 	.word	0x40012100
 80084c4:	20030ff8 	.word	0x20030ff8
 80084c8:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a4a      	ldr	r2, [pc, #296]	; (80085fc <HAL_ADC_MspInit+0x3bc>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	f040 808d 	bne.w	80085f2 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80084d8:	4b49      	ldr	r3, [pc, #292]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 80084da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084dc:	4a48      	ldr	r2, [pc, #288]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 80084de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084e2:	6453      	str	r3, [r2, #68]	; 0x44
 80084e4:	4b46      	ldr	r3, [pc, #280]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 80084e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80084f0:	4b43      	ldr	r3, [pc, #268]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	4a42      	ldr	r2, [pc, #264]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 80084f6:	f043 0320 	orr.w	r3, r3, #32
 80084fa:	6313      	str	r3, [r2, #48]	; 0x30
 80084fc:	4b40      	ldr	r3, [pc, #256]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008508:	4b3d      	ldr	r3, [pc, #244]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	4a3c      	ldr	r2, [pc, #240]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 800850e:	f043 0304 	orr.w	r3, r3, #4
 8008512:	6313      	str	r3, [r2, #48]	; 0x30
 8008514:	4b3a      	ldr	r3, [pc, #232]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	613b      	str	r3, [r7, #16]
 800851e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008520:	4b37      	ldr	r3, [pc, #220]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	4a36      	ldr	r2, [pc, #216]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 8008526:	f043 0301 	orr.w	r3, r3, #1
 800852a:	6313      	str	r3, [r2, #48]	; 0x30
 800852c:	4b34      	ldr	r3, [pc, #208]	; (8008600 <HAL_ADC_MspInit+0x3c0>)
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8008538:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800853e:	2303      	movs	r3, #3
 8008540:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008542:	2300      	movs	r3, #0
 8008544:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008546:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800854a:	4619      	mov	r1, r3
 800854c:	482d      	ldr	r0, [pc, #180]	; (8008604 <HAL_ADC_MspInit+0x3c4>)
 800854e:	f002 fc6f 	bl	800ae30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8008552:	230f      	movs	r3, #15
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008556:	2303      	movs	r3, #3
 8008558:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800855a:	2300      	movs	r3, #0
 800855c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800855e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008562:	4619      	mov	r1, r3
 8008564:	4828      	ldr	r0, [pc, #160]	; (8008608 <HAL_ADC_MspInit+0x3c8>)
 8008566:	f002 fc63 	bl	800ae30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 800856a:	230c      	movs	r3, #12
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800856e:	2303      	movs	r3, #3
 8008570:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008572:	2300      	movs	r3, #0
 8008574:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008576:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800857a:	4619      	mov	r1, r3
 800857c:	4823      	ldr	r0, [pc, #140]	; (800860c <HAL_ADC_MspInit+0x3cc>)
 800857e:	f002 fc57 	bl	800ae30 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8008582:	4b23      	ldr	r3, [pc, #140]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 8008584:	4a23      	ldr	r2, [pc, #140]	; (8008614 <HAL_ADC_MspInit+0x3d4>)
 8008586:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8008588:	4b21      	ldr	r3, [pc, #132]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 800858a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800858e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008590:	4b1f      	ldr	r3, [pc, #124]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 8008592:	2200      	movs	r2, #0
 8008594:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8008596:	4b1e      	ldr	r3, [pc, #120]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 8008598:	2200      	movs	r2, #0
 800859a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800859c:	4b1c      	ldr	r3, [pc, #112]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 800859e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085a2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80085aa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80085ac:	4b18      	ldr	r3, [pc, #96]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085b2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80085b4:	4b16      	ldr	r3, [pc, #88]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80085ba:	4b15      	ldr	r3, [pc, #84]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085bc:	2200      	movs	r2, #0
 80085be:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085c0:	4b13      	ldr	r3, [pc, #76]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80085c6:	4812      	ldr	r0, [pc, #72]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085c8:	f002 f82a 	bl	800a620 <HAL_DMA_Init>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 80085d2:	f7fc fed5 	bl	8005380 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a0d      	ldr	r2, [pc, #52]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085da:	639a      	str	r2, [r3, #56]	; 0x38
 80085dc:	4a0c      	ldr	r2, [pc, #48]	; (8008610 <HAL_ADC_MspInit+0x3d0>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80085e2:	2200      	movs	r2, #0
 80085e4:	2105      	movs	r1, #5
 80085e6:	2012      	movs	r0, #18
 80085e8:	f001 fff0 	bl	800a5cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80085ec:	2012      	movs	r0, #18
 80085ee:	f002 f809 	bl	800a604 <HAL_NVIC_EnableIRQ>
}
 80085f2:	bf00      	nop
 80085f4:	3750      	adds	r7, #80	; 0x50
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	40012200 	.word	0x40012200
 8008600:	40023800 	.word	0x40023800
 8008604:	40021400 	.word	0x40021400
 8008608:	40020800 	.word	0x40020800
 800860c:	40020000 	.word	0x40020000
 8008610:	20029204 	.word	0x20029204
 8008614:	40026428 	.word	0x40026428

08008618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b090      	sub	sp, #64	; 0x40
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	605a      	str	r2, [r3, #4]
 800862a:	609a      	str	r2, [r3, #8]
 800862c:	60da      	str	r2, [r3, #12]
 800862e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a6c      	ldr	r2, [pc, #432]	; (80087e8 <HAL_I2C_MspInit+0x1d0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d129      	bne.n	800868e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800863a:	4b6c      	ldr	r3, [pc, #432]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	4a6b      	ldr	r2, [pc, #428]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	6313      	str	r3, [r2, #48]	; 0x30
 8008646:	4b69      	ldr	r3, [pc, #420]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8008652:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008658:	2312      	movs	r3, #18
 800865a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800865c:	2301      	movs	r3, #1
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008660:	2303      	movs	r3, #3
 8008662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008664:	2304      	movs	r3, #4
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800866c:	4619      	mov	r1, r3
 800866e:	4860      	ldr	r0, [pc, #384]	; (80087f0 <HAL_I2C_MspInit+0x1d8>)
 8008670:	f002 fbde 	bl	800ae30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008674:	4b5d      	ldr	r3, [pc, #372]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	4a5c      	ldr	r2, [pc, #368]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800867a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800867e:	6413      	str	r3, [r2, #64]	; 0x40
 8008680:	4b5a      	ldr	r3, [pc, #360]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800868c:	e0a7      	b.n	80087de <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a58      	ldr	r2, [pc, #352]	; (80087f4 <HAL_I2C_MspInit+0x1dc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d128      	bne.n	80086ea <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008698:	4b54      	ldr	r3, [pc, #336]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	4a53      	ldr	r2, [pc, #332]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800869e:	f043 0320 	orr.w	r3, r3, #32
 80086a2:	6313      	str	r3, [r2, #48]	; 0x30
 80086a4:	4b51      	ldr	r3, [pc, #324]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	623b      	str	r3, [r7, #32]
 80086ae:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 80086b0:	2303      	movs	r3, #3
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086b4:	2312      	movs	r3, #18
 80086b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086b8:	2301      	movs	r3, #1
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086bc:	2303      	movs	r3, #3
 80086be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80086c0:	2304      	movs	r3, #4
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80086c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086c8:	4619      	mov	r1, r3
 80086ca:	484b      	ldr	r0, [pc, #300]	; (80087f8 <HAL_I2C_MspInit+0x1e0>)
 80086cc:	f002 fbb0 	bl	800ae30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80086d0:	4b46      	ldr	r3, [pc, #280]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	4a45      	ldr	r2, [pc, #276]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80086d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086da:	6413      	str	r3, [r2, #64]	; 0x40
 80086dc:	4b43      	ldr	r3, [pc, #268]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	69fb      	ldr	r3, [r7, #28]
}
 80086e8:	e079      	b.n	80087de <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a43      	ldr	r2, [pc, #268]	; (80087fc <HAL_I2C_MspInit+0x1e4>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d146      	bne.n	8008782 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086f4:	4b3d      	ldr	r3, [pc, #244]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	4a3c      	ldr	r2, [pc, #240]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80086fa:	f043 0304 	orr.w	r3, r3, #4
 80086fe:	6313      	str	r3, [r2, #48]	; 0x30
 8008700:	4b3a      	ldr	r3, [pc, #232]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800870c:	4b37      	ldr	r3, [pc, #220]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	4a36      	ldr	r2, [pc, #216]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	6313      	str	r3, [r2, #48]	; 0x30
 8008718:	4b34      	ldr	r3, [pc, #208]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800871a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	617b      	str	r3, [r7, #20]
 8008722:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8008724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800872a:	2312      	movs	r3, #18
 800872c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800872e:	2301      	movs	r3, #1
 8008730:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008732:	2303      	movs	r3, #3
 8008734:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008736:	2304      	movs	r3, #4
 8008738:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 800873a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800873e:	4619      	mov	r1, r3
 8008740:	482f      	ldr	r0, [pc, #188]	; (8008800 <HAL_I2C_MspInit+0x1e8>)
 8008742:	f002 fb75 	bl	800ae30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 8008746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800874a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800874c:	2312      	movs	r3, #18
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008750:	2301      	movs	r3, #1
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008754:	2303      	movs	r3, #3
 8008756:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008758:	2304      	movs	r3, #4
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 800875c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008760:	4619      	mov	r1, r3
 8008762:	4828      	ldr	r0, [pc, #160]	; (8008804 <HAL_I2C_MspInit+0x1ec>)
 8008764:	f002 fb64 	bl	800ae30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008768:	4b20      	ldr	r3, [pc, #128]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	4a1f      	ldr	r2, [pc, #124]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800876e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008772:	6413      	str	r3, [r2, #64]	; 0x40
 8008774:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	693b      	ldr	r3, [r7, #16]
}
 8008780:	e02d      	b.n	80087de <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a20      	ldr	r2, [pc, #128]	; (8008808 <HAL_I2C_MspInit+0x1f0>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d128      	bne.n	80087de <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800878c:	4b17      	ldr	r3, [pc, #92]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	4a16      	ldr	r2, [pc, #88]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 8008792:	f043 0320 	orr.w	r3, r3, #32
 8008796:	6313      	str	r3, [r2, #48]	; 0x30
 8008798:	4b14      	ldr	r3, [pc, #80]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	f003 0320 	and.w	r3, r3, #32
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 80087a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80087aa:	2312      	movs	r3, #18
 80087ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087ae:	2301      	movs	r3, #1
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087b2:	2303      	movs	r3, #3
 80087b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80087b6:	2304      	movs	r3, #4
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087be:	4619      	mov	r1, r3
 80087c0:	480d      	ldr	r0, [pc, #52]	; (80087f8 <HAL_I2C_MspInit+0x1e0>)
 80087c2:	f002 fb35 	bl	800ae30 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80087c6:	4b09      	ldr	r3, [pc, #36]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	4a08      	ldr	r2, [pc, #32]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80087cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087d0:	6413      	str	r3, [r2, #64]	; 0x40
 80087d2:	4b06      	ldr	r3, [pc, #24]	; (80087ec <HAL_I2C_MspInit+0x1d4>)
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
}
 80087de:	bf00      	nop
 80087e0:	3740      	adds	r7, #64	; 0x40
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40005400 	.word	0x40005400
 80087ec:	40023800 	.word	0x40023800
 80087f0:	40020400 	.word	0x40020400
 80087f4:	40005800 	.word	0x40005800
 80087f8:	40021400 	.word	0x40021400
 80087fc:	40005c00 	.word	0x40005c00
 8008800:	40020800 	.word	0x40020800
 8008804:	40020000 	.word	0x40020000
 8008808:	40006000 	.word	0x40006000

0800880c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a07      	ldr	r2, [pc, #28]	; (8008838 <HAL_RTC_MspInit+0x2c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d105      	bne.n	800882a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800881e:	4b07      	ldr	r3, [pc, #28]	; (800883c <HAL_RTC_MspInit+0x30>)
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	4a06      	ldr	r2, [pc, #24]	; (800883c <HAL_RTC_MspInit+0x30>)
 8008824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008828:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800882a:	bf00      	nop
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40002800 	.word	0x40002800
 800883c:	40023800 	.word	0x40023800

08008840 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	; 0x30
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008848:	f107 031c 	add.w	r3, r7, #28
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	605a      	str	r2, [r3, #4]
 8008852:	609a      	str	r2, [r3, #8]
 8008854:	60da      	str	r2, [r3, #12]
 8008856:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a40      	ldr	r2, [pc, #256]	; (8008960 <HAL_SPI_MspInit+0x120>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d130      	bne.n	80088c4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8008862:	4b40      	ldr	r3, [pc, #256]	; (8008964 <HAL_SPI_MspInit+0x124>)
 8008864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008866:	4a3f      	ldr	r2, [pc, #252]	; (8008964 <HAL_SPI_MspInit+0x124>)
 8008868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800886c:	6453      	str	r3, [r2, #68]	; 0x44
 800886e:	4b3d      	ldr	r3, [pc, #244]	; (8008964 <HAL_SPI_MspInit+0x124>)
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800887a:	4b3a      	ldr	r3, [pc, #232]	; (8008964 <HAL_SPI_MspInit+0x124>)
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	4a39      	ldr	r2, [pc, #228]	; (8008964 <HAL_SPI_MspInit+0x124>)
 8008880:	f043 0310 	orr.w	r3, r3, #16
 8008884:	6313      	str	r3, [r2, #48]	; 0x30
 8008886:	4b37      	ldr	r3, [pc, #220]	; (8008964 <HAL_SPI_MspInit+0x124>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	f003 0310 	and.w	r3, r3, #16
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 8008892:	2364      	movs	r3, #100	; 0x64
 8008894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008896:	2302      	movs	r3, #2
 8008898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800889e:	2303      	movs	r3, #3
 80088a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80088a2:	2305      	movs	r3, #5
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80088a6:	f107 031c 	add.w	r3, r7, #28
 80088aa:	4619      	mov	r1, r3
 80088ac:	482e      	ldr	r0, [pc, #184]	; (8008968 <HAL_SPI_MspInit+0x128>)
 80088ae:	f002 fabf 	bl	800ae30 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80088b2:	2200      	movs	r2, #0
 80088b4:	2105      	movs	r1, #5
 80088b6:	2054      	movs	r0, #84	; 0x54
 80088b8:	f001 fe88 	bl	800a5cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80088bc:	2054      	movs	r0, #84	; 0x54
 80088be:	f001 fea1 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80088c2:	e049      	b.n	8008958 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a28      	ldr	r2, [pc, #160]	; (800896c <HAL_SPI_MspInit+0x12c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d144      	bne.n	8008958 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80088ce:	4b25      	ldr	r3, [pc, #148]	; (8008964 <HAL_SPI_MspInit+0x124>)
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	4a24      	ldr	r2, [pc, #144]	; (8008964 <HAL_SPI_MspInit+0x124>)
 80088d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088d8:	6453      	str	r3, [r2, #68]	; 0x44
 80088da:	4b22      	ldr	r3, [pc, #136]	; (8008964 <HAL_SPI_MspInit+0x124>)
 80088dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80088e6:	4b1f      	ldr	r3, [pc, #124]	; (8008964 <HAL_SPI_MspInit+0x124>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	4a1e      	ldr	r2, [pc, #120]	; (8008964 <HAL_SPI_MspInit+0x124>)
 80088ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f0:	6313      	str	r3, [r2, #48]	; 0x30
 80088f2:	4b1c      	ldr	r3, [pc, #112]	; (8008964 <HAL_SPI_MspInit+0x124>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80088fe:	4b19      	ldr	r3, [pc, #100]	; (8008964 <HAL_SPI_MspInit+0x124>)
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	4a18      	ldr	r2, [pc, #96]	; (8008964 <HAL_SPI_MspInit+0x124>)
 8008904:	f043 0320 	orr.w	r3, r3, #32
 8008908:	6313      	str	r3, [r2, #48]	; 0x30
 800890a:	4b16      	ldr	r3, [pc, #88]	; (8008964 <HAL_SPI_MspInit+0x124>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	60bb      	str	r3, [r7, #8]
 8008914:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8008916:	23e0      	movs	r3, #224	; 0xe0
 8008918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800891a:	2302      	movs	r3, #2
 800891c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891e:	2300      	movs	r3, #0
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008922:	2303      	movs	r3, #3
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008926:	2305      	movs	r3, #5
 8008928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800892a:	f107 031c 	add.w	r3, r7, #28
 800892e:	4619      	mov	r1, r3
 8008930:	480f      	ldr	r0, [pc, #60]	; (8008970 <HAL_SPI_MspInit+0x130>)
 8008932:	f002 fa7d 	bl	800ae30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8008936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800893a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893c:	2302      	movs	r3, #2
 800893e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008940:	2300      	movs	r3, #0
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008944:	2303      	movs	r3, #3
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008948:	2305      	movs	r3, #5
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 800894c:	f107 031c 	add.w	r3, r7, #28
 8008950:	4619      	mov	r1, r3
 8008952:	4808      	ldr	r0, [pc, #32]	; (8008974 <HAL_SPI_MspInit+0x134>)
 8008954:	f002 fa6c 	bl	800ae30 <HAL_GPIO_Init>
}
 8008958:	bf00      	nop
 800895a:	3730      	adds	r7, #48	; 0x30
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	40013400 	.word	0x40013400
 8008964:	40023800 	.word	0x40023800
 8008968:	40021000 	.word	0x40021000
 800896c:	40015000 	.word	0x40015000
 8008970:	40021c00 	.word	0x40021c00
 8008974:	40021400 	.word	0x40021400

08008978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <HAL_TIM_Base_MspInit+0x5c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d10c      	bne.n	80089a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800898a:	4b13      	ldr	r3, [pc, #76]	; (80089d8 <HAL_TIM_Base_MspInit+0x60>)
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	4a12      	ldr	r2, [pc, #72]	; (80089d8 <HAL_TIM_Base_MspInit+0x60>)
 8008990:	f043 0304 	orr.w	r3, r3, #4
 8008994:	6413      	str	r3, [r2, #64]	; 0x40
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <HAL_TIM_Base_MspInit+0x60>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80089a2:	e010      	b.n	80089c6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a0c      	ldr	r2, [pc, #48]	; (80089dc <HAL_TIM_Base_MspInit+0x64>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d10b      	bne.n	80089c6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80089ae:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <HAL_TIM_Base_MspInit+0x60>)
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <HAL_TIM_Base_MspInit+0x60>)
 80089b4:	f043 0308 	orr.w	r3, r3, #8
 80089b8:	6413      	str	r3, [r2, #64]	; 0x40
 80089ba:	4b07      	ldr	r3, [pc, #28]	; (80089d8 <HAL_TIM_Base_MspInit+0x60>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f003 0308 	and.w	r3, r3, #8
 80089c2:	60bb      	str	r3, [r7, #8]
 80089c4:	68bb      	ldr	r3, [r7, #8]
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40023800 	.word	0x40023800
 80089dc:	40000c00 	.word	0x40000c00

080089e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e8:	f107 0314 	add.w	r3, r7, #20
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	609a      	str	r2, [r3, #8]
 80089f4:	60da      	str	r2, [r3, #12]
 80089f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a22      	ldr	r2, [pc, #136]	; (8008a88 <HAL_TIM_MspPostInit+0xa8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d11c      	bne.n	8008a3c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a02:	4b22      	ldr	r3, [pc, #136]	; (8008a8c <HAL_TIM_MspPostInit+0xac>)
 8008a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a06:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <HAL_TIM_MspPostInit+0xac>)
 8008a08:	f043 0302 	orr.w	r3, r3, #2
 8008a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0e:	4b1f      	ldr	r3, [pc, #124]	; (8008a8c <HAL_TIM_MspPostInit+0xac>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8008a1a:	2340      	movs	r3, #64	; 0x40
 8008a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a26:	2300      	movs	r3, #0
 8008a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8008a2e:	f107 0314 	add.w	r3, r7, #20
 8008a32:	4619      	mov	r1, r3
 8008a34:	4816      	ldr	r0, [pc, #88]	; (8008a90 <HAL_TIM_MspPostInit+0xb0>)
 8008a36:	f002 f9fb 	bl	800ae30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008a3a:	e021      	b.n	8008a80 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a14      	ldr	r2, [pc, #80]	; (8008a94 <HAL_TIM_MspPostInit+0xb4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d11c      	bne.n	8008a80 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8008a46:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <HAL_TIM_MspPostInit+0xac>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	4a10      	ldr	r2, [pc, #64]	; (8008a8c <HAL_TIM_MspPostInit+0xac>)
 8008a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a50:	6313      	str	r3, [r2, #48]	; 0x30
 8008a52:	4b0e      	ldr	r3, [pc, #56]	; (8008a8c <HAL_TIM_MspPostInit+0xac>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8008a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a64:	2302      	movs	r3, #2
 8008a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008a70:	2302      	movs	r3, #2
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008a74:	f107 0314 	add.w	r3, r7, #20
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4807      	ldr	r0, [pc, #28]	; (8008a98 <HAL_TIM_MspPostInit+0xb8>)
 8008a7c:	f002 f9d8 	bl	800ae30 <HAL_GPIO_Init>
}
 8008a80:	bf00      	nop
 8008a82:	3728      	adds	r7, #40	; 0x28
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40000800 	.word	0x40000800
 8008a8c:	40023800 	.word	0x40023800
 8008a90:	40020400 	.word	0x40020400
 8008a94:	40000c00 	.word	0x40000c00
 8008a98:	40021c00 	.word	0x40021c00

08008a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08e      	sub	sp, #56	; 0x38
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	605a      	str	r2, [r3, #4]
 8008aae:	609a      	str	r2, [r3, #8]
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a9b      	ldr	r2, [pc, #620]	; (8008d28 <HAL_UART_MspInit+0x28c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d158      	bne.n	8008b70 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008abe:	4b9b      	ldr	r3, [pc, #620]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	4a9a      	ldr	r2, [pc, #616]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008ac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8008aca:	4b98      	ldr	r3, [pc, #608]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ad2:	623b      	str	r3, [r7, #32]
 8008ad4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ad6:	4b95      	ldr	r3, [pc, #596]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	4a94      	ldr	r2, [pc, #592]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008adc:	f043 0304 	orr.w	r3, r3, #4
 8008ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ae2:	4b92      	ldr	r3, [pc, #584]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	f003 0304 	and.w	r3, r3, #4
 8008aea:	61fb      	str	r3, [r7, #28]
 8008aec:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8008aee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008af4:	2302      	movs	r3, #2
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af8:	2300      	movs	r3, #0
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008afc:	2303      	movs	r3, #3
 8008afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008b00:	2308      	movs	r3, #8
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4889      	ldr	r0, [pc, #548]	; (8008d30 <HAL_UART_MspInit+0x294>)
 8008b0c:	f002 f990 	bl	800ae30 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8008b10:	4b88      	ldr	r3, [pc, #544]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b12:	4a89      	ldr	r2, [pc, #548]	; (8008d38 <HAL_UART_MspInit+0x29c>)
 8008b14:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8008b16:	4b87      	ldr	r3, [pc, #540]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b1c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b1e:	4b85      	ldr	r3, [pc, #532]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b24:	4b83      	ldr	r3, [pc, #524]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b2a:	4b82      	ldr	r3, [pc, #520]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b30:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b32:	4b80      	ldr	r3, [pc, #512]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b38:	4b7e      	ldr	r3, [pc, #504]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8008b3e:	4b7d      	ldr	r3, [pc, #500]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b44:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008b46:	4b7b      	ldr	r3, [pc, #492]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b4c:	4b79      	ldr	r3, [pc, #484]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008b52:	4878      	ldr	r0, [pc, #480]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b54:	f001 fd64 	bl	800a620 <HAL_DMA_Init>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8008b5e:	f7fc fc0f 	bl	8005380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a73      	ldr	r2, [pc, #460]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b66:	66da      	str	r2, [r3, #108]	; 0x6c
 8008b68:	4a72      	ldr	r2, [pc, #456]	; (8008d34 <HAL_UART_MspInit+0x298>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8008b6e:	e0d6      	b.n	8008d1e <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART5)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a71      	ldr	r2, [pc, #452]	; (8008d3c <HAL_UART_MspInit+0x2a0>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d174      	bne.n	8008c64 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008b7a:	4b6c      	ldr	r3, [pc, #432]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	4a6b      	ldr	r2, [pc, #428]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b84:	6413      	str	r3, [r2, #64]	; 0x40
 8008b86:	4b69      	ldr	r3, [pc, #420]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b8e:	61bb      	str	r3, [r7, #24]
 8008b90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b92:	4b66      	ldr	r3, [pc, #408]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	4a65      	ldr	r2, [pc, #404]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008b98:	f043 0304 	orr.w	r3, r3, #4
 8008b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b9e:	4b63      	ldr	r3, [pc, #396]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	f003 0304 	and.w	r3, r3, #4
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008baa:	4b60      	ldr	r3, [pc, #384]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	4a5f      	ldr	r2, [pc, #380]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008bb0:	f043 0308 	orr.w	r3, r3, #8
 8008bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bb6:	4b5d      	ldr	r3, [pc, #372]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	613b      	str	r3, [r7, #16]
 8008bc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8008bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008bd4:	2308      	movs	r3, #8
 8008bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8008bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4854      	ldr	r0, [pc, #336]	; (8008d30 <HAL_UART_MspInit+0x294>)
 8008be0:	f002 f926 	bl	800ae30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8008be4:	2304      	movs	r3, #4
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008be8:	2302      	movs	r3, #2
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bec:	2300      	movs	r3, #0
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8008bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4850      	ldr	r0, [pc, #320]	; (8008d40 <HAL_UART_MspInit+0x2a4>)
 8008c00:	f002 f916 	bl	800ae30 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8008c04:	4b4f      	ldr	r3, [pc, #316]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c06:	4a50      	ldr	r2, [pc, #320]	; (8008d48 <HAL_UART_MspInit+0x2ac>)
 8008c08:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8008c0a:	4b4e      	ldr	r3, [pc, #312]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c10:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c12:	4b4c      	ldr	r3, [pc, #304]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c18:	4b4a      	ldr	r3, [pc, #296]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008c1e:	4b49      	ldr	r3, [pc, #292]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c24:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c26:	4b47      	ldr	r3, [pc, #284]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c2c:	4b45      	ldr	r3, [pc, #276]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8008c32:	4b44      	ldr	r3, [pc, #272]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c38:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008c3a:	4b42      	ldr	r3, [pc, #264]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c40:	4b40      	ldr	r3, [pc, #256]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8008c46:	483f      	ldr	r0, [pc, #252]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c48:	f001 fcea 	bl	800a620 <HAL_DMA_Init>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8008c52:	f7fc fb95 	bl	8005380 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a3a      	ldr	r2, [pc, #232]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c5c:	4a39      	ldr	r2, [pc, #228]	; (8008d44 <HAL_UART_MspInit+0x2a8>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008c62:	e05c      	b.n	8008d1e <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART7)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a38      	ldr	r2, [pc, #224]	; (8008d4c <HAL_UART_MspInit+0x2b0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d157      	bne.n	8008d1e <HAL_UART_MspInit+0x282>
    __HAL_RCC_UART7_CLK_ENABLE();
 8008c6e:	4b2f      	ldr	r3, [pc, #188]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	4a2e      	ldr	r2, [pc, #184]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c78:	6413      	str	r3, [r2, #64]	; 0x40
 8008c7a:	4b2c      	ldr	r3, [pc, #176]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008c86:	4b29      	ldr	r3, [pc, #164]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	4a28      	ldr	r2, [pc, #160]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008c8c:	f043 0310 	orr.w	r3, r3, #16
 8008c90:	6313      	str	r3, [r2, #48]	; 0x30
 8008c92:	4b26      	ldr	r3, [pc, #152]	; (8008d2c <HAL_UART_MspInit+0x290>)
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	f003 0310 	and.w	r3, r3, #16
 8008c9a:	60bb      	str	r3, [r7, #8]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8008c9e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cac:	2303      	movs	r3, #3
 8008cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008cb0:	2308      	movs	r3, #8
 8008cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4825      	ldr	r0, [pc, #148]	; (8008d50 <HAL_UART_MspInit+0x2b4>)
 8008cbc:	f002 f8b8 	bl	800ae30 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8008cc0:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cc2:	4a25      	ldr	r2, [pc, #148]	; (8008d58 <HAL_UART_MspInit+0x2bc>)
 8008cc4:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8008cc6:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cc8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008ccc:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cce:	4b21      	ldr	r3, [pc, #132]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cd4:	4b1f      	ldr	r3, [pc, #124]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008cda:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ce0:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ce8:	4b1a      	ldr	r3, [pc, #104]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8008cee:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cf4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008cf6:	4b17      	ldr	r3, [pc, #92]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008cfc:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8008d02:	4814      	ldr	r0, [pc, #80]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008d04:	f001 fc8c 	bl	800a620 <HAL_DMA_Init>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8008d0e:	f7fc fb37 	bl	8005380 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a0f      	ldr	r2, [pc, #60]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008d16:	66da      	str	r2, [r3, #108]	; 0x6c
 8008d18:	4a0e      	ldr	r2, [pc, #56]	; (8008d54 <HAL_UART_MspInit+0x2b8>)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008d1e:	bf00      	nop
 8008d20:	3738      	adds	r7, #56	; 0x38
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	40004c00 	.word	0x40004c00
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	40020800 	.word	0x40020800
 8008d34:	20028af0 	.word	0x20028af0
 8008d38:	40026040 	.word	0x40026040
 8008d3c:	40005000 	.word	0x40005000
 8008d40:	40020c00 	.word	0x40020c00
 8008d44:	20031058 	.word	0x20031058
 8008d48:	40026010 	.word	0x40026010
 8008d4c:	40007800 	.word	0x40007800
 8008d50:	40021000 	.word	0x40021000
 8008d54:	2002be6c 	.word	0x2002be6c
 8008d58:	40026058 	.word	0x40026058

08008d5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08a      	sub	sp, #40	; 0x28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d64:	f107 0314 	add.w	r3, r7, #20
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	605a      	str	r2, [r3, #4]
 8008d6e:	609a      	str	r2, [r3, #8]
 8008d70:	60da      	str	r2, [r3, #12]
 8008d72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d7c:	d134      	bne.n	8008de8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d7e:	4b1c      	ldr	r3, [pc, #112]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008d84:	f043 0301 	orr.w	r3, r3, #1
 8008d88:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8a:	4b19      	ldr	r3, [pc, #100]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8008d96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008da4:	2303      	movs	r3, #3
 8008da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008da8:	230a      	movs	r3, #10
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dac:	f107 0314 	add.w	r3, r7, #20
 8008db0:	4619      	mov	r1, r3
 8008db2:	4810      	ldr	r0, [pc, #64]	; (8008df4 <HAL_PCD_MspInit+0x98>)
 8008db4:	f002 f83c 	bl	800ae30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008db8:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbc:	4a0c      	ldr	r2, [pc, #48]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc2:	6353      	str	r3, [r2, #52]	; 0x34
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd4:	4a06      	ldr	r2, [pc, #24]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dda:	6453      	str	r3, [r2, #68]	; 0x44
 8008ddc:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <HAL_PCD_MspInit+0x94>)
 8008dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008de4:	60bb      	str	r3, [r7, #8]
 8008de6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008de8:	bf00      	nop
 8008dea:	3728      	adds	r7, #40	; 0x28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40023800 	.word	0x40023800
 8008df4:	40020000 	.word	0x40020000

08008df8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b08c      	sub	sp, #48	; 0x30
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8008e08:	2200      	movs	r2, #0
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	2036      	movs	r0, #54	; 0x36
 8008e0e:	f001 fbdd 	bl	800a5cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008e12:	2036      	movs	r0, #54	; 0x36
 8008e14:	f001 fbf6 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008e18:	4b1f      	ldr	r3, [pc, #124]	; (8008e98 <HAL_InitTick+0xa0>)
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1c:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <HAL_InitTick+0xa0>)
 8008e1e:	f043 0310 	orr.w	r3, r3, #16
 8008e22:	6413      	str	r3, [r2, #64]	; 0x40
 8008e24:	4b1c      	ldr	r3, [pc, #112]	; (8008e98 <HAL_InitTick+0xa0>)
 8008e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e28:	f003 0310 	and.w	r3, r3, #16
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008e30:	f107 0210 	add.w	r2, r7, #16
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f003 ff72 	bl	800cd24 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008e40:	f003 ff48 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 8008e44:	4603      	mov	r3, r0
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	4a13      	ldr	r2, [pc, #76]	; (8008e9c <HAL_InitTick+0xa4>)
 8008e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e52:	0c9b      	lsrs	r3, r3, #18
 8008e54:	3b01      	subs	r3, #1
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008e58:	4b11      	ldr	r3, [pc, #68]	; (8008ea0 <HAL_InitTick+0xa8>)
 8008e5a:	4a12      	ldr	r2, [pc, #72]	; (8008ea4 <HAL_InitTick+0xac>)
 8008e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008e5e:	4b10      	ldr	r3, [pc, #64]	; (8008ea0 <HAL_InitTick+0xa8>)
 8008e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008e64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008e66:	4a0e      	ldr	r2, [pc, #56]	; (8008ea0 <HAL_InitTick+0xa8>)
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008e6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <HAL_InitTick+0xa8>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e72:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_InitTick+0xa8>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008e78:	4809      	ldr	r0, [pc, #36]	; (8008ea0 <HAL_InitTick+0xa8>)
 8008e7a:	f005 f887 	bl	800df8c <HAL_TIM_Base_Init>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8008e84:	4806      	ldr	r0, [pc, #24]	; (8008ea0 <HAL_InitTick+0xa8>)
 8008e86:	f005 f8ad 	bl	800dfe4 <HAL_TIM_Base_Start_IT>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	e000      	b.n	8008e90 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3730      	adds	r7, #48	; 0x30
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	40023800 	.word	0x40023800
 8008e9c:	431bde83 	.word	0x431bde83
 8008ea0:	20031114 	.word	0x20031114
 8008ea4:	40001000 	.word	0x40001000

08008ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008eac:	e7fe      	b.n	8008eac <NMI_Handler+0x4>

08008eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008eb2:	e7fe      	b.n	8008eb2 <HardFault_Handler+0x4>

08008eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008eb8:	e7fe      	b.n	8008eb8 <MemManage_Handler+0x4>

08008eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ebe:	e7fe      	b.n	8008ebe <BusFault_Handler+0x4>

08008ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ec4:	e7fe      	b.n	8008ec4 <UsageFault_Handler+0x4>

08008ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008eca:	bf00      	nop
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 8008eda:	f000 fce5 	bl	80098a8 <HAL_GetTick>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <EXTI4_IRQHandler+0x50>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8008eec:	2010      	movs	r0, #16
 8008eee:	f002 f995 	bl	800b21c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>150)){
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <EXTI4_IRQHandler+0x54>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <EXTI4_IRQHandler+0x58>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	dd07      	ble.n	8008f10 <EXTI4_IRQHandler+0x3c>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	2b96      	cmp	r3, #150	; 0x96
 8008f04:	dd04      	ble.n	8008f10 <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <EXTI4_IRQHandler+0x58>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <EXTI4_IRQHandler+0x54>)
 8008f0e:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 8008f10:	f000 fcca 	bl	80098a8 <HAL_GetTick>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	4b02      	ldr	r3, [pc, #8]	; (8008f24 <EXTI4_IRQHandler+0x50>)
 8008f1a:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	2000335c 	.word	0x2000335c
 8008f28:	200000dc 	.word	0x200000dc
 8008f2c:	20000188 	.word	0x20000188

08008f30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8008f36:	4804      	ldr	r0, [pc, #16]	; (8008f48 <DMA1_Stream0_IRQHandler+0x18>)
 8008f38:	f001 fd12 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  int x=0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	607b      	str	r3, [r7, #4]
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20031058 	.word	0x20031058

08008f4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8008f50:	4802      	ldr	r0, [pc, #8]	; (8008f5c <DMA1_Stream2_IRQHandler+0x10>)
 8008f52:	f001 fd05 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8008f56:	bf00      	nop
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20028af0 	.word	0x20028af0

08008f60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8008f64:	4802      	ldr	r0, [pc, #8]	; (8008f70 <DMA1_Stream3_IRQHandler+0x10>)
 8008f66:	f001 fcfb 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8008f6a:	bf00      	nop
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	2002be6c 	.word	0x2002be6c

08008f74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008f78:	4805      	ldr	r0, [pc, #20]	; (8008f90 <ADC_IRQHandler+0x1c>)
 8008f7a:	f000 fd07 	bl	800998c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008f7e:	4805      	ldr	r0, [pc, #20]	; (8008f94 <ADC_IRQHandler+0x20>)
 8008f80:	f000 fd04 	bl	800998c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8008f84:	4804      	ldr	r0, [pc, #16]	; (8008f98 <ADC_IRQHandler+0x24>)
 8008f86:	f000 fd01 	bl	800998c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008f8a:	bf00      	nop
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	2002be24 	.word	0x2002be24
 8008f94:	20028d20 	.word	0x20028d20
 8008f98:	2002bed0 	.word	0x2002bed0

08008f9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 8008fa2:	f000 fc81 	bl	80098a8 <HAL_GetTick>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	60fb      	str	r3, [r7, #12]
	int currentDiff = currentTicks-timestamp;
 8008faa:	4b35      	ldr	r3, [pc, #212]	; (8009080 <EXTI9_5_IRQHandler+0xe4>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	60bb      	str	r3, [r7, #8]
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 8008fb4:	2120      	movs	r1, #32
 8008fb6:	4833      	ldr	r0, [pc, #204]	; (8009084 <EXTI9_5_IRQHandler+0xe8>)
 8008fb8:	f002 f8e4 	bl	800b184 <HAL_GPIO_ReadPin>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 8008fc0:	2140      	movs	r1, #64	; 0x40
 8008fc2:	4830      	ldr	r0, [pc, #192]	; (8009084 <EXTI9_5_IRQHandler+0xe8>)
 8008fc4:	f002 f8de 	bl	800b184 <HAL_GPIO_ReadPin>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 8008fcc:	2180      	movs	r1, #128	; 0x80
 8008fce:	482d      	ldr	r0, [pc, #180]	; (8009084 <EXTI9_5_IRQHandler+0xe8>)
 8008fd0:	f002 f8d8 	bl	800b184 <HAL_GPIO_ReadPin>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>150)){ //up button
 8008fd8:	4b2b      	ldr	r3, [pc, #172]	; (8009088 <EXTI9_5_IRQHandler+0xec>)
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00f      	beq.n	8009004 <EXTI9_5_IRQHandler+0x68>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b96      	cmp	r3, #150	; 0x96
 8008fe8:	dd0c      	ble.n	8009004 <EXTI9_5_IRQHandler+0x68>
		if(inputButtonSet > buttonPriority.up){
 8008fea:	4b28      	ldr	r3, [pc, #160]	; (800908c <EXTI9_5_IRQHandler+0xf0>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4b27      	ldr	r3, [pc, #156]	; (8009090 <EXTI9_5_IRQHandler+0xf4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	dd30      	ble.n	800905a <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.up;
 8008ff8:	4b25      	ldr	r3, [pc, #148]	; (8009090 <EXTI9_5_IRQHandler+0xf4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	4b23      	ldr	r3, [pc, #140]	; (800908c <EXTI9_5_IRQHandler+0xf0>)
 8009000:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 8009002:	e02a      	b.n	800905a <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>150)){ //sel button
 8009004:	4b20      	ldr	r3, [pc, #128]	; (8009088 <EXTI9_5_IRQHandler+0xec>)
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00f      	beq.n	8009030 <EXTI9_5_IRQHandler+0x94>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b96      	cmp	r3, #150	; 0x96
 8009014:	dd0c      	ble.n	8009030 <EXTI9_5_IRQHandler+0x94>
		if(inputButtonSet > buttonPriority.sel){
 8009016:	4b1d      	ldr	r3, [pc, #116]	; (800908c <EXTI9_5_IRQHandler+0xf0>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <EXTI9_5_IRQHandler+0xf4>)
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	429a      	cmp	r2, r3
 8009022:	dd1a      	ble.n	800905a <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.sel;
 8009024:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <EXTI9_5_IRQHandler+0xf4>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	b2da      	uxtb	r2, r3
 800902a:	4b18      	ldr	r3, [pc, #96]	; (800908c <EXTI9_5_IRQHandler+0xf0>)
 800902c:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 800902e:	e014      	b.n	800905a <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>150)){ //down button
 8009030:	4b15      	ldr	r3, [pc, #84]	; (8009088 <EXTI9_5_IRQHandler+0xec>)
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00e      	beq.n	800905a <EXTI9_5_IRQHandler+0xbe>
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b96      	cmp	r3, #150	; 0x96
 8009040:	dd0b      	ble.n	800905a <EXTI9_5_IRQHandler+0xbe>
		if(inputButtonSet > buttonPriority.down){
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <EXTI9_5_IRQHandler+0xf0>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	4b11      	ldr	r3, [pc, #68]	; (8009090 <EXTI9_5_IRQHandler+0xf4>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	429a      	cmp	r2, r3
 800904e:	dd04      	ble.n	800905a <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.down;
 8009050:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <EXTI9_5_IRQHandler+0xf4>)
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	b2da      	uxtb	r2, r3
 8009056:	4b0d      	ldr	r3, [pc, #52]	; (800908c <EXTI9_5_IRQHandler+0xf0>)
 8009058:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800905a:	2020      	movs	r0, #32
 800905c:	f002 f8de 	bl	800b21c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8009060:	2040      	movs	r0, #64	; 0x40
 8009062:	f002 f8db 	bl	800b21c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009066:	2080      	movs	r0, #128	; 0x80
 8009068:	f002 f8d8 	bl	800b21c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 800906c:	f000 fc1c 	bl	80098a8 <HAL_GetTick>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <EXTI9_5_IRQHandler+0xe4>)
 8009076:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	2000335c 	.word	0x2000335c
 8009084:	40022800 	.word	0x40022800
 8009088:	40013c00 	.word	0x40013c00
 800908c:	200000dc 	.word	0x200000dc
 8009090:	20000188 	.word	0x20000188

08009094 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009098:	4802      	ldr	r0, [pc, #8]	; (80090a4 <TIM6_DAC_IRQHandler+0x10>)
 800909a:	f005 f802 	bl	800e0a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800909e:	bf00      	nop
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20031114 	.word	0x20031114

080090a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <DMA2_Stream0_IRQHandler+0x1c>)
 80090ae:	f001 fc57 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 80090b2:	4805      	ldr	r0, [pc, #20]	; (80090c8 <DMA2_Stream0_IRQHandler+0x20>)
 80090b4:	f000 fe9a 	bl	8009dec <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <DMA2_Stream0_IRQHandler+0x24>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80090be:	bf00      	nop
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	2002bfe4 	.word	0x2002bfe4
 80090c8:	2002be24 	.word	0x2002be24
 80090cc:	20029264 	.word	0x20029264

080090d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80090d4:	4805      	ldr	r0, [pc, #20]	; (80090ec <DMA2_Stream1_IRQHandler+0x1c>)
 80090d6:	f001 fc43 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 80090da:	4805      	ldr	r0, [pc, #20]	; (80090f0 <DMA2_Stream1_IRQHandler+0x20>)
 80090dc:	f000 fe86 	bl	8009dec <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 80090e0:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <DMA2_Stream1_IRQHandler+0x24>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80090e6:	bf00      	nop
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20029204 	.word	0x20029204
 80090f0:	2002bed0 	.word	0x2002bed0
 80090f4:	20029264 	.word	0x20029264

080090f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <DMA2_Stream2_IRQHandler+0x1c>)
 80090fe:	f001 fc2f 	bl	800a960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 8009102:	4805      	ldr	r0, [pc, #20]	; (8009118 <DMA2_Stream2_IRQHandler+0x20>)
 8009104:	f000 fe72 	bl	8009dec <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8009108:	4b04      	ldr	r3, [pc, #16]	; (800911c <DMA2_Stream2_IRQHandler+0x24>)
 800910a:	2201      	movs	r2, #1
 800910c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800910e:	bf00      	nop
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20030ff8 	.word	0x20030ff8
 8009118:	20028d20 	.word	0x20028d20
 800911c:	20029264 	.word	0x20029264

08009120 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8009124:	4802      	ldr	r0, [pc, #8]	; (8009130 <SPI4_IRQHandler+0x10>)
 8009126:	f004 fcf5 	bl	800db14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800912a:	bf00      	nop
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20028a8c 	.word	0x20028a8c

08009134 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e00a      	b.n	800915c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009146:	f3af 8000 	nop.w
 800914a:	4601      	mov	r1, r0
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	60ba      	str	r2, [r7, #8]
 8009152:	b2ca      	uxtb	r2, r1
 8009154:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	3301      	adds	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	dbf0      	blt.n	8009146 <_read+0x12>
	}

return len;
 8009164:	687b      	ldr	r3, [r7, #4]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b086      	sub	sp, #24
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800917a:	2300      	movs	r3, #0
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e009      	b.n	8009194 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	60ba      	str	r2, [r7, #8]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	4618      	mov	r0, r3
 800918a:	f7f9 ffe3 	bl	8003154 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	3301      	adds	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	dbf1      	blt.n	8009180 <_write+0x12>
	}
	return len;
 800919c:	687b      	ldr	r3, [r7, #4]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <_close>:

int _close(int file)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
	return -1;
 80091ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091ce:	605a      	str	r2, [r3, #4]
	return 0;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <_isatty>:

int _isatty(int file)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
	return 1;
 80091e6:	2301      	movs	r3, #1
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
	return 0;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
	...

08009210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009218:	4a14      	ldr	r2, [pc, #80]	; (800926c <_sbrk+0x5c>)
 800921a:	4b15      	ldr	r3, [pc, #84]	; (8009270 <_sbrk+0x60>)
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009224:	4b13      	ldr	r3, [pc, #76]	; (8009274 <_sbrk+0x64>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800922c:	4b11      	ldr	r3, [pc, #68]	; (8009274 <_sbrk+0x64>)
 800922e:	4a12      	ldr	r2, [pc, #72]	; (8009278 <_sbrk+0x68>)
 8009230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <_sbrk+0x64>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	429a      	cmp	r2, r3
 800923e:	d207      	bcs.n	8009250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009240:	f00a f826 	bl	8013290 <__errno>
 8009244:	4602      	mov	r2, r0
 8009246:	230c      	movs	r3, #12
 8009248:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800924a:	f04f 33ff 	mov.w	r3, #4294967295
 800924e:	e009      	b.n	8009264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <_sbrk+0x64>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009256:	4b07      	ldr	r3, [pc, #28]	; (8009274 <_sbrk+0x64>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4413      	add	r3, r2
 800925e:	4a05      	ldr	r2, [pc, #20]	; (8009274 <_sbrk+0x64>)
 8009260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009262:	68fb      	ldr	r3, [r7, #12]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20080000 	.word	0x20080000
 8009270:	00000400 	.word	0x00000400
 8009274:	20003360 	.word	0x20003360
 8009278:	200311a0 	.word	0x200311a0

0800927c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009280:	4b08      	ldr	r3, [pc, #32]	; (80092a4 <SystemInit+0x28>)
 8009282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009286:	4a07      	ldr	r2, [pc, #28]	; (80092a4 <SystemInit+0x28>)
 8009288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800928c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009290:	4b04      	ldr	r3, [pc, #16]	; (80092a4 <SystemInit+0x28>)
 8009292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009296:	609a      	str	r2, [r3, #8]
#endif
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	e000ed00 	.word	0xe000ed00

080092a8 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 80092ac:	220c      	movs	r2, #12
 80092ae:	2100      	movs	r1, #0
 80092b0:	4814      	ldr	r0, [pc, #80]	; (8009304 <zionEEPROMPresence+0x5c>)
 80092b2:	f00a f822 	bl	80132fa <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 80092b6:	2364      	movs	r3, #100	; 0x64
 80092b8:	2202      	movs	r2, #2
 80092ba:	21a6      	movs	r1, #166	; 0xa6
 80092bc:	4812      	ldr	r0, [pc, #72]	; (8009308 <zionEEPROMPresence+0x60>)
 80092be:	f002 fb65 	bl	800b98c <HAL_I2C_IsDeviceReady>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d102      	bne.n	80092ce <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 80092c8:	4b0e      	ldr	r3, [pc, #56]	; (8009304 <zionEEPROMPresence+0x5c>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 80092ce:	2364      	movs	r3, #100	; 0x64
 80092d0:	2202      	movs	r2, #2
 80092d2:	21a8      	movs	r1, #168	; 0xa8
 80092d4:	480c      	ldr	r0, [pc, #48]	; (8009308 <zionEEPROMPresence+0x60>)
 80092d6:	f002 fb59 	bl	800b98c <HAL_I2C_IsDeviceReady>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <zionEEPROMPresence+0x5c>)
 80092e2:	2201      	movs	r2, #1
 80092e4:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 80092e6:	2364      	movs	r3, #100	; 0x64
 80092e8:	2202      	movs	r2, #2
 80092ea:	21aa      	movs	r1, #170	; 0xaa
 80092ec:	4806      	ldr	r0, [pc, #24]	; (8009308 <zionEEPROMPresence+0x60>)
 80092ee:	f002 fb4d 	bl	800b98c <HAL_I2C_IsDeviceReady>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 80092f8:	4b02      	ldr	r3, [pc, #8]	; (8009304 <zionEEPROMPresence+0x5c>)
 80092fa:	2201      	movs	r2, #1
 80092fc:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 80092fe:	4b01      	ldr	r3, [pc, #4]	; (8009304 <zionEEPROMPresence+0x5c>)
}
 8009300:	4618      	mov	r0, r3
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20003364 	.word	0x20003364
 8009308:	20028b9c 	.word	0x20028b9c

0800930c <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af04      	add	r7, sp, #16
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	607b      	str	r3, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	72fb      	strb	r3, [r7, #11]
 800931a:	4613      	mov	r3, r2
 800931c:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 800931e:	7afb      	ldrb	r3, [r7, #11]
 8009320:	b299      	uxth	r1, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	b29b      	uxth	r3, r3
 8009326:	8b3a      	ldrh	r2, [r7, #24]
 8009328:	8938      	ldrh	r0, [r7, #8]
 800932a:	9202      	str	r2, [sp, #8]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	2302      	movs	r3, #2
 8009334:	4602      	mov	r2, r0
 8009336:	4803      	ldr	r0, [pc, #12]	; (8009344 <readDataFromEEPROM+0x38>)
 8009338:	f002 fa0e 	bl	800b758 <HAL_I2C_Mem_Read>
}
 800933c:	bf00      	nop
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20028b9c 	.word	0x20028b9c

08009348 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 8009348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800934c:	b0a6      	sub	sp, #152	; 0x98
 800934e:	af02      	add	r7, sp, #8
 8009350:	4603      	mov	r3, r0
 8009352:	71fb      	strb	r3, [r7, #7]
 8009354:	466b      	mov	r3, sp
 8009356:	4698      	mov	r8, r3
	int foundTheEnd = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 8009364:	2364      	movs	r3, #100	; 0x64
 8009366:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 8009368:	2306      	movs	r3, #6
 800936a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 800936e:	2300      	movs	r3, #0
 8009370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 8009374:	2300      	movs	r3, #0
 8009376:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 8009378:	2300      	movs	r3, #0
 800937a:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 8009380:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8009382:	1e6b      	subs	r3, r5, #1
 8009384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009386:	462b      	mov	r3, r5
 8009388:	4619      	mov	r1, r3
 800938a:	f04f 0200 	mov.w	r2, #0
 800938e:	f04f 0300 	mov.w	r3, #0
 8009392:	f04f 0400 	mov.w	r4, #0
 8009396:	00d4      	lsls	r4, r2, #3
 8009398:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800939c:	00cb      	lsls	r3, r1, #3
 800939e:	462b      	mov	r3, r5
 80093a0:	4619      	mov	r1, r3
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	f04f 0300 	mov.w	r3, #0
 80093aa:	f04f 0400 	mov.w	r4, #0
 80093ae:	00d4      	lsls	r4, r2, #3
 80093b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80093b4:	00cb      	lsls	r3, r1, #3
 80093b6:	462b      	mov	r3, r5
 80093b8:	3307      	adds	r3, #7
 80093ba:	08db      	lsrs	r3, r3, #3
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	ebad 0d03 	sub.w	sp, sp, r3
 80093c2:	ab02      	add	r3, sp, #8
 80093c4:	3300      	adds	r3, #0
 80093c6:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 80093c8:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 80093ca:	1e73      	subs	r3, r6, #1
 80093cc:	667b      	str	r3, [r7, #100]	; 0x64
 80093ce:	4633      	mov	r3, r6
 80093d0:	4619      	mov	r1, r3
 80093d2:	f04f 0200 	mov.w	r2, #0
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	f04f 0400 	mov.w	r4, #0
 80093de:	00d4      	lsls	r4, r2, #3
 80093e0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80093e4:	00cb      	lsls	r3, r1, #3
 80093e6:	4633      	mov	r3, r6
 80093e8:	4619      	mov	r1, r3
 80093ea:	f04f 0200 	mov.w	r2, #0
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	f04f 0400 	mov.w	r4, #0
 80093f6:	00d4      	lsls	r4, r2, #3
 80093f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80093fc:	00cb      	lsls	r3, r1, #3
 80093fe:	4633      	mov	r3, r6
 8009400:	3307      	adds	r3, #7
 8009402:	08db      	lsrs	r3, r3, #3
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	ebad 0d03 	sub.w	sp, sp, r3
 800940a:	ab02      	add	r3, sp, #8
 800940c:	3300      	adds	r3, #0
 800940e:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	2250      	movs	r2, #80	; 0x50
 8009416:	2100      	movs	r1, #0
 8009418:	4618      	mov	r0, r3
 800941a:	f009 ff6e 	bl	80132fa <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 800941e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009420:	4632      	mov	r2, r6
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f009 ff68 	bl	80132fa <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 800942a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800942c:	462a      	mov	r2, r5
 800942e:	2100      	movs	r1, #0
 8009430:	4618      	mov	r0, r3
 8009432:	f009 ff62 	bl	80132fa <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 8009436:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009438:	79f9      	ldrb	r1, [r7, #7]
 800943a:	2364      	movs	r3, #100	; 0x64
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	462b      	mov	r3, r5
 8009440:	2200      	movs	r2, #0
 8009442:	f7ff ff63 	bl	800930c <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 8009446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2bff      	cmp	r3, #255	; 0xff
 800944c:	f040 811b 	bne.w	8009686 <parseZionEEPROM+0x33e>
		foundTheEnd=1;
 8009450:	2301      	movs	r3, #1
 8009452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 8009456:	f06f 0301 	mvn.w	r3, #1
 800945a:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 800945c:	e113      	b.n	8009686 <parseZionEEPROM+0x33e>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 800945e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009460:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009462:	fb93 f2f2 	sdiv	r2, r3, r2
 8009466:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009468:	fb01 f202 	mul.w	r2, r1, r2
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	2b00      	cmp	r3, #0
 8009470:	bf0c      	ite	eq
 8009472:	2301      	moveq	r3, #1
 8009474:	2300      	movne	r3, #0
 8009476:	b2da      	uxtb	r2, r3
 8009478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800947a:	2b00      	cmp	r3, #0
 800947c:	bfcc      	ite	gt
 800947e:	2301      	movgt	r3, #1
 8009480:	2300      	movle	r3, #0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	4013      	ands	r3, r2
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d025      	beq.n	80094d8 <parseZionEEPROM+0x190>
			for(x=0;x<size;x++){
 800948c:	2300      	movs	r3, #0
 800948e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009492:	e00f      	b.n	80094b4 <parseZionEEPROM+0x16c>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 8009494:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800949a:	4413      	add	r3, r2
 800949c:	7819      	ldrb	r1, [r3, #0]
 800949e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094a4:	4413      	add	r3, r2
 80094a6:	460a      	mov	r2, r1
 80094a8:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 80094aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094ae:	3301      	adds	r3, #1
 80094b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80094b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80094b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094ba:	429a      	cmp	r2, r3
 80094bc:	dbea      	blt.n	8009494 <parseZionEEPROM+0x14c>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 80094be:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80094c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	79f9      	ldrb	r1, [r7, #7]
 80094c6:	2364      	movs	r3, #100	; 0x64
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	462b      	mov	r3, r5
 80094cc:	f7ff ff1e 	bl	800930c <readDataFromEEPROM>
			indexSubtractor+=size;
 80094d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094d4:	4413      	add	r3, r2
 80094d6:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 80094d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2bff      	cmp	r3, #255	; 0xff
 80094de:	d116      	bne.n	800950e <parseZionEEPROM+0x1c6>
 80094e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094e2:	785b      	ldrb	r3, [r3, #1]
 80094e4:	2bff      	cmp	r3, #255	; 0xff
 80094e6:	d112      	bne.n	800950e <parseZionEEPROM+0x1c6>
 80094e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ea:	789b      	ldrb	r3, [r3, #2]
 80094ec:	2bff      	cmp	r3, #255	; 0xff
 80094ee:	d10e      	bne.n	800950e <parseZionEEPROM+0x1c6>
 80094f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094f2:	78db      	ldrb	r3, [r3, #3]
 80094f4:	2bff      	cmp	r3, #255	; 0xff
 80094f6:	d10a      	bne.n	800950e <parseZionEEPROM+0x1c6>
 80094f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094fa:	795b      	ldrb	r3, [r3, #5]
 80094fc:	2bff      	cmp	r3, #255	; 0xff
 80094fe:	d106      	bne.n	800950e <parseZionEEPROM+0x1c6>
			previousByteOfHeader[0]=-1;
 8009500:	f04f 33ff 	mov.w	r3, #4294967295
 8009504:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8009506:	2301      	movs	r3, #1
 8009508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800950c:	e0b8      	b.n	8009680 <parseZionEEPROM+0x338>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 800950e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009516:	5cd3      	ldrb	r3, [r2, r3]
 8009518:	2b5a      	cmp	r3, #90	; 0x5a
 800951a:	d023      	beq.n	8009564 <parseZionEEPROM+0x21c>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009520:	fb93 f2f2 	sdiv	r2, r3, r2
 8009524:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009526:	fb01 f202 	mul.w	r2, r1, r2
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800952e:	5cd3      	ldrb	r3, [r2, r3]
 8009530:	2b5a      	cmp	r3, #90	; 0x5a
 8009532:	d104      	bne.n	800953e <parseZionEEPROM+0x1f6>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	3314      	adds	r3, #20
 8009538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800953a:	429a      	cmp	r2, r3
 800953c:	db12      	blt.n	8009564 <parseZionEEPROM+0x21c>
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009542:	fb93 f2f2 	sdiv	r2, r3, r2
 8009546:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009548:	fb01 f202 	mul.w	r2, r1, r2
 800954c:	1a9b      	subs	r3, r3, r2
 800954e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009550:	5cd3      	ldrb	r3, [r2, r3]
 8009552:	2b5a      	cmp	r3, #90	; 0x5a
 8009554:	f040 8094 	bne.w	8009680 <parseZionEEPROM+0x338>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	3314      	adds	r3, #20
 800955c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800955e:	429a      	cmp	r2, r3
 8009560:	f280 808e 	bge.w	8009680 <parseZionEEPROM+0x338>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800956a:	4313      	orrs	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	bf0c      	ite	eq
 8009570:	2301      	moveq	r3, #1
 8009572:	2300      	movne	r3, #0
 8009574:	b2da      	uxtb	r2, r3
 8009576:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800957a:	1acb      	subs	r3, r1, r3
 800957c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800957e:	5ccb      	ldrb	r3, [r1, r3]
 8009580:	2b5a      	cmp	r3, #90	; 0x5a
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	4013      	ands	r3, r2
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d008      	beq.n	80095a4 <parseZionEEPROM+0x25c>
				previousByteOfHeader[0] = index;
 8009592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009594:	60bb      	str	r3, [r7, #8]
				if(index==0){
 8009596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009598:	2b00      	cmp	r3, #0
 800959a:	d171      	bne.n	8009680 <parseZionEEPROM+0x338>
					zeroWas5A=1;
 800959c:	2301      	movs	r3, #1
 800959e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095a2:	e06d      	b.n	8009680 <parseZionEEPROM+0x338>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 80095a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d015      	beq.n	80095d6 <parseZionEEPROM+0x28e>
				previousByteOfHeader[counter]=index;
 80095aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80095b4:	4413      	add	r3, r2
 80095b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095b8:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 80095bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095c0:	2b13      	cmp	r3, #19
 80095c2:	d102      	bne.n	80095ca <parseZionEEPROM+0x282>
					foundTheEnd=1;
 80095c4:	2301      	movs	r3, #1
 80095c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 80095ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095ce:	3301      	adds	r3, #1
 80095d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095d4:	e054      	b.n	8009680 <parseZionEEPROM+0x338>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 80095d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095de:	5cd3      	ldrb	r3, [r2, r3]
 80095e0:	2b45      	cmp	r3, #69	; 0x45
 80095e2:	d102      	bne.n	80095ea <parseZionEEPROM+0x2a2>
					previousByteOfHeader[1] = index;
 80095e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	e04a      	b.n	8009680 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 80095ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095f2:	5cd3      	ldrb	r3, [r2, r3]
 80095f4:	2b46      	cmp	r3, #70	; 0x46
 80095f6:	d107      	bne.n	8009608 <parseZionEEPROM+0x2c0>
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095fc:	3b01      	subs	r3, #1
 80095fe:	429a      	cmp	r2, r3
 8009600:	d102      	bne.n	8009608 <parseZionEEPROM+0x2c0>
					previousByteOfHeader[2] = index;
 8009602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	e03b      	b.n	8009680 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8009608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800960a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009610:	5cd3      	ldrb	r3, [r2, r3]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d107      	bne.n	8009626 <parseZionEEPROM+0x2de>
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800961a:	3b01      	subs	r3, #1
 800961c:	429a      	cmp	r2, r3
 800961e:	d102      	bne.n	8009626 <parseZionEEPROM+0x2de>
					previousByteOfHeader[3] = index;
 8009620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	e02c      	b.n	8009680 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8009626:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800962e:	5cd3      	ldrb	r3, [r2, r3]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d107      	bne.n	8009644 <parseZionEEPROM+0x2fc>
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009638:	3b01      	subs	r3, #1
 800963a:	429a      	cmp	r2, r3
 800963c:	d102      	bne.n	8009644 <parseZionEEPROM+0x2fc>
					previousByteOfHeader[4] = index;
 800963e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	e01d      	b.n	8009680 <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 8009644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800964c:	5cd3      	ldrb	r3, [r2, r3]
 800964e:	2b04      	cmp	r3, #4
 8009650:	d109      	bne.n	8009666 <parseZionEEPROM+0x31e>
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009656:	3b01      	subs	r3, #1
 8009658:	429a      	cmp	r2, r3
 800965a:	d104      	bne.n	8009666 <parseZionEEPROM+0x31e>
					previousByteOfHeader[5] = index;
 800965c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800965e:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 8009660:	2301      	movs	r3, #1
 8009662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009664:	e00c      	b.n	8009680 <parseZionEEPROM+0x338>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 8009666:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <parseZionEEPROM+0x338>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 800966c:	f107 0308 	add.w	r3, r7, #8
 8009670:	2250      	movs	r2, #80	; 0x50
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f009 fe40 	bl	80132fa <memset>
					zeroWas5A=0;
 800967a:	2300      	movs	r3, #0
 800967c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 8009680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009682:	3301      	adds	r3, #1
 8009684:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 8009686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800968a:	2b00      	cmp	r3, #0
 800968c:	f43f aee7 	beq.w	800945e <parseZionEEPROM+0x116>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f2c0 8085 	blt.w	80097a2 <parseZionEEPROM+0x45a>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 8009698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800969c:	fb93 f2f2 	sdiv	r2, r3, r2
 80096a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80096a2:	fb01 f202 	mul.w	r2, r1, r2
 80096a6:	1a9b      	subs	r3, r3, r2
 80096a8:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 80096aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096ac:	3b05      	subs	r3, #5
 80096ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096b0:	429a      	cmp	r2, r3
 80096b2:	dd50      	ble.n	8009756 <parseZionEEPROM+0x40e>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 80096b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096b6:	1e5a      	subs	r2, r3, #1
 80096b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 80096be:	2300      	movs	r3, #0
 80096c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80096c4:	e01c      	b.n	8009700 <parseZionEEPROM+0x3b8>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 80096c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ca:	3310      	adds	r3, #16
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80096d2:	4413      	add	r3, r2
 80096d4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80096d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096da:	fb93 f2f2 	sdiv	r2, r3, r2
 80096de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80096e0:	fb01 f202 	mul.w	r2, r1, r2
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096e8:	5cd3      	ldrb	r3, [r2, r3]
 80096ea:	4619      	mov	r1, r3
 80096ec:	4a48      	ldr	r2, [pc, #288]	; (8009810 <parseZionEEPROM+0x4c8>)
 80096ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 80096f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096fa:	3301      	adds	r3, #1
 80096fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009700:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009706:	429a      	cmp	r2, r3
 8009708:	dbdd      	blt.n	80096c6 <parseZionEEPROM+0x37e>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 800970a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800970c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009710:	e01c      	b.n	800974c <parseZionEEPROM+0x404>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 8009712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009716:	3310      	adds	r3, #16
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800971e:	4413      	add	r3, r2
 8009720:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009724:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009726:	fb93 f2f2 	sdiv	r2, r3, r2
 800972a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800972c:	fb01 f202 	mul.w	r2, r1, r2
 8009730:	1a9b      	subs	r3, r3, r2
 8009732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009734:	5cd3      	ldrb	r3, [r2, r3]
 8009736:	4619      	mov	r1, r3
 8009738:	4a35      	ldr	r2, [pc, #212]	; (8009810 <parseZionEEPROM+0x4c8>)
 800973a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800973e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 8009742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009746:	3301      	adds	r3, #1
 8009748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800974c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009750:	2b03      	cmp	r3, #3
 8009752:	ddde      	ble.n	8009712 <parseZionEEPROM+0x3ca>
 8009754:	e052      	b.n	80097fc <parseZionEEPROM+0x4b4>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 8009756:	2300      	movs	r3, #0
 8009758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800975c:	e01c      	b.n	8009798 <parseZionEEPROM+0x450>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 800975e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009762:	3310      	adds	r3, #16
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800976a:	4413      	add	r3, r2
 800976c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009770:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009772:	fb93 f2f2 	sdiv	r2, r3, r2
 8009776:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009778:	fb01 f202 	mul.w	r2, r1, r2
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009780:	5cd3      	ldrb	r3, [r2, r3]
 8009782:	4619      	mov	r1, r3
 8009784:	4a22      	ldr	r2, [pc, #136]	; (8009810 <parseZionEEPROM+0x4c8>)
 8009786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800978a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 800978e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009792:	3301      	adds	r3, #1
 8009794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979c:	2b03      	cmp	r3, #3
 800979e:	ddde      	ble.n	800975e <parseZionEEPROM+0x416>
 80097a0:	e02c      	b.n	80097fc <parseZionEEPROM+0x4b4>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a8:	d114      	bne.n	80097d4 <parseZionEEPROM+0x48c>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 80097aa:	2300      	movs	r3, #0
 80097ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097b0:	e00b      	b.n	80097ca <parseZionEEPROM+0x482>
				deviceHeaderBytes[x] = -2;
 80097b2:	4a17      	ldr	r2, [pc, #92]	; (8009810 <parseZionEEPROM+0x4c8>)
 80097b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097b8:	f06f 0101 	mvn.w	r1, #1
 80097bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 80097c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097c4:	3301      	adds	r3, #1
 80097c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	ddef      	ble.n	80097b2 <parseZionEEPROM+0x46a>
 80097d2:	e013      	b.n	80097fc <parseZionEEPROM+0x4b4>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 80097d4:	2300      	movs	r3, #0
 80097d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097da:	e00b      	b.n	80097f4 <parseZionEEPROM+0x4ac>
				deviceHeaderBytes[x] = -1;
 80097dc:	4a0c      	ldr	r2, [pc, #48]	; (8009810 <parseZionEEPROM+0x4c8>)
 80097de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097e2:	f04f 31ff 	mov.w	r1, #4294967295
 80097e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 80097ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097ee:	3301      	adds	r3, #1
 80097f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	ddef      	ble.n	80097dc <parseZionEEPROM+0x494>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4a04      	ldr	r2, [pc, #16]	; (8009810 <parseZionEEPROM+0x4c8>)
 8009800:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 8009802:	4b03      	ldr	r3, [pc, #12]	; (8009810 <parseZionEEPROM+0x4c8>)
 8009804:	46c5      	mov	sp, r8
}
 8009806:	4618      	mov	r0, r3
 8009808:	3790      	adds	r7, #144	; 0x90
 800980a:	46bd      	mov	sp, r7
 800980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009810:	20003370 	.word	0x20003370

08009814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800984c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800981a:	e003      	b.n	8009824 <LoopCopyDataInit>

0800981c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800981c:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800981e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009822:	3104      	adds	r1, #4

08009824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009824:	480b      	ldr	r0, [pc, #44]	; (8009854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800982a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800982c:	d3f6      	bcc.n	800981c <CopyDataInit>
  ldr  r2, =_sbss
 800982e:	4a0b      	ldr	r2, [pc, #44]	; (800985c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009830:	e002      	b.n	8009838 <LoopFillZerobss>

08009832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009834:	f842 3b04 	str.w	r3, [r2], #4

08009838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009838:	4b09      	ldr	r3, [pc, #36]	; (8009860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800983a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800983c:	d3f9      	bcc.n	8009832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800983e:	f7ff fd1d 	bl	800927c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009842:	f009 fd2b 	bl	801329c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009846:	f7f8 facb 	bl	8001de0 <main>
  bx  lr    
 800984a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800984c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8009850:	08018ac8 	.word	0x08018ac8
  ldr  r0, =_sdata
 8009854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009858:	20000378 	.word	0x20000378
  ldr  r2, =_sbss
 800985c:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 8009860:	2003119c 	.word	0x2003119c

08009864 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009864:	e7fe      	b.n	8009864 <CAN1_RX0_IRQHandler>

08009866 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800986a:	2003      	movs	r0, #3
 800986c:	f000 fea3 	bl	800a5b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009870:	2000      	movs	r0, #0
 8009872:	f7ff fac1 	bl	8008df8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009876:	f7fe fcbb 	bl	80081f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009884:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <HAL_IncTick+0x20>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <HAL_IncTick+0x24>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4413      	add	r3, r2
 8009890:	4a04      	ldr	r2, [pc, #16]	; (80098a4 <HAL_IncTick+0x24>)
 8009892:	6013      	str	r3, [r2, #0]
}
 8009894:	bf00      	nop
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	200001a0 	.word	0x200001a0
 80098a4:	20031154 	.word	0x20031154

080098a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
  return uwTick;
 80098ac:	4b03      	ldr	r3, [pc, #12]	; (80098bc <HAL_GetTick+0x14>)
 80098ae:	681b      	ldr	r3, [r3, #0]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20031154 	.word	0x20031154

080098c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80098c8:	f7ff ffee 	bl	80098a8 <HAL_GetTick>
 80098cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d8:	d005      	beq.n	80098e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80098da:	4b09      	ldr	r3, [pc, #36]	; (8009900 <HAL_Delay+0x40>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4413      	add	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80098e6:	bf00      	nop
 80098e8:	f7ff ffde 	bl	80098a8 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d8f7      	bhi.n	80098e8 <HAL_Delay+0x28>
  {
  }
}
 80098f8:	bf00      	nop
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	200001a0 	.word	0x200001a0

08009904 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e031      	b.n	800997e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	2b00      	cmp	r3, #0
 8009920:	d109      	bne.n	8009936 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7fe fc8c 	bl	8008240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993a:	f003 0310 	and.w	r3, r3, #16
 800993e:	2b00      	cmp	r3, #0
 8009940:	d116      	bne.n	8009970 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009946:	4b10      	ldr	r3, [pc, #64]	; (8009988 <HAL_ADC_Init+0x84>)
 8009948:	4013      	ands	r3, r2
 800994a:	f043 0202 	orr.w	r2, r3, #2
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fbfc 	bl	800a150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009962:	f023 0303 	bic.w	r3, r3, #3
 8009966:	f043 0201 	orr.w	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	641a      	str	r2, [r3, #64]	; 0x40
 800996e:	e001      	b.n	8009974 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	ffffeefd 	.word	0xffffeefd

0800998c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	2300      	movs	r3, #0
 800999a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	bf0c      	ite	eq
 80099aa:	2301      	moveq	r3, #1
 80099ac:	2300      	movne	r3, #0
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f003 0320 	and.w	r3, r3, #32
 80099bc:	2b20      	cmp	r3, #32
 80099be:	bf0c      	ite	eq
 80099c0:	2301      	moveq	r3, #1
 80099c2:	2300      	movne	r3, #0
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d049      	beq.n	8009a62 <HAL_ADC_IRQHandler+0xd6>
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d046      	beq.n	8009a62 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d8:	f003 0310 	and.w	r3, r3, #16
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d105      	bne.n	80099ec <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d12b      	bne.n	8009a52 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d127      	bne.n	8009a52 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d006      	beq.n	8009a1e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d119      	bne.n	8009a52 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0220 	bic.w	r2, r2, #32
 8009a2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d105      	bne.n	8009a52 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	f043 0201 	orr.w	r2, r3, #1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7fa fc9a 	bl	800438c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f06f 0212 	mvn.w	r2, #18
 8009a60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	bf0c      	ite	eq
 8009a70:	2301      	moveq	r3, #1
 8009a72:	2300      	movne	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a82:	2b80      	cmp	r3, #128	; 0x80
 8009a84:	bf0c      	ite	eq
 8009a86:	2301      	moveq	r3, #1
 8009a88:	2300      	movne	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d057      	beq.n	8009b44 <HAL_ADC_IRQHandler+0x1b8>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d054      	beq.n	8009b44 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	f003 0310 	and.w	r3, r3, #16
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d139      	bne.n	8009b34 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d006      	beq.n	8009adc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d12b      	bne.n	8009b34 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d124      	bne.n	8009b34 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d11d      	bne.n	8009b34 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d119      	bne.n	8009b34 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2c:	f043 0201 	orr.w	r2, r3, #1
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fc87 	bl	800a448 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f06f 020c 	mvn.w	r2, #12
 8009b42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b64:	2b40      	cmp	r3, #64	; 0x40
 8009b66:	bf0c      	ite	eq
 8009b68:	2301      	moveq	r3, #1
 8009b6a:	2300      	movne	r3, #0
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d017      	beq.n	8009ba6 <HAL_ADC_IRQHandler+0x21a>
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d014      	beq.n	8009ba6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d10d      	bne.n	8009ba6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f97c 	bl	8009e94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f06f 0201 	mvn.w	r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0320 	and.w	r3, r3, #32
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	bf0c      	ite	eq
 8009bb4:	2301      	moveq	r3, #1
 8009bb6:	2300      	movne	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bca:	bf0c      	ite	eq
 8009bcc:	2301      	moveq	r3, #1
 8009bce:	2300      	movne	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d015      	beq.n	8009c06 <HAL_ADC_IRQHandler+0x27a>
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d012      	beq.n	8009c06 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be4:	f043 0202 	orr.w	r2, r3, #2
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f06f 0220 	mvn.w	r2, #32
 8009bf4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f956 	bl	8009ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f06f 0220 	mvn.w	r2, #32
 8009c04:	601a      	str	r2, [r3, #0]
  }
}
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <HAL_ADC_Start_DMA+0x1e>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e0c7      	b.n	8009dbe <HAL_ADC_Start_DMA+0x1ae>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d018      	beq.n	8009c76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0201 	orr.w	r2, r2, #1
 8009c52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009c54:	4b5c      	ldr	r3, [pc, #368]	; (8009dc8 <HAL_ADC_Start_DMA+0x1b8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a5c      	ldr	r2, [pc, #368]	; (8009dcc <HAL_ADC_Start_DMA+0x1bc>)
 8009c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5e:	0c9a      	lsrs	r2, r3, #18
 8009c60:	4613      	mov	r3, r2
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	4413      	add	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009c68:	e002      	b.n	8009c70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f9      	bne.n	8009c6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	f040 809b 	bne.w	8009dbc <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c8a:	4b51      	ldr	r3, [pc, #324]	; (8009dd0 <HAL_ADC_Start_DMA+0x1c0>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d007      	beq.n	8009cb4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009cac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc0:	d106      	bne.n	8009cd0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc6:	f023 0206 	bic.w	r2, r3, #6
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8009cce:	e002      	b.n	8009cd6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	4a3c      	ldr	r2, [pc, #240]	; (8009dd4 <HAL_ADC_Start_DMA+0x1c4>)
 8009ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	4a3b      	ldr	r2, [pc, #236]	; (8009dd8 <HAL_ADC_Start_DMA+0x1c8>)
 8009cec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	4a3a      	ldr	r2, [pc, #232]	; (8009ddc <HAL_ADC_Start_DMA+0x1cc>)
 8009cf4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009cfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009d0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	334c      	adds	r3, #76	; 0x4c
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f000 fd24 	bl	800a77c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009d34:	4b2a      	ldr	r3, [pc, #168]	; (8009de0 <HAL_ADC_Start_DMA+0x1d0>)
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f003 031f 	and.w	r3, r3, #31
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10f      	bne.n	8009d60 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d136      	bne.n	8009dbc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009d5c:	609a      	str	r2, [r3, #8]
 8009d5e:	e02d      	b.n	8009dbc <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a1f      	ldr	r2, [pc, #124]	; (8009de4 <HAL_ADC_Start_DMA+0x1d4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d10e      	bne.n	8009d88 <HAL_ADC_Start_DMA+0x178>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d107      	bne.n	8009d88 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689a      	ldr	r2, [r3, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009d86:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009d88:	4b15      	ldr	r3, [pc, #84]	; (8009de0 <HAL_ADC_Start_DMA+0x1d0>)
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f003 0310 	and.w	r3, r3, #16
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d113      	bne.n	8009dbc <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a13      	ldr	r2, [pc, #76]	; (8009de8 <HAL_ADC_Start_DMA+0x1d8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d10e      	bne.n	8009dbc <HAL_ADC_Start_DMA+0x1ac>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d107      	bne.n	8009dbc <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689a      	ldr	r2, [r3, #8]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009dba:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000198 	.word	0x20000198
 8009dcc:	431bde83 	.word	0x431bde83
 8009dd0:	fffff8fe 	.word	0xfffff8fe
 8009dd4:	0800a345 	.word	0x0800a345
 8009dd8:	0800a3ff 	.word	0x0800a3ff
 8009ddc:	0800a41b 	.word	0x0800a41b
 8009de0:	40012300 	.word	0x40012300
 8009de4:	40012000 	.word	0x40012000
 8009de8:	40012200 	.word	0x40012200

08009dec <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d101      	bne.n	8009e06 <HAL_ADC_Stop_DMA+0x1a>
 8009e02:	2302      	movs	r3, #2
 8009e04:	e036      	b.n	8009e74 <HAL_ADC_Stop_DMA+0x88>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0201 	bic.w	r2, r2, #1
 8009e1c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d11e      	bne.n	8009e6a <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689a      	ldr	r2, [r3, #8]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e3a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fcfb 	bl	800a83c <HAL_DMA_Abort>
 8009e46:	4603      	mov	r3, r0
 8009e48:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009e58:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e5e:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <HAL_ADC_Stop_DMA+0x90>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	f043 0201 	orr.w	r2, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	ffffeefe 	.word	0xffffeefe

08009e80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <HAL_ADC_ConfigChannel+0x1c>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e12a      	b.n	800a12e <HAL_ADC_ConfigChannel+0x272>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d93a      	bls.n	8009f5e <HAL_ADC_ConfigChannel+0xa2>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ef0:	d035      	beq.n	8009f5e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68d9      	ldr	r1, [r3, #12]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	4613      	mov	r3, r2
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	4413      	add	r3, r2
 8009f06:	3b1e      	subs	r3, #30
 8009f08:	2207      	movs	r2, #7
 8009f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0e:	43da      	mvns	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	400a      	ands	r2, r1
 8009f16:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a87      	ldr	r2, [pc, #540]	; (800a13c <HAL_ADC_ConfigChannel+0x280>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d10a      	bne.n	8009f38 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68d9      	ldr	r1, [r3, #12]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	061a      	lsls	r2, r3, #24
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009f36:	e035      	b.n	8009fa4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68d9      	ldr	r1, [r3, #12]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	4618      	mov	r0, r3
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	4403      	add	r3, r0
 8009f50:	3b1e      	subs	r3, #30
 8009f52:	409a      	lsls	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009f5c:	e022      	b.n	8009fa4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6919      	ldr	r1, [r3, #16]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	4413      	add	r3, r2
 8009f72:	2207      	movs	r2, #7
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	43da      	mvns	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	400a      	ands	r2, r1
 8009f80:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6919      	ldr	r1, [r3, #16]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	4618      	mov	r0, r3
 8009f94:	4603      	mov	r3, r0
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	4403      	add	r3, r0
 8009f9a:	409a      	lsls	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2b06      	cmp	r3, #6
 8009faa:	d824      	bhi.n	8009ff6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	3b05      	subs	r3, #5
 8009fbe:	221f      	movs	r2, #31
 8009fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc4:	43da      	mvns	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	400a      	ands	r2, r1
 8009fcc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4618      	mov	r0, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	3b05      	subs	r3, #5
 8009fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8009ff4:	e04c      	b.n	800a090 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	2b0c      	cmp	r3, #12
 8009ffc:	d824      	bhi.n	800a048 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	3b23      	subs	r3, #35	; 0x23
 800a010:	221f      	movs	r2, #31
 800a012:	fa02 f303 	lsl.w	r3, r2, r3
 800a016:	43da      	mvns	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	400a      	ands	r2, r1
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	4618      	mov	r0, r3
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	3b23      	subs	r3, #35	; 0x23
 800a03a:	fa00 f203 	lsl.w	r2, r0, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	631a      	str	r2, [r3, #48]	; 0x30
 800a046:	e023      	b.n	800a090 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	3b41      	subs	r3, #65	; 0x41
 800a05a:	221f      	movs	r2, #31
 800a05c:	fa02 f303 	lsl.w	r3, r2, r3
 800a060:	43da      	mvns	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	400a      	ands	r2, r1
 800a068:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	b29b      	uxth	r3, r3
 800a076:	4618      	mov	r0, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	3b41      	subs	r3, #65	; 0x41
 800a084:	fa00 f203 	lsl.w	r2, r0, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	430a      	orrs	r2, r1
 800a08e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a2a      	ldr	r2, [pc, #168]	; (800a140 <HAL_ADC_ConfigChannel+0x284>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d10a      	bne.n	800a0b0 <HAL_ADC_ConfigChannel+0x1f4>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0a2:	d105      	bne.n	800a0b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800a0a4:	4b27      	ldr	r3, [pc, #156]	; (800a144 <HAL_ADC_ConfigChannel+0x288>)
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	4a26      	ldr	r2, [pc, #152]	; (800a144 <HAL_ADC_ConfigChannel+0x288>)
 800a0aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a0ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a22      	ldr	r2, [pc, #136]	; (800a140 <HAL_ADC_ConfigChannel+0x284>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d109      	bne.n	800a0ce <HAL_ADC_ConfigChannel+0x212>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b12      	cmp	r3, #18
 800a0c0:	d105      	bne.n	800a0ce <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800a0c2:	4b20      	ldr	r3, [pc, #128]	; (800a144 <HAL_ADC_ConfigChannel+0x288>)
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <HAL_ADC_ConfigChannel+0x288>)
 800a0c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a0cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1b      	ldr	r2, [pc, #108]	; (800a140 <HAL_ADC_ConfigChannel+0x284>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d125      	bne.n	800a124 <HAL_ADC_ConfigChannel+0x268>
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a17      	ldr	r2, [pc, #92]	; (800a13c <HAL_ADC_ConfigChannel+0x280>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d003      	beq.n	800a0ea <HAL_ADC_ConfigChannel+0x22e>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b11      	cmp	r3, #17
 800a0e8:	d11c      	bne.n	800a124 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800a0ea:	4b16      	ldr	r3, [pc, #88]	; (800a144 <HAL_ADC_ConfigChannel+0x288>)
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	4a15      	ldr	r2, [pc, #84]	; (800a144 <HAL_ADC_ConfigChannel+0x288>)
 800a0f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a10      	ldr	r2, [pc, #64]	; (800a13c <HAL_ADC_ConfigChannel+0x280>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d111      	bne.n	800a124 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800a100:	4b11      	ldr	r3, [pc, #68]	; (800a148 <HAL_ADC_ConfigChannel+0x28c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a11      	ldr	r2, [pc, #68]	; (800a14c <HAL_ADC_ConfigChannel+0x290>)
 800a106:	fba2 2303 	umull	r2, r3, r2, r3
 800a10a:	0c9a      	lsrs	r2, r3, #18
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a116:	e002      	b.n	800a11e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1f9      	bne.n	800a118 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	10000012 	.word	0x10000012
 800a140:	40012000 	.word	0x40012000
 800a144:	40012300 	.word	0x40012300
 800a148:	20000198 	.word	0x20000198
 800a14c:	431bde83 	.word	0x431bde83

0800a150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800a158:	4b78      	ldr	r3, [pc, #480]	; (800a33c <ADC_Init+0x1ec>)
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	4a77      	ldr	r2, [pc, #476]	; (800a33c <ADC_Init+0x1ec>)
 800a15e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a162:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800a164:	4b75      	ldr	r3, [pc, #468]	; (800a33c <ADC_Init+0x1ec>)
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	4973      	ldr	r1, [pc, #460]	; (800a33c <ADC_Init+0x1ec>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6859      	ldr	r1, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	021a      	lsls	r2, r3, #8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a1a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6859      	ldr	r1, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6899      	ldr	r1, [r3, #8]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68da      	ldr	r2, [r3, #12]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1de:	4a58      	ldr	r2, [pc, #352]	; (800a340 <ADC_Init+0x1f0>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d022      	beq.n	800a22a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a1f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6899      	ldr	r1, [r3, #8]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6899      	ldr	r1, [r3, #8]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	430a      	orrs	r2, r1
 800a226:	609a      	str	r2, [r3, #8]
 800a228:	e00f      	b.n	800a24a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a248:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 0202 	bic.w	r2, r2, #2
 800a258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6899      	ldr	r1, [r3, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	005a      	lsls	r2, r3, #1
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01b      	beq.n	800a2b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a286:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a296:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6859      	ldr	r1, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	035a      	lsls	r2, r3, #13
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	605a      	str	r2, [r3, #4]
 800a2ae:	e007      	b.n	800a2c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a2ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	051a      	lsls	r2, r3, #20
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a2f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6899      	ldr	r1, [r3, #8]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a302:	025a      	lsls	r2, r3, #9
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a31a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6899      	ldr	r1, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	029a      	lsls	r2, r3, #10
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	609a      	str	r2, [r3, #8]
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	40012300 	.word	0x40012300
 800a340:	0f000001 	.word	0x0f000001

0800a344 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a350:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a356:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d13c      	bne.n	800a3d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a362:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d12b      	bne.n	800a3d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d127      	bne.n	800a3d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a386:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d006      	beq.n	800a39c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d119      	bne.n	800a3d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f022 0220 	bic.w	r2, r2, #32
 800a3aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d105      	bne.n	800a3d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	f043 0201 	orr.w	r2, r3, #1
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7f9 ffdb 	bl	800438c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a3d6:	e00e      	b.n	800a3f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	f003 0310 	and.w	r3, r3, #16
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7ff fd5f 	bl	8009ea8 <HAL_ADC_ErrorCallback>
}
 800a3ea:	e004      	b.n	800a3f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
}
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff fd37 	bl	8009e80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a412:	bf00      	nop
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a426:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2240      	movs	r2, #64	; 0x40
 800a42c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a432:	f043 0204 	orr.w	r2, r3, #4
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fd34 	bl	8009ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a440:	bf00      	nop
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f003 0307 	and.w	r3, r3, #7
 800a46a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a46c:	4b0b      	ldr	r3, [pc, #44]	; (800a49c <__NVIC_SetPriorityGrouping+0x40>)
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a478:	4013      	ands	r3, r2
 800a47a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a484:	4b06      	ldr	r3, [pc, #24]	; (800a4a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a486:	4313      	orrs	r3, r2
 800a488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a48a:	4a04      	ldr	r2, [pc, #16]	; (800a49c <__NVIC_SetPriorityGrouping+0x40>)
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	60d3      	str	r3, [r2, #12]
}
 800a490:	bf00      	nop
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	e000ed00 	.word	0xe000ed00
 800a4a0:	05fa0000 	.word	0x05fa0000

0800a4a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4a8:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <__NVIC_GetPriorityGrouping+0x18>)
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	0a1b      	lsrs	r3, r3, #8
 800a4ae:	f003 0307 	and.w	r3, r3, #7
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	e000ed00 	.word	0xe000ed00

0800a4c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	db0b      	blt.n	800a4ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	f003 021f 	and.w	r2, r3, #31
 800a4d8:	4907      	ldr	r1, [pc, #28]	; (800a4f8 <__NVIC_EnableIRQ+0x38>)
 800a4da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4de:	095b      	lsrs	r3, r3, #5
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	fa00 f202 	lsl.w	r2, r0, r2
 800a4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a4ea:	bf00      	nop
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	e000e100 	.word	0xe000e100

0800a4fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	6039      	str	r1, [r7, #0]
 800a506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	db0a      	blt.n	800a526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	b2da      	uxtb	r2, r3
 800a514:	490c      	ldr	r1, [pc, #48]	; (800a548 <__NVIC_SetPriority+0x4c>)
 800a516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a51a:	0112      	lsls	r2, r2, #4
 800a51c:	b2d2      	uxtb	r2, r2
 800a51e:	440b      	add	r3, r1
 800a520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a524:	e00a      	b.n	800a53c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	4908      	ldr	r1, [pc, #32]	; (800a54c <__NVIC_SetPriority+0x50>)
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	3b04      	subs	r3, #4
 800a534:	0112      	lsls	r2, r2, #4
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	440b      	add	r3, r1
 800a53a:	761a      	strb	r2, [r3, #24]
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	e000e100 	.word	0xe000e100
 800a54c:	e000ed00 	.word	0xe000ed00

0800a550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a550:	b480      	push	{r7}
 800a552:	b089      	sub	sp, #36	; 0x24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f1c3 0307 	rsb	r3, r3, #7
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	bf28      	it	cs
 800a56e:	2304      	movcs	r3, #4
 800a570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	3304      	adds	r3, #4
 800a576:	2b06      	cmp	r3, #6
 800a578:	d902      	bls.n	800a580 <NVIC_EncodePriority+0x30>
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	3b03      	subs	r3, #3
 800a57e:	e000      	b.n	800a582 <NVIC_EncodePriority+0x32>
 800a580:	2300      	movs	r3, #0
 800a582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a584:	f04f 32ff 	mov.w	r2, #4294967295
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	fa02 f303 	lsl.w	r3, r2, r3
 800a58e:	43da      	mvns	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	401a      	ands	r2, r3
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a598:	f04f 31ff 	mov.w	r1, #4294967295
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a2:	43d9      	mvns	r1, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5a8:	4313      	orrs	r3, r2
         );
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3724      	adds	r7, #36	; 0x24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff ff4c 	bl	800a45c <__NVIC_SetPriorityGrouping>
}
 800a5c4:	bf00      	nop
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5de:	f7ff ff61 	bl	800a4a4 <__NVIC_GetPriorityGrouping>
 800a5e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	68b9      	ldr	r1, [r7, #8]
 800a5e8:	6978      	ldr	r0, [r7, #20]
 800a5ea:	f7ff ffb1 	bl	800a550 <NVIC_EncodePriority>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff ff80 	bl	800a4fc <__NVIC_SetPriority>
}
 800a5fc:	bf00      	nop
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff ff54 	bl	800a4c0 <__NVIC_EnableIRQ>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a62c:	f7ff f93c 	bl	80098a8 <HAL_GetTick>
 800a630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e099      	b.n	800a770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2202      	movs	r2, #2
 800a648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 0201 	bic.w	r2, r2, #1
 800a65a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a65c:	e00f      	b.n	800a67e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a65e:	f7ff f923 	bl	80098a8 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	2b05      	cmp	r3, #5
 800a66a:	d908      	bls.n	800a67e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2220      	movs	r2, #32
 800a670:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2203      	movs	r2, #3
 800a676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e078      	b.n	800a770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e8      	bne.n	800a65e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	4b38      	ldr	r3, [pc, #224]	; (800a778 <HAL_DMA_Init+0x158>)
 800a698:	4013      	ands	r3, r2
 800a69a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	2b04      	cmp	r3, #4
 800a6d6:	d107      	bne.n	800a6e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	4313      	orrs	r3, r2
 800a708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d117      	bne.n	800a742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4313      	orrs	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00e      	beq.n	800a742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fb09 	bl	800ad3c <DMA_CheckFifoParam>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d008      	beq.n	800a742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2240      	movs	r2, #64	; 0x40
 800a734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a73e:	2301      	movs	r3, #1
 800a740:	e016      	b.n	800a770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fac0 	bl	800acd0 <DMA_CalcBaseAndBitshift>
 800a750:	4603      	mov	r3, r0
 800a752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a758:	223f      	movs	r2, #63	; 0x3f
 800a75a:	409a      	lsls	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	e010803f 	.word	0xe010803f

0800a77c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a792:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d101      	bne.n	800a7a2 <HAL_DMA_Start_IT+0x26>
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e048      	b.n	800a834 <HAL_DMA_Start_IT+0xb8>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d137      	bne.n	800a826 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fa52 	bl	800ac74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d4:	223f      	movs	r2, #63	; 0x3f
 800a7d6:	409a      	lsls	r2, r3
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0216 	orr.w	r2, r2, #22
 800a7ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	695a      	ldr	r2, [r3, #20]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7fa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0208 	orr.w	r2, r2, #8
 800a812:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0201 	orr.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e005      	b.n	800a832 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a82e:	2302      	movs	r3, #2
 800a830:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a848:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a84a:	f7ff f82d 	bl	80098a8 <HAL_GetTick>
 800a84e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d008      	beq.n	800a86e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2280      	movs	r2, #128	; 0x80
 800a860:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e052      	b.n	800a914 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0216 	bic.w	r2, r2, #22
 800a87c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	695a      	ldr	r2, [r3, #20]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a88c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a892:	2b00      	cmp	r3, #0
 800a894:	d103      	bne.n	800a89e <HAL_DMA_Abort+0x62>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d007      	beq.n	800a8ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0208 	bic.w	r2, r2, #8
 800a8ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 0201 	bic.w	r2, r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8be:	e013      	b.n	800a8e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8c0:	f7fe fff2 	bl	80098a8 <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b05      	cmp	r3, #5
 800a8cc:	d90c      	bls.n	800a8e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2203      	movs	r2, #3
 800a8e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e015      	b.n	800a914 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e4      	bne.n	800a8c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8fa:	223f      	movs	r2, #63	; 0x3f
 800a8fc:	409a      	lsls	r2, r3
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d004      	beq.n	800a93a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2280      	movs	r2, #128	; 0x80
 800a934:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e00c      	b.n	800a954 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2205      	movs	r2, #5
 800a93e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 0201 	bic.w	r2, r2, #1
 800a950:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a96c:	4b92      	ldr	r3, [pc, #584]	; (800abb8 <HAL_DMA_IRQHandler+0x258>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a92      	ldr	r2, [pc, #584]	; (800abbc <HAL_DMA_IRQHandler+0x25c>)
 800a972:	fba2 2303 	umull	r2, r3, r2, r3
 800a976:	0a9b      	lsrs	r3, r3, #10
 800a978:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a98a:	2208      	movs	r2, #8
 800a98c:	409a      	lsls	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4013      	ands	r3, r2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01a      	beq.n	800a9cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0304 	and.w	r3, r3, #4
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d013      	beq.n	800a9cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0204 	bic.w	r2, r2, #4
 800a9b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	409a      	lsls	r2, r3
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c4:	f043 0201 	orr.w	r2, r3, #1
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	409a      	lsls	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d012      	beq.n	800aa02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00b      	beq.n	800aa02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	409a      	lsls	r2, r3
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fa:	f043 0202 	orr.w	r2, r3, #2
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa06:	2204      	movs	r2, #4
 800aa08:	409a      	lsls	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d012      	beq.n	800aa38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0302 	and.w	r3, r3, #2
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00b      	beq.n	800aa38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa24:	2204      	movs	r2, #4
 800aa26:	409a      	lsls	r2, r3
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa30:	f043 0204 	orr.w	r2, r3, #4
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3c:	2210      	movs	r2, #16
 800aa3e:	409a      	lsls	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4013      	ands	r3, r2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d043      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d03c      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5a:	2210      	movs	r2, #16
 800aa5c:	409a      	lsls	r2, r3
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d018      	beq.n	800aaa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d108      	bne.n	800aa90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d024      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
 800aa8e:	e01f      	b.n	800aad0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d01b      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	4798      	blx	r3
 800aaa0:	e016      	b.n	800aad0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d107      	bne.n	800aac0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0208 	bic.w	r2, r2, #8
 800aabe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad4:	2220      	movs	r2, #32
 800aad6:	409a      	lsls	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4013      	ands	r3, r2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 808e 	beq.w	800abfe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0310 	and.w	r3, r3, #16
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 8086 	beq.w	800abfe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	409a      	lsls	r2, r3
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b05      	cmp	r3, #5
 800ab08:	d136      	bne.n	800ab78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f022 0216 	bic.w	r2, r2, #22
 800ab18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	695a      	ldr	r2, [r3, #20]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d103      	bne.n	800ab3a <HAL_DMA_IRQHandler+0x1da>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f022 0208 	bic.w	r2, r2, #8
 800ab48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4e:	223f      	movs	r2, #63	; 0x3f
 800ab50:	409a      	lsls	r2, r3
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d07d      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
        }
        return;
 800ab76:	e078      	b.n	800ac6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d01c      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d108      	bne.n	800aba6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d030      	beq.n	800abfe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
 800aba4:	e02b      	b.n	800abfe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d027      	beq.n	800abfe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
 800abb6:	e022      	b.n	800abfe <HAL_DMA_IRQHandler+0x29e>
 800abb8:	20000198 	.word	0x20000198
 800abbc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10f      	bne.n	800abee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f022 0210 	bic.w	r2, r2, #16
 800abdc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d032      	beq.n	800ac6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d022      	beq.n	800ac58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2205      	movs	r2, #5
 800ac16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f022 0201 	bic.w	r2, r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	60bb      	str	r3, [r7, #8]
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d307      	bcc.n	800ac46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1f2      	bne.n	800ac2a <HAL_DMA_IRQHandler+0x2ca>
 800ac44:	e000      	b.n	800ac48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ac46:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4798      	blx	r3
 800ac68:	e000      	b.n	800ac6c <HAL_DMA_IRQHandler+0x30c>
        return;
 800ac6a:	bf00      	nop
    }
  }
}
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop

0800ac74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
 800ac80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b40      	cmp	r3, #64	; 0x40
 800aca0:	d108      	bne.n	800acb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800acb2:	e007      	b.n	800acc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	60da      	str	r2, [r3, #12]
}
 800acc4:	bf00      	nop
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	3b10      	subs	r3, #16
 800ace0:	4a13      	ldr	r2, [pc, #76]	; (800ad30 <DMA_CalcBaseAndBitshift+0x60>)
 800ace2:	fba2 2303 	umull	r2, r3, r2, r3
 800ace6:	091b      	lsrs	r3, r3, #4
 800ace8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800acea:	4a12      	ldr	r2, [pc, #72]	; (800ad34 <DMA_CalcBaseAndBitshift+0x64>)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	4413      	add	r3, r2
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d908      	bls.n	800ad10 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <DMA_CalcBaseAndBitshift+0x68>)
 800ad06:	4013      	ands	r3, r2
 800ad08:	1d1a      	adds	r2, r3, #4
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	659a      	str	r2, [r3, #88]	; 0x58
 800ad0e:	e006      	b.n	800ad1e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	4b08      	ldr	r3, [pc, #32]	; (800ad38 <DMA_CalcBaseAndBitshift+0x68>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	aaaaaaab 	.word	0xaaaaaaab
 800ad34:	0801878c 	.word	0x0801878c
 800ad38:	fffffc00 	.word	0xfffffc00

0800ad3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d11f      	bne.n	800ad96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	d855      	bhi.n	800ae08 <DMA_CheckFifoParam+0xcc>
 800ad5c:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <DMA_CheckFifoParam+0x28>)
 800ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad62:	bf00      	nop
 800ad64:	0800ad75 	.word	0x0800ad75
 800ad68:	0800ad87 	.word	0x0800ad87
 800ad6c:	0800ad75 	.word	0x0800ad75
 800ad70:	0800ae09 	.word	0x0800ae09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d045      	beq.n	800ae0c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad84:	e042      	b.n	800ae0c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ad8e:	d13f      	bne.n	800ae10 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad94:	e03c      	b.n	800ae10 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad9e:	d121      	bne.n	800ade4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d836      	bhi.n	800ae14 <DMA_CheckFifoParam+0xd8>
 800ada6:	a201      	add	r2, pc, #4	; (adr r2, 800adac <DMA_CheckFifoParam+0x70>)
 800ada8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800adc3 	.word	0x0800adc3
 800adb4:	0800adbd 	.word	0x0800adbd
 800adb8:	0800add5 	.word	0x0800add5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
      break;
 800adc0:	e02f      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d024      	beq.n	800ae18 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800add2:	e021      	b.n	800ae18 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800addc:	d11e      	bne.n	800ae1c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ade2:	e01b      	b.n	800ae1c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d902      	bls.n	800adf0 <DMA_CheckFifoParam+0xb4>
 800adea:	2b03      	cmp	r3, #3
 800adec:	d003      	beq.n	800adf6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800adee:	e018      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	73fb      	strb	r3, [r7, #15]
      break;
 800adf4:	e015      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00e      	beq.n	800ae20 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	73fb      	strb	r3, [r7, #15]
      break;
 800ae06:	e00b      	b.n	800ae20 <DMA_CheckFifoParam+0xe4>
      break;
 800ae08:	bf00      	nop
 800ae0a:	e00a      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      break;
 800ae0c:	bf00      	nop
 800ae0e:	e008      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      break;
 800ae10:	bf00      	nop
 800ae12:	e006      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      break;
 800ae14:	bf00      	nop
 800ae16:	e004      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      break;
 800ae18:	bf00      	nop
 800ae1a:	e002      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      break;   
 800ae1c:	bf00      	nop
 800ae1e:	e000      	b.n	800ae22 <DMA_CheckFifoParam+0xe6>
      break;
 800ae20:	bf00      	nop
    }
  } 
  
  return status; 
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b089      	sub	sp, #36	; 0x24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800ae46:	2300      	movs	r3, #0
 800ae48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61fb      	str	r3, [r7, #28]
 800ae4e:	e175      	b.n	800b13c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800ae50:	2201      	movs	r2, #1
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	fa02 f303 	lsl.w	r3, r2, r3
 800ae58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	4013      	ands	r3, r2
 800ae62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	f040 8164 	bne.w	800b136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d00b      	beq.n	800ae8e <HAL_GPIO_Init+0x5e>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d007      	beq.n	800ae8e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ae82:	2b11      	cmp	r3, #17
 800ae84:	d003      	beq.n	800ae8e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	2b12      	cmp	r3, #18
 800ae8c:	d130      	bne.n	800aef0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	2203      	movs	r2, #3
 800ae9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9e:	43db      	mvns	r3, r3
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	4013      	ands	r3, r2
 800aea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb2:	69ba      	ldr	r2, [r7, #24]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aec4:	2201      	movs	r2, #1
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	fa02 f303 	lsl.w	r3, r2, r3
 800aecc:	43db      	mvns	r3, r3
 800aece:	69ba      	ldr	r2, [r7, #24]
 800aed0:	4013      	ands	r3, r2
 800aed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	091b      	lsrs	r3, r3, #4
 800aeda:	f003 0201 	and.w	r2, r3, #1
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	fa02 f303 	lsl.w	r3, r2, r3
 800aee4:	69ba      	ldr	r2, [r7, #24]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	2203      	movs	r2, #3
 800aefc:	fa02 f303 	lsl.w	r3, r2, r3
 800af00:	43db      	mvns	r3, r3
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	4013      	ands	r3, r2
 800af06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	fa02 f303 	lsl.w	r3, r2, r3
 800af14:	69ba      	ldr	r2, [r7, #24]
 800af16:	4313      	orrs	r3, r2
 800af18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	69ba      	ldr	r2, [r7, #24]
 800af1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d003      	beq.n	800af30 <HAL_GPIO_Init+0x100>
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	2b12      	cmp	r3, #18
 800af2e:	d123      	bne.n	800af78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	08da      	lsrs	r2, r3, #3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3208      	adds	r2, #8
 800af38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	220f      	movs	r2, #15
 800af48:	fa02 f303 	lsl.w	r3, r2, r3
 800af4c:	43db      	mvns	r3, r3
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	4013      	ands	r3, r2
 800af52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	691a      	ldr	r2, [r3, #16]
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	f003 0307 	and.w	r3, r3, #7
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	fa02 f303 	lsl.w	r3, r2, r3
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	4313      	orrs	r3, r2
 800af68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	08da      	lsrs	r2, r3, #3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	3208      	adds	r2, #8
 800af72:	69b9      	ldr	r1, [r7, #24]
 800af74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	2203      	movs	r2, #3
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	43db      	mvns	r3, r3
 800af8a:	69ba      	ldr	r2, [r7, #24]
 800af8c:	4013      	ands	r3, r2
 800af8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	f003 0203 	and.w	r2, r3, #3
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	fa02 f303 	lsl.w	r3, r2, r3
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 80be 	beq.w	800b136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afba:	4b65      	ldr	r3, [pc, #404]	; (800b150 <HAL_GPIO_Init+0x320>)
 800afbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afbe:	4a64      	ldr	r2, [pc, #400]	; (800b150 <HAL_GPIO_Init+0x320>)
 800afc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afc4:	6453      	str	r3, [r2, #68]	; 0x44
 800afc6:	4b62      	ldr	r3, [pc, #392]	; (800b150 <HAL_GPIO_Init+0x320>)
 800afc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800afd2:	4a60      	ldr	r2, [pc, #384]	; (800b154 <HAL_GPIO_Init+0x324>)
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	089b      	lsrs	r3, r3, #2
 800afd8:	3302      	adds	r3, #2
 800afda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	f003 0303 	and.w	r3, r3, #3
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	220f      	movs	r2, #15
 800afea:	fa02 f303 	lsl.w	r3, r2, r3
 800afee:	43db      	mvns	r3, r3
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	4013      	ands	r3, r2
 800aff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a57      	ldr	r2, [pc, #348]	; (800b158 <HAL_GPIO_Init+0x328>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d037      	beq.n	800b06e <HAL_GPIO_Init+0x23e>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a56      	ldr	r2, [pc, #344]	; (800b15c <HAL_GPIO_Init+0x32c>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d031      	beq.n	800b06a <HAL_GPIO_Init+0x23a>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a55      	ldr	r2, [pc, #340]	; (800b160 <HAL_GPIO_Init+0x330>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d02b      	beq.n	800b066 <HAL_GPIO_Init+0x236>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a54      	ldr	r2, [pc, #336]	; (800b164 <HAL_GPIO_Init+0x334>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d025      	beq.n	800b062 <HAL_GPIO_Init+0x232>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a53      	ldr	r2, [pc, #332]	; (800b168 <HAL_GPIO_Init+0x338>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d01f      	beq.n	800b05e <HAL_GPIO_Init+0x22e>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a52      	ldr	r2, [pc, #328]	; (800b16c <HAL_GPIO_Init+0x33c>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d019      	beq.n	800b05a <HAL_GPIO_Init+0x22a>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a51      	ldr	r2, [pc, #324]	; (800b170 <HAL_GPIO_Init+0x340>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d013      	beq.n	800b056 <HAL_GPIO_Init+0x226>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a50      	ldr	r2, [pc, #320]	; (800b174 <HAL_GPIO_Init+0x344>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00d      	beq.n	800b052 <HAL_GPIO_Init+0x222>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a4f      	ldr	r2, [pc, #316]	; (800b178 <HAL_GPIO_Init+0x348>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d007      	beq.n	800b04e <HAL_GPIO_Init+0x21e>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a4e      	ldr	r2, [pc, #312]	; (800b17c <HAL_GPIO_Init+0x34c>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d101      	bne.n	800b04a <HAL_GPIO_Init+0x21a>
 800b046:	2309      	movs	r3, #9
 800b048:	e012      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b04a:	230a      	movs	r3, #10
 800b04c:	e010      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b04e:	2308      	movs	r3, #8
 800b050:	e00e      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b052:	2307      	movs	r3, #7
 800b054:	e00c      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b056:	2306      	movs	r3, #6
 800b058:	e00a      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b05a:	2305      	movs	r3, #5
 800b05c:	e008      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b05e:	2304      	movs	r3, #4
 800b060:	e006      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b062:	2303      	movs	r3, #3
 800b064:	e004      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b066:	2302      	movs	r3, #2
 800b068:	e002      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b06a:	2301      	movs	r3, #1
 800b06c:	e000      	b.n	800b070 <HAL_GPIO_Init+0x240>
 800b06e:	2300      	movs	r3, #0
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	f002 0203 	and.w	r2, r2, #3
 800b076:	0092      	lsls	r2, r2, #2
 800b078:	4093      	lsls	r3, r2
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b080:	4934      	ldr	r1, [pc, #208]	; (800b154 <HAL_GPIO_Init+0x324>)
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	089b      	lsrs	r3, r3, #2
 800b086:	3302      	adds	r3, #2
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b08e:	4b3c      	ldr	r3, [pc, #240]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	43db      	mvns	r3, r3
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	4013      	ands	r3, r2
 800b09c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b0aa:	69ba      	ldr	r2, [r7, #24]
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b0b2:	4a33      	ldr	r2, [pc, #204]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b0b8:	4b31      	ldr	r3, [pc, #196]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b0dc:	4a28      	ldr	r2, [pc, #160]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b0e2:	4b27      	ldr	r3, [pc, #156]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	43db      	mvns	r3, r3
 800b0ec:	69ba      	ldr	r2, [r7, #24]
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b106:	4a1e      	ldr	r2, [pc, #120]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b10c:	4b1c      	ldr	r3, [pc, #112]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	43db      	mvns	r3, r3
 800b116:	69ba      	ldr	r2, [r7, #24]
 800b118:	4013      	ands	r3, r2
 800b11a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b130:	4a13      	ldr	r2, [pc, #76]	; (800b180 <HAL_GPIO_Init+0x350>)
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	3301      	adds	r3, #1
 800b13a:	61fb      	str	r3, [r7, #28]
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	2b0f      	cmp	r3, #15
 800b140:	f67f ae86 	bls.w	800ae50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b144:	bf00      	nop
 800b146:	3724      	adds	r7, #36	; 0x24
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	40023800 	.word	0x40023800
 800b154:	40013800 	.word	0x40013800
 800b158:	40020000 	.word	0x40020000
 800b15c:	40020400 	.word	0x40020400
 800b160:	40020800 	.word	0x40020800
 800b164:	40020c00 	.word	0x40020c00
 800b168:	40021000 	.word	0x40021000
 800b16c:	40021400 	.word	0x40021400
 800b170:	40021800 	.word	0x40021800
 800b174:	40021c00 	.word	0x40021c00
 800b178:	40022000 	.word	0x40022000
 800b17c:	40022400 	.word	0x40022400
 800b180:	40013c00 	.word	0x40013c00

0800b184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	887b      	ldrh	r3, [r7, #2]
 800b196:	4013      	ands	r3, r2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b19c:	2301      	movs	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	e001      	b.n	800b1a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	807b      	strh	r3, [r7, #2]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b1c4:	787b      	ldrb	r3, [r7, #1]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b1ca:	887a      	ldrh	r2, [r7, #2]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b1d0:	e003      	b.n	800b1da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b1d2:	887b      	ldrh	r3, [r7, #2]
 800b1d4:	041a      	lsls	r2, r3, #16
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	619a      	str	r2, [r3, #24]
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	695a      	ldr	r2, [r3, #20]
 800b1f6:	887b      	ldrh	r3, [r7, #2]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d004      	beq.n	800b208 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b1fe:	887b      	ldrh	r3, [r7, #2]
 800b200:	041a      	lsls	r2, r3, #16
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800b206:	e002      	b.n	800b20e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b208:	887a      	ldrh	r2, [r7, #2]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	619a      	str	r2, [r3, #24]
}
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
	...

0800b21c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b226:	4b08      	ldr	r3, [pc, #32]	; (800b248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b228:	695a      	ldr	r2, [r3, #20]
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	4013      	ands	r3, r2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d006      	beq.n	800b240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b232:	4a05      	ldr	r2, [pc, #20]	; (800b248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b238:	88fb      	ldrh	r3, [r7, #6]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 f806 	bl	800b24c <HAL_GPIO_EXTI_Callback>
  }
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	40013c00 	.word	0x40013c00

0800b24c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
	...

0800b264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e07f      	b.n	800b376 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7fd f9c4 	bl	8008618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2224      	movs	r2, #36	; 0x24
 800b294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f022 0201 	bic.w	r2, r2, #1
 800b2a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b2b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d107      	bne.n	800b2de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	689a      	ldr	r2, [r3, #8]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2da:	609a      	str	r2, [r3, #8]
 800b2dc:	e006      	b.n	800b2ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689a      	ldr	r2, [r3, #8]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b2ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d104      	bne.n	800b2fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6859      	ldr	r1, [r3, #4]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	4b1d      	ldr	r3, [pc, #116]	; (800b380 <HAL_I2C_Init+0x11c>)
 800b30a:	430b      	orrs	r3, r1
 800b30c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b31c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691a      	ldr	r2, [r3, #16]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	ea42 0103 	orr.w	r1, r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	021a      	lsls	r2, r3, #8
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	430a      	orrs	r2, r1
 800b336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	69d9      	ldr	r1, [r3, #28]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1a      	ldr	r2, [r3, #32]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	430a      	orrs	r2, r1
 800b346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f042 0201 	orr.w	r2, r2, #1
 800b356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2220      	movs	r2, #32
 800b362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	02008000 	.word	0x02008000

0800b384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b088      	sub	sp, #32
 800b388:	af02      	add	r7, sp, #8
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	607a      	str	r2, [r7, #4]
 800b38e:	461a      	mov	r2, r3
 800b390:	460b      	mov	r3, r1
 800b392:	817b      	strh	r3, [r7, #10]
 800b394:	4613      	mov	r3, r2
 800b396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b20      	cmp	r3, #32
 800b3a2:	f040 80da 	bne.w	800b55a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_I2C_Master_Transmit+0x30>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e0d3      	b.n	800b55c <HAL_I2C_Master_Transmit+0x1d8>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b3bc:	f7fe fa74 	bl	80098a8 <HAL_GetTick>
 800b3c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	2319      	movs	r3, #25
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 fc5c 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e0be      	b.n	800b55c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2221      	movs	r2, #33	; 0x21
 800b3e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2210      	movs	r2, #16
 800b3ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	893a      	ldrh	r2, [r7, #8]
 800b3fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	2bff      	cmp	r3, #255	; 0xff
 800b40e:	d90e      	bls.n	800b42e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	22ff      	movs	r2, #255	; 0xff
 800b414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	8979      	ldrh	r1, [r7, #10]
 800b41e:	4b51      	ldr	r3, [pc, #324]	; (800b564 <HAL_I2C_Master_Transmit+0x1e0>)
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 fdbe 	bl	800bfa8 <I2C_TransferConfig>
 800b42c:	e06c      	b.n	800b508 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	8979      	ldrh	r1, [r7, #10]
 800b440:	4b48      	ldr	r3, [pc, #288]	; (800b564 <HAL_I2C_Master_Transmit+0x1e0>)
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 fdad 	bl	800bfa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b44e:	e05b      	b.n	800b508 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	6a39      	ldr	r1, [r7, #32]
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 fc59 	bl	800bd0c <I2C_WaitOnTXISFlagUntilTimeout>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	e07b      	b.n	800b55c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	781a      	ldrb	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b47e:	b29b      	uxth	r3, r3
 800b480:	3b01      	subs	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b48c:	3b01      	subs	r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b498:	b29b      	uxth	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d034      	beq.n	800b508 <HAL_I2C_Master_Transmit+0x184>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d130      	bne.n	800b508 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2180      	movs	r1, #128	; 0x80
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 fbeb 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e04d      	b.n	800b55c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	2bff      	cmp	r3, #255	; 0xff
 800b4c8:	d90e      	bls.n	800b4e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	22ff      	movs	r2, #255	; 0xff
 800b4ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	8979      	ldrh	r1, [r7, #10]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 fd61 	bl	800bfa8 <I2C_TransferConfig>
 800b4e6:	e00f      	b.n	800b508 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	8979      	ldrh	r1, [r7, #10]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 fd50 	bl	800bfa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d19e      	bne.n	800b450 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	6a39      	ldr	r1, [r7, #32]
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f000 fc38 	bl	800bd8c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e01a      	b.n	800b55c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2220      	movs	r2, #32
 800b52c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6859      	ldr	r1, [r3, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <HAL_I2C_Master_Transmit+0x1e4>)
 800b53a:	400b      	ands	r3, r1
 800b53c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2220      	movs	r2, #32
 800b542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	e000      	b.n	800b55c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b55a:	2302      	movs	r3, #2
  }
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	80002000 	.word	0x80002000
 800b568:	fe00e800 	.word	0xfe00e800

0800b56c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af02      	add	r7, sp, #8
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	607a      	str	r2, [r7, #4]
 800b576:	461a      	mov	r2, r3
 800b578:	460b      	mov	r3, r1
 800b57a:	817b      	strh	r3, [r7, #10]
 800b57c:	4613      	mov	r3, r2
 800b57e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b20      	cmp	r3, #32
 800b58a:	f040 80db 	bne.w	800b744 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_I2C_Master_Receive+0x30>
 800b598:	2302      	movs	r3, #2
 800b59a:	e0d4      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b5a4:	f7fe f980 	bl	80098a8 <HAL_GetTick>
 800b5a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	9300      	str	r3, [sp, #0]
 800b5ae:	2319      	movs	r3, #25
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 fb68 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e0bf      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2222      	movs	r2, #34	; 0x22
 800b5ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2210      	movs	r2, #16
 800b5d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	893a      	ldrh	r2, [r7, #8]
 800b5e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	2bff      	cmp	r3, #255	; 0xff
 800b5f6:	d90e      	bls.n	800b616 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	22ff      	movs	r2, #255	; 0xff
 800b5fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b602:	b2da      	uxtb	r2, r3
 800b604:	8979      	ldrh	r1, [r7, #10]
 800b606:	4b52      	ldr	r3, [pc, #328]	; (800b750 <HAL_I2C_Master_Receive+0x1e4>)
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f000 fcca 	bl	800bfa8 <I2C_TransferConfig>
 800b614:	e06d      	b.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b624:	b2da      	uxtb	r2, r3
 800b626:	8979      	ldrh	r1, [r7, #10]
 800b628:	4b49      	ldr	r3, [pc, #292]	; (800b750 <HAL_I2C_Master_Receive+0x1e4>)
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f000 fcb9 	bl	800bfa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b636:	e05c      	b.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	6a39      	ldr	r1, [r7, #32]
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 fbe1 	bl	800be04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	e07c      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b656:	b2d2      	uxtb	r2, r2
 800b658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b668:	3b01      	subs	r3, #1
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b674:	b29b      	uxth	r3, r3
 800b676:	3b01      	subs	r3, #1
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b682:	b29b      	uxth	r3, r3
 800b684:	2b00      	cmp	r3, #0
 800b686:	d034      	beq.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d130      	bne.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	2200      	movs	r2, #0
 800b698:	2180      	movs	r1, #128	; 0x80
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 faf6 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e04d      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	2bff      	cmp	r3, #255	; 0xff
 800b6b2:	d90e      	bls.n	800b6d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	22ff      	movs	r2, #255	; 0xff
 800b6b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	8979      	ldrh	r1, [r7, #10]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 fc6c 	bl	800bfa8 <I2C_TransferConfig>
 800b6d0:	e00f      	b.n	800b6f2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	8979      	ldrh	r1, [r7, #10]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 fc5b 	bl	800bfa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d19d      	bne.n	800b638 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	6a39      	ldr	r1, [r7, #32]
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fb43 	bl	800bd8c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e01a      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2220      	movs	r2, #32
 800b716:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6859      	ldr	r1, [r3, #4]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	4b0c      	ldr	r3, [pc, #48]	; (800b754 <HAL_I2C_Master_Receive+0x1e8>)
 800b724:	400b      	ands	r3, r1
 800b726:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2220      	movs	r2, #32
 800b72c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	e000      	b.n	800b746 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b744:	2302      	movs	r3, #2
  }
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	80002400 	.word	0x80002400
 800b754:	fe00e800 	.word	0xfe00e800

0800b758 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	4608      	mov	r0, r1
 800b762:	4611      	mov	r1, r2
 800b764:	461a      	mov	r2, r3
 800b766:	4603      	mov	r3, r0
 800b768:	817b      	strh	r3, [r7, #10]
 800b76a:	460b      	mov	r3, r1
 800b76c:	813b      	strh	r3, [r7, #8]
 800b76e:	4613      	mov	r3, r2
 800b770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b20      	cmp	r3, #32
 800b77c:	f040 80fd 	bne.w	800b97a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d002      	beq.n	800b78c <HAL_I2C_Mem_Read+0x34>
 800b786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d105      	bne.n	800b798 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b792:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e0f1      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d101      	bne.n	800b7a6 <HAL_I2C_Mem_Read+0x4e>
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e0ea      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b7ae:	f7fe f87b 	bl	80098a8 <HAL_GetTick>
 800b7b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	2319      	movs	r3, #25
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f000 fa63 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e0d5      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2222      	movs	r2, #34	; 0x22
 800b7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2240      	movs	r2, #64	; 0x40
 800b7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6a3a      	ldr	r2, [r7, #32]
 800b7ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b7f8:	88f8      	ldrh	r0, [r7, #6]
 800b7fa:	893a      	ldrh	r2, [r7, #8]
 800b7fc:	8979      	ldrh	r1, [r7, #10]
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	4603      	mov	r3, r0
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f9c7 	bl	800bb9c <I2C_RequestMemoryRead>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d005      	beq.n	800b820 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e0ad      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b824:	b29b      	uxth	r3, r3
 800b826:	2bff      	cmp	r3, #255	; 0xff
 800b828:	d90e      	bls.n	800b848 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	22ff      	movs	r2, #255	; 0xff
 800b82e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b834:	b2da      	uxtb	r2, r3
 800b836:	8979      	ldrh	r1, [r7, #10]
 800b838:	4b52      	ldr	r3, [pc, #328]	; (800b984 <HAL_I2C_Mem_Read+0x22c>)
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 fbb1 	bl	800bfa8 <I2C_TransferConfig>
 800b846:	e00f      	b.n	800b868 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b856:	b2da      	uxtb	r2, r3
 800b858:	8979      	ldrh	r1, [r7, #10]
 800b85a:	4b4a      	ldr	r3, [pc, #296]	; (800b984 <HAL_I2C_Mem_Read+0x22c>)
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f000 fba0 	bl	800bfa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	2200      	movs	r2, #0
 800b870:	2104      	movs	r1, #4
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f000 fa0a 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e07c      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88c:	b2d2      	uxtb	r2, r2
 800b88e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d034      	beq.n	800b928 <HAL_I2C_Mem_Read+0x1d0>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d130      	bne.n	800b928 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2180      	movs	r1, #128	; 0x80
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f000 f9db 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e04d      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	2bff      	cmp	r3, #255	; 0xff
 800b8e8:	d90e      	bls.n	800b908 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	22ff      	movs	r2, #255	; 0xff
 800b8ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	8979      	ldrh	r1, [r7, #10]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 fb51 	bl	800bfa8 <I2C_TransferConfig>
 800b906:	e00f      	b.n	800b928 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b916:	b2da      	uxtb	r2, r3
 800b918:	8979      	ldrh	r1, [r7, #10]
 800b91a:	2300      	movs	r3, #0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f000 fb40 	bl	800bfa8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d19a      	bne.n	800b868 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f000 fa28 	bl	800bd8c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e01a      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2220      	movs	r2, #32
 800b94c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6859      	ldr	r1, [r3, #4]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <HAL_I2C_Mem_Read+0x230>)
 800b95a:	400b      	ands	r3, r1
 800b95c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2220      	movs	r2, #32
 800b962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	e000      	b.n	800b97c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b97a:	2302      	movs	r3, #2
  }
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	80002400 	.word	0x80002400
 800b988:	fe00e800 	.word	0xfe00e800

0800b98c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08a      	sub	sp, #40	; 0x28
 800b990:	af02      	add	r7, sp, #8
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	607a      	str	r2, [r7, #4]
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	460b      	mov	r3, r1
 800b99a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b20      	cmp	r3, #32
 800b9aa:	f040 80ef 	bne.w	800bb8c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9bc:	d101      	bne.n	800b9c2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b9be:	2302      	movs	r3, #2
 800b9c0:	e0e5      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d101      	bne.n	800b9d0 <HAL_I2C_IsDeviceReady+0x44>
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	e0de      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2224      	movs	r2, #36	; 0x24
 800b9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d105      	bne.n	800b9fa <HAL_I2C_IsDeviceReady+0x6e>
 800b9ee:	897b      	ldrh	r3, [r7, #10]
 800b9f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b9f4:	4b68      	ldr	r3, [pc, #416]	; (800bb98 <HAL_I2C_IsDeviceReady+0x20c>)
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	e004      	b.n	800ba04 <HAL_I2C_IsDeviceReady+0x78>
 800b9fa:	897b      	ldrh	r3, [r7, #10]
 800b9fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba00:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	6812      	ldr	r2, [r2, #0]
 800ba08:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800ba0a:	f7fd ff4d 	bl	80098a8 <HAL_GetTick>
 800ba0e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	f003 0320 	and.w	r3, r3, #32
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	bf0c      	ite	eq
 800ba1e:	2301      	moveq	r3, #1
 800ba20:	2300      	movne	r3, #0
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	f003 0310 	and.w	r3, r3, #16
 800ba30:	2b10      	cmp	r3, #16
 800ba32:	bf0c      	ite	eq
 800ba34:	2301      	moveq	r3, #1
 800ba36:	2300      	movne	r3, #0
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ba3c:	e034      	b.n	800baa8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba44:	d01a      	beq.n	800ba7c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ba46:	f7fd ff2f 	bl	80098a8 <HAL_GetTick>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	683a      	ldr	r2, [r7, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d302      	bcc.n	800ba5c <HAL_I2C_IsDeviceReady+0xd0>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10f      	bne.n	800ba7c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba68:	f043 0220 	orr.w	r2, r3, #32
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e088      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	f003 0320 	and.w	r3, r3, #32
 800ba86:	2b20      	cmp	r3, #32
 800ba88:	bf0c      	ite	eq
 800ba8a:	2301      	moveq	r3, #1
 800ba8c:	2300      	movne	r3, #0
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	f003 0310 	and.w	r3, r3, #16
 800ba9c:	2b10      	cmp	r3, #16
 800ba9e:	bf0c      	ite	eq
 800baa0:	2301      	moveq	r3, #1
 800baa2:	2300      	movne	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800baa8:	7ffb      	ldrb	r3, [r7, #31]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d102      	bne.n	800bab4 <HAL_I2C_IsDeviceReady+0x128>
 800baae:	7fbb      	ldrb	r3, [r7, #30]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0c4      	beq.n	800ba3e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	f003 0310 	and.w	r3, r3, #16
 800babe:	2b10      	cmp	r3, #16
 800bac0:	d01a      	beq.n	800baf8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2200      	movs	r2, #0
 800baca:	2120      	movs	r1, #32
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 f8dd 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e058      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2220      	movs	r2, #32
 800bae2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	e04a      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2200      	movs	r2, #0
 800bb00:	2120      	movs	r1, #32
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 f8c2 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e03d      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2210      	movs	r2, #16
 800bb18:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2220      	movs	r2, #32
 800bb20:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d118      	bne.n	800bb5c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb38:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2200      	movs	r2, #0
 800bb42:	2120      	movs	r1, #32
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 f8a1 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e01c      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	f63f af3d 	bhi.w	800b9e6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb78:	f043 0220 	orr.w	r2, r3, #32
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e000      	b.n	800bb8e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800bb8c:	2302      	movs	r3, #2
  }
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3720      	adds	r7, #32
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	02002000 	.word	0x02002000

0800bb9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af02      	add	r7, sp, #8
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	4608      	mov	r0, r1
 800bba6:	4611      	mov	r1, r2
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4603      	mov	r3, r0
 800bbac:	817b      	strh	r3, [r7, #10]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	813b      	strh	r3, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bbb6:	88fb      	ldrh	r3, [r7, #6]
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	8979      	ldrh	r1, [r7, #10]
 800bbbc:	4b20      	ldr	r3, [pc, #128]	; (800bc40 <I2C_RequestMemoryRead+0xa4>)
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 f9f0 	bl	800bfa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	69b9      	ldr	r1, [r7, #24]
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f000 f89d 	bl	800bd0c <I2C_WaitOnTXISFlagUntilTimeout>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e02c      	b.n	800bc36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bbdc:	88fb      	ldrh	r3, [r7, #6]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d105      	bne.n	800bbee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bbe2:	893b      	ldrh	r3, [r7, #8]
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	629a      	str	r2, [r3, #40]	; 0x28
 800bbec:	e015      	b.n	800bc1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bbee:	893b      	ldrh	r3, [r7, #8]
 800bbf0:	0a1b      	lsrs	r3, r3, #8
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	b2da      	uxtb	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbfc:	69fa      	ldr	r2, [r7, #28]
 800bbfe:	69b9      	ldr	r1, [r7, #24]
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f000 f883 	bl	800bd0c <I2C_WaitOnTXISFlagUntilTimeout>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e012      	b.n	800bc36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc10:	893b      	ldrh	r3, [r7, #8]
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2200      	movs	r2, #0
 800bc22:	2140      	movs	r1, #64	; 0x40
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f000 f831 	bl	800bc8c <I2C_WaitOnFlagUntilTimeout>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e000      	b.n	800bc36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	80002000 	.word	0x80002000

0800bc44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	f003 0302 	and.w	r3, r3, #2
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d103      	bne.n	800bc62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d007      	beq.n	800bc80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	699a      	ldr	r2, [r3, #24]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f042 0201 	orr.w	r2, r2, #1
 800bc7e:	619a      	str	r2, [r3, #24]
  }
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	603b      	str	r3, [r7, #0]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bc9c:	e022      	b.n	800bce4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d01e      	beq.n	800bce4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bca6:	f7fd fdff 	bl	80098a8 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d302      	bcc.n	800bcbc <I2C_WaitOnFlagUntilTimeout+0x30>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d113      	bne.n	800bce4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc0:	f043 0220 	orr.w	r2, r3, #32
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e00f      	b.n	800bd04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	699a      	ldr	r2, [r3, #24]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	4013      	ands	r3, r2
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	bf0c      	ite	eq
 800bcf4:	2301      	moveq	r3, #1
 800bcf6:	2300      	movne	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d0cd      	beq.n	800bc9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bd18:	e02c      	b.n	800bd74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	68b9      	ldr	r1, [r7, #8]
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f8dc 	bl	800bedc <I2C_IsAcknowledgeFailed>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e02a      	b.n	800bd84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd34:	d01e      	beq.n	800bd74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd36:	f7fd fdb7 	bl	80098a8 <HAL_GetTick>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d302      	bcc.n	800bd4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d113      	bne.n	800bd74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd50:	f043 0220 	orr.w	r2, r3, #32
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2220      	movs	r2, #32
 800bd5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e007      	b.n	800bd84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	f003 0302 	and.w	r3, r3, #2
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d1cb      	bne.n	800bd1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd98:	e028      	b.n	800bdec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f000 f89c 	bl	800bedc <I2C_IsAcknowledgeFailed>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e026      	b.n	800bdfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdae:	f7fd fd7b 	bl	80098a8 <HAL_GetTick>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d302      	bcc.n	800bdc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d113      	bne.n	800bdec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc8:	f043 0220 	orr.w	r2, r3, #32
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e007      	b.n	800bdfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b20      	cmp	r3, #32
 800bdf8:	d1cf      	bne.n	800bd9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800be10:	e055      	b.n	800bebe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	68b9      	ldr	r1, [r7, #8]
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f000 f860 	bl	800bedc <I2C_IsAcknowledgeFailed>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e053      	b.n	800bece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	f003 0320 	and.w	r3, r3, #32
 800be30:	2b20      	cmp	r3, #32
 800be32:	d129      	bne.n	800be88 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	f003 0304 	and.w	r3, r3, #4
 800be3e:	2b04      	cmp	r3, #4
 800be40:	d105      	bne.n	800be4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800be4a:	2300      	movs	r3, #0
 800be4c:	e03f      	b.n	800bece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2220      	movs	r2, #32
 800be54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6859      	ldr	r1, [r3, #4]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	4b1d      	ldr	r3, [pc, #116]	; (800bed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800be62:	400b      	ands	r3, r1
 800be64:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2220      	movs	r2, #32
 800be70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800be84:	2301      	movs	r3, #1
 800be86:	e022      	b.n	800bece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be88:	f7fd fd0e 	bl	80098a8 <HAL_GetTick>
 800be8c:	4602      	mov	r2, r0
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	429a      	cmp	r2, r3
 800be96:	d302      	bcc.n	800be9e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10f      	bne.n	800bebe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea2:	f043 0220 	orr.w	r2, r3, #32
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2220      	movs	r2, #32
 800beae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e007      	b.n	800bece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	699b      	ldr	r3, [r3, #24]
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d1a2      	bne.n	800be12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	fe00e800 	.word	0xfe00e800

0800bedc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	f003 0310 	and.w	r3, r3, #16
 800bef2:	2b10      	cmp	r3, #16
 800bef4:	d151      	bne.n	800bf9a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bef6:	e022      	b.n	800bf3e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befe:	d01e      	beq.n	800bf3e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf00:	f7fd fcd2 	bl	80098a8 <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d302      	bcc.n	800bf16 <I2C_IsAcknowledgeFailed+0x3a>
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d113      	bne.n	800bf3e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf1a:	f043 0220 	orr.w	r2, r3, #32
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e02e      	b.n	800bf9c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	f003 0320 	and.w	r3, r3, #32
 800bf48:	2b20      	cmp	r3, #32
 800bf4a:	d1d5      	bne.n	800bef8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2210      	movs	r2, #16
 800bf52:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f7ff fe71 	bl	800bc44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6859      	ldr	r1, [r3, #4]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <I2C_IsAcknowledgeFailed+0xc8>)
 800bf6e:	400b      	ands	r3, r1
 800bf70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	f043 0204 	orr.w	r2, r3, #4
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2220      	movs	r2, #32
 800bf82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	fe00e800 	.word	0xfe00e800

0800bfa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	607b      	str	r3, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	817b      	strh	r3, [r7, #10]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	0d5b      	lsrs	r3, r3, #21
 800bfc4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bfc8:	4b0d      	ldr	r3, [pc, #52]	; (800c000 <I2C_TransferConfig+0x58>)
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	ea02 0103 	and.w	r1, r2, r3
 800bfd2:	897b      	ldrh	r3, [r7, #10]
 800bfd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bfd8:	7a7b      	ldrb	r3, [r7, #9]
 800bfda:	041b      	lsls	r3, r3, #16
 800bfdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	430a      	orrs	r2, r1
 800bff0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800bff2:	bf00      	nop
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	03ff63ff 	.word	0x03ff63ff

0800c004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b20      	cmp	r3, #32
 800c018:	d138      	bne.n	800c08c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c020:	2b01      	cmp	r3, #1
 800c022:	d101      	bne.n	800c028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c024:	2302      	movs	r3, #2
 800c026:	e032      	b.n	800c08e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2224      	movs	r2, #36	; 0x24
 800c034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f022 0201 	bic.w	r2, r2, #1
 800c046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6819      	ldr	r1, [r3, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	430a      	orrs	r2, r1
 800c066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f042 0201 	orr.w	r2, r2, #1
 800c076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2220      	movs	r2, #32
 800c07c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	e000      	b.n	800c08e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c08c:	2302      	movs	r3, #2
  }
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b085      	sub	sp, #20
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	2b20      	cmp	r3, #32
 800c0ae:	d139      	bne.n	800c124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d101      	bne.n	800c0be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	e033      	b.n	800c126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2224      	movs	r2, #36	; 0x24
 800c0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f022 0201 	bic.w	r2, r2, #1
 800c0dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c0ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	021b      	lsls	r3, r3, #8
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0201 	orr.w	r2, r2, #1
 800c10e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2220      	movs	r2, #32
 800c114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	e000      	b.n	800c126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c124:	2302      	movs	r3, #2
  }
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
	...

0800c134 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c13c:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c140:	4a0a      	ldr	r2, [pc, #40]	; (800c16c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c146:	6453      	str	r3, [r2, #68]	; 0x44
 800c148:	4b08      	ldr	r3, [pc, #32]	; (800c16c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c14c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800c154:	4b06      	ldr	r3, [pc, #24]	; (800c170 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	4905      	ldr	r1, [pc, #20]	; (800c170 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	604b      	str	r3, [r1, #4]
}
 800c160:	bf00      	nop
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	40023800 	.word	0x40023800
 800c170:	40013800 	.word	0x40013800

0800c174 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c176:	b08f      	sub	sp, #60	; 0x3c
 800c178:	af0a      	add	r7, sp, #40	; 0x28
 800c17a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e116      	b.n	800c3b4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7fc fddb 	bl	8008d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2203      	movs	r2, #3
 800c1aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d102      	bne.n	800c1c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f003 fd61 	bl	800fc8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	687e      	ldr	r6, [r7, #4]
 800c1d2:	466d      	mov	r5, sp
 800c1d4:	f106 0410 	add.w	r4, r6, #16
 800c1d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c1e4:	e885 0003 	stmia.w	r5, {r0, r1}
 800c1e8:	1d33      	adds	r3, r6, #4
 800c1ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1ec:	6838      	ldr	r0, [r7, #0]
 800c1ee:	f003 fcf5 	bl	800fbdc <USB_CoreInit>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d005      	beq.n	800c204 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	e0d7      	b.n	800c3b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2100      	movs	r1, #0
 800c20a:	4618      	mov	r0, r3
 800c20c:	f003 fd4f 	bl	800fcae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c210:	2300      	movs	r3, #0
 800c212:	73fb      	strb	r3, [r7, #15]
 800c214:	e04a      	b.n	800c2ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c216:	7bfa      	ldrb	r2, [r7, #15]
 800c218:	6879      	ldr	r1, [r7, #4]
 800c21a:	4613      	mov	r3, r2
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	1a9b      	subs	r3, r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	440b      	add	r3, r1
 800c224:	333d      	adds	r3, #61	; 0x3d
 800c226:	2201      	movs	r2, #1
 800c228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c22a:	7bfa      	ldrb	r2, [r7, #15]
 800c22c:	6879      	ldr	r1, [r7, #4]
 800c22e:	4613      	mov	r3, r2
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	1a9b      	subs	r3, r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	440b      	add	r3, r1
 800c238:	333c      	adds	r3, #60	; 0x3c
 800c23a:	7bfa      	ldrb	r2, [r7, #15]
 800c23c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c23e:	7bfa      	ldrb	r2, [r7, #15]
 800c240:	7bfb      	ldrb	r3, [r7, #15]
 800c242:	b298      	uxth	r0, r3
 800c244:	6879      	ldr	r1, [r7, #4]
 800c246:	4613      	mov	r3, r2
 800c248:	00db      	lsls	r3, r3, #3
 800c24a:	1a9b      	subs	r3, r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	440b      	add	r3, r1
 800c250:	3342      	adds	r3, #66	; 0x42
 800c252:	4602      	mov	r2, r0
 800c254:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c256:	7bfa      	ldrb	r2, [r7, #15]
 800c258:	6879      	ldr	r1, [r7, #4]
 800c25a:	4613      	mov	r3, r2
 800c25c:	00db      	lsls	r3, r3, #3
 800c25e:	1a9b      	subs	r3, r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	440b      	add	r3, r1
 800c264:	333f      	adds	r3, #63	; 0x3f
 800c266:	2200      	movs	r2, #0
 800c268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c26a:	7bfa      	ldrb	r2, [r7, #15]
 800c26c:	6879      	ldr	r1, [r7, #4]
 800c26e:	4613      	mov	r3, r2
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	1a9b      	subs	r3, r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	440b      	add	r3, r1
 800c278:	3344      	adds	r3, #68	; 0x44
 800c27a:	2200      	movs	r2, #0
 800c27c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c27e:	7bfa      	ldrb	r2, [r7, #15]
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	4613      	mov	r3, r2
 800c284:	00db      	lsls	r3, r3, #3
 800c286:	1a9b      	subs	r3, r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	440b      	add	r3, r1
 800c28c:	3348      	adds	r3, #72	; 0x48
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c292:	7bfa      	ldrb	r2, [r7, #15]
 800c294:	6879      	ldr	r1, [r7, #4]
 800c296:	4613      	mov	r3, r2
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	440b      	add	r3, r1
 800c2a0:	3350      	adds	r3, #80	; 0x50
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2a6:	7bfb      	ldrb	r3, [r7, #15]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	73fb      	strb	r3, [r7, #15]
 800c2ac:	7bfa      	ldrb	r2, [r7, #15]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d3af      	bcc.n	800c216 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
 800c2ba:	e044      	b.n	800c346 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c2bc:	7bfa      	ldrb	r2, [r7, #15]
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	440b      	add	r3, r1
 800c2ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c2d2:	7bfa      	ldrb	r2, [r7, #15]
 800c2d4:	6879      	ldr	r1, [r7, #4]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	1a9b      	subs	r3, r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	440b      	add	r3, r1
 800c2e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c2e4:	7bfa      	ldrb	r2, [r7, #15]
 800c2e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c2e8:	7bfa      	ldrb	r2, [r7, #15]
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	00db      	lsls	r3, r3, #3
 800c2f0:	1a9b      	subs	r3, r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	440b      	add	r3, r1
 800c2f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c2fe:	7bfa      	ldrb	r2, [r7, #15]
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4613      	mov	r3, r2
 800c304:	00db      	lsls	r3, r3, #3
 800c306:	1a9b      	subs	r3, r3, r2
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	440b      	add	r3, r1
 800c30c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c310:	2200      	movs	r2, #0
 800c312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c314:	7bfa      	ldrb	r2, [r7, #15]
 800c316:	6879      	ldr	r1, [r7, #4]
 800c318:	4613      	mov	r3, r2
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	1a9b      	subs	r3, r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	440b      	add	r3, r1
 800c322:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c326:	2200      	movs	r2, #0
 800c328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c32a:	7bfa      	ldrb	r2, [r7, #15]
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	4613      	mov	r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	1a9b      	subs	r3, r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	440b      	add	r3, r1
 800c338:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c33c:	2200      	movs	r2, #0
 800c33e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	3301      	adds	r3, #1
 800c344:	73fb      	strb	r3, [r7, #15]
 800c346:	7bfa      	ldrb	r2, [r7, #15]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d3b5      	bcc.n	800c2bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	603b      	str	r3, [r7, #0]
 800c356:	687e      	ldr	r6, [r7, #4]
 800c358:	466d      	mov	r5, sp
 800c35a:	f106 0410 	add.w	r4, r6, #16
 800c35e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c36a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c36e:	1d33      	adds	r3, r6, #4
 800c370:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c372:	6838      	ldr	r0, [r7, #0]
 800c374:	f003 fcc6 	bl	800fd04 <USB_DevInit>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d005      	beq.n	800c38a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2202      	movs	r2, #2
 800c382:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e014      	b.n	800c3b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2201      	movs	r2, #1
 800c396:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d102      	bne.n	800c3a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f80a 	bl	800c3bc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f003 fe78 	bl	80100a2 <USB_DevDisconnect>

  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3714      	adds	r7, #20
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3ea:	4b05      	ldr	r3, [pc, #20]	; (800c400 <HAL_PCDEx_ActivateLPM+0x44>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	10000003 	.word	0x10000003

0800c404 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c408:	4b05      	ldr	r3, [pc, #20]	; (800c420 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a04      	ldr	r2, [pc, #16]	; (800c420 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c40e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c412:	6013      	str	r3, [r2, #0]
}
 800c414:	bf00      	nop
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	40007000 	.word	0x40007000

0800c424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c42c:	2300      	movs	r3, #0
 800c42e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e29b      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 8087 	beq.w	800c556 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c448:	4b96      	ldr	r3, [pc, #600]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f003 030c 	and.w	r3, r3, #12
 800c450:	2b04      	cmp	r3, #4
 800c452:	d00c      	beq.n	800c46e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c454:	4b93      	ldr	r3, [pc, #588]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f003 030c 	and.w	r3, r3, #12
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	d112      	bne.n	800c486 <HAL_RCC_OscConfig+0x62>
 800c460:	4b90      	ldr	r3, [pc, #576]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c46c:	d10b      	bne.n	800c486 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c46e:	4b8d      	ldr	r3, [pc, #564]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d06c      	beq.n	800c554 <HAL_RCC_OscConfig+0x130>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d168      	bne.n	800c554 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	e275      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c48e:	d106      	bne.n	800c49e <HAL_RCC_OscConfig+0x7a>
 800c490:	4b84      	ldr	r3, [pc, #528]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a83      	ldr	r2, [pc, #524]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	e02e      	b.n	800c4fc <HAL_RCC_OscConfig+0xd8>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10c      	bne.n	800c4c0 <HAL_RCC_OscConfig+0x9c>
 800c4a6:	4b7f      	ldr	r3, [pc, #508]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a7e      	ldr	r2, [pc, #504]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4b0:	6013      	str	r3, [r2, #0]
 800c4b2:	4b7c      	ldr	r3, [pc, #496]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a7b      	ldr	r2, [pc, #492]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4bc:	6013      	str	r3, [r2, #0]
 800c4be:	e01d      	b.n	800c4fc <HAL_RCC_OscConfig+0xd8>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4c8:	d10c      	bne.n	800c4e4 <HAL_RCC_OscConfig+0xc0>
 800c4ca:	4b76      	ldr	r3, [pc, #472]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a75      	ldr	r2, [pc, #468]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	4b73      	ldr	r3, [pc, #460]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a72      	ldr	r2, [pc, #456]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4e0:	6013      	str	r3, [r2, #0]
 800c4e2:	e00b      	b.n	800c4fc <HAL_RCC_OscConfig+0xd8>
 800c4e4:	4b6f      	ldr	r3, [pc, #444]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a6e      	ldr	r2, [pc, #440]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4ee:	6013      	str	r3, [r2, #0]
 800c4f0:	4b6c      	ldr	r3, [pc, #432]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a6b      	ldr	r2, [pc, #428]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c4f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d013      	beq.n	800c52c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c504:	f7fd f9d0 	bl	80098a8 <HAL_GetTick>
 800c508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c50a:	e008      	b.n	800c51e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c50c:	f7fd f9cc 	bl	80098a8 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	2b64      	cmp	r3, #100	; 0x64
 800c518:	d901      	bls.n	800c51e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e229      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c51e:	4b61      	ldr	r3, [pc, #388]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c526:	2b00      	cmp	r3, #0
 800c528:	d0f0      	beq.n	800c50c <HAL_RCC_OscConfig+0xe8>
 800c52a:	e014      	b.n	800c556 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c52c:	f7fd f9bc 	bl	80098a8 <HAL_GetTick>
 800c530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c532:	e008      	b.n	800c546 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c534:	f7fd f9b8 	bl	80098a8 <HAL_GetTick>
 800c538:	4602      	mov	r2, r0
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	2b64      	cmp	r3, #100	; 0x64
 800c540:	d901      	bls.n	800c546 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c542:	2303      	movs	r3, #3
 800c544:	e215      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c546:	4b57      	ldr	r3, [pc, #348]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1f0      	bne.n	800c534 <HAL_RCC_OscConfig+0x110>
 800c552:	e000      	b.n	800c556 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 0302 	and.w	r3, r3, #2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d069      	beq.n	800c636 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c562:	4b50      	ldr	r3, [pc, #320]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f003 030c 	and.w	r3, r3, #12
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00b      	beq.n	800c586 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c56e:	4b4d      	ldr	r3, [pc, #308]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	f003 030c 	and.w	r3, r3, #12
 800c576:	2b08      	cmp	r3, #8
 800c578:	d11c      	bne.n	800c5b4 <HAL_RCC_OscConfig+0x190>
 800c57a:	4b4a      	ldr	r3, [pc, #296]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c582:	2b00      	cmp	r3, #0
 800c584:	d116      	bne.n	800c5b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c586:	4b47      	ldr	r3, [pc, #284]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0302 	and.w	r3, r3, #2
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d005      	beq.n	800c59e <HAL_RCC_OscConfig+0x17a>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d001      	beq.n	800c59e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e1e9      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c59e:	4b41      	ldr	r3, [pc, #260]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	00db      	lsls	r3, r3, #3
 800c5ac:	493d      	ldr	r1, [pc, #244]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5b2:	e040      	b.n	800c636 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d023      	beq.n	800c604 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5bc:	4b39      	ldr	r3, [pc, #228]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a38      	ldr	r2, [pc, #224]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5c8:	f7fd f96e 	bl	80098a8 <HAL_GetTick>
 800c5cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5ce:	e008      	b.n	800c5e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5d0:	f7fd f96a 	bl	80098a8 <HAL_GetTick>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d901      	bls.n	800c5e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	e1c7      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5e2:	4b30      	ldr	r3, [pc, #192]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 0302 	and.w	r3, r3, #2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0f0      	beq.n	800c5d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5ee:	4b2d      	ldr	r3, [pc, #180]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	4929      	ldr	r1, [pc, #164]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c5fe:	4313      	orrs	r3, r2
 800c600:	600b      	str	r3, [r1, #0]
 800c602:	e018      	b.n	800c636 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c604:	4b27      	ldr	r3, [pc, #156]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a26      	ldr	r2, [pc, #152]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c60a:	f023 0301 	bic.w	r3, r3, #1
 800c60e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c610:	f7fd f94a 	bl	80098a8 <HAL_GetTick>
 800c614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c616:	e008      	b.n	800c62a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c618:	f7fd f946 	bl	80098a8 <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	2b02      	cmp	r3, #2
 800c624:	d901      	bls.n	800c62a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e1a3      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c62a:	4b1e      	ldr	r3, [pc, #120]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 0302 	and.w	r3, r3, #2
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1f0      	bne.n	800c618 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 0308 	and.w	r3, r3, #8
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d038      	beq.n	800c6b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d019      	beq.n	800c67e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c64a:	4b16      	ldr	r3, [pc, #88]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c64e:	4a15      	ldr	r2, [pc, #84]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c650:	f043 0301 	orr.w	r3, r3, #1
 800c654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c656:	f7fd f927 	bl	80098a8 <HAL_GetTick>
 800c65a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c65c:	e008      	b.n	800c670 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c65e:	f7fd f923 	bl	80098a8 <HAL_GetTick>
 800c662:	4602      	mov	r2, r0
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d901      	bls.n	800c670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	e180      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c670:	4b0c      	ldr	r3, [pc, #48]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c674:	f003 0302 	and.w	r3, r3, #2
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d0f0      	beq.n	800c65e <HAL_RCC_OscConfig+0x23a>
 800c67c:	e01a      	b.n	800c6b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c682:	4a08      	ldr	r2, [pc, #32]	; (800c6a4 <HAL_RCC_OscConfig+0x280>)
 800c684:	f023 0301 	bic.w	r3, r3, #1
 800c688:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c68a:	f7fd f90d 	bl	80098a8 <HAL_GetTick>
 800c68e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c690:	e00a      	b.n	800c6a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c692:	f7fd f909 	bl	80098a8 <HAL_GetTick>
 800c696:	4602      	mov	r2, r0
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d903      	bls.n	800c6a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e166      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
 800c6a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6a8:	4b92      	ldr	r3, [pc, #584]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1ee      	bne.n	800c692 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0304 	and.w	r3, r3, #4
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80a4 	beq.w	800c80a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6c2:	4b8c      	ldr	r3, [pc, #560]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10d      	bne.n	800c6ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6ce:	4b89      	ldr	r3, [pc, #548]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d2:	4a88      	ldr	r2, [pc, #544]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c6d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6d8:	6413      	str	r3, [r2, #64]	; 0x40
 800c6da:	4b86      	ldr	r3, [pc, #536]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6e2:	60bb      	str	r3, [r7, #8]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6ea:	4b83      	ldr	r3, [pc, #524]	; (800c8f8 <HAL_RCC_OscConfig+0x4d4>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d118      	bne.n	800c728 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c6f6:	4b80      	ldr	r3, [pc, #512]	; (800c8f8 <HAL_RCC_OscConfig+0x4d4>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a7f      	ldr	r2, [pc, #508]	; (800c8f8 <HAL_RCC_OscConfig+0x4d4>)
 800c6fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c702:	f7fd f8d1 	bl	80098a8 <HAL_GetTick>
 800c706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c708:	e008      	b.n	800c71c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c70a:	f7fd f8cd 	bl	80098a8 <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	2b64      	cmp	r3, #100	; 0x64
 800c716:	d901      	bls.n	800c71c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e12a      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c71c:	4b76      	ldr	r3, [pc, #472]	; (800c8f8 <HAL_RCC_OscConfig+0x4d4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c724:	2b00      	cmp	r3, #0
 800c726:	d0f0      	beq.n	800c70a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d106      	bne.n	800c73e <HAL_RCC_OscConfig+0x31a>
 800c730:	4b70      	ldr	r3, [pc, #448]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c734:	4a6f      	ldr	r2, [pc, #444]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c736:	f043 0301 	orr.w	r3, r3, #1
 800c73a:	6713      	str	r3, [r2, #112]	; 0x70
 800c73c:	e02d      	b.n	800c79a <HAL_RCC_OscConfig+0x376>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10c      	bne.n	800c760 <HAL_RCC_OscConfig+0x33c>
 800c746:	4b6b      	ldr	r3, [pc, #428]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c74a:	4a6a      	ldr	r2, [pc, #424]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c74c:	f023 0301 	bic.w	r3, r3, #1
 800c750:	6713      	str	r3, [r2, #112]	; 0x70
 800c752:	4b68      	ldr	r3, [pc, #416]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c756:	4a67      	ldr	r2, [pc, #412]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c758:	f023 0304 	bic.w	r3, r3, #4
 800c75c:	6713      	str	r3, [r2, #112]	; 0x70
 800c75e:	e01c      	b.n	800c79a <HAL_RCC_OscConfig+0x376>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	2b05      	cmp	r3, #5
 800c766:	d10c      	bne.n	800c782 <HAL_RCC_OscConfig+0x35e>
 800c768:	4b62      	ldr	r3, [pc, #392]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76c:	4a61      	ldr	r2, [pc, #388]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c76e:	f043 0304 	orr.w	r3, r3, #4
 800c772:	6713      	str	r3, [r2, #112]	; 0x70
 800c774:	4b5f      	ldr	r3, [pc, #380]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c778:	4a5e      	ldr	r2, [pc, #376]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c77a:	f043 0301 	orr.w	r3, r3, #1
 800c77e:	6713      	str	r3, [r2, #112]	; 0x70
 800c780:	e00b      	b.n	800c79a <HAL_RCC_OscConfig+0x376>
 800c782:	4b5c      	ldr	r3, [pc, #368]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c786:	4a5b      	ldr	r2, [pc, #364]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c788:	f023 0301 	bic.w	r3, r3, #1
 800c78c:	6713      	str	r3, [r2, #112]	; 0x70
 800c78e:	4b59      	ldr	r3, [pc, #356]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c792:	4a58      	ldr	r2, [pc, #352]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c794:	f023 0304 	bic.w	r3, r3, #4
 800c798:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d015      	beq.n	800c7ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7a2:	f7fd f881 	bl	80098a8 <HAL_GetTick>
 800c7a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7a8:	e00a      	b.n	800c7c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7aa:	f7fd f87d 	bl	80098a8 <HAL_GetTick>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d901      	bls.n	800c7c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e0d8      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7c0:	4b4c      	ldr	r3, [pc, #304]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d0ee      	beq.n	800c7aa <HAL_RCC_OscConfig+0x386>
 800c7cc:	e014      	b.n	800c7f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7ce:	f7fd f86b 	bl	80098a8 <HAL_GetTick>
 800c7d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7d4:	e00a      	b.n	800c7ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c7d6:	f7fd f867 	bl	80098a8 <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d901      	bls.n	800c7ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c7e8:	2303      	movs	r3, #3
 800c7ea:	e0c2      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7ec:	4b41      	ldr	r3, [pc, #260]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7f0:	f003 0302 	and.w	r3, r3, #2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1ee      	bne.n	800c7d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d105      	bne.n	800c80a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7fe:	4b3d      	ldr	r3, [pc, #244]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c802:	4a3c      	ldr	r2, [pc, #240]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c808:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 80ae 	beq.w	800c970 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c814:	4b37      	ldr	r3, [pc, #220]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	f003 030c 	and.w	r3, r3, #12
 800c81c:	2b08      	cmp	r3, #8
 800c81e:	d06d      	beq.n	800c8fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d14b      	bne.n	800c8c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c828:	4b32      	ldr	r3, [pc, #200]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a31      	ldr	r2, [pc, #196]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c82e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c834:	f7fd f838 	bl	80098a8 <HAL_GetTick>
 800c838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c83a:	e008      	b.n	800c84e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c83c:	f7fd f834 	bl	80098a8 <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d901      	bls.n	800c84e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e091      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c84e:	4b29      	ldr	r3, [pc, #164]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1f0      	bne.n	800c83c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	69da      	ldr	r2, [r3, #28]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c868:	019b      	lsls	r3, r3, #6
 800c86a:	431a      	orrs	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	085b      	lsrs	r3, r3, #1
 800c872:	3b01      	subs	r3, #1
 800c874:	041b      	lsls	r3, r3, #16
 800c876:	431a      	orrs	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	061b      	lsls	r3, r3, #24
 800c87e:	431a      	orrs	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c884:	071b      	lsls	r3, r3, #28
 800c886:	491b      	ldr	r1, [pc, #108]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c888:	4313      	orrs	r3, r2
 800c88a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c88c:	4b19      	ldr	r3, [pc, #100]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a18      	ldr	r2, [pc, #96]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c898:	f7fd f806 	bl	80098a8 <HAL_GetTick>
 800c89c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c89e:	e008      	b.n	800c8b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8a0:	f7fd f802 	bl	80098a8 <HAL_GetTick>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d901      	bls.n	800c8b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e05f      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8b2:	4b10      	ldr	r3, [pc, #64]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0f0      	beq.n	800c8a0 <HAL_RCC_OscConfig+0x47c>
 800c8be:	e057      	b.n	800c970 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8c0:	4b0c      	ldr	r3, [pc, #48]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a0b      	ldr	r2, [pc, #44]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c8c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8cc:	f7fc ffec 	bl	80098a8 <HAL_GetTick>
 800c8d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8d2:	e008      	b.n	800c8e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8d4:	f7fc ffe8 	bl	80098a8 <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d901      	bls.n	800c8e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e045      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8e6:	4b03      	ldr	r3, [pc, #12]	; (800c8f4 <HAL_RCC_OscConfig+0x4d0>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1f0      	bne.n	800c8d4 <HAL_RCC_OscConfig+0x4b0>
 800c8f2:	e03d      	b.n	800c970 <HAL_RCC_OscConfig+0x54c>
 800c8f4:	40023800 	.word	0x40023800
 800c8f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c8fc:	4b1f      	ldr	r3, [pc, #124]	; (800c97c <HAL_RCC_OscConfig+0x558>)
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d030      	beq.n	800c96c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c914:	429a      	cmp	r2, r3
 800c916:	d129      	bne.n	800c96c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c922:	429a      	cmp	r2, r3
 800c924:	d122      	bne.n	800c96c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c92c:	4013      	ands	r3, r2
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c932:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c934:	4293      	cmp	r3, r2
 800c936:	d119      	bne.n	800c96c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c942:	085b      	lsrs	r3, r3, #1
 800c944:	3b01      	subs	r3, #1
 800c946:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c948:	429a      	cmp	r2, r3
 800c94a:	d10f      	bne.n	800c96c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c956:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c958:	429a      	cmp	r2, r3
 800c95a:	d107      	bne.n	800c96c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c966:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c968:	429a      	cmp	r2, r3
 800c96a:	d001      	beq.n	800c970 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	e000      	b.n	800c972 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	40023800 	.word	0x40023800

0800c980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e0d0      	b.n	800cb3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c998:	4b6a      	ldr	r3, [pc, #424]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 030f 	and.w	r3, r3, #15
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d910      	bls.n	800c9c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9a6:	4b67      	ldr	r3, [pc, #412]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f023 020f 	bic.w	r2, r3, #15
 800c9ae:	4965      	ldr	r1, [pc, #404]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9b6:	4b63      	ldr	r3, [pc, #396]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 030f 	and.w	r3, r3, #15
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d001      	beq.n	800c9c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e0b8      	b.n	800cb3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f003 0302 	and.w	r3, r3, #2
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d020      	beq.n	800ca16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d005      	beq.n	800c9ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c9e0:	4b59      	ldr	r3, [pc, #356]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	4a58      	ldr	r2, [pc, #352]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800c9e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c9ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0308 	and.w	r3, r3, #8
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d005      	beq.n	800ca04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c9f8:	4b53      	ldr	r3, [pc, #332]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	4a52      	ldr	r2, [pc, #328]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800c9fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ca02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca04:	4b50      	ldr	r3, [pc, #320]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	494d      	ldr	r1, [pc, #308]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca12:	4313      	orrs	r3, r2
 800ca14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d040      	beq.n	800caa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d107      	bne.n	800ca3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca2a:	4b47      	ldr	r3, [pc, #284]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d115      	bne.n	800ca62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e07f      	b.n	800cb3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d107      	bne.n	800ca52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca42:	4b41      	ldr	r3, [pc, #260]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d109      	bne.n	800ca62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e073      	b.n	800cb3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca52:	4b3d      	ldr	r3, [pc, #244]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e06b      	b.n	800cb3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ca62:	4b39      	ldr	r3, [pc, #228]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	f023 0203 	bic.w	r2, r3, #3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	4936      	ldr	r1, [pc, #216]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca70:	4313      	orrs	r3, r2
 800ca72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca74:	f7fc ff18 	bl	80098a8 <HAL_GetTick>
 800ca78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca7a:	e00a      	b.n	800ca92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca7c:	f7fc ff14 	bl	80098a8 <HAL_GetTick>
 800ca80:	4602      	mov	r2, r0
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d901      	bls.n	800ca92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e053      	b.n	800cb3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca92:	4b2d      	ldr	r3, [pc, #180]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	f003 020c 	and.w	r2, r3, #12
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d1eb      	bne.n	800ca7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800caa4:	4b27      	ldr	r3, [pc, #156]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 030f 	and.w	r3, r3, #15
 800caac:	683a      	ldr	r2, [r7, #0]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d210      	bcs.n	800cad4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cab2:	4b24      	ldr	r3, [pc, #144]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f023 020f 	bic.w	r2, r3, #15
 800caba:	4922      	ldr	r1, [pc, #136]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cac2:	4b20      	ldr	r3, [pc, #128]	; (800cb44 <HAL_RCC_ClockConfig+0x1c4>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 030f 	and.w	r3, r3, #15
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d001      	beq.n	800cad4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e032      	b.n	800cb3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 0304 	and.w	r3, r3, #4
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d008      	beq.n	800caf2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cae0:	4b19      	ldr	r3, [pc, #100]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	4916      	ldr	r1, [pc, #88]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800caee:	4313      	orrs	r3, r2
 800caf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0308 	and.w	r3, r3, #8
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d009      	beq.n	800cb12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	00db      	lsls	r3, r3, #3
 800cb0c:	490e      	ldr	r1, [pc, #56]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cb12:	f000 f821 	bl	800cb58 <HAL_RCC_GetSysClockFreq>
 800cb16:	4601      	mov	r1, r0
 800cb18:	4b0b      	ldr	r3, [pc, #44]	; (800cb48 <HAL_RCC_ClockConfig+0x1c8>)
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	091b      	lsrs	r3, r3, #4
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <HAL_RCC_ClockConfig+0x1cc>)
 800cb24:	5cd3      	ldrb	r3, [r2, r3]
 800cb26:	fa21 f303 	lsr.w	r3, r1, r3
 800cb2a:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <HAL_RCC_ClockConfig+0x1d0>)
 800cb2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cb2e:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <HAL_RCC_ClockConfig+0x1d4>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fc f960 	bl	8008df8 <HAL_InitTick>

  return HAL_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	40023c00 	.word	0x40023c00
 800cb48:	40023800 	.word	0x40023800
 800cb4c:	08018774 	.word	0x08018774
 800cb50:	20000198 	.word	0x20000198
 800cb54:	2000019c 	.word	0x2000019c

0800cb58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	607b      	str	r3, [r7, #4]
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	2300      	movs	r3, #0
 800cb68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cb6e:	4b50      	ldr	r3, [pc, #320]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f003 030c 	and.w	r3, r3, #12
 800cb76:	2b04      	cmp	r3, #4
 800cb78:	d007      	beq.n	800cb8a <HAL_RCC_GetSysClockFreq+0x32>
 800cb7a:	2b08      	cmp	r3, #8
 800cb7c:	d008      	beq.n	800cb90 <HAL_RCC_GetSysClockFreq+0x38>
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f040 808d 	bne.w	800cc9e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cb84:	4b4b      	ldr	r3, [pc, #300]	; (800ccb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cb86:	60bb      	str	r3, [r7, #8]
      break;
 800cb88:	e08c      	b.n	800cca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cb8a:	4b4b      	ldr	r3, [pc, #300]	; (800ccb8 <HAL_RCC_GetSysClockFreq+0x160>)
 800cb8c:	60bb      	str	r3, [r7, #8]
      break;
 800cb8e:	e089      	b.n	800cca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cb90:	4b47      	ldr	r3, [pc, #284]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb98:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cb9a:	4b45      	ldr	r3, [pc, #276]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d023      	beq.n	800cbee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cba6:	4b42      	ldr	r3, [pc, #264]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	099b      	lsrs	r3, r3, #6
 800cbac:	f04f 0400 	mov.w	r4, #0
 800cbb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cbb4:	f04f 0200 	mov.w	r2, #0
 800cbb8:	ea03 0501 	and.w	r5, r3, r1
 800cbbc:	ea04 0602 	and.w	r6, r4, r2
 800cbc0:	4a3d      	ldr	r2, [pc, #244]	; (800ccb8 <HAL_RCC_GetSysClockFreq+0x160>)
 800cbc2:	fb02 f106 	mul.w	r1, r2, r6
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	fb02 f205 	mul.w	r2, r2, r5
 800cbcc:	440a      	add	r2, r1
 800cbce:	493a      	ldr	r1, [pc, #232]	; (800ccb8 <HAL_RCC_GetSysClockFreq+0x160>)
 800cbd0:	fba5 0101 	umull	r0, r1, r5, r1
 800cbd4:	1853      	adds	r3, r2, r1
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f04f 0400 	mov.w	r4, #0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	4623      	mov	r3, r4
 800cbe2:	f7f3 fb85 	bl	80002f0 <__aeabi_uldivmod>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	460c      	mov	r4, r1
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	e049      	b.n	800cc82 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cbee:	4b30      	ldr	r3, [pc, #192]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	099b      	lsrs	r3, r3, #6
 800cbf4:	f04f 0400 	mov.w	r4, #0
 800cbf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cbfc:	f04f 0200 	mov.w	r2, #0
 800cc00:	ea03 0501 	and.w	r5, r3, r1
 800cc04:	ea04 0602 	and.w	r6, r4, r2
 800cc08:	4629      	mov	r1, r5
 800cc0a:	4632      	mov	r2, r6
 800cc0c:	f04f 0300 	mov.w	r3, #0
 800cc10:	f04f 0400 	mov.w	r4, #0
 800cc14:	0154      	lsls	r4, r2, #5
 800cc16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cc1a:	014b      	lsls	r3, r1, #5
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4622      	mov	r2, r4
 800cc20:	1b49      	subs	r1, r1, r5
 800cc22:	eb62 0206 	sbc.w	r2, r2, r6
 800cc26:	f04f 0300 	mov.w	r3, #0
 800cc2a:	f04f 0400 	mov.w	r4, #0
 800cc2e:	0194      	lsls	r4, r2, #6
 800cc30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cc34:	018b      	lsls	r3, r1, #6
 800cc36:	1a5b      	subs	r3, r3, r1
 800cc38:	eb64 0402 	sbc.w	r4, r4, r2
 800cc3c:	f04f 0100 	mov.w	r1, #0
 800cc40:	f04f 0200 	mov.w	r2, #0
 800cc44:	00e2      	lsls	r2, r4, #3
 800cc46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cc4a:	00d9      	lsls	r1, r3, #3
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	4614      	mov	r4, r2
 800cc50:	195b      	adds	r3, r3, r5
 800cc52:	eb44 0406 	adc.w	r4, r4, r6
 800cc56:	f04f 0100 	mov.w	r1, #0
 800cc5a:	f04f 0200 	mov.w	r2, #0
 800cc5e:	02a2      	lsls	r2, r4, #10
 800cc60:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cc64:	0299      	lsls	r1, r3, #10
 800cc66:	460b      	mov	r3, r1
 800cc68:	4614      	mov	r4, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f04f 0400 	mov.w	r4, #0
 800cc74:	461a      	mov	r2, r3
 800cc76:	4623      	mov	r3, r4
 800cc78:	f7f3 fb3a 	bl	80002f0 <__aeabi_uldivmod>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cc82:	4b0b      	ldr	r3, [pc, #44]	; (800ccb0 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	0c1b      	lsrs	r3, r3, #16
 800cc88:	f003 0303 	and.w	r3, r3, #3
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9a:	60bb      	str	r3, [r7, #8]
      break;
 800cc9c:	e002      	b.n	800cca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc9e:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cca0:	60bb      	str	r3, [r7, #8]
      break;
 800cca2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cca4:	68bb      	ldr	r3, [r7, #8]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3714      	adds	r7, #20
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	40023800 	.word	0x40023800
 800ccb4:	00f42400 	.word	0x00f42400
 800ccb8:	017d7840 	.word	0x017d7840

0800ccbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ccc0:	4b03      	ldr	r3, [pc, #12]	; (800ccd0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	20000198 	.word	0x20000198

0800ccd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ccd8:	f7ff fff0 	bl	800ccbc <HAL_RCC_GetHCLKFreq>
 800ccdc:	4601      	mov	r1, r0
 800ccde:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	0a9b      	lsrs	r3, r3, #10
 800cce4:	f003 0307 	and.w	r3, r3, #7
 800cce8:	4a03      	ldr	r2, [pc, #12]	; (800ccf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccea:	5cd3      	ldrb	r3, [r2, r3]
 800ccec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	40023800 	.word	0x40023800
 800ccf8:	08018784 	.word	0x08018784

0800ccfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cd00:	f7ff ffdc 	bl	800ccbc <HAL_RCC_GetHCLKFreq>
 800cd04:	4601      	mov	r1, r0
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	0b5b      	lsrs	r3, r3, #13
 800cd0c:	f003 0307 	and.w	r3, r3, #7
 800cd10:	4a03      	ldr	r2, [pc, #12]	; (800cd20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cd12:	5cd3      	ldrb	r3, [r2, r3]
 800cd14:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	40023800 	.word	0x40023800
 800cd20:	08018784 	.word	0x08018784

0800cd24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	220f      	movs	r2, #15
 800cd32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cd34:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f003 0203 	and.w	r2, r3, #3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cd40:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cd4c:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cd58:	4b09      	ldr	r3, [pc, #36]	; (800cd80 <HAL_RCC_GetClockConfig+0x5c>)
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	08db      	lsrs	r3, r3, #3
 800cd5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd66:	4b07      	ldr	r3, [pc, #28]	; (800cd84 <HAL_RCC_GetClockConfig+0x60>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 020f 	and.w	r2, r3, #15
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	601a      	str	r2, [r3, #0]
}
 800cd72:	bf00      	nop
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	40023800 	.word	0x40023800
 800cd84:	40023c00 	.word	0x40023c00

0800cd88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d012      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cdb0:	4b69      	ldr	r3, [pc, #420]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	4a68      	ldr	r2, [pc, #416]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cdba:	6093      	str	r3, [r2, #8]
 800cdbc:	4b66      	ldr	r3, [pc, #408]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdbe:	689a      	ldr	r2, [r3, #8]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc4:	4964      	ldr	r1, [pc, #400]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d101      	bne.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d017      	beq.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cde2:	4b5d      	ldr	r3, [pc, #372]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cde4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cde8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf0:	4959      	ldr	r1, [pc, #356]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce00:	d101      	bne.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ce02:	2301      	movs	r3, #1
 800ce04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d017      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ce1e:	4b4e      	ldr	r3, [pc, #312]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2c:	494a      	ldr	r1, [pc, #296]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce3c:	d101      	bne.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 0320 	and.w	r3, r3, #32
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 808b 	beq.w	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ce6c:	4b3a      	ldr	r3, [pc, #232]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce70:	4a39      	ldr	r2, [pc, #228]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce76:	6413      	str	r3, [r2, #64]	; 0x40
 800ce78:	4b37      	ldr	r3, [pc, #220]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce80:	60bb      	str	r3, [r7, #8]
 800ce82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce84:	4b35      	ldr	r3, [pc, #212]	; (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a34      	ldr	r2, [pc, #208]	; (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ce8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce90:	f7fc fd0a 	bl	80098a8 <HAL_GetTick>
 800ce94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ce96:	e008      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce98:	f7fc fd06 	bl	80098a8 <HAL_GetTick>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	2b64      	cmp	r3, #100	; 0x64
 800cea4:	d901      	bls.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e38d      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ceaa:	4b2c      	ldr	r3, [pc, #176]	; (800cf5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0f0      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ceb6:	4b28      	ldr	r3, [pc, #160]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d035      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d02e      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ced4:	4b20      	ldr	r3, [pc, #128]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ced6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cedc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cede:	4b1e      	ldr	r3, [pc, #120]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee2:	4a1d      	ldr	r2, [pc, #116]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cee8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ceea:	4b1b      	ldr	r3, [pc, #108]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ceec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceee:	4a1a      	ldr	r2, [pc, #104]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cef6:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cefc:	4b16      	ldr	r3, [pc, #88]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cefe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf00:	f003 0301 	and.w	r3, r3, #1
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d114      	bne.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf08:	f7fc fcce 	bl	80098a8 <HAL_GetTick>
 800cf0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf0e:	e00a      	b.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf10:	f7fc fcca 	bl	80098a8 <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d901      	bls.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cf22:	2303      	movs	r3, #3
 800cf24:	e34f      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf26:	4b0c      	ldr	r3, [pc, #48]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf2a:	f003 0302 	and.w	r3, r3, #2
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0ee      	beq.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf3e:	d111      	bne.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cf4e:	400b      	ands	r3, r1
 800cf50:	4901      	ldr	r1, [pc, #4]	; (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	608b      	str	r3, [r1, #8]
 800cf56:	e00b      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800cf58:	40023800 	.word	0x40023800
 800cf5c:	40007000 	.word	0x40007000
 800cf60:	0ffffcff 	.word	0x0ffffcff
 800cf64:	4bb3      	ldr	r3, [pc, #716]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	4ab2      	ldr	r2, [pc, #712]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cf6e:	6093      	str	r3, [r2, #8]
 800cf70:	4bb0      	ldr	r3, [pc, #704]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf7c:	49ad      	ldr	r1, [pc, #692]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f003 0310 	and.w	r3, r3, #16
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d010      	beq.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cf8e:	4ba9      	ldr	r3, [pc, #676]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf94:	4aa7      	ldr	r2, [pc, #668]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cf96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cf9e:	4ba5      	ldr	r3, [pc, #660]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa8:	49a2      	ldr	r1, [pc, #648]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00a      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cfbc:	4b9d      	ldr	r3, [pc, #628]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfca:	499a      	ldr	r1, [pc, #616]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cfde:	4b95      	ldr	r3, [pc, #596]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfec:	4991      	ldr	r1, [pc, #580]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800cfee:	4313      	orrs	r3, r2
 800cff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00a      	beq.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d000:	4b8c      	ldr	r3, [pc, #560]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d00e:	4989      	ldr	r1, [pc, #548]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d010:	4313      	orrs	r3, r2
 800d012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00a      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d022:	4b84      	ldr	r3, [pc, #528]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d030:	4980      	ldr	r1, [pc, #512]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d032:	4313      	orrs	r3, r2
 800d034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00a      	beq.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d044:	4b7b      	ldr	r3, [pc, #492]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d04a:	f023 0203 	bic.w	r2, r3, #3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d052:	4978      	ldr	r1, [pc, #480]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d054:	4313      	orrs	r3, r2
 800d056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d066:	4b73      	ldr	r3, [pc, #460]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d06c:	f023 020c 	bic.w	r2, r3, #12
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d074:	496f      	ldr	r1, [pc, #444]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d076:	4313      	orrs	r3, r2
 800d078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00a      	beq.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d088:	4b6a      	ldr	r3, [pc, #424]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d08e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d096:	4967      	ldr	r1, [pc, #412]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d098:	4313      	orrs	r3, r2
 800d09a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d0aa:	4b62      	ldr	r3, [pc, #392]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b8:	495e      	ldr	r1, [pc, #376]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00a      	beq.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d0cc:	4b59      	ldr	r3, [pc, #356]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0da:	4956      	ldr	r1, [pc, #344]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00a      	beq.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d0ee:	4b51      	ldr	r3, [pc, #324]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0fc:	494d      	ldr	r1, [pc, #308]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0fe:	4313      	orrs	r3, r2
 800d100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00a      	beq.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d110:	4b48      	ldr	r3, [pc, #288]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d11e:	4945      	ldr	r1, [pc, #276]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d120:	4313      	orrs	r3, r2
 800d122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d00a      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d132:	4b40      	ldr	r3, [pc, #256]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d140:	493c      	ldr	r1, [pc, #240]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d142:	4313      	orrs	r3, r2
 800d144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00a      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d154:	4b37      	ldr	r3, [pc, #220]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d15a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d162:	4934      	ldr	r1, [pc, #208]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d164:	4313      	orrs	r3, r2
 800d166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d011      	beq.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d176:	4b2f      	ldr	r3, [pc, #188]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d17c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d184:	492b      	ldr	r1, [pc, #172]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d186:	4313      	orrs	r3, r2
 800d188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d194:	d101      	bne.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d196:	2301      	movs	r3, #1
 800d198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 0308 	and.w	r3, r3, #8
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00a      	beq.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d1b6:	4b1f      	ldr	r3, [pc, #124]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1c4:	491b      	ldr	r1, [pc, #108]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00b      	beq.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d1d8:	4b16      	ldr	r3, [pc, #88]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1e8:	4912      	ldr	r1, [pc, #72]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00b      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d1fc:	4b0d      	ldr	r3, [pc, #52]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d202:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20c:	4909      	ldr	r1, [pc, #36]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d20e:	4313      	orrs	r3, r2
 800d210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d00f      	beq.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d220:	4b04      	ldr	r3, [pc, #16]	; (800d234 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d230:	e002      	b.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d232:	bf00      	nop
 800d234:	40023800 	.word	0x40023800
 800d238:	4985      	ldr	r1, [pc, #532]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00b      	beq.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d24c:	4b80      	ldr	r3, [pc, #512]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d25c:	497c      	ldr	r1, [pc, #496]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	2b01      	cmp	r3, #1
 800d268:	d005      	beq.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d272:	f040 80d6 	bne.w	800d422 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d276:	4b76      	ldr	r3, [pc, #472]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a75      	ldr	r2, [pc, #468]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d27c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d282:	f7fc fb11 	bl	80098a8 <HAL_GetTick>
 800d286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d288:	e008      	b.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d28a:	f7fc fb0d 	bl	80098a8 <HAL_GetTick>
 800d28e:	4602      	mov	r2, r0
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	2b64      	cmp	r3, #100	; 0x64
 800d296:	d901      	bls.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d298:	2303      	movs	r3, #3
 800d29a:	e194      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d29c:	4b6c      	ldr	r3, [pc, #432]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1f0      	bne.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d021      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d11d      	bne.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d2bc:	4b64      	ldr	r3, [pc, #400]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2c2:	0c1b      	lsrs	r3, r3, #16
 800d2c4:	f003 0303 	and.w	r3, r3, #3
 800d2c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d2ca:	4b61      	ldr	r3, [pc, #388]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2d0:	0e1b      	lsrs	r3, r3, #24
 800d2d2:	f003 030f 	and.w	r3, r3, #15
 800d2d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	019a      	lsls	r2, r3, #6
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	041b      	lsls	r3, r3, #16
 800d2e2:	431a      	orrs	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	061b      	lsls	r3, r3, #24
 800d2e8:	431a      	orrs	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	071b      	lsls	r3, r3, #28
 800d2f0:	4957      	ldr	r1, [pc, #348]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d300:	2b00      	cmp	r3, #0
 800d302:	d004      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d30c:	d00a      	beq.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d316:	2b00      	cmp	r3, #0
 800d318:	d02e      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d322:	d129      	bne.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d324:	4b4a      	ldr	r3, [pc, #296]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d32a:	0c1b      	lsrs	r3, r3, #16
 800d32c:	f003 0303 	and.w	r3, r3, #3
 800d330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d332:	4b47      	ldr	r3, [pc, #284]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d338:	0f1b      	lsrs	r3, r3, #28
 800d33a:	f003 0307 	and.w	r3, r3, #7
 800d33e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	019a      	lsls	r2, r3, #6
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	041b      	lsls	r3, r3, #16
 800d34a:	431a      	orrs	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	061b      	lsls	r3, r3, #24
 800d352:	431a      	orrs	r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	071b      	lsls	r3, r3, #28
 800d358:	493d      	ldr	r1, [pc, #244]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d35a:	4313      	orrs	r3, r2
 800d35c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d360:	4b3b      	ldr	r3, [pc, #236]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d366:	f023 021f 	bic.w	r2, r3, #31
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	3b01      	subs	r3, #1
 800d370:	4937      	ldr	r1, [pc, #220]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d372:	4313      	orrs	r3, r2
 800d374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d380:	2b00      	cmp	r3, #0
 800d382:	d01d      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d384:	4b32      	ldr	r3, [pc, #200]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d38a:	0e1b      	lsrs	r3, r3, #24
 800d38c:	f003 030f 	and.w	r3, r3, #15
 800d390:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d392:	4b2f      	ldr	r3, [pc, #188]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d398:	0f1b      	lsrs	r3, r3, #28
 800d39a:	f003 0307 	and.w	r3, r3, #7
 800d39e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	019a      	lsls	r2, r3, #6
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	041b      	lsls	r3, r3, #16
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	061b      	lsls	r3, r3, #24
 800d3b2:	431a      	orrs	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	071b      	lsls	r3, r3, #28
 800d3b8:	4925      	ldr	r1, [pc, #148]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d011      	beq.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	019a      	lsls	r2, r3, #6
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	041b      	lsls	r3, r3, #16
 800d3d8:	431a      	orrs	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	061b      	lsls	r3, r3, #24
 800d3e0:	431a      	orrs	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	071b      	lsls	r3, r3, #28
 800d3e8:	4919      	ldr	r1, [pc, #100]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d3f0:	4b17      	ldr	r3, [pc, #92]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a16      	ldr	r2, [pc, #88]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3fc:	f7fc fa54 	bl	80098a8 <HAL_GetTick>
 800d400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d402:	e008      	b.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d404:	f7fc fa50 	bl	80098a8 <HAL_GetTick>
 800d408:	4602      	mov	r2, r0
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2b64      	cmp	r3, #100	; 0x64
 800d410:	d901      	bls.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	e0d7      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d416:	4b0e      	ldr	r3, [pc, #56]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d0f0      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	2b01      	cmp	r3, #1
 800d426:	f040 80cd 	bne.w	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d42a:	4b09      	ldr	r3, [pc, #36]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a08      	ldr	r2, [pc, #32]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d436:	f7fc fa37 	bl	80098a8 <HAL_GetTick>
 800d43a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d43c:	e00a      	b.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d43e:	f7fc fa33 	bl	80098a8 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	2b64      	cmp	r3, #100	; 0x64
 800d44a:	d903      	bls.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d44c:	2303      	movs	r3, #3
 800d44e:	e0ba      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d450:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d454:	4b5e      	ldr	r3, [pc, #376]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d45c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d460:	d0ed      	beq.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d472:	2b00      	cmp	r3, #0
 800d474:	d009      	beq.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d02e      	beq.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d486:	2b00      	cmp	r3, #0
 800d488:	d12a      	bne.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d48a:	4b51      	ldr	r3, [pc, #324]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d490:	0c1b      	lsrs	r3, r3, #16
 800d492:	f003 0303 	and.w	r3, r3, #3
 800d496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d498:	4b4d      	ldr	r3, [pc, #308]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d49e:	0f1b      	lsrs	r3, r3, #28
 800d4a0:	f003 0307 	and.w	r3, r3, #7
 800d4a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	019a      	lsls	r2, r3, #6
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	041b      	lsls	r3, r3, #16
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	061b      	lsls	r3, r3, #24
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	071b      	lsls	r3, r3, #28
 800d4be:	4944      	ldr	r1, [pc, #272]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d4c6:	4b42      	ldr	r3, [pc, #264]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	021b      	lsls	r3, r3, #8
 800d4d8:	493d      	ldr	r1, [pc, #244]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d022      	beq.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4f4:	d11d      	bne.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d4f6:	4b36      	ldr	r3, [pc, #216]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4fc:	0e1b      	lsrs	r3, r3, #24
 800d4fe:	f003 030f 	and.w	r3, r3, #15
 800d502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d504:	4b32      	ldr	r3, [pc, #200]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d50a:	0f1b      	lsrs	r3, r3, #28
 800d50c:	f003 0307 	and.w	r3, r3, #7
 800d510:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	019a      	lsls	r2, r3, #6
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6a1b      	ldr	r3, [r3, #32]
 800d51c:	041b      	lsls	r3, r3, #16
 800d51e:	431a      	orrs	r2, r3
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	061b      	lsls	r3, r3, #24
 800d524:	431a      	orrs	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	071b      	lsls	r3, r3, #28
 800d52a:	4929      	ldr	r1, [pc, #164]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d52c:	4313      	orrs	r3, r2
 800d52e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 0308 	and.w	r3, r3, #8
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d028      	beq.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d53e:	4b24      	ldr	r3, [pc, #144]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d544:	0e1b      	lsrs	r3, r3, #24
 800d546:	f003 030f 	and.w	r3, r3, #15
 800d54a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d54c:	4b20      	ldr	r3, [pc, #128]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d552:	0c1b      	lsrs	r3, r3, #16
 800d554:	f003 0303 	and.w	r3, r3, #3
 800d558:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	019a      	lsls	r2, r3, #6
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	041b      	lsls	r3, r3, #16
 800d564:	431a      	orrs	r2, r3
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	061b      	lsls	r3, r3, #24
 800d56a:	431a      	orrs	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	69db      	ldr	r3, [r3, #28]
 800d570:	071b      	lsls	r3, r3, #28
 800d572:	4917      	ldr	r1, [pc, #92]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d574:	4313      	orrs	r3, r2
 800d576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d57a:	4b15      	ldr	r3, [pc, #84]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d57c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d588:	4911      	ldr	r1, [pc, #68]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d58a:	4313      	orrs	r3, r2
 800d58c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d590:	4b0f      	ldr	r3, [pc, #60]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a0e      	ldr	r2, [pc, #56]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d59a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d59c:	f7fc f984 	bl	80098a8 <HAL_GetTick>
 800d5a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d5a2:	e008      	b.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d5a4:	f7fc f980 	bl	80098a8 <HAL_GetTick>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	2b64      	cmp	r3, #100	; 0x64
 800d5b0:	d901      	bls.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	e007      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d5b6:	4b06      	ldr	r3, [pc, #24]	; (800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5c2:	d1ef      	bne.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800d5c4:	2300      	movs	r3, #0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3720      	adds	r7, #32
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	40023800 	.word	0x40023800

0800d5d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d101      	bne.n	800d5e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e06b      	b.n	800d6be <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7f5b      	ldrb	r3, [r3, #29]
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d105      	bne.n	800d5fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7fb f908 	bl	800880c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2202      	movs	r2, #2
 800d600:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	22ca      	movs	r2, #202	; 0xca
 800d608:	625a      	str	r2, [r3, #36]	; 0x24
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2253      	movs	r2, #83	; 0x53
 800d610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f85a 	bl	800d6cc <RTC_EnterInitMode>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d008      	beq.n	800d630 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	22ff      	movs	r2, #255	; 0xff
 800d624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2204      	movs	r2, #4
 800d62a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	e046      	b.n	800d6be <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6899      	ldr	r1, [r3, #8]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	4b23      	ldr	r3, [pc, #140]	; (800d6c8 <HAL_RTC_Init+0xf4>)
 800d63c:	400b      	ands	r3, r1
 800d63e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6899      	ldr	r1, [r3, #8]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	431a      	orrs	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	431a      	orrs	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	68d2      	ldr	r2, [r2, #12]
 800d666:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6919      	ldr	r1, [r3, #16]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	041a      	lsls	r2, r3, #16
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	430a      	orrs	r2, r1
 800d67a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d68a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f022 0208 	bic.w	r2, r2, #8
 800d69a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	699a      	ldr	r2, [r3, #24]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	22ff      	movs	r2, #255	; 0xff
 800d6b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d6bc:	2300      	movs	r3, #0
  }
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	ff8fffbf 	.word	0xff8fffbf

0800d6cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d119      	bne.n	800d71a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d6f0:	f7fc f8da 	bl	80098a8 <HAL_GetTick>
 800d6f4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d6f6:	e009      	b.n	800d70c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d6f8:	f7fc f8d6 	bl	80098a8 <HAL_GetTick>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d706:	d901      	bls.n	800d70c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d708:	2303      	movs	r3, #3
 800d70a:	e007      	b.n	800d71c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0ee      	beq.n	800d6f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e084      	b.n	800d840 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b00      	cmp	r3, #0
 800d746:	d106      	bne.n	800d756 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7fb f875 	bl	8008840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2202      	movs	r2, #2
 800d75a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d76c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d776:	d902      	bls.n	800d77e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]
 800d77c:	e002      	b.n	800d784 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d77e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d782:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d78c:	d007      	beq.n	800d79e <HAL_SPI_Init+0x7a>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d796:	d002      	beq.n	800d79e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d10b      	bne.n	800d7be <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d7ae:	d903      	bls.n	800d7b8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2202      	movs	r2, #2
 800d7b4:	631a      	str	r2, [r3, #48]	; 0x30
 800d7b6:	e002      	b.n	800d7be <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	685a      	ldr	r2, [r3, #4]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	431a      	orrs	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	431a      	orrs	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7dc:	431a      	orrs	r2, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	69db      	ldr	r3, [r3, #28]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a1b      	ldr	r3, [r3, #32]
 800d7e8:	ea42 0103 	orr.w	r1, r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	430a      	orrs	r2, r1
 800d7f6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	0c1b      	lsrs	r3, r3, #16
 800d7fe:	f003 0204 	and.w	r2, r3, #4
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d806:	431a      	orrs	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80c:	431a      	orrs	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	ea42 0103 	orr.w	r1, r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	430a      	orrs	r2, r1
 800d81e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	69da      	ldr	r2, [r3, #28]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d82e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	603b      	str	r3, [r7, #0]
 800d854:	4613      	mov	r3, r2
 800d856:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d862:	2b01      	cmp	r3, #1
 800d864:	d101      	bne.n	800d86a <HAL_SPI_Transmit+0x22>
 800d866:	2302      	movs	r3, #2
 800d868:	e150      	b.n	800db0c <HAL_SPI_Transmit+0x2c4>
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d872:	f7fc f819 	bl	80098a8 <HAL_GetTick>
 800d876:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d878:	88fb      	ldrh	r3, [r7, #6]
 800d87a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b01      	cmp	r3, #1
 800d886:	d002      	beq.n	800d88e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d888:	2302      	movs	r3, #2
 800d88a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d88c:	e135      	b.n	800dafa <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <HAL_SPI_Transmit+0x52>
 800d894:	88fb      	ldrh	r3, [r7, #6]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d102      	bne.n	800d8a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d89e:	e12c      	b.n	800dafa <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2203      	movs	r2, #3
 800d8a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	88fa      	ldrh	r2, [r7, #6]
 800d8b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	88fa      	ldrh	r2, [r7, #6]
 800d8be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8ea:	d107      	bne.n	800d8fc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d8fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d906:	2b40      	cmp	r3, #64	; 0x40
 800d908:	d007      	beq.n	800d91a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d922:	d94b      	bls.n	800d9bc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <HAL_SPI_Transmit+0xea>
 800d92c:	8afb      	ldrh	r3, [r7, #22]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d13e      	bne.n	800d9b0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	881a      	ldrh	r2, [r3, #0]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d942:	1c9a      	adds	r2, r3, #2
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	3b01      	subs	r3, #1
 800d950:	b29a      	uxth	r2, r3
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d956:	e02b      	b.n	800d9b0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	f003 0302 	and.w	r3, r3, #2
 800d962:	2b02      	cmp	r3, #2
 800d964:	d112      	bne.n	800d98c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96a:	881a      	ldrh	r2, [r3, #0]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d976:	1c9a      	adds	r2, r3, #2
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d980:	b29b      	uxth	r3, r3
 800d982:	3b01      	subs	r3, #1
 800d984:	b29a      	uxth	r2, r3
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d98a:	e011      	b.n	800d9b0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d98c:	f7fb ff8c 	bl	80098a8 <HAL_GetTick>
 800d990:	4602      	mov	r2, r0
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d803      	bhi.n	800d9a4 <HAL_SPI_Transmit+0x15c>
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a2:	d102      	bne.n	800d9aa <HAL_SPI_Transmit+0x162>
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d102      	bne.n	800d9b0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d9ae:	e0a4      	b.n	800dafa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1ce      	bne.n	800d958 <HAL_SPI_Transmit+0x110>
 800d9ba:	e07c      	b.n	800dab6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d002      	beq.n	800d9ca <HAL_SPI_Transmit+0x182>
 800d9c4:	8afb      	ldrh	r3, [r7, #22]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d170      	bne.n	800daac <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d912      	bls.n	800d9fa <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d8:	881a      	ldrh	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e4:	1c9a      	adds	r2, r3, #2
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	3b02      	subs	r3, #2
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d9f8:	e058      	b.n	800daac <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	330c      	adds	r3, #12
 800da04:	7812      	ldrb	r2, [r2, #0]
 800da06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0c:	1c5a      	adds	r2, r3, #1
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da16:	b29b      	uxth	r3, r3
 800da18:	3b01      	subs	r3, #1
 800da1a:	b29a      	uxth	r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800da20:	e044      	b.n	800daac <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d12b      	bne.n	800da88 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da34:	b29b      	uxth	r3, r3
 800da36:	2b01      	cmp	r3, #1
 800da38:	d912      	bls.n	800da60 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da3e:	881a      	ldrh	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da4a:	1c9a      	adds	r2, r3, #2
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da54:	b29b      	uxth	r3, r3
 800da56:	3b02      	subs	r3, #2
 800da58:	b29a      	uxth	r2, r3
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da5e:	e025      	b.n	800daac <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	330c      	adds	r3, #12
 800da6a:	7812      	ldrb	r2, [r2, #0]
 800da6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da72:	1c5a      	adds	r2, r3, #1
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	3b01      	subs	r3, #1
 800da80:	b29a      	uxth	r2, r3
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da86:	e011      	b.n	800daac <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da88:	f7fb ff0e 	bl	80098a8 <HAL_GetTick>
 800da8c:	4602      	mov	r2, r0
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	429a      	cmp	r2, r3
 800da96:	d803      	bhi.n	800daa0 <HAL_SPI_Transmit+0x258>
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9e:	d102      	bne.n	800daa6 <HAL_SPI_Transmit+0x25e>
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d102      	bne.n	800daac <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800daa6:	2303      	movs	r3, #3
 800daa8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800daaa:	e026      	b.n	800dafa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1b5      	bne.n	800da22 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dab6:	69ba      	ldr	r2, [r7, #24]
 800dab8:	6839      	ldr	r1, [r7, #0]
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f000 fa20 	bl	800df00 <SPI_EndRxTxTransaction>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2220      	movs	r2, #32
 800daca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10a      	bne.n	800daea <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dad4:	2300      	movs	r3, #0
 800dad6:	613b      	str	r3, [r7, #16]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	613b      	str	r3, [r7, #16]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	613b      	str	r3, [r7, #16]
 800dae8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d002      	beq.n	800daf8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	77fb      	strb	r3, [r7, #31]
 800daf6:	e000      	b.n	800dafa <HAL_SPI_Transmit+0x2b2>
  }

error:
 800daf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800db0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3720      	adds	r7, #32
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b088      	sub	sp, #32
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	099b      	lsrs	r3, r3, #6
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10f      	bne.n	800db58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00a      	beq.n	800db58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	099b      	lsrs	r3, r3, #6
 800db46:	f003 0301 	and.w	r3, r3, #1
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d004      	beq.n	800db58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	4798      	blx	r3
    return;
 800db56:	e0d8      	b.n	800dd0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	085b      	lsrs	r3, r3, #1
 800db5c:	f003 0301 	and.w	r3, r3, #1
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00a      	beq.n	800db7a <HAL_SPI_IRQHandler+0x66>
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	09db      	lsrs	r3, r3, #7
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	4798      	blx	r3
    return;
 800db78:	e0c7      	b.n	800dd0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	095b      	lsrs	r3, r3, #5
 800db7e:	f003 0301 	and.w	r3, r3, #1
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10c      	bne.n	800dba0 <HAL_SPI_IRQHandler+0x8c>
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	099b      	lsrs	r3, r3, #6
 800db8a:	f003 0301 	and.w	r3, r3, #1
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d106      	bne.n	800dba0 <HAL_SPI_IRQHandler+0x8c>
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	0a1b      	lsrs	r3, r3, #8
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f000 80b5 	beq.w	800dd0a <HAL_SPI_IRQHandler+0x1f6>
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	095b      	lsrs	r3, r3, #5
 800dba4:	f003 0301 	and.w	r3, r3, #1
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f000 80ae 	beq.w	800dd0a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	099b      	lsrs	r3, r3, #6
 800dbb2:	f003 0301 	and.w	r3, r3, #1
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d023      	beq.n	800dc02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d011      	beq.n	800dbea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbca:	f043 0204 	orr.w	r2, r3, #4
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	617b      	str	r3, [r7, #20]
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	e00b      	b.n	800dc02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dbea:	2300      	movs	r3, #0
 800dbec:	613b      	str	r3, [r7, #16]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	613b      	str	r3, [r7, #16]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	613b      	str	r3, [r7, #16]
 800dbfe:	693b      	ldr	r3, [r7, #16]
        return;
 800dc00:	e083      	b.n	800dd0a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	095b      	lsrs	r3, r3, #5
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d014      	beq.n	800dc38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc12:	f043 0201 	orr.w	r2, r3, #1
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60fb      	str	r3, [r7, #12]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	0a1b      	lsrs	r3, r3, #8
 800dc3c:	f003 0301 	and.w	r3, r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00c      	beq.n	800dc5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc48:	f043 0208 	orr.w	r2, r3, #8
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dc50:	2300      	movs	r3, #0
 800dc52:	60bb      	str	r3, [r7, #8]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	60bb      	str	r3, [r7, #8]
 800dc5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d050      	beq.n	800dd08 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dc74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	f003 0302 	and.w	r3, r3, #2
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d104      	bne.n	800dc92 <HAL_SPI_IRQHandler+0x17e>
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	f003 0301 	and.w	r3, r3, #1
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d034      	beq.n	800dcfc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	685a      	ldr	r2, [r3, #4]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f022 0203 	bic.w	r2, r2, #3
 800dca0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d011      	beq.n	800dcce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcae:	4a18      	ldr	r2, [pc, #96]	; (800dd10 <HAL_SPI_IRQHandler+0x1fc>)
 800dcb0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fc fe30 	bl	800a91c <HAL_DMA_Abort_IT>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d005      	beq.n	800dcce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d016      	beq.n	800dd04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcda:	4a0d      	ldr	r2, [pc, #52]	; (800dd10 <HAL_SPI_IRQHandler+0x1fc>)
 800dcdc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fc fe1a 	bl	800a91c <HAL_DMA_Abort_IT>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00a      	beq.n	800dd04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800dcfa:	e003      	b.n	800dd04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f809 	bl	800dd14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800dd02:	e000      	b.n	800dd06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800dd04:	bf00      	nop
    return;
 800dd06:	bf00      	nop
 800dd08:	bf00      	nop
  }
}
 800dd0a:	3720      	adds	r7, #32
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	0800dd29 	.word	0x0800dd29

0800dd14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2200      	movs	r2, #0
 800dd42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f7ff ffe5 	bl	800dd14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd4a:	bf00      	nop
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	603b      	str	r3, [r7, #0]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd62:	e04c      	b.n	800ddfe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6a:	d048      	beq.n	800ddfe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dd6c:	f7fb fd9c 	bl	80098a8 <HAL_GetTick>
 800dd70:	4602      	mov	r2, r0
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d902      	bls.n	800dd82 <SPI_WaitFlagStateUntilTimeout+0x30>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d13d      	bne.n	800ddfe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dd90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd9a:	d111      	bne.n	800ddc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dda4:	d004      	beq.n	800ddb0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddae:	d107      	bne.n	800ddc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddc8:	d10f      	bne.n	800ddea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ddd8:	601a      	str	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dde8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	e00f      	b.n	800de1e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	4013      	ands	r3, r2
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	bf0c      	ite	eq
 800de0e:	2301      	moveq	r3, #1
 800de10:	2300      	movne	r3, #0
 800de12:	b2db      	uxtb	r3, r3
 800de14:	461a      	mov	r2, r3
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d1a3      	bne.n	800dd64 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	60b9      	str	r1, [r7, #8]
 800de30:	607a      	str	r2, [r7, #4]
 800de32:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800de34:	e057      	b.n	800dee6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800de3c:	d106      	bne.n	800de4c <SPI_WaitFifoStateUntilTimeout+0x26>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d103      	bne.n	800de4c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	330c      	adds	r3, #12
 800de4a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de52:	d048      	beq.n	800dee6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800de54:	f7fb fd28 	bl	80098a8 <HAL_GetTick>
 800de58:	4602      	mov	r2, r0
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d902      	bls.n	800de6a <SPI_WaitFifoStateUntilTimeout+0x44>
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d13d      	bne.n	800dee6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	685a      	ldr	r2, [r3, #4]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800de78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de82:	d111      	bne.n	800dea8 <SPI_WaitFifoStateUntilTimeout+0x82>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de8c:	d004      	beq.n	800de98 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de96:	d107      	bne.n	800dea8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800deb0:	d10f      	bne.n	800ded2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dec0:	601a      	str	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ded0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2201      	movs	r2, #1
 800ded6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e008      	b.n	800def8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	689a      	ldr	r2, [r3, #8]
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	4013      	ands	r3, r2
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	429a      	cmp	r2, r3
 800def4:	d19f      	bne.n	800de36 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af02      	add	r7, sp, #8
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	2200      	movs	r2, #0
 800df14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f7ff ff84 	bl	800de26 <SPI_WaitFifoStateUntilTimeout>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d007      	beq.n	800df34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df28:	f043 0220 	orr.w	r2, r3, #32
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800df30:	2303      	movs	r3, #3
 800df32:	e027      	b.n	800df84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2200      	movs	r2, #0
 800df3c:	2180      	movs	r1, #128	; 0x80
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f7ff ff07 	bl	800dd52 <SPI_WaitFlagStateUntilTimeout>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d007      	beq.n	800df5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df4e:	f043 0220 	orr.w	r2, r3, #32
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e014      	b.n	800df84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2200      	movs	r2, #0
 800df62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7ff ff5d 	bl	800de26 <SPI_WaitFifoStateUntilTimeout>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d007      	beq.n	800df82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df76:	f043 0220 	orr.w	r2, r3, #32
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e000      	b.n	800df84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d101      	bne.n	800df9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e01d      	b.n	800dfda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d106      	bne.n	800dfb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7fa fce0 	bl	8008978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2202      	movs	r2, #2
 800dfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	4619      	mov	r1, r3
 800dfca:	4610      	mov	r0, r2
 800dfcc:	f000 fb82 	bl	800e6d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68da      	ldr	r2, [r3, #12]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f042 0201 	orr.w	r2, r2, #1
 800dffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	689a      	ldr	r2, [r3, #8]
 800e002:	4b0c      	ldr	r3, [pc, #48]	; (800e034 <HAL_TIM_Base_Start_IT+0x50>)
 800e004:	4013      	ands	r3, r2
 800e006:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b06      	cmp	r3, #6
 800e00c:	d00b      	beq.n	800e026 <HAL_TIM_Base_Start_IT+0x42>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e014:	d007      	beq.n	800e026 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f042 0201 	orr.w	r2, r2, #1
 800e024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr
 800e034:	00010007 	.word	0x00010007

0800e038 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e01d      	b.n	800e086 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e050:	b2db      	uxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d106      	bne.n	800e064 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f815 	bl	800e08e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2202      	movs	r2, #2
 800e068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3304      	adds	r3, #4
 800e074:	4619      	mov	r1, r3
 800e076:	4610      	mov	r0, r2
 800e078:	f000 fb2c 	bl	800e6d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e08e:	b480      	push	{r7}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	691b      	ldr	r3, [r3, #16]
 800e0b0:	f003 0302 	and.w	r3, r3, #2
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d122      	bne.n	800e0fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	f003 0302 	and.w	r3, r3, #2
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d11b      	bne.n	800e0fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f06f 0202 	mvn.w	r2, #2
 800e0ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	f003 0303 	and.w	r3, r3, #3
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d003      	beq.n	800e0ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 fad7 	bl	800e698 <HAL_TIM_IC_CaptureCallback>
 800e0ea:	e005      	b.n	800e0f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 fac9 	bl	800e684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 fada 	bl	800e6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	691b      	ldr	r3, [r3, #16]
 800e104:	f003 0304 	and.w	r3, r3, #4
 800e108:	2b04      	cmp	r3, #4
 800e10a:	d122      	bne.n	800e152 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	68db      	ldr	r3, [r3, #12]
 800e112:	f003 0304 	and.w	r3, r3, #4
 800e116:	2b04      	cmp	r3, #4
 800e118:	d11b      	bne.n	800e152 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f06f 0204 	mvn.w	r2, #4
 800e122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2202      	movs	r2, #2
 800e128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e134:	2b00      	cmp	r3, #0
 800e136:	d003      	beq.n	800e140 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 faad 	bl	800e698 <HAL_TIM_IC_CaptureCallback>
 800e13e:	e005      	b.n	800e14c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 fa9f 	bl	800e684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 fab0 	bl	800e6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	691b      	ldr	r3, [r3, #16]
 800e158:	f003 0308 	and.w	r3, r3, #8
 800e15c:	2b08      	cmp	r3, #8
 800e15e:	d122      	bne.n	800e1a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	f003 0308 	and.w	r3, r3, #8
 800e16a:	2b08      	cmp	r3, #8
 800e16c:	d11b      	bne.n	800e1a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f06f 0208 	mvn.w	r2, #8
 800e176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2204      	movs	r2, #4
 800e17c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	69db      	ldr	r3, [r3, #28]
 800e184:	f003 0303 	and.w	r3, r3, #3
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d003      	beq.n	800e194 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fa83 	bl	800e698 <HAL_TIM_IC_CaptureCallback>
 800e192:	e005      	b.n	800e1a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 fa75 	bl	800e684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fa86 	bl	800e6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	691b      	ldr	r3, [r3, #16]
 800e1ac:	f003 0310 	and.w	r3, r3, #16
 800e1b0:	2b10      	cmp	r3, #16
 800e1b2:	d122      	bne.n	800e1fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	f003 0310 	and.w	r3, r3, #16
 800e1be:	2b10      	cmp	r3, #16
 800e1c0:	d11b      	bne.n	800e1fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f06f 0210 	mvn.w	r2, #16
 800e1ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2208      	movs	r2, #8
 800e1d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d003      	beq.n	800e1e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 fa59 	bl	800e698 <HAL_TIM_IC_CaptureCallback>
 800e1e6:	e005      	b.n	800e1f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 fa4b 	bl	800e684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fa5c 	bl	800e6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b01      	cmp	r3, #1
 800e206:	d10e      	bne.n	800e226 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	f003 0301 	and.w	r3, r3, #1
 800e212:	2b01      	cmp	r3, #1
 800e214:	d107      	bne.n	800e226 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f06f 0201 	mvn.w	r2, #1
 800e21e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7f7 f89b 	bl	800535c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e230:	2b80      	cmp	r3, #128	; 0x80
 800e232:	d10e      	bne.n	800e252 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e23e:	2b80      	cmp	r3, #128	; 0x80
 800e240:	d107      	bne.n	800e252 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e24a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fe71 	bl	800ef34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e260:	d10e      	bne.n	800e280 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e26c:	2b80      	cmp	r3, #128	; 0x80
 800e26e:	d107      	bne.n	800e280 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fe64 	bl	800ef48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e28a:	2b40      	cmp	r3, #64	; 0x40
 800e28c:	d10e      	bne.n	800e2ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e298:	2b40      	cmp	r3, #64	; 0x40
 800e29a:	d107      	bne.n	800e2ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fa0a 	bl	800e6c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	f003 0320 	and.w	r3, r3, #32
 800e2b6:	2b20      	cmp	r3, #32
 800e2b8:	d10e      	bne.n	800e2d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	f003 0320 	and.w	r3, r3, #32
 800e2c4:	2b20      	cmp	r3, #32
 800e2c6:	d107      	bne.n	800e2d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f06f 0220 	mvn.w	r2, #32
 800e2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fe24 	bl	800ef20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e2d8:	bf00      	nop
 800e2da:	3708      	adds	r7, #8
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d101      	bne.n	800e2fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e2f6:	2302      	movs	r3, #2
 800e2f8:	e105      	b.n	800e506 <HAL_TIM_PWM_ConfigChannel+0x226>
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2202      	movs	r2, #2
 800e306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b14      	cmp	r3, #20
 800e30e:	f200 80f0 	bhi.w	800e4f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e36d 	.word	0x0800e36d
 800e31c:	0800e4f3 	.word	0x0800e4f3
 800e320:	0800e4f3 	.word	0x0800e4f3
 800e324:	0800e4f3 	.word	0x0800e4f3
 800e328:	0800e3ad 	.word	0x0800e3ad
 800e32c:	0800e4f3 	.word	0x0800e4f3
 800e330:	0800e4f3 	.word	0x0800e4f3
 800e334:	0800e4f3 	.word	0x0800e4f3
 800e338:	0800e3ef 	.word	0x0800e3ef
 800e33c:	0800e4f3 	.word	0x0800e4f3
 800e340:	0800e4f3 	.word	0x0800e4f3
 800e344:	0800e4f3 	.word	0x0800e4f3
 800e348:	0800e42f 	.word	0x0800e42f
 800e34c:	0800e4f3 	.word	0x0800e4f3
 800e350:	0800e4f3 	.word	0x0800e4f3
 800e354:	0800e4f3 	.word	0x0800e4f3
 800e358:	0800e471 	.word	0x0800e471
 800e35c:	0800e4f3 	.word	0x0800e4f3
 800e360:	0800e4f3 	.word	0x0800e4f3
 800e364:	0800e4f3 	.word	0x0800e4f3
 800e368:	0800e4b1 	.word	0x0800e4b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68b9      	ldr	r1, [r7, #8]
 800e372:	4618      	mov	r0, r3
 800e374:	f000 fa4e 	bl	800e814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	699a      	ldr	r2, [r3, #24]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f042 0208 	orr.w	r2, r2, #8
 800e386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	699a      	ldr	r2, [r3, #24]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f022 0204 	bic.w	r2, r2, #4
 800e396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	6999      	ldr	r1, [r3, #24]
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	691a      	ldr	r2, [r3, #16]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	430a      	orrs	r2, r1
 800e3a8:	619a      	str	r2, [r3, #24]
      break;
 800e3aa:	e0a3      	b.n	800e4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68b9      	ldr	r1, [r7, #8]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 faa0 	bl	800e8f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	699a      	ldr	r2, [r3, #24]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	699a      	ldr	r2, [r3, #24]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	6999      	ldr	r1, [r3, #24]
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	021a      	lsls	r2, r3, #8
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	430a      	orrs	r2, r1
 800e3ea:	619a      	str	r2, [r3, #24]
      break;
 800e3ec:	e082      	b.n	800e4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68b9      	ldr	r1, [r7, #8]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f000 faf7 	bl	800e9e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	69da      	ldr	r2, [r3, #28]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f042 0208 	orr.w	r2, r2, #8
 800e408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	69da      	ldr	r2, [r3, #28]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f022 0204 	bic.w	r2, r2, #4
 800e418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	69d9      	ldr	r1, [r3, #28]
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	691a      	ldr	r2, [r3, #16]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	430a      	orrs	r2, r1
 800e42a:	61da      	str	r2, [r3, #28]
      break;
 800e42c:	e062      	b.n	800e4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	68b9      	ldr	r1, [r7, #8]
 800e434:	4618      	mov	r0, r3
 800e436:	f000 fb4d 	bl	800ead4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	69da      	ldr	r2, [r3, #28]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	69da      	ldr	r2, [r3, #28]
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	69d9      	ldr	r1, [r3, #28]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	021a      	lsls	r2, r3, #8
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	430a      	orrs	r2, r1
 800e46c:	61da      	str	r2, [r3, #28]
      break;
 800e46e:	e041      	b.n	800e4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 fb84 	bl	800eb84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0208 	orr.w	r2, r2, #8
 800e48a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f022 0204 	bic.w	r2, r2, #4
 800e49a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	691a      	ldr	r2, [r3, #16]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e4ae:	e021      	b.n	800e4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 fbb6 	bl	800ec28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	021a      	lsls	r2, r3, #8
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e4f0:	e000      	b.n	800e4f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e4f2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop

0800e510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e520:	2b01      	cmp	r3, #1
 800e522:	d101      	bne.n	800e528 <HAL_TIM_ConfigClockSource+0x18>
 800e524:	2302      	movs	r3, #2
 800e526:	e0a6      	b.n	800e676 <HAL_TIM_ConfigClockSource+0x166>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2202      	movs	r2, #2
 800e534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	4b4f      	ldr	r3, [pc, #316]	; (800e680 <HAL_TIM_ConfigClockSource+0x170>)
 800e544:	4013      	ands	r3, r2
 800e546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e54e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b40      	cmp	r3, #64	; 0x40
 800e55e:	d067      	beq.n	800e630 <HAL_TIM_ConfigClockSource+0x120>
 800e560:	2b40      	cmp	r3, #64	; 0x40
 800e562:	d80b      	bhi.n	800e57c <HAL_TIM_ConfigClockSource+0x6c>
 800e564:	2b10      	cmp	r3, #16
 800e566:	d073      	beq.n	800e650 <HAL_TIM_ConfigClockSource+0x140>
 800e568:	2b10      	cmp	r3, #16
 800e56a:	d802      	bhi.n	800e572 <HAL_TIM_ConfigClockSource+0x62>
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d06f      	beq.n	800e650 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e570:	e078      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e572:	2b20      	cmp	r3, #32
 800e574:	d06c      	beq.n	800e650 <HAL_TIM_ConfigClockSource+0x140>
 800e576:	2b30      	cmp	r3, #48	; 0x30
 800e578:	d06a      	beq.n	800e650 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e57a:	e073      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e57c:	2b70      	cmp	r3, #112	; 0x70
 800e57e:	d00d      	beq.n	800e59c <HAL_TIM_ConfigClockSource+0x8c>
 800e580:	2b70      	cmp	r3, #112	; 0x70
 800e582:	d804      	bhi.n	800e58e <HAL_TIM_ConfigClockSource+0x7e>
 800e584:	2b50      	cmp	r3, #80	; 0x50
 800e586:	d033      	beq.n	800e5f0 <HAL_TIM_ConfigClockSource+0xe0>
 800e588:	2b60      	cmp	r3, #96	; 0x60
 800e58a:	d041      	beq.n	800e610 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e58c:	e06a      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e592:	d066      	beq.n	800e662 <HAL_TIM_ConfigClockSource+0x152>
 800e594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e598:	d017      	beq.n	800e5ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e59a:	e063      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6818      	ldr	r0, [r3, #0]
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	6899      	ldr	r1, [r3, #8]
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	685a      	ldr	r2, [r3, #4]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	f000 fc0a 	bl	800edc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e5be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	609a      	str	r2, [r3, #8]
      break;
 800e5c8:	e04c      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6818      	ldr	r0, [r3, #0]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	6899      	ldr	r1, [r3, #8]
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	f000 fbf3 	bl	800edc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	689a      	ldr	r2, [r3, #8]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e5ec:	609a      	str	r2, [r3, #8]
      break;
 800e5ee:	e039      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6818      	ldr	r0, [r3, #0]
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	6859      	ldr	r1, [r3, #4]
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	f000 fb67 	bl	800ecd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2150      	movs	r1, #80	; 0x50
 800e608:	4618      	mov	r0, r3
 800e60a:	f000 fbc0 	bl	800ed8e <TIM_ITRx_SetConfig>
      break;
 800e60e:	e029      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6818      	ldr	r0, [r3, #0]
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	6859      	ldr	r1, [r3, #4]
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	461a      	mov	r2, r3
 800e61e:	f000 fb86 	bl	800ed2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2160      	movs	r1, #96	; 0x60
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fbb0 	bl	800ed8e <TIM_ITRx_SetConfig>
      break;
 800e62e:	e019      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	6859      	ldr	r1, [r3, #4]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	461a      	mov	r2, r3
 800e63e:	f000 fb47 	bl	800ecd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2140      	movs	r1, #64	; 0x40
 800e648:	4618      	mov	r0, r3
 800e64a:	f000 fba0 	bl	800ed8e <TIM_ITRx_SetConfig>
      break;
 800e64e:	e009      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4619      	mov	r1, r3
 800e65a:	4610      	mov	r0, r2
 800e65c:	f000 fb97 	bl	800ed8e <TIM_ITRx_SetConfig>
      break;
 800e660:	e000      	b.n	800e664 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	fffeff88 	.word	0xfffeff88

0800e684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e68c:	bf00      	nop
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6a0:	bf00      	nop
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6b4:	bf00      	nop
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6c8:	bf00      	nop
 800e6ca:	370c      	adds	r7, #12
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	4a40      	ldr	r2, [pc, #256]	; (800e7e8 <TIM_Base_SetConfig+0x114>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d013      	beq.n	800e714 <TIM_Base_SetConfig+0x40>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6f2:	d00f      	beq.n	800e714 <TIM_Base_SetConfig+0x40>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a3d      	ldr	r2, [pc, #244]	; (800e7ec <TIM_Base_SetConfig+0x118>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d00b      	beq.n	800e714 <TIM_Base_SetConfig+0x40>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a3c      	ldr	r2, [pc, #240]	; (800e7f0 <TIM_Base_SetConfig+0x11c>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d007      	beq.n	800e714 <TIM_Base_SetConfig+0x40>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a3b      	ldr	r2, [pc, #236]	; (800e7f4 <TIM_Base_SetConfig+0x120>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d003      	beq.n	800e714 <TIM_Base_SetConfig+0x40>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a3a      	ldr	r2, [pc, #232]	; (800e7f8 <TIM_Base_SetConfig+0x124>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d108      	bne.n	800e726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e71a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	4313      	orrs	r3, r2
 800e724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4a2f      	ldr	r2, [pc, #188]	; (800e7e8 <TIM_Base_SetConfig+0x114>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d02b      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e734:	d027      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a2c      	ldr	r2, [pc, #176]	; (800e7ec <TIM_Base_SetConfig+0x118>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d023      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a2b      	ldr	r2, [pc, #172]	; (800e7f0 <TIM_Base_SetConfig+0x11c>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d01f      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a2a      	ldr	r2, [pc, #168]	; (800e7f4 <TIM_Base_SetConfig+0x120>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d01b      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a29      	ldr	r2, [pc, #164]	; (800e7f8 <TIM_Base_SetConfig+0x124>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d017      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a28      	ldr	r2, [pc, #160]	; (800e7fc <TIM_Base_SetConfig+0x128>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d013      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a27      	ldr	r2, [pc, #156]	; (800e800 <TIM_Base_SetConfig+0x12c>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d00f      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a26      	ldr	r2, [pc, #152]	; (800e804 <TIM_Base_SetConfig+0x130>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d00b      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a25      	ldr	r2, [pc, #148]	; (800e808 <TIM_Base_SetConfig+0x134>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d007      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4a24      	ldr	r2, [pc, #144]	; (800e80c <TIM_Base_SetConfig+0x138>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d003      	beq.n	800e786 <TIM_Base_SetConfig+0xb2>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4a23      	ldr	r2, [pc, #140]	; (800e810 <TIM_Base_SetConfig+0x13c>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d108      	bne.n	800e798 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e78c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	4313      	orrs	r3, r2
 800e796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	695b      	ldr	r3, [r3, #20]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	689a      	ldr	r2, [r3, #8]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a0a      	ldr	r2, [pc, #40]	; (800e7e8 <TIM_Base_SetConfig+0x114>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d003      	beq.n	800e7cc <TIM_Base_SetConfig+0xf8>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a0c      	ldr	r2, [pc, #48]	; (800e7f8 <TIM_Base_SetConfig+0x124>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d103      	bne.n	800e7d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	691a      	ldr	r2, [r3, #16]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	615a      	str	r2, [r3, #20]
}
 800e7da:	bf00      	nop
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	40010000 	.word	0x40010000
 800e7ec:	40000400 	.word	0x40000400
 800e7f0:	40000800 	.word	0x40000800
 800e7f4:	40000c00 	.word	0x40000c00
 800e7f8:	40010400 	.word	0x40010400
 800e7fc:	40014000 	.word	0x40014000
 800e800:	40014400 	.word	0x40014400
 800e804:	40014800 	.word	0x40014800
 800e808:	40001800 	.word	0x40001800
 800e80c:	40001c00 	.word	0x40001c00
 800e810:	40002000 	.word	0x40002000

0800e814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e814:	b480      	push	{r7}
 800e816:	b087      	sub	sp, #28
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a1b      	ldr	r3, [r3, #32]
 800e822:	f023 0201 	bic.w	r2, r3, #1
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a1b      	ldr	r3, [r3, #32]
 800e82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	4b2b      	ldr	r3, [pc, #172]	; (800e8ec <TIM_OC1_SetConfig+0xd8>)
 800e840:	4013      	ands	r3, r2
 800e842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f023 0303 	bic.w	r3, r3, #3
 800e84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	4313      	orrs	r3, r2
 800e854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f023 0302 	bic.w	r3, r3, #2
 800e85c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	4313      	orrs	r3, r2
 800e866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4a21      	ldr	r2, [pc, #132]	; (800e8f0 <TIM_OC1_SetConfig+0xdc>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d003      	beq.n	800e878 <TIM_OC1_SetConfig+0x64>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	4a20      	ldr	r2, [pc, #128]	; (800e8f4 <TIM_OC1_SetConfig+0xe0>)
 800e874:	4293      	cmp	r3, r2
 800e876:	d10c      	bne.n	800e892 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	f023 0308 	bic.w	r3, r3, #8
 800e87e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	4313      	orrs	r3, r2
 800e888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f023 0304 	bic.w	r3, r3, #4
 800e890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a16      	ldr	r2, [pc, #88]	; (800e8f0 <TIM_OC1_SetConfig+0xdc>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d003      	beq.n	800e8a2 <TIM_OC1_SetConfig+0x8e>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a15      	ldr	r2, [pc, #84]	; (800e8f4 <TIM_OC1_SetConfig+0xe0>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d111      	bne.n	800e8c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	695b      	ldr	r3, [r3, #20]
 800e8b6:	693a      	ldr	r2, [r7, #16]
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	699b      	ldr	r3, [r3, #24]
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	693a      	ldr	r2, [r7, #16]
 800e8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	68fa      	ldr	r2, [r7, #12]
 800e8d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	685a      	ldr	r2, [r3, #4]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	697a      	ldr	r2, [r7, #20]
 800e8de:	621a      	str	r2, [r3, #32]
}
 800e8e0:	bf00      	nop
 800e8e2:	371c      	adds	r7, #28
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr
 800e8ec:	fffeff8f 	.word	0xfffeff8f
 800e8f0:	40010000 	.word	0x40010000
 800e8f4:	40010400 	.word	0x40010400

0800e8f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	f023 0210 	bic.w	r2, r3, #16
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a1b      	ldr	r3, [r3, #32]
 800e912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	699b      	ldr	r3, [r3, #24]
 800e91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4b2e      	ldr	r3, [pc, #184]	; (800e9dc <TIM_OC2_SetConfig+0xe4>)
 800e924:	4013      	ands	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	021b      	lsls	r3, r3, #8
 800e936:	68fa      	ldr	r2, [r7, #12]
 800e938:	4313      	orrs	r3, r2
 800e93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	f023 0320 	bic.w	r3, r3, #32
 800e942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	011b      	lsls	r3, r3, #4
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4a23      	ldr	r2, [pc, #140]	; (800e9e0 <TIM_OC2_SetConfig+0xe8>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d003      	beq.n	800e960 <TIM_OC2_SetConfig+0x68>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a22      	ldr	r2, [pc, #136]	; (800e9e4 <TIM_OC2_SetConfig+0xec>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d10d      	bne.n	800e97c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	011b      	lsls	r3, r3, #4
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	4313      	orrs	r3, r2
 800e972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e97a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4a18      	ldr	r2, [pc, #96]	; (800e9e0 <TIM_OC2_SetConfig+0xe8>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d003      	beq.n	800e98c <TIM_OC2_SetConfig+0x94>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a17      	ldr	r2, [pc, #92]	; (800e9e4 <TIM_OC2_SetConfig+0xec>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d113      	bne.n	800e9b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e99a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	695b      	ldr	r3, [r3, #20]
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	621a      	str	r2, [r3, #32]
}
 800e9ce:	bf00      	nop
 800e9d0:	371c      	adds	r7, #28
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	feff8fff 	.word	0xfeff8fff
 800e9e0:	40010000 	.word	0x40010000
 800e9e4:	40010400 	.word	0x40010400

0800e9e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b087      	sub	sp, #28
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a1b      	ldr	r3, [r3, #32]
 800e9f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a1b      	ldr	r3, [r3, #32]
 800ea02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	69db      	ldr	r3, [r3, #28]
 800ea0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	4b2d      	ldr	r3, [pc, #180]	; (800eac8 <TIM_OC3_SetConfig+0xe0>)
 800ea14:	4013      	ands	r3, r2
 800ea16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f023 0303 	bic.w	r3, r3, #3
 800ea1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	4313      	orrs	r3, r2
 800ea28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	021b      	lsls	r3, r3, #8
 800ea38:	697a      	ldr	r2, [r7, #20]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a22      	ldr	r2, [pc, #136]	; (800eacc <TIM_OC3_SetConfig+0xe4>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d003      	beq.n	800ea4e <TIM_OC3_SetConfig+0x66>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a21      	ldr	r2, [pc, #132]	; (800ead0 <TIM_OC3_SetConfig+0xe8>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d10d      	bne.n	800ea6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	68db      	ldr	r3, [r3, #12]
 800ea5a:	021b      	lsls	r3, r3, #8
 800ea5c:	697a      	ldr	r2, [r7, #20]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4a17      	ldr	r2, [pc, #92]	; (800eacc <TIM_OC3_SetConfig+0xe4>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d003      	beq.n	800ea7a <TIM_OC3_SetConfig+0x92>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4a16      	ldr	r2, [pc, #88]	; (800ead0 <TIM_OC3_SetConfig+0xe8>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d113      	bne.n	800eaa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	695b      	ldr	r3, [r3, #20]
 800ea8e:	011b      	lsls	r3, r3, #4
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	699b      	ldr	r3, [r3, #24]
 800ea9a:	011b      	lsls	r3, r3, #4
 800ea9c:	693a      	ldr	r2, [r7, #16]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	621a      	str	r2, [r3, #32]
}
 800eabc:	bf00      	nop
 800eabe:	371c      	adds	r7, #28
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	fffeff8f 	.word	0xfffeff8f
 800eacc:	40010000 	.word	0x40010000
 800ead0:	40010400 	.word	0x40010400

0800ead4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b087      	sub	sp, #28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6a1b      	ldr	r3, [r3, #32]
 800eae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	69db      	ldr	r3, [r3, #28]
 800eafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	4b1e      	ldr	r3, [pc, #120]	; (800eb78 <TIM_OC4_SetConfig+0xa4>)
 800eb00:	4013      	ands	r3, r2
 800eb02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	021b      	lsls	r3, r3, #8
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	031b      	lsls	r3, r3, #12
 800eb26:	693a      	ldr	r2, [r7, #16]
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a13      	ldr	r2, [pc, #76]	; (800eb7c <TIM_OC4_SetConfig+0xa8>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d003      	beq.n	800eb3c <TIM_OC4_SetConfig+0x68>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a12      	ldr	r2, [pc, #72]	; (800eb80 <TIM_OC4_SetConfig+0xac>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d109      	bne.n	800eb50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	695b      	ldr	r3, [r3, #20]
 800eb48:	019b      	lsls	r3, r3, #6
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	693a      	ldr	r2, [r7, #16]
 800eb68:	621a      	str	r2, [r3, #32]
}
 800eb6a:	bf00      	nop
 800eb6c:	371c      	adds	r7, #28
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	feff8fff 	.word	0xfeff8fff
 800eb7c:	40010000 	.word	0x40010000
 800eb80:	40010400 	.word	0x40010400

0800eb84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b087      	sub	sp, #28
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a1b      	ldr	r3, [r3, #32]
 800eb92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a1b      	ldr	r3, [r3, #32]
 800eb9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	4b1b      	ldr	r3, [pc, #108]	; (800ec1c <TIM_OC5_SetConfig+0x98>)
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ebc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	041b      	lsls	r3, r3, #16
 800ebcc:	693a      	ldr	r2, [r7, #16]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4a12      	ldr	r2, [pc, #72]	; (800ec20 <TIM_OC5_SetConfig+0x9c>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d003      	beq.n	800ebe2 <TIM_OC5_SetConfig+0x5e>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a11      	ldr	r2, [pc, #68]	; (800ec24 <TIM_OC5_SetConfig+0xa0>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d109      	bne.n	800ebf6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ebe8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	021b      	lsls	r3, r3, #8
 800ebf0:	697a      	ldr	r2, [r7, #20]
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	697a      	ldr	r2, [r7, #20]
 800ebfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	685a      	ldr	r2, [r3, #4]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	693a      	ldr	r2, [r7, #16]
 800ec0e:	621a      	str	r2, [r3, #32]
}
 800ec10:	bf00      	nop
 800ec12:	371c      	adds	r7, #28
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr
 800ec1c:	fffeff8f 	.word	0xfffeff8f
 800ec20:	40010000 	.word	0x40010000
 800ec24:	40010400 	.word	0x40010400

0800ec28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b087      	sub	sp, #28
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a1b      	ldr	r3, [r3, #32]
 800ec36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	4b1c      	ldr	r3, [pc, #112]	; (800ecc4 <TIM_OC6_SetConfig+0x9c>)
 800ec54:	4013      	ands	r3, r2
 800ec56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	021b      	lsls	r3, r3, #8
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ec6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	051b      	lsls	r3, r3, #20
 800ec72:	693a      	ldr	r2, [r7, #16]
 800ec74:	4313      	orrs	r3, r2
 800ec76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <TIM_OC6_SetConfig+0xa0>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d003      	beq.n	800ec88 <TIM_OC6_SetConfig+0x60>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a12      	ldr	r2, [pc, #72]	; (800eccc <TIM_OC6_SetConfig+0xa4>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d109      	bne.n	800ec9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	029b      	lsls	r3, r3, #10
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	697a      	ldr	r2, [r7, #20]
 800eca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	693a      	ldr	r2, [r7, #16]
 800ecb4:	621a      	str	r2, [r3, #32]
}
 800ecb6:	bf00      	nop
 800ecb8:	371c      	adds	r7, #28
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	feff8fff 	.word	0xfeff8fff
 800ecc8:	40010000 	.word	0x40010000
 800eccc:	40010400 	.word	0x40010400

0800ecd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b087      	sub	sp, #28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6a1b      	ldr	r3, [r3, #32]
 800ece0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6a1b      	ldr	r3, [r3, #32]
 800ece6:	f023 0201 	bic.w	r2, r3, #1
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	011b      	lsls	r3, r3, #4
 800ed00:	693a      	ldr	r2, [r7, #16]
 800ed02:	4313      	orrs	r3, r2
 800ed04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	f023 030a 	bic.w	r3, r3, #10
 800ed0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	4313      	orrs	r3, r2
 800ed14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	693a      	ldr	r2, [r7, #16]
 800ed1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	621a      	str	r2, [r3, #32]
}
 800ed22:	bf00      	nop
 800ed24:	371c      	adds	r7, #28
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr

0800ed2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed2e:	b480      	push	{r7}
 800ed30:	b087      	sub	sp, #28
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	60f8      	str	r0, [r7, #12]
 800ed36:	60b9      	str	r1, [r7, #8]
 800ed38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	f023 0210 	bic.w	r2, r3, #16
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6a1b      	ldr	r3, [r3, #32]
 800ed50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	031b      	lsls	r3, r3, #12
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	011b      	lsls	r3, r3, #4
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	4313      	orrs	r3, r2
 800ed74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	697a      	ldr	r2, [r7, #20]
 800ed7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	621a      	str	r2, [r3, #32]
}
 800ed82:	bf00      	nop
 800ed84:	371c      	adds	r7, #28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr

0800ed8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed8e:	b480      	push	{r7}
 800ed90:	b085      	sub	sp, #20
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
 800ed96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eda4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eda6:	683a      	ldr	r2, [r7, #0]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	4313      	orrs	r3, r2
 800edac:	f043 0307 	orr.w	r3, r3, #7
 800edb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	68fa      	ldr	r2, [r7, #12]
 800edb6:	609a      	str	r2, [r3, #8]
}
 800edb8:	bf00      	nop
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b087      	sub	sp, #28
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
 800edd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	021a      	lsls	r2, r3, #8
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	431a      	orrs	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	4313      	orrs	r3, r2
 800edec:	697a      	ldr	r2, [r7, #20]
 800edee:	4313      	orrs	r3, r2
 800edf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	697a      	ldr	r2, [r7, #20]
 800edf6:	609a      	str	r2, [r3, #8]
}
 800edf8:	bf00      	nop
 800edfa:	371c      	adds	r7, #28
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d101      	bne.n	800ee1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ee18:	2302      	movs	r3, #2
 800ee1a:	e06d      	b.n	800eef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2202      	movs	r2, #2
 800ee28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a30      	ldr	r2, [pc, #192]	; (800ef04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d004      	beq.n	800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a2f      	ldr	r2, [pc, #188]	; (800ef08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d108      	bne.n	800ee62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ee56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	68fa      	ldr	r2, [r7, #12]
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a20      	ldr	r2, [pc, #128]	; (800ef04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d022      	beq.n	800eecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee8e:	d01d      	beq.n	800eecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a1d      	ldr	r2, [pc, #116]	; (800ef0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d018      	beq.n	800eecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a1c      	ldr	r2, [pc, #112]	; (800ef10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d013      	beq.n	800eecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a1a      	ldr	r2, [pc, #104]	; (800ef14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d00e      	beq.n	800eecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a15      	ldr	r2, [pc, #84]	; (800ef08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d009      	beq.n	800eecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a16      	ldr	r2, [pc, #88]	; (800ef18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d004      	beq.n	800eecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a15      	ldr	r2, [pc, #84]	; (800ef1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d10c      	bne.n	800eee6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	4313      	orrs	r3, r2
 800eedc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	68ba      	ldr	r2, [r7, #8]
 800eee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3714      	adds	r7, #20
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr
 800ef04:	40010000 	.word	0x40010000
 800ef08:	40010400 	.word	0x40010400
 800ef0c:	40000400 	.word	0x40000400
 800ef10:	40000800 	.word	0x40000800
 800ef14:	40000c00 	.word	0x40000c00
 800ef18:	40014000 	.word	0x40014000
 800ef1c:	40001800 	.word	0x40001800

0800ef20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e040      	b.n	800eff0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f7f9 fd8c 	bl	8008a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2224      	movs	r2, #36	; 0x24
 800ef88:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f022 0201 	bic.w	r2, r2, #1
 800ef98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f960 	bl	800f260 <UART_SetConfig>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d101      	bne.n	800efaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800efa6:	2301      	movs	r3, #1
 800efa8:	e022      	b.n	800eff0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d002      	beq.n	800efb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fbfe 	bl	800f7b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	685a      	ldr	r2, [r3, #4]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800efc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	689a      	ldr	r2, [r3, #8]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800efd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0201 	orr.w	r2, r2, #1
 800efe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fc85 	bl	800f8f8 <UART_CheckIdleState>
 800efee:	4603      	mov	r3, r0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b08a      	sub	sp, #40	; 0x28
 800effc:	af02      	add	r7, sp, #8
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	603b      	str	r3, [r7, #0]
 800f004:	4613      	mov	r3, r2
 800f006:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f00c:	2b20      	cmp	r3, #32
 800f00e:	d17f      	bne.n	800f110 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d002      	beq.n	800f01c <HAL_UART_Transmit+0x24>
 800f016:	88fb      	ldrh	r3, [r7, #6]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d101      	bne.n	800f020 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	e078      	b.n	800f112 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f026:	2b01      	cmp	r3, #1
 800f028:	d101      	bne.n	800f02e <HAL_UART_Transmit+0x36>
 800f02a:	2302      	movs	r3, #2
 800f02c:	e071      	b.n	800f112 <HAL_UART_Transmit+0x11a>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2201      	movs	r2, #1
 800f032:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2200      	movs	r2, #0
 800f03a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2221      	movs	r2, #33	; 0x21
 800f040:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f042:	f7fa fc31 	bl	80098a8 <HAL_GetTick>
 800f046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	88fa      	ldrh	r2, [r7, #6]
 800f04c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	88fa      	ldrh	r2, [r7, #6]
 800f054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f060:	d108      	bne.n	800f074 <HAL_UART_Transmit+0x7c>
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d104      	bne.n	800f074 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800f06a:	2300      	movs	r3, #0
 800f06c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	61bb      	str	r3, [r7, #24]
 800f072:	e003      	b.n	800f07c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f078:	2300      	movs	r3, #0
 800f07a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2200      	movs	r2, #0
 800f080:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f084:	e02c      	b.n	800f0e0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	2200      	movs	r2, #0
 800f08e:	2180      	movs	r1, #128	; 0x80
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f000 fc76 	bl	800f982 <UART_WaitOnFlagUntilTimeout>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d001      	beq.n	800f0a0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800f09c:	2303      	movs	r3, #3
 800f09e:	e038      	b.n	800f112 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10b      	bne.n	800f0be <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f0b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	3302      	adds	r3, #2
 800f0ba:	61bb      	str	r3, [r7, #24]
 800f0bc:	e007      	b.n	800f0ce <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	781a      	ldrb	r2, [r3, #0]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	3b01      	subs	r3, #1
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d1cc      	bne.n	800f086 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	2140      	movs	r1, #64	; 0x40
 800f0f6:	68f8      	ldr	r0, [r7, #12]
 800f0f8:	f000 fc43 	bl	800f982 <UART_WaitOnFlagUntilTimeout>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f102:	2303      	movs	r3, #3
 800f104:	e005      	b.n	800f112 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2220      	movs	r2, #32
 800f10a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f10c:	2300      	movs	r3, #0
 800f10e:	e000      	b.n	800f112 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800f110:	2302      	movs	r3, #2
  }
}
 800f112:	4618      	mov	r0, r3
 800f114:	3720      	adds	r7, #32
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	4613      	mov	r3, r2
 800f128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f12e:	2b20      	cmp	r3, #32
 800f130:	d16c      	bne.n	800f20c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d002      	beq.n	800f13e <HAL_UART_Receive_DMA+0x22>
 800f138:	88fb      	ldrh	r3, [r7, #6]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d101      	bne.n	800f142 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800f13e:	2301      	movs	r3, #1
 800f140:	e065      	b.n	800f20e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d101      	bne.n	800f150 <HAL_UART_Receive_DMA+0x34>
 800f14c:	2302      	movs	r3, #2
 800f14e:	e05e      	b.n	800f20e <HAL_UART_Receive_DMA+0xf2>
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	88fa      	ldrh	r2, [r7, #6]
 800f162:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2222      	movs	r2, #34	; 0x22
 800f170:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f176:	2b00      	cmp	r3, #0
 800f178:	d02a      	beq.n	800f1d0 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f17e:	4a26      	ldr	r2, [pc, #152]	; (800f218 <HAL_UART_Receive_DMA+0xfc>)
 800f180:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f186:	4a25      	ldr	r2, [pc, #148]	; (800f21c <HAL_UART_Receive_DMA+0x100>)
 800f188:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f18e:	4a24      	ldr	r2, [pc, #144]	; (800f220 <HAL_UART_Receive_DMA+0x104>)
 800f190:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f196:	2200      	movs	r2, #0
 800f198:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3324      	adds	r3, #36	; 0x24
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	88fb      	ldrh	r3, [r7, #6]
 800f1ae:	f7fb fae5 	bl	800a77c <HAL_DMA_Start_IT>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d00b      	beq.n	800f1d0 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2210      	movs	r2, #16
 800f1bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2220      	movs	r2, #32
 800f1ca:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	e01e      	b.n	800f20e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1e6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	689a      	ldr	r2, [r3, #8]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f042 0201 	orr.w	r2, r2, #1
 800f1f6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	689a      	ldr	r2, [r3, #8]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f206:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	e000      	b.n	800f20e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800f20c:	2302      	movs	r3, #2
  }
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	0800fae3 	.word	0x0800fae3
 800f21c:	0800fb47 	.word	0x0800fb47
 800f220:	0800fb63 	.word	0x0800fb63

0800f224 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr

0800f238 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f240:	bf00      	nop
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b083      	sub	sp, #12
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f254:	bf00      	nop
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr

0800f260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f268:	2300      	movs	r3, #0
 800f26a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f26c:	2300      	movs	r3, #0
 800f26e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	689a      	ldr	r2, [r3, #8]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	431a      	orrs	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	695b      	ldr	r3, [r3, #20]
 800f27e:	431a      	orrs	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	69db      	ldr	r3, [r3, #28]
 800f284:	4313      	orrs	r3, r2
 800f286:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	4bb1      	ldr	r3, [pc, #708]	; (800f554 <UART_SetConfig+0x2f4>)
 800f290:	4013      	ands	r3, r2
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	6812      	ldr	r2, [r2, #0]
 800f296:	6939      	ldr	r1, [r7, #16]
 800f298:	430b      	orrs	r3, r1
 800f29a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	68da      	ldr	r2, [r3, #12]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	430a      	orrs	r2, r1
 800f2b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	699b      	ldr	r3, [r3, #24]
 800f2b6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a1b      	ldr	r3, [r3, #32]
 800f2bc:	693a      	ldr	r2, [r7, #16]
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	693a      	ldr	r2, [r7, #16]
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a9f      	ldr	r2, [pc, #636]	; (800f558 <UART_SetConfig+0x2f8>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d121      	bne.n	800f324 <UART_SetConfig+0xc4>
 800f2e0:	4b9e      	ldr	r3, [pc, #632]	; (800f55c <UART_SetConfig+0x2fc>)
 800f2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2e6:	f003 0303 	and.w	r3, r3, #3
 800f2ea:	2b03      	cmp	r3, #3
 800f2ec:	d816      	bhi.n	800f31c <UART_SetConfig+0xbc>
 800f2ee:	a201      	add	r2, pc, #4	; (adr r2, 800f2f4 <UART_SetConfig+0x94>)
 800f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f4:	0800f305 	.word	0x0800f305
 800f2f8:	0800f311 	.word	0x0800f311
 800f2fc:	0800f30b 	.word	0x0800f30b
 800f300:	0800f317 	.word	0x0800f317
 800f304:	2301      	movs	r3, #1
 800f306:	77fb      	strb	r3, [r7, #31]
 800f308:	e151      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f30a:	2302      	movs	r3, #2
 800f30c:	77fb      	strb	r3, [r7, #31]
 800f30e:	e14e      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f310:	2304      	movs	r3, #4
 800f312:	77fb      	strb	r3, [r7, #31]
 800f314:	e14b      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f316:	2308      	movs	r3, #8
 800f318:	77fb      	strb	r3, [r7, #31]
 800f31a:	e148      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f31c:	2310      	movs	r3, #16
 800f31e:	77fb      	strb	r3, [r7, #31]
 800f320:	bf00      	nop
 800f322:	e144      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a8d      	ldr	r2, [pc, #564]	; (800f560 <UART_SetConfig+0x300>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d134      	bne.n	800f398 <UART_SetConfig+0x138>
 800f32e:	4b8b      	ldr	r3, [pc, #556]	; (800f55c <UART_SetConfig+0x2fc>)
 800f330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f334:	f003 030c 	and.w	r3, r3, #12
 800f338:	2b0c      	cmp	r3, #12
 800f33a:	d829      	bhi.n	800f390 <UART_SetConfig+0x130>
 800f33c:	a201      	add	r2, pc, #4	; (adr r2, 800f344 <UART_SetConfig+0xe4>)
 800f33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f342:	bf00      	nop
 800f344:	0800f379 	.word	0x0800f379
 800f348:	0800f391 	.word	0x0800f391
 800f34c:	0800f391 	.word	0x0800f391
 800f350:	0800f391 	.word	0x0800f391
 800f354:	0800f385 	.word	0x0800f385
 800f358:	0800f391 	.word	0x0800f391
 800f35c:	0800f391 	.word	0x0800f391
 800f360:	0800f391 	.word	0x0800f391
 800f364:	0800f37f 	.word	0x0800f37f
 800f368:	0800f391 	.word	0x0800f391
 800f36c:	0800f391 	.word	0x0800f391
 800f370:	0800f391 	.word	0x0800f391
 800f374:	0800f38b 	.word	0x0800f38b
 800f378:	2300      	movs	r3, #0
 800f37a:	77fb      	strb	r3, [r7, #31]
 800f37c:	e117      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f37e:	2302      	movs	r3, #2
 800f380:	77fb      	strb	r3, [r7, #31]
 800f382:	e114      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f384:	2304      	movs	r3, #4
 800f386:	77fb      	strb	r3, [r7, #31]
 800f388:	e111      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f38a:	2308      	movs	r3, #8
 800f38c:	77fb      	strb	r3, [r7, #31]
 800f38e:	e10e      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f390:	2310      	movs	r3, #16
 800f392:	77fb      	strb	r3, [r7, #31]
 800f394:	bf00      	nop
 800f396:	e10a      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a71      	ldr	r2, [pc, #452]	; (800f564 <UART_SetConfig+0x304>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d120      	bne.n	800f3e4 <UART_SetConfig+0x184>
 800f3a2:	4b6e      	ldr	r3, [pc, #440]	; (800f55c <UART_SetConfig+0x2fc>)
 800f3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f3ac:	2b10      	cmp	r3, #16
 800f3ae:	d00f      	beq.n	800f3d0 <UART_SetConfig+0x170>
 800f3b0:	2b10      	cmp	r3, #16
 800f3b2:	d802      	bhi.n	800f3ba <UART_SetConfig+0x15a>
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d005      	beq.n	800f3c4 <UART_SetConfig+0x164>
 800f3b8:	e010      	b.n	800f3dc <UART_SetConfig+0x17c>
 800f3ba:	2b20      	cmp	r3, #32
 800f3bc:	d005      	beq.n	800f3ca <UART_SetConfig+0x16a>
 800f3be:	2b30      	cmp	r3, #48	; 0x30
 800f3c0:	d009      	beq.n	800f3d6 <UART_SetConfig+0x176>
 800f3c2:	e00b      	b.n	800f3dc <UART_SetConfig+0x17c>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	77fb      	strb	r3, [r7, #31]
 800f3c8:	e0f1      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f3ca:	2302      	movs	r3, #2
 800f3cc:	77fb      	strb	r3, [r7, #31]
 800f3ce:	e0ee      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f3d0:	2304      	movs	r3, #4
 800f3d2:	77fb      	strb	r3, [r7, #31]
 800f3d4:	e0eb      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f3d6:	2308      	movs	r3, #8
 800f3d8:	77fb      	strb	r3, [r7, #31]
 800f3da:	e0e8      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f3dc:	2310      	movs	r3, #16
 800f3de:	77fb      	strb	r3, [r7, #31]
 800f3e0:	bf00      	nop
 800f3e2:	e0e4      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a5f      	ldr	r2, [pc, #380]	; (800f568 <UART_SetConfig+0x308>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d120      	bne.n	800f430 <UART_SetConfig+0x1d0>
 800f3ee:	4b5b      	ldr	r3, [pc, #364]	; (800f55c <UART_SetConfig+0x2fc>)
 800f3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f3f8:	2b40      	cmp	r3, #64	; 0x40
 800f3fa:	d00f      	beq.n	800f41c <UART_SetConfig+0x1bc>
 800f3fc:	2b40      	cmp	r3, #64	; 0x40
 800f3fe:	d802      	bhi.n	800f406 <UART_SetConfig+0x1a6>
 800f400:	2b00      	cmp	r3, #0
 800f402:	d005      	beq.n	800f410 <UART_SetConfig+0x1b0>
 800f404:	e010      	b.n	800f428 <UART_SetConfig+0x1c8>
 800f406:	2b80      	cmp	r3, #128	; 0x80
 800f408:	d005      	beq.n	800f416 <UART_SetConfig+0x1b6>
 800f40a:	2bc0      	cmp	r3, #192	; 0xc0
 800f40c:	d009      	beq.n	800f422 <UART_SetConfig+0x1c2>
 800f40e:	e00b      	b.n	800f428 <UART_SetConfig+0x1c8>
 800f410:	2300      	movs	r3, #0
 800f412:	77fb      	strb	r3, [r7, #31]
 800f414:	e0cb      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f416:	2302      	movs	r3, #2
 800f418:	77fb      	strb	r3, [r7, #31]
 800f41a:	e0c8      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f41c:	2304      	movs	r3, #4
 800f41e:	77fb      	strb	r3, [r7, #31]
 800f420:	e0c5      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f422:	2308      	movs	r3, #8
 800f424:	77fb      	strb	r3, [r7, #31]
 800f426:	e0c2      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f428:	2310      	movs	r3, #16
 800f42a:	77fb      	strb	r3, [r7, #31]
 800f42c:	bf00      	nop
 800f42e:	e0be      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a4d      	ldr	r2, [pc, #308]	; (800f56c <UART_SetConfig+0x30c>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d124      	bne.n	800f484 <UART_SetConfig+0x224>
 800f43a:	4b48      	ldr	r3, [pc, #288]	; (800f55c <UART_SetConfig+0x2fc>)
 800f43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f448:	d012      	beq.n	800f470 <UART_SetConfig+0x210>
 800f44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f44e:	d802      	bhi.n	800f456 <UART_SetConfig+0x1f6>
 800f450:	2b00      	cmp	r3, #0
 800f452:	d007      	beq.n	800f464 <UART_SetConfig+0x204>
 800f454:	e012      	b.n	800f47c <UART_SetConfig+0x21c>
 800f456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f45a:	d006      	beq.n	800f46a <UART_SetConfig+0x20a>
 800f45c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f460:	d009      	beq.n	800f476 <UART_SetConfig+0x216>
 800f462:	e00b      	b.n	800f47c <UART_SetConfig+0x21c>
 800f464:	2300      	movs	r3, #0
 800f466:	77fb      	strb	r3, [r7, #31]
 800f468:	e0a1      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f46a:	2302      	movs	r3, #2
 800f46c:	77fb      	strb	r3, [r7, #31]
 800f46e:	e09e      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f470:	2304      	movs	r3, #4
 800f472:	77fb      	strb	r3, [r7, #31]
 800f474:	e09b      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f476:	2308      	movs	r3, #8
 800f478:	77fb      	strb	r3, [r7, #31]
 800f47a:	e098      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f47c:	2310      	movs	r3, #16
 800f47e:	77fb      	strb	r3, [r7, #31]
 800f480:	bf00      	nop
 800f482:	e094      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4a39      	ldr	r2, [pc, #228]	; (800f570 <UART_SetConfig+0x310>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d124      	bne.n	800f4d8 <UART_SetConfig+0x278>
 800f48e:	4b33      	ldr	r3, [pc, #204]	; (800f55c <UART_SetConfig+0x2fc>)
 800f490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f49c:	d012      	beq.n	800f4c4 <UART_SetConfig+0x264>
 800f49e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4a2:	d802      	bhi.n	800f4aa <UART_SetConfig+0x24a>
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d007      	beq.n	800f4b8 <UART_SetConfig+0x258>
 800f4a8:	e012      	b.n	800f4d0 <UART_SetConfig+0x270>
 800f4aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4ae:	d006      	beq.n	800f4be <UART_SetConfig+0x25e>
 800f4b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f4b4:	d009      	beq.n	800f4ca <UART_SetConfig+0x26a>
 800f4b6:	e00b      	b.n	800f4d0 <UART_SetConfig+0x270>
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	77fb      	strb	r3, [r7, #31]
 800f4bc:	e077      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f4be:	2302      	movs	r3, #2
 800f4c0:	77fb      	strb	r3, [r7, #31]
 800f4c2:	e074      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f4c4:	2304      	movs	r3, #4
 800f4c6:	77fb      	strb	r3, [r7, #31]
 800f4c8:	e071      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f4ca:	2308      	movs	r3, #8
 800f4cc:	77fb      	strb	r3, [r7, #31]
 800f4ce:	e06e      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f4d0:	2310      	movs	r3, #16
 800f4d2:	77fb      	strb	r3, [r7, #31]
 800f4d4:	bf00      	nop
 800f4d6:	e06a      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a25      	ldr	r2, [pc, #148]	; (800f574 <UART_SetConfig+0x314>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d124      	bne.n	800f52c <UART_SetConfig+0x2cc>
 800f4e2:	4b1e      	ldr	r3, [pc, #120]	; (800f55c <UART_SetConfig+0x2fc>)
 800f4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4f0:	d012      	beq.n	800f518 <UART_SetConfig+0x2b8>
 800f4f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4f6:	d802      	bhi.n	800f4fe <UART_SetConfig+0x29e>
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d007      	beq.n	800f50c <UART_SetConfig+0x2ac>
 800f4fc:	e012      	b.n	800f524 <UART_SetConfig+0x2c4>
 800f4fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f502:	d006      	beq.n	800f512 <UART_SetConfig+0x2b2>
 800f504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f508:	d009      	beq.n	800f51e <UART_SetConfig+0x2be>
 800f50a:	e00b      	b.n	800f524 <UART_SetConfig+0x2c4>
 800f50c:	2300      	movs	r3, #0
 800f50e:	77fb      	strb	r3, [r7, #31]
 800f510:	e04d      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f512:	2302      	movs	r3, #2
 800f514:	77fb      	strb	r3, [r7, #31]
 800f516:	e04a      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f518:	2304      	movs	r3, #4
 800f51a:	77fb      	strb	r3, [r7, #31]
 800f51c:	e047      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f51e:	2308      	movs	r3, #8
 800f520:	77fb      	strb	r3, [r7, #31]
 800f522:	e044      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f524:	2310      	movs	r3, #16
 800f526:	77fb      	strb	r3, [r7, #31]
 800f528:	bf00      	nop
 800f52a:	e040      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a11      	ldr	r2, [pc, #68]	; (800f578 <UART_SetConfig+0x318>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d139      	bne.n	800f5aa <UART_SetConfig+0x34a>
 800f536:	4b09      	ldr	r3, [pc, #36]	; (800f55c <UART_SetConfig+0x2fc>)
 800f538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f53c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f544:	d027      	beq.n	800f596 <UART_SetConfig+0x336>
 800f546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f54a:	d817      	bhi.n	800f57c <UART_SetConfig+0x31c>
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d01c      	beq.n	800f58a <UART_SetConfig+0x32a>
 800f550:	e027      	b.n	800f5a2 <UART_SetConfig+0x342>
 800f552:	bf00      	nop
 800f554:	efff69f3 	.word	0xefff69f3
 800f558:	40011000 	.word	0x40011000
 800f55c:	40023800 	.word	0x40023800
 800f560:	40004400 	.word	0x40004400
 800f564:	40004800 	.word	0x40004800
 800f568:	40004c00 	.word	0x40004c00
 800f56c:	40005000 	.word	0x40005000
 800f570:	40011400 	.word	0x40011400
 800f574:	40007800 	.word	0x40007800
 800f578:	40007c00 	.word	0x40007c00
 800f57c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f580:	d006      	beq.n	800f590 <UART_SetConfig+0x330>
 800f582:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f586:	d009      	beq.n	800f59c <UART_SetConfig+0x33c>
 800f588:	e00b      	b.n	800f5a2 <UART_SetConfig+0x342>
 800f58a:	2300      	movs	r3, #0
 800f58c:	77fb      	strb	r3, [r7, #31]
 800f58e:	e00e      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f590:	2302      	movs	r3, #2
 800f592:	77fb      	strb	r3, [r7, #31]
 800f594:	e00b      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f596:	2304      	movs	r3, #4
 800f598:	77fb      	strb	r3, [r7, #31]
 800f59a:	e008      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f59c:	2308      	movs	r3, #8
 800f59e:	77fb      	strb	r3, [r7, #31]
 800f5a0:	e005      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f5a2:	2310      	movs	r3, #16
 800f5a4:	77fb      	strb	r3, [r7, #31]
 800f5a6:	bf00      	nop
 800f5a8:	e001      	b.n	800f5ae <UART_SetConfig+0x34e>
 800f5aa:	2310      	movs	r3, #16
 800f5ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	69db      	ldr	r3, [r3, #28]
 800f5b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5b6:	d17f      	bne.n	800f6b8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800f5b8:	7ffb      	ldrb	r3, [r7, #31]
 800f5ba:	2b08      	cmp	r3, #8
 800f5bc:	d85c      	bhi.n	800f678 <UART_SetConfig+0x418>
 800f5be:	a201      	add	r2, pc, #4	; (adr r2, 800f5c4 <UART_SetConfig+0x364>)
 800f5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c4:	0800f5e9 	.word	0x0800f5e9
 800f5c8:	0800f609 	.word	0x0800f609
 800f5cc:	0800f629 	.word	0x0800f629
 800f5d0:	0800f679 	.word	0x0800f679
 800f5d4:	0800f641 	.word	0x0800f641
 800f5d8:	0800f679 	.word	0x0800f679
 800f5dc:	0800f679 	.word	0x0800f679
 800f5e0:	0800f679 	.word	0x0800f679
 800f5e4:	0800f661 	.word	0x0800f661
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5e8:	f7fd fb74 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 800f5ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	005a      	lsls	r2, r3, #1
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	085b      	lsrs	r3, r3, #1
 800f5f8:	441a      	add	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f602:	b29b      	uxth	r3, r3
 800f604:	61bb      	str	r3, [r7, #24]
        break;
 800f606:	e03a      	b.n	800f67e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f608:	f7fd fb78 	bl	800ccfc <HAL_RCC_GetPCLK2Freq>
 800f60c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	005a      	lsls	r2, r3, #1
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	085b      	lsrs	r3, r3, #1
 800f618:	441a      	add	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f622:	b29b      	uxth	r3, r3
 800f624:	61bb      	str	r3, [r7, #24]
        break;
 800f626:	e02a      	b.n	800f67e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	085a      	lsrs	r2, r3, #1
 800f62e:	4b5f      	ldr	r3, [pc, #380]	; (800f7ac <UART_SetConfig+0x54c>)
 800f630:	4413      	add	r3, r2
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	6852      	ldr	r2, [r2, #4]
 800f636:	fbb3 f3f2 	udiv	r3, r3, r2
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	61bb      	str	r3, [r7, #24]
        break;
 800f63e:	e01e      	b.n	800f67e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f640:	f7fd fa8a 	bl	800cb58 <HAL_RCC_GetSysClockFreq>
 800f644:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	005a      	lsls	r2, r3, #1
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	085b      	lsrs	r3, r3, #1
 800f650:	441a      	add	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	fbb2 f3f3 	udiv	r3, r2, r3
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	61bb      	str	r3, [r7, #24]
        break;
 800f65e:	e00e      	b.n	800f67e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	085b      	lsrs	r3, r3, #1
 800f666:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f672:	b29b      	uxth	r3, r3
 800f674:	61bb      	str	r3, [r7, #24]
        break;
 800f676:	e002      	b.n	800f67e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800f678:	2301      	movs	r3, #1
 800f67a:	75fb      	strb	r3, [r7, #23]
        break;
 800f67c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	2b0f      	cmp	r3, #15
 800f682:	d916      	bls.n	800f6b2 <UART_SetConfig+0x452>
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f68a:	d212      	bcs.n	800f6b2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	b29b      	uxth	r3, r3
 800f690:	f023 030f 	bic.w	r3, r3, #15
 800f694:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	085b      	lsrs	r3, r3, #1
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	f003 0307 	and.w	r3, r3, #7
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	897b      	ldrh	r3, [r7, #10]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	897a      	ldrh	r2, [r7, #10]
 800f6ae:	60da      	str	r2, [r3, #12]
 800f6b0:	e070      	b.n	800f794 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	75fb      	strb	r3, [r7, #23]
 800f6b6:	e06d      	b.n	800f794 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800f6b8:	7ffb      	ldrb	r3, [r7, #31]
 800f6ba:	2b08      	cmp	r3, #8
 800f6bc:	d859      	bhi.n	800f772 <UART_SetConfig+0x512>
 800f6be:	a201      	add	r2, pc, #4	; (adr r2, 800f6c4 <UART_SetConfig+0x464>)
 800f6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c4:	0800f6e9 	.word	0x0800f6e9
 800f6c8:	0800f707 	.word	0x0800f707
 800f6cc:	0800f725 	.word	0x0800f725
 800f6d0:	0800f773 	.word	0x0800f773
 800f6d4:	0800f73d 	.word	0x0800f73d
 800f6d8:	0800f773 	.word	0x0800f773
 800f6dc:	0800f773 	.word	0x0800f773
 800f6e0:	0800f773 	.word	0x0800f773
 800f6e4:	0800f75b 	.word	0x0800f75b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6e8:	f7fd faf4 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 800f6ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	085a      	lsrs	r2, r3, #1
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	441a      	add	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f700:	b29b      	uxth	r3, r3
 800f702:	61bb      	str	r3, [r7, #24]
        break;
 800f704:	e038      	b.n	800f778 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f706:	f7fd faf9 	bl	800ccfc <HAL_RCC_GetPCLK2Freq>
 800f70a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	085a      	lsrs	r2, r3, #1
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	441a      	add	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f71e:	b29b      	uxth	r3, r3
 800f720:	61bb      	str	r3, [r7, #24]
        break;
 800f722:	e029      	b.n	800f778 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	085a      	lsrs	r2, r3, #1
 800f72a:	4b21      	ldr	r3, [pc, #132]	; (800f7b0 <UART_SetConfig+0x550>)
 800f72c:	4413      	add	r3, r2
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	6852      	ldr	r2, [r2, #4]
 800f732:	fbb3 f3f2 	udiv	r3, r3, r2
 800f736:	b29b      	uxth	r3, r3
 800f738:	61bb      	str	r3, [r7, #24]
        break;
 800f73a:	e01d      	b.n	800f778 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f73c:	f7fd fa0c 	bl	800cb58 <HAL_RCC_GetSysClockFreq>
 800f740:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	085a      	lsrs	r2, r3, #1
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	441a      	add	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	fbb2 f3f3 	udiv	r3, r2, r3
 800f754:	b29b      	uxth	r3, r3
 800f756:	61bb      	str	r3, [r7, #24]
        break;
 800f758:	e00e      	b.n	800f778 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	085b      	lsrs	r3, r3, #1
 800f760:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	fbb2 f3f3 	udiv	r3, r2, r3
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	61bb      	str	r3, [r7, #24]
        break;
 800f770:	e002      	b.n	800f778 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800f772:	2301      	movs	r3, #1
 800f774:	75fb      	strb	r3, [r7, #23]
        break;
 800f776:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	2b0f      	cmp	r3, #15
 800f77c:	d908      	bls.n	800f790 <UART_SetConfig+0x530>
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f784:	d204      	bcs.n	800f790 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	69ba      	ldr	r2, [r7, #24]
 800f78c:	60da      	str	r2, [r3, #12]
 800f78e:	e001      	b.n	800f794 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f790:	2301      	movs	r3, #1
 800f792:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3720      	adds	r7, #32
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
 800f7aa:	bf00      	nop
 800f7ac:	01e84800 	.word	0x01e84800
 800f7b0:	00f42400 	.word	0x00f42400

0800f7b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c0:	f003 0301 	and.w	r3, r3, #1
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00a      	beq.n	800f7de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	430a      	orrs	r2, r1
 800f7dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	f003 0302 	and.w	r3, r3, #2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00a      	beq.n	800f800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	430a      	orrs	r2, r1
 800f7fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f804:	f003 0304 	and.w	r3, r3, #4
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00a      	beq.n	800f822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	430a      	orrs	r2, r1
 800f820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f826:	f003 0308 	and.w	r3, r3, #8
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00a      	beq.n	800f844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	430a      	orrs	r2, r1
 800f842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f848:	f003 0310 	and.w	r3, r3, #16
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00a      	beq.n	800f866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	430a      	orrs	r2, r1
 800f864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86a:	f003 0320 	and.w	r3, r3, #32
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00a      	beq.n	800f888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	430a      	orrs	r2, r1
 800f886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f890:	2b00      	cmp	r3, #0
 800f892:	d01a      	beq.n	800f8ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	430a      	orrs	r2, r1
 800f8a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f8b2:	d10a      	bne.n	800f8ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	430a      	orrs	r2, r1
 800f8c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d00a      	beq.n	800f8ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	430a      	orrs	r2, r1
 800f8ea:	605a      	str	r2, [r3, #4]
  }
}
 800f8ec:	bf00      	nop
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af02      	add	r7, sp, #8
 800f8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f906:	f7f9 ffcf 	bl	80098a8 <HAL_GetTick>
 800f90a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	f003 0308 	and.w	r3, r3, #8
 800f916:	2b08      	cmp	r3, #8
 800f918:	d10e      	bne.n	800f938 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f91a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f82a 	bl	800f982 <UART_WaitOnFlagUntilTimeout>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d001      	beq.n	800f938 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f934:	2303      	movs	r3, #3
 800f936:	e020      	b.n	800f97a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f003 0304 	and.w	r3, r3, #4
 800f942:	2b04      	cmp	r3, #4
 800f944:	d10e      	bne.n	800f964 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f946:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f94a:	9300      	str	r3, [sp, #0]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f814 	bl	800f982 <UART_WaitOnFlagUntilTimeout>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d001      	beq.n	800f964 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f960:	2303      	movs	r3, #3
 800f962:	e00a      	b.n	800f97a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2220      	movs	r2, #32
 800f968:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2220      	movs	r2, #32
 800f96e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b084      	sub	sp, #16
 800f986:	af00      	add	r7, sp, #0
 800f988:	60f8      	str	r0, [r7, #12]
 800f98a:	60b9      	str	r1, [r7, #8]
 800f98c:	603b      	str	r3, [r7, #0]
 800f98e:	4613      	mov	r3, r2
 800f990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f992:	e05d      	b.n	800fa50 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f99a:	d059      	beq.n	800fa50 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f99c:	f7f9 ff84 	bl	80098a8 <HAL_GetTick>
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	1ad3      	subs	r3, r2, r3
 800f9a6:	69ba      	ldr	r2, [r7, #24]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d302      	bcc.n	800f9b2 <UART_WaitOnFlagUntilTimeout+0x30>
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d11b      	bne.n	800f9ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f9c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	689a      	ldr	r2, [r3, #8]
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f022 0201 	bic.w	r2, r2, #1
 800f9d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2220      	movs	r2, #32
 800f9d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2220      	movs	r2, #32
 800f9dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e042      	b.n	800fa70 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f003 0304 	and.w	r3, r3, #4
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d02b      	beq.n	800fa50 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	69db      	ldr	r3, [r3, #28]
 800f9fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa06:	d123      	bne.n	800fa50 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa10:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fa20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	689a      	ldr	r2, [r3, #8]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f022 0201 	bic.w	r2, r2, #1
 800fa30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2220      	movs	r2, #32
 800fa36:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2220      	movs	r2, #32
 800fa42:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800fa4c:	2303      	movs	r3, #3
 800fa4e:	e00f      	b.n	800fa70 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	69da      	ldr	r2, [r3, #28]
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	4013      	ands	r3, r2
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	bf0c      	ite	eq
 800fa60:	2301      	moveq	r3, #1
 800fa62:	2300      	movne	r3, #0
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	461a      	mov	r2, r3
 800fa68:	79fb      	ldrb	r3, [r7, #7]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d092      	beq.n	800f994 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3710      	adds	r7, #16
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fa8e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2220      	movs	r2, #32
 800fa94:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fa96:	bf00      	nop
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800faa2:	b480      	push	{r7}
 800faa4:	b083      	sub	sp, #12
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fab8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	689a      	ldr	r2, [r3, #8]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f022 0201 	bic.w	r2, r2, #1
 800fac8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2220      	movs	r2, #32
 800face:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	661a      	str	r2, [r3, #96]	; 0x60
}
 800fad6:	bf00      	nop
 800fad8:	370c      	adds	r7, #12
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr

0800fae2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b084      	sub	sp, #16
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faee:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	69db      	ldr	r3, [r3, #28]
 800faf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faf8:	d01e      	beq.n	800fb38 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fb10:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	689a      	ldr	r2, [r3, #8]
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f022 0201 	bic.w	r2, r2, #1
 800fb20:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	689a      	ldr	r2, [r3, #8]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb30:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2220      	movs	r2, #32
 800fb36:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f7ff fb73 	bl	800f224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb3e:	bf00      	nop
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f7ff fb6f 	bl	800f238 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb5a:	bf00      	nop
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b086      	sub	sp, #24
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb6e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	689b      	ldr	r3, [r3, #8]
 800fb82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb86:	2b80      	cmp	r3, #128	; 0x80
 800fb88:	d109      	bne.n	800fb9e <UART_DMAError+0x3c>
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	2b21      	cmp	r3, #33	; 0x21
 800fb8e:	d106      	bne.n	800fb9e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800fb98:	6978      	ldr	r0, [r7, #20]
 800fb9a:	f7ff ff6d 	bl	800fa78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fba8:	2b40      	cmp	r3, #64	; 0x40
 800fbaa:	d109      	bne.n	800fbc0 <UART_DMAError+0x5e>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2b22      	cmp	r3, #34	; 0x22
 800fbb0:	d106      	bne.n	800fbc0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800fbba:	6978      	ldr	r0, [r7, #20]
 800fbbc:	f7ff ff71 	bl	800faa2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc4:	f043 0210 	orr.w	r2, r3, #16
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fbcc:	6978      	ldr	r0, [r7, #20]
 800fbce:	f7ff fb3d 	bl	800f24c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fbd2:	bf00      	nop
 800fbd4:	3718      	adds	r7, #24
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
	...

0800fbdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fbdc:	b084      	sub	sp, #16
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
 800fbe6:	f107 001c 	add.w	r0, r7, #28
 800fbea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d120      	bne.n	800fc36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	68da      	ldr	r2, [r3, #12]
 800fc04:	4b20      	ldr	r3, [pc, #128]	; (800fc88 <USB_CoreInit+0xac>)
 800fc06:	4013      	ands	r3, r2
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fc18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	d105      	bne.n	800fc2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 fa52 	bl	80100d4 <USB_CoreReset>
 800fc30:	4603      	mov	r3, r0
 800fc32:	73fb      	strb	r3, [r7, #15]
 800fc34:	e010      	b.n	800fc58 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f000 fa46 	bl	80100d4 <USB_CoreReset>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d10b      	bne.n	800fc76 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	f043 0206 	orr.w	r2, r3, #6
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	f043 0220 	orr.w	r2, r3, #32
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc82:	b004      	add	sp, #16
 800fc84:	4770      	bx	lr
 800fc86:	bf00      	nop
 800fc88:	ffbdffbf 	.word	0xffbdffbf

0800fc8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	689b      	ldr	r3, [r3, #8]
 800fc98:	f023 0201 	bic.w	r2, r3, #1
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fcae:	b580      	push	{r7, lr}
 800fcb0:	b082      	sub	sp, #8
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fcc6:	78fb      	ldrb	r3, [r7, #3]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d106      	bne.n	800fcda <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	60da      	str	r2, [r3, #12]
 800fcd8:	e00b      	b.n	800fcf2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fcda:	78fb      	ldrb	r3, [r7, #3]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d106      	bne.n	800fcee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	60da      	str	r2, [r3, #12]
 800fcec:	e001      	b.n	800fcf2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e003      	b.n	800fcfa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fcf2:	2032      	movs	r0, #50	; 0x32
 800fcf4:	f7f9 fde4 	bl	80098c0 <HAL_Delay>

  return HAL_OK;
 800fcf8:	2300      	movs	r3, #0
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
	...

0800fd04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd04:	b084      	sub	sp, #16
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b086      	sub	sp, #24
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
 800fd0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fd12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fd1e:	2300      	movs	r3, #0
 800fd20:	613b      	str	r3, [r7, #16]
 800fd22:	e009      	b.n	800fd38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fd24:	687a      	ldr	r2, [r7, #4]
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	3340      	adds	r3, #64	; 0x40
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	4413      	add	r3, r2
 800fd2e:	2200      	movs	r2, #0
 800fd30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	3301      	adds	r3, #1
 800fd36:	613b      	str	r3, [r7, #16]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	2b0e      	cmp	r3, #14
 800fd3c:	d9f2      	bls.n	800fd24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fd3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d11c      	bne.n	800fd7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd52:	f043 0302 	orr.w	r3, r3, #2
 800fd56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	601a      	str	r2, [r3, #0]
 800fd7c:	e005      	b.n	800fd8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd90:	461a      	mov	r2, r3
 800fd92:	2300      	movs	r3, #0
 800fd94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fda4:	461a      	mov	r2, r3
 800fda6:	680b      	ldr	r3, [r1, #0]
 800fda8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d10c      	bne.n	800fdca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d104      	bne.n	800fdc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f959 	bl	8010070 <USB_SetDevSpeed>
 800fdbe:	e018      	b.n	800fdf2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fdc0:	2101      	movs	r1, #1
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 f954 	bl	8010070 <USB_SetDevSpeed>
 800fdc8:	e013      	b.n	800fdf2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800fdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdcc:	2b03      	cmp	r3, #3
 800fdce:	d10c      	bne.n	800fdea <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d104      	bne.n	800fde0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 f949 	bl	8010070 <USB_SetDevSpeed>
 800fdde:	e008      	b.n	800fdf2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fde0:	2101      	movs	r1, #1
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f944 	bl	8010070 <USB_SetDevSpeed>
 800fde8:	e003      	b.n	800fdf2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fdea:	2103      	movs	r1, #3
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 f93f 	bl	8010070 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fdf2:	2110      	movs	r1, #16
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 f8f3 	bl	800ffe0 <USB_FlushTxFifo>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d001      	beq.n	800fe04 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 f911 	bl	801002c <USB_FlushRxFifo>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800fe10:	2301      	movs	r3, #1
 800fe12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe26:	461a      	mov	r2, r3
 800fe28:	2300      	movs	r3, #0
 800fe2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe32:	461a      	mov	r2, r3
 800fe34:	2300      	movs	r3, #0
 800fe36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe38:	2300      	movs	r3, #0
 800fe3a:	613b      	str	r3, [r7, #16]
 800fe3c:	e043      	b.n	800fec6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	015a      	lsls	r2, r3, #5
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	4413      	add	r3, r2
 800fe46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe54:	d118      	bne.n	800fe88 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10a      	bne.n	800fe72 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	015a      	lsls	r2, r3, #5
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	4413      	add	r3, r2
 800fe64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe68:	461a      	mov	r2, r3
 800fe6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fe6e:	6013      	str	r3, [r2, #0]
 800fe70:	e013      	b.n	800fe9a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	015a      	lsls	r2, r3, #5
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	4413      	add	r3, r2
 800fe7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe7e:	461a      	mov	r2, r3
 800fe80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	e008      	b.n	800fe9a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	015a      	lsls	r2, r3, #5
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	4413      	add	r3, r2
 800fe90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe94:	461a      	mov	r2, r3
 800fe96:	2300      	movs	r3, #0
 800fe98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	015a      	lsls	r2, r3, #5
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	4413      	add	r3, r2
 800fea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea6:	461a      	mov	r2, r3
 800fea8:	2300      	movs	r3, #0
 800feaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	015a      	lsls	r2, r3, #5
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4413      	add	r3, r2
 800feb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb8:	461a      	mov	r2, r3
 800feba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800febe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	3301      	adds	r3, #1
 800fec4:	613b      	str	r3, [r7, #16]
 800fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec8:	693a      	ldr	r2, [r7, #16]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d3b7      	bcc.n	800fe3e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fece:	2300      	movs	r3, #0
 800fed0:	613b      	str	r3, [r7, #16]
 800fed2:	e043      	b.n	800ff5c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800feea:	d118      	bne.n	800ff1e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10a      	bne.n	800ff08 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	015a      	lsls	r2, r3, #5
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	4413      	add	r3, r2
 800fefa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fefe:	461a      	mov	r2, r3
 800ff00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff04:	6013      	str	r3, [r2, #0]
 800ff06:	e013      	b.n	800ff30 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	015a      	lsls	r2, r3, #5
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	4413      	add	r3, r2
 800ff10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff14:	461a      	mov	r2, r3
 800ff16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ff1a:	6013      	str	r3, [r2, #0]
 800ff1c:	e008      	b.n	800ff30 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	015a      	lsls	r2, r3, #5
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	4413      	add	r3, r2
 800ff26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	015a      	lsls	r2, r3, #5
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	4413      	add	r3, r2
 800ff38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	2300      	movs	r3, #0
 800ff40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	015a      	lsls	r2, r3, #5
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	4413      	add	r3, r2
 800ff4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff4e:	461a      	mov	r2, r3
 800ff50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ff54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	613b      	str	r3, [r7, #16]
 800ff5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5e:	693a      	ldr	r2, [r7, #16]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d3b7      	bcc.n	800fed4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	68fa      	ldr	r2, [r7, #12]
 800ff6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ff84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ff86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d105      	bne.n	800ff98 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	f043 0210 	orr.w	r2, r3, #16
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	699a      	ldr	r2, [r3, #24]
 800ff9c:	4b0e      	ldr	r3, [pc, #56]	; (800ffd8 <USB_DevInit+0x2d4>)
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ffa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d005      	beq.n	800ffb6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	699b      	ldr	r3, [r3, #24]
 800ffae:	f043 0208 	orr.w	r2, r3, #8
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ffb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d105      	bne.n	800ffc8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	699a      	ldr	r2, [r3, #24]
 800ffc0:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <USB_DevInit+0x2d8>)
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ffc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3718      	adds	r7, #24
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffd4:	b004      	add	sp, #16
 800ffd6:	4770      	bx	lr
 800ffd8:	803c3800 	.word	0x803c3800
 800ffdc:	40000004 	.word	0x40000004

0800ffe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ffea:	2300      	movs	r3, #0
 800ffec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	019b      	lsls	r3, r3, #6
 800fff2:	f043 0220 	orr.w	r2, r3, #32
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3301      	adds	r3, #1
 800fffe:	60fb      	str	r3, [r7, #12]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	4a09      	ldr	r2, [pc, #36]	; (8010028 <USB_FlushTxFifo+0x48>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d901      	bls.n	801000c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010008:	2303      	movs	r3, #3
 801000a:	e006      	b.n	801001a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	f003 0320 	and.w	r3, r3, #32
 8010014:	2b20      	cmp	r3, #32
 8010016:	d0f0      	beq.n	800fffa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010018:	2300      	movs	r3, #0
}
 801001a:	4618      	mov	r0, r3
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	00030d40 	.word	0x00030d40

0801002c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801002c:	b480      	push	{r7}
 801002e:	b085      	sub	sp, #20
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010034:	2300      	movs	r3, #0
 8010036:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2210      	movs	r2, #16
 801003c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	3301      	adds	r3, #1
 8010042:	60fb      	str	r3, [r7, #12]
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	4a09      	ldr	r2, [pc, #36]	; (801006c <USB_FlushRxFifo+0x40>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d901      	bls.n	8010050 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801004c:	2303      	movs	r3, #3
 801004e:	e006      	b.n	801005e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	691b      	ldr	r3, [r3, #16]
 8010054:	f003 0310 	and.w	r3, r3, #16
 8010058:	2b10      	cmp	r3, #16
 801005a:	d0f0      	beq.n	801003e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801005c:	2300      	movs	r3, #0
}
 801005e:	4618      	mov	r0, r3
 8010060:	3714      	adds	r7, #20
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	00030d40 	.word	0x00030d40

08010070 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010070:	b480      	push	{r7}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	460b      	mov	r3, r1
 801007a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	78fb      	ldrb	r3, [r7, #3]
 801008a:	68f9      	ldr	r1, [r7, #12]
 801008c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010090:	4313      	orrs	r3, r2
 8010092:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3714      	adds	r7, #20
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr

080100a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b084      	sub	sp, #16
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100bc:	f043 0302 	orr.w	r3, r3, #2
 80100c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80100c2:	2003      	movs	r0, #3
 80100c4:	f7f9 fbfc 	bl	80098c0 <HAL_Delay>

  return HAL_OK;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b085      	sub	sp, #20
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80100dc:	2300      	movs	r3, #0
 80100de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	3301      	adds	r3, #1
 80100e4:	60fb      	str	r3, [r7, #12]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	4a13      	ldr	r2, [pc, #76]	; (8010138 <USB_CoreReset+0x64>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d901      	bls.n	80100f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80100ee:	2303      	movs	r3, #3
 80100f0:	e01b      	b.n	801012a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	691b      	ldr	r3, [r3, #16]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	daf2      	bge.n	80100e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80100fa:	2300      	movs	r3, #0
 80100fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	691b      	ldr	r3, [r3, #16]
 8010102:	f043 0201 	orr.w	r2, r3, #1
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	3301      	adds	r3, #1
 801010e:	60fb      	str	r3, [r7, #12]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	4a09      	ldr	r2, [pc, #36]	; (8010138 <USB_CoreReset+0x64>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d901      	bls.n	801011c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010118:	2303      	movs	r3, #3
 801011a:	e006      	b.n	801012a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	691b      	ldr	r3, [r3, #16]
 8010120:	f003 0301 	and.w	r3, r3, #1
 8010124:	2b01      	cmp	r3, #1
 8010126:	d0f0      	beq.n	801010a <USB_CoreReset+0x36>

  return HAL_OK;
 8010128:	2300      	movs	r3, #0
}
 801012a:	4618      	mov	r0, r3
 801012c:	3714      	adds	r7, #20
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop
 8010138:	00030d40 	.word	0x00030d40

0801013c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801013c:	b480      	push	{r7}
 801013e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010140:	bf00      	nop
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr
	...

0801014c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801014c:	b480      	push	{r7}
 801014e:	b085      	sub	sp, #20
 8010150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010152:	f3ef 8305 	mrs	r3, IPSR
 8010156:	60bb      	str	r3, [r7, #8]
  return(result);
 8010158:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10f      	bne.n	801017e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801015e:	f3ef 8310 	mrs	r3, PRIMASK
 8010162:	607b      	str	r3, [r7, #4]
  return(result);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d105      	bne.n	8010176 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801016a:	f3ef 8311 	mrs	r3, BASEPRI
 801016e:	603b      	str	r3, [r7, #0]
  return(result);
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d007      	beq.n	8010186 <osKernelInitialize+0x3a>
 8010176:	4b0e      	ldr	r3, [pc, #56]	; (80101b0 <osKernelInitialize+0x64>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2b02      	cmp	r3, #2
 801017c:	d103      	bne.n	8010186 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801017e:	f06f 0305 	mvn.w	r3, #5
 8010182:	60fb      	str	r3, [r7, #12]
 8010184:	e00c      	b.n	80101a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010186:	4b0a      	ldr	r3, [pc, #40]	; (80101b0 <osKernelInitialize+0x64>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d105      	bne.n	801019a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801018e:	4b08      	ldr	r3, [pc, #32]	; (80101b0 <osKernelInitialize+0x64>)
 8010190:	2201      	movs	r2, #1
 8010192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010194:	2300      	movs	r3, #0
 8010196:	60fb      	str	r3, [r7, #12]
 8010198:	e002      	b.n	80101a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801019a:	f04f 33ff 	mov.w	r3, #4294967295
 801019e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80101a0:	68fb      	ldr	r3, [r7, #12]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3714      	adds	r7, #20
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	20003384 	.word	0x20003384

080101b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101ba:	f3ef 8305 	mrs	r3, IPSR
 80101be:	60bb      	str	r3, [r7, #8]
  return(result);
 80101c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d10f      	bne.n	80101e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101c6:	f3ef 8310 	mrs	r3, PRIMASK
 80101ca:	607b      	str	r3, [r7, #4]
  return(result);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d105      	bne.n	80101de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101d2:	f3ef 8311 	mrs	r3, BASEPRI
 80101d6:	603b      	str	r3, [r7, #0]
  return(result);
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d007      	beq.n	80101ee <osKernelStart+0x3a>
 80101de:	4b0f      	ldr	r3, [pc, #60]	; (801021c <osKernelStart+0x68>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	d103      	bne.n	80101ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80101e6:	f06f 0305 	mvn.w	r3, #5
 80101ea:	60fb      	str	r3, [r7, #12]
 80101ec:	e010      	b.n	8010210 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80101ee:	4b0b      	ldr	r3, [pc, #44]	; (801021c <osKernelStart+0x68>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d109      	bne.n	801020a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80101f6:	f7ff ffa1 	bl	801013c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80101fa:	4b08      	ldr	r3, [pc, #32]	; (801021c <osKernelStart+0x68>)
 80101fc:	2202      	movs	r2, #2
 80101fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010200:	f001 fa80 	bl	8011704 <vTaskStartScheduler>
      stat = osOK;
 8010204:	2300      	movs	r3, #0
 8010206:	60fb      	str	r3, [r7, #12]
 8010208:	e002      	b.n	8010210 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801020a:	f04f 33ff 	mov.w	r3, #4294967295
 801020e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010210:	68fb      	ldr	r3, [r7, #12]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	20003384 	.word	0x20003384

08010220 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010220:	b580      	push	{r7, lr}
 8010222:	b090      	sub	sp, #64	; 0x40
 8010224:	af04      	add	r7, sp, #16
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801022c:	2300      	movs	r3, #0
 801022e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010230:	f3ef 8305 	mrs	r3, IPSR
 8010234:	61fb      	str	r3, [r7, #28]
  return(result);
 8010236:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010238:	2b00      	cmp	r3, #0
 801023a:	f040 808f 	bne.w	801035c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801023e:	f3ef 8310 	mrs	r3, PRIMASK
 8010242:	61bb      	str	r3, [r7, #24]
  return(result);
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d105      	bne.n	8010256 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801024a:	f3ef 8311 	mrs	r3, BASEPRI
 801024e:	617b      	str	r3, [r7, #20]
  return(result);
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d003      	beq.n	801025e <osThreadNew+0x3e>
 8010256:	4b44      	ldr	r3, [pc, #272]	; (8010368 <osThreadNew+0x148>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b02      	cmp	r3, #2
 801025c:	d07e      	beq.n	801035c <osThreadNew+0x13c>
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d07b      	beq.n	801035c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010264:	2380      	movs	r3, #128	; 0x80
 8010266:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010268:	2318      	movs	r3, #24
 801026a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801026c:	2300      	movs	r3, #0
 801026e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010270:	f04f 33ff 	mov.w	r3, #4294967295
 8010274:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d045      	beq.n	8010308 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d002      	beq.n	801028a <osThreadNew+0x6a>
        name = attr->name;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	699b      	ldr	r3, [r3, #24]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d002      	beq.n	8010298 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	699b      	ldr	r3, [r3, #24]
 8010296:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029a:	2b00      	cmp	r3, #0
 801029c:	d008      	beq.n	80102b0 <osThreadNew+0x90>
 801029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a0:	2b38      	cmp	r3, #56	; 0x38
 80102a2:	d805      	bhi.n	80102b0 <osThreadNew+0x90>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	f003 0301 	and.w	r3, r3, #1
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d001      	beq.n	80102b4 <osThreadNew+0x94>
        return (NULL);
 80102b0:	2300      	movs	r3, #0
 80102b2:	e054      	b.n	801035e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	695b      	ldr	r3, [r3, #20]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d003      	beq.n	80102c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	695b      	ldr	r3, [r3, #20]
 80102c0:	089b      	lsrs	r3, r3, #2
 80102c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00e      	beq.n	80102ea <osThreadNew+0xca>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	2b5b      	cmp	r3, #91	; 0x5b
 80102d2:	d90a      	bls.n	80102ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d006      	beq.n	80102ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	695b      	ldr	r3, [r3, #20]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <osThreadNew+0xca>
        mem = 1;
 80102e4:	2301      	movs	r3, #1
 80102e6:	623b      	str	r3, [r7, #32]
 80102e8:	e010      	b.n	801030c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10c      	bne.n	801030c <osThreadNew+0xec>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d108      	bne.n	801030c <osThreadNew+0xec>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d104      	bne.n	801030c <osThreadNew+0xec>
          mem = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	623b      	str	r3, [r7, #32]
 8010306:	e001      	b.n	801030c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010308:	2300      	movs	r3, #0
 801030a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	2b01      	cmp	r3, #1
 8010310:	d110      	bne.n	8010334 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801031a:	9202      	str	r2, [sp, #8]
 801031c:	9301      	str	r3, [sp, #4]
 801031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f000 ff9b 	bl	8011264 <xTaskCreateStatic>
 801032e:	4603      	mov	r3, r0
 8010330:	613b      	str	r3, [r7, #16]
 8010332:	e013      	b.n	801035c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010334:	6a3b      	ldr	r3, [r7, #32]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d110      	bne.n	801035c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	b29a      	uxth	r2, r3
 801033e:	f107 0310 	add.w	r3, r7, #16
 8010342:	9301      	str	r3, [sp, #4]
 8010344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	f000 ffe9 	bl	8011324 <xTaskCreate>
 8010352:	4603      	mov	r3, r0
 8010354:	2b01      	cmp	r3, #1
 8010356:	d001      	beq.n	801035c <osThreadNew+0x13c>
          hTask = NULL;
 8010358:	2300      	movs	r3, #0
 801035a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801035c:	693b      	ldr	r3, [r7, #16]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3730      	adds	r7, #48	; 0x30
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	20003384 	.word	0x20003384

0801036c <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 801036c:	b580      	push	{r7, lr}
 801036e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8010370:	2000      	movs	r0, #0
 8010372:	f001 f91d 	bl	80115b0 <vTaskDelete>
#endif
  for (;;);
 8010376:	e7fe      	b.n	8010376 <osThreadExit+0xa>

08010378 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010378:	b580      	push	{r7, lr}
 801037a:	b086      	sub	sp, #24
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010380:	f3ef 8305 	mrs	r3, IPSR
 8010384:	613b      	str	r3, [r7, #16]
  return(result);
 8010386:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10f      	bne.n	80103ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801038c:	f3ef 8310 	mrs	r3, PRIMASK
 8010390:	60fb      	str	r3, [r7, #12]
  return(result);
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d105      	bne.n	80103a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010398:	f3ef 8311 	mrs	r3, BASEPRI
 801039c:	60bb      	str	r3, [r7, #8]
  return(result);
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d007      	beq.n	80103b4 <osDelay+0x3c>
 80103a4:	4b0a      	ldr	r3, [pc, #40]	; (80103d0 <osDelay+0x58>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	d103      	bne.n	80103b4 <osDelay+0x3c>
    stat = osErrorISR;
 80103ac:	f06f 0305 	mvn.w	r3, #5
 80103b0:	617b      	str	r3, [r7, #20]
 80103b2:	e007      	b.n	80103c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d002      	beq.n	80103c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f001 f96a 	bl	8011698 <vTaskDelay>
    }
  }

  return (stat);
 80103c4:	697b      	ldr	r3, [r7, #20]
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3718      	adds	r7, #24
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	20003384 	.word	0x20003384

080103d4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b088      	sub	sp, #32
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80103dc:	2300      	movs	r3, #0
 80103de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103e0:	f3ef 8305 	mrs	r3, IPSR
 80103e4:	617b      	str	r3, [r7, #20]
  return(result);
 80103e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d13d      	bne.n	8010468 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103ec:	f3ef 8310 	mrs	r3, PRIMASK
 80103f0:	613b      	str	r3, [r7, #16]
  return(result);
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d105      	bne.n	8010404 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103f8:	f3ef 8311 	mrs	r3, BASEPRI
 80103fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d003      	beq.n	801040c <osEventFlagsNew+0x38>
 8010404:	4b1b      	ldr	r3, [pc, #108]	; (8010474 <osEventFlagsNew+0xa0>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2b02      	cmp	r3, #2
 801040a:	d02d      	beq.n	8010468 <osEventFlagsNew+0x94>
    mem = -1;
 801040c:	f04f 33ff 	mov.w	r3, #4294967295
 8010410:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d015      	beq.n	8010444 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	689b      	ldr	r3, [r3, #8]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d006      	beq.n	801042e <osEventFlagsNew+0x5a>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	2b1f      	cmp	r3, #31
 8010426:	d902      	bls.n	801042e <osEventFlagsNew+0x5a>
        mem = 1;
 8010428:	2301      	movs	r3, #1
 801042a:	61bb      	str	r3, [r7, #24]
 801042c:	e00c      	b.n	8010448 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d108      	bne.n	8010448 <osEventFlagsNew+0x74>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d104      	bne.n	8010448 <osEventFlagsNew+0x74>
          mem = 0;
 801043e:	2300      	movs	r3, #0
 8010440:	61bb      	str	r3, [r7, #24]
 8010442:	e001      	b.n	8010448 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8010444:	2300      	movs	r3, #0
 8010446:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	2b01      	cmp	r3, #1
 801044c:	d106      	bne.n	801045c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	4618      	mov	r0, r3
 8010454:	f000 f888 	bl	8010568 <xEventGroupCreateStatic>
 8010458:	61f8      	str	r0, [r7, #28]
 801045a:	e005      	b.n	8010468 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d102      	bne.n	8010468 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8010462:	f000 f8ba 	bl	80105da <xEventGroupCreate>
 8010466:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010468:	69fb      	ldr	r3, [r7, #28]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3720      	adds	r7, #32
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	20003384 	.word	0x20003384

08010478 <osEventFlagsClear>:
  }

  return (rflags);
}

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8010478:	b580      	push	{r7, lr}
 801047a:	b088      	sub	sp, #32
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d004      	beq.n	8010496 <osEventFlagsClear+0x1e>
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010492:	2b00      	cmp	r3, #0
 8010494:	d003      	beq.n	801049e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010496:	f06f 0303 	mvn.w	r3, #3
 801049a:	61fb      	str	r3, [r7, #28]
 801049c:	e029      	b.n	80104f2 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801049e:	f3ef 8305 	mrs	r3, IPSR
 80104a2:	617b      	str	r3, [r7, #20]
  return(result);
 80104a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d10f      	bne.n	80104ca <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104aa:	f3ef 8310 	mrs	r3, PRIMASK
 80104ae:	613b      	str	r3, [r7, #16]
  return(result);
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d105      	bne.n	80104c2 <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104b6:	f3ef 8311 	mrs	r3, BASEPRI
 80104ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d012      	beq.n	80104e8 <osEventFlagsClear+0x70>
 80104c2:	4b0e      	ldr	r3, [pc, #56]	; (80104fc <osEventFlagsClear+0x84>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d10e      	bne.n	80104e8 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80104ca:	69b8      	ldr	r0, [r7, #24]
 80104cc:	f000 f8ee 	bl	80106ac <xEventGroupGetBitsFromISR>
 80104d0:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80104d2:	6839      	ldr	r1, [r7, #0]
 80104d4:	69b8      	ldr	r0, [r7, #24]
 80104d6:	f000 f8d5 	bl	8010684 <xEventGroupClearBitsFromISR>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d108      	bne.n	80104f2 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80104e0:	f06f 0302 	mvn.w	r3, #2
 80104e4:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80104e6:	e004      	b.n	80104f2 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80104e8:	6839      	ldr	r1, [r7, #0]
 80104ea:	69b8      	ldr	r0, [r7, #24]
 80104ec:	f000 f88f 	bl	801060e <xEventGroupClearBits>
 80104f0:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80104f2:	69fb      	ldr	r3, [r7, #28]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3720      	adds	r7, #32
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	20003384 	.word	0x20003384

08010500 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010500:	b480      	push	{r7}
 8010502:	b085      	sub	sp, #20
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	4a07      	ldr	r2, [pc, #28]	; (801052c <vApplicationGetIdleTaskMemory+0x2c>)
 8010510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	4a06      	ldr	r2, [pc, #24]	; (8010530 <vApplicationGetIdleTaskMemory+0x30>)
 8010516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2280      	movs	r2, #128	; 0x80
 801051c:	601a      	str	r2, [r3, #0]
}
 801051e:	bf00      	nop
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr
 801052a:	bf00      	nop
 801052c:	20003388 	.word	0x20003388
 8010530:	200033e4 	.word	0x200033e4

08010534 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010534:	b480      	push	{r7}
 8010536:	b085      	sub	sp, #20
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	4a07      	ldr	r2, [pc, #28]	; (8010560 <vApplicationGetTimerTaskMemory+0x2c>)
 8010544:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	4a06      	ldr	r2, [pc, #24]	; (8010564 <vApplicationGetTimerTaskMemory+0x30>)
 801054a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010552:	601a      	str	r2, [r3, #0]
}
 8010554:	bf00      	nop
 8010556:	3714      	adds	r7, #20
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr
 8010560:	200035e4 	.word	0x200035e4
 8010564:	20003640 	.word	0x20003640

08010568 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8010568:	b580      	push	{r7, lr}
 801056a:	b086      	sub	sp, #24
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d10b      	bne.n	801058e <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057a:	b672      	cpsid	i
 801057c:	f383 8811 	msr	BASEPRI, r3
 8010580:	f3bf 8f6f 	isb	sy
 8010584:	f3bf 8f4f 	dsb	sy
 8010588:	b662      	cpsie	i
 801058a:	613b      	str	r3, [r7, #16]
 801058c:	e7fe      	b.n	801058c <xEventGroupCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801058e:	2320      	movs	r3, #32
 8010590:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	2b20      	cmp	r3, #32
 8010596:	d00b      	beq.n	80105b0 <xEventGroupCreateStatic+0x48>
 8010598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059c:	b672      	cpsid	i
 801059e:	f383 8811 	msr	BASEPRI, r3
 80105a2:	f3bf 8f6f 	isb	sy
 80105a6:	f3bf 8f4f 	dsb	sy
 80105aa:	b662      	cpsie	i
 80105ac:	60fb      	str	r3, [r7, #12]
 80105ae:	e7fe      	b.n	80105ae <xEventGroupCreateStatic+0x46>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00a      	beq.n	80105d0 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	2200      	movs	r2, #0
 80105be:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	3304      	adds	r3, #4
 80105c4:	4618      	mov	r0, r3
 80105c6:	f000 f8a3 	bl	8010710 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	2201      	movs	r2, #1
 80105ce:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80105d0:	697b      	ldr	r3, [r7, #20]
	}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3718      	adds	r7, #24
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80105da:	b580      	push	{r7, lr}
 80105dc:	b082      	sub	sp, #8
 80105de:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80105e0:	2020      	movs	r0, #32
 80105e2:	f002 fc73 	bl	8012ecc <pvPortMalloc>
 80105e6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00a      	beq.n	8010604 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3304      	adds	r3, #4
 80105f8:	4618      	mov	r0, r3
 80105fa:	f000 f889 	bl	8010710 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2200      	movs	r2, #0
 8010602:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010604:	687b      	ldr	r3, [r7, #4]
	}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b086      	sub	sp, #24
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
 8010616:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d10b      	bne.n	801063a <xEventGroupClearBits+0x2c>
 8010622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010626:	b672      	cpsid	i
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	b662      	cpsie	i
 8010636:	60fb      	str	r3, [r7, #12]
 8010638:	e7fe      	b.n	8010638 <xEventGroupClearBits+0x2a>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00b      	beq.n	801065c <xEventGroupClearBits+0x4e>
 8010644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010648:	b672      	cpsid	i
 801064a:	f383 8811 	msr	BASEPRI, r3
 801064e:	f3bf 8f6f 	isb	sy
 8010652:	f3bf 8f4f 	dsb	sy
 8010656:	b662      	cpsie	i
 8010658:	60bb      	str	r3, [r7, #8]
 801065a:	e7fe      	b.n	801065a <xEventGroupClearBits+0x4c>

	taskENTER_CRITICAL();
 801065c:	f002 fb14 	bl	8012c88 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	43db      	mvns	r3, r3
 801066e:	401a      	ands	r2, r3
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8010674:	f002 fb3a 	bl	8012cec <vPortExitCritical>

	return uxReturn;
 8010678:	693b      	ldr	r3, [r7, #16]
}
 801067a:	4618      	mov	r0, r3
 801067c:	3718      	adds	r7, #24
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
	...

08010684 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801068e:	2300      	movs	r3, #0
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	6879      	ldr	r1, [r7, #4]
 8010694:	4804      	ldr	r0, [pc, #16]	; (80106a8 <xEventGroupClearBitsFromISR+0x24>)
 8010696:	f002 f9cb 	bl	8012a30 <xTimerPendFunctionCallFromISR>
 801069a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801069c:	68fb      	ldr	r3, [r7, #12]
	}
 801069e:	4618      	mov	r0, r3
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	080106f7 	.word	0x080106f7

080106ac <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80106ac:	b480      	push	{r7}
 80106ae:	b089      	sub	sp, #36	; 0x24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80106b8:	f3ef 8211 	mrs	r2, BASEPRI
 80106bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c0:	b672      	cpsid	i
 80106c2:	f383 8811 	msr	BASEPRI, r3
 80106c6:	f3bf 8f6f 	isb	sy
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	b662      	cpsie	i
 80106d0:	60fa      	str	r2, [r7, #12]
 80106d2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80106d4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80106d6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	617b      	str	r3, [r7, #20]
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80106e8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80106ea:	4618      	mov	r0, r3
 80106ec:	3724      	adds	r7, #36	; 0x24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr

080106f6 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b082      	sub	sp, #8
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010700:	6839      	ldr	r1, [r7, #0]
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff ff83 	bl	801060e <xEventGroupClearBits>
}
 8010708:	bf00      	nop
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f103 0208 	add.w	r2, r3, #8
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f04f 32ff 	mov.w	r2, #4294967295
 8010728:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f103 0208 	add.w	r2, r3, #8
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f103 0208 	add.w	r2, r3, #8
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010744:	bf00      	nop
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801075e:	bf00      	nop
 8010760:	370c      	adds	r7, #12
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr

0801076a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801076a:	b480      	push	{r7}
 801076c:	b085      	sub	sp, #20
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	689a      	ldr	r2, [r3, #8]
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	683a      	ldr	r2, [r7, #0]
 801078e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	683a      	ldr	r2, [r7, #0]
 8010794:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	687a      	ldr	r2, [r7, #4]
 801079a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	1c5a      	adds	r2, r3, #1
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	601a      	str	r2, [r3, #0]
}
 80107a6:	bf00      	nop
 80107a8:	3714      	adds	r7, #20
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80107b2:	b480      	push	{r7}
 80107b4:	b085      	sub	sp, #20
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
 80107ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c8:	d103      	bne.n	80107d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	691b      	ldr	r3, [r3, #16]
 80107ce:	60fb      	str	r3, [r7, #12]
 80107d0:	e00c      	b.n	80107ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	3308      	adds	r3, #8
 80107d6:	60fb      	str	r3, [r7, #12]
 80107d8:	e002      	b.n	80107e0 <vListInsert+0x2e>
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	60fb      	str	r3, [r7, #12]
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	68ba      	ldr	r2, [r7, #8]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d2f6      	bcs.n	80107da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	685a      	ldr	r2, [r3, #4]
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	683a      	ldr	r2, [r7, #0]
 80107fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	683a      	ldr	r2, [r7, #0]
 8010806:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	1c5a      	adds	r2, r3, #1
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	601a      	str	r2, [r3, #0]
}
 8010818:	bf00      	nop
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	691b      	ldr	r3, [r3, #16]
 8010830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	6892      	ldr	r2, [r2, #8]
 801083a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	6852      	ldr	r2, [r2, #4]
 8010844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	429a      	cmp	r2, r3
 801084e:	d103      	bne.n	8010858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	689a      	ldr	r2, [r3, #8]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	1e5a      	subs	r2, r3, #1
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3714      	adds	r7, #20
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d10b      	bne.n	80108a4 <xQueueGenericReset+0x2c>
	__asm volatile
 801088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010890:	b672      	cpsid	i
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	b662      	cpsie	i
 80108a0:	60bb      	str	r3, [r7, #8]
 80108a2:	e7fe      	b.n	80108a2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80108a4:	f002 f9f0 	bl	8012c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108b0:	68f9      	ldr	r1, [r7, #12]
 80108b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80108b4:	fb01 f303 	mul.w	r3, r1, r3
 80108b8:	441a      	add	r2, r3
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2200      	movs	r2, #0
 80108c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108d4:	3b01      	subs	r3, #1
 80108d6:	68f9      	ldr	r1, [r7, #12]
 80108d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80108da:	fb01 f303 	mul.w	r3, r1, r3
 80108de:	441a      	add	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	22ff      	movs	r2, #255	; 0xff
 80108e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	22ff      	movs	r2, #255	; 0xff
 80108f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d114      	bne.n	8010924 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d01a      	beq.n	8010938 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	3310      	adds	r3, #16
 8010906:	4618      	mov	r0, r3
 8010908:	f001 f98a 	bl	8011c20 <xTaskRemoveFromEventList>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d012      	beq.n	8010938 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010912:	4b0d      	ldr	r3, [pc, #52]	; (8010948 <xQueueGenericReset+0xd0>)
 8010914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	f3bf 8f4f 	dsb	sy
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	e009      	b.n	8010938 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	3310      	adds	r3, #16
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff fef1 	bl	8010710 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	3324      	adds	r3, #36	; 0x24
 8010932:	4618      	mov	r0, r3
 8010934:	f7ff feec 	bl	8010710 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010938:	f002 f9d8 	bl	8012cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801093c:	2301      	movs	r3, #1
}
 801093e:	4618      	mov	r0, r3
 8010940:	3710      	adds	r7, #16
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	e000ed04 	.word	0xe000ed04

0801094c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801094c:	b580      	push	{r7, lr}
 801094e:	b08e      	sub	sp, #56	; 0x38
 8010950:	af02      	add	r7, sp, #8
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10b      	bne.n	8010978 <xQueueGenericCreateStatic+0x2c>
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	b672      	cpsid	i
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	b662      	cpsie	i
 8010974:	62bb      	str	r3, [r7, #40]	; 0x28
 8010976:	e7fe      	b.n	8010976 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10b      	bne.n	8010996 <xQueueGenericCreateStatic+0x4a>
 801097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010982:	b672      	cpsid	i
 8010984:	f383 8811 	msr	BASEPRI, r3
 8010988:	f3bf 8f6f 	isb	sy
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	b662      	cpsie	i
 8010992:	627b      	str	r3, [r7, #36]	; 0x24
 8010994:	e7fe      	b.n	8010994 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <xQueueGenericCreateStatic+0x56>
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <xQueueGenericCreateStatic+0x5a>
 80109a2:	2301      	movs	r3, #1
 80109a4:	e000      	b.n	80109a8 <xQueueGenericCreateStatic+0x5c>
 80109a6:	2300      	movs	r3, #0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d10b      	bne.n	80109c4 <xQueueGenericCreateStatic+0x78>
 80109ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b0:	b672      	cpsid	i
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	b662      	cpsie	i
 80109c0:	623b      	str	r3, [r7, #32]
 80109c2:	e7fe      	b.n	80109c2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d102      	bne.n	80109d0 <xQueueGenericCreateStatic+0x84>
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <xQueueGenericCreateStatic+0x88>
 80109d0:	2301      	movs	r3, #1
 80109d2:	e000      	b.n	80109d6 <xQueueGenericCreateStatic+0x8a>
 80109d4:	2300      	movs	r3, #0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d10b      	bne.n	80109f2 <xQueueGenericCreateStatic+0xa6>
 80109da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109de:	b672      	cpsid	i
 80109e0:	f383 8811 	msr	BASEPRI, r3
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	b662      	cpsie	i
 80109ee:	61fb      	str	r3, [r7, #28]
 80109f0:	e7fe      	b.n	80109f0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80109f2:	2350      	movs	r3, #80	; 0x50
 80109f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	2b50      	cmp	r3, #80	; 0x50
 80109fa:	d00b      	beq.n	8010a14 <xQueueGenericCreateStatic+0xc8>
 80109fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a00:	b672      	cpsid	i
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	b662      	cpsie	i
 8010a10:	61bb      	str	r3, [r7, #24]
 8010a12:	e7fe      	b.n	8010a12 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010a14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d00d      	beq.n	8010a3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a22:	2201      	movs	r2, #1
 8010a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010a28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	4613      	mov	r3, r2
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	68b9      	ldr	r1, [r7, #8]
 8010a36:	68f8      	ldr	r0, [r7, #12]
 8010a38:	f000 f805 	bl	8010a46 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3730      	adds	r7, #48	; 0x30
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b084      	sub	sp, #16
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	60f8      	str	r0, [r7, #12]
 8010a4e:	60b9      	str	r1, [r7, #8]
 8010a50:	607a      	str	r2, [r7, #4]
 8010a52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d103      	bne.n	8010a62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	69ba      	ldr	r2, [r7, #24]
 8010a5e:	601a      	str	r2, [r3, #0]
 8010a60:	e002      	b.n	8010a68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010a68:	69bb      	ldr	r3, [r7, #24]
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010a6e:	69bb      	ldr	r3, [r7, #24]
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a74:	2101      	movs	r1, #1
 8010a76:	69b8      	ldr	r0, [r7, #24]
 8010a78:	f7ff fefe 	bl	8010878 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010a7c:	69bb      	ldr	r3, [r7, #24]
 8010a7e:	78fa      	ldrb	r2, [r7, #3]
 8010a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010a84:	bf00      	nop
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b08e      	sub	sp, #56	; 0x38
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	60b9      	str	r1, [r7, #8]
 8010a96:	607a      	str	r2, [r7, #4]
 8010a98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10b      	bne.n	8010ac0 <xQueueGenericSend+0x34>
 8010aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aac:	b672      	cpsid	i
 8010aae:	f383 8811 	msr	BASEPRI, r3
 8010ab2:	f3bf 8f6f 	isb	sy
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	b662      	cpsie	i
 8010abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010abe:	e7fe      	b.n	8010abe <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d103      	bne.n	8010ace <xQueueGenericSend+0x42>
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d101      	bne.n	8010ad2 <xQueueGenericSend+0x46>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e000      	b.n	8010ad4 <xQueueGenericSend+0x48>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d10b      	bne.n	8010af0 <xQueueGenericSend+0x64>
 8010ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010adc:	b672      	cpsid	i
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	b662      	cpsie	i
 8010aec:	627b      	str	r3, [r7, #36]	; 0x24
 8010aee:	e7fe      	b.n	8010aee <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	d103      	bne.n	8010afe <xQueueGenericSend+0x72>
 8010af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d101      	bne.n	8010b02 <xQueueGenericSend+0x76>
 8010afe:	2301      	movs	r3, #1
 8010b00:	e000      	b.n	8010b04 <xQueueGenericSend+0x78>
 8010b02:	2300      	movs	r3, #0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10b      	bne.n	8010b20 <xQueueGenericSend+0x94>
 8010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0c:	b672      	cpsid	i
 8010b0e:	f383 8811 	msr	BASEPRI, r3
 8010b12:	f3bf 8f6f 	isb	sy
 8010b16:	f3bf 8f4f 	dsb	sy
 8010b1a:	b662      	cpsie	i
 8010b1c:	623b      	str	r3, [r7, #32]
 8010b1e:	e7fe      	b.n	8010b1e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b20:	f001 fa3c 	bl	8011f9c <xTaskGetSchedulerState>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d102      	bne.n	8010b30 <xQueueGenericSend+0xa4>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <xQueueGenericSend+0xa8>
 8010b30:	2301      	movs	r3, #1
 8010b32:	e000      	b.n	8010b36 <xQueueGenericSend+0xaa>
 8010b34:	2300      	movs	r3, #0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10b      	bne.n	8010b52 <xQueueGenericSend+0xc6>
 8010b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3e:	b672      	cpsid	i
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	b662      	cpsie	i
 8010b4e:	61fb      	str	r3, [r7, #28]
 8010b50:	e7fe      	b.n	8010b50 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b52:	f002 f899 	bl	8012c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d302      	bcc.n	8010b68 <xQueueGenericSend+0xdc>
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	2b02      	cmp	r3, #2
 8010b66:	d129      	bne.n	8010bbc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b68:	683a      	ldr	r2, [r7, #0]
 8010b6a:	68b9      	ldr	r1, [r7, #8]
 8010b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b6e:	f000 fa0d 	bl	8010f8c <prvCopyDataToQueue>
 8010b72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d010      	beq.n	8010b9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7e:	3324      	adds	r3, #36	; 0x24
 8010b80:	4618      	mov	r0, r3
 8010b82:	f001 f84d 	bl	8011c20 <xTaskRemoveFromEventList>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d013      	beq.n	8010bb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b8c:	4b3f      	ldr	r3, [pc, #252]	; (8010c8c <xQueueGenericSend+0x200>)
 8010b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b92:	601a      	str	r2, [r3, #0]
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	f3bf 8f6f 	isb	sy
 8010b9c:	e00a      	b.n	8010bb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d007      	beq.n	8010bb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ba4:	4b39      	ldr	r3, [pc, #228]	; (8010c8c <xQueueGenericSend+0x200>)
 8010ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010baa:	601a      	str	r2, [r3, #0]
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010bb4:	f002 f89a 	bl	8012cec <vPortExitCritical>
				return pdPASS;
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e063      	b.n	8010c84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d103      	bne.n	8010bca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bc2:	f002 f893 	bl	8012cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	e05c      	b.n	8010c84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d106      	bne.n	8010bde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010bd0:	f107 0314 	add.w	r3, r7, #20
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f001 f887 	bl	8011ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bde:	f002 f885 	bl	8012cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010be2:	f000 fdf7 	bl	80117d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010be6:	f002 f84f 	bl	8012c88 <vPortEnterCritical>
 8010bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bf0:	b25b      	sxtb	r3, r3
 8010bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf6:	d103      	bne.n	8010c00 <xQueueGenericSend+0x174>
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c06:	b25b      	sxtb	r3, r3
 8010c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0c:	d103      	bne.n	8010c16 <xQueueGenericSend+0x18a>
 8010c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c10:	2200      	movs	r2, #0
 8010c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c16:	f002 f869 	bl	8012cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c1a:	1d3a      	adds	r2, r7, #4
 8010c1c:	f107 0314 	add.w	r3, r7, #20
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f001 f876 	bl	8011d14 <xTaskCheckForTimeOut>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d124      	bne.n	8010c78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c30:	f000 faa4 	bl	801117c <prvIsQueueFull>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d018      	beq.n	8010c6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3c:	3310      	adds	r3, #16
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	4611      	mov	r1, r2
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 ff9a 	bl	8011b7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c4a:	f000 fa2f 	bl	80110ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c4e:	f000 fdcf 	bl	80117f0 <xTaskResumeAll>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	f47f af7c 	bne.w	8010b52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010c5a:	4b0c      	ldr	r3, [pc, #48]	; (8010c8c <xQueueGenericSend+0x200>)
 8010c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c60:	601a      	str	r2, [r3, #0]
 8010c62:	f3bf 8f4f 	dsb	sy
 8010c66:	f3bf 8f6f 	isb	sy
 8010c6a:	e772      	b.n	8010b52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c6e:	f000 fa1d 	bl	80110ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c72:	f000 fdbd 	bl	80117f0 <xTaskResumeAll>
 8010c76:	e76c      	b.n	8010b52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c7a:	f000 fa17 	bl	80110ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c7e:	f000 fdb7 	bl	80117f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3738      	adds	r7, #56	; 0x38
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	e000ed04 	.word	0xe000ed04

08010c90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b08e      	sub	sp, #56	; 0x38
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
 8010c9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10b      	bne.n	8010cc0 <xQueueGenericSendFromISR+0x30>
 8010ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cac:	b672      	cpsid	i
 8010cae:	f383 8811 	msr	BASEPRI, r3
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	f3bf 8f4f 	dsb	sy
 8010cba:	b662      	cpsie	i
 8010cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8010cbe:	e7fe      	b.n	8010cbe <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d103      	bne.n	8010cce <xQueueGenericSendFromISR+0x3e>
 8010cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <xQueueGenericSendFromISR+0x42>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e000      	b.n	8010cd4 <xQueueGenericSendFromISR+0x44>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10b      	bne.n	8010cf0 <xQueueGenericSendFromISR+0x60>
 8010cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cdc:	b672      	cpsid	i
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	b662      	cpsie	i
 8010cec:	623b      	str	r3, [r7, #32]
 8010cee:	e7fe      	b.n	8010cee <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	2b02      	cmp	r3, #2
 8010cf4:	d103      	bne.n	8010cfe <xQueueGenericSendFromISR+0x6e>
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d101      	bne.n	8010d02 <xQueueGenericSendFromISR+0x72>
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e000      	b.n	8010d04 <xQueueGenericSendFromISR+0x74>
 8010d02:	2300      	movs	r3, #0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10b      	bne.n	8010d20 <xQueueGenericSendFromISR+0x90>
 8010d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0c:	b672      	cpsid	i
 8010d0e:	f383 8811 	msr	BASEPRI, r3
 8010d12:	f3bf 8f6f 	isb	sy
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	b662      	cpsie	i
 8010d1c:	61fb      	str	r3, [r7, #28]
 8010d1e:	e7fe      	b.n	8010d1e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d20:	f002 f892 	bl	8012e48 <vPortValidateInterruptPriority>
	__asm volatile
 8010d24:	f3ef 8211 	mrs	r2, BASEPRI
 8010d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2c:	b672      	cpsid	i
 8010d2e:	f383 8811 	msr	BASEPRI, r3
 8010d32:	f3bf 8f6f 	isb	sy
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	b662      	cpsie	i
 8010d3c:	61ba      	str	r2, [r7, #24]
 8010d3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010d40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d302      	bcc.n	8010d56 <xQueueGenericSendFromISR+0xc6>
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	2b02      	cmp	r3, #2
 8010d54:	d12c      	bne.n	8010db0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d60:	683a      	ldr	r2, [r7, #0]
 8010d62:	68b9      	ldr	r1, [r7, #8]
 8010d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d66:	f000 f911 	bl	8010f8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d72:	d112      	bne.n	8010d9a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d016      	beq.n	8010daa <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7e:	3324      	adds	r3, #36	; 0x24
 8010d80:	4618      	mov	r0, r3
 8010d82:	f000 ff4d 	bl	8011c20 <xTaskRemoveFromEventList>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d00e      	beq.n	8010daa <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00b      	beq.n	8010daa <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2201      	movs	r2, #1
 8010d96:	601a      	str	r2, [r3, #0]
 8010d98:	e007      	b.n	8010daa <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010d9e:	3301      	adds	r3, #1
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	b25a      	sxtb	r2, r3
 8010da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010daa:	2301      	movs	r3, #1
 8010dac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010dae:	e001      	b.n	8010db4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010db0:	2300      	movs	r3, #0
 8010db2:	637b      	str	r3, [r7, #52]	; 0x34
 8010db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3738      	adds	r7, #56	; 0x38
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b08c      	sub	sp, #48	; 0x30
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d10b      	bne.n	8010dfa <xQueueReceive+0x32>
	__asm volatile
 8010de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de6:	b672      	cpsid	i
 8010de8:	f383 8811 	msr	BASEPRI, r3
 8010dec:	f3bf 8f6f 	isb	sy
 8010df0:	f3bf 8f4f 	dsb	sy
 8010df4:	b662      	cpsie	i
 8010df6:	623b      	str	r3, [r7, #32]
 8010df8:	e7fe      	b.n	8010df8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d103      	bne.n	8010e08 <xQueueReceive+0x40>
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <xQueueReceive+0x44>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e000      	b.n	8010e0e <xQueueReceive+0x46>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d10b      	bne.n	8010e2a <xQueueReceive+0x62>
 8010e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e16:	b672      	cpsid	i
 8010e18:	f383 8811 	msr	BASEPRI, r3
 8010e1c:	f3bf 8f6f 	isb	sy
 8010e20:	f3bf 8f4f 	dsb	sy
 8010e24:	b662      	cpsie	i
 8010e26:	61fb      	str	r3, [r7, #28]
 8010e28:	e7fe      	b.n	8010e28 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e2a:	f001 f8b7 	bl	8011f9c <xTaskGetSchedulerState>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d102      	bne.n	8010e3a <xQueueReceive+0x72>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d101      	bne.n	8010e3e <xQueueReceive+0x76>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	e000      	b.n	8010e40 <xQueueReceive+0x78>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d10b      	bne.n	8010e5c <xQueueReceive+0x94>
 8010e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e48:	b672      	cpsid	i
 8010e4a:	f383 8811 	msr	BASEPRI, r3
 8010e4e:	f3bf 8f6f 	isb	sy
 8010e52:	f3bf 8f4f 	dsb	sy
 8010e56:	b662      	cpsie	i
 8010e58:	61bb      	str	r3, [r7, #24]
 8010e5a:	e7fe      	b.n	8010e5a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e5c:	f001 ff14 	bl	8012c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d01f      	beq.n	8010eac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010e6c:	68b9      	ldr	r1, [r7, #8]
 8010e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e70:	f000 f8f6 	bl	8011060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	1e5a      	subs	r2, r3, #1
 8010e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7e:	691b      	ldr	r3, [r3, #16]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00f      	beq.n	8010ea4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e86:	3310      	adds	r3, #16
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f000 fec9 	bl	8011c20 <xTaskRemoveFromEventList>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d007      	beq.n	8010ea4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e94:	4b3c      	ldr	r3, [pc, #240]	; (8010f88 <xQueueReceive+0x1c0>)
 8010e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	f3bf 8f4f 	dsb	sy
 8010ea0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010ea4:	f001 ff22 	bl	8012cec <vPortExitCritical>
				return pdPASS;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	e069      	b.n	8010f80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d103      	bne.n	8010eba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010eb2:	f001 ff1b 	bl	8012cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	e062      	b.n	8010f80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d106      	bne.n	8010ece <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ec0:	f107 0310 	add.w	r3, r7, #16
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f000 ff0f 	bl	8011ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ece:	f001 ff0d 	bl	8012cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ed2:	f000 fc7f 	bl	80117d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ed6:	f001 fed7 	bl	8012c88 <vPortEnterCritical>
 8010eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ee0:	b25b      	sxtb	r3, r3
 8010ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ee6:	d103      	bne.n	8010ef0 <xQueueReceive+0x128>
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	2200      	movs	r2, #0
 8010eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ef6:	b25b      	sxtb	r3, r3
 8010ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efc:	d103      	bne.n	8010f06 <xQueueReceive+0x13e>
 8010efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f00:	2200      	movs	r2, #0
 8010f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f06:	f001 fef1 	bl	8012cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f0a:	1d3a      	adds	r2, r7, #4
 8010f0c:	f107 0310 	add.w	r3, r7, #16
 8010f10:	4611      	mov	r1, r2
 8010f12:	4618      	mov	r0, r3
 8010f14:	f000 fefe 	bl	8011d14 <xTaskCheckForTimeOut>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d123      	bne.n	8010f66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f20:	f000 f916 	bl	8011150 <prvIsQueueEmpty>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d017      	beq.n	8010f5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2c:	3324      	adds	r3, #36	; 0x24
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	4611      	mov	r1, r2
 8010f32:	4618      	mov	r0, r3
 8010f34:	f000 fe22 	bl	8011b7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f3a:	f000 f8b7 	bl	80110ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f3e:	f000 fc57 	bl	80117f0 <xTaskResumeAll>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d189      	bne.n	8010e5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010f48:	4b0f      	ldr	r3, [pc, #60]	; (8010f88 <xQueueReceive+0x1c0>)
 8010f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f4e:	601a      	str	r2, [r3, #0]
 8010f50:	f3bf 8f4f 	dsb	sy
 8010f54:	f3bf 8f6f 	isb	sy
 8010f58:	e780      	b.n	8010e5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f5c:	f000 f8a6 	bl	80110ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f60:	f000 fc46 	bl	80117f0 <xTaskResumeAll>
 8010f64:	e77a      	b.n	8010e5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f68:	f000 f8a0 	bl	80110ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f6c:	f000 fc40 	bl	80117f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f72:	f000 f8ed 	bl	8011150 <prvIsQueueEmpty>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f43f af6f 	beq.w	8010e5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3730      	adds	r7, #48	; 0x30
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	e000ed04 	.word	0xe000ed04

08010f8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10d      	bne.n	8010fc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d14d      	bne.n	801104e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f001 f80e 	bl	8011fd8 <xTaskPriorityDisinherit>
 8010fbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	609a      	str	r2, [r3, #8]
 8010fc4:	e043      	b.n	801104e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d119      	bne.n	8011000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	6858      	ldr	r0, [r3, #4]
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	68b9      	ldr	r1, [r7, #8]
 8010fd8:	f002 f984 	bl	80132e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	685a      	ldr	r2, [r3, #4]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe4:	441a      	add	r2, r3
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	685a      	ldr	r2, [r3, #4]
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d32b      	bcc.n	801104e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	605a      	str	r2, [r3, #4]
 8010ffe:	e026      	b.n	801104e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	68d8      	ldr	r0, [r3, #12]
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011008:	461a      	mov	r2, r3
 801100a:	68b9      	ldr	r1, [r7, #8]
 801100c:	f002 f96a 	bl	80132e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	68da      	ldr	r2, [r3, #12]
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011018:	425b      	negs	r3, r3
 801101a:	441a      	add	r2, r3
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	68da      	ldr	r2, [r3, #12]
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d207      	bcs.n	801103c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	689a      	ldr	r2, [r3, #8]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011034:	425b      	negs	r3, r3
 8011036:	441a      	add	r2, r3
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b02      	cmp	r3, #2
 8011040:	d105      	bne.n	801104e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	3b01      	subs	r3, #1
 801104c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	1c5a      	adds	r2, r3, #1
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011056:	697b      	ldr	r3, [r7, #20]
}
 8011058:	4618      	mov	r0, r3
 801105a:	3718      	adds	r7, #24
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106e:	2b00      	cmp	r3, #0
 8011070:	d018      	beq.n	80110a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	68da      	ldr	r2, [r3, #12]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107a:	441a      	add	r2, r3
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	68da      	ldr	r2, [r3, #12]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	429a      	cmp	r2, r3
 801108a:	d303      	bcc.n	8011094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	68d9      	ldr	r1, [r3, #12]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801109c:	461a      	mov	r2, r3
 801109e:	6838      	ldr	r0, [r7, #0]
 80110a0:	f002 f920 	bl	80132e4 <memcpy>
	}
}
 80110a4:	bf00      	nop
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}

080110ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80110b4:	f001 fde8 	bl	8012c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110c0:	e011      	b.n	80110e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d012      	beq.n	80110f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	3324      	adds	r3, #36	; 0x24
 80110ce:	4618      	mov	r0, r3
 80110d0:	f000 fda6 	bl	8011c20 <xTaskRemoveFromEventList>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80110da:	f000 fe7f 	bl	8011ddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80110de:	7bfb      	ldrb	r3, [r7, #15]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	dce9      	bgt.n	80110c2 <prvUnlockQueue+0x16>
 80110ee:	e000      	b.n	80110f2 <prvUnlockQueue+0x46>
					break;
 80110f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	22ff      	movs	r2, #255	; 0xff
 80110f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80110fa:	f001 fdf7 	bl	8012cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80110fe:	f001 fdc3 	bl	8012c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801110a:	e011      	b.n	8011130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	691b      	ldr	r3, [r3, #16]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d012      	beq.n	801113a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	3310      	adds	r3, #16
 8011118:	4618      	mov	r0, r3
 801111a:	f000 fd81 	bl	8011c20 <xTaskRemoveFromEventList>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d001      	beq.n	8011128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011124:	f000 fe5a 	bl	8011ddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011128:	7bbb      	ldrb	r3, [r7, #14]
 801112a:	3b01      	subs	r3, #1
 801112c:	b2db      	uxtb	r3, r3
 801112e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011134:	2b00      	cmp	r3, #0
 8011136:	dce9      	bgt.n	801110c <prvUnlockQueue+0x60>
 8011138:	e000      	b.n	801113c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801113a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	22ff      	movs	r2, #255	; 0xff
 8011140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011144:	f001 fdd2 	bl	8012cec <vPortExitCritical>
}
 8011148:	bf00      	nop
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}

08011150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011158:	f001 fd96 	bl	8012c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011160:	2b00      	cmp	r3, #0
 8011162:	d102      	bne.n	801116a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011164:	2301      	movs	r3, #1
 8011166:	60fb      	str	r3, [r7, #12]
 8011168:	e001      	b.n	801116e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801116e:	f001 fdbd 	bl	8012cec <vPortExitCritical>

	return xReturn;
 8011172:	68fb      	ldr	r3, [r7, #12]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b084      	sub	sp, #16
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011184:	f001 fd80 	bl	8012c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011190:	429a      	cmp	r2, r3
 8011192:	d102      	bne.n	801119a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011194:	2301      	movs	r3, #1
 8011196:	60fb      	str	r3, [r7, #12]
 8011198:	e001      	b.n	801119e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801119a:	2300      	movs	r3, #0
 801119c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801119e:	f001 fda5 	bl	8012cec <vPortExitCritical>

	return xReturn;
 80111a2:	68fb      	ldr	r3, [r7, #12]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80111b6:	2300      	movs	r3, #0
 80111b8:	60fb      	str	r3, [r7, #12]
 80111ba:	e014      	b.n	80111e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80111bc:	4a0e      	ldr	r2, [pc, #56]	; (80111f8 <vQueueAddToRegistry+0x4c>)
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d10b      	bne.n	80111e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80111c8:	490b      	ldr	r1, [pc, #44]	; (80111f8 <vQueueAddToRegistry+0x4c>)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80111d2:	4a09      	ldr	r2, [pc, #36]	; (80111f8 <vQueueAddToRegistry+0x4c>)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	4413      	add	r3, r2
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80111de:	e005      	b.n	80111ec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	3301      	adds	r3, #1
 80111e4:	60fb      	str	r3, [r7, #12]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2b07      	cmp	r3, #7
 80111ea:	d9e7      	bls.n	80111bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80111ec:	bf00      	nop
 80111ee:	3714      	adds	r7, #20
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr
 80111f8:	20031158 	.word	0x20031158

080111fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801120c:	f001 fd3c 	bl	8012c88 <vPortEnterCritical>
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011216:	b25b      	sxtb	r3, r3
 8011218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801121c:	d103      	bne.n	8011226 <vQueueWaitForMessageRestricted+0x2a>
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	2200      	movs	r2, #0
 8011222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801122c:	b25b      	sxtb	r3, r3
 801122e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011232:	d103      	bne.n	801123c <vQueueWaitForMessageRestricted+0x40>
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	2200      	movs	r2, #0
 8011238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801123c:	f001 fd56 	bl	8012cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011244:	2b00      	cmp	r3, #0
 8011246:	d106      	bne.n	8011256 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	3324      	adds	r3, #36	; 0x24
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	68b9      	ldr	r1, [r7, #8]
 8011250:	4618      	mov	r0, r3
 8011252:	f000 fcb9 	bl	8011bc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011256:	6978      	ldr	r0, [r7, #20]
 8011258:	f7ff ff28 	bl	80110ac <prvUnlockQueue>
	}
 801125c:	bf00      	nop
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011264:	b580      	push	{r7, lr}
 8011266:	b08e      	sub	sp, #56	; 0x38
 8011268:	af04      	add	r7, sp, #16
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	607a      	str	r2, [r7, #4]
 8011270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011274:	2b00      	cmp	r3, #0
 8011276:	d10b      	bne.n	8011290 <xTaskCreateStatic+0x2c>
 8011278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127c:	b672      	cpsid	i
 801127e:	f383 8811 	msr	BASEPRI, r3
 8011282:	f3bf 8f6f 	isb	sy
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	b662      	cpsie	i
 801128c:	623b      	str	r3, [r7, #32]
 801128e:	e7fe      	b.n	801128e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10b      	bne.n	80112ae <xTaskCreateStatic+0x4a>
 8011296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129a:	b672      	cpsid	i
 801129c:	f383 8811 	msr	BASEPRI, r3
 80112a0:	f3bf 8f6f 	isb	sy
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	b662      	cpsie	i
 80112aa:	61fb      	str	r3, [r7, #28]
 80112ac:	e7fe      	b.n	80112ac <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80112ae:	235c      	movs	r3, #92	; 0x5c
 80112b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2b5c      	cmp	r3, #92	; 0x5c
 80112b6:	d00b      	beq.n	80112d0 <xTaskCreateStatic+0x6c>
 80112b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112bc:	b672      	cpsid	i
 80112be:	f383 8811 	msr	BASEPRI, r3
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	b662      	cpsie	i
 80112cc:	61bb      	str	r3, [r7, #24]
 80112ce:	e7fe      	b.n	80112ce <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80112d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80112d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d01e      	beq.n	8011316 <xTaskCreateStatic+0xb2>
 80112d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d01b      	beq.n	8011316 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80112e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80112e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ea:	2202      	movs	r2, #2
 80112ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80112f0:	2300      	movs	r3, #0
 80112f2:	9303      	str	r3, [sp, #12]
 80112f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f6:	9302      	str	r3, [sp, #8]
 80112f8:	f107 0314 	add.w	r3, r7, #20
 80112fc:	9301      	str	r3, [sp, #4]
 80112fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011300:	9300      	str	r3, [sp, #0]
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	68b9      	ldr	r1, [r7, #8]
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f000 f850 	bl	80113ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801130e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011310:	f000 f8de 	bl	80114d0 <prvAddNewTaskToReadyList>
 8011314:	e001      	b.n	801131a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011316:	2300      	movs	r3, #0
 8011318:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801131a:	697b      	ldr	r3, [r7, #20]
	}
 801131c:	4618      	mov	r0, r3
 801131e:	3728      	adds	r7, #40	; 0x28
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011324:	b580      	push	{r7, lr}
 8011326:	b08c      	sub	sp, #48	; 0x30
 8011328:	af04      	add	r7, sp, #16
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	603b      	str	r3, [r7, #0]
 8011330:	4613      	mov	r3, r2
 8011332:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011334:	88fb      	ldrh	r3, [r7, #6]
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4618      	mov	r0, r3
 801133a:	f001 fdc7 	bl	8012ecc <pvPortMalloc>
 801133e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d00e      	beq.n	8011364 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011346:	205c      	movs	r0, #92	; 0x5c
 8011348:	f001 fdc0 	bl	8012ecc <pvPortMalloc>
 801134c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d003      	beq.n	801135c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	697a      	ldr	r2, [r7, #20]
 8011358:	631a      	str	r2, [r3, #48]	; 0x30
 801135a:	e005      	b.n	8011368 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801135c:	6978      	ldr	r0, [r7, #20]
 801135e:	f001 fe7d 	bl	801305c <vPortFree>
 8011362:	e001      	b.n	8011368 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011364:	2300      	movs	r3, #0
 8011366:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d017      	beq.n	801139e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	2200      	movs	r2, #0
 8011372:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011376:	88fa      	ldrh	r2, [r7, #6]
 8011378:	2300      	movs	r3, #0
 801137a:	9303      	str	r3, [sp, #12]
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	9302      	str	r3, [sp, #8]
 8011380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011382:	9301      	str	r3, [sp, #4]
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	9300      	str	r3, [sp, #0]
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	68b9      	ldr	r1, [r7, #8]
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f000 f80e 	bl	80113ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011392:	69f8      	ldr	r0, [r7, #28]
 8011394:	f000 f89c 	bl	80114d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011398:	2301      	movs	r3, #1
 801139a:	61bb      	str	r3, [r7, #24]
 801139c:	e002      	b.n	80113a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801139e:	f04f 33ff 	mov.w	r3, #4294967295
 80113a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80113a4:	69bb      	ldr	r3, [r7, #24]
	}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3720      	adds	r7, #32
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}

080113ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80113ae:	b580      	push	{r7, lr}
 80113b0:	b088      	sub	sp, #32
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	60f8      	str	r0, [r7, #12]
 80113b6:	60b9      	str	r1, [r7, #8]
 80113b8:	607a      	str	r2, [r7, #4]
 80113ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80113bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	009b      	lsls	r3, r3, #2
 80113c4:	461a      	mov	r2, r3
 80113c6:	21a5      	movs	r1, #165	; 0xa5
 80113c8:	f001 ff97 	bl	80132fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80113cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113d0:	6879      	ldr	r1, [r7, #4]
 80113d2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80113d6:	440b      	add	r3, r1
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	4413      	add	r3, r2
 80113dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	f023 0307 	bic.w	r3, r3, #7
 80113e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	f003 0307 	and.w	r3, r3, #7
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00b      	beq.n	8011408 <prvInitialiseNewTask+0x5a>
 80113f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f4:	b672      	cpsid	i
 80113f6:	f383 8811 	msr	BASEPRI, r3
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	b662      	cpsie	i
 8011404:	617b      	str	r3, [r7, #20]
 8011406:	e7fe      	b.n	8011406 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d01f      	beq.n	801144e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801140e:	2300      	movs	r3, #0
 8011410:	61fb      	str	r3, [r7, #28]
 8011412:	e012      	b.n	801143a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011414:	68ba      	ldr	r2, [r7, #8]
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	4413      	add	r3, r2
 801141a:	7819      	ldrb	r1, [r3, #0]
 801141c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	4413      	add	r3, r2
 8011422:	3334      	adds	r3, #52	; 0x34
 8011424:	460a      	mov	r2, r1
 8011426:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011428:	68ba      	ldr	r2, [r7, #8]
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	4413      	add	r3, r2
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d006      	beq.n	8011442 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	3301      	adds	r3, #1
 8011438:	61fb      	str	r3, [r7, #28]
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	2b0f      	cmp	r3, #15
 801143e:	d9e9      	bls.n	8011414 <prvInitialiseNewTask+0x66>
 8011440:	e000      	b.n	8011444 <prvInitialiseNewTask+0x96>
			{
				break;
 8011442:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	2200      	movs	r2, #0
 8011448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801144c:	e003      	b.n	8011456 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	2200      	movs	r2, #0
 8011452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011458:	2b37      	cmp	r3, #55	; 0x37
 801145a:	d901      	bls.n	8011460 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801145c:	2337      	movs	r3, #55	; 0x37
 801145e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011464:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801146a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146e:	2200      	movs	r2, #0
 8011470:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	3304      	adds	r3, #4
 8011476:	4618      	mov	r0, r3
 8011478:	f7ff f96a 	bl	8010750 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147e:	3318      	adds	r3, #24
 8011480:	4618      	mov	r0, r3
 8011482:	f7ff f965 	bl	8010750 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801148a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011494:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801149a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149e:	2200      	movs	r2, #0
 80114a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80114a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a4:	2200      	movs	r2, #0
 80114a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80114aa:	683a      	ldr	r2, [r7, #0]
 80114ac:	68f9      	ldr	r1, [r7, #12]
 80114ae:	69b8      	ldr	r0, [r7, #24]
 80114b0:	f001 fade 	bl	8012a70 <pxPortInitialiseStack>
 80114b4:	4602      	mov	r2, r0
 80114b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80114ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114c6:	bf00      	nop
 80114c8:	3720      	adds	r7, #32
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
	...

080114d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80114d8:	f001 fbd6 	bl	8012c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80114dc:	4b2d      	ldr	r3, [pc, #180]	; (8011594 <prvAddNewTaskToReadyList+0xc4>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	3301      	adds	r3, #1
 80114e2:	4a2c      	ldr	r2, [pc, #176]	; (8011594 <prvAddNewTaskToReadyList+0xc4>)
 80114e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80114e6:	4b2c      	ldr	r3, [pc, #176]	; (8011598 <prvAddNewTaskToReadyList+0xc8>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d109      	bne.n	8011502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80114ee:	4a2a      	ldr	r2, [pc, #168]	; (8011598 <prvAddNewTaskToReadyList+0xc8>)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80114f4:	4b27      	ldr	r3, [pc, #156]	; (8011594 <prvAddNewTaskToReadyList+0xc4>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d110      	bne.n	801151e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80114fc:	f000 fc92 	bl	8011e24 <prvInitialiseTaskLists>
 8011500:	e00d      	b.n	801151e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011502:	4b26      	ldr	r3, [pc, #152]	; (801159c <prvAddNewTaskToReadyList+0xcc>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d109      	bne.n	801151e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801150a:	4b23      	ldr	r3, [pc, #140]	; (8011598 <prvAddNewTaskToReadyList+0xc8>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011514:	429a      	cmp	r2, r3
 8011516:	d802      	bhi.n	801151e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011518:	4a1f      	ldr	r2, [pc, #124]	; (8011598 <prvAddNewTaskToReadyList+0xc8>)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801151e:	4b20      	ldr	r3, [pc, #128]	; (80115a0 <prvAddNewTaskToReadyList+0xd0>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	3301      	adds	r3, #1
 8011524:	4a1e      	ldr	r2, [pc, #120]	; (80115a0 <prvAddNewTaskToReadyList+0xd0>)
 8011526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011528:	4b1d      	ldr	r3, [pc, #116]	; (80115a0 <prvAddNewTaskToReadyList+0xd0>)
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011534:	4b1b      	ldr	r3, [pc, #108]	; (80115a4 <prvAddNewTaskToReadyList+0xd4>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	429a      	cmp	r2, r3
 801153a:	d903      	bls.n	8011544 <prvAddNewTaskToReadyList+0x74>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011540:	4a18      	ldr	r2, [pc, #96]	; (80115a4 <prvAddNewTaskToReadyList+0xd4>)
 8011542:	6013      	str	r3, [r2, #0]
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011548:	4613      	mov	r3, r2
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	4413      	add	r3, r2
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4a15      	ldr	r2, [pc, #84]	; (80115a8 <prvAddNewTaskToReadyList+0xd8>)
 8011552:	441a      	add	r2, r3
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	3304      	adds	r3, #4
 8011558:	4619      	mov	r1, r3
 801155a:	4610      	mov	r0, r2
 801155c:	f7ff f905 	bl	801076a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011560:	f001 fbc4 	bl	8012cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011564:	4b0d      	ldr	r3, [pc, #52]	; (801159c <prvAddNewTaskToReadyList+0xcc>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d00e      	beq.n	801158a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801156c:	4b0a      	ldr	r3, [pc, #40]	; (8011598 <prvAddNewTaskToReadyList+0xc8>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011576:	429a      	cmp	r2, r3
 8011578:	d207      	bcs.n	801158a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801157a:	4b0c      	ldr	r3, [pc, #48]	; (80115ac <prvAddNewTaskToReadyList+0xdc>)
 801157c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	f3bf 8f4f 	dsb	sy
 8011586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801158a:	bf00      	nop
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	20003f14 	.word	0x20003f14
 8011598:	20003a40 	.word	0x20003a40
 801159c:	20003f20 	.word	0x20003f20
 80115a0:	20003f30 	.word	0x20003f30
 80115a4:	20003f1c 	.word	0x20003f1c
 80115a8:	20003a44 	.word	0x20003a44
 80115ac:	e000ed04 	.word	0xe000ed04

080115b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80115b8:	f001 fb66 	bl	8012c88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d102      	bne.n	80115c8 <vTaskDelete+0x18>
 80115c2:	4b2d      	ldr	r3, [pc, #180]	; (8011678 <vTaskDelete+0xc8>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	e000      	b.n	80115ca <vTaskDelete+0x1a>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	3304      	adds	r3, #4
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7ff f927 	bl	8010824 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d004      	beq.n	80115e8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	3318      	adds	r3, #24
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff f91e 	bl	8010824 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80115e8:	4b24      	ldr	r3, [pc, #144]	; (801167c <vTaskDelete+0xcc>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	3301      	adds	r3, #1
 80115ee:	4a23      	ldr	r2, [pc, #140]	; (801167c <vTaskDelete+0xcc>)
 80115f0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80115f2:	4b21      	ldr	r3, [pc, #132]	; (8011678 <vTaskDelete+0xc8>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	68fa      	ldr	r2, [r7, #12]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d10b      	bne.n	8011614 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	3304      	adds	r3, #4
 8011600:	4619      	mov	r1, r3
 8011602:	481f      	ldr	r0, [pc, #124]	; (8011680 <vTaskDelete+0xd0>)
 8011604:	f7ff f8b1 	bl	801076a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011608:	4b1e      	ldr	r3, [pc, #120]	; (8011684 <vTaskDelete+0xd4>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3301      	adds	r3, #1
 801160e:	4a1d      	ldr	r2, [pc, #116]	; (8011684 <vTaskDelete+0xd4>)
 8011610:	6013      	str	r3, [r2, #0]
 8011612:	e009      	b.n	8011628 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011614:	4b1c      	ldr	r3, [pc, #112]	; (8011688 <vTaskDelete+0xd8>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	3b01      	subs	r3, #1
 801161a:	4a1b      	ldr	r2, [pc, #108]	; (8011688 <vTaskDelete+0xd8>)
 801161c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f000 fc6c 	bl	8011efc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011624:	f000 fc9a 	bl	8011f5c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8011628:	f001 fb60 	bl	8012cec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801162c:	4b17      	ldr	r3, [pc, #92]	; (801168c <vTaskDelete+0xdc>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d01c      	beq.n	801166e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8011634:	4b10      	ldr	r3, [pc, #64]	; (8011678 <vTaskDelete+0xc8>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	429a      	cmp	r2, r3
 801163c:	d117      	bne.n	801166e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801163e:	4b14      	ldr	r3, [pc, #80]	; (8011690 <vTaskDelete+0xe0>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d00b      	beq.n	801165e <vTaskDelete+0xae>
 8011646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164a:	b672      	cpsid	i
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	b662      	cpsie	i
 801165a:	60bb      	str	r3, [r7, #8]
 801165c:	e7fe      	b.n	801165c <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 801165e:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <vTaskDelete+0xe4>)
 8011660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	f3bf 8f4f 	dsb	sy
 801166a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801166e:	bf00      	nop
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20003a40 	.word	0x20003a40
 801167c:	20003f30 	.word	0x20003f30
 8011680:	20003ee8 	.word	0x20003ee8
 8011684:	20003efc 	.word	0x20003efc
 8011688:	20003f14 	.word	0x20003f14
 801168c:	20003f20 	.word	0x20003f20
 8011690:	20003f3c 	.word	0x20003f3c
 8011694:	e000ed04 	.word	0xe000ed04

08011698 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80116a0:	2300      	movs	r3, #0
 80116a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d018      	beq.n	80116dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80116aa:	4b14      	ldr	r3, [pc, #80]	; (80116fc <vTaskDelay+0x64>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00b      	beq.n	80116ca <vTaskDelay+0x32>
 80116b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b6:	b672      	cpsid	i
 80116b8:	f383 8811 	msr	BASEPRI, r3
 80116bc:	f3bf 8f6f 	isb	sy
 80116c0:	f3bf 8f4f 	dsb	sy
 80116c4:	b662      	cpsie	i
 80116c6:	60bb      	str	r3, [r7, #8]
 80116c8:	e7fe      	b.n	80116c8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80116ca:	f000 f883 	bl	80117d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80116ce:	2100      	movs	r1, #0
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f000 fe05 	bl	80122e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80116d6:	f000 f88b 	bl	80117f0 <xTaskResumeAll>
 80116da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d107      	bne.n	80116f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80116e2:	4b07      	ldr	r3, [pc, #28]	; (8011700 <vTaskDelay+0x68>)
 80116e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116e8:	601a      	str	r2, [r3, #0]
 80116ea:	f3bf 8f4f 	dsb	sy
 80116ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116f2:	bf00      	nop
 80116f4:	3710      	adds	r7, #16
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	20003f3c 	.word	0x20003f3c
 8011700:	e000ed04 	.word	0xe000ed04

08011704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b08a      	sub	sp, #40	; 0x28
 8011708:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801170a:	2300      	movs	r3, #0
 801170c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801170e:	2300      	movs	r3, #0
 8011710:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011712:	463a      	mov	r2, r7
 8011714:	1d39      	adds	r1, r7, #4
 8011716:	f107 0308 	add.w	r3, r7, #8
 801171a:	4618      	mov	r0, r3
 801171c:	f7fe fef0 	bl	8010500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011720:	6839      	ldr	r1, [r7, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	68ba      	ldr	r2, [r7, #8]
 8011726:	9202      	str	r2, [sp, #8]
 8011728:	9301      	str	r3, [sp, #4]
 801172a:	2300      	movs	r3, #0
 801172c:	9300      	str	r3, [sp, #0]
 801172e:	2300      	movs	r3, #0
 8011730:	460a      	mov	r2, r1
 8011732:	4922      	ldr	r1, [pc, #136]	; (80117bc <vTaskStartScheduler+0xb8>)
 8011734:	4822      	ldr	r0, [pc, #136]	; (80117c0 <vTaskStartScheduler+0xbc>)
 8011736:	f7ff fd95 	bl	8011264 <xTaskCreateStatic>
 801173a:	4602      	mov	r2, r0
 801173c:	4b21      	ldr	r3, [pc, #132]	; (80117c4 <vTaskStartScheduler+0xc0>)
 801173e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011740:	4b20      	ldr	r3, [pc, #128]	; (80117c4 <vTaskStartScheduler+0xc0>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d002      	beq.n	801174e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011748:	2301      	movs	r3, #1
 801174a:	617b      	str	r3, [r7, #20]
 801174c:	e001      	b.n	8011752 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801174e:	2300      	movs	r3, #0
 8011750:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	2b01      	cmp	r3, #1
 8011756:	d102      	bne.n	801175e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011758:	f000 fe16 	bl	8012388 <xTimerCreateTimerTask>
 801175c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2b01      	cmp	r3, #1
 8011762:	d117      	bne.n	8011794 <vTaskStartScheduler+0x90>
 8011764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011768:	b672      	cpsid	i
 801176a:	f383 8811 	msr	BASEPRI, r3
 801176e:	f3bf 8f6f 	isb	sy
 8011772:	f3bf 8f4f 	dsb	sy
 8011776:	b662      	cpsie	i
 8011778:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801177a:	4b13      	ldr	r3, [pc, #76]	; (80117c8 <vTaskStartScheduler+0xc4>)
 801177c:	f04f 32ff 	mov.w	r2, #4294967295
 8011780:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011782:	4b12      	ldr	r3, [pc, #72]	; (80117cc <vTaskStartScheduler+0xc8>)
 8011784:	2201      	movs	r2, #1
 8011786:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011788:	4b11      	ldr	r3, [pc, #68]	; (80117d0 <vTaskStartScheduler+0xcc>)
 801178a:	2200      	movs	r2, #0
 801178c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801178e:	f001 f9ff 	bl	8012b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011792:	e00f      	b.n	80117b4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801179a:	d10b      	bne.n	80117b4 <vTaskStartScheduler+0xb0>
 801179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a0:	b672      	cpsid	i
 80117a2:	f383 8811 	msr	BASEPRI, r3
 80117a6:	f3bf 8f6f 	isb	sy
 80117aa:	f3bf 8f4f 	dsb	sy
 80117ae:	b662      	cpsie	i
 80117b0:	60fb      	str	r3, [r7, #12]
 80117b2:	e7fe      	b.n	80117b2 <vTaskStartScheduler+0xae>
}
 80117b4:	bf00      	nop
 80117b6:	3718      	adds	r7, #24
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	08017f44 	.word	0x08017f44
 80117c0:	08011df5 	.word	0x08011df5
 80117c4:	20003f38 	.word	0x20003f38
 80117c8:	20003f34 	.word	0x20003f34
 80117cc:	20003f20 	.word	0x20003f20
 80117d0:	20003f18 	.word	0x20003f18

080117d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80117d4:	b480      	push	{r7}
 80117d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80117d8:	4b04      	ldr	r3, [pc, #16]	; (80117ec <vTaskSuspendAll+0x18>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	3301      	adds	r3, #1
 80117de:	4a03      	ldr	r2, [pc, #12]	; (80117ec <vTaskSuspendAll+0x18>)
 80117e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80117e2:	bf00      	nop
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr
 80117ec:	20003f3c 	.word	0x20003f3c

080117f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80117f6:	2300      	movs	r3, #0
 80117f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80117fa:	2300      	movs	r3, #0
 80117fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80117fe:	4b42      	ldr	r3, [pc, #264]	; (8011908 <xTaskResumeAll+0x118>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d10b      	bne.n	801181e <xTaskResumeAll+0x2e>
 8011806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801180a:	b672      	cpsid	i
 801180c:	f383 8811 	msr	BASEPRI, r3
 8011810:	f3bf 8f6f 	isb	sy
 8011814:	f3bf 8f4f 	dsb	sy
 8011818:	b662      	cpsie	i
 801181a:	603b      	str	r3, [r7, #0]
 801181c:	e7fe      	b.n	801181c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801181e:	f001 fa33 	bl	8012c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011822:	4b39      	ldr	r3, [pc, #228]	; (8011908 <xTaskResumeAll+0x118>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	3b01      	subs	r3, #1
 8011828:	4a37      	ldr	r2, [pc, #220]	; (8011908 <xTaskResumeAll+0x118>)
 801182a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801182c:	4b36      	ldr	r3, [pc, #216]	; (8011908 <xTaskResumeAll+0x118>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d162      	bne.n	80118fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011834:	4b35      	ldr	r3, [pc, #212]	; (801190c <xTaskResumeAll+0x11c>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d05e      	beq.n	80118fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801183c:	e02f      	b.n	801189e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801183e:	4b34      	ldr	r3, [pc, #208]	; (8011910 <xTaskResumeAll+0x120>)
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	3318      	adds	r3, #24
 801184a:	4618      	mov	r0, r3
 801184c:	f7fe ffea 	bl	8010824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	3304      	adds	r3, #4
 8011854:	4618      	mov	r0, r3
 8011856:	f7fe ffe5 	bl	8010824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801185e:	4b2d      	ldr	r3, [pc, #180]	; (8011914 <xTaskResumeAll+0x124>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	429a      	cmp	r2, r3
 8011864:	d903      	bls.n	801186e <xTaskResumeAll+0x7e>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186a:	4a2a      	ldr	r2, [pc, #168]	; (8011914 <xTaskResumeAll+0x124>)
 801186c:	6013      	str	r3, [r2, #0]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011872:	4613      	mov	r3, r2
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	4413      	add	r3, r2
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	4a27      	ldr	r2, [pc, #156]	; (8011918 <xTaskResumeAll+0x128>)
 801187c:	441a      	add	r2, r3
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	3304      	adds	r3, #4
 8011882:	4619      	mov	r1, r3
 8011884:	4610      	mov	r0, r2
 8011886:	f7fe ff70 	bl	801076a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801188e:	4b23      	ldr	r3, [pc, #140]	; (801191c <xTaskResumeAll+0x12c>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011894:	429a      	cmp	r2, r3
 8011896:	d302      	bcc.n	801189e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011898:	4b21      	ldr	r3, [pc, #132]	; (8011920 <xTaskResumeAll+0x130>)
 801189a:	2201      	movs	r2, #1
 801189c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801189e:	4b1c      	ldr	r3, [pc, #112]	; (8011910 <xTaskResumeAll+0x120>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1cb      	bne.n	801183e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d001      	beq.n	80118b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80118ac:	f000 fb56 	bl	8011f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80118b0:	4b1c      	ldr	r3, [pc, #112]	; (8011924 <xTaskResumeAll+0x134>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d010      	beq.n	80118de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80118bc:	f000 f846 	bl	801194c <xTaskIncrementTick>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d002      	beq.n	80118cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80118c6:	4b16      	ldr	r3, [pc, #88]	; (8011920 <xTaskResumeAll+0x130>)
 80118c8:	2201      	movs	r2, #1
 80118ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	3b01      	subs	r3, #1
 80118d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1f1      	bne.n	80118bc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80118d8:	4b12      	ldr	r3, [pc, #72]	; (8011924 <xTaskResumeAll+0x134>)
 80118da:	2200      	movs	r2, #0
 80118dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80118de:	4b10      	ldr	r3, [pc, #64]	; (8011920 <xTaskResumeAll+0x130>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d009      	beq.n	80118fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80118e6:	2301      	movs	r3, #1
 80118e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80118ea:	4b0f      	ldr	r3, [pc, #60]	; (8011928 <xTaskResumeAll+0x138>)
 80118ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118f0:	601a      	str	r2, [r3, #0]
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80118fa:	f001 f9f7 	bl	8012cec <vPortExitCritical>

	return xAlreadyYielded;
 80118fe:	68bb      	ldr	r3, [r7, #8]
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	20003f3c 	.word	0x20003f3c
 801190c:	20003f14 	.word	0x20003f14
 8011910:	20003ed4 	.word	0x20003ed4
 8011914:	20003f1c 	.word	0x20003f1c
 8011918:	20003a44 	.word	0x20003a44
 801191c:	20003a40 	.word	0x20003a40
 8011920:	20003f28 	.word	0x20003f28
 8011924:	20003f24 	.word	0x20003f24
 8011928:	e000ed04 	.word	0xe000ed04

0801192c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011932:	4b05      	ldr	r3, [pc, #20]	; (8011948 <xTaskGetTickCount+0x1c>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011938:	687b      	ldr	r3, [r7, #4]
}
 801193a:	4618      	mov	r0, r3
 801193c:	370c      	adds	r7, #12
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr
 8011946:	bf00      	nop
 8011948:	20003f18 	.word	0x20003f18

0801194c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b086      	sub	sp, #24
 8011950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011952:	2300      	movs	r3, #0
 8011954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011956:	4b4f      	ldr	r3, [pc, #316]	; (8011a94 <xTaskIncrementTick+0x148>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2b00      	cmp	r3, #0
 801195c:	f040 808a 	bne.w	8011a74 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011960:	4b4d      	ldr	r3, [pc, #308]	; (8011a98 <xTaskIncrementTick+0x14c>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	3301      	adds	r3, #1
 8011966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011968:	4a4b      	ldr	r2, [pc, #300]	; (8011a98 <xTaskIncrementTick+0x14c>)
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d121      	bne.n	80119b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011974:	4b49      	ldr	r3, [pc, #292]	; (8011a9c <xTaskIncrementTick+0x150>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00b      	beq.n	8011996 <xTaskIncrementTick+0x4a>
 801197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011982:	b672      	cpsid	i
 8011984:	f383 8811 	msr	BASEPRI, r3
 8011988:	f3bf 8f6f 	isb	sy
 801198c:	f3bf 8f4f 	dsb	sy
 8011990:	b662      	cpsie	i
 8011992:	603b      	str	r3, [r7, #0]
 8011994:	e7fe      	b.n	8011994 <xTaskIncrementTick+0x48>
 8011996:	4b41      	ldr	r3, [pc, #260]	; (8011a9c <xTaskIncrementTick+0x150>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	60fb      	str	r3, [r7, #12]
 801199c:	4b40      	ldr	r3, [pc, #256]	; (8011aa0 <xTaskIncrementTick+0x154>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a3e      	ldr	r2, [pc, #248]	; (8011a9c <xTaskIncrementTick+0x150>)
 80119a2:	6013      	str	r3, [r2, #0]
 80119a4:	4a3e      	ldr	r2, [pc, #248]	; (8011aa0 <xTaskIncrementTick+0x154>)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	6013      	str	r3, [r2, #0]
 80119aa:	4b3e      	ldr	r3, [pc, #248]	; (8011aa4 <xTaskIncrementTick+0x158>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	3301      	adds	r3, #1
 80119b0:	4a3c      	ldr	r2, [pc, #240]	; (8011aa4 <xTaskIncrementTick+0x158>)
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	f000 fad2 	bl	8011f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80119b8:	4b3b      	ldr	r3, [pc, #236]	; (8011aa8 <xTaskIncrementTick+0x15c>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d349      	bcc.n	8011a56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119c2:	4b36      	ldr	r3, [pc, #216]	; (8011a9c <xTaskIncrementTick+0x150>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d104      	bne.n	80119d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119cc:	4b36      	ldr	r3, [pc, #216]	; (8011aa8 <xTaskIncrementTick+0x15c>)
 80119ce:	f04f 32ff 	mov.w	r2, #4294967295
 80119d2:	601a      	str	r2, [r3, #0]
					break;
 80119d4:	e03f      	b.n	8011a56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119d6:	4b31      	ldr	r3, [pc, #196]	; (8011a9c <xTaskIncrementTick+0x150>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80119e6:	693a      	ldr	r2, [r7, #16]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d203      	bcs.n	80119f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80119ee:	4a2e      	ldr	r2, [pc, #184]	; (8011aa8 <xTaskIncrementTick+0x15c>)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80119f4:	e02f      	b.n	8011a56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	3304      	adds	r3, #4
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fe ff12 	bl	8010824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d004      	beq.n	8011a12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	3318      	adds	r3, #24
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe ff09 	bl	8010824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a16:	4b25      	ldr	r3, [pc, #148]	; (8011aac <xTaskIncrementTick+0x160>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d903      	bls.n	8011a26 <xTaskIncrementTick+0xda>
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a22:	4a22      	ldr	r2, [pc, #136]	; (8011aac <xTaskIncrementTick+0x160>)
 8011a24:	6013      	str	r3, [r2, #0]
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	4413      	add	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	4a1f      	ldr	r2, [pc, #124]	; (8011ab0 <xTaskIncrementTick+0x164>)
 8011a34:	441a      	add	r2, r3
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	3304      	adds	r3, #4
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	f7fe fe94 	bl	801076a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a46:	4b1b      	ldr	r3, [pc, #108]	; (8011ab4 <xTaskIncrementTick+0x168>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d3b8      	bcc.n	80119c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011a50:	2301      	movs	r3, #1
 8011a52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a54:	e7b5      	b.n	80119c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011a56:	4b17      	ldr	r3, [pc, #92]	; (8011ab4 <xTaskIncrementTick+0x168>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a5c:	4914      	ldr	r1, [pc, #80]	; (8011ab0 <xTaskIncrementTick+0x164>)
 8011a5e:	4613      	mov	r3, r2
 8011a60:	009b      	lsls	r3, r3, #2
 8011a62:	4413      	add	r3, r2
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	440b      	add	r3, r1
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d907      	bls.n	8011a7e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011a6e:	2301      	movs	r3, #1
 8011a70:	617b      	str	r3, [r7, #20]
 8011a72:	e004      	b.n	8011a7e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011a74:	4b10      	ldr	r3, [pc, #64]	; (8011ab8 <xTaskIncrementTick+0x16c>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	3301      	adds	r3, #1
 8011a7a:	4a0f      	ldr	r2, [pc, #60]	; (8011ab8 <xTaskIncrementTick+0x16c>)
 8011a7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011a7e:	4b0f      	ldr	r3, [pc, #60]	; (8011abc <xTaskIncrementTick+0x170>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8011a86:	2301      	movs	r3, #1
 8011a88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011a8a:	697b      	ldr	r3, [r7, #20]
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3718      	adds	r7, #24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	20003f3c 	.word	0x20003f3c
 8011a98:	20003f18 	.word	0x20003f18
 8011a9c:	20003ecc 	.word	0x20003ecc
 8011aa0:	20003ed0 	.word	0x20003ed0
 8011aa4:	20003f2c 	.word	0x20003f2c
 8011aa8:	20003f34 	.word	0x20003f34
 8011aac:	20003f1c 	.word	0x20003f1c
 8011ab0:	20003a44 	.word	0x20003a44
 8011ab4:	20003a40 	.word	0x20003a40
 8011ab8:	20003f24 	.word	0x20003f24
 8011abc:	20003f28 	.word	0x20003f28

08011ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011ac6:	4b28      	ldr	r3, [pc, #160]	; (8011b68 <vTaskSwitchContext+0xa8>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d003      	beq.n	8011ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011ace:	4b27      	ldr	r3, [pc, #156]	; (8011b6c <vTaskSwitchContext+0xac>)
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011ad4:	e042      	b.n	8011b5c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8011ad6:	4b25      	ldr	r3, [pc, #148]	; (8011b6c <vTaskSwitchContext+0xac>)
 8011ad8:	2200      	movs	r2, #0
 8011ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011adc:	4b24      	ldr	r3, [pc, #144]	; (8011b70 <vTaskSwitchContext+0xb0>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	60fb      	str	r3, [r7, #12]
 8011ae2:	e011      	b.n	8011b08 <vTaskSwitchContext+0x48>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d10b      	bne.n	8011b02 <vTaskSwitchContext+0x42>
 8011aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aee:	b672      	cpsid	i
 8011af0:	f383 8811 	msr	BASEPRI, r3
 8011af4:	f3bf 8f6f 	isb	sy
 8011af8:	f3bf 8f4f 	dsb	sy
 8011afc:	b662      	cpsie	i
 8011afe:	607b      	str	r3, [r7, #4]
 8011b00:	e7fe      	b.n	8011b00 <vTaskSwitchContext+0x40>
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	3b01      	subs	r3, #1
 8011b06:	60fb      	str	r3, [r7, #12]
 8011b08:	491a      	ldr	r1, [pc, #104]	; (8011b74 <vTaskSwitchContext+0xb4>)
 8011b0a:	68fa      	ldr	r2, [r7, #12]
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	440b      	add	r3, r1
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d0e3      	beq.n	8011ae4 <vTaskSwitchContext+0x24>
 8011b1c:	68fa      	ldr	r2, [r7, #12]
 8011b1e:	4613      	mov	r3, r2
 8011b20:	009b      	lsls	r3, r3, #2
 8011b22:	4413      	add	r3, r2
 8011b24:	009b      	lsls	r3, r3, #2
 8011b26:	4a13      	ldr	r2, [pc, #76]	; (8011b74 <vTaskSwitchContext+0xb4>)
 8011b28:	4413      	add	r3, r2
 8011b2a:	60bb      	str	r3, [r7, #8]
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	685a      	ldr	r2, [r3, #4]
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	605a      	str	r2, [r3, #4]
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	685a      	ldr	r2, [r3, #4]
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	3308      	adds	r3, #8
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d104      	bne.n	8011b4c <vTaskSwitchContext+0x8c>
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	685a      	ldr	r2, [r3, #4]
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	605a      	str	r2, [r3, #4]
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	4a09      	ldr	r2, [pc, #36]	; (8011b78 <vTaskSwitchContext+0xb8>)
 8011b54:	6013      	str	r3, [r2, #0]
 8011b56:	4a06      	ldr	r2, [pc, #24]	; (8011b70 <vTaskSwitchContext+0xb0>)
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	6013      	str	r3, [r2, #0]
}
 8011b5c:	bf00      	nop
 8011b5e:	3714      	adds	r7, #20
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	20003f3c 	.word	0x20003f3c
 8011b6c:	20003f28 	.word	0x20003f28
 8011b70:	20003f1c 	.word	0x20003f1c
 8011b74:	20003a44 	.word	0x20003a44
 8011b78:	20003a40 	.word	0x20003a40

08011b7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10b      	bne.n	8011ba4 <vTaskPlaceOnEventList+0x28>
 8011b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b90:	b672      	cpsid	i
 8011b92:	f383 8811 	msr	BASEPRI, r3
 8011b96:	f3bf 8f6f 	isb	sy
 8011b9a:	f3bf 8f4f 	dsb	sy
 8011b9e:	b662      	cpsie	i
 8011ba0:	60fb      	str	r3, [r7, #12]
 8011ba2:	e7fe      	b.n	8011ba2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ba4:	4b07      	ldr	r3, [pc, #28]	; (8011bc4 <vTaskPlaceOnEventList+0x48>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	3318      	adds	r3, #24
 8011baa:	4619      	mov	r1, r3
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7fe fe00 	bl	80107b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011bb2:	2101      	movs	r1, #1
 8011bb4:	6838      	ldr	r0, [r7, #0]
 8011bb6:	f000 fb93 	bl	80122e0 <prvAddCurrentTaskToDelayedList>
}
 8011bba:	bf00      	nop
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20003a40 	.word	0x20003a40

08011bc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b086      	sub	sp, #24
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d10b      	bne.n	8011bf2 <vTaskPlaceOnEventListRestricted+0x2a>
 8011bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bde:	b672      	cpsid	i
 8011be0:	f383 8811 	msr	BASEPRI, r3
 8011be4:	f3bf 8f6f 	isb	sy
 8011be8:	f3bf 8f4f 	dsb	sy
 8011bec:	b662      	cpsie	i
 8011bee:	617b      	str	r3, [r7, #20]
 8011bf0:	e7fe      	b.n	8011bf0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011bf2:	4b0a      	ldr	r3, [pc, #40]	; (8011c1c <vTaskPlaceOnEventListRestricted+0x54>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	3318      	adds	r3, #24
 8011bf8:	4619      	mov	r1, r3
 8011bfa:	68f8      	ldr	r0, [r7, #12]
 8011bfc:	f7fe fdb5 	bl	801076a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d002      	beq.n	8011c0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011c06:	f04f 33ff 	mov.w	r3, #4294967295
 8011c0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011c0c:	6879      	ldr	r1, [r7, #4]
 8011c0e:	68b8      	ldr	r0, [r7, #8]
 8011c10:	f000 fb66 	bl	80122e0 <prvAddCurrentTaskToDelayedList>
	}
 8011c14:	bf00      	nop
 8011c16:	3718      	adds	r7, #24
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	20003a40 	.word	0x20003a40

08011c20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d10b      	bne.n	8011c4e <xTaskRemoveFromEventList+0x2e>
 8011c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3a:	b672      	cpsid	i
 8011c3c:	f383 8811 	msr	BASEPRI, r3
 8011c40:	f3bf 8f6f 	isb	sy
 8011c44:	f3bf 8f4f 	dsb	sy
 8011c48:	b662      	cpsie	i
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	e7fe      	b.n	8011c4c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	3318      	adds	r3, #24
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fe fde6 	bl	8010824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c58:	4b1d      	ldr	r3, [pc, #116]	; (8011cd0 <xTaskRemoveFromEventList+0xb0>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d11d      	bne.n	8011c9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fe fddd 	bl	8010824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c6e:	4b19      	ldr	r3, [pc, #100]	; (8011cd4 <xTaskRemoveFromEventList+0xb4>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d903      	bls.n	8011c7e <xTaskRemoveFromEventList+0x5e>
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7a:	4a16      	ldr	r2, [pc, #88]	; (8011cd4 <xTaskRemoveFromEventList+0xb4>)
 8011c7c:	6013      	str	r3, [r2, #0]
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c82:	4613      	mov	r3, r2
 8011c84:	009b      	lsls	r3, r3, #2
 8011c86:	4413      	add	r3, r2
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	4a13      	ldr	r2, [pc, #76]	; (8011cd8 <xTaskRemoveFromEventList+0xb8>)
 8011c8c:	441a      	add	r2, r3
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	3304      	adds	r3, #4
 8011c92:	4619      	mov	r1, r3
 8011c94:	4610      	mov	r0, r2
 8011c96:	f7fe fd68 	bl	801076a <vListInsertEnd>
 8011c9a:	e005      	b.n	8011ca8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	3318      	adds	r3, #24
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	480e      	ldr	r0, [pc, #56]	; (8011cdc <xTaskRemoveFromEventList+0xbc>)
 8011ca4:	f7fe fd61 	bl	801076a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cac:	4b0c      	ldr	r3, [pc, #48]	; (8011ce0 <xTaskRemoveFromEventList+0xc0>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d905      	bls.n	8011cc2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011cba:	4b0a      	ldr	r3, [pc, #40]	; (8011ce4 <xTaskRemoveFromEventList+0xc4>)
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	601a      	str	r2, [r3, #0]
 8011cc0:	e001      	b.n	8011cc6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011cc6:	697b      	ldr	r3, [r7, #20]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3718      	adds	r7, #24
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	20003f3c 	.word	0x20003f3c
 8011cd4:	20003f1c 	.word	0x20003f1c
 8011cd8:	20003a44 	.word	0x20003a44
 8011cdc:	20003ed4 	.word	0x20003ed4
 8011ce0:	20003a40 	.word	0x20003a40
 8011ce4:	20003f28 	.word	0x20003f28

08011ce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011cf0:	4b06      	ldr	r3, [pc, #24]	; (8011d0c <vTaskInternalSetTimeOutState+0x24>)
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011cf8:	4b05      	ldr	r3, [pc, #20]	; (8011d10 <vTaskInternalSetTimeOutState+0x28>)
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	605a      	str	r2, [r3, #4]
}
 8011d00:	bf00      	nop
 8011d02:	370c      	adds	r7, #12
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr
 8011d0c:	20003f2c 	.word	0x20003f2c
 8011d10:	20003f18 	.word	0x20003f18

08011d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b088      	sub	sp, #32
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d10b      	bne.n	8011d3c <xTaskCheckForTimeOut+0x28>
 8011d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d28:	b672      	cpsid	i
 8011d2a:	f383 8811 	msr	BASEPRI, r3
 8011d2e:	f3bf 8f6f 	isb	sy
 8011d32:	f3bf 8f4f 	dsb	sy
 8011d36:	b662      	cpsie	i
 8011d38:	613b      	str	r3, [r7, #16]
 8011d3a:	e7fe      	b.n	8011d3a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d10b      	bne.n	8011d5a <xTaskCheckForTimeOut+0x46>
 8011d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d46:	b672      	cpsid	i
 8011d48:	f383 8811 	msr	BASEPRI, r3
 8011d4c:	f3bf 8f6f 	isb	sy
 8011d50:	f3bf 8f4f 	dsb	sy
 8011d54:	b662      	cpsie	i
 8011d56:	60fb      	str	r3, [r7, #12]
 8011d58:	e7fe      	b.n	8011d58 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011d5a:	f000 ff95 	bl	8012c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d5e:	4b1d      	ldr	r3, [pc, #116]	; (8011dd4 <xTaskCheckForTimeOut+0xc0>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	69ba      	ldr	r2, [r7, #24]
 8011d6a:	1ad3      	subs	r3, r2, r3
 8011d6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d76:	d102      	bne.n	8011d7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	61fb      	str	r3, [r7, #28]
 8011d7c:	e023      	b.n	8011dc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	4b15      	ldr	r3, [pc, #84]	; (8011dd8 <xTaskCheckForTimeOut+0xc4>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d007      	beq.n	8011d9a <xTaskCheckForTimeOut+0x86>
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	69ba      	ldr	r2, [r7, #24]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d302      	bcc.n	8011d9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011d94:	2301      	movs	r3, #1
 8011d96:	61fb      	str	r3, [r7, #28]
 8011d98:	e015      	b.n	8011dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	697a      	ldr	r2, [r7, #20]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d20b      	bcs.n	8011dbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	1ad2      	subs	r2, r2, r3
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f7ff ff99 	bl	8011ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011db6:	2300      	movs	r3, #0
 8011db8:	61fb      	str	r3, [r7, #28]
 8011dba:	e004      	b.n	8011dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011dc6:	f000 ff91 	bl	8012cec <vPortExitCritical>

	return xReturn;
 8011dca:	69fb      	ldr	r3, [r7, #28]
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3720      	adds	r7, #32
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	20003f18 	.word	0x20003f18
 8011dd8:	20003f2c 	.word	0x20003f2c

08011ddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011ddc:	b480      	push	{r7}
 8011dde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011de0:	4b03      	ldr	r3, [pc, #12]	; (8011df0 <vTaskMissedYield+0x14>)
 8011de2:	2201      	movs	r2, #1
 8011de4:	601a      	str	r2, [r3, #0]
}
 8011de6:	bf00      	nop
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr
 8011df0:	20003f28 	.word	0x20003f28

08011df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011dfc:	f000 f852 	bl	8011ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011e00:	4b06      	ldr	r3, [pc, #24]	; (8011e1c <prvIdleTask+0x28>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d9f9      	bls.n	8011dfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8011e08:	4b05      	ldr	r3, [pc, #20]	; (8011e20 <prvIdleTask+0x2c>)
 8011e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011e18:	e7f0      	b.n	8011dfc <prvIdleTask+0x8>
 8011e1a:	bf00      	nop
 8011e1c:	20003a44 	.word	0x20003a44
 8011e20:	e000ed04 	.word	0xe000ed04

08011e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	607b      	str	r3, [r7, #4]
 8011e2e:	e00c      	b.n	8011e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e30:	687a      	ldr	r2, [r7, #4]
 8011e32:	4613      	mov	r3, r2
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	4413      	add	r3, r2
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4a12      	ldr	r2, [pc, #72]	; (8011e84 <prvInitialiseTaskLists+0x60>)
 8011e3c:	4413      	add	r3, r2
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fe fc66 	bl	8010710 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	3301      	adds	r3, #1
 8011e48:	607b      	str	r3, [r7, #4]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2b37      	cmp	r3, #55	; 0x37
 8011e4e:	d9ef      	bls.n	8011e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e50:	480d      	ldr	r0, [pc, #52]	; (8011e88 <prvInitialiseTaskLists+0x64>)
 8011e52:	f7fe fc5d 	bl	8010710 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e56:	480d      	ldr	r0, [pc, #52]	; (8011e8c <prvInitialiseTaskLists+0x68>)
 8011e58:	f7fe fc5a 	bl	8010710 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e5c:	480c      	ldr	r0, [pc, #48]	; (8011e90 <prvInitialiseTaskLists+0x6c>)
 8011e5e:	f7fe fc57 	bl	8010710 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e62:	480c      	ldr	r0, [pc, #48]	; (8011e94 <prvInitialiseTaskLists+0x70>)
 8011e64:	f7fe fc54 	bl	8010710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e68:	480b      	ldr	r0, [pc, #44]	; (8011e98 <prvInitialiseTaskLists+0x74>)
 8011e6a:	f7fe fc51 	bl	8010710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e6e:	4b0b      	ldr	r3, [pc, #44]	; (8011e9c <prvInitialiseTaskLists+0x78>)
 8011e70:	4a05      	ldr	r2, [pc, #20]	; (8011e88 <prvInitialiseTaskLists+0x64>)
 8011e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e74:	4b0a      	ldr	r3, [pc, #40]	; (8011ea0 <prvInitialiseTaskLists+0x7c>)
 8011e76:	4a05      	ldr	r2, [pc, #20]	; (8011e8c <prvInitialiseTaskLists+0x68>)
 8011e78:	601a      	str	r2, [r3, #0]
}
 8011e7a:	bf00      	nop
 8011e7c:	3708      	adds	r7, #8
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	20003a44 	.word	0x20003a44
 8011e88:	20003ea4 	.word	0x20003ea4
 8011e8c:	20003eb8 	.word	0x20003eb8
 8011e90:	20003ed4 	.word	0x20003ed4
 8011e94:	20003ee8 	.word	0x20003ee8
 8011e98:	20003f00 	.word	0x20003f00
 8011e9c:	20003ecc 	.word	0x20003ecc
 8011ea0:	20003ed0 	.word	0x20003ed0

08011ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011eaa:	e019      	b.n	8011ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011eac:	f000 feec 	bl	8012c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011eb0:	4b0f      	ldr	r3, [pc, #60]	; (8011ef0 <prvCheckTasksWaitingTermination+0x4c>)
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	68db      	ldr	r3, [r3, #12]
 8011eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	3304      	adds	r3, #4
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fe fcb1 	bl	8010824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011ec2:	4b0c      	ldr	r3, [pc, #48]	; (8011ef4 <prvCheckTasksWaitingTermination+0x50>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	4a0a      	ldr	r2, [pc, #40]	; (8011ef4 <prvCheckTasksWaitingTermination+0x50>)
 8011eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ecc:	4b0a      	ldr	r3, [pc, #40]	; (8011ef8 <prvCheckTasksWaitingTermination+0x54>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	3b01      	subs	r3, #1
 8011ed2:	4a09      	ldr	r2, [pc, #36]	; (8011ef8 <prvCheckTasksWaitingTermination+0x54>)
 8011ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011ed6:	f000 ff09 	bl	8012cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f000 f80e 	bl	8011efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ee0:	4b05      	ldr	r3, [pc, #20]	; (8011ef8 <prvCheckTasksWaitingTermination+0x54>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1e1      	bne.n	8011eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011ee8:	bf00      	nop
 8011eea:	3708      	adds	r7, #8
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	20003ee8 	.word	0x20003ee8
 8011ef4:	20003f14 	.word	0x20003f14
 8011ef8:	20003efc 	.word	0x20003efc

08011efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d108      	bne.n	8011f20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f12:	4618      	mov	r0, r3
 8011f14:	f001 f8a2 	bl	801305c <vPortFree>
				vPortFree( pxTCB );
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f001 f89f 	bl	801305c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011f1e:	e019      	b.n	8011f54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d103      	bne.n	8011f32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f001 f896 	bl	801305c <vPortFree>
	}
 8011f30:	e010      	b.n	8011f54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011f38:	2b02      	cmp	r3, #2
 8011f3a:	d00b      	beq.n	8011f54 <prvDeleteTCB+0x58>
 8011f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f40:	b672      	cpsid	i
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	b662      	cpsie	i
 8011f50:	60fb      	str	r3, [r7, #12]
 8011f52:	e7fe      	b.n	8011f52 <prvDeleteTCB+0x56>
	}
 8011f54:	bf00      	nop
 8011f56:	3710      	adds	r7, #16
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b083      	sub	sp, #12
 8011f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f62:	4b0c      	ldr	r3, [pc, #48]	; (8011f94 <prvResetNextTaskUnblockTime+0x38>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d104      	bne.n	8011f76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011f6c:	4b0a      	ldr	r3, [pc, #40]	; (8011f98 <prvResetNextTaskUnblockTime+0x3c>)
 8011f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011f74:	e008      	b.n	8011f88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f76:	4b07      	ldr	r3, [pc, #28]	; (8011f94 <prvResetNextTaskUnblockTime+0x38>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	4a04      	ldr	r2, [pc, #16]	; (8011f98 <prvResetNextTaskUnblockTime+0x3c>)
 8011f86:	6013      	str	r3, [r2, #0]
}
 8011f88:	bf00      	nop
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr
 8011f94:	20003ecc 	.word	0x20003ecc
 8011f98:	20003f34 	.word	0x20003f34

08011f9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011fa2:	4b0b      	ldr	r3, [pc, #44]	; (8011fd0 <xTaskGetSchedulerState+0x34>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d102      	bne.n	8011fb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011faa:	2301      	movs	r3, #1
 8011fac:	607b      	str	r3, [r7, #4]
 8011fae:	e008      	b.n	8011fc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011fb0:	4b08      	ldr	r3, [pc, #32]	; (8011fd4 <xTaskGetSchedulerState+0x38>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d102      	bne.n	8011fbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011fb8:	2302      	movs	r3, #2
 8011fba:	607b      	str	r3, [r7, #4]
 8011fbc:	e001      	b.n	8011fc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011fc2:	687b      	ldr	r3, [r7, #4]
	}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr
 8011fd0:	20003f20 	.word	0x20003f20
 8011fd4:	20003f3c 	.word	0x20003f3c

08011fd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b086      	sub	sp, #24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d058      	beq.n	80120a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011fee:	4b2f      	ldr	r3, [pc, #188]	; (80120ac <xTaskPriorityDisinherit+0xd4>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	693a      	ldr	r2, [r7, #16]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d00b      	beq.n	8012010 <xTaskPriorityDisinherit+0x38>
 8011ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffc:	b672      	cpsid	i
 8011ffe:	f383 8811 	msr	BASEPRI, r3
 8012002:	f3bf 8f6f 	isb	sy
 8012006:	f3bf 8f4f 	dsb	sy
 801200a:	b662      	cpsie	i
 801200c:	60fb      	str	r3, [r7, #12]
 801200e:	e7fe      	b.n	801200e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012014:	2b00      	cmp	r3, #0
 8012016:	d10b      	bne.n	8012030 <xTaskPriorityDisinherit+0x58>
 8012018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201c:	b672      	cpsid	i
 801201e:	f383 8811 	msr	BASEPRI, r3
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	f3bf 8f4f 	dsb	sy
 801202a:	b662      	cpsie	i
 801202c:	60bb      	str	r3, [r7, #8]
 801202e:	e7fe      	b.n	801202e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012034:	1e5a      	subs	r2, r3, #1
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012042:	429a      	cmp	r2, r3
 8012044:	d02c      	beq.n	80120a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801204a:	2b00      	cmp	r3, #0
 801204c:	d128      	bne.n	80120a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	3304      	adds	r3, #4
 8012052:	4618      	mov	r0, r3
 8012054:	f7fe fbe6 	bl	8010824 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012064:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012070:	4b0f      	ldr	r3, [pc, #60]	; (80120b0 <xTaskPriorityDisinherit+0xd8>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	429a      	cmp	r2, r3
 8012076:	d903      	bls.n	8012080 <xTaskPriorityDisinherit+0xa8>
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801207c:	4a0c      	ldr	r2, [pc, #48]	; (80120b0 <xTaskPriorityDisinherit+0xd8>)
 801207e:	6013      	str	r3, [r2, #0]
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012084:	4613      	mov	r3, r2
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	4413      	add	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	4a09      	ldr	r2, [pc, #36]	; (80120b4 <xTaskPriorityDisinherit+0xdc>)
 801208e:	441a      	add	r2, r3
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	3304      	adds	r3, #4
 8012094:	4619      	mov	r1, r3
 8012096:	4610      	mov	r0, r2
 8012098:	f7fe fb67 	bl	801076a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801209c:	2301      	movs	r3, #1
 801209e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120a0:	697b      	ldr	r3, [r7, #20]
	}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3718      	adds	r7, #24
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	20003a40 	.word	0x20003a40
 80120b0:	20003f1c 	.word	0x20003f1c
 80120b4:	20003a44 	.word	0x20003a44

080120b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b086      	sub	sp, #24
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	607a      	str	r2, [r7, #4]
 80120c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80120c6:	f000 fddf 	bl	8012c88 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80120ca:	4b26      	ldr	r3, [pc, #152]	; (8012164 <xTaskNotifyWait+0xac>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	d01a      	beq.n	801210e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80120d8:	4b22      	ldr	r3, [pc, #136]	; (8012164 <xTaskNotifyWait+0xac>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80120de:	68fa      	ldr	r2, [r7, #12]
 80120e0:	43d2      	mvns	r2, r2
 80120e2:	400a      	ands	r2, r1
 80120e4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80120e6:	4b1f      	ldr	r3, [pc, #124]	; (8012164 <xTaskNotifyWait+0xac>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2201      	movs	r2, #1
 80120ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00b      	beq.n	801210e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80120f6:	2101      	movs	r1, #1
 80120f8:	6838      	ldr	r0, [r7, #0]
 80120fa:	f000 f8f1 	bl	80122e0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80120fe:	4b1a      	ldr	r3, [pc, #104]	; (8012168 <xTaskNotifyWait+0xb0>)
 8012100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801210e:	f000 fded 	bl	8012cec <vPortExitCritical>

		taskENTER_CRITICAL();
 8012112:	f000 fdb9 	bl	8012c88 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d004      	beq.n	8012126 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801211c:	4b11      	ldr	r3, [pc, #68]	; (8012164 <xTaskNotifyWait+0xac>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012126:	4b0f      	ldr	r3, [pc, #60]	; (8012164 <xTaskNotifyWait+0xac>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801212e:	b2db      	uxtb	r3, r3
 8012130:	2b02      	cmp	r3, #2
 8012132:	d002      	beq.n	801213a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012134:	2300      	movs	r3, #0
 8012136:	617b      	str	r3, [r7, #20]
 8012138:	e008      	b.n	801214c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801213a:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <xTaskNotifyWait+0xac>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	43d2      	mvns	r2, r2
 8012144:	400a      	ands	r2, r1
 8012146:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8012148:	2301      	movs	r3, #1
 801214a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801214c:	4b05      	ldr	r3, [pc, #20]	; (8012164 <xTaskNotifyWait+0xac>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2200      	movs	r2, #0
 8012152:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8012156:	f000 fdc9 	bl	8012cec <vPortExitCritical>

		return xReturn;
 801215a:	697b      	ldr	r3, [r7, #20]
	}
 801215c:	4618      	mov	r0, r3
 801215e:	3718      	adds	r7, #24
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	20003a40 	.word	0x20003a40
 8012168:	e000ed04 	.word	0xe000ed04

0801216c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08a      	sub	sp, #40	; 0x28
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	603b      	str	r3, [r7, #0]
 8012178:	4613      	mov	r3, r2
 801217a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801217c:	2301      	movs	r3, #1
 801217e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d10b      	bne.n	801219e <xTaskGenericNotify+0x32>
 8012186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218a:	b672      	cpsid	i
 801218c:	f383 8811 	msr	BASEPRI, r3
 8012190:	f3bf 8f6f 	isb	sy
 8012194:	f3bf 8f4f 	dsb	sy
 8012198:	b662      	cpsie	i
 801219a:	61bb      	str	r3, [r7, #24]
 801219c:	e7fe      	b.n	801219c <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80121a2:	f000 fd71 	bl	8012c88 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d003      	beq.n	80121b4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80121ac:	6a3b      	ldr	r3, [r7, #32]
 80121ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80121b4:	6a3b      	ldr	r3, [r7, #32]
 80121b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80121ba:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80121bc:	6a3b      	ldr	r3, [r7, #32]
 80121be:	2202      	movs	r2, #2
 80121c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80121c4:	79fb      	ldrb	r3, [r7, #7]
 80121c6:	2b04      	cmp	r3, #4
 80121c8:	d827      	bhi.n	801221a <xTaskGenericNotify+0xae>
 80121ca:	a201      	add	r2, pc, #4	; (adr r2, 80121d0 <xTaskGenericNotify+0x64>)
 80121cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121d0:	0801223d 	.word	0x0801223d
 80121d4:	080121e5 	.word	0x080121e5
 80121d8:	080121f3 	.word	0x080121f3
 80121dc:	080121ff 	.word	0x080121ff
 80121e0:	08012207 	.word	0x08012207
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80121e4:	6a3b      	ldr	r3, [r7, #32]
 80121e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	431a      	orrs	r2, r3
 80121ec:	6a3b      	ldr	r3, [r7, #32]
 80121ee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80121f0:	e027      	b.n	8012242 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80121f2:	6a3b      	ldr	r3, [r7, #32]
 80121f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121f6:	1c5a      	adds	r2, r3, #1
 80121f8:	6a3b      	ldr	r3, [r7, #32]
 80121fa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80121fc:	e021      	b.n	8012242 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012204:	e01d      	b.n	8012242 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012206:	7ffb      	ldrb	r3, [r7, #31]
 8012208:	2b02      	cmp	r3, #2
 801220a:	d003      	beq.n	8012214 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801220c:	6a3b      	ldr	r3, [r7, #32]
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012212:	e016      	b.n	8012242 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8012214:	2300      	movs	r3, #0
 8012216:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012218:	e013      	b.n	8012242 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801221a:	6a3b      	ldr	r3, [r7, #32]
 801221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801221e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012222:	d00d      	beq.n	8012240 <xTaskGenericNotify+0xd4>
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	b672      	cpsid	i
 801222a:	f383 8811 	msr	BASEPRI, r3
 801222e:	f3bf 8f6f 	isb	sy
 8012232:	f3bf 8f4f 	dsb	sy
 8012236:	b662      	cpsie	i
 8012238:	617b      	str	r3, [r7, #20]
 801223a:	e7fe      	b.n	801223a <xTaskGenericNotify+0xce>
					break;
 801223c:	bf00      	nop
 801223e:	e000      	b.n	8012242 <xTaskGenericNotify+0xd6>

					break;
 8012240:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012242:	7ffb      	ldrb	r3, [r7, #31]
 8012244:	2b01      	cmp	r3, #1
 8012246:	d13b      	bne.n	80122c0 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	3304      	adds	r3, #4
 801224c:	4618      	mov	r0, r3
 801224e:	f7fe fae9 	bl	8010824 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012252:	6a3b      	ldr	r3, [r7, #32]
 8012254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012256:	4b1e      	ldr	r3, [pc, #120]	; (80122d0 <xTaskGenericNotify+0x164>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	429a      	cmp	r2, r3
 801225c:	d903      	bls.n	8012266 <xTaskGenericNotify+0xfa>
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012262:	4a1b      	ldr	r2, [pc, #108]	; (80122d0 <xTaskGenericNotify+0x164>)
 8012264:	6013      	str	r3, [r2, #0]
 8012266:	6a3b      	ldr	r3, [r7, #32]
 8012268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801226a:	4613      	mov	r3, r2
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	4413      	add	r3, r2
 8012270:	009b      	lsls	r3, r3, #2
 8012272:	4a18      	ldr	r2, [pc, #96]	; (80122d4 <xTaskGenericNotify+0x168>)
 8012274:	441a      	add	r2, r3
 8012276:	6a3b      	ldr	r3, [r7, #32]
 8012278:	3304      	adds	r3, #4
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fe fa74 	bl	801076a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00b      	beq.n	80122a2 <xTaskGenericNotify+0x136>
 801228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801228e:	b672      	cpsid	i
 8012290:	f383 8811 	msr	BASEPRI, r3
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	b662      	cpsie	i
 801229e:	613b      	str	r3, [r7, #16]
 80122a0:	e7fe      	b.n	80122a0 <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80122a2:	6a3b      	ldr	r3, [r7, #32]
 80122a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122a6:	4b0c      	ldr	r3, [pc, #48]	; (80122d8 <xTaskGenericNotify+0x16c>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d907      	bls.n	80122c0 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80122b0:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <xTaskGenericNotify+0x170>)
 80122b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122b6:	601a      	str	r2, [r3, #0]
 80122b8:	f3bf 8f4f 	dsb	sy
 80122bc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80122c0:	f000 fd14 	bl	8012cec <vPortExitCritical>

		return xReturn;
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3728      	adds	r7, #40	; 0x28
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	20003f1c 	.word	0x20003f1c
 80122d4:	20003a44 	.word	0x20003a44
 80122d8:	20003a40 	.word	0x20003a40
 80122dc:	e000ed04 	.word	0xe000ed04

080122e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80122ea:	4b21      	ldr	r3, [pc, #132]	; (8012370 <prvAddCurrentTaskToDelayedList+0x90>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122f0:	4b20      	ldr	r3, [pc, #128]	; (8012374 <prvAddCurrentTaskToDelayedList+0x94>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	3304      	adds	r3, #4
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fe fa94 	bl	8010824 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012302:	d10a      	bne.n	801231a <prvAddCurrentTaskToDelayedList+0x3a>
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d007      	beq.n	801231a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801230a:	4b1a      	ldr	r3, [pc, #104]	; (8012374 <prvAddCurrentTaskToDelayedList+0x94>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	3304      	adds	r3, #4
 8012310:	4619      	mov	r1, r3
 8012312:	4819      	ldr	r0, [pc, #100]	; (8012378 <prvAddCurrentTaskToDelayedList+0x98>)
 8012314:	f7fe fa29 	bl	801076a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012318:	e026      	b.n	8012368 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801231a:	68fa      	ldr	r2, [r7, #12]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4413      	add	r3, r2
 8012320:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012322:	4b14      	ldr	r3, [pc, #80]	; (8012374 <prvAddCurrentTaskToDelayedList+0x94>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801232a:	68ba      	ldr	r2, [r7, #8]
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	429a      	cmp	r2, r3
 8012330:	d209      	bcs.n	8012346 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012332:	4b12      	ldr	r3, [pc, #72]	; (801237c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012334:	681a      	ldr	r2, [r3, #0]
 8012336:	4b0f      	ldr	r3, [pc, #60]	; (8012374 <prvAddCurrentTaskToDelayedList+0x94>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	3304      	adds	r3, #4
 801233c:	4619      	mov	r1, r3
 801233e:	4610      	mov	r0, r2
 8012340:	f7fe fa37 	bl	80107b2 <vListInsert>
}
 8012344:	e010      	b.n	8012368 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012346:	4b0e      	ldr	r3, [pc, #56]	; (8012380 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	4b0a      	ldr	r3, [pc, #40]	; (8012374 <prvAddCurrentTaskToDelayedList+0x94>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	3304      	adds	r3, #4
 8012350:	4619      	mov	r1, r3
 8012352:	4610      	mov	r0, r2
 8012354:	f7fe fa2d 	bl	80107b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012358:	4b0a      	ldr	r3, [pc, #40]	; (8012384 <prvAddCurrentTaskToDelayedList+0xa4>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	429a      	cmp	r2, r3
 8012360:	d202      	bcs.n	8012368 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012362:	4a08      	ldr	r2, [pc, #32]	; (8012384 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	6013      	str	r3, [r2, #0]
}
 8012368:	bf00      	nop
 801236a:	3710      	adds	r7, #16
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20003f18 	.word	0x20003f18
 8012374:	20003a40 	.word	0x20003a40
 8012378:	20003f00 	.word	0x20003f00
 801237c:	20003ed0 	.word	0x20003ed0
 8012380:	20003ecc 	.word	0x20003ecc
 8012384:	20003f34 	.word	0x20003f34

08012388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b08a      	sub	sp, #40	; 0x28
 801238c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801238e:	2300      	movs	r3, #0
 8012390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012392:	f000 fb0d 	bl	80129b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012396:	4b1d      	ldr	r3, [pc, #116]	; (801240c <xTimerCreateTimerTask+0x84>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d021      	beq.n	80123e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801239e:	2300      	movs	r3, #0
 80123a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80123a2:	2300      	movs	r3, #0
 80123a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80123a6:	1d3a      	adds	r2, r7, #4
 80123a8:	f107 0108 	add.w	r1, r7, #8
 80123ac:	f107 030c 	add.w	r3, r7, #12
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fe f8bf 	bl	8010534 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80123b6:	6879      	ldr	r1, [r7, #4]
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	9202      	str	r2, [sp, #8]
 80123be:	9301      	str	r3, [sp, #4]
 80123c0:	2302      	movs	r3, #2
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	2300      	movs	r3, #0
 80123c6:	460a      	mov	r2, r1
 80123c8:	4911      	ldr	r1, [pc, #68]	; (8012410 <xTimerCreateTimerTask+0x88>)
 80123ca:	4812      	ldr	r0, [pc, #72]	; (8012414 <xTimerCreateTimerTask+0x8c>)
 80123cc:	f7fe ff4a 	bl	8011264 <xTaskCreateStatic>
 80123d0:	4602      	mov	r2, r0
 80123d2:	4b11      	ldr	r3, [pc, #68]	; (8012418 <xTimerCreateTimerTask+0x90>)
 80123d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80123d6:	4b10      	ldr	r3, [pc, #64]	; (8012418 <xTimerCreateTimerTask+0x90>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d001      	beq.n	80123e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80123de:	2301      	movs	r3, #1
 80123e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d10b      	bne.n	8012400 <xTimerCreateTimerTask+0x78>
 80123e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ec:	b672      	cpsid	i
 80123ee:	f383 8811 	msr	BASEPRI, r3
 80123f2:	f3bf 8f6f 	isb	sy
 80123f6:	f3bf 8f4f 	dsb	sy
 80123fa:	b662      	cpsie	i
 80123fc:	613b      	str	r3, [r7, #16]
 80123fe:	e7fe      	b.n	80123fe <xTimerCreateTimerTask+0x76>
	return xReturn;
 8012400:	697b      	ldr	r3, [r7, #20]
}
 8012402:	4618      	mov	r0, r3
 8012404:	3718      	adds	r7, #24
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	20003f70 	.word	0x20003f70
 8012410:	08017f4c 	.word	0x08017f4c
 8012414:	08012555 	.word	0x08012555
 8012418:	20003f74 	.word	0x20003f74

0801241c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b08a      	sub	sp, #40	; 0x28
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
 8012428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801242a:	2300      	movs	r3, #0
 801242c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d10b      	bne.n	801244c <xTimerGenericCommand+0x30>
 8012434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012438:	b672      	cpsid	i
 801243a:	f383 8811 	msr	BASEPRI, r3
 801243e:	f3bf 8f6f 	isb	sy
 8012442:	f3bf 8f4f 	dsb	sy
 8012446:	b662      	cpsie	i
 8012448:	623b      	str	r3, [r7, #32]
 801244a:	e7fe      	b.n	801244a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801244c:	4b19      	ldr	r3, [pc, #100]	; (80124b4 <xTimerGenericCommand+0x98>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d02a      	beq.n	80124aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	2b05      	cmp	r3, #5
 8012464:	dc18      	bgt.n	8012498 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012466:	f7ff fd99 	bl	8011f9c <xTaskGetSchedulerState>
 801246a:	4603      	mov	r3, r0
 801246c:	2b02      	cmp	r3, #2
 801246e:	d109      	bne.n	8012484 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012470:	4b10      	ldr	r3, [pc, #64]	; (80124b4 <xTimerGenericCommand+0x98>)
 8012472:	6818      	ldr	r0, [r3, #0]
 8012474:	f107 0110 	add.w	r1, r7, #16
 8012478:	2300      	movs	r3, #0
 801247a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801247c:	f7fe fb06 	bl	8010a8c <xQueueGenericSend>
 8012480:	6278      	str	r0, [r7, #36]	; 0x24
 8012482:	e012      	b.n	80124aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012484:	4b0b      	ldr	r3, [pc, #44]	; (80124b4 <xTimerGenericCommand+0x98>)
 8012486:	6818      	ldr	r0, [r3, #0]
 8012488:	f107 0110 	add.w	r1, r7, #16
 801248c:	2300      	movs	r3, #0
 801248e:	2200      	movs	r2, #0
 8012490:	f7fe fafc 	bl	8010a8c <xQueueGenericSend>
 8012494:	6278      	str	r0, [r7, #36]	; 0x24
 8012496:	e008      	b.n	80124aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012498:	4b06      	ldr	r3, [pc, #24]	; (80124b4 <xTimerGenericCommand+0x98>)
 801249a:	6818      	ldr	r0, [r3, #0]
 801249c:	f107 0110 	add.w	r1, r7, #16
 80124a0:	2300      	movs	r3, #0
 80124a2:	683a      	ldr	r2, [r7, #0]
 80124a4:	f7fe fbf4 	bl	8010c90 <xQueueGenericSendFromISR>
 80124a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80124aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3728      	adds	r7, #40	; 0x28
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	20003f70 	.word	0x20003f70

080124b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b088      	sub	sp, #32
 80124bc:	af02      	add	r7, sp, #8
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124c2:	4b23      	ldr	r3, [pc, #140]	; (8012550 <prvProcessExpiredTimer+0x98>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	3304      	adds	r3, #4
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7fe f9a7 	bl	8010824 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124dc:	f003 0304 	and.w	r3, r3, #4
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d023      	beq.n	801252c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	699a      	ldr	r2, [r3, #24]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	18d1      	adds	r1, r2, r3
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	683a      	ldr	r2, [r7, #0]
 80124f0:	6978      	ldr	r0, [r7, #20]
 80124f2:	f000 f8d3 	bl	801269c <prvInsertTimerInActiveList>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d020      	beq.n	801253e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80124fc:	2300      	movs	r3, #0
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	2300      	movs	r3, #0
 8012502:	687a      	ldr	r2, [r7, #4]
 8012504:	2100      	movs	r1, #0
 8012506:	6978      	ldr	r0, [r7, #20]
 8012508:	f7ff ff88 	bl	801241c <xTimerGenericCommand>
 801250c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d114      	bne.n	801253e <prvProcessExpiredTimer+0x86>
 8012514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012518:	b672      	cpsid	i
 801251a:	f383 8811 	msr	BASEPRI, r3
 801251e:	f3bf 8f6f 	isb	sy
 8012522:	f3bf 8f4f 	dsb	sy
 8012526:	b662      	cpsie	i
 8012528:	60fb      	str	r3, [r7, #12]
 801252a:	e7fe      	b.n	801252a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012532:	f023 0301 	bic.w	r3, r3, #1
 8012536:	b2da      	uxtb	r2, r3
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	6a1b      	ldr	r3, [r3, #32]
 8012542:	6978      	ldr	r0, [r7, #20]
 8012544:	4798      	blx	r3
}
 8012546:	bf00      	nop
 8012548:	3718      	adds	r7, #24
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
 801254e:	bf00      	nop
 8012550:	20003f68 	.word	0x20003f68

08012554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801255c:	f107 0308 	add.w	r3, r7, #8
 8012560:	4618      	mov	r0, r3
 8012562:	f000 f857 	bl	8012614 <prvGetNextExpireTime>
 8012566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	4619      	mov	r1, r3
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f000 f803 	bl	8012578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012572:	f000 f8d5 	bl	8012720 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012576:	e7f1      	b.n	801255c <prvTimerTask+0x8>

08012578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012582:	f7ff f927 	bl	80117d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012586:	f107 0308 	add.w	r3, r7, #8
 801258a:	4618      	mov	r0, r3
 801258c:	f000 f866 	bl	801265c <prvSampleTimeNow>
 8012590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d130      	bne.n	80125fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d10a      	bne.n	80125b4 <prvProcessTimerOrBlockTask+0x3c>
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d806      	bhi.n	80125b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80125a6:	f7ff f923 	bl	80117f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80125aa:	68f9      	ldr	r1, [r7, #12]
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff ff83 	bl	80124b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80125b2:	e024      	b.n	80125fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d008      	beq.n	80125cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80125ba:	4b13      	ldr	r3, [pc, #76]	; (8012608 <prvProcessTimerOrBlockTask+0x90>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d101      	bne.n	80125c8 <prvProcessTimerOrBlockTask+0x50>
 80125c4:	2301      	movs	r3, #1
 80125c6:	e000      	b.n	80125ca <prvProcessTimerOrBlockTask+0x52>
 80125c8:	2300      	movs	r3, #0
 80125ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80125cc:	4b0f      	ldr	r3, [pc, #60]	; (801260c <prvProcessTimerOrBlockTask+0x94>)
 80125ce:	6818      	ldr	r0, [r3, #0]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	1ad3      	subs	r3, r2, r3
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	4619      	mov	r1, r3
 80125da:	f7fe fe0f 	bl	80111fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80125de:	f7ff f907 	bl	80117f0 <xTaskResumeAll>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d10a      	bne.n	80125fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80125e8:	4b09      	ldr	r3, [pc, #36]	; (8012610 <prvProcessTimerOrBlockTask+0x98>)
 80125ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125ee:	601a      	str	r2, [r3, #0]
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	f3bf 8f6f 	isb	sy
}
 80125f8:	e001      	b.n	80125fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80125fa:	f7ff f8f9 	bl	80117f0 <xTaskResumeAll>
}
 80125fe:	bf00      	nop
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	20003f6c 	.word	0x20003f6c
 801260c:	20003f70 	.word	0x20003f70
 8012610:	e000ed04 	.word	0xe000ed04

08012614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801261c:	4b0e      	ldr	r3, [pc, #56]	; (8012658 <prvGetNextExpireTime+0x44>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d101      	bne.n	801262a <prvGetNextExpireTime+0x16>
 8012626:	2201      	movs	r2, #1
 8012628:	e000      	b.n	801262c <prvGetNextExpireTime+0x18>
 801262a:	2200      	movs	r2, #0
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d105      	bne.n	8012644 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012638:	4b07      	ldr	r3, [pc, #28]	; (8012658 <prvGetNextExpireTime+0x44>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	68db      	ldr	r3, [r3, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	60fb      	str	r3, [r7, #12]
 8012642:	e001      	b.n	8012648 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012644:	2300      	movs	r3, #0
 8012646:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012648:	68fb      	ldr	r3, [r7, #12]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3714      	adds	r7, #20
 801264e:	46bd      	mov	sp, r7
 8012650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012654:	4770      	bx	lr
 8012656:	bf00      	nop
 8012658:	20003f68 	.word	0x20003f68

0801265c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012664:	f7ff f962 	bl	801192c <xTaskGetTickCount>
 8012668:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801266a:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <prvSampleTimeNow+0x3c>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	68fa      	ldr	r2, [r7, #12]
 8012670:	429a      	cmp	r2, r3
 8012672:	d205      	bcs.n	8012680 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012674:	f000 f936 	bl	80128e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2201      	movs	r2, #1
 801267c:	601a      	str	r2, [r3, #0]
 801267e:	e002      	b.n	8012686 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012686:	4a04      	ldr	r2, [pc, #16]	; (8012698 <prvSampleTimeNow+0x3c>)
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801268c:	68fb      	ldr	r3, [r7, #12]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	20003f78 	.word	0x20003f78

0801269c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b086      	sub	sp, #24
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
 80126a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80126aa:	2300      	movs	r3, #0
 80126ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	68ba      	ldr	r2, [r7, #8]
 80126b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	68fa      	ldr	r2, [r7, #12]
 80126b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80126ba:	68ba      	ldr	r2, [r7, #8]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d812      	bhi.n	80126e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	1ad2      	subs	r2, r2, r3
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	699b      	ldr	r3, [r3, #24]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d302      	bcc.n	80126d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80126d0:	2301      	movs	r3, #1
 80126d2:	617b      	str	r3, [r7, #20]
 80126d4:	e01b      	b.n	801270e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80126d6:	4b10      	ldr	r3, [pc, #64]	; (8012718 <prvInsertTimerInActiveList+0x7c>)
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	3304      	adds	r3, #4
 80126de:	4619      	mov	r1, r3
 80126e0:	4610      	mov	r0, r2
 80126e2:	f7fe f866 	bl	80107b2 <vListInsert>
 80126e6:	e012      	b.n	801270e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d206      	bcs.n	80126fe <prvInsertTimerInActiveList+0x62>
 80126f0:	68ba      	ldr	r2, [r7, #8]
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d302      	bcc.n	80126fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80126f8:	2301      	movs	r3, #1
 80126fa:	617b      	str	r3, [r7, #20]
 80126fc:	e007      	b.n	801270e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80126fe:	4b07      	ldr	r3, [pc, #28]	; (801271c <prvInsertTimerInActiveList+0x80>)
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	3304      	adds	r3, #4
 8012706:	4619      	mov	r1, r3
 8012708:	4610      	mov	r0, r2
 801270a:	f7fe f852 	bl	80107b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801270e:	697b      	ldr	r3, [r7, #20]
}
 8012710:	4618      	mov	r0, r3
 8012712:	3718      	adds	r7, #24
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	20003f6c 	.word	0x20003f6c
 801271c:	20003f68 	.word	0x20003f68

08012720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b08e      	sub	sp, #56	; 0x38
 8012724:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012726:	e0cc      	b.n	80128c2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2b00      	cmp	r3, #0
 801272c:	da19      	bge.n	8012762 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801272e:	1d3b      	adds	r3, r7, #4
 8012730:	3304      	adds	r3, #4
 8012732:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012736:	2b00      	cmp	r3, #0
 8012738:	d10b      	bne.n	8012752 <prvProcessReceivedCommands+0x32>
 801273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273e:	b672      	cpsid	i
 8012740:	f383 8811 	msr	BASEPRI, r3
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	b662      	cpsie	i
 801274e:	61fb      	str	r3, [r7, #28]
 8012750:	e7fe      	b.n	8012750 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012758:	6850      	ldr	r0, [r2, #4]
 801275a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801275c:	6892      	ldr	r2, [r2, #8]
 801275e:	4611      	mov	r1, r2
 8012760:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2b00      	cmp	r3, #0
 8012766:	f2c0 80ab 	blt.w	80128c0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012770:	695b      	ldr	r3, [r3, #20]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d004      	beq.n	8012780 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012778:	3304      	adds	r3, #4
 801277a:	4618      	mov	r0, r3
 801277c:	f7fe f852 	bl	8010824 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012780:	463b      	mov	r3, r7
 8012782:	4618      	mov	r0, r3
 8012784:	f7ff ff6a 	bl	801265c <prvSampleTimeNow>
 8012788:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2b09      	cmp	r3, #9
 801278e:	f200 8098 	bhi.w	80128c2 <prvProcessReceivedCommands+0x1a2>
 8012792:	a201      	add	r2, pc, #4	; (adr r2, 8012798 <prvProcessReceivedCommands+0x78>)
 8012794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012798:	080127c1 	.word	0x080127c1
 801279c:	080127c1 	.word	0x080127c1
 80127a0:	080127c1 	.word	0x080127c1
 80127a4:	08012837 	.word	0x08012837
 80127a8:	0801284b 	.word	0x0801284b
 80127ac:	08012897 	.word	0x08012897
 80127b0:	080127c1 	.word	0x080127c1
 80127b4:	080127c1 	.word	0x080127c1
 80127b8:	08012837 	.word	0x08012837
 80127bc:	0801284b 	.word	0x0801284b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80127c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127c6:	f043 0301 	orr.w	r3, r3, #1
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80127d2:	68ba      	ldr	r2, [r7, #8]
 80127d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d6:	699b      	ldr	r3, [r3, #24]
 80127d8:	18d1      	adds	r1, r2, r3
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127e0:	f7ff ff5c 	bl	801269c <prvInsertTimerInActiveList>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d06b      	beq.n	80128c2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ec:	6a1b      	ldr	r3, [r3, #32]
 80127ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127f8:	f003 0304 	and.w	r3, r3, #4
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d060      	beq.n	80128c2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012800:	68ba      	ldr	r2, [r7, #8]
 8012802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012804:	699b      	ldr	r3, [r3, #24]
 8012806:	441a      	add	r2, r3
 8012808:	2300      	movs	r3, #0
 801280a:	9300      	str	r3, [sp, #0]
 801280c:	2300      	movs	r3, #0
 801280e:	2100      	movs	r1, #0
 8012810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012812:	f7ff fe03 	bl	801241c <xTimerGenericCommand>
 8012816:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012818:	6a3b      	ldr	r3, [r7, #32]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d151      	bne.n	80128c2 <prvProcessReceivedCommands+0x1a2>
 801281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012822:	b672      	cpsid	i
 8012824:	f383 8811 	msr	BASEPRI, r3
 8012828:	f3bf 8f6f 	isb	sy
 801282c:	f3bf 8f4f 	dsb	sy
 8012830:	b662      	cpsie	i
 8012832:	61bb      	str	r3, [r7, #24]
 8012834:	e7fe      	b.n	8012834 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801283c:	f023 0301 	bic.w	r3, r3, #1
 8012840:	b2da      	uxtb	r2, r3
 8012842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012848:	e03b      	b.n	80128c2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012850:	f043 0301 	orr.w	r3, r3, #1
 8012854:	b2da      	uxtb	r2, r3
 8012856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012858:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801285c:	68ba      	ldr	r2, [r7, #8]
 801285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012860:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012864:	699b      	ldr	r3, [r3, #24]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d10b      	bne.n	8012882 <prvProcessReceivedCommands+0x162>
 801286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286e:	b672      	cpsid	i
 8012870:	f383 8811 	msr	BASEPRI, r3
 8012874:	f3bf 8f6f 	isb	sy
 8012878:	f3bf 8f4f 	dsb	sy
 801287c:	b662      	cpsie	i
 801287e:	617b      	str	r3, [r7, #20]
 8012880:	e7fe      	b.n	8012880 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012884:	699a      	ldr	r2, [r3, #24]
 8012886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012888:	18d1      	adds	r1, r2, r3
 801288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801288e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012890:	f7ff ff04 	bl	801269c <prvInsertTimerInActiveList>
					break;
 8012894:	e015      	b.n	80128c2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801289c:	f003 0302 	and.w	r3, r3, #2
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d103      	bne.n	80128ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80128a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128a6:	f000 fbd9 	bl	801305c <vPortFree>
 80128aa:	e00a      	b.n	80128c2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80128ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128b2:	f023 0301 	bic.w	r3, r3, #1
 80128b6:	b2da      	uxtb	r2, r3
 80128b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80128be:	e000      	b.n	80128c2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80128c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80128c2:	4b07      	ldr	r3, [pc, #28]	; (80128e0 <prvProcessReceivedCommands+0x1c0>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	1d39      	adds	r1, r7, #4
 80128c8:	2200      	movs	r2, #0
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7fe fa7c 	bl	8010dc8 <xQueueReceive>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	f47f af28 	bne.w	8012728 <prvProcessReceivedCommands+0x8>
	}
}
 80128d8:	bf00      	nop
 80128da:	3730      	adds	r7, #48	; 0x30
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	20003f70 	.word	0x20003f70

080128e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b088      	sub	sp, #32
 80128e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80128ea:	e049      	b.n	8012980 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80128ec:	4b2e      	ldr	r3, [pc, #184]	; (80129a8 <prvSwitchTimerLists+0xc4>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128f6:	4b2c      	ldr	r3, [pc, #176]	; (80129a8 <prvSwitchTimerLists+0xc4>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	3304      	adds	r3, #4
 8012904:	4618      	mov	r0, r3
 8012906:	f7fd ff8d 	bl	8010824 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	6a1b      	ldr	r3, [r3, #32]
 801290e:	68f8      	ldr	r0, [r7, #12]
 8012910:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012918:	f003 0304 	and.w	r3, r3, #4
 801291c:	2b00      	cmp	r3, #0
 801291e:	d02f      	beq.n	8012980 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	699b      	ldr	r3, [r3, #24]
 8012924:	693a      	ldr	r2, [r7, #16]
 8012926:	4413      	add	r3, r2
 8012928:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	429a      	cmp	r2, r3
 8012930:	d90e      	bls.n	8012950 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	68ba      	ldr	r2, [r7, #8]
 8012936:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	68fa      	ldr	r2, [r7, #12]
 801293c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801293e:	4b1a      	ldr	r3, [pc, #104]	; (80129a8 <prvSwitchTimerLists+0xc4>)
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	3304      	adds	r3, #4
 8012946:	4619      	mov	r1, r3
 8012948:	4610      	mov	r0, r2
 801294a:	f7fd ff32 	bl	80107b2 <vListInsert>
 801294e:	e017      	b.n	8012980 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012950:	2300      	movs	r3, #0
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	2300      	movs	r3, #0
 8012956:	693a      	ldr	r2, [r7, #16]
 8012958:	2100      	movs	r1, #0
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff fd5e 	bl	801241c <xTimerGenericCommand>
 8012960:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d10b      	bne.n	8012980 <prvSwitchTimerLists+0x9c>
 8012968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296c:	b672      	cpsid	i
 801296e:	f383 8811 	msr	BASEPRI, r3
 8012972:	f3bf 8f6f 	isb	sy
 8012976:	f3bf 8f4f 	dsb	sy
 801297a:	b662      	cpsie	i
 801297c:	603b      	str	r3, [r7, #0]
 801297e:	e7fe      	b.n	801297e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012980:	4b09      	ldr	r3, [pc, #36]	; (80129a8 <prvSwitchTimerLists+0xc4>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d1b0      	bne.n	80128ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801298a:	4b07      	ldr	r3, [pc, #28]	; (80129a8 <prvSwitchTimerLists+0xc4>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012990:	4b06      	ldr	r3, [pc, #24]	; (80129ac <prvSwitchTimerLists+0xc8>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4a04      	ldr	r2, [pc, #16]	; (80129a8 <prvSwitchTimerLists+0xc4>)
 8012996:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012998:	4a04      	ldr	r2, [pc, #16]	; (80129ac <prvSwitchTimerLists+0xc8>)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	6013      	str	r3, [r2, #0]
}
 801299e:	bf00      	nop
 80129a0:	3718      	adds	r7, #24
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	20003f68 	.word	0x20003f68
 80129ac:	20003f6c 	.word	0x20003f6c

080129b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80129b6:	f000 f967 	bl	8012c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80129ba:	4b15      	ldr	r3, [pc, #84]	; (8012a10 <prvCheckForValidListAndQueue+0x60>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d120      	bne.n	8012a04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80129c2:	4814      	ldr	r0, [pc, #80]	; (8012a14 <prvCheckForValidListAndQueue+0x64>)
 80129c4:	f7fd fea4 	bl	8010710 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80129c8:	4813      	ldr	r0, [pc, #76]	; (8012a18 <prvCheckForValidListAndQueue+0x68>)
 80129ca:	f7fd fea1 	bl	8010710 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80129ce:	4b13      	ldr	r3, [pc, #76]	; (8012a1c <prvCheckForValidListAndQueue+0x6c>)
 80129d0:	4a10      	ldr	r2, [pc, #64]	; (8012a14 <prvCheckForValidListAndQueue+0x64>)
 80129d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80129d4:	4b12      	ldr	r3, [pc, #72]	; (8012a20 <prvCheckForValidListAndQueue+0x70>)
 80129d6:	4a10      	ldr	r2, [pc, #64]	; (8012a18 <prvCheckForValidListAndQueue+0x68>)
 80129d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80129da:	2300      	movs	r3, #0
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	4b11      	ldr	r3, [pc, #68]	; (8012a24 <prvCheckForValidListAndQueue+0x74>)
 80129e0:	4a11      	ldr	r2, [pc, #68]	; (8012a28 <prvCheckForValidListAndQueue+0x78>)
 80129e2:	2110      	movs	r1, #16
 80129e4:	200a      	movs	r0, #10
 80129e6:	f7fd ffb1 	bl	801094c <xQueueGenericCreateStatic>
 80129ea:	4602      	mov	r2, r0
 80129ec:	4b08      	ldr	r3, [pc, #32]	; (8012a10 <prvCheckForValidListAndQueue+0x60>)
 80129ee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80129f0:	4b07      	ldr	r3, [pc, #28]	; (8012a10 <prvCheckForValidListAndQueue+0x60>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d005      	beq.n	8012a04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80129f8:	4b05      	ldr	r3, [pc, #20]	; (8012a10 <prvCheckForValidListAndQueue+0x60>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	490b      	ldr	r1, [pc, #44]	; (8012a2c <prvCheckForValidListAndQueue+0x7c>)
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7fe fbd4 	bl	80111ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012a04:	f000 f972 	bl	8012cec <vPortExitCritical>
}
 8012a08:	bf00      	nop
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	20003f70 	.word	0x20003f70
 8012a14:	20003f40 	.word	0x20003f40
 8012a18:	20003f54 	.word	0x20003f54
 8012a1c:	20003f68 	.word	0x20003f68
 8012a20:	20003f6c 	.word	0x20003f6c
 8012a24:	2000401c 	.word	0x2000401c
 8012a28:	20003f7c 	.word	0x20003f7c
 8012a2c:	08017f54 	.word	0x08017f54

08012a30 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b08a      	sub	sp, #40	; 0x28
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012a3e:	f06f 0301 	mvn.w	r3, #1
 8012a42:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012a50:	4b06      	ldr	r3, [pc, #24]	; (8012a6c <xTimerPendFunctionCallFromISR+0x3c>)
 8012a52:	6818      	ldr	r0, [r3, #0]
 8012a54:	f107 0114 	add.w	r1, r7, #20
 8012a58:	2300      	movs	r3, #0
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	f7fe f918 	bl	8010c90 <xQueueGenericSendFromISR>
 8012a60:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8012a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3728      	adds	r7, #40	; 0x28
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	20003f70 	.word	0x20003f70

08012a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012a70:	b480      	push	{r7}
 8012a72:	b085      	sub	sp, #20
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	3b04      	subs	r3, #4
 8012a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	3b04      	subs	r3, #4
 8012a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	f023 0201 	bic.w	r2, r3, #1
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	3b04      	subs	r3, #4
 8012a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012aa0:	4a0c      	ldr	r2, [pc, #48]	; (8012ad4 <pxPortInitialiseStack+0x64>)
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	3b14      	subs	r3, #20
 8012aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	3b04      	subs	r3, #4
 8012ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	f06f 0202 	mvn.w	r2, #2
 8012abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	3b20      	subs	r3, #32
 8012ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3714      	adds	r7, #20
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr
 8012ad4:	08012ad9 	.word	0x08012ad9

08012ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b085      	sub	sp, #20
 8012adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012ae2:	4b13      	ldr	r3, [pc, #76]	; (8012b30 <prvTaskExitError+0x58>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aea:	d00b      	beq.n	8012b04 <prvTaskExitError+0x2c>
 8012aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af0:	b672      	cpsid	i
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	b662      	cpsie	i
 8012b00:	60fb      	str	r3, [r7, #12]
 8012b02:	e7fe      	b.n	8012b02 <prvTaskExitError+0x2a>
 8012b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b08:	b672      	cpsid	i
 8012b0a:	f383 8811 	msr	BASEPRI, r3
 8012b0e:	f3bf 8f6f 	isb	sy
 8012b12:	f3bf 8f4f 	dsb	sy
 8012b16:	b662      	cpsie	i
 8012b18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012b1a:	bf00      	nop
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d0fc      	beq.n	8012b1c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012b22:	bf00      	nop
 8012b24:	3714      	adds	r7, #20
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop
 8012b30:	200001a4 	.word	0x200001a4
	...

08012b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012b40:	4b07      	ldr	r3, [pc, #28]	; (8012b60 <pxCurrentTCBConst2>)
 8012b42:	6819      	ldr	r1, [r3, #0]
 8012b44:	6808      	ldr	r0, [r1, #0]
 8012b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4a:	f380 8809 	msr	PSP, r0
 8012b4e:	f3bf 8f6f 	isb	sy
 8012b52:	f04f 0000 	mov.w	r0, #0
 8012b56:	f380 8811 	msr	BASEPRI, r0
 8012b5a:	4770      	bx	lr
 8012b5c:	f3af 8000 	nop.w

08012b60 <pxCurrentTCBConst2>:
 8012b60:	20003a40 	.word	0x20003a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012b64:	bf00      	nop
 8012b66:	bf00      	nop

08012b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012b68:	4808      	ldr	r0, [pc, #32]	; (8012b8c <prvPortStartFirstTask+0x24>)
 8012b6a:	6800      	ldr	r0, [r0, #0]
 8012b6c:	6800      	ldr	r0, [r0, #0]
 8012b6e:	f380 8808 	msr	MSP, r0
 8012b72:	f04f 0000 	mov.w	r0, #0
 8012b76:	f380 8814 	msr	CONTROL, r0
 8012b7a:	b662      	cpsie	i
 8012b7c:	b661      	cpsie	f
 8012b7e:	f3bf 8f4f 	dsb	sy
 8012b82:	f3bf 8f6f 	isb	sy
 8012b86:	df00      	svc	0
 8012b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012b8a:	bf00      	nop
 8012b8c:	e000ed08 	.word	0xe000ed08

08012b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b96:	4b36      	ldr	r3, [pc, #216]	; (8012c70 <xPortStartScheduler+0xe0>)
 8012b98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	22ff      	movs	r2, #255	; 0xff
 8012ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012bb0:	78fb      	ldrb	r3, [r7, #3]
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012bb8:	b2da      	uxtb	r2, r3
 8012bba:	4b2e      	ldr	r3, [pc, #184]	; (8012c74 <xPortStartScheduler+0xe4>)
 8012bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012bbe:	4b2e      	ldr	r3, [pc, #184]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012bc0:	2207      	movs	r2, #7
 8012bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bc4:	e009      	b.n	8012bda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012bc6:	4b2c      	ldr	r3, [pc, #176]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	4a2a      	ldr	r2, [pc, #168]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012bd0:	78fb      	ldrb	r3, [r7, #3]
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	005b      	lsls	r3, r3, #1
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bda:	78fb      	ldrb	r3, [r7, #3]
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012be2:	2b80      	cmp	r3, #128	; 0x80
 8012be4:	d0ef      	beq.n	8012bc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012be6:	4b24      	ldr	r3, [pc, #144]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	f1c3 0307 	rsb	r3, r3, #7
 8012bee:	2b04      	cmp	r3, #4
 8012bf0:	d00b      	beq.n	8012c0a <xPortStartScheduler+0x7a>
 8012bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf6:	b672      	cpsid	i
 8012bf8:	f383 8811 	msr	BASEPRI, r3
 8012bfc:	f3bf 8f6f 	isb	sy
 8012c00:	f3bf 8f4f 	dsb	sy
 8012c04:	b662      	cpsie	i
 8012c06:	60bb      	str	r3, [r7, #8]
 8012c08:	e7fe      	b.n	8012c08 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012c0a:	4b1b      	ldr	r3, [pc, #108]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	021b      	lsls	r3, r3, #8
 8012c10:	4a19      	ldr	r2, [pc, #100]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012c12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012c14:	4b18      	ldr	r3, [pc, #96]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012c1c:	4a16      	ldr	r2, [pc, #88]	; (8012c78 <xPortStartScheduler+0xe8>)
 8012c1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	b2da      	uxtb	r2, r3
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012c28:	4b14      	ldr	r3, [pc, #80]	; (8012c7c <xPortStartScheduler+0xec>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4a13      	ldr	r2, [pc, #76]	; (8012c7c <xPortStartScheduler+0xec>)
 8012c2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012c32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012c34:	4b11      	ldr	r3, [pc, #68]	; (8012c7c <xPortStartScheduler+0xec>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a10      	ldr	r2, [pc, #64]	; (8012c7c <xPortStartScheduler+0xec>)
 8012c3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012c3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012c40:	f000 f8d4 	bl	8012dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012c44:	4b0e      	ldr	r3, [pc, #56]	; (8012c80 <xPortStartScheduler+0xf0>)
 8012c46:	2200      	movs	r2, #0
 8012c48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012c4a:	f000 f8f3 	bl	8012e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012c4e:	4b0d      	ldr	r3, [pc, #52]	; (8012c84 <xPortStartScheduler+0xf4>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	4a0c      	ldr	r2, [pc, #48]	; (8012c84 <xPortStartScheduler+0xf4>)
 8012c54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012c58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012c5a:	f7ff ff85 	bl	8012b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012c5e:	f7fe ff2f 	bl	8011ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8012c62:	f7ff ff39 	bl	8012ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012c66:	2300      	movs	r3, #0
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3710      	adds	r7, #16
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	e000e400 	.word	0xe000e400
 8012c74:	2000406c 	.word	0x2000406c
 8012c78:	20004070 	.word	0x20004070
 8012c7c:	e000ed20 	.word	0xe000ed20
 8012c80:	200001a4 	.word	0x200001a4
 8012c84:	e000ef34 	.word	0xe000ef34

08012c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c92:	b672      	cpsid	i
 8012c94:	f383 8811 	msr	BASEPRI, r3
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	f3bf 8f4f 	dsb	sy
 8012ca0:	b662      	cpsie	i
 8012ca2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ca4:	4b0f      	ldr	r3, [pc, #60]	; (8012ce4 <vPortEnterCritical+0x5c>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	4a0e      	ldr	r2, [pc, #56]	; (8012ce4 <vPortEnterCritical+0x5c>)
 8012cac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012cae:	4b0d      	ldr	r3, [pc, #52]	; (8012ce4 <vPortEnterCritical+0x5c>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d110      	bne.n	8012cd8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012cb6:	4b0c      	ldr	r3, [pc, #48]	; (8012ce8 <vPortEnterCritical+0x60>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d00b      	beq.n	8012cd8 <vPortEnterCritical+0x50>
 8012cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc4:	b672      	cpsid	i
 8012cc6:	f383 8811 	msr	BASEPRI, r3
 8012cca:	f3bf 8f6f 	isb	sy
 8012cce:	f3bf 8f4f 	dsb	sy
 8012cd2:	b662      	cpsie	i
 8012cd4:	603b      	str	r3, [r7, #0]
 8012cd6:	e7fe      	b.n	8012cd6 <vPortEnterCritical+0x4e>
	}
}
 8012cd8:	bf00      	nop
 8012cda:	370c      	adds	r7, #12
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr
 8012ce4:	200001a4 	.word	0x200001a4
 8012ce8:	e000ed04 	.word	0xe000ed04

08012cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012cf2:	4b12      	ldr	r3, [pc, #72]	; (8012d3c <vPortExitCritical+0x50>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d10b      	bne.n	8012d12 <vPortExitCritical+0x26>
 8012cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfe:	b672      	cpsid	i
 8012d00:	f383 8811 	msr	BASEPRI, r3
 8012d04:	f3bf 8f6f 	isb	sy
 8012d08:	f3bf 8f4f 	dsb	sy
 8012d0c:	b662      	cpsie	i
 8012d0e:	607b      	str	r3, [r7, #4]
 8012d10:	e7fe      	b.n	8012d10 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012d12:	4b0a      	ldr	r3, [pc, #40]	; (8012d3c <vPortExitCritical+0x50>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	3b01      	subs	r3, #1
 8012d18:	4a08      	ldr	r2, [pc, #32]	; (8012d3c <vPortExitCritical+0x50>)
 8012d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012d1c:	4b07      	ldr	r3, [pc, #28]	; (8012d3c <vPortExitCritical+0x50>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d104      	bne.n	8012d2e <vPortExitCritical+0x42>
 8012d24:	2300      	movs	r3, #0
 8012d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012d2e:	bf00      	nop
 8012d30:	370c      	adds	r7, #12
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop
 8012d3c:	200001a4 	.word	0x200001a4

08012d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012d40:	f3ef 8009 	mrs	r0, PSP
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	4b15      	ldr	r3, [pc, #84]	; (8012da0 <pxCurrentTCBConst>)
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	f01e 0f10 	tst.w	lr, #16
 8012d50:	bf08      	it	eq
 8012d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5a:	6010      	str	r0, [r2, #0]
 8012d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012d64:	b672      	cpsid	i
 8012d66:	f380 8811 	msr	BASEPRI, r0
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	f3bf 8f6f 	isb	sy
 8012d72:	b662      	cpsie	i
 8012d74:	f7fe fea4 	bl	8011ac0 <vTaskSwitchContext>
 8012d78:	f04f 0000 	mov.w	r0, #0
 8012d7c:	f380 8811 	msr	BASEPRI, r0
 8012d80:	bc09      	pop	{r0, r3}
 8012d82:	6819      	ldr	r1, [r3, #0]
 8012d84:	6808      	ldr	r0, [r1, #0]
 8012d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8a:	f01e 0f10 	tst.w	lr, #16
 8012d8e:	bf08      	it	eq
 8012d90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d94:	f380 8809 	msr	PSP, r0
 8012d98:	f3bf 8f6f 	isb	sy
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop

08012da0 <pxCurrentTCBConst>:
 8012da0:	20003a40 	.word	0x20003a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012da4:	bf00      	nop
 8012da6:	bf00      	nop

08012da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
	__asm volatile
 8012dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db2:	b672      	cpsid	i
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	b662      	cpsie	i
 8012dc2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012dc4:	f7fe fdc2 	bl	801194c <xTaskIncrementTick>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d003      	beq.n	8012dd6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012dce:	4b06      	ldr	r3, [pc, #24]	; (8012de8 <SysTick_Handler+0x40>)
 8012dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012de0:	bf00      	nop
 8012de2:	3708      	adds	r7, #8
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	e000ed04 	.word	0xe000ed04

08012dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012dec:	b480      	push	{r7}
 8012dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012df0:	4b0b      	ldr	r3, [pc, #44]	; (8012e20 <vPortSetupTimerInterrupt+0x34>)
 8012df2:	2200      	movs	r2, #0
 8012df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012df6:	4b0b      	ldr	r3, [pc, #44]	; (8012e24 <vPortSetupTimerInterrupt+0x38>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012dfc:	4b0a      	ldr	r3, [pc, #40]	; (8012e28 <vPortSetupTimerInterrupt+0x3c>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a0a      	ldr	r2, [pc, #40]	; (8012e2c <vPortSetupTimerInterrupt+0x40>)
 8012e02:	fba2 2303 	umull	r2, r3, r2, r3
 8012e06:	099b      	lsrs	r3, r3, #6
 8012e08:	4a09      	ldr	r2, [pc, #36]	; (8012e30 <vPortSetupTimerInterrupt+0x44>)
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012e0e:	4b04      	ldr	r3, [pc, #16]	; (8012e20 <vPortSetupTimerInterrupt+0x34>)
 8012e10:	2207      	movs	r2, #7
 8012e12:	601a      	str	r2, [r3, #0]
}
 8012e14:	bf00      	nop
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	e000e010 	.word	0xe000e010
 8012e24:	e000e018 	.word	0xe000e018
 8012e28:	20000198 	.word	0x20000198
 8012e2c:	10624dd3 	.word	0x10624dd3
 8012e30:	e000e014 	.word	0xe000e014

08012e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012e44 <vPortEnableVFP+0x10>
 8012e38:	6801      	ldr	r1, [r0, #0]
 8012e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012e3e:	6001      	str	r1, [r0, #0]
 8012e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012e42:	bf00      	nop
 8012e44:	e000ed88 	.word	0xe000ed88

08012e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012e4e:	f3ef 8305 	mrs	r3, IPSR
 8012e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b0f      	cmp	r3, #15
 8012e58:	d915      	bls.n	8012e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012e5a:	4a18      	ldr	r2, [pc, #96]	; (8012ebc <vPortValidateInterruptPriority+0x74>)
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	4413      	add	r3, r2
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012e64:	4b16      	ldr	r3, [pc, #88]	; (8012ec0 <vPortValidateInterruptPriority+0x78>)
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	7afa      	ldrb	r2, [r7, #11]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d20b      	bcs.n	8012e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e72:	b672      	cpsid	i
 8012e74:	f383 8811 	msr	BASEPRI, r3
 8012e78:	f3bf 8f6f 	isb	sy
 8012e7c:	f3bf 8f4f 	dsb	sy
 8012e80:	b662      	cpsie	i
 8012e82:	607b      	str	r3, [r7, #4]
 8012e84:	e7fe      	b.n	8012e84 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e86:	4b0f      	ldr	r3, [pc, #60]	; (8012ec4 <vPortValidateInterruptPriority+0x7c>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012e8e:	4b0e      	ldr	r3, [pc, #56]	; (8012ec8 <vPortValidateInterruptPriority+0x80>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d90b      	bls.n	8012eae <vPortValidateInterruptPriority+0x66>
 8012e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e9a:	b672      	cpsid	i
 8012e9c:	f383 8811 	msr	BASEPRI, r3
 8012ea0:	f3bf 8f6f 	isb	sy
 8012ea4:	f3bf 8f4f 	dsb	sy
 8012ea8:	b662      	cpsie	i
 8012eaa:	603b      	str	r3, [r7, #0]
 8012eac:	e7fe      	b.n	8012eac <vPortValidateInterruptPriority+0x64>
	}
 8012eae:	bf00      	nop
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr
 8012eba:	bf00      	nop
 8012ebc:	e000e3f0 	.word	0xe000e3f0
 8012ec0:	2000406c 	.word	0x2000406c
 8012ec4:	e000ed0c 	.word	0xe000ed0c
 8012ec8:	20004070 	.word	0x20004070

08012ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b08a      	sub	sp, #40	; 0x28
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012ed8:	f7fe fc7c 	bl	80117d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012edc:	4b5a      	ldr	r3, [pc, #360]	; (8013048 <pvPortMalloc+0x17c>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d101      	bne.n	8012ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012ee4:	f000 f916 	bl	8013114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012ee8:	4b58      	ldr	r3, [pc, #352]	; (801304c <pvPortMalloc+0x180>)
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	4013      	ands	r3, r2
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	f040 8090 	bne.w	8013016 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d01e      	beq.n	8012f3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012efc:	2208      	movs	r2, #8
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4413      	add	r3, r2
 8012f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f003 0307 	and.w	r3, r3, #7
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d015      	beq.n	8012f3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f023 0307 	bic.w	r3, r3, #7
 8012f14:	3308      	adds	r3, #8
 8012f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f003 0307 	and.w	r3, r3, #7
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d00b      	beq.n	8012f3a <pvPortMalloc+0x6e>
 8012f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f26:	b672      	cpsid	i
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	b662      	cpsie	i
 8012f36:	617b      	str	r3, [r7, #20]
 8012f38:	e7fe      	b.n	8012f38 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d06a      	beq.n	8013016 <pvPortMalloc+0x14a>
 8012f40:	4b43      	ldr	r3, [pc, #268]	; (8013050 <pvPortMalloc+0x184>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	687a      	ldr	r2, [r7, #4]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d865      	bhi.n	8013016 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012f4a:	4b42      	ldr	r3, [pc, #264]	; (8013054 <pvPortMalloc+0x188>)
 8012f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012f4e:	4b41      	ldr	r3, [pc, #260]	; (8013054 <pvPortMalloc+0x188>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f54:	e004      	b.n	8012f60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	687a      	ldr	r2, [r7, #4]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d903      	bls.n	8012f72 <pvPortMalloc+0xa6>
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d1f1      	bne.n	8012f56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012f72:	4b35      	ldr	r3, [pc, #212]	; (8013048 <pvPortMalloc+0x17c>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d04c      	beq.n	8013016 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f7c:	6a3b      	ldr	r3, [r7, #32]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2208      	movs	r2, #8
 8012f82:	4413      	add	r3, r2
 8012f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	6a3b      	ldr	r3, [r7, #32]
 8012f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f90:	685a      	ldr	r2, [r3, #4]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	1ad2      	subs	r2, r2, r3
 8012f96:	2308      	movs	r3, #8
 8012f98:	005b      	lsls	r3, r3, #1
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d920      	bls.n	8012fe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	f003 0307 	and.w	r3, r3, #7
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00b      	beq.n	8012fc8 <pvPortMalloc+0xfc>
 8012fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb4:	b672      	cpsid	i
 8012fb6:	f383 8811 	msr	BASEPRI, r3
 8012fba:	f3bf 8f6f 	isb	sy
 8012fbe:	f3bf 8f4f 	dsb	sy
 8012fc2:	b662      	cpsie	i
 8012fc4:	613b      	str	r3, [r7, #16]
 8012fc6:	e7fe      	b.n	8012fc6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fca:	685a      	ldr	r2, [r3, #4]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	1ad2      	subs	r2, r2, r3
 8012fd0:	69bb      	ldr	r3, [r7, #24]
 8012fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012fda:	69b8      	ldr	r0, [r7, #24]
 8012fdc:	f000 f8fe 	bl	80131dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012fe0:	4b1b      	ldr	r3, [pc, #108]	; (8013050 <pvPortMalloc+0x184>)
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	4a19      	ldr	r2, [pc, #100]	; (8013050 <pvPortMalloc+0x184>)
 8012fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012fee:	4b18      	ldr	r3, [pc, #96]	; (8013050 <pvPortMalloc+0x184>)
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	4b19      	ldr	r3, [pc, #100]	; (8013058 <pvPortMalloc+0x18c>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d203      	bcs.n	8013002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ffa:	4b15      	ldr	r3, [pc, #84]	; (8013050 <pvPortMalloc+0x184>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	4a16      	ldr	r2, [pc, #88]	; (8013058 <pvPortMalloc+0x18c>)
 8013000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013004:	685a      	ldr	r2, [r3, #4]
 8013006:	4b11      	ldr	r3, [pc, #68]	; (801304c <pvPortMalloc+0x180>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	431a      	orrs	r2, r3
 801300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013012:	2200      	movs	r2, #0
 8013014:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013016:	f7fe fbeb 	bl	80117f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801301a:	69fb      	ldr	r3, [r7, #28]
 801301c:	f003 0307 	and.w	r3, r3, #7
 8013020:	2b00      	cmp	r3, #0
 8013022:	d00b      	beq.n	801303c <pvPortMalloc+0x170>
 8013024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013028:	b672      	cpsid	i
 801302a:	f383 8811 	msr	BASEPRI, r3
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	b662      	cpsie	i
 8013038:	60fb      	str	r3, [r7, #12]
 801303a:	e7fe      	b.n	801303a <pvPortMalloc+0x16e>
	return pvReturn;
 801303c:	69fb      	ldr	r3, [r7, #28]
}
 801303e:	4618      	mov	r0, r3
 8013040:	3728      	adds	r7, #40	; 0x28
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	20028a6c 	.word	0x20028a6c
 801304c:	20028a78 	.word	0x20028a78
 8013050:	20028a70 	.word	0x20028a70
 8013054:	20028a64 	.word	0x20028a64
 8013058:	20028a74 	.word	0x20028a74

0801305c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b086      	sub	sp, #24
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d04a      	beq.n	8013104 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801306e:	2308      	movs	r3, #8
 8013070:	425b      	negs	r3, r3
 8013072:	697a      	ldr	r2, [r7, #20]
 8013074:	4413      	add	r3, r2
 8013076:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	685a      	ldr	r2, [r3, #4]
 8013080:	4b22      	ldr	r3, [pc, #136]	; (801310c <vPortFree+0xb0>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	4013      	ands	r3, r2
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10b      	bne.n	80130a2 <vPortFree+0x46>
 801308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801308e:	b672      	cpsid	i
 8013090:	f383 8811 	msr	BASEPRI, r3
 8013094:	f3bf 8f6f 	isb	sy
 8013098:	f3bf 8f4f 	dsb	sy
 801309c:	b662      	cpsie	i
 801309e:	60fb      	str	r3, [r7, #12]
 80130a0:	e7fe      	b.n	80130a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d00b      	beq.n	80130c2 <vPortFree+0x66>
 80130aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ae:	b672      	cpsid	i
 80130b0:	f383 8811 	msr	BASEPRI, r3
 80130b4:	f3bf 8f6f 	isb	sy
 80130b8:	f3bf 8f4f 	dsb	sy
 80130bc:	b662      	cpsie	i
 80130be:	60bb      	str	r3, [r7, #8]
 80130c0:	e7fe      	b.n	80130c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	685a      	ldr	r2, [r3, #4]
 80130c6:	4b11      	ldr	r3, [pc, #68]	; (801310c <vPortFree+0xb0>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	4013      	ands	r3, r2
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d019      	beq.n	8013104 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d115      	bne.n	8013104 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	685a      	ldr	r2, [r3, #4]
 80130dc:	4b0b      	ldr	r3, [pc, #44]	; (801310c <vPortFree+0xb0>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	43db      	mvns	r3, r3
 80130e2:	401a      	ands	r2, r3
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80130e8:	f7fe fb74 	bl	80117d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	685a      	ldr	r2, [r3, #4]
 80130f0:	4b07      	ldr	r3, [pc, #28]	; (8013110 <vPortFree+0xb4>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4413      	add	r3, r2
 80130f6:	4a06      	ldr	r2, [pc, #24]	; (8013110 <vPortFree+0xb4>)
 80130f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80130fa:	6938      	ldr	r0, [r7, #16]
 80130fc:	f000 f86e 	bl	80131dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013100:	f7fe fb76 	bl	80117f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013104:	bf00      	nop
 8013106:	3718      	adds	r7, #24
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	20028a78 	.word	0x20028a78
 8013110:	20028a70 	.word	0x20028a70

08013114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013114:	b480      	push	{r7}
 8013116:	b085      	sub	sp, #20
 8013118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801311a:	4b29      	ldr	r3, [pc, #164]	; (80131c0 <prvHeapInit+0xac>)
 801311c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801311e:	4b29      	ldr	r3, [pc, #164]	; (80131c4 <prvHeapInit+0xb0>)
 8013120:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	f003 0307 	and.w	r3, r3, #7
 8013128:	2b00      	cmp	r3, #0
 801312a:	d00c      	beq.n	8013146 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	3307      	adds	r3, #7
 8013130:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f023 0307 	bic.w	r3, r3, #7
 8013138:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801313a:	68ba      	ldr	r2, [r7, #8]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	1ad3      	subs	r3, r2, r3
 8013140:	4a20      	ldr	r2, [pc, #128]	; (80131c4 <prvHeapInit+0xb0>)
 8013142:	4413      	add	r3, r2
 8013144:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801314a:	4a1f      	ldr	r2, [pc, #124]	; (80131c8 <prvHeapInit+0xb4>)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013150:	4b1d      	ldr	r3, [pc, #116]	; (80131c8 <prvHeapInit+0xb4>)
 8013152:	2200      	movs	r2, #0
 8013154:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	4413      	add	r3, r2
 801315c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801315e:	2208      	movs	r2, #8
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	1a9b      	subs	r3, r3, r2
 8013164:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f023 0307 	bic.w	r3, r3, #7
 801316c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	4a16      	ldr	r2, [pc, #88]	; (80131cc <prvHeapInit+0xb8>)
 8013172:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013174:	4b15      	ldr	r3, [pc, #84]	; (80131cc <prvHeapInit+0xb8>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2200      	movs	r2, #0
 801317a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801317c:	4b13      	ldr	r3, [pc, #76]	; (80131cc <prvHeapInit+0xb8>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	2200      	movs	r2, #0
 8013182:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	68fa      	ldr	r2, [r7, #12]
 801318c:	1ad2      	subs	r2, r2, r3
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013192:	4b0e      	ldr	r3, [pc, #56]	; (80131cc <prvHeapInit+0xb8>)
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	4a0c      	ldr	r2, [pc, #48]	; (80131d0 <prvHeapInit+0xbc>)
 80131a0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	4a0b      	ldr	r2, [pc, #44]	; (80131d4 <prvHeapInit+0xc0>)
 80131a8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80131aa:	4b0b      	ldr	r3, [pc, #44]	; (80131d8 <prvHeapInit+0xc4>)
 80131ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80131b0:	601a      	str	r2, [r3, #0]
}
 80131b2:	bf00      	nop
 80131b4:	3714      	adds	r7, #20
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr
 80131be:	bf00      	nop
 80131c0:	000249f0 	.word	0x000249f0
 80131c4:	20004074 	.word	0x20004074
 80131c8:	20028a64 	.word	0x20028a64
 80131cc:	20028a6c 	.word	0x20028a6c
 80131d0:	20028a74 	.word	0x20028a74
 80131d4:	20028a70 	.word	0x20028a70
 80131d8:	20028a78 	.word	0x20028a78

080131dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80131e4:	4b28      	ldr	r3, [pc, #160]	; (8013288 <prvInsertBlockIntoFreeList+0xac>)
 80131e6:	60fb      	str	r3, [r7, #12]
 80131e8:	e002      	b.n	80131f0 <prvInsertBlockIntoFreeList+0x14>
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	60fb      	str	r3, [r7, #12]
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d8f7      	bhi.n	80131ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	68ba      	ldr	r2, [r7, #8]
 8013204:	4413      	add	r3, r2
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	429a      	cmp	r2, r3
 801320a:	d108      	bne.n	801321e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	685a      	ldr	r2, [r3, #4]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	441a      	add	r2, r3
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	68ba      	ldr	r2, [r7, #8]
 8013228:	441a      	add	r2, r3
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	429a      	cmp	r2, r3
 8013230:	d118      	bne.n	8013264 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681a      	ldr	r2, [r3, #0]
 8013236:	4b15      	ldr	r3, [pc, #84]	; (801328c <prvInsertBlockIntoFreeList+0xb0>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	429a      	cmp	r2, r3
 801323c:	d00d      	beq.n	801325a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	685a      	ldr	r2, [r3, #4]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	685b      	ldr	r3, [r3, #4]
 8013248:	441a      	add	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	601a      	str	r2, [r3, #0]
 8013258:	e008      	b.n	801326c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801325a:	4b0c      	ldr	r3, [pc, #48]	; (801328c <prvInsertBlockIntoFreeList+0xb0>)
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	601a      	str	r2, [r3, #0]
 8013262:	e003      	b.n	801326c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681a      	ldr	r2, [r3, #0]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801326c:	68fa      	ldr	r2, [r7, #12]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	429a      	cmp	r2, r3
 8013272:	d002      	beq.n	801327a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801327a:	bf00      	nop
 801327c:	3714      	adds	r7, #20
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr
 8013286:	bf00      	nop
 8013288:	20028a64 	.word	0x20028a64
 801328c:	20028a6c 	.word	0x20028a6c

08013290 <__errno>:
 8013290:	4b01      	ldr	r3, [pc, #4]	; (8013298 <__errno+0x8>)
 8013292:	6818      	ldr	r0, [r3, #0]
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	200001a8 	.word	0x200001a8

0801329c <__libc_init_array>:
 801329c:	b570      	push	{r4, r5, r6, lr}
 801329e:	4e0d      	ldr	r6, [pc, #52]	; (80132d4 <__libc_init_array+0x38>)
 80132a0:	4c0d      	ldr	r4, [pc, #52]	; (80132d8 <__libc_init_array+0x3c>)
 80132a2:	1ba4      	subs	r4, r4, r6
 80132a4:	10a4      	asrs	r4, r4, #2
 80132a6:	2500      	movs	r5, #0
 80132a8:	42a5      	cmp	r5, r4
 80132aa:	d109      	bne.n	80132c0 <__libc_init_array+0x24>
 80132ac:	4e0b      	ldr	r6, [pc, #44]	; (80132dc <__libc_init_array+0x40>)
 80132ae:	4c0c      	ldr	r4, [pc, #48]	; (80132e0 <__libc_init_array+0x44>)
 80132b0:	f004 f936 	bl	8017520 <_init>
 80132b4:	1ba4      	subs	r4, r4, r6
 80132b6:	10a4      	asrs	r4, r4, #2
 80132b8:	2500      	movs	r5, #0
 80132ba:	42a5      	cmp	r5, r4
 80132bc:	d105      	bne.n	80132ca <__libc_init_array+0x2e>
 80132be:	bd70      	pop	{r4, r5, r6, pc}
 80132c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80132c4:	4798      	blx	r3
 80132c6:	3501      	adds	r5, #1
 80132c8:	e7ee      	b.n	80132a8 <__libc_init_array+0xc>
 80132ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80132ce:	4798      	blx	r3
 80132d0:	3501      	adds	r5, #1
 80132d2:	e7f2      	b.n	80132ba <__libc_init_array+0x1e>
 80132d4:	08018ac0 	.word	0x08018ac0
 80132d8:	08018ac0 	.word	0x08018ac0
 80132dc:	08018ac0 	.word	0x08018ac0
 80132e0:	08018ac4 	.word	0x08018ac4

080132e4 <memcpy>:
 80132e4:	b510      	push	{r4, lr}
 80132e6:	1e43      	subs	r3, r0, #1
 80132e8:	440a      	add	r2, r1
 80132ea:	4291      	cmp	r1, r2
 80132ec:	d100      	bne.n	80132f0 <memcpy+0xc>
 80132ee:	bd10      	pop	{r4, pc}
 80132f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132f8:	e7f7      	b.n	80132ea <memcpy+0x6>

080132fa <memset>:
 80132fa:	4402      	add	r2, r0
 80132fc:	4603      	mov	r3, r0
 80132fe:	4293      	cmp	r3, r2
 8013300:	d100      	bne.n	8013304 <memset+0xa>
 8013302:	4770      	bx	lr
 8013304:	f803 1b01 	strb.w	r1, [r3], #1
 8013308:	e7f9      	b.n	80132fe <memset+0x4>

0801330a <__cvt>:
 801330a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801330c:	ed2d 8b02 	vpush	{d8}
 8013310:	eeb0 8b40 	vmov.f64	d8, d0
 8013314:	b085      	sub	sp, #20
 8013316:	4617      	mov	r7, r2
 8013318:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801331a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801331c:	ee18 2a90 	vmov	r2, s17
 8013320:	f025 0520 	bic.w	r5, r5, #32
 8013324:	2a00      	cmp	r2, #0
 8013326:	bfb6      	itet	lt
 8013328:	222d      	movlt	r2, #45	; 0x2d
 801332a:	2200      	movge	r2, #0
 801332c:	eeb1 8b40 	vneglt.f64	d8, d0
 8013330:	2d46      	cmp	r5, #70	; 0x46
 8013332:	460c      	mov	r4, r1
 8013334:	701a      	strb	r2, [r3, #0]
 8013336:	d004      	beq.n	8013342 <__cvt+0x38>
 8013338:	2d45      	cmp	r5, #69	; 0x45
 801333a:	d100      	bne.n	801333e <__cvt+0x34>
 801333c:	3401      	adds	r4, #1
 801333e:	2102      	movs	r1, #2
 8013340:	e000      	b.n	8013344 <__cvt+0x3a>
 8013342:	2103      	movs	r1, #3
 8013344:	ab03      	add	r3, sp, #12
 8013346:	9301      	str	r3, [sp, #4]
 8013348:	ab02      	add	r3, sp, #8
 801334a:	9300      	str	r3, [sp, #0]
 801334c:	4622      	mov	r2, r4
 801334e:	4633      	mov	r3, r6
 8013350:	eeb0 0b48 	vmov.f64	d0, d8
 8013354:	f001 fd38 	bl	8014dc8 <_dtoa_r>
 8013358:	2d47      	cmp	r5, #71	; 0x47
 801335a:	d101      	bne.n	8013360 <__cvt+0x56>
 801335c:	07fb      	lsls	r3, r7, #31
 801335e:	d51e      	bpl.n	801339e <__cvt+0x94>
 8013360:	2d46      	cmp	r5, #70	; 0x46
 8013362:	eb00 0304 	add.w	r3, r0, r4
 8013366:	d10c      	bne.n	8013382 <__cvt+0x78>
 8013368:	7802      	ldrb	r2, [r0, #0]
 801336a:	2a30      	cmp	r2, #48	; 0x30
 801336c:	d107      	bne.n	801337e <__cvt+0x74>
 801336e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013376:	bf1c      	itt	ne
 8013378:	f1c4 0401 	rsbne	r4, r4, #1
 801337c:	6034      	strne	r4, [r6, #0]
 801337e:	6832      	ldr	r2, [r6, #0]
 8013380:	4413      	add	r3, r2
 8013382:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801338a:	d007      	beq.n	801339c <__cvt+0x92>
 801338c:	2130      	movs	r1, #48	; 0x30
 801338e:	9a03      	ldr	r2, [sp, #12]
 8013390:	429a      	cmp	r2, r3
 8013392:	d204      	bcs.n	801339e <__cvt+0x94>
 8013394:	1c54      	adds	r4, r2, #1
 8013396:	9403      	str	r4, [sp, #12]
 8013398:	7011      	strb	r1, [r2, #0]
 801339a:	e7f8      	b.n	801338e <__cvt+0x84>
 801339c:	9303      	str	r3, [sp, #12]
 801339e:	9b03      	ldr	r3, [sp, #12]
 80133a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80133a2:	1a1b      	subs	r3, r3, r0
 80133a4:	6013      	str	r3, [r2, #0]
 80133a6:	b005      	add	sp, #20
 80133a8:	ecbd 8b02 	vpop	{d8}
 80133ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133ae <__exponent>:
 80133ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133b0:	2900      	cmp	r1, #0
 80133b2:	4604      	mov	r4, r0
 80133b4:	bfba      	itte	lt
 80133b6:	4249      	neglt	r1, r1
 80133b8:	232d      	movlt	r3, #45	; 0x2d
 80133ba:	232b      	movge	r3, #43	; 0x2b
 80133bc:	2909      	cmp	r1, #9
 80133be:	f804 2b02 	strb.w	r2, [r4], #2
 80133c2:	7043      	strb	r3, [r0, #1]
 80133c4:	dd20      	ble.n	8013408 <__exponent+0x5a>
 80133c6:	f10d 0307 	add.w	r3, sp, #7
 80133ca:	461f      	mov	r7, r3
 80133cc:	260a      	movs	r6, #10
 80133ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80133d2:	fb06 1115 	mls	r1, r6, r5, r1
 80133d6:	3130      	adds	r1, #48	; 0x30
 80133d8:	2d09      	cmp	r5, #9
 80133da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80133de:	f103 32ff 	add.w	r2, r3, #4294967295
 80133e2:	4629      	mov	r1, r5
 80133e4:	dc09      	bgt.n	80133fa <__exponent+0x4c>
 80133e6:	3130      	adds	r1, #48	; 0x30
 80133e8:	3b02      	subs	r3, #2
 80133ea:	f802 1c01 	strb.w	r1, [r2, #-1]
 80133ee:	42bb      	cmp	r3, r7
 80133f0:	4622      	mov	r2, r4
 80133f2:	d304      	bcc.n	80133fe <__exponent+0x50>
 80133f4:	1a10      	subs	r0, r2, r0
 80133f6:	b003      	add	sp, #12
 80133f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133fa:	4613      	mov	r3, r2
 80133fc:	e7e7      	b.n	80133ce <__exponent+0x20>
 80133fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013402:	f804 2b01 	strb.w	r2, [r4], #1
 8013406:	e7f2      	b.n	80133ee <__exponent+0x40>
 8013408:	2330      	movs	r3, #48	; 0x30
 801340a:	4419      	add	r1, r3
 801340c:	7083      	strb	r3, [r0, #2]
 801340e:	1d02      	adds	r2, r0, #4
 8013410:	70c1      	strb	r1, [r0, #3]
 8013412:	e7ef      	b.n	80133f4 <__exponent+0x46>
 8013414:	0000      	movs	r0, r0
	...

08013418 <_printf_float>:
 8013418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801341c:	b08d      	sub	sp, #52	; 0x34
 801341e:	460c      	mov	r4, r1
 8013420:	4616      	mov	r6, r2
 8013422:	461f      	mov	r7, r3
 8013424:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013428:	4605      	mov	r5, r0
 801342a:	f002 fe0f 	bl	801604c <_localeconv_r>
 801342e:	f8d0 b000 	ldr.w	fp, [r0]
 8013432:	4658      	mov	r0, fp
 8013434:	f7ec ff04 	bl	8000240 <strlen>
 8013438:	2300      	movs	r3, #0
 801343a:	930a      	str	r3, [sp, #40]	; 0x28
 801343c:	f8d8 3000 	ldr.w	r3, [r8]
 8013440:	9005      	str	r0, [sp, #20]
 8013442:	3307      	adds	r3, #7
 8013444:	f023 0307 	bic.w	r3, r3, #7
 8013448:	f103 0108 	add.w	r1, r3, #8
 801344c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013450:	6822      	ldr	r2, [r4, #0]
 8013452:	f8c8 1000 	str.w	r1, [r8]
 8013456:	e9d3 0100 	ldrd	r0, r1, [r3]
 801345a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801345e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80136e8 <_printf_float+0x2d0>
 8013462:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8013466:	eeb0 6bc0 	vabs.f64	d6, d0
 801346a:	eeb4 6b47 	vcmp.f64	d6, d7
 801346e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013472:	dd24      	ble.n	80134be <_printf_float+0xa6>
 8013474:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347c:	d502      	bpl.n	8013484 <_printf_float+0x6c>
 801347e:	232d      	movs	r3, #45	; 0x2d
 8013480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013484:	499a      	ldr	r1, [pc, #616]	; (80136f0 <_printf_float+0x2d8>)
 8013486:	4b9b      	ldr	r3, [pc, #620]	; (80136f4 <_printf_float+0x2dc>)
 8013488:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801348c:	bf8c      	ite	hi
 801348e:	4688      	movhi	r8, r1
 8013490:	4698      	movls	r8, r3
 8013492:	f022 0204 	bic.w	r2, r2, #4
 8013496:	2303      	movs	r3, #3
 8013498:	6123      	str	r3, [r4, #16]
 801349a:	6022      	str	r2, [r4, #0]
 801349c:	f04f 0a00 	mov.w	sl, #0
 80134a0:	9700      	str	r7, [sp, #0]
 80134a2:	4633      	mov	r3, r6
 80134a4:	aa0b      	add	r2, sp, #44	; 0x2c
 80134a6:	4621      	mov	r1, r4
 80134a8:	4628      	mov	r0, r5
 80134aa:	f000 f9e1 	bl	8013870 <_printf_common>
 80134ae:	3001      	adds	r0, #1
 80134b0:	f040 8089 	bne.w	80135c6 <_printf_float+0x1ae>
 80134b4:	f04f 30ff 	mov.w	r0, #4294967295
 80134b8:	b00d      	add	sp, #52	; 0x34
 80134ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134be:	eeb4 0b40 	vcmp.f64	d0, d0
 80134c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c6:	d702      	bvc.n	80134ce <_printf_float+0xb6>
 80134c8:	498b      	ldr	r1, [pc, #556]	; (80136f8 <_printf_float+0x2e0>)
 80134ca:	4b8c      	ldr	r3, [pc, #560]	; (80136fc <_printf_float+0x2e4>)
 80134cc:	e7dc      	b.n	8013488 <_printf_float+0x70>
 80134ce:	6861      	ldr	r1, [r4, #4]
 80134d0:	1c4b      	adds	r3, r1, #1
 80134d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80134d6:	ab0a      	add	r3, sp, #40	; 0x28
 80134d8:	a809      	add	r0, sp, #36	; 0x24
 80134da:	d13b      	bne.n	8013554 <_printf_float+0x13c>
 80134dc:	2106      	movs	r1, #6
 80134de:	6061      	str	r1, [r4, #4]
 80134e0:	f04f 0c00 	mov.w	ip, #0
 80134e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80134e8:	e9cd 0900 	strd	r0, r9, [sp]
 80134ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80134f0:	6022      	str	r2, [r4, #0]
 80134f2:	6861      	ldr	r1, [r4, #4]
 80134f4:	4628      	mov	r0, r5
 80134f6:	f7ff ff08 	bl	801330a <__cvt>
 80134fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80134fe:	2b47      	cmp	r3, #71	; 0x47
 8013500:	4680      	mov	r8, r0
 8013502:	d109      	bne.n	8013518 <_printf_float+0x100>
 8013504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013506:	1cd8      	adds	r0, r3, #3
 8013508:	db02      	blt.n	8013510 <_printf_float+0xf8>
 801350a:	6862      	ldr	r2, [r4, #4]
 801350c:	4293      	cmp	r3, r2
 801350e:	dd47      	ble.n	80135a0 <_printf_float+0x188>
 8013510:	f1a9 0902 	sub.w	r9, r9, #2
 8013514:	fa5f f989 	uxtb.w	r9, r9
 8013518:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801351c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801351e:	d824      	bhi.n	801356a <_printf_float+0x152>
 8013520:	3901      	subs	r1, #1
 8013522:	464a      	mov	r2, r9
 8013524:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013528:	9109      	str	r1, [sp, #36]	; 0x24
 801352a:	f7ff ff40 	bl	80133ae <__exponent>
 801352e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013530:	1813      	adds	r3, r2, r0
 8013532:	2a01      	cmp	r2, #1
 8013534:	4682      	mov	sl, r0
 8013536:	6123      	str	r3, [r4, #16]
 8013538:	dc02      	bgt.n	8013540 <_printf_float+0x128>
 801353a:	6822      	ldr	r2, [r4, #0]
 801353c:	07d1      	lsls	r1, r2, #31
 801353e:	d501      	bpl.n	8013544 <_printf_float+0x12c>
 8013540:	3301      	adds	r3, #1
 8013542:	6123      	str	r3, [r4, #16]
 8013544:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013548:	2b00      	cmp	r3, #0
 801354a:	d0a9      	beq.n	80134a0 <_printf_float+0x88>
 801354c:	232d      	movs	r3, #45	; 0x2d
 801354e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013552:	e7a5      	b.n	80134a0 <_printf_float+0x88>
 8013554:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8013558:	f000 8178 	beq.w	801384c <_printf_float+0x434>
 801355c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013560:	d1be      	bne.n	80134e0 <_printf_float+0xc8>
 8013562:	2900      	cmp	r1, #0
 8013564:	d1bc      	bne.n	80134e0 <_printf_float+0xc8>
 8013566:	2101      	movs	r1, #1
 8013568:	e7b9      	b.n	80134de <_printf_float+0xc6>
 801356a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801356e:	d119      	bne.n	80135a4 <_printf_float+0x18c>
 8013570:	2900      	cmp	r1, #0
 8013572:	6863      	ldr	r3, [r4, #4]
 8013574:	dd0c      	ble.n	8013590 <_printf_float+0x178>
 8013576:	6121      	str	r1, [r4, #16]
 8013578:	b913      	cbnz	r3, 8013580 <_printf_float+0x168>
 801357a:	6822      	ldr	r2, [r4, #0]
 801357c:	07d2      	lsls	r2, r2, #31
 801357e:	d502      	bpl.n	8013586 <_printf_float+0x16e>
 8013580:	3301      	adds	r3, #1
 8013582:	440b      	add	r3, r1
 8013584:	6123      	str	r3, [r4, #16]
 8013586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013588:	65a3      	str	r3, [r4, #88]	; 0x58
 801358a:	f04f 0a00 	mov.w	sl, #0
 801358e:	e7d9      	b.n	8013544 <_printf_float+0x12c>
 8013590:	b913      	cbnz	r3, 8013598 <_printf_float+0x180>
 8013592:	6822      	ldr	r2, [r4, #0]
 8013594:	07d0      	lsls	r0, r2, #31
 8013596:	d501      	bpl.n	801359c <_printf_float+0x184>
 8013598:	3302      	adds	r3, #2
 801359a:	e7f3      	b.n	8013584 <_printf_float+0x16c>
 801359c:	2301      	movs	r3, #1
 801359e:	e7f1      	b.n	8013584 <_printf_float+0x16c>
 80135a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80135a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80135a8:	4293      	cmp	r3, r2
 80135aa:	db05      	blt.n	80135b8 <_printf_float+0x1a0>
 80135ac:	6822      	ldr	r2, [r4, #0]
 80135ae:	6123      	str	r3, [r4, #16]
 80135b0:	07d1      	lsls	r1, r2, #31
 80135b2:	d5e8      	bpl.n	8013586 <_printf_float+0x16e>
 80135b4:	3301      	adds	r3, #1
 80135b6:	e7e5      	b.n	8013584 <_printf_float+0x16c>
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	bfd4      	ite	le
 80135bc:	f1c3 0302 	rsble	r3, r3, #2
 80135c0:	2301      	movgt	r3, #1
 80135c2:	4413      	add	r3, r2
 80135c4:	e7de      	b.n	8013584 <_printf_float+0x16c>
 80135c6:	6823      	ldr	r3, [r4, #0]
 80135c8:	055a      	lsls	r2, r3, #21
 80135ca:	d407      	bmi.n	80135dc <_printf_float+0x1c4>
 80135cc:	6923      	ldr	r3, [r4, #16]
 80135ce:	4642      	mov	r2, r8
 80135d0:	4631      	mov	r1, r6
 80135d2:	4628      	mov	r0, r5
 80135d4:	47b8      	blx	r7
 80135d6:	3001      	adds	r0, #1
 80135d8:	d12a      	bne.n	8013630 <_printf_float+0x218>
 80135da:	e76b      	b.n	80134b4 <_printf_float+0x9c>
 80135dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80135e0:	f240 80de 	bls.w	80137a0 <_printf_float+0x388>
 80135e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80135e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80135ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f0:	d133      	bne.n	801365a <_printf_float+0x242>
 80135f2:	2301      	movs	r3, #1
 80135f4:	4a42      	ldr	r2, [pc, #264]	; (8013700 <_printf_float+0x2e8>)
 80135f6:	4631      	mov	r1, r6
 80135f8:	4628      	mov	r0, r5
 80135fa:	47b8      	blx	r7
 80135fc:	3001      	adds	r0, #1
 80135fe:	f43f af59 	beq.w	80134b4 <_printf_float+0x9c>
 8013602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013606:	429a      	cmp	r2, r3
 8013608:	db02      	blt.n	8013610 <_printf_float+0x1f8>
 801360a:	6823      	ldr	r3, [r4, #0]
 801360c:	07d8      	lsls	r0, r3, #31
 801360e:	d50f      	bpl.n	8013630 <_printf_float+0x218>
 8013610:	9b05      	ldr	r3, [sp, #20]
 8013612:	465a      	mov	r2, fp
 8013614:	4631      	mov	r1, r6
 8013616:	4628      	mov	r0, r5
 8013618:	47b8      	blx	r7
 801361a:	3001      	adds	r0, #1
 801361c:	f43f af4a 	beq.w	80134b4 <_printf_float+0x9c>
 8013620:	f04f 0800 	mov.w	r8, #0
 8013624:	f104 091a 	add.w	r9, r4, #26
 8013628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801362a:	3b01      	subs	r3, #1
 801362c:	4543      	cmp	r3, r8
 801362e:	dc09      	bgt.n	8013644 <_printf_float+0x22c>
 8013630:	6823      	ldr	r3, [r4, #0]
 8013632:	079b      	lsls	r3, r3, #30
 8013634:	f100 8105 	bmi.w	8013842 <_printf_float+0x42a>
 8013638:	68e0      	ldr	r0, [r4, #12]
 801363a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801363c:	4298      	cmp	r0, r3
 801363e:	bfb8      	it	lt
 8013640:	4618      	movlt	r0, r3
 8013642:	e739      	b.n	80134b8 <_printf_float+0xa0>
 8013644:	2301      	movs	r3, #1
 8013646:	464a      	mov	r2, r9
 8013648:	4631      	mov	r1, r6
 801364a:	4628      	mov	r0, r5
 801364c:	47b8      	blx	r7
 801364e:	3001      	adds	r0, #1
 8013650:	f43f af30 	beq.w	80134b4 <_printf_float+0x9c>
 8013654:	f108 0801 	add.w	r8, r8, #1
 8013658:	e7e6      	b.n	8013628 <_printf_float+0x210>
 801365a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801365c:	2b00      	cmp	r3, #0
 801365e:	dc2b      	bgt.n	80136b8 <_printf_float+0x2a0>
 8013660:	2301      	movs	r3, #1
 8013662:	4a27      	ldr	r2, [pc, #156]	; (8013700 <_printf_float+0x2e8>)
 8013664:	4631      	mov	r1, r6
 8013666:	4628      	mov	r0, r5
 8013668:	47b8      	blx	r7
 801366a:	3001      	adds	r0, #1
 801366c:	f43f af22 	beq.w	80134b4 <_printf_float+0x9c>
 8013670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013672:	b923      	cbnz	r3, 801367e <_printf_float+0x266>
 8013674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013676:	b913      	cbnz	r3, 801367e <_printf_float+0x266>
 8013678:	6823      	ldr	r3, [r4, #0]
 801367a:	07d9      	lsls	r1, r3, #31
 801367c:	d5d8      	bpl.n	8013630 <_printf_float+0x218>
 801367e:	9b05      	ldr	r3, [sp, #20]
 8013680:	465a      	mov	r2, fp
 8013682:	4631      	mov	r1, r6
 8013684:	4628      	mov	r0, r5
 8013686:	47b8      	blx	r7
 8013688:	3001      	adds	r0, #1
 801368a:	f43f af13 	beq.w	80134b4 <_printf_float+0x9c>
 801368e:	f04f 0900 	mov.w	r9, #0
 8013692:	f104 0a1a 	add.w	sl, r4, #26
 8013696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013698:	425b      	negs	r3, r3
 801369a:	454b      	cmp	r3, r9
 801369c:	dc01      	bgt.n	80136a2 <_printf_float+0x28a>
 801369e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136a0:	e795      	b.n	80135ce <_printf_float+0x1b6>
 80136a2:	2301      	movs	r3, #1
 80136a4:	4652      	mov	r2, sl
 80136a6:	4631      	mov	r1, r6
 80136a8:	4628      	mov	r0, r5
 80136aa:	47b8      	blx	r7
 80136ac:	3001      	adds	r0, #1
 80136ae:	f43f af01 	beq.w	80134b4 <_printf_float+0x9c>
 80136b2:	f109 0901 	add.w	r9, r9, #1
 80136b6:	e7ee      	b.n	8013696 <_printf_float+0x27e>
 80136b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136bc:	429a      	cmp	r2, r3
 80136be:	bfa8      	it	ge
 80136c0:	461a      	movge	r2, r3
 80136c2:	2a00      	cmp	r2, #0
 80136c4:	4691      	mov	r9, r2
 80136c6:	dd07      	ble.n	80136d8 <_printf_float+0x2c0>
 80136c8:	4613      	mov	r3, r2
 80136ca:	4631      	mov	r1, r6
 80136cc:	4642      	mov	r2, r8
 80136ce:	4628      	mov	r0, r5
 80136d0:	47b8      	blx	r7
 80136d2:	3001      	adds	r0, #1
 80136d4:	f43f aeee 	beq.w	80134b4 <_printf_float+0x9c>
 80136d8:	f104 031a 	add.w	r3, r4, #26
 80136dc:	f04f 0a00 	mov.w	sl, #0
 80136e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136e4:	9307      	str	r3, [sp, #28]
 80136e6:	e017      	b.n	8013718 <_printf_float+0x300>
 80136e8:	ffffffff 	.word	0xffffffff
 80136ec:	7fefffff 	.word	0x7fefffff
 80136f0:	0801879c 	.word	0x0801879c
 80136f4:	08018798 	.word	0x08018798
 80136f8:	080187a4 	.word	0x080187a4
 80136fc:	080187a0 	.word	0x080187a0
 8013700:	080187a8 	.word	0x080187a8
 8013704:	2301      	movs	r3, #1
 8013706:	9a07      	ldr	r2, [sp, #28]
 8013708:	4631      	mov	r1, r6
 801370a:	4628      	mov	r0, r5
 801370c:	47b8      	blx	r7
 801370e:	3001      	adds	r0, #1
 8013710:	f43f aed0 	beq.w	80134b4 <_printf_float+0x9c>
 8013714:	f10a 0a01 	add.w	sl, sl, #1
 8013718:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801371a:	9306      	str	r3, [sp, #24]
 801371c:	eba3 0309 	sub.w	r3, r3, r9
 8013720:	4553      	cmp	r3, sl
 8013722:	dcef      	bgt.n	8013704 <_printf_float+0x2ec>
 8013724:	9b06      	ldr	r3, [sp, #24]
 8013726:	4498      	add	r8, r3
 8013728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801372c:	429a      	cmp	r2, r3
 801372e:	db15      	blt.n	801375c <_printf_float+0x344>
 8013730:	6823      	ldr	r3, [r4, #0]
 8013732:	07da      	lsls	r2, r3, #31
 8013734:	d412      	bmi.n	801375c <_printf_float+0x344>
 8013736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013738:	9a06      	ldr	r2, [sp, #24]
 801373a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801373c:	1a9a      	subs	r2, r3, r2
 801373e:	eba3 0a01 	sub.w	sl, r3, r1
 8013742:	4592      	cmp	sl, r2
 8013744:	bfa8      	it	ge
 8013746:	4692      	movge	sl, r2
 8013748:	f1ba 0f00 	cmp.w	sl, #0
 801374c:	dc0e      	bgt.n	801376c <_printf_float+0x354>
 801374e:	f04f 0800 	mov.w	r8, #0
 8013752:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013756:	f104 091a 	add.w	r9, r4, #26
 801375a:	e019      	b.n	8013790 <_printf_float+0x378>
 801375c:	9b05      	ldr	r3, [sp, #20]
 801375e:	465a      	mov	r2, fp
 8013760:	4631      	mov	r1, r6
 8013762:	4628      	mov	r0, r5
 8013764:	47b8      	blx	r7
 8013766:	3001      	adds	r0, #1
 8013768:	d1e5      	bne.n	8013736 <_printf_float+0x31e>
 801376a:	e6a3      	b.n	80134b4 <_printf_float+0x9c>
 801376c:	4653      	mov	r3, sl
 801376e:	4642      	mov	r2, r8
 8013770:	4631      	mov	r1, r6
 8013772:	4628      	mov	r0, r5
 8013774:	47b8      	blx	r7
 8013776:	3001      	adds	r0, #1
 8013778:	d1e9      	bne.n	801374e <_printf_float+0x336>
 801377a:	e69b      	b.n	80134b4 <_printf_float+0x9c>
 801377c:	2301      	movs	r3, #1
 801377e:	464a      	mov	r2, r9
 8013780:	4631      	mov	r1, r6
 8013782:	4628      	mov	r0, r5
 8013784:	47b8      	blx	r7
 8013786:	3001      	adds	r0, #1
 8013788:	f43f ae94 	beq.w	80134b4 <_printf_float+0x9c>
 801378c:	f108 0801 	add.w	r8, r8, #1
 8013790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013794:	1a9b      	subs	r3, r3, r2
 8013796:	eba3 030a 	sub.w	r3, r3, sl
 801379a:	4543      	cmp	r3, r8
 801379c:	dcee      	bgt.n	801377c <_printf_float+0x364>
 801379e:	e747      	b.n	8013630 <_printf_float+0x218>
 80137a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137a2:	2a01      	cmp	r2, #1
 80137a4:	dc01      	bgt.n	80137aa <_printf_float+0x392>
 80137a6:	07db      	lsls	r3, r3, #31
 80137a8:	d539      	bpl.n	801381e <_printf_float+0x406>
 80137aa:	2301      	movs	r3, #1
 80137ac:	4642      	mov	r2, r8
 80137ae:	4631      	mov	r1, r6
 80137b0:	4628      	mov	r0, r5
 80137b2:	47b8      	blx	r7
 80137b4:	3001      	adds	r0, #1
 80137b6:	f43f ae7d 	beq.w	80134b4 <_printf_float+0x9c>
 80137ba:	9b05      	ldr	r3, [sp, #20]
 80137bc:	465a      	mov	r2, fp
 80137be:	4631      	mov	r1, r6
 80137c0:	4628      	mov	r0, r5
 80137c2:	47b8      	blx	r7
 80137c4:	3001      	adds	r0, #1
 80137c6:	f108 0801 	add.w	r8, r8, #1
 80137ca:	f43f ae73 	beq.w	80134b4 <_printf_float+0x9c>
 80137ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80137d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80137d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80137e0:	d018      	beq.n	8013814 <_printf_float+0x3fc>
 80137e2:	4642      	mov	r2, r8
 80137e4:	4631      	mov	r1, r6
 80137e6:	4628      	mov	r0, r5
 80137e8:	47b8      	blx	r7
 80137ea:	3001      	adds	r0, #1
 80137ec:	d10e      	bne.n	801380c <_printf_float+0x3f4>
 80137ee:	e661      	b.n	80134b4 <_printf_float+0x9c>
 80137f0:	2301      	movs	r3, #1
 80137f2:	464a      	mov	r2, r9
 80137f4:	4631      	mov	r1, r6
 80137f6:	4628      	mov	r0, r5
 80137f8:	47b8      	blx	r7
 80137fa:	3001      	adds	r0, #1
 80137fc:	f43f ae5a 	beq.w	80134b4 <_printf_float+0x9c>
 8013800:	f108 0801 	add.w	r8, r8, #1
 8013804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013806:	3b01      	subs	r3, #1
 8013808:	4543      	cmp	r3, r8
 801380a:	dcf1      	bgt.n	80137f0 <_printf_float+0x3d8>
 801380c:	4653      	mov	r3, sl
 801380e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013812:	e6dd      	b.n	80135d0 <_printf_float+0x1b8>
 8013814:	f04f 0800 	mov.w	r8, #0
 8013818:	f104 091a 	add.w	r9, r4, #26
 801381c:	e7f2      	b.n	8013804 <_printf_float+0x3ec>
 801381e:	2301      	movs	r3, #1
 8013820:	e7df      	b.n	80137e2 <_printf_float+0x3ca>
 8013822:	2301      	movs	r3, #1
 8013824:	464a      	mov	r2, r9
 8013826:	4631      	mov	r1, r6
 8013828:	4628      	mov	r0, r5
 801382a:	47b8      	blx	r7
 801382c:	3001      	adds	r0, #1
 801382e:	f43f ae41 	beq.w	80134b4 <_printf_float+0x9c>
 8013832:	f108 0801 	add.w	r8, r8, #1
 8013836:	68e3      	ldr	r3, [r4, #12]
 8013838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801383a:	1a9b      	subs	r3, r3, r2
 801383c:	4543      	cmp	r3, r8
 801383e:	dcf0      	bgt.n	8013822 <_printf_float+0x40a>
 8013840:	e6fa      	b.n	8013638 <_printf_float+0x220>
 8013842:	f04f 0800 	mov.w	r8, #0
 8013846:	f104 0919 	add.w	r9, r4, #25
 801384a:	e7f4      	b.n	8013836 <_printf_float+0x41e>
 801384c:	2900      	cmp	r1, #0
 801384e:	f43f ae8a 	beq.w	8013566 <_printf_float+0x14e>
 8013852:	f04f 0c00 	mov.w	ip, #0
 8013856:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801385a:	e9cd 0900 	strd	r0, r9, [sp]
 801385e:	6022      	str	r2, [r4, #0]
 8013860:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013864:	4628      	mov	r0, r5
 8013866:	f7ff fd50 	bl	801330a <__cvt>
 801386a:	4680      	mov	r8, r0
 801386c:	e64a      	b.n	8013504 <_printf_float+0xec>
 801386e:	bf00      	nop

08013870 <_printf_common>:
 8013870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013874:	4691      	mov	r9, r2
 8013876:	461f      	mov	r7, r3
 8013878:	688a      	ldr	r2, [r1, #8]
 801387a:	690b      	ldr	r3, [r1, #16]
 801387c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013880:	4293      	cmp	r3, r2
 8013882:	bfb8      	it	lt
 8013884:	4613      	movlt	r3, r2
 8013886:	f8c9 3000 	str.w	r3, [r9]
 801388a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801388e:	4606      	mov	r6, r0
 8013890:	460c      	mov	r4, r1
 8013892:	b112      	cbz	r2, 801389a <_printf_common+0x2a>
 8013894:	3301      	adds	r3, #1
 8013896:	f8c9 3000 	str.w	r3, [r9]
 801389a:	6823      	ldr	r3, [r4, #0]
 801389c:	0699      	lsls	r1, r3, #26
 801389e:	bf42      	ittt	mi
 80138a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80138a4:	3302      	addmi	r3, #2
 80138a6:	f8c9 3000 	strmi.w	r3, [r9]
 80138aa:	6825      	ldr	r5, [r4, #0]
 80138ac:	f015 0506 	ands.w	r5, r5, #6
 80138b0:	d107      	bne.n	80138c2 <_printf_common+0x52>
 80138b2:	f104 0a19 	add.w	sl, r4, #25
 80138b6:	68e3      	ldr	r3, [r4, #12]
 80138b8:	f8d9 2000 	ldr.w	r2, [r9]
 80138bc:	1a9b      	subs	r3, r3, r2
 80138be:	42ab      	cmp	r3, r5
 80138c0:	dc28      	bgt.n	8013914 <_printf_common+0xa4>
 80138c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80138c6:	6822      	ldr	r2, [r4, #0]
 80138c8:	3300      	adds	r3, #0
 80138ca:	bf18      	it	ne
 80138cc:	2301      	movne	r3, #1
 80138ce:	0692      	lsls	r2, r2, #26
 80138d0:	d42d      	bmi.n	801392e <_printf_common+0xbe>
 80138d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80138d6:	4639      	mov	r1, r7
 80138d8:	4630      	mov	r0, r6
 80138da:	47c0      	blx	r8
 80138dc:	3001      	adds	r0, #1
 80138de:	d020      	beq.n	8013922 <_printf_common+0xb2>
 80138e0:	6823      	ldr	r3, [r4, #0]
 80138e2:	68e5      	ldr	r5, [r4, #12]
 80138e4:	f8d9 2000 	ldr.w	r2, [r9]
 80138e8:	f003 0306 	and.w	r3, r3, #6
 80138ec:	2b04      	cmp	r3, #4
 80138ee:	bf08      	it	eq
 80138f0:	1aad      	subeq	r5, r5, r2
 80138f2:	68a3      	ldr	r3, [r4, #8]
 80138f4:	6922      	ldr	r2, [r4, #16]
 80138f6:	bf0c      	ite	eq
 80138f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138fc:	2500      	movne	r5, #0
 80138fe:	4293      	cmp	r3, r2
 8013900:	bfc4      	itt	gt
 8013902:	1a9b      	subgt	r3, r3, r2
 8013904:	18ed      	addgt	r5, r5, r3
 8013906:	f04f 0900 	mov.w	r9, #0
 801390a:	341a      	adds	r4, #26
 801390c:	454d      	cmp	r5, r9
 801390e:	d11a      	bne.n	8013946 <_printf_common+0xd6>
 8013910:	2000      	movs	r0, #0
 8013912:	e008      	b.n	8013926 <_printf_common+0xb6>
 8013914:	2301      	movs	r3, #1
 8013916:	4652      	mov	r2, sl
 8013918:	4639      	mov	r1, r7
 801391a:	4630      	mov	r0, r6
 801391c:	47c0      	blx	r8
 801391e:	3001      	adds	r0, #1
 8013920:	d103      	bne.n	801392a <_printf_common+0xba>
 8013922:	f04f 30ff 	mov.w	r0, #4294967295
 8013926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801392a:	3501      	adds	r5, #1
 801392c:	e7c3      	b.n	80138b6 <_printf_common+0x46>
 801392e:	18e1      	adds	r1, r4, r3
 8013930:	1c5a      	adds	r2, r3, #1
 8013932:	2030      	movs	r0, #48	; 0x30
 8013934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013938:	4422      	add	r2, r4
 801393a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801393e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013942:	3302      	adds	r3, #2
 8013944:	e7c5      	b.n	80138d2 <_printf_common+0x62>
 8013946:	2301      	movs	r3, #1
 8013948:	4622      	mov	r2, r4
 801394a:	4639      	mov	r1, r7
 801394c:	4630      	mov	r0, r6
 801394e:	47c0      	blx	r8
 8013950:	3001      	adds	r0, #1
 8013952:	d0e6      	beq.n	8013922 <_printf_common+0xb2>
 8013954:	f109 0901 	add.w	r9, r9, #1
 8013958:	e7d8      	b.n	801390c <_printf_common+0x9c>
	...

0801395c <_printf_i>:
 801395c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013964:	460c      	mov	r4, r1
 8013966:	7e09      	ldrb	r1, [r1, #24]
 8013968:	b085      	sub	sp, #20
 801396a:	296e      	cmp	r1, #110	; 0x6e
 801396c:	4617      	mov	r7, r2
 801396e:	4606      	mov	r6, r0
 8013970:	4698      	mov	r8, r3
 8013972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013974:	f000 80b3 	beq.w	8013ade <_printf_i+0x182>
 8013978:	d822      	bhi.n	80139c0 <_printf_i+0x64>
 801397a:	2963      	cmp	r1, #99	; 0x63
 801397c:	d036      	beq.n	80139ec <_printf_i+0x90>
 801397e:	d80a      	bhi.n	8013996 <_printf_i+0x3a>
 8013980:	2900      	cmp	r1, #0
 8013982:	f000 80b9 	beq.w	8013af8 <_printf_i+0x19c>
 8013986:	2958      	cmp	r1, #88	; 0x58
 8013988:	f000 8083 	beq.w	8013a92 <_printf_i+0x136>
 801398c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013994:	e032      	b.n	80139fc <_printf_i+0xa0>
 8013996:	2964      	cmp	r1, #100	; 0x64
 8013998:	d001      	beq.n	801399e <_printf_i+0x42>
 801399a:	2969      	cmp	r1, #105	; 0x69
 801399c:	d1f6      	bne.n	801398c <_printf_i+0x30>
 801399e:	6820      	ldr	r0, [r4, #0]
 80139a0:	6813      	ldr	r3, [r2, #0]
 80139a2:	0605      	lsls	r5, r0, #24
 80139a4:	f103 0104 	add.w	r1, r3, #4
 80139a8:	d52a      	bpl.n	8013a00 <_printf_i+0xa4>
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	6011      	str	r1, [r2, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	da03      	bge.n	80139ba <_printf_i+0x5e>
 80139b2:	222d      	movs	r2, #45	; 0x2d
 80139b4:	425b      	negs	r3, r3
 80139b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80139ba:	486f      	ldr	r0, [pc, #444]	; (8013b78 <_printf_i+0x21c>)
 80139bc:	220a      	movs	r2, #10
 80139be:	e039      	b.n	8013a34 <_printf_i+0xd8>
 80139c0:	2973      	cmp	r1, #115	; 0x73
 80139c2:	f000 809d 	beq.w	8013b00 <_printf_i+0x1a4>
 80139c6:	d808      	bhi.n	80139da <_printf_i+0x7e>
 80139c8:	296f      	cmp	r1, #111	; 0x6f
 80139ca:	d020      	beq.n	8013a0e <_printf_i+0xb2>
 80139cc:	2970      	cmp	r1, #112	; 0x70
 80139ce:	d1dd      	bne.n	801398c <_printf_i+0x30>
 80139d0:	6823      	ldr	r3, [r4, #0]
 80139d2:	f043 0320 	orr.w	r3, r3, #32
 80139d6:	6023      	str	r3, [r4, #0]
 80139d8:	e003      	b.n	80139e2 <_printf_i+0x86>
 80139da:	2975      	cmp	r1, #117	; 0x75
 80139dc:	d017      	beq.n	8013a0e <_printf_i+0xb2>
 80139de:	2978      	cmp	r1, #120	; 0x78
 80139e0:	d1d4      	bne.n	801398c <_printf_i+0x30>
 80139e2:	2378      	movs	r3, #120	; 0x78
 80139e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80139e8:	4864      	ldr	r0, [pc, #400]	; (8013b7c <_printf_i+0x220>)
 80139ea:	e055      	b.n	8013a98 <_printf_i+0x13c>
 80139ec:	6813      	ldr	r3, [r2, #0]
 80139ee:	1d19      	adds	r1, r3, #4
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	6011      	str	r1, [r2, #0]
 80139f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139fc:	2301      	movs	r3, #1
 80139fe:	e08c      	b.n	8013b1a <_printf_i+0x1be>
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	6011      	str	r1, [r2, #0]
 8013a04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a08:	bf18      	it	ne
 8013a0a:	b21b      	sxthne	r3, r3
 8013a0c:	e7cf      	b.n	80139ae <_printf_i+0x52>
 8013a0e:	6813      	ldr	r3, [r2, #0]
 8013a10:	6825      	ldr	r5, [r4, #0]
 8013a12:	1d18      	adds	r0, r3, #4
 8013a14:	6010      	str	r0, [r2, #0]
 8013a16:	0628      	lsls	r0, r5, #24
 8013a18:	d501      	bpl.n	8013a1e <_printf_i+0xc2>
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	e002      	b.n	8013a24 <_printf_i+0xc8>
 8013a1e:	0668      	lsls	r0, r5, #25
 8013a20:	d5fb      	bpl.n	8013a1a <_printf_i+0xbe>
 8013a22:	881b      	ldrh	r3, [r3, #0]
 8013a24:	4854      	ldr	r0, [pc, #336]	; (8013b78 <_printf_i+0x21c>)
 8013a26:	296f      	cmp	r1, #111	; 0x6f
 8013a28:	bf14      	ite	ne
 8013a2a:	220a      	movne	r2, #10
 8013a2c:	2208      	moveq	r2, #8
 8013a2e:	2100      	movs	r1, #0
 8013a30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a34:	6865      	ldr	r5, [r4, #4]
 8013a36:	60a5      	str	r5, [r4, #8]
 8013a38:	2d00      	cmp	r5, #0
 8013a3a:	f2c0 8095 	blt.w	8013b68 <_printf_i+0x20c>
 8013a3e:	6821      	ldr	r1, [r4, #0]
 8013a40:	f021 0104 	bic.w	r1, r1, #4
 8013a44:	6021      	str	r1, [r4, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d13d      	bne.n	8013ac6 <_printf_i+0x16a>
 8013a4a:	2d00      	cmp	r5, #0
 8013a4c:	f040 808e 	bne.w	8013b6c <_printf_i+0x210>
 8013a50:	4665      	mov	r5, ip
 8013a52:	2a08      	cmp	r2, #8
 8013a54:	d10b      	bne.n	8013a6e <_printf_i+0x112>
 8013a56:	6823      	ldr	r3, [r4, #0]
 8013a58:	07db      	lsls	r3, r3, #31
 8013a5a:	d508      	bpl.n	8013a6e <_printf_i+0x112>
 8013a5c:	6923      	ldr	r3, [r4, #16]
 8013a5e:	6862      	ldr	r2, [r4, #4]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	bfde      	ittt	le
 8013a64:	2330      	movle	r3, #48	; 0x30
 8013a66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a6e:	ebac 0305 	sub.w	r3, ip, r5
 8013a72:	6123      	str	r3, [r4, #16]
 8013a74:	f8cd 8000 	str.w	r8, [sp]
 8013a78:	463b      	mov	r3, r7
 8013a7a:	aa03      	add	r2, sp, #12
 8013a7c:	4621      	mov	r1, r4
 8013a7e:	4630      	mov	r0, r6
 8013a80:	f7ff fef6 	bl	8013870 <_printf_common>
 8013a84:	3001      	adds	r0, #1
 8013a86:	d14d      	bne.n	8013b24 <_printf_i+0x1c8>
 8013a88:	f04f 30ff 	mov.w	r0, #4294967295
 8013a8c:	b005      	add	sp, #20
 8013a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a92:	4839      	ldr	r0, [pc, #228]	; (8013b78 <_printf_i+0x21c>)
 8013a94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013a98:	6813      	ldr	r3, [r2, #0]
 8013a9a:	6821      	ldr	r1, [r4, #0]
 8013a9c:	1d1d      	adds	r5, r3, #4
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	6015      	str	r5, [r2, #0]
 8013aa2:	060a      	lsls	r2, r1, #24
 8013aa4:	d50b      	bpl.n	8013abe <_printf_i+0x162>
 8013aa6:	07ca      	lsls	r2, r1, #31
 8013aa8:	bf44      	itt	mi
 8013aaa:	f041 0120 	orrmi.w	r1, r1, #32
 8013aae:	6021      	strmi	r1, [r4, #0]
 8013ab0:	b91b      	cbnz	r3, 8013aba <_printf_i+0x15e>
 8013ab2:	6822      	ldr	r2, [r4, #0]
 8013ab4:	f022 0220 	bic.w	r2, r2, #32
 8013ab8:	6022      	str	r2, [r4, #0]
 8013aba:	2210      	movs	r2, #16
 8013abc:	e7b7      	b.n	8013a2e <_printf_i+0xd2>
 8013abe:	064d      	lsls	r5, r1, #25
 8013ac0:	bf48      	it	mi
 8013ac2:	b29b      	uxthmi	r3, r3
 8013ac4:	e7ef      	b.n	8013aa6 <_printf_i+0x14a>
 8013ac6:	4665      	mov	r5, ip
 8013ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013acc:	fb02 3311 	mls	r3, r2, r1, r3
 8013ad0:	5cc3      	ldrb	r3, [r0, r3]
 8013ad2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	2900      	cmp	r1, #0
 8013ada:	d1f5      	bne.n	8013ac8 <_printf_i+0x16c>
 8013adc:	e7b9      	b.n	8013a52 <_printf_i+0xf6>
 8013ade:	6813      	ldr	r3, [r2, #0]
 8013ae0:	6825      	ldr	r5, [r4, #0]
 8013ae2:	6961      	ldr	r1, [r4, #20]
 8013ae4:	1d18      	adds	r0, r3, #4
 8013ae6:	6010      	str	r0, [r2, #0]
 8013ae8:	0628      	lsls	r0, r5, #24
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	d501      	bpl.n	8013af2 <_printf_i+0x196>
 8013aee:	6019      	str	r1, [r3, #0]
 8013af0:	e002      	b.n	8013af8 <_printf_i+0x19c>
 8013af2:	066a      	lsls	r2, r5, #25
 8013af4:	d5fb      	bpl.n	8013aee <_printf_i+0x192>
 8013af6:	8019      	strh	r1, [r3, #0]
 8013af8:	2300      	movs	r3, #0
 8013afa:	6123      	str	r3, [r4, #16]
 8013afc:	4665      	mov	r5, ip
 8013afe:	e7b9      	b.n	8013a74 <_printf_i+0x118>
 8013b00:	6813      	ldr	r3, [r2, #0]
 8013b02:	1d19      	adds	r1, r3, #4
 8013b04:	6011      	str	r1, [r2, #0]
 8013b06:	681d      	ldr	r5, [r3, #0]
 8013b08:	6862      	ldr	r2, [r4, #4]
 8013b0a:	2100      	movs	r1, #0
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	f7ec fb9f 	bl	8000250 <memchr>
 8013b12:	b108      	cbz	r0, 8013b18 <_printf_i+0x1bc>
 8013b14:	1b40      	subs	r0, r0, r5
 8013b16:	6060      	str	r0, [r4, #4]
 8013b18:	6863      	ldr	r3, [r4, #4]
 8013b1a:	6123      	str	r3, [r4, #16]
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b22:	e7a7      	b.n	8013a74 <_printf_i+0x118>
 8013b24:	6923      	ldr	r3, [r4, #16]
 8013b26:	462a      	mov	r2, r5
 8013b28:	4639      	mov	r1, r7
 8013b2a:	4630      	mov	r0, r6
 8013b2c:	47c0      	blx	r8
 8013b2e:	3001      	adds	r0, #1
 8013b30:	d0aa      	beq.n	8013a88 <_printf_i+0x12c>
 8013b32:	6823      	ldr	r3, [r4, #0]
 8013b34:	079b      	lsls	r3, r3, #30
 8013b36:	d413      	bmi.n	8013b60 <_printf_i+0x204>
 8013b38:	68e0      	ldr	r0, [r4, #12]
 8013b3a:	9b03      	ldr	r3, [sp, #12]
 8013b3c:	4298      	cmp	r0, r3
 8013b3e:	bfb8      	it	lt
 8013b40:	4618      	movlt	r0, r3
 8013b42:	e7a3      	b.n	8013a8c <_printf_i+0x130>
 8013b44:	2301      	movs	r3, #1
 8013b46:	464a      	mov	r2, r9
 8013b48:	4639      	mov	r1, r7
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	47c0      	blx	r8
 8013b4e:	3001      	adds	r0, #1
 8013b50:	d09a      	beq.n	8013a88 <_printf_i+0x12c>
 8013b52:	3501      	adds	r5, #1
 8013b54:	68e3      	ldr	r3, [r4, #12]
 8013b56:	9a03      	ldr	r2, [sp, #12]
 8013b58:	1a9b      	subs	r3, r3, r2
 8013b5a:	42ab      	cmp	r3, r5
 8013b5c:	dcf2      	bgt.n	8013b44 <_printf_i+0x1e8>
 8013b5e:	e7eb      	b.n	8013b38 <_printf_i+0x1dc>
 8013b60:	2500      	movs	r5, #0
 8013b62:	f104 0919 	add.w	r9, r4, #25
 8013b66:	e7f5      	b.n	8013b54 <_printf_i+0x1f8>
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d1ac      	bne.n	8013ac6 <_printf_i+0x16a>
 8013b6c:	7803      	ldrb	r3, [r0, #0]
 8013b6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b76:	e76c      	b.n	8013a52 <_printf_i+0xf6>
 8013b78:	080187aa 	.word	0x080187aa
 8013b7c:	080187bb 	.word	0x080187bb

08013b80 <_scanf_float>:
 8013b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b84:	469a      	mov	sl, r3
 8013b86:	688b      	ldr	r3, [r1, #8]
 8013b88:	4616      	mov	r6, r2
 8013b8a:	1e5a      	subs	r2, r3, #1
 8013b8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013b90:	b087      	sub	sp, #28
 8013b92:	bf83      	ittte	hi
 8013b94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013b98:	189b      	addhi	r3, r3, r2
 8013b9a:	9301      	strhi	r3, [sp, #4]
 8013b9c:	2300      	movls	r3, #0
 8013b9e:	bf86      	itte	hi
 8013ba0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ba4:	608b      	strhi	r3, [r1, #8]
 8013ba6:	9301      	strls	r3, [sp, #4]
 8013ba8:	680b      	ldr	r3, [r1, #0]
 8013baa:	4688      	mov	r8, r1
 8013bac:	f04f 0b00 	mov.w	fp, #0
 8013bb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013bb4:	f848 3b1c 	str.w	r3, [r8], #28
 8013bb8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013bbc:	4607      	mov	r7, r0
 8013bbe:	460c      	mov	r4, r1
 8013bc0:	4645      	mov	r5, r8
 8013bc2:	465a      	mov	r2, fp
 8013bc4:	46d9      	mov	r9, fp
 8013bc6:	f8cd b008 	str.w	fp, [sp, #8]
 8013bca:	68a1      	ldr	r1, [r4, #8]
 8013bcc:	b181      	cbz	r1, 8013bf0 <_scanf_float+0x70>
 8013bce:	6833      	ldr	r3, [r6, #0]
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	2b49      	cmp	r3, #73	; 0x49
 8013bd4:	d071      	beq.n	8013cba <_scanf_float+0x13a>
 8013bd6:	d84d      	bhi.n	8013c74 <_scanf_float+0xf4>
 8013bd8:	2b39      	cmp	r3, #57	; 0x39
 8013bda:	d840      	bhi.n	8013c5e <_scanf_float+0xde>
 8013bdc:	2b31      	cmp	r3, #49	; 0x31
 8013bde:	f080 8088 	bcs.w	8013cf2 <_scanf_float+0x172>
 8013be2:	2b2d      	cmp	r3, #45	; 0x2d
 8013be4:	f000 8090 	beq.w	8013d08 <_scanf_float+0x188>
 8013be8:	d815      	bhi.n	8013c16 <_scanf_float+0x96>
 8013bea:	2b2b      	cmp	r3, #43	; 0x2b
 8013bec:	f000 808c 	beq.w	8013d08 <_scanf_float+0x188>
 8013bf0:	f1b9 0f00 	cmp.w	r9, #0
 8013bf4:	d003      	beq.n	8013bfe <_scanf_float+0x7e>
 8013bf6:	6823      	ldr	r3, [r4, #0]
 8013bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013bfc:	6023      	str	r3, [r4, #0]
 8013bfe:	3a01      	subs	r2, #1
 8013c00:	2a01      	cmp	r2, #1
 8013c02:	f200 80ea 	bhi.w	8013dda <_scanf_float+0x25a>
 8013c06:	4545      	cmp	r5, r8
 8013c08:	f200 80dc 	bhi.w	8013dc4 <_scanf_float+0x244>
 8013c0c:	2601      	movs	r6, #1
 8013c0e:	4630      	mov	r0, r6
 8013c10:	b007      	add	sp, #28
 8013c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c16:	2b2e      	cmp	r3, #46	; 0x2e
 8013c18:	f000 809f 	beq.w	8013d5a <_scanf_float+0x1da>
 8013c1c:	2b30      	cmp	r3, #48	; 0x30
 8013c1e:	d1e7      	bne.n	8013bf0 <_scanf_float+0x70>
 8013c20:	6820      	ldr	r0, [r4, #0]
 8013c22:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013c26:	d064      	beq.n	8013cf2 <_scanf_float+0x172>
 8013c28:	9b01      	ldr	r3, [sp, #4]
 8013c2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013c2e:	6020      	str	r0, [r4, #0]
 8013c30:	f109 0901 	add.w	r9, r9, #1
 8013c34:	b11b      	cbz	r3, 8013c3e <_scanf_float+0xbe>
 8013c36:	3b01      	subs	r3, #1
 8013c38:	3101      	adds	r1, #1
 8013c3a:	9301      	str	r3, [sp, #4]
 8013c3c:	60a1      	str	r1, [r4, #8]
 8013c3e:	68a3      	ldr	r3, [r4, #8]
 8013c40:	3b01      	subs	r3, #1
 8013c42:	60a3      	str	r3, [r4, #8]
 8013c44:	6923      	ldr	r3, [r4, #16]
 8013c46:	3301      	adds	r3, #1
 8013c48:	6123      	str	r3, [r4, #16]
 8013c4a:	6873      	ldr	r3, [r6, #4]
 8013c4c:	3b01      	subs	r3, #1
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	6073      	str	r3, [r6, #4]
 8013c52:	f340 80ac 	ble.w	8013dae <_scanf_float+0x22e>
 8013c56:	6833      	ldr	r3, [r6, #0]
 8013c58:	3301      	adds	r3, #1
 8013c5a:	6033      	str	r3, [r6, #0]
 8013c5c:	e7b5      	b.n	8013bca <_scanf_float+0x4a>
 8013c5e:	2b45      	cmp	r3, #69	; 0x45
 8013c60:	f000 8085 	beq.w	8013d6e <_scanf_float+0x1ee>
 8013c64:	2b46      	cmp	r3, #70	; 0x46
 8013c66:	d06a      	beq.n	8013d3e <_scanf_float+0x1be>
 8013c68:	2b41      	cmp	r3, #65	; 0x41
 8013c6a:	d1c1      	bne.n	8013bf0 <_scanf_float+0x70>
 8013c6c:	2a01      	cmp	r2, #1
 8013c6e:	d1bf      	bne.n	8013bf0 <_scanf_float+0x70>
 8013c70:	2202      	movs	r2, #2
 8013c72:	e046      	b.n	8013d02 <_scanf_float+0x182>
 8013c74:	2b65      	cmp	r3, #101	; 0x65
 8013c76:	d07a      	beq.n	8013d6e <_scanf_float+0x1ee>
 8013c78:	d818      	bhi.n	8013cac <_scanf_float+0x12c>
 8013c7a:	2b54      	cmp	r3, #84	; 0x54
 8013c7c:	d066      	beq.n	8013d4c <_scanf_float+0x1cc>
 8013c7e:	d811      	bhi.n	8013ca4 <_scanf_float+0x124>
 8013c80:	2b4e      	cmp	r3, #78	; 0x4e
 8013c82:	d1b5      	bne.n	8013bf0 <_scanf_float+0x70>
 8013c84:	2a00      	cmp	r2, #0
 8013c86:	d146      	bne.n	8013d16 <_scanf_float+0x196>
 8013c88:	f1b9 0f00 	cmp.w	r9, #0
 8013c8c:	d145      	bne.n	8013d1a <_scanf_float+0x19a>
 8013c8e:	6821      	ldr	r1, [r4, #0]
 8013c90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013c94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013c98:	d13f      	bne.n	8013d1a <_scanf_float+0x19a>
 8013c9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013c9e:	6021      	str	r1, [r4, #0]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	e02e      	b.n	8013d02 <_scanf_float+0x182>
 8013ca4:	2b59      	cmp	r3, #89	; 0x59
 8013ca6:	d01e      	beq.n	8013ce6 <_scanf_float+0x166>
 8013ca8:	2b61      	cmp	r3, #97	; 0x61
 8013caa:	e7de      	b.n	8013c6a <_scanf_float+0xea>
 8013cac:	2b6e      	cmp	r3, #110	; 0x6e
 8013cae:	d0e9      	beq.n	8013c84 <_scanf_float+0x104>
 8013cb0:	d815      	bhi.n	8013cde <_scanf_float+0x15e>
 8013cb2:	2b66      	cmp	r3, #102	; 0x66
 8013cb4:	d043      	beq.n	8013d3e <_scanf_float+0x1be>
 8013cb6:	2b69      	cmp	r3, #105	; 0x69
 8013cb8:	d19a      	bne.n	8013bf0 <_scanf_float+0x70>
 8013cba:	f1bb 0f00 	cmp.w	fp, #0
 8013cbe:	d138      	bne.n	8013d32 <_scanf_float+0x1b2>
 8013cc0:	f1b9 0f00 	cmp.w	r9, #0
 8013cc4:	d197      	bne.n	8013bf6 <_scanf_float+0x76>
 8013cc6:	6821      	ldr	r1, [r4, #0]
 8013cc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013ccc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013cd0:	d195      	bne.n	8013bfe <_scanf_float+0x7e>
 8013cd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013cd6:	6021      	str	r1, [r4, #0]
 8013cd8:	f04f 0b01 	mov.w	fp, #1
 8013cdc:	e011      	b.n	8013d02 <_scanf_float+0x182>
 8013cde:	2b74      	cmp	r3, #116	; 0x74
 8013ce0:	d034      	beq.n	8013d4c <_scanf_float+0x1cc>
 8013ce2:	2b79      	cmp	r3, #121	; 0x79
 8013ce4:	d184      	bne.n	8013bf0 <_scanf_float+0x70>
 8013ce6:	f1bb 0f07 	cmp.w	fp, #7
 8013cea:	d181      	bne.n	8013bf0 <_scanf_float+0x70>
 8013cec:	f04f 0b08 	mov.w	fp, #8
 8013cf0:	e007      	b.n	8013d02 <_scanf_float+0x182>
 8013cf2:	eb12 0f0b 	cmn.w	r2, fp
 8013cf6:	f47f af7b 	bne.w	8013bf0 <_scanf_float+0x70>
 8013cfa:	6821      	ldr	r1, [r4, #0]
 8013cfc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013d00:	6021      	str	r1, [r4, #0]
 8013d02:	702b      	strb	r3, [r5, #0]
 8013d04:	3501      	adds	r5, #1
 8013d06:	e79a      	b.n	8013c3e <_scanf_float+0xbe>
 8013d08:	6821      	ldr	r1, [r4, #0]
 8013d0a:	0608      	lsls	r0, r1, #24
 8013d0c:	f57f af70 	bpl.w	8013bf0 <_scanf_float+0x70>
 8013d10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013d14:	e7f4      	b.n	8013d00 <_scanf_float+0x180>
 8013d16:	2a02      	cmp	r2, #2
 8013d18:	d047      	beq.n	8013daa <_scanf_float+0x22a>
 8013d1a:	f1bb 0f01 	cmp.w	fp, #1
 8013d1e:	d003      	beq.n	8013d28 <_scanf_float+0x1a8>
 8013d20:	f1bb 0f04 	cmp.w	fp, #4
 8013d24:	f47f af64 	bne.w	8013bf0 <_scanf_float+0x70>
 8013d28:	f10b 0b01 	add.w	fp, fp, #1
 8013d2c:	fa5f fb8b 	uxtb.w	fp, fp
 8013d30:	e7e7      	b.n	8013d02 <_scanf_float+0x182>
 8013d32:	f1bb 0f03 	cmp.w	fp, #3
 8013d36:	d0f7      	beq.n	8013d28 <_scanf_float+0x1a8>
 8013d38:	f1bb 0f05 	cmp.w	fp, #5
 8013d3c:	e7f2      	b.n	8013d24 <_scanf_float+0x1a4>
 8013d3e:	f1bb 0f02 	cmp.w	fp, #2
 8013d42:	f47f af55 	bne.w	8013bf0 <_scanf_float+0x70>
 8013d46:	f04f 0b03 	mov.w	fp, #3
 8013d4a:	e7da      	b.n	8013d02 <_scanf_float+0x182>
 8013d4c:	f1bb 0f06 	cmp.w	fp, #6
 8013d50:	f47f af4e 	bne.w	8013bf0 <_scanf_float+0x70>
 8013d54:	f04f 0b07 	mov.w	fp, #7
 8013d58:	e7d3      	b.n	8013d02 <_scanf_float+0x182>
 8013d5a:	6821      	ldr	r1, [r4, #0]
 8013d5c:	0588      	lsls	r0, r1, #22
 8013d5e:	f57f af47 	bpl.w	8013bf0 <_scanf_float+0x70>
 8013d62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013d66:	6021      	str	r1, [r4, #0]
 8013d68:	f8cd 9008 	str.w	r9, [sp, #8]
 8013d6c:	e7c9      	b.n	8013d02 <_scanf_float+0x182>
 8013d6e:	6821      	ldr	r1, [r4, #0]
 8013d70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013d74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013d78:	d006      	beq.n	8013d88 <_scanf_float+0x208>
 8013d7a:	0548      	lsls	r0, r1, #21
 8013d7c:	f57f af38 	bpl.w	8013bf0 <_scanf_float+0x70>
 8013d80:	f1b9 0f00 	cmp.w	r9, #0
 8013d84:	f43f af3b 	beq.w	8013bfe <_scanf_float+0x7e>
 8013d88:	0588      	lsls	r0, r1, #22
 8013d8a:	bf58      	it	pl
 8013d8c:	9802      	ldrpl	r0, [sp, #8]
 8013d8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013d92:	bf58      	it	pl
 8013d94:	eba9 0000 	subpl.w	r0, r9, r0
 8013d98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013d9c:	bf58      	it	pl
 8013d9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013da2:	6021      	str	r1, [r4, #0]
 8013da4:	f04f 0900 	mov.w	r9, #0
 8013da8:	e7ab      	b.n	8013d02 <_scanf_float+0x182>
 8013daa:	2203      	movs	r2, #3
 8013dac:	e7a9      	b.n	8013d02 <_scanf_float+0x182>
 8013dae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013db2:	9205      	str	r2, [sp, #20]
 8013db4:	4631      	mov	r1, r6
 8013db6:	4638      	mov	r0, r7
 8013db8:	4798      	blx	r3
 8013dba:	9a05      	ldr	r2, [sp, #20]
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	f43f af04 	beq.w	8013bca <_scanf_float+0x4a>
 8013dc2:	e715      	b.n	8013bf0 <_scanf_float+0x70>
 8013dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013dc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013dcc:	4632      	mov	r2, r6
 8013dce:	4638      	mov	r0, r7
 8013dd0:	4798      	blx	r3
 8013dd2:	6923      	ldr	r3, [r4, #16]
 8013dd4:	3b01      	subs	r3, #1
 8013dd6:	6123      	str	r3, [r4, #16]
 8013dd8:	e715      	b.n	8013c06 <_scanf_float+0x86>
 8013dda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013dde:	2b06      	cmp	r3, #6
 8013de0:	d80a      	bhi.n	8013df8 <_scanf_float+0x278>
 8013de2:	f1bb 0f02 	cmp.w	fp, #2
 8013de6:	d966      	bls.n	8013eb6 <_scanf_float+0x336>
 8013de8:	f1ab 0b03 	sub.w	fp, fp, #3
 8013dec:	fa5f fb8b 	uxtb.w	fp, fp
 8013df0:	eba5 0b0b 	sub.w	fp, r5, fp
 8013df4:	455d      	cmp	r5, fp
 8013df6:	d149      	bne.n	8013e8c <_scanf_float+0x30c>
 8013df8:	6823      	ldr	r3, [r4, #0]
 8013dfa:	05da      	lsls	r2, r3, #23
 8013dfc:	d51f      	bpl.n	8013e3e <_scanf_float+0x2be>
 8013dfe:	055b      	lsls	r3, r3, #21
 8013e00:	d466      	bmi.n	8013ed0 <_scanf_float+0x350>
 8013e02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013e06:	6923      	ldr	r3, [r4, #16]
 8013e08:	2965      	cmp	r1, #101	; 0x65
 8013e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013e0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8013e12:	6123      	str	r3, [r4, #16]
 8013e14:	d00d      	beq.n	8013e32 <_scanf_float+0x2b2>
 8013e16:	2945      	cmp	r1, #69	; 0x45
 8013e18:	d00b      	beq.n	8013e32 <_scanf_float+0x2b2>
 8013e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e1e:	4632      	mov	r2, r6
 8013e20:	4638      	mov	r0, r7
 8013e22:	4798      	blx	r3
 8013e24:	6923      	ldr	r3, [r4, #16]
 8013e26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013e2a:	3b01      	subs	r3, #1
 8013e2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013e30:	6123      	str	r3, [r4, #16]
 8013e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e36:	4632      	mov	r2, r6
 8013e38:	4638      	mov	r0, r7
 8013e3a:	4798      	blx	r3
 8013e3c:	465d      	mov	r5, fp
 8013e3e:	6826      	ldr	r6, [r4, #0]
 8013e40:	f016 0610 	ands.w	r6, r6, #16
 8013e44:	d170      	bne.n	8013f28 <_scanf_float+0x3a8>
 8013e46:	702e      	strb	r6, [r5, #0]
 8013e48:	6823      	ldr	r3, [r4, #0]
 8013e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013e52:	d140      	bne.n	8013ed6 <_scanf_float+0x356>
 8013e54:	9b02      	ldr	r3, [sp, #8]
 8013e56:	eba9 0303 	sub.w	r3, r9, r3
 8013e5a:	425a      	negs	r2, r3
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d147      	bne.n	8013ef0 <_scanf_float+0x370>
 8013e60:	2200      	movs	r2, #0
 8013e62:	4638      	mov	r0, r7
 8013e64:	4641      	mov	r1, r8
 8013e66:	f000 fe83 	bl	8014b70 <_strtod_r>
 8013e6a:	6820      	ldr	r0, [r4, #0]
 8013e6c:	f8da 3000 	ldr.w	r3, [sl]
 8013e70:	f010 0f02 	tst.w	r0, #2
 8013e74:	f103 0204 	add.w	r2, r3, #4
 8013e78:	f8ca 2000 	str.w	r2, [sl]
 8013e7c:	d043      	beq.n	8013f06 <_scanf_float+0x386>
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	ed83 0b00 	vstr	d0, [r3]
 8013e84:	68e3      	ldr	r3, [r4, #12]
 8013e86:	3301      	adds	r3, #1
 8013e88:	60e3      	str	r3, [r4, #12]
 8013e8a:	e6c0      	b.n	8013c0e <_scanf_float+0x8e>
 8013e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013e94:	4632      	mov	r2, r6
 8013e96:	4638      	mov	r0, r7
 8013e98:	4798      	blx	r3
 8013e9a:	6923      	ldr	r3, [r4, #16]
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	6123      	str	r3, [r4, #16]
 8013ea0:	e7a8      	b.n	8013df4 <_scanf_float+0x274>
 8013ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ea6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013eaa:	4632      	mov	r2, r6
 8013eac:	4638      	mov	r0, r7
 8013eae:	4798      	blx	r3
 8013eb0:	6923      	ldr	r3, [r4, #16]
 8013eb2:	3b01      	subs	r3, #1
 8013eb4:	6123      	str	r3, [r4, #16]
 8013eb6:	4545      	cmp	r5, r8
 8013eb8:	d8f3      	bhi.n	8013ea2 <_scanf_float+0x322>
 8013eba:	e6a7      	b.n	8013c0c <_scanf_float+0x8c>
 8013ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ec0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013ec4:	4632      	mov	r2, r6
 8013ec6:	4638      	mov	r0, r7
 8013ec8:	4798      	blx	r3
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	3b01      	subs	r3, #1
 8013ece:	6123      	str	r3, [r4, #16]
 8013ed0:	4545      	cmp	r5, r8
 8013ed2:	d8f3      	bhi.n	8013ebc <_scanf_float+0x33c>
 8013ed4:	e69a      	b.n	8013c0c <_scanf_float+0x8c>
 8013ed6:	9b03      	ldr	r3, [sp, #12]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d0c1      	beq.n	8013e60 <_scanf_float+0x2e0>
 8013edc:	9904      	ldr	r1, [sp, #16]
 8013ede:	230a      	movs	r3, #10
 8013ee0:	4632      	mov	r2, r6
 8013ee2:	3101      	adds	r1, #1
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f000 fecf 	bl	8014c88 <_strtol_r>
 8013eea:	9b03      	ldr	r3, [sp, #12]
 8013eec:	9d04      	ldr	r5, [sp, #16]
 8013eee:	1ac2      	subs	r2, r0, r3
 8013ef0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013ef4:	429d      	cmp	r5, r3
 8013ef6:	bf28      	it	cs
 8013ef8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013efc:	490b      	ldr	r1, [pc, #44]	; (8013f2c <_scanf_float+0x3ac>)
 8013efe:	4628      	mov	r0, r5
 8013f00:	f000 f834 	bl	8013f6c <siprintf>
 8013f04:	e7ac      	b.n	8013e60 <_scanf_float+0x2e0>
 8013f06:	f010 0004 	ands.w	r0, r0, #4
 8013f0a:	d1b8      	bne.n	8013e7e <_scanf_float+0x2fe>
 8013f0c:	eeb4 0b40 	vcmp.f64	d0, d0
 8013f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f14:	681d      	ldr	r5, [r3, #0]
 8013f16:	d704      	bvc.n	8013f22 <_scanf_float+0x3a2>
 8013f18:	f000 f822 	bl	8013f60 <nanf>
 8013f1c:	ed85 0a00 	vstr	s0, [r5]
 8013f20:	e7b0      	b.n	8013e84 <_scanf_float+0x304>
 8013f22:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013f26:	e7f9      	b.n	8013f1c <_scanf_float+0x39c>
 8013f28:	2600      	movs	r6, #0
 8013f2a:	e670      	b.n	8013c0e <_scanf_float+0x8e>
 8013f2c:	080187cc 	.word	0x080187cc

08013f30 <iprintf>:
 8013f30:	b40f      	push	{r0, r1, r2, r3}
 8013f32:	4b0a      	ldr	r3, [pc, #40]	; (8013f5c <iprintf+0x2c>)
 8013f34:	b513      	push	{r0, r1, r4, lr}
 8013f36:	681c      	ldr	r4, [r3, #0]
 8013f38:	b124      	cbz	r4, 8013f44 <iprintf+0x14>
 8013f3a:	69a3      	ldr	r3, [r4, #24]
 8013f3c:	b913      	cbnz	r3, 8013f44 <iprintf+0x14>
 8013f3e:	4620      	mov	r0, r4
 8013f40:	f001 fcce 	bl	80158e0 <__sinit>
 8013f44:	ab05      	add	r3, sp, #20
 8013f46:	9a04      	ldr	r2, [sp, #16]
 8013f48:	68a1      	ldr	r1, [r4, #8]
 8013f4a:	9301      	str	r3, [sp, #4]
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f002 fed7 	bl	8016d00 <_vfiprintf_r>
 8013f52:	b002      	add	sp, #8
 8013f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f58:	b004      	add	sp, #16
 8013f5a:	4770      	bx	lr
 8013f5c:	200001a8 	.word	0x200001a8

08013f60 <nanf>:
 8013f60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013f68 <nanf+0x8>
 8013f64:	4770      	bx	lr
 8013f66:	bf00      	nop
 8013f68:	7fc00000 	.word	0x7fc00000

08013f6c <siprintf>:
 8013f6c:	b40e      	push	{r1, r2, r3}
 8013f6e:	b500      	push	{lr}
 8013f70:	b09c      	sub	sp, #112	; 0x70
 8013f72:	ab1d      	add	r3, sp, #116	; 0x74
 8013f74:	9002      	str	r0, [sp, #8]
 8013f76:	9006      	str	r0, [sp, #24]
 8013f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013f7c:	4809      	ldr	r0, [pc, #36]	; (8013fa4 <siprintf+0x38>)
 8013f7e:	9107      	str	r1, [sp, #28]
 8013f80:	9104      	str	r1, [sp, #16]
 8013f82:	4909      	ldr	r1, [pc, #36]	; (8013fa8 <siprintf+0x3c>)
 8013f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f88:	9105      	str	r1, [sp, #20]
 8013f8a:	6800      	ldr	r0, [r0, #0]
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	a902      	add	r1, sp, #8
 8013f90:	f002 fd94 	bl	8016abc <_svfiprintf_r>
 8013f94:	9b02      	ldr	r3, [sp, #8]
 8013f96:	2200      	movs	r2, #0
 8013f98:	701a      	strb	r2, [r3, #0]
 8013f9a:	b01c      	add	sp, #112	; 0x70
 8013f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fa0:	b003      	add	sp, #12
 8013fa2:	4770      	bx	lr
 8013fa4:	200001a8 	.word	0x200001a8
 8013fa8:	ffff0208 	.word	0xffff0208

08013fac <sulp>:
 8013fac:	b570      	push	{r4, r5, r6, lr}
 8013fae:	4604      	mov	r4, r0
 8013fb0:	460d      	mov	r5, r1
 8013fb2:	4616      	mov	r6, r2
 8013fb4:	ec45 4b10 	vmov	d0, r4, r5
 8013fb8:	f002 fb3c 	bl	8016634 <__ulp>
 8013fbc:	b17e      	cbz	r6, 8013fde <sulp+0x32>
 8013fbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013fc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	dd09      	ble.n	8013fde <sulp+0x32>
 8013fca:	051b      	lsls	r3, r3, #20
 8013fcc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013fd0:	2000      	movs	r0, #0
 8013fd2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013fd6:	ec41 0b17 	vmov	d7, r0, r1
 8013fda:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013fde:	bd70      	pop	{r4, r5, r6, pc}

08013fe0 <_strtod_l>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	ed2d 8b0c 	vpush	{d8-d13}
 8013fe8:	4698      	mov	r8, r3
 8013fea:	b09d      	sub	sp, #116	; 0x74
 8013fec:	2300      	movs	r3, #0
 8013fee:	4604      	mov	r4, r0
 8013ff0:	4640      	mov	r0, r8
 8013ff2:	460e      	mov	r6, r1
 8013ff4:	9214      	str	r2, [sp, #80]	; 0x50
 8013ff6:	9318      	str	r3, [sp, #96]	; 0x60
 8013ff8:	f002 f825 	bl	8016046 <__localeconv_l>
 8013ffc:	4681      	mov	r9, r0
 8013ffe:	6800      	ldr	r0, [r0, #0]
 8014000:	f7ec f91e 	bl	8000240 <strlen>
 8014004:	f04f 0a00 	mov.w	sl, #0
 8014008:	4607      	mov	r7, r0
 801400a:	f04f 0b00 	mov.w	fp, #0
 801400e:	9617      	str	r6, [sp, #92]	; 0x5c
 8014010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014012:	781a      	ldrb	r2, [r3, #0]
 8014014:	2a0d      	cmp	r2, #13
 8014016:	d834      	bhi.n	8014082 <_strtod_l+0xa2>
 8014018:	2a09      	cmp	r2, #9
 801401a:	d238      	bcs.n	801408e <_strtod_l+0xae>
 801401c:	2a00      	cmp	r2, #0
 801401e:	d040      	beq.n	80140a2 <_strtod_l+0xc2>
 8014020:	2300      	movs	r3, #0
 8014022:	930d      	str	r3, [sp, #52]	; 0x34
 8014024:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014026:	782b      	ldrb	r3, [r5, #0]
 8014028:	2b30      	cmp	r3, #48	; 0x30
 801402a:	f040 80b3 	bne.w	8014194 <_strtod_l+0x1b4>
 801402e:	786b      	ldrb	r3, [r5, #1]
 8014030:	2b58      	cmp	r3, #88	; 0x58
 8014032:	d001      	beq.n	8014038 <_strtod_l+0x58>
 8014034:	2b78      	cmp	r3, #120	; 0x78
 8014036:	d169      	bne.n	801410c <_strtod_l+0x12c>
 8014038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801403a:	9301      	str	r3, [sp, #4]
 801403c:	ab18      	add	r3, sp, #96	; 0x60
 801403e:	9300      	str	r3, [sp, #0]
 8014040:	f8cd 8008 	str.w	r8, [sp, #8]
 8014044:	ab19      	add	r3, sp, #100	; 0x64
 8014046:	4a8f      	ldr	r2, [pc, #572]	; (8014284 <_strtod_l+0x2a4>)
 8014048:	a917      	add	r1, sp, #92	; 0x5c
 801404a:	4620      	mov	r0, r4
 801404c:	f001 fd21 	bl	8015a92 <__gethex>
 8014050:	f010 0607 	ands.w	r6, r0, #7
 8014054:	4607      	mov	r7, r0
 8014056:	d005      	beq.n	8014064 <_strtod_l+0x84>
 8014058:	2e06      	cmp	r6, #6
 801405a:	d12c      	bne.n	80140b6 <_strtod_l+0xd6>
 801405c:	3501      	adds	r5, #1
 801405e:	2300      	movs	r3, #0
 8014060:	9517      	str	r5, [sp, #92]	; 0x5c
 8014062:	930d      	str	r3, [sp, #52]	; 0x34
 8014064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014066:	2b00      	cmp	r3, #0
 8014068:	f040 855e 	bne.w	8014b28 <_strtod_l+0xb48>
 801406c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801406e:	b1eb      	cbz	r3, 80140ac <_strtod_l+0xcc>
 8014070:	ec4b ab17 	vmov	d7, sl, fp
 8014074:	eeb1 0b47 	vneg.f64	d0, d7
 8014078:	b01d      	add	sp, #116	; 0x74
 801407a:	ecbd 8b0c 	vpop	{d8-d13}
 801407e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014082:	2a2b      	cmp	r2, #43	; 0x2b
 8014084:	d015      	beq.n	80140b2 <_strtod_l+0xd2>
 8014086:	2a2d      	cmp	r2, #45	; 0x2d
 8014088:	d004      	beq.n	8014094 <_strtod_l+0xb4>
 801408a:	2a20      	cmp	r2, #32
 801408c:	d1c8      	bne.n	8014020 <_strtod_l+0x40>
 801408e:	3301      	adds	r3, #1
 8014090:	9317      	str	r3, [sp, #92]	; 0x5c
 8014092:	e7bd      	b.n	8014010 <_strtod_l+0x30>
 8014094:	2201      	movs	r2, #1
 8014096:	920d      	str	r2, [sp, #52]	; 0x34
 8014098:	1c5a      	adds	r2, r3, #1
 801409a:	9217      	str	r2, [sp, #92]	; 0x5c
 801409c:	785b      	ldrb	r3, [r3, #1]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d1c0      	bne.n	8014024 <_strtod_l+0x44>
 80140a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80140a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	f040 853c 	bne.w	8014b24 <_strtod_l+0xb44>
 80140ac:	ec4b ab10 	vmov	d0, sl, fp
 80140b0:	e7e2      	b.n	8014078 <_strtod_l+0x98>
 80140b2:	2200      	movs	r2, #0
 80140b4:	e7ef      	b.n	8014096 <_strtod_l+0xb6>
 80140b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80140b8:	b13a      	cbz	r2, 80140ca <_strtod_l+0xea>
 80140ba:	2135      	movs	r1, #53	; 0x35
 80140bc:	a81a      	add	r0, sp, #104	; 0x68
 80140be:	f002 fbb2 	bl	8016826 <__copybits>
 80140c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80140c4:	4620      	mov	r0, r4
 80140c6:	f002 f81d 	bl	8016104 <_Bfree>
 80140ca:	3e01      	subs	r6, #1
 80140cc:	2e04      	cmp	r6, #4
 80140ce:	d806      	bhi.n	80140de <_strtod_l+0xfe>
 80140d0:	e8df f006 	tbb	[pc, r6]
 80140d4:	1714030a 	.word	0x1714030a
 80140d8:	0a          	.byte	0x0a
 80140d9:	00          	.byte	0x00
 80140da:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80140de:	073b      	lsls	r3, r7, #28
 80140e0:	d5c0      	bpl.n	8014064 <_strtod_l+0x84>
 80140e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80140e6:	e7bd      	b.n	8014064 <_strtod_l+0x84>
 80140e8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80140ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80140ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80140f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80140f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80140fa:	e7f0      	b.n	80140de <_strtod_l+0xfe>
 80140fc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8014288 <_strtod_l+0x2a8>
 8014100:	e7ed      	b.n	80140de <_strtod_l+0xfe>
 8014102:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014106:	f04f 3aff 	mov.w	sl, #4294967295
 801410a:	e7e8      	b.n	80140de <_strtod_l+0xfe>
 801410c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801410e:	1c5a      	adds	r2, r3, #1
 8014110:	9217      	str	r2, [sp, #92]	; 0x5c
 8014112:	785b      	ldrb	r3, [r3, #1]
 8014114:	2b30      	cmp	r3, #48	; 0x30
 8014116:	d0f9      	beq.n	801410c <_strtod_l+0x12c>
 8014118:	2b00      	cmp	r3, #0
 801411a:	d0a3      	beq.n	8014064 <_strtod_l+0x84>
 801411c:	2301      	movs	r3, #1
 801411e:	930a      	str	r3, [sp, #40]	; 0x28
 8014120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014122:	930c      	str	r3, [sp, #48]	; 0x30
 8014124:	2300      	movs	r3, #0
 8014126:	9306      	str	r3, [sp, #24]
 8014128:	9308      	str	r3, [sp, #32]
 801412a:	461d      	mov	r5, r3
 801412c:	220a      	movs	r2, #10
 801412e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014130:	f890 8000 	ldrb.w	r8, [r0]
 8014134:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8014138:	b2d9      	uxtb	r1, r3
 801413a:	2909      	cmp	r1, #9
 801413c:	d92c      	bls.n	8014198 <_strtod_l+0x1b8>
 801413e:	463a      	mov	r2, r7
 8014140:	f8d9 1000 	ldr.w	r1, [r9]
 8014144:	f002 ff45 	bl	8016fd2 <strncmp>
 8014148:	2800      	cmp	r0, #0
 801414a:	d035      	beq.n	80141b8 <_strtod_l+0x1d8>
 801414c:	2000      	movs	r0, #0
 801414e:	4642      	mov	r2, r8
 8014150:	462b      	mov	r3, r5
 8014152:	4601      	mov	r1, r0
 8014154:	9004      	str	r0, [sp, #16]
 8014156:	2a65      	cmp	r2, #101	; 0x65
 8014158:	d001      	beq.n	801415e <_strtod_l+0x17e>
 801415a:	2a45      	cmp	r2, #69	; 0x45
 801415c:	d117      	bne.n	801418e <_strtod_l+0x1ae>
 801415e:	b923      	cbnz	r3, 801416a <_strtod_l+0x18a>
 8014160:	b910      	cbnz	r0, 8014168 <_strtod_l+0x188>
 8014162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014164:	2b00      	cmp	r3, #0
 8014166:	d09c      	beq.n	80140a2 <_strtod_l+0xc2>
 8014168:	2300      	movs	r3, #0
 801416a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801416c:	1c72      	adds	r2, r6, #1
 801416e:	9217      	str	r2, [sp, #92]	; 0x5c
 8014170:	7872      	ldrb	r2, [r6, #1]
 8014172:	2a2b      	cmp	r2, #43	; 0x2b
 8014174:	f000 8082 	beq.w	801427c <_strtod_l+0x29c>
 8014178:	2a2d      	cmp	r2, #45	; 0x2d
 801417a:	d079      	beq.n	8014270 <_strtod_l+0x290>
 801417c:	f04f 0e00 	mov.w	lr, #0
 8014180:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014184:	f1bc 0f09 	cmp.w	ip, #9
 8014188:	f240 8086 	bls.w	8014298 <_strtod_l+0x2b8>
 801418c:	9617      	str	r6, [sp, #92]	; 0x5c
 801418e:	f04f 0800 	mov.w	r8, #0
 8014192:	e0a8      	b.n	80142e6 <_strtod_l+0x306>
 8014194:	2300      	movs	r3, #0
 8014196:	e7c2      	b.n	801411e <_strtod_l+0x13e>
 8014198:	2d08      	cmp	r5, #8
 801419a:	bfd5      	itete	le
 801419c:	9908      	ldrle	r1, [sp, #32]
 801419e:	9906      	ldrgt	r1, [sp, #24]
 80141a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80141a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80141a8:	f100 0001 	add.w	r0, r0, #1
 80141ac:	bfd4      	ite	le
 80141ae:	9308      	strle	r3, [sp, #32]
 80141b0:	9306      	strgt	r3, [sp, #24]
 80141b2:	3501      	adds	r5, #1
 80141b4:	9017      	str	r0, [sp, #92]	; 0x5c
 80141b6:	e7ba      	b.n	801412e <_strtod_l+0x14e>
 80141b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141ba:	19da      	adds	r2, r3, r7
 80141bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80141be:	5dda      	ldrb	r2, [r3, r7]
 80141c0:	2d00      	cmp	r5, #0
 80141c2:	d038      	beq.n	8014236 <_strtod_l+0x256>
 80141c4:	4601      	mov	r1, r0
 80141c6:	462b      	mov	r3, r5
 80141c8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80141cc:	2f09      	cmp	r7, #9
 80141ce:	d913      	bls.n	80141f8 <_strtod_l+0x218>
 80141d0:	2701      	movs	r7, #1
 80141d2:	9704      	str	r7, [sp, #16]
 80141d4:	e7bf      	b.n	8014156 <_strtod_l+0x176>
 80141d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141d8:	1c5a      	adds	r2, r3, #1
 80141da:	9217      	str	r2, [sp, #92]	; 0x5c
 80141dc:	785a      	ldrb	r2, [r3, #1]
 80141de:	3001      	adds	r0, #1
 80141e0:	2a30      	cmp	r2, #48	; 0x30
 80141e2:	d0f8      	beq.n	80141d6 <_strtod_l+0x1f6>
 80141e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80141e8:	2b08      	cmp	r3, #8
 80141ea:	f200 84a2 	bhi.w	8014b32 <_strtod_l+0xb52>
 80141ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141f0:	930c      	str	r3, [sp, #48]	; 0x30
 80141f2:	4601      	mov	r1, r0
 80141f4:	2000      	movs	r0, #0
 80141f6:	4603      	mov	r3, r0
 80141f8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80141fc:	f100 0701 	add.w	r7, r0, #1
 8014200:	d013      	beq.n	801422a <_strtod_l+0x24a>
 8014202:	4439      	add	r1, r7
 8014204:	eb00 0e03 	add.w	lr, r0, r3
 8014208:	461f      	mov	r7, r3
 801420a:	f04f 0c0a 	mov.w	ip, #10
 801420e:	45be      	cmp	lr, r7
 8014210:	d113      	bne.n	801423a <_strtod_l+0x25a>
 8014212:	181f      	adds	r7, r3, r0
 8014214:	2f08      	cmp	r7, #8
 8014216:	f103 0301 	add.w	r3, r3, #1
 801421a:	4403      	add	r3, r0
 801421c:	dc1d      	bgt.n	801425a <_strtod_l+0x27a>
 801421e:	9a08      	ldr	r2, [sp, #32]
 8014220:	200a      	movs	r0, #10
 8014222:	fb00 8202 	mla	r2, r0, r2, r8
 8014226:	9208      	str	r2, [sp, #32]
 8014228:	2700      	movs	r7, #0
 801422a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801422c:	1c50      	adds	r0, r2, #1
 801422e:	9017      	str	r0, [sp, #92]	; 0x5c
 8014230:	7852      	ldrb	r2, [r2, #1]
 8014232:	4638      	mov	r0, r7
 8014234:	e7c8      	b.n	80141c8 <_strtod_l+0x1e8>
 8014236:	4628      	mov	r0, r5
 8014238:	e7d2      	b.n	80141e0 <_strtod_l+0x200>
 801423a:	2f08      	cmp	r7, #8
 801423c:	f107 0701 	add.w	r7, r7, #1
 8014240:	dc04      	bgt.n	801424c <_strtod_l+0x26c>
 8014242:	9a08      	ldr	r2, [sp, #32]
 8014244:	fb0c f202 	mul.w	r2, ip, r2
 8014248:	9208      	str	r2, [sp, #32]
 801424a:	e7e0      	b.n	801420e <_strtod_l+0x22e>
 801424c:	2f10      	cmp	r7, #16
 801424e:	bfde      	ittt	le
 8014250:	9a06      	ldrle	r2, [sp, #24]
 8014252:	fb0c f202 	mulle.w	r2, ip, r2
 8014256:	9206      	strle	r2, [sp, #24]
 8014258:	e7d9      	b.n	801420e <_strtod_l+0x22e>
 801425a:	2b10      	cmp	r3, #16
 801425c:	bfdf      	itttt	le
 801425e:	9a06      	ldrle	r2, [sp, #24]
 8014260:	200a      	movle	r0, #10
 8014262:	fb00 8202 	mlale	r2, r0, r2, r8
 8014266:	9206      	strle	r2, [sp, #24]
 8014268:	e7de      	b.n	8014228 <_strtod_l+0x248>
 801426a:	2301      	movs	r3, #1
 801426c:	9304      	str	r3, [sp, #16]
 801426e:	e777      	b.n	8014160 <_strtod_l+0x180>
 8014270:	f04f 0e01 	mov.w	lr, #1
 8014274:	1cb2      	adds	r2, r6, #2
 8014276:	9217      	str	r2, [sp, #92]	; 0x5c
 8014278:	78b2      	ldrb	r2, [r6, #2]
 801427a:	e781      	b.n	8014180 <_strtod_l+0x1a0>
 801427c:	f04f 0e00 	mov.w	lr, #0
 8014280:	e7f8      	b.n	8014274 <_strtod_l+0x294>
 8014282:	bf00      	nop
 8014284:	080187d4 	.word	0x080187d4
 8014288:	7ff00000 	.word	0x7ff00000
 801428c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801428e:	f102 0c01 	add.w	ip, r2, #1
 8014292:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8014296:	7852      	ldrb	r2, [r2, #1]
 8014298:	2a30      	cmp	r2, #48	; 0x30
 801429a:	d0f7      	beq.n	801428c <_strtod_l+0x2ac>
 801429c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80142a0:	f1bc 0f08 	cmp.w	ip, #8
 80142a4:	f63f af73 	bhi.w	801418e <_strtod_l+0x1ae>
 80142a8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80142ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80142ae:	920e      	str	r2, [sp, #56]	; 0x38
 80142b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80142b2:	f102 0c01 	add.w	ip, r2, #1
 80142b6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80142ba:	7852      	ldrb	r2, [r2, #1]
 80142bc:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80142c0:	f1b9 0f09 	cmp.w	r9, #9
 80142c4:	d939      	bls.n	801433a <_strtod_l+0x35a>
 80142c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80142c8:	ebac 0c07 	sub.w	ip, ip, r7
 80142cc:	f1bc 0f08 	cmp.w	ip, #8
 80142d0:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80142d4:	dc37      	bgt.n	8014346 <_strtod_l+0x366>
 80142d6:	45e0      	cmp	r8, ip
 80142d8:	bfa8      	it	ge
 80142da:	46e0      	movge	r8, ip
 80142dc:	f1be 0f00 	cmp.w	lr, #0
 80142e0:	d001      	beq.n	80142e6 <_strtod_l+0x306>
 80142e2:	f1c8 0800 	rsb	r8, r8, #0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d151      	bne.n	801438e <_strtod_l+0x3ae>
 80142ea:	2800      	cmp	r0, #0
 80142ec:	f47f aeba 	bne.w	8014064 <_strtod_l+0x84>
 80142f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	f47f aeb6 	bne.w	8014064 <_strtod_l+0x84>
 80142f8:	9b04      	ldr	r3, [sp, #16]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	f47f aed1 	bne.w	80140a2 <_strtod_l+0xc2>
 8014300:	2a4e      	cmp	r2, #78	; 0x4e
 8014302:	d027      	beq.n	8014354 <_strtod_l+0x374>
 8014304:	dc21      	bgt.n	801434a <_strtod_l+0x36a>
 8014306:	2a49      	cmp	r2, #73	; 0x49
 8014308:	f47f aecb 	bne.w	80140a2 <_strtod_l+0xc2>
 801430c:	499a      	ldr	r1, [pc, #616]	; (8014578 <_strtod_l+0x598>)
 801430e:	a817      	add	r0, sp, #92	; 0x5c
 8014310:	f001 fdf2 	bl	8015ef8 <__match>
 8014314:	2800      	cmp	r0, #0
 8014316:	f43f aec4 	beq.w	80140a2 <_strtod_l+0xc2>
 801431a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801431c:	4997      	ldr	r1, [pc, #604]	; (801457c <_strtod_l+0x59c>)
 801431e:	3b01      	subs	r3, #1
 8014320:	a817      	add	r0, sp, #92	; 0x5c
 8014322:	9317      	str	r3, [sp, #92]	; 0x5c
 8014324:	f001 fde8 	bl	8015ef8 <__match>
 8014328:	b910      	cbnz	r0, 8014330 <_strtod_l+0x350>
 801432a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801432c:	3301      	adds	r3, #1
 801432e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014330:	f8df b260 	ldr.w	fp, [pc, #608]	; 8014594 <_strtod_l+0x5b4>
 8014334:	f04f 0a00 	mov.w	sl, #0
 8014338:	e694      	b.n	8014064 <_strtod_l+0x84>
 801433a:	270a      	movs	r7, #10
 801433c:	fb07 2808 	mla	r8, r7, r8, r2
 8014340:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8014344:	e7b4      	b.n	80142b0 <_strtod_l+0x2d0>
 8014346:	46e0      	mov	r8, ip
 8014348:	e7c8      	b.n	80142dc <_strtod_l+0x2fc>
 801434a:	2a69      	cmp	r2, #105	; 0x69
 801434c:	d0de      	beq.n	801430c <_strtod_l+0x32c>
 801434e:	2a6e      	cmp	r2, #110	; 0x6e
 8014350:	f47f aea7 	bne.w	80140a2 <_strtod_l+0xc2>
 8014354:	498a      	ldr	r1, [pc, #552]	; (8014580 <_strtod_l+0x5a0>)
 8014356:	a817      	add	r0, sp, #92	; 0x5c
 8014358:	f001 fdce 	bl	8015ef8 <__match>
 801435c:	2800      	cmp	r0, #0
 801435e:	f43f aea0 	beq.w	80140a2 <_strtod_l+0xc2>
 8014362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	2b28      	cmp	r3, #40	; 0x28
 8014368:	d10e      	bne.n	8014388 <_strtod_l+0x3a8>
 801436a:	aa1a      	add	r2, sp, #104	; 0x68
 801436c:	4985      	ldr	r1, [pc, #532]	; (8014584 <_strtod_l+0x5a4>)
 801436e:	a817      	add	r0, sp, #92	; 0x5c
 8014370:	f001 fdd6 	bl	8015f20 <__hexnan>
 8014374:	2805      	cmp	r0, #5
 8014376:	d107      	bne.n	8014388 <_strtod_l+0x3a8>
 8014378:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801437a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801437e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014382:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014386:	e66d      	b.n	8014064 <_strtod_l+0x84>
 8014388:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8014598 <_strtod_l+0x5b8>
 801438c:	e7d2      	b.n	8014334 <_strtod_l+0x354>
 801438e:	eddd 7a08 	vldr	s15, [sp, #32]
 8014392:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014396:	eba8 0201 	sub.w	r2, r8, r1
 801439a:	2d00      	cmp	r5, #0
 801439c:	bf08      	it	eq
 801439e:	461d      	moveq	r5, r3
 80143a0:	2b10      	cmp	r3, #16
 80143a2:	9204      	str	r2, [sp, #16]
 80143a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80143a8:	461a      	mov	r2, r3
 80143aa:	bfa8      	it	ge
 80143ac:	2210      	movge	r2, #16
 80143ae:	2b09      	cmp	r3, #9
 80143b0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80143b4:	dc14      	bgt.n	80143e0 <_strtod_l+0x400>
 80143b6:	9904      	ldr	r1, [sp, #16]
 80143b8:	2900      	cmp	r1, #0
 80143ba:	f43f ae53 	beq.w	8014064 <_strtod_l+0x84>
 80143be:	9904      	ldr	r1, [sp, #16]
 80143c0:	dd72      	ble.n	80144a8 <_strtod_l+0x4c8>
 80143c2:	2916      	cmp	r1, #22
 80143c4:	dc5a      	bgt.n	801447c <_strtod_l+0x49c>
 80143c6:	4970      	ldr	r1, [pc, #448]	; (8014588 <_strtod_l+0x5a8>)
 80143c8:	9b04      	ldr	r3, [sp, #16]
 80143ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80143ce:	ed91 7b00 	vldr	d7, [r1]
 80143d2:	ec4b ab16 	vmov	d6, sl, fp
 80143d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80143da:	ec5b ab17 	vmov	sl, fp, d7
 80143de:	e641      	b.n	8014064 <_strtod_l+0x84>
 80143e0:	4969      	ldr	r1, [pc, #420]	; (8014588 <_strtod_l+0x5a8>)
 80143e2:	eddd 7a06 	vldr	s15, [sp, #24]
 80143e6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80143ea:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80143ee:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80143f2:	2b0f      	cmp	r3, #15
 80143f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80143f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80143fc:	ec5b ab17 	vmov	sl, fp, d7
 8014400:	ddd9      	ble.n	80143b6 <_strtod_l+0x3d6>
 8014402:	9904      	ldr	r1, [sp, #16]
 8014404:	1a9a      	subs	r2, r3, r2
 8014406:	440a      	add	r2, r1
 8014408:	2a00      	cmp	r2, #0
 801440a:	f340 8096 	ble.w	801453a <_strtod_l+0x55a>
 801440e:	f012 000f 	ands.w	r0, r2, #15
 8014412:	d00a      	beq.n	801442a <_strtod_l+0x44a>
 8014414:	495c      	ldr	r1, [pc, #368]	; (8014588 <_strtod_l+0x5a8>)
 8014416:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801441a:	ed91 7b00 	vldr	d7, [r1]
 801441e:	ec4b ab16 	vmov	d6, sl, fp
 8014422:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014426:	ec5b ab17 	vmov	sl, fp, d7
 801442a:	f032 020f 	bics.w	r2, r2, #15
 801442e:	d072      	beq.n	8014516 <_strtod_l+0x536>
 8014430:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014434:	dd45      	ble.n	80144c2 <_strtod_l+0x4e2>
 8014436:	2500      	movs	r5, #0
 8014438:	46a8      	mov	r8, r5
 801443a:	9506      	str	r5, [sp, #24]
 801443c:	46a9      	mov	r9, r5
 801443e:	2322      	movs	r3, #34	; 0x22
 8014440:	f8df b150 	ldr.w	fp, [pc, #336]	; 8014594 <_strtod_l+0x5b4>
 8014444:	6023      	str	r3, [r4, #0]
 8014446:	f04f 0a00 	mov.w	sl, #0
 801444a:	9b06      	ldr	r3, [sp, #24]
 801444c:	2b00      	cmp	r3, #0
 801444e:	f43f ae09 	beq.w	8014064 <_strtod_l+0x84>
 8014452:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014454:	4620      	mov	r0, r4
 8014456:	f001 fe55 	bl	8016104 <_Bfree>
 801445a:	4649      	mov	r1, r9
 801445c:	4620      	mov	r0, r4
 801445e:	f001 fe51 	bl	8016104 <_Bfree>
 8014462:	4641      	mov	r1, r8
 8014464:	4620      	mov	r0, r4
 8014466:	f001 fe4d 	bl	8016104 <_Bfree>
 801446a:	9906      	ldr	r1, [sp, #24]
 801446c:	4620      	mov	r0, r4
 801446e:	f001 fe49 	bl	8016104 <_Bfree>
 8014472:	4629      	mov	r1, r5
 8014474:	4620      	mov	r0, r4
 8014476:	f001 fe45 	bl	8016104 <_Bfree>
 801447a:	e5f3      	b.n	8014064 <_strtod_l+0x84>
 801447c:	9804      	ldr	r0, [sp, #16]
 801447e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8014482:	4281      	cmp	r1, r0
 8014484:	dbbd      	blt.n	8014402 <_strtod_l+0x422>
 8014486:	4a40      	ldr	r2, [pc, #256]	; (8014588 <_strtod_l+0x5a8>)
 8014488:	f1c3 030f 	rsb	r3, r3, #15
 801448c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014490:	ed91 7b00 	vldr	d7, [r1]
 8014494:	ec4b ab16 	vmov	d6, sl, fp
 8014498:	1ac3      	subs	r3, r0, r3
 801449a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801449e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80144a2:	ed92 6b00 	vldr	d6, [r2]
 80144a6:	e796      	b.n	80143d6 <_strtod_l+0x3f6>
 80144a8:	3116      	adds	r1, #22
 80144aa:	dbaa      	blt.n	8014402 <_strtod_l+0x422>
 80144ac:	4936      	ldr	r1, [pc, #216]	; (8014588 <_strtod_l+0x5a8>)
 80144ae:	9b04      	ldr	r3, [sp, #16]
 80144b0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80144b4:	ed91 7b00 	vldr	d7, [r1]
 80144b8:	ec4b ab16 	vmov	d6, sl, fp
 80144bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80144c0:	e78b      	b.n	80143da <_strtod_l+0x3fa>
 80144c2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80144c6:	2000      	movs	r0, #0
 80144c8:	4e30      	ldr	r6, [pc, #192]	; (801458c <_strtod_l+0x5ac>)
 80144ca:	1112      	asrs	r2, r2, #4
 80144cc:	4601      	mov	r1, r0
 80144ce:	2a01      	cmp	r2, #1
 80144d0:	dc23      	bgt.n	801451a <_strtod_l+0x53a>
 80144d2:	b108      	cbz	r0, 80144d8 <_strtod_l+0x4f8>
 80144d4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80144d8:	4a2c      	ldr	r2, [pc, #176]	; (801458c <_strtod_l+0x5ac>)
 80144da:	482d      	ldr	r0, [pc, #180]	; (8014590 <_strtod_l+0x5b0>)
 80144dc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80144e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80144e4:	ed91 7b00 	vldr	d7, [r1]
 80144e8:	ec4b ab16 	vmov	d6, sl, fp
 80144ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80144f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80144f4:	9907      	ldr	r1, [sp, #28]
 80144f6:	4a27      	ldr	r2, [pc, #156]	; (8014594 <_strtod_l+0x5b4>)
 80144f8:	400a      	ands	r2, r1
 80144fa:	4282      	cmp	r2, r0
 80144fc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8014500:	d899      	bhi.n	8014436 <_strtod_l+0x456>
 8014502:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8014506:	4282      	cmp	r2, r0
 8014508:	bf86      	itte	hi
 801450a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801459c <_strtod_l+0x5bc>
 801450e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014512:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8014516:	2700      	movs	r7, #0
 8014518:	e070      	b.n	80145fc <_strtod_l+0x61c>
 801451a:	07d7      	lsls	r7, r2, #31
 801451c:	d50a      	bpl.n	8014534 <_strtod_l+0x554>
 801451e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8014522:	ed90 7b00 	vldr	d7, [r0]
 8014526:	ed9d 6b06 	vldr	d6, [sp, #24]
 801452a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801452e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014532:	2001      	movs	r0, #1
 8014534:	3101      	adds	r1, #1
 8014536:	1052      	asrs	r2, r2, #1
 8014538:	e7c9      	b.n	80144ce <_strtod_l+0x4ee>
 801453a:	d0ec      	beq.n	8014516 <_strtod_l+0x536>
 801453c:	4252      	negs	r2, r2
 801453e:	f012 000f 	ands.w	r0, r2, #15
 8014542:	d00a      	beq.n	801455a <_strtod_l+0x57a>
 8014544:	4910      	ldr	r1, [pc, #64]	; (8014588 <_strtod_l+0x5a8>)
 8014546:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801454a:	ed91 7b00 	vldr	d7, [r1]
 801454e:	ec4b ab16 	vmov	d6, sl, fp
 8014552:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014556:	ec5b ab17 	vmov	sl, fp, d7
 801455a:	1112      	asrs	r2, r2, #4
 801455c:	d0db      	beq.n	8014516 <_strtod_l+0x536>
 801455e:	2a1f      	cmp	r2, #31
 8014560:	dd1e      	ble.n	80145a0 <_strtod_l+0x5c0>
 8014562:	2500      	movs	r5, #0
 8014564:	46a8      	mov	r8, r5
 8014566:	9506      	str	r5, [sp, #24]
 8014568:	46a9      	mov	r9, r5
 801456a:	2322      	movs	r3, #34	; 0x22
 801456c:	f04f 0a00 	mov.w	sl, #0
 8014570:	f04f 0b00 	mov.w	fp, #0
 8014574:	6023      	str	r3, [r4, #0]
 8014576:	e768      	b.n	801444a <_strtod_l+0x46a>
 8014578:	0801879d 	.word	0x0801879d
 801457c:	0801882b 	.word	0x0801882b
 8014580:	080187a5 	.word	0x080187a5
 8014584:	080187e8 	.word	0x080187e8
 8014588:	080188d0 	.word	0x080188d0
 801458c:	080188a8 	.word	0x080188a8
 8014590:	7ca00000 	.word	0x7ca00000
 8014594:	7ff00000 	.word	0x7ff00000
 8014598:	fff80000 	.word	0xfff80000
 801459c:	7fefffff 	.word	0x7fefffff
 80145a0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80145a4:	f012 0710 	ands.w	r7, r2, #16
 80145a8:	49ab      	ldr	r1, [pc, #684]	; (8014858 <_strtod_l+0x878>)
 80145aa:	bf18      	it	ne
 80145ac:	276a      	movne	r7, #106	; 0x6a
 80145ae:	2000      	movs	r0, #0
 80145b0:	2a00      	cmp	r2, #0
 80145b2:	f300 8113 	bgt.w	80147dc <_strtod_l+0x7fc>
 80145b6:	b108      	cbz	r0, 80145bc <_strtod_l+0x5dc>
 80145b8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80145bc:	b1bf      	cbz	r7, 80145ee <_strtod_l+0x60e>
 80145be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80145c2:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80145c6:	2a00      	cmp	r2, #0
 80145c8:	4659      	mov	r1, fp
 80145ca:	dd10      	ble.n	80145ee <_strtod_l+0x60e>
 80145cc:	2a1f      	cmp	r2, #31
 80145ce:	f340 8113 	ble.w	80147f8 <_strtod_l+0x818>
 80145d2:	2a34      	cmp	r2, #52	; 0x34
 80145d4:	bfde      	ittt	le
 80145d6:	3a20      	suble	r2, #32
 80145d8:	f04f 30ff 	movle.w	r0, #4294967295
 80145dc:	fa00 f202 	lslle.w	r2, r0, r2
 80145e0:	f04f 0a00 	mov.w	sl, #0
 80145e4:	bfcc      	ite	gt
 80145e6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80145ea:	ea02 0b01 	andle.w	fp, r2, r1
 80145ee:	ec4b ab17 	vmov	d7, sl, fp
 80145f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80145f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fa:	d0b2      	beq.n	8014562 <_strtod_l+0x582>
 80145fc:	9a08      	ldr	r2, [sp, #32]
 80145fe:	9200      	str	r2, [sp, #0]
 8014600:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014602:	462a      	mov	r2, r5
 8014604:	4620      	mov	r0, r4
 8014606:	f001 fdcf 	bl	80161a8 <__s2b>
 801460a:	9006      	str	r0, [sp, #24]
 801460c:	2800      	cmp	r0, #0
 801460e:	f43f af12 	beq.w	8014436 <_strtod_l+0x456>
 8014612:	9a04      	ldr	r2, [sp, #16]
 8014614:	9b04      	ldr	r3, [sp, #16]
 8014616:	2a00      	cmp	r2, #0
 8014618:	f1c3 0300 	rsb	r3, r3, #0
 801461c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8014840 <_strtod_l+0x860>
 8014620:	bfa8      	it	ge
 8014622:	2300      	movge	r3, #0
 8014624:	ed9f ab88 	vldr	d10, [pc, #544]	; 8014848 <_strtod_l+0x868>
 8014628:	ed9f bb89 	vldr	d11, [pc, #548]	; 8014850 <_strtod_l+0x870>
 801462c:	930e      	str	r3, [sp, #56]	; 0x38
 801462e:	2500      	movs	r5, #0
 8014630:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014634:	9310      	str	r3, [sp, #64]	; 0x40
 8014636:	46a8      	mov	r8, r5
 8014638:	9b06      	ldr	r3, [sp, #24]
 801463a:	4620      	mov	r0, r4
 801463c:	6859      	ldr	r1, [r3, #4]
 801463e:	f001 fd2d 	bl	801609c <_Balloc>
 8014642:	4681      	mov	r9, r0
 8014644:	2800      	cmp	r0, #0
 8014646:	f43f aefa 	beq.w	801443e <_strtod_l+0x45e>
 801464a:	9b06      	ldr	r3, [sp, #24]
 801464c:	691a      	ldr	r2, [r3, #16]
 801464e:	3202      	adds	r2, #2
 8014650:	f103 010c 	add.w	r1, r3, #12
 8014654:	0092      	lsls	r2, r2, #2
 8014656:	300c      	adds	r0, #12
 8014658:	f7fe fe44 	bl	80132e4 <memcpy>
 801465c:	aa1a      	add	r2, sp, #104	; 0x68
 801465e:	a919      	add	r1, sp, #100	; 0x64
 8014660:	ec4b ab10 	vmov	d0, sl, fp
 8014664:	4620      	mov	r0, r4
 8014666:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801466a:	f002 f859 	bl	8016720 <__d2b>
 801466e:	9018      	str	r0, [sp, #96]	; 0x60
 8014670:	2800      	cmp	r0, #0
 8014672:	f43f aee4 	beq.w	801443e <_strtod_l+0x45e>
 8014676:	2101      	movs	r1, #1
 8014678:	4620      	mov	r0, r4
 801467a:	f001 fe21 	bl	80162c0 <__i2b>
 801467e:	4680      	mov	r8, r0
 8014680:	2800      	cmp	r0, #0
 8014682:	f43f aedc 	beq.w	801443e <_strtod_l+0x45e>
 8014686:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8014688:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801468a:	2e00      	cmp	r6, #0
 801468c:	bfb1      	iteee	lt
 801468e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8014690:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014692:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8014694:	18f3      	addge	r3, r6, r3
 8014696:	bfba      	itte	lt
 8014698:	1b98      	sublt	r0, r3, r6
 801469a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801469c:	9308      	strge	r3, [sp, #32]
 801469e:	eba6 0607 	sub.w	r6, r6, r7
 80146a2:	bfb8      	it	lt
 80146a4:	9308      	strlt	r3, [sp, #32]
 80146a6:	4416      	add	r6, r2
 80146a8:	4b6c      	ldr	r3, [pc, #432]	; (801485c <_strtod_l+0x87c>)
 80146aa:	3e01      	subs	r6, #1
 80146ac:	429e      	cmp	r6, r3
 80146ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80146b2:	f280 80b4 	bge.w	801481e <_strtod_l+0x83e>
 80146b6:	1b9b      	subs	r3, r3, r6
 80146b8:	2b1f      	cmp	r3, #31
 80146ba:	eba2 0203 	sub.w	r2, r2, r3
 80146be:	f04f 0101 	mov.w	r1, #1
 80146c2:	f300 80a0 	bgt.w	8014806 <_strtod_l+0x826>
 80146c6:	fa01 f303 	lsl.w	r3, r1, r3
 80146ca:	9311      	str	r3, [sp, #68]	; 0x44
 80146cc:	2300      	movs	r3, #0
 80146ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80146d0:	9b08      	ldr	r3, [sp, #32]
 80146d2:	4413      	add	r3, r2
 80146d4:	4402      	add	r2, r0
 80146d6:	18be      	adds	r6, r7, r2
 80146d8:	9a08      	ldr	r2, [sp, #32]
 80146da:	429a      	cmp	r2, r3
 80146dc:	bfa8      	it	ge
 80146de:	461a      	movge	r2, r3
 80146e0:	42b2      	cmp	r2, r6
 80146e2:	bfa8      	it	ge
 80146e4:	4632      	movge	r2, r6
 80146e6:	2a00      	cmp	r2, #0
 80146e8:	dd04      	ble.n	80146f4 <_strtod_l+0x714>
 80146ea:	9908      	ldr	r1, [sp, #32]
 80146ec:	1a9b      	subs	r3, r3, r2
 80146ee:	1ab6      	subs	r6, r6, r2
 80146f0:	1a8a      	subs	r2, r1, r2
 80146f2:	9208      	str	r2, [sp, #32]
 80146f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146f6:	b1c2      	cbz	r2, 801472a <_strtod_l+0x74a>
 80146f8:	4641      	mov	r1, r8
 80146fa:	4620      	mov	r0, r4
 80146fc:	9315      	str	r3, [sp, #84]	; 0x54
 80146fe:	f001 fe7f 	bl	8016400 <__pow5mult>
 8014702:	4680      	mov	r8, r0
 8014704:	2800      	cmp	r0, #0
 8014706:	f43f ae9a 	beq.w	801443e <_strtod_l+0x45e>
 801470a:	4601      	mov	r1, r0
 801470c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801470e:	4620      	mov	r0, r4
 8014710:	f001 fddf 	bl	80162d2 <__multiply>
 8014714:	900c      	str	r0, [sp, #48]	; 0x30
 8014716:	2800      	cmp	r0, #0
 8014718:	f43f ae91 	beq.w	801443e <_strtod_l+0x45e>
 801471c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801471e:	4620      	mov	r0, r4
 8014720:	f001 fcf0 	bl	8016104 <_Bfree>
 8014724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014728:	9218      	str	r2, [sp, #96]	; 0x60
 801472a:	2b00      	cmp	r3, #0
 801472c:	dc7c      	bgt.n	8014828 <_strtod_l+0x848>
 801472e:	9b04      	ldr	r3, [sp, #16]
 8014730:	2b00      	cmp	r3, #0
 8014732:	dd08      	ble.n	8014746 <_strtod_l+0x766>
 8014734:	4649      	mov	r1, r9
 8014736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014738:	4620      	mov	r0, r4
 801473a:	f001 fe61 	bl	8016400 <__pow5mult>
 801473e:	4681      	mov	r9, r0
 8014740:	2800      	cmp	r0, #0
 8014742:	f43f ae7c 	beq.w	801443e <_strtod_l+0x45e>
 8014746:	2e00      	cmp	r6, #0
 8014748:	dd08      	ble.n	801475c <_strtod_l+0x77c>
 801474a:	4649      	mov	r1, r9
 801474c:	4632      	mov	r2, r6
 801474e:	4620      	mov	r0, r4
 8014750:	f001 fea4 	bl	801649c <__lshift>
 8014754:	4681      	mov	r9, r0
 8014756:	2800      	cmp	r0, #0
 8014758:	f43f ae71 	beq.w	801443e <_strtod_l+0x45e>
 801475c:	9b08      	ldr	r3, [sp, #32]
 801475e:	2b00      	cmp	r3, #0
 8014760:	dd08      	ble.n	8014774 <_strtod_l+0x794>
 8014762:	4641      	mov	r1, r8
 8014764:	461a      	mov	r2, r3
 8014766:	4620      	mov	r0, r4
 8014768:	f001 fe98 	bl	801649c <__lshift>
 801476c:	4680      	mov	r8, r0
 801476e:	2800      	cmp	r0, #0
 8014770:	f43f ae65 	beq.w	801443e <_strtod_l+0x45e>
 8014774:	464a      	mov	r2, r9
 8014776:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014778:	4620      	mov	r0, r4
 801477a:	f001 fefd 	bl	8016578 <__mdiff>
 801477e:	4605      	mov	r5, r0
 8014780:	2800      	cmp	r0, #0
 8014782:	f43f ae5c 	beq.w	801443e <_strtod_l+0x45e>
 8014786:	68c3      	ldr	r3, [r0, #12]
 8014788:	930c      	str	r3, [sp, #48]	; 0x30
 801478a:	2300      	movs	r3, #0
 801478c:	60c3      	str	r3, [r0, #12]
 801478e:	4641      	mov	r1, r8
 8014790:	f001 fed8 	bl	8016544 <__mcmp>
 8014794:	2800      	cmp	r0, #0
 8014796:	da63      	bge.n	8014860 <_strtod_l+0x880>
 8014798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801479a:	b9e3      	cbnz	r3, 80147d6 <_strtod_l+0x7f6>
 801479c:	f1ba 0f00 	cmp.w	sl, #0
 80147a0:	d119      	bne.n	80147d6 <_strtod_l+0x7f6>
 80147a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80147a6:	b9b3      	cbnz	r3, 80147d6 <_strtod_l+0x7f6>
 80147a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80147ac:	0d1b      	lsrs	r3, r3, #20
 80147ae:	051b      	lsls	r3, r3, #20
 80147b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80147b4:	d90f      	bls.n	80147d6 <_strtod_l+0x7f6>
 80147b6:	696b      	ldr	r3, [r5, #20]
 80147b8:	b913      	cbnz	r3, 80147c0 <_strtod_l+0x7e0>
 80147ba:	692b      	ldr	r3, [r5, #16]
 80147bc:	2b01      	cmp	r3, #1
 80147be:	dd0a      	ble.n	80147d6 <_strtod_l+0x7f6>
 80147c0:	4629      	mov	r1, r5
 80147c2:	2201      	movs	r2, #1
 80147c4:	4620      	mov	r0, r4
 80147c6:	f001 fe69 	bl	801649c <__lshift>
 80147ca:	4641      	mov	r1, r8
 80147cc:	4605      	mov	r5, r0
 80147ce:	f001 feb9 	bl	8016544 <__mcmp>
 80147d2:	2800      	cmp	r0, #0
 80147d4:	dc75      	bgt.n	80148c2 <_strtod_l+0x8e2>
 80147d6:	2f00      	cmp	r7, #0
 80147d8:	d17f      	bne.n	80148da <_strtod_l+0x8fa>
 80147da:	e63a      	b.n	8014452 <_strtod_l+0x472>
 80147dc:	07d6      	lsls	r6, r2, #31
 80147de:	d508      	bpl.n	80147f2 <_strtod_l+0x812>
 80147e0:	ed9d 6b06 	vldr	d6, [sp, #24]
 80147e4:	ed91 7b00 	vldr	d7, [r1]
 80147e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80147ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80147f0:	2001      	movs	r0, #1
 80147f2:	1052      	asrs	r2, r2, #1
 80147f4:	3108      	adds	r1, #8
 80147f6:	e6db      	b.n	80145b0 <_strtod_l+0x5d0>
 80147f8:	f04f 31ff 	mov.w	r1, #4294967295
 80147fc:	fa01 f202 	lsl.w	r2, r1, r2
 8014800:	ea02 0a0a 	and.w	sl, r2, sl
 8014804:	e6f3      	b.n	80145ee <_strtod_l+0x60e>
 8014806:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801480a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801480e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014812:	36e2      	adds	r6, #226	; 0xe2
 8014814:	fa01 f306 	lsl.w	r3, r1, r6
 8014818:	930f      	str	r3, [sp, #60]	; 0x3c
 801481a:	9111      	str	r1, [sp, #68]	; 0x44
 801481c:	e758      	b.n	80146d0 <_strtod_l+0x6f0>
 801481e:	2300      	movs	r3, #0
 8014820:	930f      	str	r3, [sp, #60]	; 0x3c
 8014822:	2301      	movs	r3, #1
 8014824:	9311      	str	r3, [sp, #68]	; 0x44
 8014826:	e753      	b.n	80146d0 <_strtod_l+0x6f0>
 8014828:	461a      	mov	r2, r3
 801482a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801482c:	4620      	mov	r0, r4
 801482e:	f001 fe35 	bl	801649c <__lshift>
 8014832:	9018      	str	r0, [sp, #96]	; 0x60
 8014834:	2800      	cmp	r0, #0
 8014836:	f47f af7a 	bne.w	801472e <_strtod_l+0x74e>
 801483a:	e600      	b.n	801443e <_strtod_l+0x45e>
 801483c:	f3af 8000 	nop.w
 8014840:	94a03595 	.word	0x94a03595
 8014844:	3fdfffff 	.word	0x3fdfffff
 8014848:	35afe535 	.word	0x35afe535
 801484c:	3fe00000 	.word	0x3fe00000
 8014850:	94a03595 	.word	0x94a03595
 8014854:	3fcfffff 	.word	0x3fcfffff
 8014858:	08018800 	.word	0x08018800
 801485c:	fffffc02 	.word	0xfffffc02
 8014860:	f8cd b020 	str.w	fp, [sp, #32]
 8014864:	f040 8085 	bne.w	8014972 <_strtod_l+0x992>
 8014868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801486a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801486e:	b322      	cbz	r2, 80148ba <_strtod_l+0x8da>
 8014870:	4ab7      	ldr	r2, [pc, #732]	; (8014b50 <_strtod_l+0xb70>)
 8014872:	4293      	cmp	r3, r2
 8014874:	d154      	bne.n	8014920 <_strtod_l+0x940>
 8014876:	4651      	mov	r1, sl
 8014878:	b1e7      	cbz	r7, 80148b4 <_strtod_l+0x8d4>
 801487a:	4bb6      	ldr	r3, [pc, #728]	; (8014b54 <_strtod_l+0xb74>)
 801487c:	465a      	mov	r2, fp
 801487e:	4013      	ands	r3, r2
 8014880:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014884:	f04f 32ff 	mov.w	r2, #4294967295
 8014888:	d803      	bhi.n	8014892 <_strtod_l+0x8b2>
 801488a:	0d1b      	lsrs	r3, r3, #20
 801488c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014890:	409a      	lsls	r2, r3
 8014892:	4291      	cmp	r1, r2
 8014894:	d144      	bne.n	8014920 <_strtod_l+0x940>
 8014896:	4bb0      	ldr	r3, [pc, #704]	; (8014b58 <_strtod_l+0xb78>)
 8014898:	9a08      	ldr	r2, [sp, #32]
 801489a:	429a      	cmp	r2, r3
 801489c:	d102      	bne.n	80148a4 <_strtod_l+0x8c4>
 801489e:	3101      	adds	r1, #1
 80148a0:	f43f adcd 	beq.w	801443e <_strtod_l+0x45e>
 80148a4:	4bab      	ldr	r3, [pc, #684]	; (8014b54 <_strtod_l+0xb74>)
 80148a6:	9a08      	ldr	r2, [sp, #32]
 80148a8:	401a      	ands	r2, r3
 80148aa:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80148ae:	f04f 0a00 	mov.w	sl, #0
 80148b2:	e790      	b.n	80147d6 <_strtod_l+0x7f6>
 80148b4:	f04f 32ff 	mov.w	r2, #4294967295
 80148b8:	e7eb      	b.n	8014892 <_strtod_l+0x8b2>
 80148ba:	bb8b      	cbnz	r3, 8014920 <_strtod_l+0x940>
 80148bc:	f1ba 0f00 	cmp.w	sl, #0
 80148c0:	d12e      	bne.n	8014920 <_strtod_l+0x940>
 80148c2:	465b      	mov	r3, fp
 80148c4:	4aa3      	ldr	r2, [pc, #652]	; (8014b54 <_strtod_l+0xb74>)
 80148c6:	b30f      	cbz	r7, 801490c <_strtod_l+0x92c>
 80148c8:	ea02 010b 	and.w	r1, r2, fp
 80148cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80148d0:	dc1c      	bgt.n	801490c <_strtod_l+0x92c>
 80148d2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80148d6:	f77f ae48 	ble.w	801456a <_strtod_l+0x58a>
 80148da:	4aa0      	ldr	r2, [pc, #640]	; (8014b5c <_strtod_l+0xb7c>)
 80148dc:	2300      	movs	r3, #0
 80148de:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80148e2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80148e6:	ec4b ab17 	vmov	d7, sl, fp
 80148ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80148ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80148f2:	9b05      	ldr	r3, [sp, #20]
 80148f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	f47f adaa 	bne.w	8014452 <_strtod_l+0x472>
 80148fe:	9b04      	ldr	r3, [sp, #16]
 8014900:	2b00      	cmp	r3, #0
 8014902:	f47f ada6 	bne.w	8014452 <_strtod_l+0x472>
 8014906:	2322      	movs	r3, #34	; 0x22
 8014908:	6023      	str	r3, [r4, #0]
 801490a:	e5a2      	b.n	8014452 <_strtod_l+0x472>
 801490c:	4013      	ands	r3, r2
 801490e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014912:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014916:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801491a:	f04f 3aff 	mov.w	sl, #4294967295
 801491e:	e75a      	b.n	80147d6 <_strtod_l+0x7f6>
 8014920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014922:	b18b      	cbz	r3, 8014948 <_strtod_l+0x968>
 8014924:	9a08      	ldr	r2, [sp, #32]
 8014926:	4213      	tst	r3, r2
 8014928:	f43f af55 	beq.w	80147d6 <_strtod_l+0x7f6>
 801492c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801492e:	463a      	mov	r2, r7
 8014930:	4650      	mov	r0, sl
 8014932:	4659      	mov	r1, fp
 8014934:	b163      	cbz	r3, 8014950 <_strtod_l+0x970>
 8014936:	f7ff fb39 	bl	8013fac <sulp>
 801493a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801493e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8014942:	ec5b ab17 	vmov	sl, fp, d7
 8014946:	e746      	b.n	80147d6 <_strtod_l+0x7f6>
 8014948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801494a:	ea13 0f0a 	tst.w	r3, sl
 801494e:	e7eb      	b.n	8014928 <_strtod_l+0x948>
 8014950:	f7ff fb2c 	bl	8013fac <sulp>
 8014954:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014958:	ee37 7b40 	vsub.f64	d7, d7, d0
 801495c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014960:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014968:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801496c:	f43f adfd 	beq.w	801456a <_strtod_l+0x58a>
 8014970:	e731      	b.n	80147d6 <_strtod_l+0x7f6>
 8014972:	4641      	mov	r1, r8
 8014974:	4628      	mov	r0, r5
 8014976:	f001 ff22 	bl	80167be <__ratio>
 801497a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801497e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014986:	d869      	bhi.n	8014a5c <_strtod_l+0xa7c>
 8014988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801498a:	2b00      	cmp	r3, #0
 801498c:	d045      	beq.n	8014a1a <_strtod_l+0xa3a>
 801498e:	4b74      	ldr	r3, [pc, #464]	; (8014b60 <_strtod_l+0xb80>)
 8014990:	2200      	movs	r2, #0
 8014992:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8014996:	9808      	ldr	r0, [sp, #32]
 8014998:	496e      	ldr	r1, [pc, #440]	; (8014b54 <_strtod_l+0xb74>)
 801499a:	ea00 0601 	and.w	r6, r0, r1
 801499e:	4871      	ldr	r0, [pc, #452]	; (8014b64 <_strtod_l+0xb84>)
 80149a0:	4286      	cmp	r6, r0
 80149a2:	f040 8089 	bne.w	8014ab8 <_strtod_l+0xad8>
 80149a6:	910f      	str	r1, [sp, #60]	; 0x3c
 80149a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80149ac:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80149b0:	9908      	ldr	r1, [sp, #32]
 80149b2:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 80149b6:	ec4b ab10 	vmov	d0, sl, fp
 80149ba:	ec43 2b1c 	vmov	d12, r2, r3
 80149be:	f001 fe39 	bl	8016634 <__ulp>
 80149c2:	ec4b ab1d 	vmov	d13, sl, fp
 80149c6:	eeac db00 	vfma.f64	d13, d12, d0
 80149ca:	ed8d db08 	vstr	d13, [sp, #32]
 80149ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80149d2:	4a65      	ldr	r2, [pc, #404]	; (8014b68 <_strtod_l+0xb88>)
 80149d4:	4019      	ands	r1, r3
 80149d6:	4291      	cmp	r1, r2
 80149d8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80149dc:	d948      	bls.n	8014a70 <_strtod_l+0xa90>
 80149de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80149e4:	4293      	cmp	r3, r2
 80149e6:	d103      	bne.n	80149f0 <_strtod_l+0xa10>
 80149e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149ea:	3301      	adds	r3, #1
 80149ec:	f43f ad27 	beq.w	801443e <_strtod_l+0x45e>
 80149f0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8014b58 <_strtod_l+0xb78>
 80149f4:	f04f 3aff 	mov.w	sl, #4294967295
 80149f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80149fa:	4620      	mov	r0, r4
 80149fc:	f001 fb82 	bl	8016104 <_Bfree>
 8014a00:	4649      	mov	r1, r9
 8014a02:	4620      	mov	r0, r4
 8014a04:	f001 fb7e 	bl	8016104 <_Bfree>
 8014a08:	4641      	mov	r1, r8
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f001 fb7a 	bl	8016104 <_Bfree>
 8014a10:	4629      	mov	r1, r5
 8014a12:	4620      	mov	r0, r4
 8014a14:	f001 fb76 	bl	8016104 <_Bfree>
 8014a18:	e60e      	b.n	8014638 <_strtod_l+0x658>
 8014a1a:	f1ba 0f00 	cmp.w	sl, #0
 8014a1e:	d113      	bne.n	8014a48 <_strtod_l+0xa68>
 8014a20:	9b08      	ldr	r3, [sp, #32]
 8014a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a26:	b9b3      	cbnz	r3, 8014a56 <_strtod_l+0xa76>
 8014a28:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014a2c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a34:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8014a38:	d401      	bmi.n	8014a3e <_strtod_l+0xa5e>
 8014a3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014a3e:	eeb1 7b48 	vneg.f64	d7, d8
 8014a42:	ec53 2b17 	vmov	r2, r3, d7
 8014a46:	e7a6      	b.n	8014996 <_strtod_l+0x9b6>
 8014a48:	f1ba 0f01 	cmp.w	sl, #1
 8014a4c:	d103      	bne.n	8014a56 <_strtod_l+0xa76>
 8014a4e:	9b08      	ldr	r3, [sp, #32]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	f43f ad8a 	beq.w	801456a <_strtod_l+0x58a>
 8014a56:	2200      	movs	r2, #0
 8014a58:	4b44      	ldr	r3, [pc, #272]	; (8014b6c <_strtod_l+0xb8c>)
 8014a5a:	e79a      	b.n	8014992 <_strtod_l+0x9b2>
 8014a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a5e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8014a62:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d0e9      	beq.n	8014a3e <_strtod_l+0xa5e>
 8014a6a:	ec53 2b18 	vmov	r2, r3, d8
 8014a6e:	e792      	b.n	8014996 <_strtod_l+0x9b6>
 8014a70:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014a74:	2f00      	cmp	r7, #0
 8014a76:	d1bf      	bne.n	80149f8 <_strtod_l+0xa18>
 8014a78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014a7c:	0d1b      	lsrs	r3, r3, #20
 8014a7e:	051b      	lsls	r3, r3, #20
 8014a80:	429e      	cmp	r6, r3
 8014a82:	d1b9      	bne.n	80149f8 <_strtod_l+0xa18>
 8014a84:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8014a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a8a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8014a8e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014a92:	b92b      	cbnz	r3, 8014aa0 <_strtod_l+0xac0>
 8014a94:	f1ba 0f00 	cmp.w	sl, #0
 8014a98:	d102      	bne.n	8014aa0 <_strtod_l+0xac0>
 8014a9a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8014a9e:	b3d2      	cbz	r2, 8014b16 <_strtod_l+0xb36>
 8014aa0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa8:	f53f acd3 	bmi.w	8014452 <_strtod_l+0x472>
 8014aac:	eeb4 8bca 	vcmpe.f64	d8, d10
 8014ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab4:	dda0      	ble.n	80149f8 <_strtod_l+0xa18>
 8014ab6:	e4cc      	b.n	8014452 <_strtod_l+0x472>
 8014ab8:	b1ef      	cbz	r7, 8014af6 <_strtod_l+0xb16>
 8014aba:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8014abe:	d81a      	bhi.n	8014af6 <_strtod_l+0xb16>
 8014ac0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014b48 <_strtod_l+0xb68>
 8014ac4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014acc:	d810      	bhi.n	8014af0 <_strtod_l+0xb10>
 8014ace:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8014ad2:	ee17 3a90 	vmov	r3, s15
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	bf08      	it	eq
 8014ada:	2301      	moveq	r3, #1
 8014adc:	ee07 3a90 	vmov	s15, r3
 8014ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ae2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8014ae6:	b99b      	cbnz	r3, 8014b10 <_strtod_l+0xb30>
 8014ae8:	eeb1 7b48 	vneg.f64	d7, d8
 8014aec:	ec53 2b17 	vmov	r2, r3, d7
 8014af0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8014af4:	1b8b      	subs	r3, r1, r6
 8014af6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014afa:	ec43 2b1c 	vmov	d12, r2, r3
 8014afe:	f001 fd99 	bl	8016634 <__ulp>
 8014b02:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014b06:	eeac 7b00 	vfma.f64	d7, d12, d0
 8014b0a:	ec5b ab17 	vmov	sl, fp, d7
 8014b0e:	e7b1      	b.n	8014a74 <_strtod_l+0xa94>
 8014b10:	ec53 2b18 	vmov	r2, r3, d8
 8014b14:	e7ec      	b.n	8014af0 <_strtod_l+0xb10>
 8014b16:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1e:	f57f af6b 	bpl.w	80149f8 <_strtod_l+0xa18>
 8014b22:	e496      	b.n	8014452 <_strtod_l+0x472>
 8014b24:	2300      	movs	r3, #0
 8014b26:	930d      	str	r3, [sp, #52]	; 0x34
 8014b28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014b2c:	6013      	str	r3, [r2, #0]
 8014b2e:	f7ff ba9d 	b.w	801406c <_strtod_l+0x8c>
 8014b32:	2a65      	cmp	r2, #101	; 0x65
 8014b34:	f04f 0100 	mov.w	r1, #0
 8014b38:	f43f ab97 	beq.w	801426a <_strtod_l+0x28a>
 8014b3c:	2701      	movs	r7, #1
 8014b3e:	460b      	mov	r3, r1
 8014b40:	9704      	str	r7, [sp, #16]
 8014b42:	f7ff bb0a 	b.w	801415a <_strtod_l+0x17a>
 8014b46:	bf00      	nop
 8014b48:	ffc00000 	.word	0xffc00000
 8014b4c:	41dfffff 	.word	0x41dfffff
 8014b50:	000fffff 	.word	0x000fffff
 8014b54:	7ff00000 	.word	0x7ff00000
 8014b58:	7fefffff 	.word	0x7fefffff
 8014b5c:	39500000 	.word	0x39500000
 8014b60:	3ff00000 	.word	0x3ff00000
 8014b64:	7fe00000 	.word	0x7fe00000
 8014b68:	7c9fffff 	.word	0x7c9fffff
 8014b6c:	bff00000 	.word	0xbff00000

08014b70 <_strtod_r>:
 8014b70:	4b05      	ldr	r3, [pc, #20]	; (8014b88 <_strtod_r+0x18>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	b410      	push	{r4}
 8014b76:	6a1b      	ldr	r3, [r3, #32]
 8014b78:	4c04      	ldr	r4, [pc, #16]	; (8014b8c <_strtod_r+0x1c>)
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	bf08      	it	eq
 8014b7e:	4623      	moveq	r3, r4
 8014b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b84:	f7ff ba2c 	b.w	8013fe0 <_strtod_l>
 8014b88:	200001a8 	.word	0x200001a8
 8014b8c:	2000020c 	.word	0x2000020c

08014b90 <_strtol_l.isra.0>:
 8014b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b94:	4680      	mov	r8, r0
 8014b96:	4689      	mov	r9, r1
 8014b98:	4692      	mov	sl, r2
 8014b9a:	461e      	mov	r6, r3
 8014b9c:	460f      	mov	r7, r1
 8014b9e:	463d      	mov	r5, r7
 8014ba0:	9808      	ldr	r0, [sp, #32]
 8014ba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ba6:	f001 fa4b 	bl	8016040 <__locale_ctype_ptr_l>
 8014baa:	4420      	add	r0, r4
 8014bac:	7843      	ldrb	r3, [r0, #1]
 8014bae:	f013 0308 	ands.w	r3, r3, #8
 8014bb2:	d132      	bne.n	8014c1a <_strtol_l.isra.0+0x8a>
 8014bb4:	2c2d      	cmp	r4, #45	; 0x2d
 8014bb6:	d132      	bne.n	8014c1e <_strtol_l.isra.0+0x8e>
 8014bb8:	787c      	ldrb	r4, [r7, #1]
 8014bba:	1cbd      	adds	r5, r7, #2
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	2e00      	cmp	r6, #0
 8014bc0:	d05d      	beq.n	8014c7e <_strtol_l.isra.0+0xee>
 8014bc2:	2e10      	cmp	r6, #16
 8014bc4:	d109      	bne.n	8014bda <_strtol_l.isra.0+0x4a>
 8014bc6:	2c30      	cmp	r4, #48	; 0x30
 8014bc8:	d107      	bne.n	8014bda <_strtol_l.isra.0+0x4a>
 8014bca:	782b      	ldrb	r3, [r5, #0]
 8014bcc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014bd0:	2b58      	cmp	r3, #88	; 0x58
 8014bd2:	d14f      	bne.n	8014c74 <_strtol_l.isra.0+0xe4>
 8014bd4:	786c      	ldrb	r4, [r5, #1]
 8014bd6:	2610      	movs	r6, #16
 8014bd8:	3502      	adds	r5, #2
 8014bda:	2a00      	cmp	r2, #0
 8014bdc:	bf14      	ite	ne
 8014bde:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014be2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014be6:	2700      	movs	r7, #0
 8014be8:	fbb1 fcf6 	udiv	ip, r1, r6
 8014bec:	4638      	mov	r0, r7
 8014bee:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014bf2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014bf6:	2b09      	cmp	r3, #9
 8014bf8:	d817      	bhi.n	8014c2a <_strtol_l.isra.0+0x9a>
 8014bfa:	461c      	mov	r4, r3
 8014bfc:	42a6      	cmp	r6, r4
 8014bfe:	dd23      	ble.n	8014c48 <_strtol_l.isra.0+0xb8>
 8014c00:	1c7b      	adds	r3, r7, #1
 8014c02:	d007      	beq.n	8014c14 <_strtol_l.isra.0+0x84>
 8014c04:	4584      	cmp	ip, r0
 8014c06:	d31c      	bcc.n	8014c42 <_strtol_l.isra.0+0xb2>
 8014c08:	d101      	bne.n	8014c0e <_strtol_l.isra.0+0x7e>
 8014c0a:	45a6      	cmp	lr, r4
 8014c0c:	db19      	blt.n	8014c42 <_strtol_l.isra.0+0xb2>
 8014c0e:	fb00 4006 	mla	r0, r0, r6, r4
 8014c12:	2701      	movs	r7, #1
 8014c14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c18:	e7eb      	b.n	8014bf2 <_strtol_l.isra.0+0x62>
 8014c1a:	462f      	mov	r7, r5
 8014c1c:	e7bf      	b.n	8014b9e <_strtol_l.isra.0+0xe>
 8014c1e:	2c2b      	cmp	r4, #43	; 0x2b
 8014c20:	bf04      	itt	eq
 8014c22:	1cbd      	addeq	r5, r7, #2
 8014c24:	787c      	ldrbeq	r4, [r7, #1]
 8014c26:	461a      	mov	r2, r3
 8014c28:	e7c9      	b.n	8014bbe <_strtol_l.isra.0+0x2e>
 8014c2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014c2e:	2b19      	cmp	r3, #25
 8014c30:	d801      	bhi.n	8014c36 <_strtol_l.isra.0+0xa6>
 8014c32:	3c37      	subs	r4, #55	; 0x37
 8014c34:	e7e2      	b.n	8014bfc <_strtol_l.isra.0+0x6c>
 8014c36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014c3a:	2b19      	cmp	r3, #25
 8014c3c:	d804      	bhi.n	8014c48 <_strtol_l.isra.0+0xb8>
 8014c3e:	3c57      	subs	r4, #87	; 0x57
 8014c40:	e7dc      	b.n	8014bfc <_strtol_l.isra.0+0x6c>
 8014c42:	f04f 37ff 	mov.w	r7, #4294967295
 8014c46:	e7e5      	b.n	8014c14 <_strtol_l.isra.0+0x84>
 8014c48:	1c7b      	adds	r3, r7, #1
 8014c4a:	d108      	bne.n	8014c5e <_strtol_l.isra.0+0xce>
 8014c4c:	2322      	movs	r3, #34	; 0x22
 8014c4e:	f8c8 3000 	str.w	r3, [r8]
 8014c52:	4608      	mov	r0, r1
 8014c54:	f1ba 0f00 	cmp.w	sl, #0
 8014c58:	d107      	bne.n	8014c6a <_strtol_l.isra.0+0xda>
 8014c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c5e:	b102      	cbz	r2, 8014c62 <_strtol_l.isra.0+0xd2>
 8014c60:	4240      	negs	r0, r0
 8014c62:	f1ba 0f00 	cmp.w	sl, #0
 8014c66:	d0f8      	beq.n	8014c5a <_strtol_l.isra.0+0xca>
 8014c68:	b10f      	cbz	r7, 8014c6e <_strtol_l.isra.0+0xde>
 8014c6a:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c6e:	f8ca 9000 	str.w	r9, [sl]
 8014c72:	e7f2      	b.n	8014c5a <_strtol_l.isra.0+0xca>
 8014c74:	2430      	movs	r4, #48	; 0x30
 8014c76:	2e00      	cmp	r6, #0
 8014c78:	d1af      	bne.n	8014bda <_strtol_l.isra.0+0x4a>
 8014c7a:	2608      	movs	r6, #8
 8014c7c:	e7ad      	b.n	8014bda <_strtol_l.isra.0+0x4a>
 8014c7e:	2c30      	cmp	r4, #48	; 0x30
 8014c80:	d0a3      	beq.n	8014bca <_strtol_l.isra.0+0x3a>
 8014c82:	260a      	movs	r6, #10
 8014c84:	e7a9      	b.n	8014bda <_strtol_l.isra.0+0x4a>
	...

08014c88 <_strtol_r>:
 8014c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c8a:	4c06      	ldr	r4, [pc, #24]	; (8014ca4 <_strtol_r+0x1c>)
 8014c8c:	4d06      	ldr	r5, [pc, #24]	; (8014ca8 <_strtol_r+0x20>)
 8014c8e:	6824      	ldr	r4, [r4, #0]
 8014c90:	6a24      	ldr	r4, [r4, #32]
 8014c92:	2c00      	cmp	r4, #0
 8014c94:	bf08      	it	eq
 8014c96:	462c      	moveq	r4, r5
 8014c98:	9400      	str	r4, [sp, #0]
 8014c9a:	f7ff ff79 	bl	8014b90 <_strtol_l.isra.0>
 8014c9e:	b003      	add	sp, #12
 8014ca0:	bd30      	pop	{r4, r5, pc}
 8014ca2:	bf00      	nop
 8014ca4:	200001a8 	.word	0x200001a8
 8014ca8:	2000020c 	.word	0x2000020c

08014cac <quorem>:
 8014cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb0:	6903      	ldr	r3, [r0, #16]
 8014cb2:	690c      	ldr	r4, [r1, #16]
 8014cb4:	42a3      	cmp	r3, r4
 8014cb6:	4680      	mov	r8, r0
 8014cb8:	f2c0 8082 	blt.w	8014dc0 <quorem+0x114>
 8014cbc:	3c01      	subs	r4, #1
 8014cbe:	f101 0714 	add.w	r7, r1, #20
 8014cc2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014cc6:	f100 0614 	add.w	r6, r0, #20
 8014cca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014cce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014cd2:	eb06 030c 	add.w	r3, r6, ip
 8014cd6:	3501      	adds	r5, #1
 8014cd8:	eb07 090c 	add.w	r9, r7, ip
 8014cdc:	9301      	str	r3, [sp, #4]
 8014cde:	fbb0 f5f5 	udiv	r5, r0, r5
 8014ce2:	b395      	cbz	r5, 8014d4a <quorem+0x9e>
 8014ce4:	f04f 0a00 	mov.w	sl, #0
 8014ce8:	4638      	mov	r0, r7
 8014cea:	46b6      	mov	lr, r6
 8014cec:	46d3      	mov	fp, sl
 8014cee:	f850 2b04 	ldr.w	r2, [r0], #4
 8014cf2:	b293      	uxth	r3, r2
 8014cf4:	fb05 a303 	mla	r3, r5, r3, sl
 8014cf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	ebab 0303 	sub.w	r3, fp, r3
 8014d02:	0c12      	lsrs	r2, r2, #16
 8014d04:	f8de b000 	ldr.w	fp, [lr]
 8014d08:	fb05 a202 	mla	r2, r5, r2, sl
 8014d0c:	fa13 f38b 	uxtah	r3, r3, fp
 8014d10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014d14:	fa1f fb82 	uxth.w	fp, r2
 8014d18:	f8de 2000 	ldr.w	r2, [lr]
 8014d1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d24:	b29b      	uxth	r3, r3
 8014d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d2a:	4581      	cmp	r9, r0
 8014d2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014d30:	f84e 3b04 	str.w	r3, [lr], #4
 8014d34:	d2db      	bcs.n	8014cee <quorem+0x42>
 8014d36:	f856 300c 	ldr.w	r3, [r6, ip]
 8014d3a:	b933      	cbnz	r3, 8014d4a <quorem+0x9e>
 8014d3c:	9b01      	ldr	r3, [sp, #4]
 8014d3e:	3b04      	subs	r3, #4
 8014d40:	429e      	cmp	r6, r3
 8014d42:	461a      	mov	r2, r3
 8014d44:	d330      	bcc.n	8014da8 <quorem+0xfc>
 8014d46:	f8c8 4010 	str.w	r4, [r8, #16]
 8014d4a:	4640      	mov	r0, r8
 8014d4c:	f001 fbfa 	bl	8016544 <__mcmp>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	db25      	blt.n	8014da0 <quorem+0xf4>
 8014d54:	3501      	adds	r5, #1
 8014d56:	4630      	mov	r0, r6
 8014d58:	f04f 0c00 	mov.w	ip, #0
 8014d5c:	f857 2b04 	ldr.w	r2, [r7], #4
 8014d60:	f8d0 e000 	ldr.w	lr, [r0]
 8014d64:	b293      	uxth	r3, r2
 8014d66:	ebac 0303 	sub.w	r3, ip, r3
 8014d6a:	0c12      	lsrs	r2, r2, #16
 8014d6c:	fa13 f38e 	uxtah	r3, r3, lr
 8014d70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d7e:	45b9      	cmp	r9, r7
 8014d80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014d84:	f840 3b04 	str.w	r3, [r0], #4
 8014d88:	d2e8      	bcs.n	8014d5c <quorem+0xb0>
 8014d8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014d8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014d92:	b92a      	cbnz	r2, 8014da0 <quorem+0xf4>
 8014d94:	3b04      	subs	r3, #4
 8014d96:	429e      	cmp	r6, r3
 8014d98:	461a      	mov	r2, r3
 8014d9a:	d30b      	bcc.n	8014db4 <quorem+0x108>
 8014d9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8014da0:	4628      	mov	r0, r5
 8014da2:	b003      	add	sp, #12
 8014da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da8:	6812      	ldr	r2, [r2, #0]
 8014daa:	3b04      	subs	r3, #4
 8014dac:	2a00      	cmp	r2, #0
 8014dae:	d1ca      	bne.n	8014d46 <quorem+0x9a>
 8014db0:	3c01      	subs	r4, #1
 8014db2:	e7c5      	b.n	8014d40 <quorem+0x94>
 8014db4:	6812      	ldr	r2, [r2, #0]
 8014db6:	3b04      	subs	r3, #4
 8014db8:	2a00      	cmp	r2, #0
 8014dba:	d1ef      	bne.n	8014d9c <quorem+0xf0>
 8014dbc:	3c01      	subs	r4, #1
 8014dbe:	e7ea      	b.n	8014d96 <quorem+0xea>
 8014dc0:	2000      	movs	r0, #0
 8014dc2:	e7ee      	b.n	8014da2 <quorem+0xf6>
 8014dc4:	0000      	movs	r0, r0
	...

08014dc8 <_dtoa_r>:
 8014dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	ec57 6b10 	vmov	r6, r7, d0
 8014dd0:	b095      	sub	sp, #84	; 0x54
 8014dd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014dd4:	9108      	str	r1, [sp, #32]
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	920a      	str	r2, [sp, #40]	; 0x28
 8014dda:	9311      	str	r3, [sp, #68]	; 0x44
 8014ddc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8014de0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014de4:	b93d      	cbnz	r5, 8014df6 <_dtoa_r+0x2e>
 8014de6:	2010      	movs	r0, #16
 8014de8:	f001 f93e 	bl	8016068 <malloc>
 8014dec:	6260      	str	r0, [r4, #36]	; 0x24
 8014dee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014df2:	6005      	str	r5, [r0, #0]
 8014df4:	60c5      	str	r5, [r0, #12]
 8014df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014df8:	6819      	ldr	r1, [r3, #0]
 8014dfa:	b151      	cbz	r1, 8014e12 <_dtoa_r+0x4a>
 8014dfc:	685a      	ldr	r2, [r3, #4]
 8014dfe:	604a      	str	r2, [r1, #4]
 8014e00:	2301      	movs	r3, #1
 8014e02:	4093      	lsls	r3, r2
 8014e04:	608b      	str	r3, [r1, #8]
 8014e06:	4620      	mov	r0, r4
 8014e08:	f001 f97c 	bl	8016104 <_Bfree>
 8014e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e0e:	2200      	movs	r2, #0
 8014e10:	601a      	str	r2, [r3, #0]
 8014e12:	1e3b      	subs	r3, r7, #0
 8014e14:	bfb9      	ittee	lt
 8014e16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014e1a:	9303      	strlt	r3, [sp, #12]
 8014e1c:	2300      	movge	r3, #0
 8014e1e:	f8c8 3000 	strge.w	r3, [r8]
 8014e22:	9d03      	ldr	r5, [sp, #12]
 8014e24:	4bac      	ldr	r3, [pc, #688]	; (80150d8 <_dtoa_r+0x310>)
 8014e26:	bfbc      	itt	lt
 8014e28:	2201      	movlt	r2, #1
 8014e2a:	f8c8 2000 	strlt.w	r2, [r8]
 8014e2e:	43ab      	bics	r3, r5
 8014e30:	d11b      	bne.n	8014e6a <_dtoa_r+0xa2>
 8014e32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014e34:	f242 730f 	movw	r3, #9999	; 0x270f
 8014e38:	6013      	str	r3, [r2, #0]
 8014e3a:	9b02      	ldr	r3, [sp, #8]
 8014e3c:	b923      	cbnz	r3, 8014e48 <_dtoa_r+0x80>
 8014e3e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014e42:	2d00      	cmp	r5, #0
 8014e44:	f000 84dd 	beq.w	8015802 <_dtoa_r+0xa3a>
 8014e48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e4a:	b953      	cbnz	r3, 8014e62 <_dtoa_r+0x9a>
 8014e4c:	4ba3      	ldr	r3, [pc, #652]	; (80150dc <_dtoa_r+0x314>)
 8014e4e:	e020      	b.n	8014e92 <_dtoa_r+0xca>
 8014e50:	4ba3      	ldr	r3, [pc, #652]	; (80150e0 <_dtoa_r+0x318>)
 8014e52:	9304      	str	r3, [sp, #16]
 8014e54:	3308      	adds	r3, #8
 8014e56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014e58:	6013      	str	r3, [r2, #0]
 8014e5a:	9804      	ldr	r0, [sp, #16]
 8014e5c:	b015      	add	sp, #84	; 0x54
 8014e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e62:	4b9e      	ldr	r3, [pc, #632]	; (80150dc <_dtoa_r+0x314>)
 8014e64:	9304      	str	r3, [sp, #16]
 8014e66:	3303      	adds	r3, #3
 8014e68:	e7f5      	b.n	8014e56 <_dtoa_r+0x8e>
 8014e6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014e6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e76:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e7a:	d10c      	bne.n	8014e96 <_dtoa_r+0xce>
 8014e7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014e7e:	2301      	movs	r3, #1
 8014e80:	6013      	str	r3, [r2, #0]
 8014e82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f000 84b9 	beq.w	80157fc <_dtoa_r+0xa34>
 8014e8a:	4b96      	ldr	r3, [pc, #600]	; (80150e4 <_dtoa_r+0x31c>)
 8014e8c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014e8e:	6013      	str	r3, [r2, #0]
 8014e90:	3b01      	subs	r3, #1
 8014e92:	9304      	str	r3, [sp, #16]
 8014e94:	e7e1      	b.n	8014e5a <_dtoa_r+0x92>
 8014e96:	a913      	add	r1, sp, #76	; 0x4c
 8014e98:	aa12      	add	r2, sp, #72	; 0x48
 8014e9a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8014e9e:	4620      	mov	r0, r4
 8014ea0:	f001 fc3e 	bl	8016720 <__d2b>
 8014ea4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8014ea8:	9001      	str	r0, [sp, #4]
 8014eaa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014eac:	2e00      	cmp	r6, #0
 8014eae:	d046      	beq.n	8014f3e <_dtoa_r+0x176>
 8014eb0:	9805      	ldr	r0, [sp, #20]
 8014eb2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8014eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eba:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8014ebe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014ec2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8014ec6:	2700      	movs	r7, #0
 8014ec8:	ee07 aa90 	vmov	s15, sl
 8014ecc:	ec43 2b16 	vmov	d6, r2, r3
 8014ed0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014ed4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80150c0 <_dtoa_r+0x2f8>
 8014ed8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014edc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014ee0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80150c8 <_dtoa_r+0x300>
 8014ee4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014ee8:	eeb0 7b46 	vmov.f64	d7, d6
 8014eec:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80150d0 <_dtoa_r+0x308>
 8014ef0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014ef4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014ef8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f00:	ee16 ba90 	vmov	fp, s13
 8014f04:	d508      	bpl.n	8014f18 <_dtoa_r+0x150>
 8014f06:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014f0a:	eeb4 6b47 	vcmp.f64	d6, d7
 8014f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f12:	bf18      	it	ne
 8014f14:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014f18:	f1bb 0f16 	cmp.w	fp, #22
 8014f1c:	d834      	bhi.n	8014f88 <_dtoa_r+0x1c0>
 8014f1e:	4b72      	ldr	r3, [pc, #456]	; (80150e8 <_dtoa_r+0x320>)
 8014f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014f24:	ed93 7b00 	vldr	d7, [r3]
 8014f28:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014f2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f34:	dd01      	ble.n	8014f3a <_dtoa_r+0x172>
 8014f36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	e025      	b.n	8014f8a <_dtoa_r+0x1c2>
 8014f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f40:	eb01 0a03 	add.w	sl, r1, r3
 8014f44:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8014f48:	2b20      	cmp	r3, #32
 8014f4a:	dd17      	ble.n	8014f7c <_dtoa_r+0x1b4>
 8014f4c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8014f50:	9a02      	ldr	r2, [sp, #8]
 8014f52:	409d      	lsls	r5, r3
 8014f54:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8014f58:	fa22 f303 	lsr.w	r3, r2, r3
 8014f5c:	432b      	orrs	r3, r5
 8014f5e:	ee07 3a90 	vmov	s15, r3
 8014f62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014f6e:	9805      	ldr	r0, [sp, #20]
 8014f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f74:	2701      	movs	r7, #1
 8014f76:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8014f7a:	e7a5      	b.n	8014ec8 <_dtoa_r+0x100>
 8014f7c:	9a02      	ldr	r2, [sp, #8]
 8014f7e:	f1c3 0320 	rsb	r3, r3, #32
 8014f82:	fa02 f303 	lsl.w	r3, r2, r3
 8014f86:	e7ea      	b.n	8014f5e <_dtoa_r+0x196>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	eba1 0a0a 	sub.w	sl, r1, sl
 8014f8e:	9310      	str	r3, [sp, #64]	; 0x40
 8014f90:	f1ba 0301 	subs.w	r3, sl, #1
 8014f94:	9307      	str	r3, [sp, #28]
 8014f96:	bf43      	ittte	mi
 8014f98:	2300      	movmi	r3, #0
 8014f9a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8014f9e:	9307      	strmi	r3, [sp, #28]
 8014fa0:	f04f 0a00 	movpl.w	sl, #0
 8014fa4:	f1bb 0f00 	cmp.w	fp, #0
 8014fa8:	db19      	blt.n	8014fde <_dtoa_r+0x216>
 8014faa:	9b07      	ldr	r3, [sp, #28]
 8014fac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014fb0:	445b      	add	r3, fp
 8014fb2:	9307      	str	r3, [sp, #28]
 8014fb4:	f04f 0800 	mov.w	r8, #0
 8014fb8:	9b08      	ldr	r3, [sp, #32]
 8014fba:	2b09      	cmp	r3, #9
 8014fbc:	d866      	bhi.n	801508c <_dtoa_r+0x2c4>
 8014fbe:	2b05      	cmp	r3, #5
 8014fc0:	bfc4      	itt	gt
 8014fc2:	3b04      	subgt	r3, #4
 8014fc4:	9308      	strgt	r3, [sp, #32]
 8014fc6:	9b08      	ldr	r3, [sp, #32]
 8014fc8:	f1a3 0302 	sub.w	r3, r3, #2
 8014fcc:	bfcc      	ite	gt
 8014fce:	2500      	movgt	r5, #0
 8014fd0:	2501      	movle	r5, #1
 8014fd2:	2b03      	cmp	r3, #3
 8014fd4:	d866      	bhi.n	80150a4 <_dtoa_r+0x2dc>
 8014fd6:	e8df f003 	tbb	[pc, r3]
 8014fda:	5755      	.short	0x5755
 8014fdc:	4909      	.short	0x4909
 8014fde:	2300      	movs	r3, #0
 8014fe0:	ebaa 0a0b 	sub.w	sl, sl, fp
 8014fe4:	f1cb 0800 	rsb	r8, fp, #0
 8014fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8014fea:	e7e5      	b.n	8014fb8 <_dtoa_r+0x1f0>
 8014fec:	2301      	movs	r3, #1
 8014fee:	9309      	str	r3, [sp, #36]	; 0x24
 8014ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	dd59      	ble.n	80150aa <_dtoa_r+0x2e2>
 8014ff6:	9306      	str	r3, [sp, #24]
 8014ff8:	4699      	mov	r9, r3
 8014ffa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	6072      	str	r2, [r6, #4]
 8015000:	2204      	movs	r2, #4
 8015002:	f102 0014 	add.w	r0, r2, #20
 8015006:	4298      	cmp	r0, r3
 8015008:	6871      	ldr	r1, [r6, #4]
 801500a:	d953      	bls.n	80150b4 <_dtoa_r+0x2ec>
 801500c:	4620      	mov	r0, r4
 801500e:	f001 f845 	bl	801609c <_Balloc>
 8015012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015014:	6030      	str	r0, [r6, #0]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	9304      	str	r3, [sp, #16]
 801501a:	f1b9 0f0e 	cmp.w	r9, #14
 801501e:	f200 80c2 	bhi.w	80151a6 <_dtoa_r+0x3de>
 8015022:	2d00      	cmp	r5, #0
 8015024:	f000 80bf 	beq.w	80151a6 <_dtoa_r+0x3de>
 8015028:	ed9d 7b02 	vldr	d7, [sp, #8]
 801502c:	f1bb 0f00 	cmp.w	fp, #0
 8015030:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8015034:	f340 80e6 	ble.w	8015204 <_dtoa_r+0x43c>
 8015038:	4a2b      	ldr	r2, [pc, #172]	; (80150e8 <_dtoa_r+0x320>)
 801503a:	f00b 030f 	and.w	r3, fp, #15
 801503e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015042:	ed93 7b00 	vldr	d7, [r3]
 8015046:	ea4f 132b 	mov.w	r3, fp, asr #4
 801504a:	06da      	lsls	r2, r3, #27
 801504c:	f140 80d8 	bpl.w	8015200 <_dtoa_r+0x438>
 8015050:	4a26      	ldr	r2, [pc, #152]	; (80150ec <_dtoa_r+0x324>)
 8015052:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8015056:	ed92 6b08 	vldr	d6, [r2, #32]
 801505a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801505e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015062:	f003 030f 	and.w	r3, r3, #15
 8015066:	2203      	movs	r2, #3
 8015068:	4920      	ldr	r1, [pc, #128]	; (80150ec <_dtoa_r+0x324>)
 801506a:	e04a      	b.n	8015102 <_dtoa_r+0x33a>
 801506c:	2301      	movs	r3, #1
 801506e:	9309      	str	r3, [sp, #36]	; 0x24
 8015070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015072:	445b      	add	r3, fp
 8015074:	f103 0901 	add.w	r9, r3, #1
 8015078:	9306      	str	r3, [sp, #24]
 801507a:	464b      	mov	r3, r9
 801507c:	2b01      	cmp	r3, #1
 801507e:	bfb8      	it	lt
 8015080:	2301      	movlt	r3, #1
 8015082:	e7ba      	b.n	8014ffa <_dtoa_r+0x232>
 8015084:	2300      	movs	r3, #0
 8015086:	e7b2      	b.n	8014fee <_dtoa_r+0x226>
 8015088:	2300      	movs	r3, #0
 801508a:	e7f0      	b.n	801506e <_dtoa_r+0x2a6>
 801508c:	2501      	movs	r5, #1
 801508e:	2300      	movs	r3, #0
 8015090:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8015094:	f04f 33ff 	mov.w	r3, #4294967295
 8015098:	9306      	str	r3, [sp, #24]
 801509a:	4699      	mov	r9, r3
 801509c:	2200      	movs	r2, #0
 801509e:	2312      	movs	r3, #18
 80150a0:	920a      	str	r2, [sp, #40]	; 0x28
 80150a2:	e7aa      	b.n	8014ffa <_dtoa_r+0x232>
 80150a4:	2301      	movs	r3, #1
 80150a6:	9309      	str	r3, [sp, #36]	; 0x24
 80150a8:	e7f4      	b.n	8015094 <_dtoa_r+0x2cc>
 80150aa:	2301      	movs	r3, #1
 80150ac:	9306      	str	r3, [sp, #24]
 80150ae:	4699      	mov	r9, r3
 80150b0:	461a      	mov	r2, r3
 80150b2:	e7f5      	b.n	80150a0 <_dtoa_r+0x2d8>
 80150b4:	3101      	adds	r1, #1
 80150b6:	6071      	str	r1, [r6, #4]
 80150b8:	0052      	lsls	r2, r2, #1
 80150ba:	e7a2      	b.n	8015002 <_dtoa_r+0x23a>
 80150bc:	f3af 8000 	nop.w
 80150c0:	636f4361 	.word	0x636f4361
 80150c4:	3fd287a7 	.word	0x3fd287a7
 80150c8:	8b60c8b3 	.word	0x8b60c8b3
 80150cc:	3fc68a28 	.word	0x3fc68a28
 80150d0:	509f79fb 	.word	0x509f79fb
 80150d4:	3fd34413 	.word	0x3fd34413
 80150d8:	7ff00000 	.word	0x7ff00000
 80150dc:	08018831 	.word	0x08018831
 80150e0:	08018828 	.word	0x08018828
 80150e4:	080187a9 	.word	0x080187a9
 80150e8:	080188d0 	.word	0x080188d0
 80150ec:	080188a8 	.word	0x080188a8
 80150f0:	07de      	lsls	r6, r3, #31
 80150f2:	d504      	bpl.n	80150fe <_dtoa_r+0x336>
 80150f4:	ed91 6b00 	vldr	d6, [r1]
 80150f8:	3201      	adds	r2, #1
 80150fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80150fe:	105b      	asrs	r3, r3, #1
 8015100:	3108      	adds	r1, #8
 8015102:	2b00      	cmp	r3, #0
 8015104:	d1f4      	bne.n	80150f0 <_dtoa_r+0x328>
 8015106:	ed9d 6b02 	vldr	d6, [sp, #8]
 801510a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801510e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015114:	2b00      	cmp	r3, #0
 8015116:	f000 80a7 	beq.w	8015268 <_dtoa_r+0x4a0>
 801511a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801511e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015122:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801512a:	f140 809d 	bpl.w	8015268 <_dtoa_r+0x4a0>
 801512e:	f1b9 0f00 	cmp.w	r9, #0
 8015132:	f000 8099 	beq.w	8015268 <_dtoa_r+0x4a0>
 8015136:	9b06      	ldr	r3, [sp, #24]
 8015138:	2b00      	cmp	r3, #0
 801513a:	dd30      	ble.n	801519e <_dtoa_r+0x3d6>
 801513c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015140:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015144:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015148:	9d06      	ldr	r5, [sp, #24]
 801514a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801514e:	3201      	adds	r2, #1
 8015150:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015154:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015158:	ee07 2a90 	vmov	s15, r2
 801515c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015160:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015164:	ed8d 5b02 	vstr	d5, [sp, #8]
 8015168:	9a03      	ldr	r2, [sp, #12]
 801516a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801516e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8015172:	2d00      	cmp	r5, #0
 8015174:	d17b      	bne.n	801526e <_dtoa_r+0x4a6>
 8015176:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801517a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801517e:	ec41 0b17 	vmov	d7, r0, r1
 8015182:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801518a:	f300 8253 	bgt.w	8015634 <_dtoa_r+0x86c>
 801518e:	eeb1 7b47 	vneg.f64	d7, d7
 8015192:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801519a:	f100 8249 	bmi.w	8015630 <_dtoa_r+0x868>
 801519e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80151a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80151a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f2c0 8119 	blt.w	80153e0 <_dtoa_r+0x618>
 80151ae:	f1bb 0f0e 	cmp.w	fp, #14
 80151b2:	f300 8115 	bgt.w	80153e0 <_dtoa_r+0x618>
 80151b6:	4bc3      	ldr	r3, [pc, #780]	; (80154c4 <_dtoa_r+0x6fc>)
 80151b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80151bc:	ed93 6b00 	vldr	d6, [r3]
 80151c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f280 80ba 	bge.w	801533c <_dtoa_r+0x574>
 80151c8:	f1b9 0f00 	cmp.w	r9, #0
 80151cc:	f300 80b6 	bgt.w	801533c <_dtoa_r+0x574>
 80151d0:	f040 822d 	bne.w	801562e <_dtoa_r+0x866>
 80151d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80151d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80151dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80151e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e8:	464d      	mov	r5, r9
 80151ea:	464f      	mov	r7, r9
 80151ec:	f280 8204 	bge.w	80155f8 <_dtoa_r+0x830>
 80151f0:	9b04      	ldr	r3, [sp, #16]
 80151f2:	9a04      	ldr	r2, [sp, #16]
 80151f4:	1c5e      	adds	r6, r3, #1
 80151f6:	2331      	movs	r3, #49	; 0x31
 80151f8:	7013      	strb	r3, [r2, #0]
 80151fa:	f10b 0b01 	add.w	fp, fp, #1
 80151fe:	e1ff      	b.n	8015600 <_dtoa_r+0x838>
 8015200:	2202      	movs	r2, #2
 8015202:	e731      	b.n	8015068 <_dtoa_r+0x2a0>
 8015204:	d02e      	beq.n	8015264 <_dtoa_r+0x49c>
 8015206:	f1cb 0300 	rsb	r3, fp, #0
 801520a:	4aae      	ldr	r2, [pc, #696]	; (80154c4 <_dtoa_r+0x6fc>)
 801520c:	f003 010f 	and.w	r1, r3, #15
 8015210:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015214:	ed92 7b00 	vldr	d7, [r2]
 8015218:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801521c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015220:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015224:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8015228:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801522c:	49a6      	ldr	r1, [pc, #664]	; (80154c8 <_dtoa_r+0x700>)
 801522e:	111b      	asrs	r3, r3, #4
 8015230:	2000      	movs	r0, #0
 8015232:	2202      	movs	r2, #2
 8015234:	b93b      	cbnz	r3, 8015246 <_dtoa_r+0x47e>
 8015236:	2800      	cmp	r0, #0
 8015238:	f43f af6b 	beq.w	8015112 <_dtoa_r+0x34a>
 801523c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015244:	e765      	b.n	8015112 <_dtoa_r+0x34a>
 8015246:	07dd      	lsls	r5, r3, #31
 8015248:	d509      	bpl.n	801525e <_dtoa_r+0x496>
 801524a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801524e:	ed91 7b00 	vldr	d7, [r1]
 8015252:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015256:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801525a:	3201      	adds	r2, #1
 801525c:	2001      	movs	r0, #1
 801525e:	105b      	asrs	r3, r3, #1
 8015260:	3108      	adds	r1, #8
 8015262:	e7e7      	b.n	8015234 <_dtoa_r+0x46c>
 8015264:	2202      	movs	r2, #2
 8015266:	e754      	b.n	8015112 <_dtoa_r+0x34a>
 8015268:	465b      	mov	r3, fp
 801526a:	464d      	mov	r5, r9
 801526c:	e770      	b.n	8015150 <_dtoa_r+0x388>
 801526e:	4a95      	ldr	r2, [pc, #596]	; (80154c4 <_dtoa_r+0x6fc>)
 8015270:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8015274:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801527a:	ec41 0b17 	vmov	d7, r0, r1
 801527e:	b35a      	cbz	r2, 80152d8 <_dtoa_r+0x510>
 8015280:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015284:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015288:	9e04      	ldr	r6, [sp, #16]
 801528a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801528e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015292:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015296:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801529a:	ee14 2a90 	vmov	r2, s9
 801529e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80152a2:	3230      	adds	r2, #48	; 0x30
 80152a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80152a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80152ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152b0:	f806 2b01 	strb.w	r2, [r6], #1
 80152b4:	d43b      	bmi.n	801532e <_dtoa_r+0x566>
 80152b6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80152ba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80152be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c2:	d472      	bmi.n	80153aa <_dtoa_r+0x5e2>
 80152c4:	9a04      	ldr	r2, [sp, #16]
 80152c6:	1ab2      	subs	r2, r6, r2
 80152c8:	4295      	cmp	r5, r2
 80152ca:	f77f af68 	ble.w	801519e <_dtoa_r+0x3d6>
 80152ce:	ee27 7b03 	vmul.f64	d7, d7, d3
 80152d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80152d6:	e7de      	b.n	8015296 <_dtoa_r+0x4ce>
 80152d8:	9a04      	ldr	r2, [sp, #16]
 80152da:	ee24 7b07 	vmul.f64	d7, d4, d7
 80152de:	1956      	adds	r6, r2, r5
 80152e0:	4611      	mov	r1, r2
 80152e2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80152e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80152ea:	ee14 2a90 	vmov	r2, s9
 80152ee:	3230      	adds	r2, #48	; 0x30
 80152f0:	f801 2b01 	strb.w	r2, [r1], #1
 80152f4:	42b1      	cmp	r1, r6
 80152f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80152fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80152fe:	d11a      	bne.n	8015336 <_dtoa_r+0x56e>
 8015300:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015304:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015308:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801530c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015310:	dc4b      	bgt.n	80153aa <_dtoa_r+0x5e2>
 8015312:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531e:	f57f af3e 	bpl.w	801519e <_dtoa_r+0x3d6>
 8015322:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015326:	2a30      	cmp	r2, #48	; 0x30
 8015328:	f106 31ff 	add.w	r1, r6, #4294967295
 801532c:	d001      	beq.n	8015332 <_dtoa_r+0x56a>
 801532e:	469b      	mov	fp, r3
 8015330:	e02a      	b.n	8015388 <_dtoa_r+0x5c0>
 8015332:	460e      	mov	r6, r1
 8015334:	e7f5      	b.n	8015322 <_dtoa_r+0x55a>
 8015336:	ee26 6b03 	vmul.f64	d6, d6, d3
 801533a:	e7d4      	b.n	80152e6 <_dtoa_r+0x51e>
 801533c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015340:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015344:	9e04      	ldr	r6, [sp, #16]
 8015346:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801534a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801534e:	ee15 3a10 	vmov	r3, s10
 8015352:	3330      	adds	r3, #48	; 0x30
 8015354:	f806 3b01 	strb.w	r3, [r6], #1
 8015358:	9b04      	ldr	r3, [sp, #16]
 801535a:	1af3      	subs	r3, r6, r3
 801535c:	4599      	cmp	r9, r3
 801535e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015362:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015366:	d133      	bne.n	80153d0 <_dtoa_r+0x608>
 8015368:	ee37 7b07 	vadd.f64	d7, d7, d7
 801536c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015374:	dc18      	bgt.n	80153a8 <_dtoa_r+0x5e0>
 8015376:	eeb4 7b46 	vcmp.f64	d7, d6
 801537a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537e:	d103      	bne.n	8015388 <_dtoa_r+0x5c0>
 8015380:	ee15 3a10 	vmov	r3, s10
 8015384:	07db      	lsls	r3, r3, #31
 8015386:	d40f      	bmi.n	80153a8 <_dtoa_r+0x5e0>
 8015388:	9901      	ldr	r1, [sp, #4]
 801538a:	4620      	mov	r0, r4
 801538c:	f000 feba 	bl	8016104 <_Bfree>
 8015390:	2300      	movs	r3, #0
 8015392:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015394:	7033      	strb	r3, [r6, #0]
 8015396:	f10b 0301 	add.w	r3, fp, #1
 801539a:	6013      	str	r3, [r2, #0]
 801539c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801539e:	2b00      	cmp	r3, #0
 80153a0:	f43f ad5b 	beq.w	8014e5a <_dtoa_r+0x92>
 80153a4:	601e      	str	r6, [r3, #0]
 80153a6:	e558      	b.n	8014e5a <_dtoa_r+0x92>
 80153a8:	465b      	mov	r3, fp
 80153aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80153ae:	2939      	cmp	r1, #57	; 0x39
 80153b0:	f106 32ff 	add.w	r2, r6, #4294967295
 80153b4:	d106      	bne.n	80153c4 <_dtoa_r+0x5fc>
 80153b6:	9904      	ldr	r1, [sp, #16]
 80153b8:	4291      	cmp	r1, r2
 80153ba:	d107      	bne.n	80153cc <_dtoa_r+0x604>
 80153bc:	2230      	movs	r2, #48	; 0x30
 80153be:	700a      	strb	r2, [r1, #0]
 80153c0:	3301      	adds	r3, #1
 80153c2:	460a      	mov	r2, r1
 80153c4:	7811      	ldrb	r1, [r2, #0]
 80153c6:	3101      	adds	r1, #1
 80153c8:	7011      	strb	r1, [r2, #0]
 80153ca:	e7b0      	b.n	801532e <_dtoa_r+0x566>
 80153cc:	4616      	mov	r6, r2
 80153ce:	e7ec      	b.n	80153aa <_dtoa_r+0x5e2>
 80153d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80153d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80153d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153dc:	d1b3      	bne.n	8015346 <_dtoa_r+0x57e>
 80153de:	e7d3      	b.n	8015388 <_dtoa_r+0x5c0>
 80153e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153e2:	2a00      	cmp	r2, #0
 80153e4:	f000 808d 	beq.w	8015502 <_dtoa_r+0x73a>
 80153e8:	9a08      	ldr	r2, [sp, #32]
 80153ea:	2a01      	cmp	r2, #1
 80153ec:	dc72      	bgt.n	80154d4 <_dtoa_r+0x70c>
 80153ee:	2f00      	cmp	r7, #0
 80153f0:	d06c      	beq.n	80154cc <_dtoa_r+0x704>
 80153f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80153f6:	4645      	mov	r5, r8
 80153f8:	4656      	mov	r6, sl
 80153fa:	9a07      	ldr	r2, [sp, #28]
 80153fc:	2101      	movs	r1, #1
 80153fe:	441a      	add	r2, r3
 8015400:	4620      	mov	r0, r4
 8015402:	449a      	add	sl, r3
 8015404:	9207      	str	r2, [sp, #28]
 8015406:	f000 ff5b 	bl	80162c0 <__i2b>
 801540a:	4607      	mov	r7, r0
 801540c:	2e00      	cmp	r6, #0
 801540e:	dd0b      	ble.n	8015428 <_dtoa_r+0x660>
 8015410:	9b07      	ldr	r3, [sp, #28]
 8015412:	2b00      	cmp	r3, #0
 8015414:	dd08      	ble.n	8015428 <_dtoa_r+0x660>
 8015416:	42b3      	cmp	r3, r6
 8015418:	9a07      	ldr	r2, [sp, #28]
 801541a:	bfa8      	it	ge
 801541c:	4633      	movge	r3, r6
 801541e:	ebaa 0a03 	sub.w	sl, sl, r3
 8015422:	1af6      	subs	r6, r6, r3
 8015424:	1ad3      	subs	r3, r2, r3
 8015426:	9307      	str	r3, [sp, #28]
 8015428:	f1b8 0f00 	cmp.w	r8, #0
 801542c:	d01d      	beq.n	801546a <_dtoa_r+0x6a2>
 801542e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015430:	2b00      	cmp	r3, #0
 8015432:	d06a      	beq.n	801550a <_dtoa_r+0x742>
 8015434:	b18d      	cbz	r5, 801545a <_dtoa_r+0x692>
 8015436:	4639      	mov	r1, r7
 8015438:	462a      	mov	r2, r5
 801543a:	4620      	mov	r0, r4
 801543c:	f000 ffe0 	bl	8016400 <__pow5mult>
 8015440:	9a01      	ldr	r2, [sp, #4]
 8015442:	4601      	mov	r1, r0
 8015444:	4607      	mov	r7, r0
 8015446:	4620      	mov	r0, r4
 8015448:	f000 ff43 	bl	80162d2 <__multiply>
 801544c:	9901      	ldr	r1, [sp, #4]
 801544e:	900c      	str	r0, [sp, #48]	; 0x30
 8015450:	4620      	mov	r0, r4
 8015452:	f000 fe57 	bl	8016104 <_Bfree>
 8015456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015458:	9301      	str	r3, [sp, #4]
 801545a:	ebb8 0205 	subs.w	r2, r8, r5
 801545e:	d004      	beq.n	801546a <_dtoa_r+0x6a2>
 8015460:	9901      	ldr	r1, [sp, #4]
 8015462:	4620      	mov	r0, r4
 8015464:	f000 ffcc 	bl	8016400 <__pow5mult>
 8015468:	9001      	str	r0, [sp, #4]
 801546a:	2101      	movs	r1, #1
 801546c:	4620      	mov	r0, r4
 801546e:	f000 ff27 	bl	80162c0 <__i2b>
 8015472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015474:	4605      	mov	r5, r0
 8015476:	2b00      	cmp	r3, #0
 8015478:	f000 81ca 	beq.w	8015810 <_dtoa_r+0xa48>
 801547c:	461a      	mov	r2, r3
 801547e:	4601      	mov	r1, r0
 8015480:	4620      	mov	r0, r4
 8015482:	f000 ffbd 	bl	8016400 <__pow5mult>
 8015486:	9b08      	ldr	r3, [sp, #32]
 8015488:	2b01      	cmp	r3, #1
 801548a:	4605      	mov	r5, r0
 801548c:	dc44      	bgt.n	8015518 <_dtoa_r+0x750>
 801548e:	9b02      	ldr	r3, [sp, #8]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d13c      	bne.n	801550e <_dtoa_r+0x746>
 8015494:	9b03      	ldr	r3, [sp, #12]
 8015496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801549a:	2b00      	cmp	r3, #0
 801549c:	d137      	bne.n	801550e <_dtoa_r+0x746>
 801549e:	9b03      	ldr	r3, [sp, #12]
 80154a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80154a4:	0d1b      	lsrs	r3, r3, #20
 80154a6:	051b      	lsls	r3, r3, #20
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d033      	beq.n	8015514 <_dtoa_r+0x74c>
 80154ac:	9b07      	ldr	r3, [sp, #28]
 80154ae:	3301      	adds	r3, #1
 80154b0:	f10a 0a01 	add.w	sl, sl, #1
 80154b4:	9307      	str	r3, [sp, #28]
 80154b6:	f04f 0801 	mov.w	r8, #1
 80154ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154bc:	bb73      	cbnz	r3, 801551c <_dtoa_r+0x754>
 80154be:	2001      	movs	r0, #1
 80154c0:	e034      	b.n	801552c <_dtoa_r+0x764>
 80154c2:	bf00      	nop
 80154c4:	080188d0 	.word	0x080188d0
 80154c8:	080188a8 	.word	0x080188a8
 80154cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80154d2:	e790      	b.n	80153f6 <_dtoa_r+0x62e>
 80154d4:	f109 35ff 	add.w	r5, r9, #4294967295
 80154d8:	45a8      	cmp	r8, r5
 80154da:	bfbf      	itttt	lt
 80154dc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80154de:	eba5 0808 	sublt.w	r8, r5, r8
 80154e2:	4443      	addlt	r3, r8
 80154e4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80154e6:	bfb6      	itet	lt
 80154e8:	46a8      	movlt	r8, r5
 80154ea:	eba8 0505 	subge.w	r5, r8, r5
 80154ee:	2500      	movlt	r5, #0
 80154f0:	f1b9 0f00 	cmp.w	r9, #0
 80154f4:	bfb9      	ittee	lt
 80154f6:	ebaa 0609 	sublt.w	r6, sl, r9
 80154fa:	2300      	movlt	r3, #0
 80154fc:	4656      	movge	r6, sl
 80154fe:	464b      	movge	r3, r9
 8015500:	e77b      	b.n	80153fa <_dtoa_r+0x632>
 8015502:	4645      	mov	r5, r8
 8015504:	4656      	mov	r6, sl
 8015506:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015508:	e780      	b.n	801540c <_dtoa_r+0x644>
 801550a:	4642      	mov	r2, r8
 801550c:	e7a8      	b.n	8015460 <_dtoa_r+0x698>
 801550e:	f04f 0800 	mov.w	r8, #0
 8015512:	e7d2      	b.n	80154ba <_dtoa_r+0x6f2>
 8015514:	4698      	mov	r8, r3
 8015516:	e7d0      	b.n	80154ba <_dtoa_r+0x6f2>
 8015518:	f04f 0800 	mov.w	r8, #0
 801551c:	692b      	ldr	r3, [r5, #16]
 801551e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015522:	6918      	ldr	r0, [r3, #16]
 8015524:	f000 fe7e 	bl	8016224 <__hi0bits>
 8015528:	f1c0 0020 	rsb	r0, r0, #32
 801552c:	9b07      	ldr	r3, [sp, #28]
 801552e:	4418      	add	r0, r3
 8015530:	f010 001f 	ands.w	r0, r0, #31
 8015534:	d047      	beq.n	80155c6 <_dtoa_r+0x7fe>
 8015536:	f1c0 0320 	rsb	r3, r0, #32
 801553a:	2b04      	cmp	r3, #4
 801553c:	dd3b      	ble.n	80155b6 <_dtoa_r+0x7ee>
 801553e:	9b07      	ldr	r3, [sp, #28]
 8015540:	f1c0 001c 	rsb	r0, r0, #28
 8015544:	4482      	add	sl, r0
 8015546:	4406      	add	r6, r0
 8015548:	4403      	add	r3, r0
 801554a:	9307      	str	r3, [sp, #28]
 801554c:	f1ba 0f00 	cmp.w	sl, #0
 8015550:	dd05      	ble.n	801555e <_dtoa_r+0x796>
 8015552:	4652      	mov	r2, sl
 8015554:	9901      	ldr	r1, [sp, #4]
 8015556:	4620      	mov	r0, r4
 8015558:	f000 ffa0 	bl	801649c <__lshift>
 801555c:	9001      	str	r0, [sp, #4]
 801555e:	9b07      	ldr	r3, [sp, #28]
 8015560:	2b00      	cmp	r3, #0
 8015562:	dd05      	ble.n	8015570 <_dtoa_r+0x7a8>
 8015564:	4629      	mov	r1, r5
 8015566:	461a      	mov	r2, r3
 8015568:	4620      	mov	r0, r4
 801556a:	f000 ff97 	bl	801649c <__lshift>
 801556e:	4605      	mov	r5, r0
 8015570:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015572:	b353      	cbz	r3, 80155ca <_dtoa_r+0x802>
 8015574:	4629      	mov	r1, r5
 8015576:	9801      	ldr	r0, [sp, #4]
 8015578:	f000 ffe4 	bl	8016544 <__mcmp>
 801557c:	2800      	cmp	r0, #0
 801557e:	da24      	bge.n	80155ca <_dtoa_r+0x802>
 8015580:	2300      	movs	r3, #0
 8015582:	220a      	movs	r2, #10
 8015584:	9901      	ldr	r1, [sp, #4]
 8015586:	4620      	mov	r0, r4
 8015588:	f000 fdd3 	bl	8016132 <__multadd>
 801558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801558e:	9001      	str	r0, [sp, #4]
 8015590:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015594:	2b00      	cmp	r3, #0
 8015596:	f000 8142 	beq.w	801581e <_dtoa_r+0xa56>
 801559a:	2300      	movs	r3, #0
 801559c:	4639      	mov	r1, r7
 801559e:	220a      	movs	r2, #10
 80155a0:	4620      	mov	r0, r4
 80155a2:	f000 fdc6 	bl	8016132 <__multadd>
 80155a6:	9b06      	ldr	r3, [sp, #24]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	4607      	mov	r7, r0
 80155ac:	dc4b      	bgt.n	8015646 <_dtoa_r+0x87e>
 80155ae:	9b08      	ldr	r3, [sp, #32]
 80155b0:	2b02      	cmp	r3, #2
 80155b2:	dd48      	ble.n	8015646 <_dtoa_r+0x87e>
 80155b4:	e011      	b.n	80155da <_dtoa_r+0x812>
 80155b6:	d0c9      	beq.n	801554c <_dtoa_r+0x784>
 80155b8:	9a07      	ldr	r2, [sp, #28]
 80155ba:	331c      	adds	r3, #28
 80155bc:	441a      	add	r2, r3
 80155be:	449a      	add	sl, r3
 80155c0:	441e      	add	r6, r3
 80155c2:	4613      	mov	r3, r2
 80155c4:	e7c1      	b.n	801554a <_dtoa_r+0x782>
 80155c6:	4603      	mov	r3, r0
 80155c8:	e7f6      	b.n	80155b8 <_dtoa_r+0x7f0>
 80155ca:	f1b9 0f00 	cmp.w	r9, #0
 80155ce:	dc34      	bgt.n	801563a <_dtoa_r+0x872>
 80155d0:	9b08      	ldr	r3, [sp, #32]
 80155d2:	2b02      	cmp	r3, #2
 80155d4:	dd31      	ble.n	801563a <_dtoa_r+0x872>
 80155d6:	f8cd 9018 	str.w	r9, [sp, #24]
 80155da:	9b06      	ldr	r3, [sp, #24]
 80155dc:	b963      	cbnz	r3, 80155f8 <_dtoa_r+0x830>
 80155de:	4629      	mov	r1, r5
 80155e0:	2205      	movs	r2, #5
 80155e2:	4620      	mov	r0, r4
 80155e4:	f000 fda5 	bl	8016132 <__multadd>
 80155e8:	4601      	mov	r1, r0
 80155ea:	4605      	mov	r5, r0
 80155ec:	9801      	ldr	r0, [sp, #4]
 80155ee:	f000 ffa9 	bl	8016544 <__mcmp>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	f73f adfc 	bgt.w	80151f0 <_dtoa_r+0x428>
 80155f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155fa:	9e04      	ldr	r6, [sp, #16]
 80155fc:	ea6f 0b03 	mvn.w	fp, r3
 8015600:	f04f 0900 	mov.w	r9, #0
 8015604:	4629      	mov	r1, r5
 8015606:	4620      	mov	r0, r4
 8015608:	f000 fd7c 	bl	8016104 <_Bfree>
 801560c:	2f00      	cmp	r7, #0
 801560e:	f43f aebb 	beq.w	8015388 <_dtoa_r+0x5c0>
 8015612:	f1b9 0f00 	cmp.w	r9, #0
 8015616:	d005      	beq.n	8015624 <_dtoa_r+0x85c>
 8015618:	45b9      	cmp	r9, r7
 801561a:	d003      	beq.n	8015624 <_dtoa_r+0x85c>
 801561c:	4649      	mov	r1, r9
 801561e:	4620      	mov	r0, r4
 8015620:	f000 fd70 	bl	8016104 <_Bfree>
 8015624:	4639      	mov	r1, r7
 8015626:	4620      	mov	r0, r4
 8015628:	f000 fd6c 	bl	8016104 <_Bfree>
 801562c:	e6ac      	b.n	8015388 <_dtoa_r+0x5c0>
 801562e:	2500      	movs	r5, #0
 8015630:	462f      	mov	r7, r5
 8015632:	e7e1      	b.n	80155f8 <_dtoa_r+0x830>
 8015634:	469b      	mov	fp, r3
 8015636:	462f      	mov	r7, r5
 8015638:	e5da      	b.n	80151f0 <_dtoa_r+0x428>
 801563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801563c:	f8cd 9018 	str.w	r9, [sp, #24]
 8015640:	2b00      	cmp	r3, #0
 8015642:	f000 80f3 	beq.w	801582c <_dtoa_r+0xa64>
 8015646:	2e00      	cmp	r6, #0
 8015648:	dd05      	ble.n	8015656 <_dtoa_r+0x88e>
 801564a:	4639      	mov	r1, r7
 801564c:	4632      	mov	r2, r6
 801564e:	4620      	mov	r0, r4
 8015650:	f000 ff24 	bl	801649c <__lshift>
 8015654:	4607      	mov	r7, r0
 8015656:	f1b8 0f00 	cmp.w	r8, #0
 801565a:	d04c      	beq.n	80156f6 <_dtoa_r+0x92e>
 801565c:	6879      	ldr	r1, [r7, #4]
 801565e:	4620      	mov	r0, r4
 8015660:	f000 fd1c 	bl	801609c <_Balloc>
 8015664:	693a      	ldr	r2, [r7, #16]
 8015666:	3202      	adds	r2, #2
 8015668:	4606      	mov	r6, r0
 801566a:	0092      	lsls	r2, r2, #2
 801566c:	f107 010c 	add.w	r1, r7, #12
 8015670:	300c      	adds	r0, #12
 8015672:	f7fd fe37 	bl	80132e4 <memcpy>
 8015676:	2201      	movs	r2, #1
 8015678:	4631      	mov	r1, r6
 801567a:	4620      	mov	r0, r4
 801567c:	f000 ff0e 	bl	801649c <__lshift>
 8015680:	9b02      	ldr	r3, [sp, #8]
 8015682:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015686:	f003 0301 	and.w	r3, r3, #1
 801568a:	46b9      	mov	r9, r7
 801568c:	9307      	str	r3, [sp, #28]
 801568e:	4607      	mov	r7, r0
 8015690:	4629      	mov	r1, r5
 8015692:	9801      	ldr	r0, [sp, #4]
 8015694:	f7ff fb0a 	bl	8014cac <quorem>
 8015698:	4649      	mov	r1, r9
 801569a:	4606      	mov	r6, r0
 801569c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80156a0:	9801      	ldr	r0, [sp, #4]
 80156a2:	f000 ff4f 	bl	8016544 <__mcmp>
 80156a6:	463a      	mov	r2, r7
 80156a8:	9002      	str	r0, [sp, #8]
 80156aa:	4629      	mov	r1, r5
 80156ac:	4620      	mov	r0, r4
 80156ae:	f000 ff63 	bl	8016578 <__mdiff>
 80156b2:	68c3      	ldr	r3, [r0, #12]
 80156b4:	4602      	mov	r2, r0
 80156b6:	bb03      	cbnz	r3, 80156fa <_dtoa_r+0x932>
 80156b8:	4601      	mov	r1, r0
 80156ba:	9009      	str	r0, [sp, #36]	; 0x24
 80156bc:	9801      	ldr	r0, [sp, #4]
 80156be:	f000 ff41 	bl	8016544 <__mcmp>
 80156c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156c4:	4603      	mov	r3, r0
 80156c6:	4611      	mov	r1, r2
 80156c8:	4620      	mov	r0, r4
 80156ca:	9309      	str	r3, [sp, #36]	; 0x24
 80156cc:	f000 fd1a 	bl	8016104 <_Bfree>
 80156d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156d2:	b9a3      	cbnz	r3, 80156fe <_dtoa_r+0x936>
 80156d4:	9a08      	ldr	r2, [sp, #32]
 80156d6:	b992      	cbnz	r2, 80156fe <_dtoa_r+0x936>
 80156d8:	9a07      	ldr	r2, [sp, #28]
 80156da:	b982      	cbnz	r2, 80156fe <_dtoa_r+0x936>
 80156dc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80156e0:	d029      	beq.n	8015736 <_dtoa_r+0x96e>
 80156e2:	9b02      	ldr	r3, [sp, #8]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	dd01      	ble.n	80156ec <_dtoa_r+0x924>
 80156e8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80156ec:	f10a 0601 	add.w	r6, sl, #1
 80156f0:	f88a 8000 	strb.w	r8, [sl]
 80156f4:	e786      	b.n	8015604 <_dtoa_r+0x83c>
 80156f6:	4638      	mov	r0, r7
 80156f8:	e7c2      	b.n	8015680 <_dtoa_r+0x8b8>
 80156fa:	2301      	movs	r3, #1
 80156fc:	e7e3      	b.n	80156c6 <_dtoa_r+0x8fe>
 80156fe:	9a02      	ldr	r2, [sp, #8]
 8015700:	2a00      	cmp	r2, #0
 8015702:	db04      	blt.n	801570e <_dtoa_r+0x946>
 8015704:	d124      	bne.n	8015750 <_dtoa_r+0x988>
 8015706:	9a08      	ldr	r2, [sp, #32]
 8015708:	bb12      	cbnz	r2, 8015750 <_dtoa_r+0x988>
 801570a:	9a07      	ldr	r2, [sp, #28]
 801570c:	bb02      	cbnz	r2, 8015750 <_dtoa_r+0x988>
 801570e:	2b00      	cmp	r3, #0
 8015710:	ddec      	ble.n	80156ec <_dtoa_r+0x924>
 8015712:	2201      	movs	r2, #1
 8015714:	9901      	ldr	r1, [sp, #4]
 8015716:	4620      	mov	r0, r4
 8015718:	f000 fec0 	bl	801649c <__lshift>
 801571c:	4629      	mov	r1, r5
 801571e:	9001      	str	r0, [sp, #4]
 8015720:	f000 ff10 	bl	8016544 <__mcmp>
 8015724:	2800      	cmp	r0, #0
 8015726:	dc03      	bgt.n	8015730 <_dtoa_r+0x968>
 8015728:	d1e0      	bne.n	80156ec <_dtoa_r+0x924>
 801572a:	f018 0f01 	tst.w	r8, #1
 801572e:	d0dd      	beq.n	80156ec <_dtoa_r+0x924>
 8015730:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015734:	d1d8      	bne.n	80156e8 <_dtoa_r+0x920>
 8015736:	2339      	movs	r3, #57	; 0x39
 8015738:	f10a 0601 	add.w	r6, sl, #1
 801573c:	f88a 3000 	strb.w	r3, [sl]
 8015740:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015744:	2b39      	cmp	r3, #57	; 0x39
 8015746:	f106 32ff 	add.w	r2, r6, #4294967295
 801574a:	d04c      	beq.n	80157e6 <_dtoa_r+0xa1e>
 801574c:	3301      	adds	r3, #1
 801574e:	e051      	b.n	80157f4 <_dtoa_r+0xa2c>
 8015750:	2b00      	cmp	r3, #0
 8015752:	f10a 0601 	add.w	r6, sl, #1
 8015756:	dd05      	ble.n	8015764 <_dtoa_r+0x99c>
 8015758:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801575c:	d0eb      	beq.n	8015736 <_dtoa_r+0x96e>
 801575e:	f108 0801 	add.w	r8, r8, #1
 8015762:	e7c5      	b.n	80156f0 <_dtoa_r+0x928>
 8015764:	9b04      	ldr	r3, [sp, #16]
 8015766:	9a06      	ldr	r2, [sp, #24]
 8015768:	f806 8c01 	strb.w	r8, [r6, #-1]
 801576c:	1af3      	subs	r3, r6, r3
 801576e:	4293      	cmp	r3, r2
 8015770:	d021      	beq.n	80157b6 <_dtoa_r+0x9ee>
 8015772:	2300      	movs	r3, #0
 8015774:	220a      	movs	r2, #10
 8015776:	9901      	ldr	r1, [sp, #4]
 8015778:	4620      	mov	r0, r4
 801577a:	f000 fcda 	bl	8016132 <__multadd>
 801577e:	45b9      	cmp	r9, r7
 8015780:	9001      	str	r0, [sp, #4]
 8015782:	f04f 0300 	mov.w	r3, #0
 8015786:	f04f 020a 	mov.w	r2, #10
 801578a:	4649      	mov	r1, r9
 801578c:	4620      	mov	r0, r4
 801578e:	d105      	bne.n	801579c <_dtoa_r+0x9d4>
 8015790:	f000 fccf 	bl	8016132 <__multadd>
 8015794:	4681      	mov	r9, r0
 8015796:	4607      	mov	r7, r0
 8015798:	46b2      	mov	sl, r6
 801579a:	e779      	b.n	8015690 <_dtoa_r+0x8c8>
 801579c:	f000 fcc9 	bl	8016132 <__multadd>
 80157a0:	4639      	mov	r1, r7
 80157a2:	4681      	mov	r9, r0
 80157a4:	2300      	movs	r3, #0
 80157a6:	220a      	movs	r2, #10
 80157a8:	4620      	mov	r0, r4
 80157aa:	f000 fcc2 	bl	8016132 <__multadd>
 80157ae:	4607      	mov	r7, r0
 80157b0:	e7f2      	b.n	8015798 <_dtoa_r+0x9d0>
 80157b2:	f04f 0900 	mov.w	r9, #0
 80157b6:	2201      	movs	r2, #1
 80157b8:	9901      	ldr	r1, [sp, #4]
 80157ba:	4620      	mov	r0, r4
 80157bc:	f000 fe6e 	bl	801649c <__lshift>
 80157c0:	4629      	mov	r1, r5
 80157c2:	9001      	str	r0, [sp, #4]
 80157c4:	f000 febe 	bl	8016544 <__mcmp>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	dcb9      	bgt.n	8015740 <_dtoa_r+0x978>
 80157cc:	d102      	bne.n	80157d4 <_dtoa_r+0xa0c>
 80157ce:	f018 0f01 	tst.w	r8, #1
 80157d2:	d1b5      	bne.n	8015740 <_dtoa_r+0x978>
 80157d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80157d8:	2b30      	cmp	r3, #48	; 0x30
 80157da:	f106 32ff 	add.w	r2, r6, #4294967295
 80157de:	f47f af11 	bne.w	8015604 <_dtoa_r+0x83c>
 80157e2:	4616      	mov	r6, r2
 80157e4:	e7f6      	b.n	80157d4 <_dtoa_r+0xa0c>
 80157e6:	9b04      	ldr	r3, [sp, #16]
 80157e8:	4293      	cmp	r3, r2
 80157ea:	d105      	bne.n	80157f8 <_dtoa_r+0xa30>
 80157ec:	9a04      	ldr	r2, [sp, #16]
 80157ee:	f10b 0b01 	add.w	fp, fp, #1
 80157f2:	2331      	movs	r3, #49	; 0x31
 80157f4:	7013      	strb	r3, [r2, #0]
 80157f6:	e705      	b.n	8015604 <_dtoa_r+0x83c>
 80157f8:	4616      	mov	r6, r2
 80157fa:	e7a1      	b.n	8015740 <_dtoa_r+0x978>
 80157fc:	4b16      	ldr	r3, [pc, #88]	; (8015858 <_dtoa_r+0xa90>)
 80157fe:	f7ff bb48 	b.w	8014e92 <_dtoa_r+0xca>
 8015802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015804:	2b00      	cmp	r3, #0
 8015806:	f47f ab23 	bne.w	8014e50 <_dtoa_r+0x88>
 801580a:	4b14      	ldr	r3, [pc, #80]	; (801585c <_dtoa_r+0xa94>)
 801580c:	f7ff bb41 	b.w	8014e92 <_dtoa_r+0xca>
 8015810:	9b08      	ldr	r3, [sp, #32]
 8015812:	2b01      	cmp	r3, #1
 8015814:	f77f ae3b 	ble.w	801548e <_dtoa_r+0x6c6>
 8015818:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801581c:	e64f      	b.n	80154be <_dtoa_r+0x6f6>
 801581e:	9b06      	ldr	r3, [sp, #24]
 8015820:	2b00      	cmp	r3, #0
 8015822:	dc03      	bgt.n	801582c <_dtoa_r+0xa64>
 8015824:	9b08      	ldr	r3, [sp, #32]
 8015826:	2b02      	cmp	r3, #2
 8015828:	f73f aed7 	bgt.w	80155da <_dtoa_r+0x812>
 801582c:	9e04      	ldr	r6, [sp, #16]
 801582e:	9801      	ldr	r0, [sp, #4]
 8015830:	4629      	mov	r1, r5
 8015832:	f7ff fa3b 	bl	8014cac <quorem>
 8015836:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801583a:	f806 8b01 	strb.w	r8, [r6], #1
 801583e:	9b04      	ldr	r3, [sp, #16]
 8015840:	9a06      	ldr	r2, [sp, #24]
 8015842:	1af3      	subs	r3, r6, r3
 8015844:	429a      	cmp	r2, r3
 8015846:	ddb4      	ble.n	80157b2 <_dtoa_r+0x9ea>
 8015848:	2300      	movs	r3, #0
 801584a:	220a      	movs	r2, #10
 801584c:	9901      	ldr	r1, [sp, #4]
 801584e:	4620      	mov	r0, r4
 8015850:	f000 fc6f 	bl	8016132 <__multadd>
 8015854:	9001      	str	r0, [sp, #4]
 8015856:	e7ea      	b.n	801582e <_dtoa_r+0xa66>
 8015858:	080187a8 	.word	0x080187a8
 801585c:	08018828 	.word	0x08018828

08015860 <std>:
 8015860:	2300      	movs	r3, #0
 8015862:	b510      	push	{r4, lr}
 8015864:	4604      	mov	r4, r0
 8015866:	e9c0 3300 	strd	r3, r3, [r0]
 801586a:	6083      	str	r3, [r0, #8]
 801586c:	8181      	strh	r1, [r0, #12]
 801586e:	6643      	str	r3, [r0, #100]	; 0x64
 8015870:	81c2      	strh	r2, [r0, #14]
 8015872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015876:	6183      	str	r3, [r0, #24]
 8015878:	4619      	mov	r1, r3
 801587a:	2208      	movs	r2, #8
 801587c:	305c      	adds	r0, #92	; 0x5c
 801587e:	f7fd fd3c 	bl	80132fa <memset>
 8015882:	4b05      	ldr	r3, [pc, #20]	; (8015898 <std+0x38>)
 8015884:	6263      	str	r3, [r4, #36]	; 0x24
 8015886:	4b05      	ldr	r3, [pc, #20]	; (801589c <std+0x3c>)
 8015888:	62a3      	str	r3, [r4, #40]	; 0x28
 801588a:	4b05      	ldr	r3, [pc, #20]	; (80158a0 <std+0x40>)
 801588c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801588e:	4b05      	ldr	r3, [pc, #20]	; (80158a4 <std+0x44>)
 8015890:	6224      	str	r4, [r4, #32]
 8015892:	6323      	str	r3, [r4, #48]	; 0x30
 8015894:	bd10      	pop	{r4, pc}
 8015896:	bf00      	nop
 8015898:	08016f4d 	.word	0x08016f4d
 801589c:	08016f6f 	.word	0x08016f6f
 80158a0:	08016fa7 	.word	0x08016fa7
 80158a4:	08016fcb 	.word	0x08016fcb

080158a8 <_cleanup_r>:
 80158a8:	4901      	ldr	r1, [pc, #4]	; (80158b0 <_cleanup_r+0x8>)
 80158aa:	f000 b885 	b.w	80159b8 <_fwalk_reent>
 80158ae:	bf00      	nop
 80158b0:	080172e5 	.word	0x080172e5

080158b4 <__sfmoreglue>:
 80158b4:	b570      	push	{r4, r5, r6, lr}
 80158b6:	1e4a      	subs	r2, r1, #1
 80158b8:	2568      	movs	r5, #104	; 0x68
 80158ba:	4355      	muls	r5, r2
 80158bc:	460e      	mov	r6, r1
 80158be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158c2:	f001 f847 	bl	8016954 <_malloc_r>
 80158c6:	4604      	mov	r4, r0
 80158c8:	b140      	cbz	r0, 80158dc <__sfmoreglue+0x28>
 80158ca:	2100      	movs	r1, #0
 80158cc:	e9c0 1600 	strd	r1, r6, [r0]
 80158d0:	300c      	adds	r0, #12
 80158d2:	60a0      	str	r0, [r4, #8]
 80158d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80158d8:	f7fd fd0f 	bl	80132fa <memset>
 80158dc:	4620      	mov	r0, r4
 80158de:	bd70      	pop	{r4, r5, r6, pc}

080158e0 <__sinit>:
 80158e0:	6983      	ldr	r3, [r0, #24]
 80158e2:	b510      	push	{r4, lr}
 80158e4:	4604      	mov	r4, r0
 80158e6:	bb33      	cbnz	r3, 8015936 <__sinit+0x56>
 80158e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80158ec:	6503      	str	r3, [r0, #80]	; 0x50
 80158ee:	4b12      	ldr	r3, [pc, #72]	; (8015938 <__sinit+0x58>)
 80158f0:	4a12      	ldr	r2, [pc, #72]	; (801593c <__sinit+0x5c>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	6282      	str	r2, [r0, #40]	; 0x28
 80158f6:	4298      	cmp	r0, r3
 80158f8:	bf04      	itt	eq
 80158fa:	2301      	moveq	r3, #1
 80158fc:	6183      	streq	r3, [r0, #24]
 80158fe:	f000 f81f 	bl	8015940 <__sfp>
 8015902:	6060      	str	r0, [r4, #4]
 8015904:	4620      	mov	r0, r4
 8015906:	f000 f81b 	bl	8015940 <__sfp>
 801590a:	60a0      	str	r0, [r4, #8]
 801590c:	4620      	mov	r0, r4
 801590e:	f000 f817 	bl	8015940 <__sfp>
 8015912:	2200      	movs	r2, #0
 8015914:	60e0      	str	r0, [r4, #12]
 8015916:	2104      	movs	r1, #4
 8015918:	6860      	ldr	r0, [r4, #4]
 801591a:	f7ff ffa1 	bl	8015860 <std>
 801591e:	2201      	movs	r2, #1
 8015920:	2109      	movs	r1, #9
 8015922:	68a0      	ldr	r0, [r4, #8]
 8015924:	f7ff ff9c 	bl	8015860 <std>
 8015928:	2202      	movs	r2, #2
 801592a:	2112      	movs	r1, #18
 801592c:	68e0      	ldr	r0, [r4, #12]
 801592e:	f7ff ff97 	bl	8015860 <std>
 8015932:	2301      	movs	r3, #1
 8015934:	61a3      	str	r3, [r4, #24]
 8015936:	bd10      	pop	{r4, pc}
 8015938:	08018794 	.word	0x08018794
 801593c:	080158a9 	.word	0x080158a9

08015940 <__sfp>:
 8015940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015942:	4b1b      	ldr	r3, [pc, #108]	; (80159b0 <__sfp+0x70>)
 8015944:	681e      	ldr	r6, [r3, #0]
 8015946:	69b3      	ldr	r3, [r6, #24]
 8015948:	4607      	mov	r7, r0
 801594a:	b913      	cbnz	r3, 8015952 <__sfp+0x12>
 801594c:	4630      	mov	r0, r6
 801594e:	f7ff ffc7 	bl	80158e0 <__sinit>
 8015952:	3648      	adds	r6, #72	; 0x48
 8015954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015958:	3b01      	subs	r3, #1
 801595a:	d503      	bpl.n	8015964 <__sfp+0x24>
 801595c:	6833      	ldr	r3, [r6, #0]
 801595e:	b133      	cbz	r3, 801596e <__sfp+0x2e>
 8015960:	6836      	ldr	r6, [r6, #0]
 8015962:	e7f7      	b.n	8015954 <__sfp+0x14>
 8015964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015968:	b16d      	cbz	r5, 8015986 <__sfp+0x46>
 801596a:	3468      	adds	r4, #104	; 0x68
 801596c:	e7f4      	b.n	8015958 <__sfp+0x18>
 801596e:	2104      	movs	r1, #4
 8015970:	4638      	mov	r0, r7
 8015972:	f7ff ff9f 	bl	80158b4 <__sfmoreglue>
 8015976:	6030      	str	r0, [r6, #0]
 8015978:	2800      	cmp	r0, #0
 801597a:	d1f1      	bne.n	8015960 <__sfp+0x20>
 801597c:	230c      	movs	r3, #12
 801597e:	603b      	str	r3, [r7, #0]
 8015980:	4604      	mov	r4, r0
 8015982:	4620      	mov	r0, r4
 8015984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015986:	4b0b      	ldr	r3, [pc, #44]	; (80159b4 <__sfp+0x74>)
 8015988:	6665      	str	r5, [r4, #100]	; 0x64
 801598a:	e9c4 5500 	strd	r5, r5, [r4]
 801598e:	60a5      	str	r5, [r4, #8]
 8015990:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015994:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015998:	2208      	movs	r2, #8
 801599a:	4629      	mov	r1, r5
 801599c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80159a0:	f7fd fcab 	bl	80132fa <memset>
 80159a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80159a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80159ac:	e7e9      	b.n	8015982 <__sfp+0x42>
 80159ae:	bf00      	nop
 80159b0:	08018794 	.word	0x08018794
 80159b4:	ffff0001 	.word	0xffff0001

080159b8 <_fwalk_reent>:
 80159b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159bc:	4680      	mov	r8, r0
 80159be:	4689      	mov	r9, r1
 80159c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80159c4:	2600      	movs	r6, #0
 80159c6:	b914      	cbnz	r4, 80159ce <_fwalk_reent+0x16>
 80159c8:	4630      	mov	r0, r6
 80159ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80159d2:	3f01      	subs	r7, #1
 80159d4:	d501      	bpl.n	80159da <_fwalk_reent+0x22>
 80159d6:	6824      	ldr	r4, [r4, #0]
 80159d8:	e7f5      	b.n	80159c6 <_fwalk_reent+0xe>
 80159da:	89ab      	ldrh	r3, [r5, #12]
 80159dc:	2b01      	cmp	r3, #1
 80159de:	d907      	bls.n	80159f0 <_fwalk_reent+0x38>
 80159e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159e4:	3301      	adds	r3, #1
 80159e6:	d003      	beq.n	80159f0 <_fwalk_reent+0x38>
 80159e8:	4629      	mov	r1, r5
 80159ea:	4640      	mov	r0, r8
 80159ec:	47c8      	blx	r9
 80159ee:	4306      	orrs	r6, r0
 80159f0:	3568      	adds	r5, #104	; 0x68
 80159f2:	e7ee      	b.n	80159d2 <_fwalk_reent+0x1a>

080159f4 <rshift>:
 80159f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159f6:	6906      	ldr	r6, [r0, #16]
 80159f8:	114b      	asrs	r3, r1, #5
 80159fa:	429e      	cmp	r6, r3
 80159fc:	f100 0414 	add.w	r4, r0, #20
 8015a00:	dd30      	ble.n	8015a64 <rshift+0x70>
 8015a02:	f011 011f 	ands.w	r1, r1, #31
 8015a06:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015a0a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015a0e:	d108      	bne.n	8015a22 <rshift+0x2e>
 8015a10:	4621      	mov	r1, r4
 8015a12:	42b2      	cmp	r2, r6
 8015a14:	460b      	mov	r3, r1
 8015a16:	d211      	bcs.n	8015a3c <rshift+0x48>
 8015a18:	f852 3b04 	ldr.w	r3, [r2], #4
 8015a1c:	f841 3b04 	str.w	r3, [r1], #4
 8015a20:	e7f7      	b.n	8015a12 <rshift+0x1e>
 8015a22:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015a26:	f1c1 0c20 	rsb	ip, r1, #32
 8015a2a:	40cd      	lsrs	r5, r1
 8015a2c:	3204      	adds	r2, #4
 8015a2e:	4623      	mov	r3, r4
 8015a30:	42b2      	cmp	r2, r6
 8015a32:	4617      	mov	r7, r2
 8015a34:	d30c      	bcc.n	8015a50 <rshift+0x5c>
 8015a36:	601d      	str	r5, [r3, #0]
 8015a38:	b105      	cbz	r5, 8015a3c <rshift+0x48>
 8015a3a:	3304      	adds	r3, #4
 8015a3c:	1b1a      	subs	r2, r3, r4
 8015a3e:	42a3      	cmp	r3, r4
 8015a40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a44:	bf08      	it	eq
 8015a46:	2300      	moveq	r3, #0
 8015a48:	6102      	str	r2, [r0, #16]
 8015a4a:	bf08      	it	eq
 8015a4c:	6143      	streq	r3, [r0, #20]
 8015a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a50:	683f      	ldr	r7, [r7, #0]
 8015a52:	fa07 f70c 	lsl.w	r7, r7, ip
 8015a56:	433d      	orrs	r5, r7
 8015a58:	f843 5b04 	str.w	r5, [r3], #4
 8015a5c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015a60:	40cd      	lsrs	r5, r1
 8015a62:	e7e5      	b.n	8015a30 <rshift+0x3c>
 8015a64:	4623      	mov	r3, r4
 8015a66:	e7e9      	b.n	8015a3c <rshift+0x48>

08015a68 <__hexdig_fun>:
 8015a68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015a6c:	2b09      	cmp	r3, #9
 8015a6e:	d802      	bhi.n	8015a76 <__hexdig_fun+0xe>
 8015a70:	3820      	subs	r0, #32
 8015a72:	b2c0      	uxtb	r0, r0
 8015a74:	4770      	bx	lr
 8015a76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015a7a:	2b05      	cmp	r3, #5
 8015a7c:	d801      	bhi.n	8015a82 <__hexdig_fun+0x1a>
 8015a7e:	3847      	subs	r0, #71	; 0x47
 8015a80:	e7f7      	b.n	8015a72 <__hexdig_fun+0xa>
 8015a82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015a86:	2b05      	cmp	r3, #5
 8015a88:	d801      	bhi.n	8015a8e <__hexdig_fun+0x26>
 8015a8a:	3827      	subs	r0, #39	; 0x27
 8015a8c:	e7f1      	b.n	8015a72 <__hexdig_fun+0xa>
 8015a8e:	2000      	movs	r0, #0
 8015a90:	4770      	bx	lr

08015a92 <__gethex>:
 8015a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a96:	b08b      	sub	sp, #44	; 0x2c
 8015a98:	468a      	mov	sl, r1
 8015a9a:	9002      	str	r0, [sp, #8]
 8015a9c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015a9e:	9306      	str	r3, [sp, #24]
 8015aa0:	4690      	mov	r8, r2
 8015aa2:	f000 fad0 	bl	8016046 <__localeconv_l>
 8015aa6:	6803      	ldr	r3, [r0, #0]
 8015aa8:	9303      	str	r3, [sp, #12]
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7ea fbc8 	bl	8000240 <strlen>
 8015ab0:	9b03      	ldr	r3, [sp, #12]
 8015ab2:	9001      	str	r0, [sp, #4]
 8015ab4:	4403      	add	r3, r0
 8015ab6:	f04f 0b00 	mov.w	fp, #0
 8015aba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015abe:	9307      	str	r3, [sp, #28]
 8015ac0:	f8da 3000 	ldr.w	r3, [sl]
 8015ac4:	3302      	adds	r3, #2
 8015ac6:	461f      	mov	r7, r3
 8015ac8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015acc:	2830      	cmp	r0, #48	; 0x30
 8015ace:	d06c      	beq.n	8015baa <__gethex+0x118>
 8015ad0:	f7ff ffca 	bl	8015a68 <__hexdig_fun>
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d16a      	bne.n	8015bb0 <__gethex+0x11e>
 8015ada:	9a01      	ldr	r2, [sp, #4]
 8015adc:	9903      	ldr	r1, [sp, #12]
 8015ade:	4638      	mov	r0, r7
 8015ae0:	f001 fa77 	bl	8016fd2 <strncmp>
 8015ae4:	2800      	cmp	r0, #0
 8015ae6:	d166      	bne.n	8015bb6 <__gethex+0x124>
 8015ae8:	9b01      	ldr	r3, [sp, #4]
 8015aea:	5cf8      	ldrb	r0, [r7, r3]
 8015aec:	18fe      	adds	r6, r7, r3
 8015aee:	f7ff ffbb 	bl	8015a68 <__hexdig_fun>
 8015af2:	2800      	cmp	r0, #0
 8015af4:	d062      	beq.n	8015bbc <__gethex+0x12a>
 8015af6:	4633      	mov	r3, r6
 8015af8:	7818      	ldrb	r0, [r3, #0]
 8015afa:	2830      	cmp	r0, #48	; 0x30
 8015afc:	461f      	mov	r7, r3
 8015afe:	f103 0301 	add.w	r3, r3, #1
 8015b02:	d0f9      	beq.n	8015af8 <__gethex+0x66>
 8015b04:	f7ff ffb0 	bl	8015a68 <__hexdig_fun>
 8015b08:	fab0 f580 	clz	r5, r0
 8015b0c:	096d      	lsrs	r5, r5, #5
 8015b0e:	4634      	mov	r4, r6
 8015b10:	f04f 0b01 	mov.w	fp, #1
 8015b14:	463a      	mov	r2, r7
 8015b16:	4616      	mov	r6, r2
 8015b18:	3201      	adds	r2, #1
 8015b1a:	7830      	ldrb	r0, [r6, #0]
 8015b1c:	f7ff ffa4 	bl	8015a68 <__hexdig_fun>
 8015b20:	2800      	cmp	r0, #0
 8015b22:	d1f8      	bne.n	8015b16 <__gethex+0x84>
 8015b24:	9a01      	ldr	r2, [sp, #4]
 8015b26:	9903      	ldr	r1, [sp, #12]
 8015b28:	4630      	mov	r0, r6
 8015b2a:	f001 fa52 	bl	8016fd2 <strncmp>
 8015b2e:	b950      	cbnz	r0, 8015b46 <__gethex+0xb4>
 8015b30:	b954      	cbnz	r4, 8015b48 <__gethex+0xb6>
 8015b32:	9b01      	ldr	r3, [sp, #4]
 8015b34:	18f4      	adds	r4, r6, r3
 8015b36:	4622      	mov	r2, r4
 8015b38:	4616      	mov	r6, r2
 8015b3a:	3201      	adds	r2, #1
 8015b3c:	7830      	ldrb	r0, [r6, #0]
 8015b3e:	f7ff ff93 	bl	8015a68 <__hexdig_fun>
 8015b42:	2800      	cmp	r0, #0
 8015b44:	d1f8      	bne.n	8015b38 <__gethex+0xa6>
 8015b46:	b10c      	cbz	r4, 8015b4c <__gethex+0xba>
 8015b48:	1ba4      	subs	r4, r4, r6
 8015b4a:	00a4      	lsls	r4, r4, #2
 8015b4c:	7833      	ldrb	r3, [r6, #0]
 8015b4e:	2b50      	cmp	r3, #80	; 0x50
 8015b50:	d001      	beq.n	8015b56 <__gethex+0xc4>
 8015b52:	2b70      	cmp	r3, #112	; 0x70
 8015b54:	d140      	bne.n	8015bd8 <__gethex+0x146>
 8015b56:	7873      	ldrb	r3, [r6, #1]
 8015b58:	2b2b      	cmp	r3, #43	; 0x2b
 8015b5a:	d031      	beq.n	8015bc0 <__gethex+0x12e>
 8015b5c:	2b2d      	cmp	r3, #45	; 0x2d
 8015b5e:	d033      	beq.n	8015bc8 <__gethex+0x136>
 8015b60:	1c71      	adds	r1, r6, #1
 8015b62:	f04f 0900 	mov.w	r9, #0
 8015b66:	7808      	ldrb	r0, [r1, #0]
 8015b68:	f7ff ff7e 	bl	8015a68 <__hexdig_fun>
 8015b6c:	1e43      	subs	r3, r0, #1
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	2b18      	cmp	r3, #24
 8015b72:	d831      	bhi.n	8015bd8 <__gethex+0x146>
 8015b74:	f1a0 0210 	sub.w	r2, r0, #16
 8015b78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015b7c:	f7ff ff74 	bl	8015a68 <__hexdig_fun>
 8015b80:	1e43      	subs	r3, r0, #1
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	2b18      	cmp	r3, #24
 8015b86:	d922      	bls.n	8015bce <__gethex+0x13c>
 8015b88:	f1b9 0f00 	cmp.w	r9, #0
 8015b8c:	d000      	beq.n	8015b90 <__gethex+0xfe>
 8015b8e:	4252      	negs	r2, r2
 8015b90:	4414      	add	r4, r2
 8015b92:	f8ca 1000 	str.w	r1, [sl]
 8015b96:	b30d      	cbz	r5, 8015bdc <__gethex+0x14a>
 8015b98:	f1bb 0f00 	cmp.w	fp, #0
 8015b9c:	bf0c      	ite	eq
 8015b9e:	2706      	moveq	r7, #6
 8015ba0:	2700      	movne	r7, #0
 8015ba2:	4638      	mov	r0, r7
 8015ba4:	b00b      	add	sp, #44	; 0x2c
 8015ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015baa:	f10b 0b01 	add.w	fp, fp, #1
 8015bae:	e78a      	b.n	8015ac6 <__gethex+0x34>
 8015bb0:	2500      	movs	r5, #0
 8015bb2:	462c      	mov	r4, r5
 8015bb4:	e7ae      	b.n	8015b14 <__gethex+0x82>
 8015bb6:	463e      	mov	r6, r7
 8015bb8:	2501      	movs	r5, #1
 8015bba:	e7c7      	b.n	8015b4c <__gethex+0xba>
 8015bbc:	4604      	mov	r4, r0
 8015bbe:	e7fb      	b.n	8015bb8 <__gethex+0x126>
 8015bc0:	f04f 0900 	mov.w	r9, #0
 8015bc4:	1cb1      	adds	r1, r6, #2
 8015bc6:	e7ce      	b.n	8015b66 <__gethex+0xd4>
 8015bc8:	f04f 0901 	mov.w	r9, #1
 8015bcc:	e7fa      	b.n	8015bc4 <__gethex+0x132>
 8015bce:	230a      	movs	r3, #10
 8015bd0:	fb03 0202 	mla	r2, r3, r2, r0
 8015bd4:	3a10      	subs	r2, #16
 8015bd6:	e7cf      	b.n	8015b78 <__gethex+0xe6>
 8015bd8:	4631      	mov	r1, r6
 8015bda:	e7da      	b.n	8015b92 <__gethex+0x100>
 8015bdc:	1bf3      	subs	r3, r6, r7
 8015bde:	3b01      	subs	r3, #1
 8015be0:	4629      	mov	r1, r5
 8015be2:	2b07      	cmp	r3, #7
 8015be4:	dc49      	bgt.n	8015c7a <__gethex+0x1e8>
 8015be6:	9802      	ldr	r0, [sp, #8]
 8015be8:	f000 fa58 	bl	801609c <_Balloc>
 8015bec:	9b01      	ldr	r3, [sp, #4]
 8015bee:	f100 0914 	add.w	r9, r0, #20
 8015bf2:	f04f 0b00 	mov.w	fp, #0
 8015bf6:	f1c3 0301 	rsb	r3, r3, #1
 8015bfa:	4605      	mov	r5, r0
 8015bfc:	f8cd 9010 	str.w	r9, [sp, #16]
 8015c00:	46da      	mov	sl, fp
 8015c02:	9308      	str	r3, [sp, #32]
 8015c04:	42b7      	cmp	r7, r6
 8015c06:	d33b      	bcc.n	8015c80 <__gethex+0x1ee>
 8015c08:	9804      	ldr	r0, [sp, #16]
 8015c0a:	f840 ab04 	str.w	sl, [r0], #4
 8015c0e:	eba0 0009 	sub.w	r0, r0, r9
 8015c12:	1080      	asrs	r0, r0, #2
 8015c14:	6128      	str	r0, [r5, #16]
 8015c16:	0147      	lsls	r7, r0, #5
 8015c18:	4650      	mov	r0, sl
 8015c1a:	f000 fb03 	bl	8016224 <__hi0bits>
 8015c1e:	f8d8 6000 	ldr.w	r6, [r8]
 8015c22:	1a3f      	subs	r7, r7, r0
 8015c24:	42b7      	cmp	r7, r6
 8015c26:	dd64      	ble.n	8015cf2 <__gethex+0x260>
 8015c28:	1bbf      	subs	r7, r7, r6
 8015c2a:	4639      	mov	r1, r7
 8015c2c:	4628      	mov	r0, r5
 8015c2e:	f000 fe14 	bl	801685a <__any_on>
 8015c32:	4682      	mov	sl, r0
 8015c34:	b178      	cbz	r0, 8015c56 <__gethex+0x1c4>
 8015c36:	1e7b      	subs	r3, r7, #1
 8015c38:	1159      	asrs	r1, r3, #5
 8015c3a:	f003 021f 	and.w	r2, r3, #31
 8015c3e:	f04f 0a01 	mov.w	sl, #1
 8015c42:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015c46:	fa0a f202 	lsl.w	r2, sl, r2
 8015c4a:	420a      	tst	r2, r1
 8015c4c:	d003      	beq.n	8015c56 <__gethex+0x1c4>
 8015c4e:	4553      	cmp	r3, sl
 8015c50:	dc46      	bgt.n	8015ce0 <__gethex+0x24e>
 8015c52:	f04f 0a02 	mov.w	sl, #2
 8015c56:	4639      	mov	r1, r7
 8015c58:	4628      	mov	r0, r5
 8015c5a:	f7ff fecb 	bl	80159f4 <rshift>
 8015c5e:	443c      	add	r4, r7
 8015c60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c64:	42a3      	cmp	r3, r4
 8015c66:	da52      	bge.n	8015d0e <__gethex+0x27c>
 8015c68:	4629      	mov	r1, r5
 8015c6a:	9802      	ldr	r0, [sp, #8]
 8015c6c:	f000 fa4a 	bl	8016104 <_Bfree>
 8015c70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c72:	2300      	movs	r3, #0
 8015c74:	6013      	str	r3, [r2, #0]
 8015c76:	27a3      	movs	r7, #163	; 0xa3
 8015c78:	e793      	b.n	8015ba2 <__gethex+0x110>
 8015c7a:	3101      	adds	r1, #1
 8015c7c:	105b      	asrs	r3, r3, #1
 8015c7e:	e7b0      	b.n	8015be2 <__gethex+0x150>
 8015c80:	1e73      	subs	r3, r6, #1
 8015c82:	9305      	str	r3, [sp, #20]
 8015c84:	9a07      	ldr	r2, [sp, #28]
 8015c86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c8a:	4293      	cmp	r3, r2
 8015c8c:	d018      	beq.n	8015cc0 <__gethex+0x22e>
 8015c8e:	f1bb 0f20 	cmp.w	fp, #32
 8015c92:	d107      	bne.n	8015ca4 <__gethex+0x212>
 8015c94:	9b04      	ldr	r3, [sp, #16]
 8015c96:	f8c3 a000 	str.w	sl, [r3]
 8015c9a:	3304      	adds	r3, #4
 8015c9c:	f04f 0a00 	mov.w	sl, #0
 8015ca0:	9304      	str	r3, [sp, #16]
 8015ca2:	46d3      	mov	fp, sl
 8015ca4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015ca8:	f7ff fede 	bl	8015a68 <__hexdig_fun>
 8015cac:	f000 000f 	and.w	r0, r0, #15
 8015cb0:	fa00 f00b 	lsl.w	r0, r0, fp
 8015cb4:	ea4a 0a00 	orr.w	sl, sl, r0
 8015cb8:	f10b 0b04 	add.w	fp, fp, #4
 8015cbc:	9b05      	ldr	r3, [sp, #20]
 8015cbe:	e00d      	b.n	8015cdc <__gethex+0x24a>
 8015cc0:	9b05      	ldr	r3, [sp, #20]
 8015cc2:	9a08      	ldr	r2, [sp, #32]
 8015cc4:	4413      	add	r3, r2
 8015cc6:	42bb      	cmp	r3, r7
 8015cc8:	d3e1      	bcc.n	8015c8e <__gethex+0x1fc>
 8015cca:	4618      	mov	r0, r3
 8015ccc:	9a01      	ldr	r2, [sp, #4]
 8015cce:	9903      	ldr	r1, [sp, #12]
 8015cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8015cd2:	f001 f97e 	bl	8016fd2 <strncmp>
 8015cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	d1d8      	bne.n	8015c8e <__gethex+0x1fc>
 8015cdc:	461e      	mov	r6, r3
 8015cde:	e791      	b.n	8015c04 <__gethex+0x172>
 8015ce0:	1eb9      	subs	r1, r7, #2
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	f000 fdb9 	bl	801685a <__any_on>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d0b2      	beq.n	8015c52 <__gethex+0x1c0>
 8015cec:	f04f 0a03 	mov.w	sl, #3
 8015cf0:	e7b1      	b.n	8015c56 <__gethex+0x1c4>
 8015cf2:	da09      	bge.n	8015d08 <__gethex+0x276>
 8015cf4:	1bf7      	subs	r7, r6, r7
 8015cf6:	4629      	mov	r1, r5
 8015cf8:	463a      	mov	r2, r7
 8015cfa:	9802      	ldr	r0, [sp, #8]
 8015cfc:	f000 fbce 	bl	801649c <__lshift>
 8015d00:	1be4      	subs	r4, r4, r7
 8015d02:	4605      	mov	r5, r0
 8015d04:	f100 0914 	add.w	r9, r0, #20
 8015d08:	f04f 0a00 	mov.w	sl, #0
 8015d0c:	e7a8      	b.n	8015c60 <__gethex+0x1ce>
 8015d0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015d12:	42a0      	cmp	r0, r4
 8015d14:	dd6a      	ble.n	8015dec <__gethex+0x35a>
 8015d16:	1b04      	subs	r4, r0, r4
 8015d18:	42a6      	cmp	r6, r4
 8015d1a:	dc2e      	bgt.n	8015d7a <__gethex+0x2e8>
 8015d1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d20:	2b02      	cmp	r3, #2
 8015d22:	d022      	beq.n	8015d6a <__gethex+0x2d8>
 8015d24:	2b03      	cmp	r3, #3
 8015d26:	d024      	beq.n	8015d72 <__gethex+0x2e0>
 8015d28:	2b01      	cmp	r3, #1
 8015d2a:	d115      	bne.n	8015d58 <__gethex+0x2c6>
 8015d2c:	42a6      	cmp	r6, r4
 8015d2e:	d113      	bne.n	8015d58 <__gethex+0x2c6>
 8015d30:	2e01      	cmp	r6, #1
 8015d32:	dc0b      	bgt.n	8015d4c <__gethex+0x2ba>
 8015d34:	9a06      	ldr	r2, [sp, #24]
 8015d36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d3a:	6013      	str	r3, [r2, #0]
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	612b      	str	r3, [r5, #16]
 8015d40:	f8c9 3000 	str.w	r3, [r9]
 8015d44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d46:	2762      	movs	r7, #98	; 0x62
 8015d48:	601d      	str	r5, [r3, #0]
 8015d4a:	e72a      	b.n	8015ba2 <__gethex+0x110>
 8015d4c:	1e71      	subs	r1, r6, #1
 8015d4e:	4628      	mov	r0, r5
 8015d50:	f000 fd83 	bl	801685a <__any_on>
 8015d54:	2800      	cmp	r0, #0
 8015d56:	d1ed      	bne.n	8015d34 <__gethex+0x2a2>
 8015d58:	4629      	mov	r1, r5
 8015d5a:	9802      	ldr	r0, [sp, #8]
 8015d5c:	f000 f9d2 	bl	8016104 <_Bfree>
 8015d60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d62:	2300      	movs	r3, #0
 8015d64:	6013      	str	r3, [r2, #0]
 8015d66:	2750      	movs	r7, #80	; 0x50
 8015d68:	e71b      	b.n	8015ba2 <__gethex+0x110>
 8015d6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d0e1      	beq.n	8015d34 <__gethex+0x2a2>
 8015d70:	e7f2      	b.n	8015d58 <__gethex+0x2c6>
 8015d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d1dd      	bne.n	8015d34 <__gethex+0x2a2>
 8015d78:	e7ee      	b.n	8015d58 <__gethex+0x2c6>
 8015d7a:	1e67      	subs	r7, r4, #1
 8015d7c:	f1ba 0f00 	cmp.w	sl, #0
 8015d80:	d131      	bne.n	8015de6 <__gethex+0x354>
 8015d82:	b127      	cbz	r7, 8015d8e <__gethex+0x2fc>
 8015d84:	4639      	mov	r1, r7
 8015d86:	4628      	mov	r0, r5
 8015d88:	f000 fd67 	bl	801685a <__any_on>
 8015d8c:	4682      	mov	sl, r0
 8015d8e:	117a      	asrs	r2, r7, #5
 8015d90:	2301      	movs	r3, #1
 8015d92:	f007 071f 	and.w	r7, r7, #31
 8015d96:	fa03 f707 	lsl.w	r7, r3, r7
 8015d9a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015d9e:	4621      	mov	r1, r4
 8015da0:	421f      	tst	r7, r3
 8015da2:	4628      	mov	r0, r5
 8015da4:	bf18      	it	ne
 8015da6:	f04a 0a02 	orrne.w	sl, sl, #2
 8015daa:	1b36      	subs	r6, r6, r4
 8015dac:	f7ff fe22 	bl	80159f4 <rshift>
 8015db0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015db4:	2702      	movs	r7, #2
 8015db6:	f1ba 0f00 	cmp.w	sl, #0
 8015dba:	d048      	beq.n	8015e4e <__gethex+0x3bc>
 8015dbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015dc0:	2b02      	cmp	r3, #2
 8015dc2:	d015      	beq.n	8015df0 <__gethex+0x35e>
 8015dc4:	2b03      	cmp	r3, #3
 8015dc6:	d017      	beq.n	8015df8 <__gethex+0x366>
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d109      	bne.n	8015de0 <__gethex+0x34e>
 8015dcc:	f01a 0f02 	tst.w	sl, #2
 8015dd0:	d006      	beq.n	8015de0 <__gethex+0x34e>
 8015dd2:	f8d9 3000 	ldr.w	r3, [r9]
 8015dd6:	ea4a 0a03 	orr.w	sl, sl, r3
 8015dda:	f01a 0f01 	tst.w	sl, #1
 8015dde:	d10e      	bne.n	8015dfe <__gethex+0x36c>
 8015de0:	f047 0710 	orr.w	r7, r7, #16
 8015de4:	e033      	b.n	8015e4e <__gethex+0x3bc>
 8015de6:	f04f 0a01 	mov.w	sl, #1
 8015dea:	e7d0      	b.n	8015d8e <__gethex+0x2fc>
 8015dec:	2701      	movs	r7, #1
 8015dee:	e7e2      	b.n	8015db6 <__gethex+0x324>
 8015df0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015df2:	f1c3 0301 	rsb	r3, r3, #1
 8015df6:	9315      	str	r3, [sp, #84]	; 0x54
 8015df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d0f0      	beq.n	8015de0 <__gethex+0x34e>
 8015dfe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015e02:	f105 0314 	add.w	r3, r5, #20
 8015e06:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015e0a:	eb03 010a 	add.w	r1, r3, sl
 8015e0e:	f04f 0c00 	mov.w	ip, #0
 8015e12:	4618      	mov	r0, r3
 8015e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015e1c:	d01c      	beq.n	8015e58 <__gethex+0x3c6>
 8015e1e:	3201      	adds	r2, #1
 8015e20:	6002      	str	r2, [r0, #0]
 8015e22:	2f02      	cmp	r7, #2
 8015e24:	f105 0314 	add.w	r3, r5, #20
 8015e28:	d138      	bne.n	8015e9c <__gethex+0x40a>
 8015e2a:	f8d8 2000 	ldr.w	r2, [r8]
 8015e2e:	3a01      	subs	r2, #1
 8015e30:	42b2      	cmp	r2, r6
 8015e32:	d10a      	bne.n	8015e4a <__gethex+0x3b8>
 8015e34:	1171      	asrs	r1, r6, #5
 8015e36:	2201      	movs	r2, #1
 8015e38:	f006 061f 	and.w	r6, r6, #31
 8015e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e40:	fa02 f606 	lsl.w	r6, r2, r6
 8015e44:	421e      	tst	r6, r3
 8015e46:	bf18      	it	ne
 8015e48:	4617      	movne	r7, r2
 8015e4a:	f047 0720 	orr.w	r7, r7, #32
 8015e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e50:	601d      	str	r5, [r3, #0]
 8015e52:	9b06      	ldr	r3, [sp, #24]
 8015e54:	601c      	str	r4, [r3, #0]
 8015e56:	e6a4      	b.n	8015ba2 <__gethex+0x110>
 8015e58:	4299      	cmp	r1, r3
 8015e5a:	f843 cc04 	str.w	ip, [r3, #-4]
 8015e5e:	d8d8      	bhi.n	8015e12 <__gethex+0x380>
 8015e60:	68ab      	ldr	r3, [r5, #8]
 8015e62:	4599      	cmp	r9, r3
 8015e64:	db12      	blt.n	8015e8c <__gethex+0x3fa>
 8015e66:	6869      	ldr	r1, [r5, #4]
 8015e68:	9802      	ldr	r0, [sp, #8]
 8015e6a:	3101      	adds	r1, #1
 8015e6c:	f000 f916 	bl	801609c <_Balloc>
 8015e70:	692a      	ldr	r2, [r5, #16]
 8015e72:	3202      	adds	r2, #2
 8015e74:	f105 010c 	add.w	r1, r5, #12
 8015e78:	4683      	mov	fp, r0
 8015e7a:	0092      	lsls	r2, r2, #2
 8015e7c:	300c      	adds	r0, #12
 8015e7e:	f7fd fa31 	bl	80132e4 <memcpy>
 8015e82:	4629      	mov	r1, r5
 8015e84:	9802      	ldr	r0, [sp, #8]
 8015e86:	f000 f93d 	bl	8016104 <_Bfree>
 8015e8a:	465d      	mov	r5, fp
 8015e8c:	692b      	ldr	r3, [r5, #16]
 8015e8e:	1c5a      	adds	r2, r3, #1
 8015e90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015e94:	612a      	str	r2, [r5, #16]
 8015e96:	2201      	movs	r2, #1
 8015e98:	615a      	str	r2, [r3, #20]
 8015e9a:	e7c2      	b.n	8015e22 <__gethex+0x390>
 8015e9c:	692a      	ldr	r2, [r5, #16]
 8015e9e:	454a      	cmp	r2, r9
 8015ea0:	dd0b      	ble.n	8015eba <__gethex+0x428>
 8015ea2:	2101      	movs	r1, #1
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	f7ff fda5 	bl	80159f4 <rshift>
 8015eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015eae:	3401      	adds	r4, #1
 8015eb0:	42a3      	cmp	r3, r4
 8015eb2:	f6ff aed9 	blt.w	8015c68 <__gethex+0x1d6>
 8015eb6:	2701      	movs	r7, #1
 8015eb8:	e7c7      	b.n	8015e4a <__gethex+0x3b8>
 8015eba:	f016 061f 	ands.w	r6, r6, #31
 8015ebe:	d0fa      	beq.n	8015eb6 <__gethex+0x424>
 8015ec0:	449a      	add	sl, r3
 8015ec2:	f1c6 0620 	rsb	r6, r6, #32
 8015ec6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015eca:	f000 f9ab 	bl	8016224 <__hi0bits>
 8015ece:	42b0      	cmp	r0, r6
 8015ed0:	dbe7      	blt.n	8015ea2 <__gethex+0x410>
 8015ed2:	e7f0      	b.n	8015eb6 <__gethex+0x424>

08015ed4 <L_shift>:
 8015ed4:	f1c2 0208 	rsb	r2, r2, #8
 8015ed8:	0092      	lsls	r2, r2, #2
 8015eda:	b570      	push	{r4, r5, r6, lr}
 8015edc:	f1c2 0620 	rsb	r6, r2, #32
 8015ee0:	6843      	ldr	r3, [r0, #4]
 8015ee2:	6804      	ldr	r4, [r0, #0]
 8015ee4:	fa03 f506 	lsl.w	r5, r3, r6
 8015ee8:	432c      	orrs	r4, r5
 8015eea:	40d3      	lsrs	r3, r2
 8015eec:	6004      	str	r4, [r0, #0]
 8015eee:	f840 3f04 	str.w	r3, [r0, #4]!
 8015ef2:	4288      	cmp	r0, r1
 8015ef4:	d3f4      	bcc.n	8015ee0 <L_shift+0xc>
 8015ef6:	bd70      	pop	{r4, r5, r6, pc}

08015ef8 <__match>:
 8015ef8:	b530      	push	{r4, r5, lr}
 8015efa:	6803      	ldr	r3, [r0, #0]
 8015efc:	3301      	adds	r3, #1
 8015efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f02:	b914      	cbnz	r4, 8015f0a <__match+0x12>
 8015f04:	6003      	str	r3, [r0, #0]
 8015f06:	2001      	movs	r0, #1
 8015f08:	bd30      	pop	{r4, r5, pc}
 8015f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015f12:	2d19      	cmp	r5, #25
 8015f14:	bf98      	it	ls
 8015f16:	3220      	addls	r2, #32
 8015f18:	42a2      	cmp	r2, r4
 8015f1a:	d0f0      	beq.n	8015efe <__match+0x6>
 8015f1c:	2000      	movs	r0, #0
 8015f1e:	e7f3      	b.n	8015f08 <__match+0x10>

08015f20 <__hexnan>:
 8015f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f24:	680b      	ldr	r3, [r1, #0]
 8015f26:	6801      	ldr	r1, [r0, #0]
 8015f28:	115f      	asrs	r7, r3, #5
 8015f2a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015f2e:	f013 031f 	ands.w	r3, r3, #31
 8015f32:	b087      	sub	sp, #28
 8015f34:	bf18      	it	ne
 8015f36:	3704      	addne	r7, #4
 8015f38:	2500      	movs	r5, #0
 8015f3a:	1f3e      	subs	r6, r7, #4
 8015f3c:	4682      	mov	sl, r0
 8015f3e:	4690      	mov	r8, r2
 8015f40:	9301      	str	r3, [sp, #4]
 8015f42:	f847 5c04 	str.w	r5, [r7, #-4]
 8015f46:	46b1      	mov	r9, r6
 8015f48:	4634      	mov	r4, r6
 8015f4a:	9502      	str	r5, [sp, #8]
 8015f4c:	46ab      	mov	fp, r5
 8015f4e:	784a      	ldrb	r2, [r1, #1]
 8015f50:	1c4b      	adds	r3, r1, #1
 8015f52:	9303      	str	r3, [sp, #12]
 8015f54:	b342      	cbz	r2, 8015fa8 <__hexnan+0x88>
 8015f56:	4610      	mov	r0, r2
 8015f58:	9105      	str	r1, [sp, #20]
 8015f5a:	9204      	str	r2, [sp, #16]
 8015f5c:	f7ff fd84 	bl	8015a68 <__hexdig_fun>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d143      	bne.n	8015fec <__hexnan+0xcc>
 8015f64:	9a04      	ldr	r2, [sp, #16]
 8015f66:	9905      	ldr	r1, [sp, #20]
 8015f68:	2a20      	cmp	r2, #32
 8015f6a:	d818      	bhi.n	8015f9e <__hexnan+0x7e>
 8015f6c:	9b02      	ldr	r3, [sp, #8]
 8015f6e:	459b      	cmp	fp, r3
 8015f70:	dd13      	ble.n	8015f9a <__hexnan+0x7a>
 8015f72:	454c      	cmp	r4, r9
 8015f74:	d206      	bcs.n	8015f84 <__hexnan+0x64>
 8015f76:	2d07      	cmp	r5, #7
 8015f78:	dc04      	bgt.n	8015f84 <__hexnan+0x64>
 8015f7a:	462a      	mov	r2, r5
 8015f7c:	4649      	mov	r1, r9
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f7ff ffa8 	bl	8015ed4 <L_shift>
 8015f84:	4544      	cmp	r4, r8
 8015f86:	d944      	bls.n	8016012 <__hexnan+0xf2>
 8015f88:	2300      	movs	r3, #0
 8015f8a:	f1a4 0904 	sub.w	r9, r4, #4
 8015f8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f92:	f8cd b008 	str.w	fp, [sp, #8]
 8015f96:	464c      	mov	r4, r9
 8015f98:	461d      	mov	r5, r3
 8015f9a:	9903      	ldr	r1, [sp, #12]
 8015f9c:	e7d7      	b.n	8015f4e <__hexnan+0x2e>
 8015f9e:	2a29      	cmp	r2, #41	; 0x29
 8015fa0:	d14a      	bne.n	8016038 <__hexnan+0x118>
 8015fa2:	3102      	adds	r1, #2
 8015fa4:	f8ca 1000 	str.w	r1, [sl]
 8015fa8:	f1bb 0f00 	cmp.w	fp, #0
 8015fac:	d044      	beq.n	8016038 <__hexnan+0x118>
 8015fae:	454c      	cmp	r4, r9
 8015fb0:	d206      	bcs.n	8015fc0 <__hexnan+0xa0>
 8015fb2:	2d07      	cmp	r5, #7
 8015fb4:	dc04      	bgt.n	8015fc0 <__hexnan+0xa0>
 8015fb6:	462a      	mov	r2, r5
 8015fb8:	4649      	mov	r1, r9
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f7ff ff8a 	bl	8015ed4 <L_shift>
 8015fc0:	4544      	cmp	r4, r8
 8015fc2:	d928      	bls.n	8016016 <__hexnan+0xf6>
 8015fc4:	4643      	mov	r3, r8
 8015fc6:	f854 2b04 	ldr.w	r2, [r4], #4
 8015fca:	f843 2b04 	str.w	r2, [r3], #4
 8015fce:	42a6      	cmp	r6, r4
 8015fd0:	d2f9      	bcs.n	8015fc6 <__hexnan+0xa6>
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	f843 2b04 	str.w	r2, [r3], #4
 8015fd8:	429e      	cmp	r6, r3
 8015fda:	d2fb      	bcs.n	8015fd4 <__hexnan+0xb4>
 8015fdc:	6833      	ldr	r3, [r6, #0]
 8015fde:	b91b      	cbnz	r3, 8015fe8 <__hexnan+0xc8>
 8015fe0:	4546      	cmp	r6, r8
 8015fe2:	d127      	bne.n	8016034 <__hexnan+0x114>
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	6033      	str	r3, [r6, #0]
 8015fe8:	2005      	movs	r0, #5
 8015fea:	e026      	b.n	801603a <__hexnan+0x11a>
 8015fec:	3501      	adds	r5, #1
 8015fee:	2d08      	cmp	r5, #8
 8015ff0:	f10b 0b01 	add.w	fp, fp, #1
 8015ff4:	dd06      	ble.n	8016004 <__hexnan+0xe4>
 8015ff6:	4544      	cmp	r4, r8
 8015ff8:	d9cf      	bls.n	8015f9a <__hexnan+0x7a>
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	f844 3c04 	str.w	r3, [r4, #-4]
 8016000:	2501      	movs	r5, #1
 8016002:	3c04      	subs	r4, #4
 8016004:	6822      	ldr	r2, [r4, #0]
 8016006:	f000 000f 	and.w	r0, r0, #15
 801600a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801600e:	6020      	str	r0, [r4, #0]
 8016010:	e7c3      	b.n	8015f9a <__hexnan+0x7a>
 8016012:	2508      	movs	r5, #8
 8016014:	e7c1      	b.n	8015f9a <__hexnan+0x7a>
 8016016:	9b01      	ldr	r3, [sp, #4]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d0df      	beq.n	8015fdc <__hexnan+0xbc>
 801601c:	f04f 32ff 	mov.w	r2, #4294967295
 8016020:	f1c3 0320 	rsb	r3, r3, #32
 8016024:	fa22 f303 	lsr.w	r3, r2, r3
 8016028:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801602c:	401a      	ands	r2, r3
 801602e:	f847 2c04 	str.w	r2, [r7, #-4]
 8016032:	e7d3      	b.n	8015fdc <__hexnan+0xbc>
 8016034:	3e04      	subs	r6, #4
 8016036:	e7d1      	b.n	8015fdc <__hexnan+0xbc>
 8016038:	2004      	movs	r0, #4
 801603a:	b007      	add	sp, #28
 801603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016040 <__locale_ctype_ptr_l>:
 8016040:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016044:	4770      	bx	lr

08016046 <__localeconv_l>:
 8016046:	30f0      	adds	r0, #240	; 0xf0
 8016048:	4770      	bx	lr
	...

0801604c <_localeconv_r>:
 801604c:	4b04      	ldr	r3, [pc, #16]	; (8016060 <_localeconv_r+0x14>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	6a18      	ldr	r0, [r3, #32]
 8016052:	4b04      	ldr	r3, [pc, #16]	; (8016064 <_localeconv_r+0x18>)
 8016054:	2800      	cmp	r0, #0
 8016056:	bf08      	it	eq
 8016058:	4618      	moveq	r0, r3
 801605a:	30f0      	adds	r0, #240	; 0xf0
 801605c:	4770      	bx	lr
 801605e:	bf00      	nop
 8016060:	200001a8 	.word	0x200001a8
 8016064:	2000020c 	.word	0x2000020c

08016068 <malloc>:
 8016068:	4b02      	ldr	r3, [pc, #8]	; (8016074 <malloc+0xc>)
 801606a:	4601      	mov	r1, r0
 801606c:	6818      	ldr	r0, [r3, #0]
 801606e:	f000 bc71 	b.w	8016954 <_malloc_r>
 8016072:	bf00      	nop
 8016074:	200001a8 	.word	0x200001a8

08016078 <__ascii_mbtowc>:
 8016078:	b082      	sub	sp, #8
 801607a:	b901      	cbnz	r1, 801607e <__ascii_mbtowc+0x6>
 801607c:	a901      	add	r1, sp, #4
 801607e:	b142      	cbz	r2, 8016092 <__ascii_mbtowc+0x1a>
 8016080:	b14b      	cbz	r3, 8016096 <__ascii_mbtowc+0x1e>
 8016082:	7813      	ldrb	r3, [r2, #0]
 8016084:	600b      	str	r3, [r1, #0]
 8016086:	7812      	ldrb	r2, [r2, #0]
 8016088:	1c10      	adds	r0, r2, #0
 801608a:	bf18      	it	ne
 801608c:	2001      	movne	r0, #1
 801608e:	b002      	add	sp, #8
 8016090:	4770      	bx	lr
 8016092:	4610      	mov	r0, r2
 8016094:	e7fb      	b.n	801608e <__ascii_mbtowc+0x16>
 8016096:	f06f 0001 	mvn.w	r0, #1
 801609a:	e7f8      	b.n	801608e <__ascii_mbtowc+0x16>

0801609c <_Balloc>:
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80160a0:	4604      	mov	r4, r0
 80160a2:	460e      	mov	r6, r1
 80160a4:	b93d      	cbnz	r5, 80160b6 <_Balloc+0x1a>
 80160a6:	2010      	movs	r0, #16
 80160a8:	f7ff ffde 	bl	8016068 <malloc>
 80160ac:	6260      	str	r0, [r4, #36]	; 0x24
 80160ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80160b2:	6005      	str	r5, [r0, #0]
 80160b4:	60c5      	str	r5, [r0, #12]
 80160b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80160b8:	68eb      	ldr	r3, [r5, #12]
 80160ba:	b183      	cbz	r3, 80160de <_Balloc+0x42>
 80160bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160be:	68db      	ldr	r3, [r3, #12]
 80160c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80160c4:	b9b8      	cbnz	r0, 80160f6 <_Balloc+0x5a>
 80160c6:	2101      	movs	r1, #1
 80160c8:	fa01 f506 	lsl.w	r5, r1, r6
 80160cc:	1d6a      	adds	r2, r5, #5
 80160ce:	0092      	lsls	r2, r2, #2
 80160d0:	4620      	mov	r0, r4
 80160d2:	f000 fbe3 	bl	801689c <_calloc_r>
 80160d6:	b160      	cbz	r0, 80160f2 <_Balloc+0x56>
 80160d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80160dc:	e00e      	b.n	80160fc <_Balloc+0x60>
 80160de:	2221      	movs	r2, #33	; 0x21
 80160e0:	2104      	movs	r1, #4
 80160e2:	4620      	mov	r0, r4
 80160e4:	f000 fbda 	bl	801689c <_calloc_r>
 80160e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160ea:	60e8      	str	r0, [r5, #12]
 80160ec:	68db      	ldr	r3, [r3, #12]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d1e4      	bne.n	80160bc <_Balloc+0x20>
 80160f2:	2000      	movs	r0, #0
 80160f4:	bd70      	pop	{r4, r5, r6, pc}
 80160f6:	6802      	ldr	r2, [r0, #0]
 80160f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80160fc:	2300      	movs	r3, #0
 80160fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016102:	e7f7      	b.n	80160f4 <_Balloc+0x58>

08016104 <_Bfree>:
 8016104:	b570      	push	{r4, r5, r6, lr}
 8016106:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016108:	4606      	mov	r6, r0
 801610a:	460d      	mov	r5, r1
 801610c:	b93c      	cbnz	r4, 801611e <_Bfree+0x1a>
 801610e:	2010      	movs	r0, #16
 8016110:	f7ff ffaa 	bl	8016068 <malloc>
 8016114:	6270      	str	r0, [r6, #36]	; 0x24
 8016116:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801611a:	6004      	str	r4, [r0, #0]
 801611c:	60c4      	str	r4, [r0, #12]
 801611e:	b13d      	cbz	r5, 8016130 <_Bfree+0x2c>
 8016120:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016122:	686a      	ldr	r2, [r5, #4]
 8016124:	68db      	ldr	r3, [r3, #12]
 8016126:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801612a:	6029      	str	r1, [r5, #0]
 801612c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016130:	bd70      	pop	{r4, r5, r6, pc}

08016132 <__multadd>:
 8016132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016136:	690d      	ldr	r5, [r1, #16]
 8016138:	461f      	mov	r7, r3
 801613a:	4606      	mov	r6, r0
 801613c:	460c      	mov	r4, r1
 801613e:	f101 0c14 	add.w	ip, r1, #20
 8016142:	2300      	movs	r3, #0
 8016144:	f8dc 0000 	ldr.w	r0, [ip]
 8016148:	b281      	uxth	r1, r0
 801614a:	fb02 7101 	mla	r1, r2, r1, r7
 801614e:	0c0f      	lsrs	r7, r1, #16
 8016150:	0c00      	lsrs	r0, r0, #16
 8016152:	fb02 7000 	mla	r0, r2, r0, r7
 8016156:	b289      	uxth	r1, r1
 8016158:	3301      	adds	r3, #1
 801615a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801615e:	429d      	cmp	r5, r3
 8016160:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016164:	f84c 1b04 	str.w	r1, [ip], #4
 8016168:	dcec      	bgt.n	8016144 <__multadd+0x12>
 801616a:	b1d7      	cbz	r7, 80161a2 <__multadd+0x70>
 801616c:	68a3      	ldr	r3, [r4, #8]
 801616e:	42ab      	cmp	r3, r5
 8016170:	dc12      	bgt.n	8016198 <__multadd+0x66>
 8016172:	6861      	ldr	r1, [r4, #4]
 8016174:	4630      	mov	r0, r6
 8016176:	3101      	adds	r1, #1
 8016178:	f7ff ff90 	bl	801609c <_Balloc>
 801617c:	6922      	ldr	r2, [r4, #16]
 801617e:	3202      	adds	r2, #2
 8016180:	f104 010c 	add.w	r1, r4, #12
 8016184:	4680      	mov	r8, r0
 8016186:	0092      	lsls	r2, r2, #2
 8016188:	300c      	adds	r0, #12
 801618a:	f7fd f8ab 	bl	80132e4 <memcpy>
 801618e:	4621      	mov	r1, r4
 8016190:	4630      	mov	r0, r6
 8016192:	f7ff ffb7 	bl	8016104 <_Bfree>
 8016196:	4644      	mov	r4, r8
 8016198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801619c:	3501      	adds	r5, #1
 801619e:	615f      	str	r7, [r3, #20]
 80161a0:	6125      	str	r5, [r4, #16]
 80161a2:	4620      	mov	r0, r4
 80161a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161a8 <__s2b>:
 80161a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161ac:	460c      	mov	r4, r1
 80161ae:	4615      	mov	r5, r2
 80161b0:	461f      	mov	r7, r3
 80161b2:	2209      	movs	r2, #9
 80161b4:	3308      	adds	r3, #8
 80161b6:	4606      	mov	r6, r0
 80161b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80161bc:	2100      	movs	r1, #0
 80161be:	2201      	movs	r2, #1
 80161c0:	429a      	cmp	r2, r3
 80161c2:	db20      	blt.n	8016206 <__s2b+0x5e>
 80161c4:	4630      	mov	r0, r6
 80161c6:	f7ff ff69 	bl	801609c <_Balloc>
 80161ca:	9b08      	ldr	r3, [sp, #32]
 80161cc:	6143      	str	r3, [r0, #20]
 80161ce:	2d09      	cmp	r5, #9
 80161d0:	f04f 0301 	mov.w	r3, #1
 80161d4:	6103      	str	r3, [r0, #16]
 80161d6:	dd19      	ble.n	801620c <__s2b+0x64>
 80161d8:	f104 0809 	add.w	r8, r4, #9
 80161dc:	46c1      	mov	r9, r8
 80161de:	442c      	add	r4, r5
 80161e0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80161e4:	4601      	mov	r1, r0
 80161e6:	3b30      	subs	r3, #48	; 0x30
 80161e8:	220a      	movs	r2, #10
 80161ea:	4630      	mov	r0, r6
 80161ec:	f7ff ffa1 	bl	8016132 <__multadd>
 80161f0:	45a1      	cmp	r9, r4
 80161f2:	d1f5      	bne.n	80161e0 <__s2b+0x38>
 80161f4:	eb08 0405 	add.w	r4, r8, r5
 80161f8:	3c08      	subs	r4, #8
 80161fa:	1b2d      	subs	r5, r5, r4
 80161fc:	1963      	adds	r3, r4, r5
 80161fe:	42bb      	cmp	r3, r7
 8016200:	db07      	blt.n	8016212 <__s2b+0x6a>
 8016202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016206:	0052      	lsls	r2, r2, #1
 8016208:	3101      	adds	r1, #1
 801620a:	e7d9      	b.n	80161c0 <__s2b+0x18>
 801620c:	340a      	adds	r4, #10
 801620e:	2509      	movs	r5, #9
 8016210:	e7f3      	b.n	80161fa <__s2b+0x52>
 8016212:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016216:	4601      	mov	r1, r0
 8016218:	3b30      	subs	r3, #48	; 0x30
 801621a:	220a      	movs	r2, #10
 801621c:	4630      	mov	r0, r6
 801621e:	f7ff ff88 	bl	8016132 <__multadd>
 8016222:	e7eb      	b.n	80161fc <__s2b+0x54>

08016224 <__hi0bits>:
 8016224:	0c02      	lsrs	r2, r0, #16
 8016226:	0412      	lsls	r2, r2, #16
 8016228:	4603      	mov	r3, r0
 801622a:	b9b2      	cbnz	r2, 801625a <__hi0bits+0x36>
 801622c:	0403      	lsls	r3, r0, #16
 801622e:	2010      	movs	r0, #16
 8016230:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016234:	bf04      	itt	eq
 8016236:	021b      	lsleq	r3, r3, #8
 8016238:	3008      	addeq	r0, #8
 801623a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801623e:	bf04      	itt	eq
 8016240:	011b      	lsleq	r3, r3, #4
 8016242:	3004      	addeq	r0, #4
 8016244:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016248:	bf04      	itt	eq
 801624a:	009b      	lsleq	r3, r3, #2
 801624c:	3002      	addeq	r0, #2
 801624e:	2b00      	cmp	r3, #0
 8016250:	db06      	blt.n	8016260 <__hi0bits+0x3c>
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	d503      	bpl.n	801625e <__hi0bits+0x3a>
 8016256:	3001      	adds	r0, #1
 8016258:	4770      	bx	lr
 801625a:	2000      	movs	r0, #0
 801625c:	e7e8      	b.n	8016230 <__hi0bits+0xc>
 801625e:	2020      	movs	r0, #32
 8016260:	4770      	bx	lr

08016262 <__lo0bits>:
 8016262:	6803      	ldr	r3, [r0, #0]
 8016264:	f013 0207 	ands.w	r2, r3, #7
 8016268:	4601      	mov	r1, r0
 801626a:	d00b      	beq.n	8016284 <__lo0bits+0x22>
 801626c:	07da      	lsls	r2, r3, #31
 801626e:	d423      	bmi.n	80162b8 <__lo0bits+0x56>
 8016270:	0798      	lsls	r0, r3, #30
 8016272:	bf49      	itett	mi
 8016274:	085b      	lsrmi	r3, r3, #1
 8016276:	089b      	lsrpl	r3, r3, #2
 8016278:	2001      	movmi	r0, #1
 801627a:	600b      	strmi	r3, [r1, #0]
 801627c:	bf5c      	itt	pl
 801627e:	600b      	strpl	r3, [r1, #0]
 8016280:	2002      	movpl	r0, #2
 8016282:	4770      	bx	lr
 8016284:	b298      	uxth	r0, r3
 8016286:	b9a8      	cbnz	r0, 80162b4 <__lo0bits+0x52>
 8016288:	0c1b      	lsrs	r3, r3, #16
 801628a:	2010      	movs	r0, #16
 801628c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016290:	bf04      	itt	eq
 8016292:	0a1b      	lsreq	r3, r3, #8
 8016294:	3008      	addeq	r0, #8
 8016296:	071a      	lsls	r2, r3, #28
 8016298:	bf04      	itt	eq
 801629a:	091b      	lsreq	r3, r3, #4
 801629c:	3004      	addeq	r0, #4
 801629e:	079a      	lsls	r2, r3, #30
 80162a0:	bf04      	itt	eq
 80162a2:	089b      	lsreq	r3, r3, #2
 80162a4:	3002      	addeq	r0, #2
 80162a6:	07da      	lsls	r2, r3, #31
 80162a8:	d402      	bmi.n	80162b0 <__lo0bits+0x4e>
 80162aa:	085b      	lsrs	r3, r3, #1
 80162ac:	d006      	beq.n	80162bc <__lo0bits+0x5a>
 80162ae:	3001      	adds	r0, #1
 80162b0:	600b      	str	r3, [r1, #0]
 80162b2:	4770      	bx	lr
 80162b4:	4610      	mov	r0, r2
 80162b6:	e7e9      	b.n	801628c <__lo0bits+0x2a>
 80162b8:	2000      	movs	r0, #0
 80162ba:	4770      	bx	lr
 80162bc:	2020      	movs	r0, #32
 80162be:	4770      	bx	lr

080162c0 <__i2b>:
 80162c0:	b510      	push	{r4, lr}
 80162c2:	460c      	mov	r4, r1
 80162c4:	2101      	movs	r1, #1
 80162c6:	f7ff fee9 	bl	801609c <_Balloc>
 80162ca:	2201      	movs	r2, #1
 80162cc:	6144      	str	r4, [r0, #20]
 80162ce:	6102      	str	r2, [r0, #16]
 80162d0:	bd10      	pop	{r4, pc}

080162d2 <__multiply>:
 80162d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d6:	4614      	mov	r4, r2
 80162d8:	690a      	ldr	r2, [r1, #16]
 80162da:	6923      	ldr	r3, [r4, #16]
 80162dc:	429a      	cmp	r2, r3
 80162de:	bfb8      	it	lt
 80162e0:	460b      	movlt	r3, r1
 80162e2:	4688      	mov	r8, r1
 80162e4:	bfbc      	itt	lt
 80162e6:	46a0      	movlt	r8, r4
 80162e8:	461c      	movlt	r4, r3
 80162ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80162ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80162f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80162f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80162fa:	eb07 0609 	add.w	r6, r7, r9
 80162fe:	42b3      	cmp	r3, r6
 8016300:	bfb8      	it	lt
 8016302:	3101      	addlt	r1, #1
 8016304:	f7ff feca 	bl	801609c <_Balloc>
 8016308:	f100 0514 	add.w	r5, r0, #20
 801630c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016310:	462b      	mov	r3, r5
 8016312:	2200      	movs	r2, #0
 8016314:	4573      	cmp	r3, lr
 8016316:	d316      	bcc.n	8016346 <__multiply+0x74>
 8016318:	f104 0214 	add.w	r2, r4, #20
 801631c:	f108 0114 	add.w	r1, r8, #20
 8016320:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016324:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016328:	9300      	str	r3, [sp, #0]
 801632a:	9b00      	ldr	r3, [sp, #0]
 801632c:	9201      	str	r2, [sp, #4]
 801632e:	4293      	cmp	r3, r2
 8016330:	d80c      	bhi.n	801634c <__multiply+0x7a>
 8016332:	2e00      	cmp	r6, #0
 8016334:	dd03      	ble.n	801633e <__multiply+0x6c>
 8016336:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801633a:	2b00      	cmp	r3, #0
 801633c:	d05d      	beq.n	80163fa <__multiply+0x128>
 801633e:	6106      	str	r6, [r0, #16]
 8016340:	b003      	add	sp, #12
 8016342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016346:	f843 2b04 	str.w	r2, [r3], #4
 801634a:	e7e3      	b.n	8016314 <__multiply+0x42>
 801634c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016350:	f1bb 0f00 	cmp.w	fp, #0
 8016354:	d023      	beq.n	801639e <__multiply+0xcc>
 8016356:	4689      	mov	r9, r1
 8016358:	46ac      	mov	ip, r5
 801635a:	f04f 0800 	mov.w	r8, #0
 801635e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016362:	f8dc a000 	ldr.w	sl, [ip]
 8016366:	b2a3      	uxth	r3, r4
 8016368:	fa1f fa8a 	uxth.w	sl, sl
 801636c:	fb0b a303 	mla	r3, fp, r3, sl
 8016370:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016374:	f8dc 4000 	ldr.w	r4, [ip]
 8016378:	4443      	add	r3, r8
 801637a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801637e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016382:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016386:	46e2      	mov	sl, ip
 8016388:	b29b      	uxth	r3, r3
 801638a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801638e:	454f      	cmp	r7, r9
 8016390:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016394:	f84a 3b04 	str.w	r3, [sl], #4
 8016398:	d82b      	bhi.n	80163f2 <__multiply+0x120>
 801639a:	f8cc 8004 	str.w	r8, [ip, #4]
 801639e:	9b01      	ldr	r3, [sp, #4]
 80163a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80163a4:	3204      	adds	r2, #4
 80163a6:	f1ba 0f00 	cmp.w	sl, #0
 80163aa:	d020      	beq.n	80163ee <__multiply+0x11c>
 80163ac:	682b      	ldr	r3, [r5, #0]
 80163ae:	4689      	mov	r9, r1
 80163b0:	46a8      	mov	r8, r5
 80163b2:	f04f 0b00 	mov.w	fp, #0
 80163b6:	f8b9 c000 	ldrh.w	ip, [r9]
 80163ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80163be:	fb0a 440c 	mla	r4, sl, ip, r4
 80163c2:	445c      	add	r4, fp
 80163c4:	46c4      	mov	ip, r8
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80163cc:	f84c 3b04 	str.w	r3, [ip], #4
 80163d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80163d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80163d8:	0c1b      	lsrs	r3, r3, #16
 80163da:	fb0a b303 	mla	r3, sl, r3, fp
 80163de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80163e2:	454f      	cmp	r7, r9
 80163e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80163e8:	d805      	bhi.n	80163f6 <__multiply+0x124>
 80163ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80163ee:	3504      	adds	r5, #4
 80163f0:	e79b      	b.n	801632a <__multiply+0x58>
 80163f2:	46d4      	mov	ip, sl
 80163f4:	e7b3      	b.n	801635e <__multiply+0x8c>
 80163f6:	46e0      	mov	r8, ip
 80163f8:	e7dd      	b.n	80163b6 <__multiply+0xe4>
 80163fa:	3e01      	subs	r6, #1
 80163fc:	e799      	b.n	8016332 <__multiply+0x60>
	...

08016400 <__pow5mult>:
 8016400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016404:	4615      	mov	r5, r2
 8016406:	f012 0203 	ands.w	r2, r2, #3
 801640a:	4606      	mov	r6, r0
 801640c:	460f      	mov	r7, r1
 801640e:	d007      	beq.n	8016420 <__pow5mult+0x20>
 8016410:	3a01      	subs	r2, #1
 8016412:	4c21      	ldr	r4, [pc, #132]	; (8016498 <__pow5mult+0x98>)
 8016414:	2300      	movs	r3, #0
 8016416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801641a:	f7ff fe8a 	bl	8016132 <__multadd>
 801641e:	4607      	mov	r7, r0
 8016420:	10ad      	asrs	r5, r5, #2
 8016422:	d035      	beq.n	8016490 <__pow5mult+0x90>
 8016424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016426:	b93c      	cbnz	r4, 8016438 <__pow5mult+0x38>
 8016428:	2010      	movs	r0, #16
 801642a:	f7ff fe1d 	bl	8016068 <malloc>
 801642e:	6270      	str	r0, [r6, #36]	; 0x24
 8016430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016434:	6004      	str	r4, [r0, #0]
 8016436:	60c4      	str	r4, [r0, #12]
 8016438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801643c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016440:	b94c      	cbnz	r4, 8016456 <__pow5mult+0x56>
 8016442:	f240 2171 	movw	r1, #625	; 0x271
 8016446:	4630      	mov	r0, r6
 8016448:	f7ff ff3a 	bl	80162c0 <__i2b>
 801644c:	2300      	movs	r3, #0
 801644e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016452:	4604      	mov	r4, r0
 8016454:	6003      	str	r3, [r0, #0]
 8016456:	f04f 0800 	mov.w	r8, #0
 801645a:	07eb      	lsls	r3, r5, #31
 801645c:	d50a      	bpl.n	8016474 <__pow5mult+0x74>
 801645e:	4639      	mov	r1, r7
 8016460:	4622      	mov	r2, r4
 8016462:	4630      	mov	r0, r6
 8016464:	f7ff ff35 	bl	80162d2 <__multiply>
 8016468:	4639      	mov	r1, r7
 801646a:	4681      	mov	r9, r0
 801646c:	4630      	mov	r0, r6
 801646e:	f7ff fe49 	bl	8016104 <_Bfree>
 8016472:	464f      	mov	r7, r9
 8016474:	106d      	asrs	r5, r5, #1
 8016476:	d00b      	beq.n	8016490 <__pow5mult+0x90>
 8016478:	6820      	ldr	r0, [r4, #0]
 801647a:	b938      	cbnz	r0, 801648c <__pow5mult+0x8c>
 801647c:	4622      	mov	r2, r4
 801647e:	4621      	mov	r1, r4
 8016480:	4630      	mov	r0, r6
 8016482:	f7ff ff26 	bl	80162d2 <__multiply>
 8016486:	6020      	str	r0, [r4, #0]
 8016488:	f8c0 8000 	str.w	r8, [r0]
 801648c:	4604      	mov	r4, r0
 801648e:	e7e4      	b.n	801645a <__pow5mult+0x5a>
 8016490:	4638      	mov	r0, r7
 8016492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016496:	bf00      	nop
 8016498:	08018998 	.word	0x08018998

0801649c <__lshift>:
 801649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164a0:	460c      	mov	r4, r1
 80164a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80164a6:	6923      	ldr	r3, [r4, #16]
 80164a8:	6849      	ldr	r1, [r1, #4]
 80164aa:	eb0a 0903 	add.w	r9, sl, r3
 80164ae:	68a3      	ldr	r3, [r4, #8]
 80164b0:	4607      	mov	r7, r0
 80164b2:	4616      	mov	r6, r2
 80164b4:	f109 0501 	add.w	r5, r9, #1
 80164b8:	42ab      	cmp	r3, r5
 80164ba:	db32      	blt.n	8016522 <__lshift+0x86>
 80164bc:	4638      	mov	r0, r7
 80164be:	f7ff fded 	bl	801609c <_Balloc>
 80164c2:	2300      	movs	r3, #0
 80164c4:	4680      	mov	r8, r0
 80164c6:	f100 0114 	add.w	r1, r0, #20
 80164ca:	461a      	mov	r2, r3
 80164cc:	4553      	cmp	r3, sl
 80164ce:	db2b      	blt.n	8016528 <__lshift+0x8c>
 80164d0:	6920      	ldr	r0, [r4, #16]
 80164d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80164d6:	f104 0314 	add.w	r3, r4, #20
 80164da:	f016 021f 	ands.w	r2, r6, #31
 80164de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80164e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80164e6:	d025      	beq.n	8016534 <__lshift+0x98>
 80164e8:	f1c2 0e20 	rsb	lr, r2, #32
 80164ec:	2000      	movs	r0, #0
 80164ee:	681e      	ldr	r6, [r3, #0]
 80164f0:	468a      	mov	sl, r1
 80164f2:	4096      	lsls	r6, r2
 80164f4:	4330      	orrs	r0, r6
 80164f6:	f84a 0b04 	str.w	r0, [sl], #4
 80164fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80164fe:	459c      	cmp	ip, r3
 8016500:	fa20 f00e 	lsr.w	r0, r0, lr
 8016504:	d814      	bhi.n	8016530 <__lshift+0x94>
 8016506:	6048      	str	r0, [r1, #4]
 8016508:	b108      	cbz	r0, 801650e <__lshift+0x72>
 801650a:	f109 0502 	add.w	r5, r9, #2
 801650e:	3d01      	subs	r5, #1
 8016510:	4638      	mov	r0, r7
 8016512:	f8c8 5010 	str.w	r5, [r8, #16]
 8016516:	4621      	mov	r1, r4
 8016518:	f7ff fdf4 	bl	8016104 <_Bfree>
 801651c:	4640      	mov	r0, r8
 801651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016522:	3101      	adds	r1, #1
 8016524:	005b      	lsls	r3, r3, #1
 8016526:	e7c7      	b.n	80164b8 <__lshift+0x1c>
 8016528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801652c:	3301      	adds	r3, #1
 801652e:	e7cd      	b.n	80164cc <__lshift+0x30>
 8016530:	4651      	mov	r1, sl
 8016532:	e7dc      	b.n	80164ee <__lshift+0x52>
 8016534:	3904      	subs	r1, #4
 8016536:	f853 2b04 	ldr.w	r2, [r3], #4
 801653a:	f841 2f04 	str.w	r2, [r1, #4]!
 801653e:	459c      	cmp	ip, r3
 8016540:	d8f9      	bhi.n	8016536 <__lshift+0x9a>
 8016542:	e7e4      	b.n	801650e <__lshift+0x72>

08016544 <__mcmp>:
 8016544:	6903      	ldr	r3, [r0, #16]
 8016546:	690a      	ldr	r2, [r1, #16]
 8016548:	1a9b      	subs	r3, r3, r2
 801654a:	b530      	push	{r4, r5, lr}
 801654c:	d10c      	bne.n	8016568 <__mcmp+0x24>
 801654e:	0092      	lsls	r2, r2, #2
 8016550:	3014      	adds	r0, #20
 8016552:	3114      	adds	r1, #20
 8016554:	1884      	adds	r4, r0, r2
 8016556:	4411      	add	r1, r2
 8016558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801655c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016560:	4295      	cmp	r5, r2
 8016562:	d003      	beq.n	801656c <__mcmp+0x28>
 8016564:	d305      	bcc.n	8016572 <__mcmp+0x2e>
 8016566:	2301      	movs	r3, #1
 8016568:	4618      	mov	r0, r3
 801656a:	bd30      	pop	{r4, r5, pc}
 801656c:	42a0      	cmp	r0, r4
 801656e:	d3f3      	bcc.n	8016558 <__mcmp+0x14>
 8016570:	e7fa      	b.n	8016568 <__mcmp+0x24>
 8016572:	f04f 33ff 	mov.w	r3, #4294967295
 8016576:	e7f7      	b.n	8016568 <__mcmp+0x24>

08016578 <__mdiff>:
 8016578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801657c:	460d      	mov	r5, r1
 801657e:	4607      	mov	r7, r0
 8016580:	4611      	mov	r1, r2
 8016582:	4628      	mov	r0, r5
 8016584:	4614      	mov	r4, r2
 8016586:	f7ff ffdd 	bl	8016544 <__mcmp>
 801658a:	1e06      	subs	r6, r0, #0
 801658c:	d108      	bne.n	80165a0 <__mdiff+0x28>
 801658e:	4631      	mov	r1, r6
 8016590:	4638      	mov	r0, r7
 8016592:	f7ff fd83 	bl	801609c <_Balloc>
 8016596:	2301      	movs	r3, #1
 8016598:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165a0:	bfa4      	itt	ge
 80165a2:	4623      	movge	r3, r4
 80165a4:	462c      	movge	r4, r5
 80165a6:	4638      	mov	r0, r7
 80165a8:	6861      	ldr	r1, [r4, #4]
 80165aa:	bfa6      	itte	ge
 80165ac:	461d      	movge	r5, r3
 80165ae:	2600      	movge	r6, #0
 80165b0:	2601      	movlt	r6, #1
 80165b2:	f7ff fd73 	bl	801609c <_Balloc>
 80165b6:	692b      	ldr	r3, [r5, #16]
 80165b8:	60c6      	str	r6, [r0, #12]
 80165ba:	6926      	ldr	r6, [r4, #16]
 80165bc:	f105 0914 	add.w	r9, r5, #20
 80165c0:	f104 0214 	add.w	r2, r4, #20
 80165c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80165c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80165cc:	f100 0514 	add.w	r5, r0, #20
 80165d0:	f04f 0e00 	mov.w	lr, #0
 80165d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80165d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80165dc:	fa1e f18a 	uxtah	r1, lr, sl
 80165e0:	b2a3      	uxth	r3, r4
 80165e2:	1ac9      	subs	r1, r1, r3
 80165e4:	0c23      	lsrs	r3, r4, #16
 80165e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80165ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80165ee:	b289      	uxth	r1, r1
 80165f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80165f4:	45c8      	cmp	r8, r9
 80165f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80165fa:	4694      	mov	ip, r2
 80165fc:	f845 3b04 	str.w	r3, [r5], #4
 8016600:	d8e8      	bhi.n	80165d4 <__mdiff+0x5c>
 8016602:	45bc      	cmp	ip, r7
 8016604:	d304      	bcc.n	8016610 <__mdiff+0x98>
 8016606:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801660a:	b183      	cbz	r3, 801662e <__mdiff+0xb6>
 801660c:	6106      	str	r6, [r0, #16]
 801660e:	e7c5      	b.n	801659c <__mdiff+0x24>
 8016610:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016614:	fa1e f381 	uxtah	r3, lr, r1
 8016618:	141a      	asrs	r2, r3, #16
 801661a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801661e:	b29b      	uxth	r3, r3
 8016620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016624:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016628:	f845 3b04 	str.w	r3, [r5], #4
 801662c:	e7e9      	b.n	8016602 <__mdiff+0x8a>
 801662e:	3e01      	subs	r6, #1
 8016630:	e7e9      	b.n	8016606 <__mdiff+0x8e>
	...

08016634 <__ulp>:
 8016634:	4b12      	ldr	r3, [pc, #72]	; (8016680 <__ulp+0x4c>)
 8016636:	ee10 2a90 	vmov	r2, s1
 801663a:	401a      	ands	r2, r3
 801663c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016640:	2b00      	cmp	r3, #0
 8016642:	dd04      	ble.n	801664e <__ulp+0x1a>
 8016644:	2000      	movs	r0, #0
 8016646:	4619      	mov	r1, r3
 8016648:	ec41 0b10 	vmov	d0, r0, r1
 801664c:	4770      	bx	lr
 801664e:	425b      	negs	r3, r3
 8016650:	151b      	asrs	r3, r3, #20
 8016652:	2b13      	cmp	r3, #19
 8016654:	f04f 0000 	mov.w	r0, #0
 8016658:	f04f 0100 	mov.w	r1, #0
 801665c:	dc04      	bgt.n	8016668 <__ulp+0x34>
 801665e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016662:	fa42 f103 	asr.w	r1, r2, r3
 8016666:	e7ef      	b.n	8016648 <__ulp+0x14>
 8016668:	3b14      	subs	r3, #20
 801666a:	2b1e      	cmp	r3, #30
 801666c:	f04f 0201 	mov.w	r2, #1
 8016670:	bfda      	itte	le
 8016672:	f1c3 031f 	rsble	r3, r3, #31
 8016676:	fa02 f303 	lslle.w	r3, r2, r3
 801667a:	4613      	movgt	r3, r2
 801667c:	4618      	mov	r0, r3
 801667e:	e7e3      	b.n	8016648 <__ulp+0x14>
 8016680:	7ff00000 	.word	0x7ff00000

08016684 <__b2d>:
 8016684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016686:	6905      	ldr	r5, [r0, #16]
 8016688:	f100 0714 	add.w	r7, r0, #20
 801668c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016690:	1f2e      	subs	r6, r5, #4
 8016692:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016696:	4620      	mov	r0, r4
 8016698:	f7ff fdc4 	bl	8016224 <__hi0bits>
 801669c:	f1c0 0320 	rsb	r3, r0, #32
 80166a0:	280a      	cmp	r0, #10
 80166a2:	600b      	str	r3, [r1, #0]
 80166a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801671c <__b2d+0x98>
 80166a8:	dc14      	bgt.n	80166d4 <__b2d+0x50>
 80166aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80166ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80166b2:	42b7      	cmp	r7, r6
 80166b4:	ea41 030c 	orr.w	r3, r1, ip
 80166b8:	bf34      	ite	cc
 80166ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80166be:	2100      	movcs	r1, #0
 80166c0:	3015      	adds	r0, #21
 80166c2:	fa04 f000 	lsl.w	r0, r4, r0
 80166c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80166ca:	ea40 0201 	orr.w	r2, r0, r1
 80166ce:	ec43 2b10 	vmov	d0, r2, r3
 80166d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166d4:	42b7      	cmp	r7, r6
 80166d6:	bf3a      	itte	cc
 80166d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80166dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80166e0:	2100      	movcs	r1, #0
 80166e2:	380b      	subs	r0, #11
 80166e4:	d015      	beq.n	8016712 <__b2d+0x8e>
 80166e6:	4084      	lsls	r4, r0
 80166e8:	f1c0 0520 	rsb	r5, r0, #32
 80166ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80166f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80166f4:	42be      	cmp	r6, r7
 80166f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80166fa:	ea44 030c 	orr.w	r3, r4, ip
 80166fe:	bf8c      	ite	hi
 8016700:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016704:	2400      	movls	r4, #0
 8016706:	fa01 f000 	lsl.w	r0, r1, r0
 801670a:	40ec      	lsrs	r4, r5
 801670c:	ea40 0204 	orr.w	r2, r0, r4
 8016710:	e7dd      	b.n	80166ce <__b2d+0x4a>
 8016712:	ea44 030c 	orr.w	r3, r4, ip
 8016716:	460a      	mov	r2, r1
 8016718:	e7d9      	b.n	80166ce <__b2d+0x4a>
 801671a:	bf00      	nop
 801671c:	3ff00000 	.word	0x3ff00000

08016720 <__d2b>:
 8016720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016724:	460e      	mov	r6, r1
 8016726:	2101      	movs	r1, #1
 8016728:	ec59 8b10 	vmov	r8, r9, d0
 801672c:	4615      	mov	r5, r2
 801672e:	f7ff fcb5 	bl	801609c <_Balloc>
 8016732:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016736:	4607      	mov	r7, r0
 8016738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801673c:	bb34      	cbnz	r4, 801678c <__d2b+0x6c>
 801673e:	9301      	str	r3, [sp, #4]
 8016740:	f1b8 0300 	subs.w	r3, r8, #0
 8016744:	d027      	beq.n	8016796 <__d2b+0x76>
 8016746:	a802      	add	r0, sp, #8
 8016748:	f840 3d08 	str.w	r3, [r0, #-8]!
 801674c:	f7ff fd89 	bl	8016262 <__lo0bits>
 8016750:	9900      	ldr	r1, [sp, #0]
 8016752:	b1f0      	cbz	r0, 8016792 <__d2b+0x72>
 8016754:	9a01      	ldr	r2, [sp, #4]
 8016756:	f1c0 0320 	rsb	r3, r0, #32
 801675a:	fa02 f303 	lsl.w	r3, r2, r3
 801675e:	430b      	orrs	r3, r1
 8016760:	40c2      	lsrs	r2, r0
 8016762:	617b      	str	r3, [r7, #20]
 8016764:	9201      	str	r2, [sp, #4]
 8016766:	9b01      	ldr	r3, [sp, #4]
 8016768:	61bb      	str	r3, [r7, #24]
 801676a:	2b00      	cmp	r3, #0
 801676c:	bf14      	ite	ne
 801676e:	2102      	movne	r1, #2
 8016770:	2101      	moveq	r1, #1
 8016772:	6139      	str	r1, [r7, #16]
 8016774:	b1c4      	cbz	r4, 80167a8 <__d2b+0x88>
 8016776:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801677a:	4404      	add	r4, r0
 801677c:	6034      	str	r4, [r6, #0]
 801677e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016782:	6028      	str	r0, [r5, #0]
 8016784:	4638      	mov	r0, r7
 8016786:	b003      	add	sp, #12
 8016788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801678c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016790:	e7d5      	b.n	801673e <__d2b+0x1e>
 8016792:	6179      	str	r1, [r7, #20]
 8016794:	e7e7      	b.n	8016766 <__d2b+0x46>
 8016796:	a801      	add	r0, sp, #4
 8016798:	f7ff fd63 	bl	8016262 <__lo0bits>
 801679c:	9b01      	ldr	r3, [sp, #4]
 801679e:	617b      	str	r3, [r7, #20]
 80167a0:	2101      	movs	r1, #1
 80167a2:	6139      	str	r1, [r7, #16]
 80167a4:	3020      	adds	r0, #32
 80167a6:	e7e5      	b.n	8016774 <__d2b+0x54>
 80167a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80167ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80167b0:	6030      	str	r0, [r6, #0]
 80167b2:	6918      	ldr	r0, [r3, #16]
 80167b4:	f7ff fd36 	bl	8016224 <__hi0bits>
 80167b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80167bc:	e7e1      	b.n	8016782 <__d2b+0x62>

080167be <__ratio>:
 80167be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c2:	4688      	mov	r8, r1
 80167c4:	4669      	mov	r1, sp
 80167c6:	4681      	mov	r9, r0
 80167c8:	f7ff ff5c 	bl	8016684 <__b2d>
 80167cc:	a901      	add	r1, sp, #4
 80167ce:	4640      	mov	r0, r8
 80167d0:	ec57 6b10 	vmov	r6, r7, d0
 80167d4:	ee10 4a10 	vmov	r4, s0
 80167d8:	f7ff ff54 	bl	8016684 <__b2d>
 80167dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80167e4:	eba3 0c02 	sub.w	ip, r3, r2
 80167e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80167ec:	1a9b      	subs	r3, r3, r2
 80167ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80167f2:	ec51 0b10 	vmov	r0, r1, d0
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	ee10 aa10 	vmov	sl, s0
 80167fc:	bfce      	itee	gt
 80167fe:	463a      	movgt	r2, r7
 8016800:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016804:	460a      	movle	r2, r1
 8016806:	463d      	mov	r5, r7
 8016808:	468b      	mov	fp, r1
 801680a:	bfcc      	ite	gt
 801680c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016810:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016814:	ec45 4b17 	vmov	d7, r4, r5
 8016818:	ec4b ab16 	vmov	d6, sl, fp
 801681c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8016820:	b003      	add	sp, #12
 8016822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016826 <__copybits>:
 8016826:	3901      	subs	r1, #1
 8016828:	b510      	push	{r4, lr}
 801682a:	1149      	asrs	r1, r1, #5
 801682c:	6914      	ldr	r4, [r2, #16]
 801682e:	3101      	adds	r1, #1
 8016830:	f102 0314 	add.w	r3, r2, #20
 8016834:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016838:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801683c:	42a3      	cmp	r3, r4
 801683e:	4602      	mov	r2, r0
 8016840:	d303      	bcc.n	801684a <__copybits+0x24>
 8016842:	2300      	movs	r3, #0
 8016844:	428a      	cmp	r2, r1
 8016846:	d305      	bcc.n	8016854 <__copybits+0x2e>
 8016848:	bd10      	pop	{r4, pc}
 801684a:	f853 2b04 	ldr.w	r2, [r3], #4
 801684e:	f840 2b04 	str.w	r2, [r0], #4
 8016852:	e7f3      	b.n	801683c <__copybits+0x16>
 8016854:	f842 3b04 	str.w	r3, [r2], #4
 8016858:	e7f4      	b.n	8016844 <__copybits+0x1e>

0801685a <__any_on>:
 801685a:	f100 0214 	add.w	r2, r0, #20
 801685e:	6900      	ldr	r0, [r0, #16]
 8016860:	114b      	asrs	r3, r1, #5
 8016862:	4298      	cmp	r0, r3
 8016864:	b510      	push	{r4, lr}
 8016866:	db11      	blt.n	801688c <__any_on+0x32>
 8016868:	dd0a      	ble.n	8016880 <__any_on+0x26>
 801686a:	f011 011f 	ands.w	r1, r1, #31
 801686e:	d007      	beq.n	8016880 <__any_on+0x26>
 8016870:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016874:	fa24 f001 	lsr.w	r0, r4, r1
 8016878:	fa00 f101 	lsl.w	r1, r0, r1
 801687c:	428c      	cmp	r4, r1
 801687e:	d10b      	bne.n	8016898 <__any_on+0x3e>
 8016880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016884:	4293      	cmp	r3, r2
 8016886:	d803      	bhi.n	8016890 <__any_on+0x36>
 8016888:	2000      	movs	r0, #0
 801688a:	bd10      	pop	{r4, pc}
 801688c:	4603      	mov	r3, r0
 801688e:	e7f7      	b.n	8016880 <__any_on+0x26>
 8016890:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016894:	2900      	cmp	r1, #0
 8016896:	d0f5      	beq.n	8016884 <__any_on+0x2a>
 8016898:	2001      	movs	r0, #1
 801689a:	e7f6      	b.n	801688a <__any_on+0x30>

0801689c <_calloc_r>:
 801689c:	b538      	push	{r3, r4, r5, lr}
 801689e:	fb02 f401 	mul.w	r4, r2, r1
 80168a2:	4621      	mov	r1, r4
 80168a4:	f000 f856 	bl	8016954 <_malloc_r>
 80168a8:	4605      	mov	r5, r0
 80168aa:	b118      	cbz	r0, 80168b4 <_calloc_r+0x18>
 80168ac:	4622      	mov	r2, r4
 80168ae:	2100      	movs	r1, #0
 80168b0:	f7fc fd23 	bl	80132fa <memset>
 80168b4:	4628      	mov	r0, r5
 80168b6:	bd38      	pop	{r3, r4, r5, pc}

080168b8 <_free_r>:
 80168b8:	b538      	push	{r3, r4, r5, lr}
 80168ba:	4605      	mov	r5, r0
 80168bc:	2900      	cmp	r1, #0
 80168be:	d045      	beq.n	801694c <_free_r+0x94>
 80168c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168c4:	1f0c      	subs	r4, r1, #4
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	bfb8      	it	lt
 80168ca:	18e4      	addlt	r4, r4, r3
 80168cc:	f000 fdc3 	bl	8017456 <__malloc_lock>
 80168d0:	4a1f      	ldr	r2, [pc, #124]	; (8016950 <_free_r+0x98>)
 80168d2:	6813      	ldr	r3, [r2, #0]
 80168d4:	4610      	mov	r0, r2
 80168d6:	b933      	cbnz	r3, 80168e6 <_free_r+0x2e>
 80168d8:	6063      	str	r3, [r4, #4]
 80168da:	6014      	str	r4, [r2, #0]
 80168dc:	4628      	mov	r0, r5
 80168de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168e2:	f000 bdb9 	b.w	8017458 <__malloc_unlock>
 80168e6:	42a3      	cmp	r3, r4
 80168e8:	d90c      	bls.n	8016904 <_free_r+0x4c>
 80168ea:	6821      	ldr	r1, [r4, #0]
 80168ec:	1862      	adds	r2, r4, r1
 80168ee:	4293      	cmp	r3, r2
 80168f0:	bf04      	itt	eq
 80168f2:	681a      	ldreq	r2, [r3, #0]
 80168f4:	685b      	ldreq	r3, [r3, #4]
 80168f6:	6063      	str	r3, [r4, #4]
 80168f8:	bf04      	itt	eq
 80168fa:	1852      	addeq	r2, r2, r1
 80168fc:	6022      	streq	r2, [r4, #0]
 80168fe:	6004      	str	r4, [r0, #0]
 8016900:	e7ec      	b.n	80168dc <_free_r+0x24>
 8016902:	4613      	mov	r3, r2
 8016904:	685a      	ldr	r2, [r3, #4]
 8016906:	b10a      	cbz	r2, 801690c <_free_r+0x54>
 8016908:	42a2      	cmp	r2, r4
 801690a:	d9fa      	bls.n	8016902 <_free_r+0x4a>
 801690c:	6819      	ldr	r1, [r3, #0]
 801690e:	1858      	adds	r0, r3, r1
 8016910:	42a0      	cmp	r0, r4
 8016912:	d10b      	bne.n	801692c <_free_r+0x74>
 8016914:	6820      	ldr	r0, [r4, #0]
 8016916:	4401      	add	r1, r0
 8016918:	1858      	adds	r0, r3, r1
 801691a:	4282      	cmp	r2, r0
 801691c:	6019      	str	r1, [r3, #0]
 801691e:	d1dd      	bne.n	80168dc <_free_r+0x24>
 8016920:	6810      	ldr	r0, [r2, #0]
 8016922:	6852      	ldr	r2, [r2, #4]
 8016924:	605a      	str	r2, [r3, #4]
 8016926:	4401      	add	r1, r0
 8016928:	6019      	str	r1, [r3, #0]
 801692a:	e7d7      	b.n	80168dc <_free_r+0x24>
 801692c:	d902      	bls.n	8016934 <_free_r+0x7c>
 801692e:	230c      	movs	r3, #12
 8016930:	602b      	str	r3, [r5, #0]
 8016932:	e7d3      	b.n	80168dc <_free_r+0x24>
 8016934:	6820      	ldr	r0, [r4, #0]
 8016936:	1821      	adds	r1, r4, r0
 8016938:	428a      	cmp	r2, r1
 801693a:	bf04      	itt	eq
 801693c:	6811      	ldreq	r1, [r2, #0]
 801693e:	6852      	ldreq	r2, [r2, #4]
 8016940:	6062      	str	r2, [r4, #4]
 8016942:	bf04      	itt	eq
 8016944:	1809      	addeq	r1, r1, r0
 8016946:	6021      	streq	r1, [r4, #0]
 8016948:	605c      	str	r4, [r3, #4]
 801694a:	e7c7      	b.n	80168dc <_free_r+0x24>
 801694c:	bd38      	pop	{r3, r4, r5, pc}
 801694e:	bf00      	nop
 8016950:	20028a7c 	.word	0x20028a7c

08016954 <_malloc_r>:
 8016954:	b570      	push	{r4, r5, r6, lr}
 8016956:	1ccd      	adds	r5, r1, #3
 8016958:	f025 0503 	bic.w	r5, r5, #3
 801695c:	3508      	adds	r5, #8
 801695e:	2d0c      	cmp	r5, #12
 8016960:	bf38      	it	cc
 8016962:	250c      	movcc	r5, #12
 8016964:	2d00      	cmp	r5, #0
 8016966:	4606      	mov	r6, r0
 8016968:	db01      	blt.n	801696e <_malloc_r+0x1a>
 801696a:	42a9      	cmp	r1, r5
 801696c:	d903      	bls.n	8016976 <_malloc_r+0x22>
 801696e:	230c      	movs	r3, #12
 8016970:	6033      	str	r3, [r6, #0]
 8016972:	2000      	movs	r0, #0
 8016974:	bd70      	pop	{r4, r5, r6, pc}
 8016976:	f000 fd6e 	bl	8017456 <__malloc_lock>
 801697a:	4a21      	ldr	r2, [pc, #132]	; (8016a00 <_malloc_r+0xac>)
 801697c:	6814      	ldr	r4, [r2, #0]
 801697e:	4621      	mov	r1, r4
 8016980:	b991      	cbnz	r1, 80169a8 <_malloc_r+0x54>
 8016982:	4c20      	ldr	r4, [pc, #128]	; (8016a04 <_malloc_r+0xb0>)
 8016984:	6823      	ldr	r3, [r4, #0]
 8016986:	b91b      	cbnz	r3, 8016990 <_malloc_r+0x3c>
 8016988:	4630      	mov	r0, r6
 801698a:	f000 facf 	bl	8016f2c <_sbrk_r>
 801698e:	6020      	str	r0, [r4, #0]
 8016990:	4629      	mov	r1, r5
 8016992:	4630      	mov	r0, r6
 8016994:	f000 faca 	bl	8016f2c <_sbrk_r>
 8016998:	1c43      	adds	r3, r0, #1
 801699a:	d124      	bne.n	80169e6 <_malloc_r+0x92>
 801699c:	230c      	movs	r3, #12
 801699e:	6033      	str	r3, [r6, #0]
 80169a0:	4630      	mov	r0, r6
 80169a2:	f000 fd59 	bl	8017458 <__malloc_unlock>
 80169a6:	e7e4      	b.n	8016972 <_malloc_r+0x1e>
 80169a8:	680b      	ldr	r3, [r1, #0]
 80169aa:	1b5b      	subs	r3, r3, r5
 80169ac:	d418      	bmi.n	80169e0 <_malloc_r+0x8c>
 80169ae:	2b0b      	cmp	r3, #11
 80169b0:	d90f      	bls.n	80169d2 <_malloc_r+0x7e>
 80169b2:	600b      	str	r3, [r1, #0]
 80169b4:	50cd      	str	r5, [r1, r3]
 80169b6:	18cc      	adds	r4, r1, r3
 80169b8:	4630      	mov	r0, r6
 80169ba:	f000 fd4d 	bl	8017458 <__malloc_unlock>
 80169be:	f104 000b 	add.w	r0, r4, #11
 80169c2:	1d23      	adds	r3, r4, #4
 80169c4:	f020 0007 	bic.w	r0, r0, #7
 80169c8:	1ac3      	subs	r3, r0, r3
 80169ca:	d0d3      	beq.n	8016974 <_malloc_r+0x20>
 80169cc:	425a      	negs	r2, r3
 80169ce:	50e2      	str	r2, [r4, r3]
 80169d0:	e7d0      	b.n	8016974 <_malloc_r+0x20>
 80169d2:	428c      	cmp	r4, r1
 80169d4:	684b      	ldr	r3, [r1, #4]
 80169d6:	bf16      	itet	ne
 80169d8:	6063      	strne	r3, [r4, #4]
 80169da:	6013      	streq	r3, [r2, #0]
 80169dc:	460c      	movne	r4, r1
 80169de:	e7eb      	b.n	80169b8 <_malloc_r+0x64>
 80169e0:	460c      	mov	r4, r1
 80169e2:	6849      	ldr	r1, [r1, #4]
 80169e4:	e7cc      	b.n	8016980 <_malloc_r+0x2c>
 80169e6:	1cc4      	adds	r4, r0, #3
 80169e8:	f024 0403 	bic.w	r4, r4, #3
 80169ec:	42a0      	cmp	r0, r4
 80169ee:	d005      	beq.n	80169fc <_malloc_r+0xa8>
 80169f0:	1a21      	subs	r1, r4, r0
 80169f2:	4630      	mov	r0, r6
 80169f4:	f000 fa9a 	bl	8016f2c <_sbrk_r>
 80169f8:	3001      	adds	r0, #1
 80169fa:	d0cf      	beq.n	801699c <_malloc_r+0x48>
 80169fc:	6025      	str	r5, [r4, #0]
 80169fe:	e7db      	b.n	80169b8 <_malloc_r+0x64>
 8016a00:	20028a7c 	.word	0x20028a7c
 8016a04:	20028a80 	.word	0x20028a80

08016a08 <__ssputs_r>:
 8016a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a0c:	688e      	ldr	r6, [r1, #8]
 8016a0e:	429e      	cmp	r6, r3
 8016a10:	4682      	mov	sl, r0
 8016a12:	460c      	mov	r4, r1
 8016a14:	4690      	mov	r8, r2
 8016a16:	4699      	mov	r9, r3
 8016a18:	d837      	bhi.n	8016a8a <__ssputs_r+0x82>
 8016a1a:	898a      	ldrh	r2, [r1, #12]
 8016a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a20:	d031      	beq.n	8016a86 <__ssputs_r+0x7e>
 8016a22:	6825      	ldr	r5, [r4, #0]
 8016a24:	6909      	ldr	r1, [r1, #16]
 8016a26:	1a6f      	subs	r7, r5, r1
 8016a28:	6965      	ldr	r5, [r4, #20]
 8016a2a:	2302      	movs	r3, #2
 8016a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a30:	fb95 f5f3 	sdiv	r5, r5, r3
 8016a34:	f109 0301 	add.w	r3, r9, #1
 8016a38:	443b      	add	r3, r7
 8016a3a:	429d      	cmp	r5, r3
 8016a3c:	bf38      	it	cc
 8016a3e:	461d      	movcc	r5, r3
 8016a40:	0553      	lsls	r3, r2, #21
 8016a42:	d530      	bpl.n	8016aa6 <__ssputs_r+0x9e>
 8016a44:	4629      	mov	r1, r5
 8016a46:	f7ff ff85 	bl	8016954 <_malloc_r>
 8016a4a:	4606      	mov	r6, r0
 8016a4c:	b950      	cbnz	r0, 8016a64 <__ssputs_r+0x5c>
 8016a4e:	230c      	movs	r3, #12
 8016a50:	f8ca 3000 	str.w	r3, [sl]
 8016a54:	89a3      	ldrh	r3, [r4, #12]
 8016a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a5a:	81a3      	strh	r3, [r4, #12]
 8016a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a64:	463a      	mov	r2, r7
 8016a66:	6921      	ldr	r1, [r4, #16]
 8016a68:	f7fc fc3c 	bl	80132e4 <memcpy>
 8016a6c:	89a3      	ldrh	r3, [r4, #12]
 8016a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a76:	81a3      	strh	r3, [r4, #12]
 8016a78:	6126      	str	r6, [r4, #16]
 8016a7a:	6165      	str	r5, [r4, #20]
 8016a7c:	443e      	add	r6, r7
 8016a7e:	1bed      	subs	r5, r5, r7
 8016a80:	6026      	str	r6, [r4, #0]
 8016a82:	60a5      	str	r5, [r4, #8]
 8016a84:	464e      	mov	r6, r9
 8016a86:	454e      	cmp	r6, r9
 8016a88:	d900      	bls.n	8016a8c <__ssputs_r+0x84>
 8016a8a:	464e      	mov	r6, r9
 8016a8c:	4632      	mov	r2, r6
 8016a8e:	4641      	mov	r1, r8
 8016a90:	6820      	ldr	r0, [r4, #0]
 8016a92:	f000 fcc7 	bl	8017424 <memmove>
 8016a96:	68a3      	ldr	r3, [r4, #8]
 8016a98:	1b9b      	subs	r3, r3, r6
 8016a9a:	60a3      	str	r3, [r4, #8]
 8016a9c:	6823      	ldr	r3, [r4, #0]
 8016a9e:	441e      	add	r6, r3
 8016aa0:	6026      	str	r6, [r4, #0]
 8016aa2:	2000      	movs	r0, #0
 8016aa4:	e7dc      	b.n	8016a60 <__ssputs_r+0x58>
 8016aa6:	462a      	mov	r2, r5
 8016aa8:	f000 fcd7 	bl	801745a <_realloc_r>
 8016aac:	4606      	mov	r6, r0
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	d1e2      	bne.n	8016a78 <__ssputs_r+0x70>
 8016ab2:	6921      	ldr	r1, [r4, #16]
 8016ab4:	4650      	mov	r0, sl
 8016ab6:	f7ff feff 	bl	80168b8 <_free_r>
 8016aba:	e7c8      	b.n	8016a4e <__ssputs_r+0x46>

08016abc <_svfiprintf_r>:
 8016abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac0:	461d      	mov	r5, r3
 8016ac2:	898b      	ldrh	r3, [r1, #12]
 8016ac4:	061f      	lsls	r7, r3, #24
 8016ac6:	b09d      	sub	sp, #116	; 0x74
 8016ac8:	4680      	mov	r8, r0
 8016aca:	460c      	mov	r4, r1
 8016acc:	4616      	mov	r6, r2
 8016ace:	d50f      	bpl.n	8016af0 <_svfiprintf_r+0x34>
 8016ad0:	690b      	ldr	r3, [r1, #16]
 8016ad2:	b96b      	cbnz	r3, 8016af0 <_svfiprintf_r+0x34>
 8016ad4:	2140      	movs	r1, #64	; 0x40
 8016ad6:	f7ff ff3d 	bl	8016954 <_malloc_r>
 8016ada:	6020      	str	r0, [r4, #0]
 8016adc:	6120      	str	r0, [r4, #16]
 8016ade:	b928      	cbnz	r0, 8016aec <_svfiprintf_r+0x30>
 8016ae0:	230c      	movs	r3, #12
 8016ae2:	f8c8 3000 	str.w	r3, [r8]
 8016ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8016aea:	e0c8      	b.n	8016c7e <_svfiprintf_r+0x1c2>
 8016aec:	2340      	movs	r3, #64	; 0x40
 8016aee:	6163      	str	r3, [r4, #20]
 8016af0:	2300      	movs	r3, #0
 8016af2:	9309      	str	r3, [sp, #36]	; 0x24
 8016af4:	2320      	movs	r3, #32
 8016af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016afa:	2330      	movs	r3, #48	; 0x30
 8016afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b00:	9503      	str	r5, [sp, #12]
 8016b02:	f04f 0b01 	mov.w	fp, #1
 8016b06:	4637      	mov	r7, r6
 8016b08:	463d      	mov	r5, r7
 8016b0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016b0e:	b10b      	cbz	r3, 8016b14 <_svfiprintf_r+0x58>
 8016b10:	2b25      	cmp	r3, #37	; 0x25
 8016b12:	d13e      	bne.n	8016b92 <_svfiprintf_r+0xd6>
 8016b14:	ebb7 0a06 	subs.w	sl, r7, r6
 8016b18:	d00b      	beq.n	8016b32 <_svfiprintf_r+0x76>
 8016b1a:	4653      	mov	r3, sl
 8016b1c:	4632      	mov	r2, r6
 8016b1e:	4621      	mov	r1, r4
 8016b20:	4640      	mov	r0, r8
 8016b22:	f7ff ff71 	bl	8016a08 <__ssputs_r>
 8016b26:	3001      	adds	r0, #1
 8016b28:	f000 80a4 	beq.w	8016c74 <_svfiprintf_r+0x1b8>
 8016b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b2e:	4453      	add	r3, sl
 8016b30:	9309      	str	r3, [sp, #36]	; 0x24
 8016b32:	783b      	ldrb	r3, [r7, #0]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	f000 809d 	beq.w	8016c74 <_svfiprintf_r+0x1b8>
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8016b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b44:	9304      	str	r3, [sp, #16]
 8016b46:	9307      	str	r3, [sp, #28]
 8016b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8016b4e:	462f      	mov	r7, r5
 8016b50:	2205      	movs	r2, #5
 8016b52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016b56:	4850      	ldr	r0, [pc, #320]	; (8016c98 <_svfiprintf_r+0x1dc>)
 8016b58:	f7e9 fb7a 	bl	8000250 <memchr>
 8016b5c:	9b04      	ldr	r3, [sp, #16]
 8016b5e:	b9d0      	cbnz	r0, 8016b96 <_svfiprintf_r+0xda>
 8016b60:	06d9      	lsls	r1, r3, #27
 8016b62:	bf44      	itt	mi
 8016b64:	2220      	movmi	r2, #32
 8016b66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016b6a:	071a      	lsls	r2, r3, #28
 8016b6c:	bf44      	itt	mi
 8016b6e:	222b      	movmi	r2, #43	; 0x2b
 8016b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016b74:	782a      	ldrb	r2, [r5, #0]
 8016b76:	2a2a      	cmp	r2, #42	; 0x2a
 8016b78:	d015      	beq.n	8016ba6 <_svfiprintf_r+0xea>
 8016b7a:	9a07      	ldr	r2, [sp, #28]
 8016b7c:	462f      	mov	r7, r5
 8016b7e:	2000      	movs	r0, #0
 8016b80:	250a      	movs	r5, #10
 8016b82:	4639      	mov	r1, r7
 8016b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b88:	3b30      	subs	r3, #48	; 0x30
 8016b8a:	2b09      	cmp	r3, #9
 8016b8c:	d94d      	bls.n	8016c2a <_svfiprintf_r+0x16e>
 8016b8e:	b1b8      	cbz	r0, 8016bc0 <_svfiprintf_r+0x104>
 8016b90:	e00f      	b.n	8016bb2 <_svfiprintf_r+0xf6>
 8016b92:	462f      	mov	r7, r5
 8016b94:	e7b8      	b.n	8016b08 <_svfiprintf_r+0x4c>
 8016b96:	4a40      	ldr	r2, [pc, #256]	; (8016c98 <_svfiprintf_r+0x1dc>)
 8016b98:	1a80      	subs	r0, r0, r2
 8016b9a:	fa0b f000 	lsl.w	r0, fp, r0
 8016b9e:	4318      	orrs	r0, r3
 8016ba0:	9004      	str	r0, [sp, #16]
 8016ba2:	463d      	mov	r5, r7
 8016ba4:	e7d3      	b.n	8016b4e <_svfiprintf_r+0x92>
 8016ba6:	9a03      	ldr	r2, [sp, #12]
 8016ba8:	1d11      	adds	r1, r2, #4
 8016baa:	6812      	ldr	r2, [r2, #0]
 8016bac:	9103      	str	r1, [sp, #12]
 8016bae:	2a00      	cmp	r2, #0
 8016bb0:	db01      	blt.n	8016bb6 <_svfiprintf_r+0xfa>
 8016bb2:	9207      	str	r2, [sp, #28]
 8016bb4:	e004      	b.n	8016bc0 <_svfiprintf_r+0x104>
 8016bb6:	4252      	negs	r2, r2
 8016bb8:	f043 0302 	orr.w	r3, r3, #2
 8016bbc:	9207      	str	r2, [sp, #28]
 8016bbe:	9304      	str	r3, [sp, #16]
 8016bc0:	783b      	ldrb	r3, [r7, #0]
 8016bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8016bc4:	d10c      	bne.n	8016be0 <_svfiprintf_r+0x124>
 8016bc6:	787b      	ldrb	r3, [r7, #1]
 8016bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8016bca:	d133      	bne.n	8016c34 <_svfiprintf_r+0x178>
 8016bcc:	9b03      	ldr	r3, [sp, #12]
 8016bce:	1d1a      	adds	r2, r3, #4
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	9203      	str	r2, [sp, #12]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	bfb8      	it	lt
 8016bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8016bdc:	3702      	adds	r7, #2
 8016bde:	9305      	str	r3, [sp, #20]
 8016be0:	4d2e      	ldr	r5, [pc, #184]	; (8016c9c <_svfiprintf_r+0x1e0>)
 8016be2:	7839      	ldrb	r1, [r7, #0]
 8016be4:	2203      	movs	r2, #3
 8016be6:	4628      	mov	r0, r5
 8016be8:	f7e9 fb32 	bl	8000250 <memchr>
 8016bec:	b138      	cbz	r0, 8016bfe <_svfiprintf_r+0x142>
 8016bee:	2340      	movs	r3, #64	; 0x40
 8016bf0:	1b40      	subs	r0, r0, r5
 8016bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8016bf6:	9b04      	ldr	r3, [sp, #16]
 8016bf8:	4303      	orrs	r3, r0
 8016bfa:	3701      	adds	r7, #1
 8016bfc:	9304      	str	r3, [sp, #16]
 8016bfe:	7839      	ldrb	r1, [r7, #0]
 8016c00:	4827      	ldr	r0, [pc, #156]	; (8016ca0 <_svfiprintf_r+0x1e4>)
 8016c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c06:	2206      	movs	r2, #6
 8016c08:	1c7e      	adds	r6, r7, #1
 8016c0a:	f7e9 fb21 	bl	8000250 <memchr>
 8016c0e:	2800      	cmp	r0, #0
 8016c10:	d038      	beq.n	8016c84 <_svfiprintf_r+0x1c8>
 8016c12:	4b24      	ldr	r3, [pc, #144]	; (8016ca4 <_svfiprintf_r+0x1e8>)
 8016c14:	bb13      	cbnz	r3, 8016c5c <_svfiprintf_r+0x1a0>
 8016c16:	9b03      	ldr	r3, [sp, #12]
 8016c18:	3307      	adds	r3, #7
 8016c1a:	f023 0307 	bic.w	r3, r3, #7
 8016c1e:	3308      	adds	r3, #8
 8016c20:	9303      	str	r3, [sp, #12]
 8016c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c24:	444b      	add	r3, r9
 8016c26:	9309      	str	r3, [sp, #36]	; 0x24
 8016c28:	e76d      	b.n	8016b06 <_svfiprintf_r+0x4a>
 8016c2a:	fb05 3202 	mla	r2, r5, r2, r3
 8016c2e:	2001      	movs	r0, #1
 8016c30:	460f      	mov	r7, r1
 8016c32:	e7a6      	b.n	8016b82 <_svfiprintf_r+0xc6>
 8016c34:	2300      	movs	r3, #0
 8016c36:	3701      	adds	r7, #1
 8016c38:	9305      	str	r3, [sp, #20]
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	250a      	movs	r5, #10
 8016c3e:	4638      	mov	r0, r7
 8016c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c44:	3a30      	subs	r2, #48	; 0x30
 8016c46:	2a09      	cmp	r2, #9
 8016c48:	d903      	bls.n	8016c52 <_svfiprintf_r+0x196>
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d0c8      	beq.n	8016be0 <_svfiprintf_r+0x124>
 8016c4e:	9105      	str	r1, [sp, #20]
 8016c50:	e7c6      	b.n	8016be0 <_svfiprintf_r+0x124>
 8016c52:	fb05 2101 	mla	r1, r5, r1, r2
 8016c56:	2301      	movs	r3, #1
 8016c58:	4607      	mov	r7, r0
 8016c5a:	e7f0      	b.n	8016c3e <_svfiprintf_r+0x182>
 8016c5c:	ab03      	add	r3, sp, #12
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	4622      	mov	r2, r4
 8016c62:	4b11      	ldr	r3, [pc, #68]	; (8016ca8 <_svfiprintf_r+0x1ec>)
 8016c64:	a904      	add	r1, sp, #16
 8016c66:	4640      	mov	r0, r8
 8016c68:	f7fc fbd6 	bl	8013418 <_printf_float>
 8016c6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016c70:	4681      	mov	r9, r0
 8016c72:	d1d6      	bne.n	8016c22 <_svfiprintf_r+0x166>
 8016c74:	89a3      	ldrh	r3, [r4, #12]
 8016c76:	065b      	lsls	r3, r3, #25
 8016c78:	f53f af35 	bmi.w	8016ae6 <_svfiprintf_r+0x2a>
 8016c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c7e:	b01d      	add	sp, #116	; 0x74
 8016c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c84:	ab03      	add	r3, sp, #12
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	4622      	mov	r2, r4
 8016c8a:	4b07      	ldr	r3, [pc, #28]	; (8016ca8 <_svfiprintf_r+0x1ec>)
 8016c8c:	a904      	add	r1, sp, #16
 8016c8e:	4640      	mov	r0, r8
 8016c90:	f7fc fe64 	bl	801395c <_printf_i>
 8016c94:	e7ea      	b.n	8016c6c <_svfiprintf_r+0x1b0>
 8016c96:	bf00      	nop
 8016c98:	080189a4 	.word	0x080189a4
 8016c9c:	080189aa 	.word	0x080189aa
 8016ca0:	080189ae 	.word	0x080189ae
 8016ca4:	08013419 	.word	0x08013419
 8016ca8:	08016a09 	.word	0x08016a09

08016cac <__sfputc_r>:
 8016cac:	6893      	ldr	r3, [r2, #8]
 8016cae:	3b01      	subs	r3, #1
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	b410      	push	{r4}
 8016cb4:	6093      	str	r3, [r2, #8]
 8016cb6:	da08      	bge.n	8016cca <__sfputc_r+0x1e>
 8016cb8:	6994      	ldr	r4, [r2, #24]
 8016cba:	42a3      	cmp	r3, r4
 8016cbc:	db01      	blt.n	8016cc2 <__sfputc_r+0x16>
 8016cbe:	290a      	cmp	r1, #10
 8016cc0:	d103      	bne.n	8016cca <__sfputc_r+0x1e>
 8016cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cc6:	f000 b997 	b.w	8016ff8 <__swbuf_r>
 8016cca:	6813      	ldr	r3, [r2, #0]
 8016ccc:	1c58      	adds	r0, r3, #1
 8016cce:	6010      	str	r0, [r2, #0]
 8016cd0:	7019      	strb	r1, [r3, #0]
 8016cd2:	4608      	mov	r0, r1
 8016cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cd8:	4770      	bx	lr

08016cda <__sfputs_r>:
 8016cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cdc:	4606      	mov	r6, r0
 8016cde:	460f      	mov	r7, r1
 8016ce0:	4614      	mov	r4, r2
 8016ce2:	18d5      	adds	r5, r2, r3
 8016ce4:	42ac      	cmp	r4, r5
 8016ce6:	d101      	bne.n	8016cec <__sfputs_r+0x12>
 8016ce8:	2000      	movs	r0, #0
 8016cea:	e007      	b.n	8016cfc <__sfputs_r+0x22>
 8016cec:	463a      	mov	r2, r7
 8016cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cf2:	4630      	mov	r0, r6
 8016cf4:	f7ff ffda 	bl	8016cac <__sfputc_r>
 8016cf8:	1c43      	adds	r3, r0, #1
 8016cfa:	d1f3      	bne.n	8016ce4 <__sfputs_r+0xa>
 8016cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d00 <_vfiprintf_r>:
 8016d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d04:	460c      	mov	r4, r1
 8016d06:	b09d      	sub	sp, #116	; 0x74
 8016d08:	4617      	mov	r7, r2
 8016d0a:	461d      	mov	r5, r3
 8016d0c:	4606      	mov	r6, r0
 8016d0e:	b118      	cbz	r0, 8016d18 <_vfiprintf_r+0x18>
 8016d10:	6983      	ldr	r3, [r0, #24]
 8016d12:	b90b      	cbnz	r3, 8016d18 <_vfiprintf_r+0x18>
 8016d14:	f7fe fde4 	bl	80158e0 <__sinit>
 8016d18:	4b7c      	ldr	r3, [pc, #496]	; (8016f0c <_vfiprintf_r+0x20c>)
 8016d1a:	429c      	cmp	r4, r3
 8016d1c:	d158      	bne.n	8016dd0 <_vfiprintf_r+0xd0>
 8016d1e:	6874      	ldr	r4, [r6, #4]
 8016d20:	89a3      	ldrh	r3, [r4, #12]
 8016d22:	0718      	lsls	r0, r3, #28
 8016d24:	d55e      	bpl.n	8016de4 <_vfiprintf_r+0xe4>
 8016d26:	6923      	ldr	r3, [r4, #16]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d05b      	beq.n	8016de4 <_vfiprintf_r+0xe4>
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d30:	2320      	movs	r3, #32
 8016d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d36:	2330      	movs	r3, #48	; 0x30
 8016d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d3c:	9503      	str	r5, [sp, #12]
 8016d3e:	f04f 0b01 	mov.w	fp, #1
 8016d42:	46b8      	mov	r8, r7
 8016d44:	4645      	mov	r5, r8
 8016d46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016d4a:	b10b      	cbz	r3, 8016d50 <_vfiprintf_r+0x50>
 8016d4c:	2b25      	cmp	r3, #37	; 0x25
 8016d4e:	d154      	bne.n	8016dfa <_vfiprintf_r+0xfa>
 8016d50:	ebb8 0a07 	subs.w	sl, r8, r7
 8016d54:	d00b      	beq.n	8016d6e <_vfiprintf_r+0x6e>
 8016d56:	4653      	mov	r3, sl
 8016d58:	463a      	mov	r2, r7
 8016d5a:	4621      	mov	r1, r4
 8016d5c:	4630      	mov	r0, r6
 8016d5e:	f7ff ffbc 	bl	8016cda <__sfputs_r>
 8016d62:	3001      	adds	r0, #1
 8016d64:	f000 80c2 	beq.w	8016eec <_vfiprintf_r+0x1ec>
 8016d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d6a:	4453      	add	r3, sl
 8016d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016d6e:	f898 3000 	ldrb.w	r3, [r8]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	f000 80ba 	beq.w	8016eec <_vfiprintf_r+0x1ec>
 8016d78:	2300      	movs	r3, #0
 8016d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d82:	9304      	str	r3, [sp, #16]
 8016d84:	9307      	str	r3, [sp, #28]
 8016d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8016d8c:	46a8      	mov	r8, r5
 8016d8e:	2205      	movs	r2, #5
 8016d90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016d94:	485e      	ldr	r0, [pc, #376]	; (8016f10 <_vfiprintf_r+0x210>)
 8016d96:	f7e9 fa5b 	bl	8000250 <memchr>
 8016d9a:	9b04      	ldr	r3, [sp, #16]
 8016d9c:	bb78      	cbnz	r0, 8016dfe <_vfiprintf_r+0xfe>
 8016d9e:	06d9      	lsls	r1, r3, #27
 8016da0:	bf44      	itt	mi
 8016da2:	2220      	movmi	r2, #32
 8016da4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016da8:	071a      	lsls	r2, r3, #28
 8016daa:	bf44      	itt	mi
 8016dac:	222b      	movmi	r2, #43	; 0x2b
 8016dae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016db2:	782a      	ldrb	r2, [r5, #0]
 8016db4:	2a2a      	cmp	r2, #42	; 0x2a
 8016db6:	d02a      	beq.n	8016e0e <_vfiprintf_r+0x10e>
 8016db8:	9a07      	ldr	r2, [sp, #28]
 8016dba:	46a8      	mov	r8, r5
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	250a      	movs	r5, #10
 8016dc0:	4641      	mov	r1, r8
 8016dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016dc6:	3b30      	subs	r3, #48	; 0x30
 8016dc8:	2b09      	cmp	r3, #9
 8016dca:	d969      	bls.n	8016ea0 <_vfiprintf_r+0x1a0>
 8016dcc:	b360      	cbz	r0, 8016e28 <_vfiprintf_r+0x128>
 8016dce:	e024      	b.n	8016e1a <_vfiprintf_r+0x11a>
 8016dd0:	4b50      	ldr	r3, [pc, #320]	; (8016f14 <_vfiprintf_r+0x214>)
 8016dd2:	429c      	cmp	r4, r3
 8016dd4:	d101      	bne.n	8016dda <_vfiprintf_r+0xda>
 8016dd6:	68b4      	ldr	r4, [r6, #8]
 8016dd8:	e7a2      	b.n	8016d20 <_vfiprintf_r+0x20>
 8016dda:	4b4f      	ldr	r3, [pc, #316]	; (8016f18 <_vfiprintf_r+0x218>)
 8016ddc:	429c      	cmp	r4, r3
 8016dde:	bf08      	it	eq
 8016de0:	68f4      	ldreq	r4, [r6, #12]
 8016de2:	e79d      	b.n	8016d20 <_vfiprintf_r+0x20>
 8016de4:	4621      	mov	r1, r4
 8016de6:	4630      	mov	r0, r6
 8016de8:	f000 f978 	bl	80170dc <__swsetup_r>
 8016dec:	2800      	cmp	r0, #0
 8016dee:	d09d      	beq.n	8016d2c <_vfiprintf_r+0x2c>
 8016df0:	f04f 30ff 	mov.w	r0, #4294967295
 8016df4:	b01d      	add	sp, #116	; 0x74
 8016df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dfa:	46a8      	mov	r8, r5
 8016dfc:	e7a2      	b.n	8016d44 <_vfiprintf_r+0x44>
 8016dfe:	4a44      	ldr	r2, [pc, #272]	; (8016f10 <_vfiprintf_r+0x210>)
 8016e00:	1a80      	subs	r0, r0, r2
 8016e02:	fa0b f000 	lsl.w	r0, fp, r0
 8016e06:	4318      	orrs	r0, r3
 8016e08:	9004      	str	r0, [sp, #16]
 8016e0a:	4645      	mov	r5, r8
 8016e0c:	e7be      	b.n	8016d8c <_vfiprintf_r+0x8c>
 8016e0e:	9a03      	ldr	r2, [sp, #12]
 8016e10:	1d11      	adds	r1, r2, #4
 8016e12:	6812      	ldr	r2, [r2, #0]
 8016e14:	9103      	str	r1, [sp, #12]
 8016e16:	2a00      	cmp	r2, #0
 8016e18:	db01      	blt.n	8016e1e <_vfiprintf_r+0x11e>
 8016e1a:	9207      	str	r2, [sp, #28]
 8016e1c:	e004      	b.n	8016e28 <_vfiprintf_r+0x128>
 8016e1e:	4252      	negs	r2, r2
 8016e20:	f043 0302 	orr.w	r3, r3, #2
 8016e24:	9207      	str	r2, [sp, #28]
 8016e26:	9304      	str	r3, [sp, #16]
 8016e28:	f898 3000 	ldrb.w	r3, [r8]
 8016e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8016e2e:	d10e      	bne.n	8016e4e <_vfiprintf_r+0x14e>
 8016e30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016e34:	2b2a      	cmp	r3, #42	; 0x2a
 8016e36:	d138      	bne.n	8016eaa <_vfiprintf_r+0x1aa>
 8016e38:	9b03      	ldr	r3, [sp, #12]
 8016e3a:	1d1a      	adds	r2, r3, #4
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	9203      	str	r2, [sp, #12]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	bfb8      	it	lt
 8016e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e48:	f108 0802 	add.w	r8, r8, #2
 8016e4c:	9305      	str	r3, [sp, #20]
 8016e4e:	4d33      	ldr	r5, [pc, #204]	; (8016f1c <_vfiprintf_r+0x21c>)
 8016e50:	f898 1000 	ldrb.w	r1, [r8]
 8016e54:	2203      	movs	r2, #3
 8016e56:	4628      	mov	r0, r5
 8016e58:	f7e9 f9fa 	bl	8000250 <memchr>
 8016e5c:	b140      	cbz	r0, 8016e70 <_vfiprintf_r+0x170>
 8016e5e:	2340      	movs	r3, #64	; 0x40
 8016e60:	1b40      	subs	r0, r0, r5
 8016e62:	fa03 f000 	lsl.w	r0, r3, r0
 8016e66:	9b04      	ldr	r3, [sp, #16]
 8016e68:	4303      	orrs	r3, r0
 8016e6a:	f108 0801 	add.w	r8, r8, #1
 8016e6e:	9304      	str	r3, [sp, #16]
 8016e70:	f898 1000 	ldrb.w	r1, [r8]
 8016e74:	482a      	ldr	r0, [pc, #168]	; (8016f20 <_vfiprintf_r+0x220>)
 8016e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e7a:	2206      	movs	r2, #6
 8016e7c:	f108 0701 	add.w	r7, r8, #1
 8016e80:	f7e9 f9e6 	bl	8000250 <memchr>
 8016e84:	2800      	cmp	r0, #0
 8016e86:	d037      	beq.n	8016ef8 <_vfiprintf_r+0x1f8>
 8016e88:	4b26      	ldr	r3, [pc, #152]	; (8016f24 <_vfiprintf_r+0x224>)
 8016e8a:	bb1b      	cbnz	r3, 8016ed4 <_vfiprintf_r+0x1d4>
 8016e8c:	9b03      	ldr	r3, [sp, #12]
 8016e8e:	3307      	adds	r3, #7
 8016e90:	f023 0307 	bic.w	r3, r3, #7
 8016e94:	3308      	adds	r3, #8
 8016e96:	9303      	str	r3, [sp, #12]
 8016e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9a:	444b      	add	r3, r9
 8016e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e9e:	e750      	b.n	8016d42 <_vfiprintf_r+0x42>
 8016ea0:	fb05 3202 	mla	r2, r5, r2, r3
 8016ea4:	2001      	movs	r0, #1
 8016ea6:	4688      	mov	r8, r1
 8016ea8:	e78a      	b.n	8016dc0 <_vfiprintf_r+0xc0>
 8016eaa:	2300      	movs	r3, #0
 8016eac:	f108 0801 	add.w	r8, r8, #1
 8016eb0:	9305      	str	r3, [sp, #20]
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	250a      	movs	r5, #10
 8016eb6:	4640      	mov	r0, r8
 8016eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ebc:	3a30      	subs	r2, #48	; 0x30
 8016ebe:	2a09      	cmp	r2, #9
 8016ec0:	d903      	bls.n	8016eca <_vfiprintf_r+0x1ca>
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d0c3      	beq.n	8016e4e <_vfiprintf_r+0x14e>
 8016ec6:	9105      	str	r1, [sp, #20]
 8016ec8:	e7c1      	b.n	8016e4e <_vfiprintf_r+0x14e>
 8016eca:	fb05 2101 	mla	r1, r5, r1, r2
 8016ece:	2301      	movs	r3, #1
 8016ed0:	4680      	mov	r8, r0
 8016ed2:	e7f0      	b.n	8016eb6 <_vfiprintf_r+0x1b6>
 8016ed4:	ab03      	add	r3, sp, #12
 8016ed6:	9300      	str	r3, [sp, #0]
 8016ed8:	4622      	mov	r2, r4
 8016eda:	4b13      	ldr	r3, [pc, #76]	; (8016f28 <_vfiprintf_r+0x228>)
 8016edc:	a904      	add	r1, sp, #16
 8016ede:	4630      	mov	r0, r6
 8016ee0:	f7fc fa9a 	bl	8013418 <_printf_float>
 8016ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016ee8:	4681      	mov	r9, r0
 8016eea:	d1d5      	bne.n	8016e98 <_vfiprintf_r+0x198>
 8016eec:	89a3      	ldrh	r3, [r4, #12]
 8016eee:	065b      	lsls	r3, r3, #25
 8016ef0:	f53f af7e 	bmi.w	8016df0 <_vfiprintf_r+0xf0>
 8016ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ef6:	e77d      	b.n	8016df4 <_vfiprintf_r+0xf4>
 8016ef8:	ab03      	add	r3, sp, #12
 8016efa:	9300      	str	r3, [sp, #0]
 8016efc:	4622      	mov	r2, r4
 8016efe:	4b0a      	ldr	r3, [pc, #40]	; (8016f28 <_vfiprintf_r+0x228>)
 8016f00:	a904      	add	r1, sp, #16
 8016f02:	4630      	mov	r0, r6
 8016f04:	f7fc fd2a 	bl	801395c <_printf_i>
 8016f08:	e7ec      	b.n	8016ee4 <_vfiprintf_r+0x1e4>
 8016f0a:	bf00      	nop
 8016f0c:	08018858 	.word	0x08018858
 8016f10:	080189a4 	.word	0x080189a4
 8016f14:	08018878 	.word	0x08018878
 8016f18:	08018838 	.word	0x08018838
 8016f1c:	080189aa 	.word	0x080189aa
 8016f20:	080189ae 	.word	0x080189ae
 8016f24:	08013419 	.word	0x08013419
 8016f28:	08016cdb 	.word	0x08016cdb

08016f2c <_sbrk_r>:
 8016f2c:	b538      	push	{r3, r4, r5, lr}
 8016f2e:	4c06      	ldr	r4, [pc, #24]	; (8016f48 <_sbrk_r+0x1c>)
 8016f30:	2300      	movs	r3, #0
 8016f32:	4605      	mov	r5, r0
 8016f34:	4608      	mov	r0, r1
 8016f36:	6023      	str	r3, [r4, #0]
 8016f38:	f7f2 f96a 	bl	8009210 <_sbrk>
 8016f3c:	1c43      	adds	r3, r0, #1
 8016f3e:	d102      	bne.n	8016f46 <_sbrk_r+0x1a>
 8016f40:	6823      	ldr	r3, [r4, #0]
 8016f42:	b103      	cbz	r3, 8016f46 <_sbrk_r+0x1a>
 8016f44:	602b      	str	r3, [r5, #0]
 8016f46:	bd38      	pop	{r3, r4, r5, pc}
 8016f48:	20031198 	.word	0x20031198

08016f4c <__sread>:
 8016f4c:	b510      	push	{r4, lr}
 8016f4e:	460c      	mov	r4, r1
 8016f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f54:	f000 faa8 	bl	80174a8 <_read_r>
 8016f58:	2800      	cmp	r0, #0
 8016f5a:	bfab      	itete	ge
 8016f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8016f60:	181b      	addge	r3, r3, r0
 8016f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f66:	bfac      	ite	ge
 8016f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f6a:	81a3      	strhlt	r3, [r4, #12]
 8016f6c:	bd10      	pop	{r4, pc}

08016f6e <__swrite>:
 8016f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f72:	461f      	mov	r7, r3
 8016f74:	898b      	ldrh	r3, [r1, #12]
 8016f76:	05db      	lsls	r3, r3, #23
 8016f78:	4605      	mov	r5, r0
 8016f7a:	460c      	mov	r4, r1
 8016f7c:	4616      	mov	r6, r2
 8016f7e:	d505      	bpl.n	8016f8c <__swrite+0x1e>
 8016f80:	2302      	movs	r3, #2
 8016f82:	2200      	movs	r2, #0
 8016f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f88:	f000 f9d6 	bl	8017338 <_lseek_r>
 8016f8c:	89a3      	ldrh	r3, [r4, #12]
 8016f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f96:	81a3      	strh	r3, [r4, #12]
 8016f98:	4632      	mov	r2, r6
 8016f9a:	463b      	mov	r3, r7
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa2:	f000 b889 	b.w	80170b8 <_write_r>

08016fa6 <__sseek>:
 8016fa6:	b510      	push	{r4, lr}
 8016fa8:	460c      	mov	r4, r1
 8016faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fae:	f000 f9c3 	bl	8017338 <_lseek_r>
 8016fb2:	1c43      	adds	r3, r0, #1
 8016fb4:	89a3      	ldrh	r3, [r4, #12]
 8016fb6:	bf15      	itete	ne
 8016fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016fc2:	81a3      	strheq	r3, [r4, #12]
 8016fc4:	bf18      	it	ne
 8016fc6:	81a3      	strhne	r3, [r4, #12]
 8016fc8:	bd10      	pop	{r4, pc}

08016fca <__sclose>:
 8016fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fce:	f000 b8f3 	b.w	80171b8 <_close_r>

08016fd2 <strncmp>:
 8016fd2:	b510      	push	{r4, lr}
 8016fd4:	b16a      	cbz	r2, 8016ff2 <strncmp+0x20>
 8016fd6:	3901      	subs	r1, #1
 8016fd8:	1884      	adds	r4, r0, r2
 8016fda:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016fde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016fe2:	4293      	cmp	r3, r2
 8016fe4:	d103      	bne.n	8016fee <strncmp+0x1c>
 8016fe6:	42a0      	cmp	r0, r4
 8016fe8:	d001      	beq.n	8016fee <strncmp+0x1c>
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d1f5      	bne.n	8016fda <strncmp+0x8>
 8016fee:	1a98      	subs	r0, r3, r2
 8016ff0:	bd10      	pop	{r4, pc}
 8016ff2:	4610      	mov	r0, r2
 8016ff4:	e7fc      	b.n	8016ff0 <strncmp+0x1e>
	...

08016ff8 <__swbuf_r>:
 8016ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ffa:	460e      	mov	r6, r1
 8016ffc:	4614      	mov	r4, r2
 8016ffe:	4605      	mov	r5, r0
 8017000:	b118      	cbz	r0, 801700a <__swbuf_r+0x12>
 8017002:	6983      	ldr	r3, [r0, #24]
 8017004:	b90b      	cbnz	r3, 801700a <__swbuf_r+0x12>
 8017006:	f7fe fc6b 	bl	80158e0 <__sinit>
 801700a:	4b21      	ldr	r3, [pc, #132]	; (8017090 <__swbuf_r+0x98>)
 801700c:	429c      	cmp	r4, r3
 801700e:	d12a      	bne.n	8017066 <__swbuf_r+0x6e>
 8017010:	686c      	ldr	r4, [r5, #4]
 8017012:	69a3      	ldr	r3, [r4, #24]
 8017014:	60a3      	str	r3, [r4, #8]
 8017016:	89a3      	ldrh	r3, [r4, #12]
 8017018:	071a      	lsls	r2, r3, #28
 801701a:	d52e      	bpl.n	801707a <__swbuf_r+0x82>
 801701c:	6923      	ldr	r3, [r4, #16]
 801701e:	b363      	cbz	r3, 801707a <__swbuf_r+0x82>
 8017020:	6923      	ldr	r3, [r4, #16]
 8017022:	6820      	ldr	r0, [r4, #0]
 8017024:	1ac0      	subs	r0, r0, r3
 8017026:	6963      	ldr	r3, [r4, #20]
 8017028:	b2f6      	uxtb	r6, r6
 801702a:	4283      	cmp	r3, r0
 801702c:	4637      	mov	r7, r6
 801702e:	dc04      	bgt.n	801703a <__swbuf_r+0x42>
 8017030:	4621      	mov	r1, r4
 8017032:	4628      	mov	r0, r5
 8017034:	f000 f956 	bl	80172e4 <_fflush_r>
 8017038:	bb28      	cbnz	r0, 8017086 <__swbuf_r+0x8e>
 801703a:	68a3      	ldr	r3, [r4, #8]
 801703c:	3b01      	subs	r3, #1
 801703e:	60a3      	str	r3, [r4, #8]
 8017040:	6823      	ldr	r3, [r4, #0]
 8017042:	1c5a      	adds	r2, r3, #1
 8017044:	6022      	str	r2, [r4, #0]
 8017046:	701e      	strb	r6, [r3, #0]
 8017048:	6963      	ldr	r3, [r4, #20]
 801704a:	3001      	adds	r0, #1
 801704c:	4283      	cmp	r3, r0
 801704e:	d004      	beq.n	801705a <__swbuf_r+0x62>
 8017050:	89a3      	ldrh	r3, [r4, #12]
 8017052:	07db      	lsls	r3, r3, #31
 8017054:	d519      	bpl.n	801708a <__swbuf_r+0x92>
 8017056:	2e0a      	cmp	r6, #10
 8017058:	d117      	bne.n	801708a <__swbuf_r+0x92>
 801705a:	4621      	mov	r1, r4
 801705c:	4628      	mov	r0, r5
 801705e:	f000 f941 	bl	80172e4 <_fflush_r>
 8017062:	b190      	cbz	r0, 801708a <__swbuf_r+0x92>
 8017064:	e00f      	b.n	8017086 <__swbuf_r+0x8e>
 8017066:	4b0b      	ldr	r3, [pc, #44]	; (8017094 <__swbuf_r+0x9c>)
 8017068:	429c      	cmp	r4, r3
 801706a:	d101      	bne.n	8017070 <__swbuf_r+0x78>
 801706c:	68ac      	ldr	r4, [r5, #8]
 801706e:	e7d0      	b.n	8017012 <__swbuf_r+0x1a>
 8017070:	4b09      	ldr	r3, [pc, #36]	; (8017098 <__swbuf_r+0xa0>)
 8017072:	429c      	cmp	r4, r3
 8017074:	bf08      	it	eq
 8017076:	68ec      	ldreq	r4, [r5, #12]
 8017078:	e7cb      	b.n	8017012 <__swbuf_r+0x1a>
 801707a:	4621      	mov	r1, r4
 801707c:	4628      	mov	r0, r5
 801707e:	f000 f82d 	bl	80170dc <__swsetup_r>
 8017082:	2800      	cmp	r0, #0
 8017084:	d0cc      	beq.n	8017020 <__swbuf_r+0x28>
 8017086:	f04f 37ff 	mov.w	r7, #4294967295
 801708a:	4638      	mov	r0, r7
 801708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801708e:	bf00      	nop
 8017090:	08018858 	.word	0x08018858
 8017094:	08018878 	.word	0x08018878
 8017098:	08018838 	.word	0x08018838

0801709c <__ascii_wctomb>:
 801709c:	b149      	cbz	r1, 80170b2 <__ascii_wctomb+0x16>
 801709e:	2aff      	cmp	r2, #255	; 0xff
 80170a0:	bf85      	ittet	hi
 80170a2:	238a      	movhi	r3, #138	; 0x8a
 80170a4:	6003      	strhi	r3, [r0, #0]
 80170a6:	700a      	strbls	r2, [r1, #0]
 80170a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80170ac:	bf98      	it	ls
 80170ae:	2001      	movls	r0, #1
 80170b0:	4770      	bx	lr
 80170b2:	4608      	mov	r0, r1
 80170b4:	4770      	bx	lr
	...

080170b8 <_write_r>:
 80170b8:	b538      	push	{r3, r4, r5, lr}
 80170ba:	4c07      	ldr	r4, [pc, #28]	; (80170d8 <_write_r+0x20>)
 80170bc:	4605      	mov	r5, r0
 80170be:	4608      	mov	r0, r1
 80170c0:	4611      	mov	r1, r2
 80170c2:	2200      	movs	r2, #0
 80170c4:	6022      	str	r2, [r4, #0]
 80170c6:	461a      	mov	r2, r3
 80170c8:	f7f2 f851 	bl	800916e <_write>
 80170cc:	1c43      	adds	r3, r0, #1
 80170ce:	d102      	bne.n	80170d6 <_write_r+0x1e>
 80170d0:	6823      	ldr	r3, [r4, #0]
 80170d2:	b103      	cbz	r3, 80170d6 <_write_r+0x1e>
 80170d4:	602b      	str	r3, [r5, #0]
 80170d6:	bd38      	pop	{r3, r4, r5, pc}
 80170d8:	20031198 	.word	0x20031198

080170dc <__swsetup_r>:
 80170dc:	4b32      	ldr	r3, [pc, #200]	; (80171a8 <__swsetup_r+0xcc>)
 80170de:	b570      	push	{r4, r5, r6, lr}
 80170e0:	681d      	ldr	r5, [r3, #0]
 80170e2:	4606      	mov	r6, r0
 80170e4:	460c      	mov	r4, r1
 80170e6:	b125      	cbz	r5, 80170f2 <__swsetup_r+0x16>
 80170e8:	69ab      	ldr	r3, [r5, #24]
 80170ea:	b913      	cbnz	r3, 80170f2 <__swsetup_r+0x16>
 80170ec:	4628      	mov	r0, r5
 80170ee:	f7fe fbf7 	bl	80158e0 <__sinit>
 80170f2:	4b2e      	ldr	r3, [pc, #184]	; (80171ac <__swsetup_r+0xd0>)
 80170f4:	429c      	cmp	r4, r3
 80170f6:	d10f      	bne.n	8017118 <__swsetup_r+0x3c>
 80170f8:	686c      	ldr	r4, [r5, #4]
 80170fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170fe:	b29a      	uxth	r2, r3
 8017100:	0715      	lsls	r5, r2, #28
 8017102:	d42c      	bmi.n	801715e <__swsetup_r+0x82>
 8017104:	06d0      	lsls	r0, r2, #27
 8017106:	d411      	bmi.n	801712c <__swsetup_r+0x50>
 8017108:	2209      	movs	r2, #9
 801710a:	6032      	str	r2, [r6, #0]
 801710c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017110:	81a3      	strh	r3, [r4, #12]
 8017112:	f04f 30ff 	mov.w	r0, #4294967295
 8017116:	e03e      	b.n	8017196 <__swsetup_r+0xba>
 8017118:	4b25      	ldr	r3, [pc, #148]	; (80171b0 <__swsetup_r+0xd4>)
 801711a:	429c      	cmp	r4, r3
 801711c:	d101      	bne.n	8017122 <__swsetup_r+0x46>
 801711e:	68ac      	ldr	r4, [r5, #8]
 8017120:	e7eb      	b.n	80170fa <__swsetup_r+0x1e>
 8017122:	4b24      	ldr	r3, [pc, #144]	; (80171b4 <__swsetup_r+0xd8>)
 8017124:	429c      	cmp	r4, r3
 8017126:	bf08      	it	eq
 8017128:	68ec      	ldreq	r4, [r5, #12]
 801712a:	e7e6      	b.n	80170fa <__swsetup_r+0x1e>
 801712c:	0751      	lsls	r1, r2, #29
 801712e:	d512      	bpl.n	8017156 <__swsetup_r+0x7a>
 8017130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017132:	b141      	cbz	r1, 8017146 <__swsetup_r+0x6a>
 8017134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017138:	4299      	cmp	r1, r3
 801713a:	d002      	beq.n	8017142 <__swsetup_r+0x66>
 801713c:	4630      	mov	r0, r6
 801713e:	f7ff fbbb 	bl	80168b8 <_free_r>
 8017142:	2300      	movs	r3, #0
 8017144:	6363      	str	r3, [r4, #52]	; 0x34
 8017146:	89a3      	ldrh	r3, [r4, #12]
 8017148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801714c:	81a3      	strh	r3, [r4, #12]
 801714e:	2300      	movs	r3, #0
 8017150:	6063      	str	r3, [r4, #4]
 8017152:	6923      	ldr	r3, [r4, #16]
 8017154:	6023      	str	r3, [r4, #0]
 8017156:	89a3      	ldrh	r3, [r4, #12]
 8017158:	f043 0308 	orr.w	r3, r3, #8
 801715c:	81a3      	strh	r3, [r4, #12]
 801715e:	6923      	ldr	r3, [r4, #16]
 8017160:	b94b      	cbnz	r3, 8017176 <__swsetup_r+0x9a>
 8017162:	89a3      	ldrh	r3, [r4, #12]
 8017164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801716c:	d003      	beq.n	8017176 <__swsetup_r+0x9a>
 801716e:	4621      	mov	r1, r4
 8017170:	4630      	mov	r0, r6
 8017172:	f000 f917 	bl	80173a4 <__smakebuf_r>
 8017176:	89a2      	ldrh	r2, [r4, #12]
 8017178:	f012 0301 	ands.w	r3, r2, #1
 801717c:	d00c      	beq.n	8017198 <__swsetup_r+0xbc>
 801717e:	2300      	movs	r3, #0
 8017180:	60a3      	str	r3, [r4, #8]
 8017182:	6963      	ldr	r3, [r4, #20]
 8017184:	425b      	negs	r3, r3
 8017186:	61a3      	str	r3, [r4, #24]
 8017188:	6923      	ldr	r3, [r4, #16]
 801718a:	b953      	cbnz	r3, 80171a2 <__swsetup_r+0xc6>
 801718c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017190:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017194:	d1ba      	bne.n	801710c <__swsetup_r+0x30>
 8017196:	bd70      	pop	{r4, r5, r6, pc}
 8017198:	0792      	lsls	r2, r2, #30
 801719a:	bf58      	it	pl
 801719c:	6963      	ldrpl	r3, [r4, #20]
 801719e:	60a3      	str	r3, [r4, #8]
 80171a0:	e7f2      	b.n	8017188 <__swsetup_r+0xac>
 80171a2:	2000      	movs	r0, #0
 80171a4:	e7f7      	b.n	8017196 <__swsetup_r+0xba>
 80171a6:	bf00      	nop
 80171a8:	200001a8 	.word	0x200001a8
 80171ac:	08018858 	.word	0x08018858
 80171b0:	08018878 	.word	0x08018878
 80171b4:	08018838 	.word	0x08018838

080171b8 <_close_r>:
 80171b8:	b538      	push	{r3, r4, r5, lr}
 80171ba:	4c06      	ldr	r4, [pc, #24]	; (80171d4 <_close_r+0x1c>)
 80171bc:	2300      	movs	r3, #0
 80171be:	4605      	mov	r5, r0
 80171c0:	4608      	mov	r0, r1
 80171c2:	6023      	str	r3, [r4, #0]
 80171c4:	f7f1 ffef 	bl	80091a6 <_close>
 80171c8:	1c43      	adds	r3, r0, #1
 80171ca:	d102      	bne.n	80171d2 <_close_r+0x1a>
 80171cc:	6823      	ldr	r3, [r4, #0]
 80171ce:	b103      	cbz	r3, 80171d2 <_close_r+0x1a>
 80171d0:	602b      	str	r3, [r5, #0]
 80171d2:	bd38      	pop	{r3, r4, r5, pc}
 80171d4:	20031198 	.word	0x20031198

080171d8 <__sflush_r>:
 80171d8:	898a      	ldrh	r2, [r1, #12]
 80171da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171de:	4605      	mov	r5, r0
 80171e0:	0710      	lsls	r0, r2, #28
 80171e2:	460c      	mov	r4, r1
 80171e4:	d458      	bmi.n	8017298 <__sflush_r+0xc0>
 80171e6:	684b      	ldr	r3, [r1, #4]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	dc05      	bgt.n	80171f8 <__sflush_r+0x20>
 80171ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	dc02      	bgt.n	80171f8 <__sflush_r+0x20>
 80171f2:	2000      	movs	r0, #0
 80171f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171fa:	2e00      	cmp	r6, #0
 80171fc:	d0f9      	beq.n	80171f2 <__sflush_r+0x1a>
 80171fe:	2300      	movs	r3, #0
 8017200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017204:	682f      	ldr	r7, [r5, #0]
 8017206:	6a21      	ldr	r1, [r4, #32]
 8017208:	602b      	str	r3, [r5, #0]
 801720a:	d032      	beq.n	8017272 <__sflush_r+0x9a>
 801720c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801720e:	89a3      	ldrh	r3, [r4, #12]
 8017210:	075a      	lsls	r2, r3, #29
 8017212:	d505      	bpl.n	8017220 <__sflush_r+0x48>
 8017214:	6863      	ldr	r3, [r4, #4]
 8017216:	1ac0      	subs	r0, r0, r3
 8017218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801721a:	b10b      	cbz	r3, 8017220 <__sflush_r+0x48>
 801721c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801721e:	1ac0      	subs	r0, r0, r3
 8017220:	2300      	movs	r3, #0
 8017222:	4602      	mov	r2, r0
 8017224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017226:	6a21      	ldr	r1, [r4, #32]
 8017228:	4628      	mov	r0, r5
 801722a:	47b0      	blx	r6
 801722c:	1c43      	adds	r3, r0, #1
 801722e:	89a3      	ldrh	r3, [r4, #12]
 8017230:	d106      	bne.n	8017240 <__sflush_r+0x68>
 8017232:	6829      	ldr	r1, [r5, #0]
 8017234:	291d      	cmp	r1, #29
 8017236:	d848      	bhi.n	80172ca <__sflush_r+0xf2>
 8017238:	4a29      	ldr	r2, [pc, #164]	; (80172e0 <__sflush_r+0x108>)
 801723a:	40ca      	lsrs	r2, r1
 801723c:	07d6      	lsls	r6, r2, #31
 801723e:	d544      	bpl.n	80172ca <__sflush_r+0xf2>
 8017240:	2200      	movs	r2, #0
 8017242:	6062      	str	r2, [r4, #4]
 8017244:	04d9      	lsls	r1, r3, #19
 8017246:	6922      	ldr	r2, [r4, #16]
 8017248:	6022      	str	r2, [r4, #0]
 801724a:	d504      	bpl.n	8017256 <__sflush_r+0x7e>
 801724c:	1c42      	adds	r2, r0, #1
 801724e:	d101      	bne.n	8017254 <__sflush_r+0x7c>
 8017250:	682b      	ldr	r3, [r5, #0]
 8017252:	b903      	cbnz	r3, 8017256 <__sflush_r+0x7e>
 8017254:	6560      	str	r0, [r4, #84]	; 0x54
 8017256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017258:	602f      	str	r7, [r5, #0]
 801725a:	2900      	cmp	r1, #0
 801725c:	d0c9      	beq.n	80171f2 <__sflush_r+0x1a>
 801725e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017262:	4299      	cmp	r1, r3
 8017264:	d002      	beq.n	801726c <__sflush_r+0x94>
 8017266:	4628      	mov	r0, r5
 8017268:	f7ff fb26 	bl	80168b8 <_free_r>
 801726c:	2000      	movs	r0, #0
 801726e:	6360      	str	r0, [r4, #52]	; 0x34
 8017270:	e7c0      	b.n	80171f4 <__sflush_r+0x1c>
 8017272:	2301      	movs	r3, #1
 8017274:	4628      	mov	r0, r5
 8017276:	47b0      	blx	r6
 8017278:	1c41      	adds	r1, r0, #1
 801727a:	d1c8      	bne.n	801720e <__sflush_r+0x36>
 801727c:	682b      	ldr	r3, [r5, #0]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d0c5      	beq.n	801720e <__sflush_r+0x36>
 8017282:	2b1d      	cmp	r3, #29
 8017284:	d001      	beq.n	801728a <__sflush_r+0xb2>
 8017286:	2b16      	cmp	r3, #22
 8017288:	d101      	bne.n	801728e <__sflush_r+0xb6>
 801728a:	602f      	str	r7, [r5, #0]
 801728c:	e7b1      	b.n	80171f2 <__sflush_r+0x1a>
 801728e:	89a3      	ldrh	r3, [r4, #12]
 8017290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017294:	81a3      	strh	r3, [r4, #12]
 8017296:	e7ad      	b.n	80171f4 <__sflush_r+0x1c>
 8017298:	690f      	ldr	r7, [r1, #16]
 801729a:	2f00      	cmp	r7, #0
 801729c:	d0a9      	beq.n	80171f2 <__sflush_r+0x1a>
 801729e:	0793      	lsls	r3, r2, #30
 80172a0:	680e      	ldr	r6, [r1, #0]
 80172a2:	bf08      	it	eq
 80172a4:	694b      	ldreq	r3, [r1, #20]
 80172a6:	600f      	str	r7, [r1, #0]
 80172a8:	bf18      	it	ne
 80172aa:	2300      	movne	r3, #0
 80172ac:	eba6 0807 	sub.w	r8, r6, r7
 80172b0:	608b      	str	r3, [r1, #8]
 80172b2:	f1b8 0f00 	cmp.w	r8, #0
 80172b6:	dd9c      	ble.n	80171f2 <__sflush_r+0x1a>
 80172b8:	4643      	mov	r3, r8
 80172ba:	463a      	mov	r2, r7
 80172bc:	6a21      	ldr	r1, [r4, #32]
 80172be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172c0:	4628      	mov	r0, r5
 80172c2:	47b0      	blx	r6
 80172c4:	2800      	cmp	r0, #0
 80172c6:	dc06      	bgt.n	80172d6 <__sflush_r+0xfe>
 80172c8:	89a3      	ldrh	r3, [r4, #12]
 80172ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172ce:	81a3      	strh	r3, [r4, #12]
 80172d0:	f04f 30ff 	mov.w	r0, #4294967295
 80172d4:	e78e      	b.n	80171f4 <__sflush_r+0x1c>
 80172d6:	4407      	add	r7, r0
 80172d8:	eba8 0800 	sub.w	r8, r8, r0
 80172dc:	e7e9      	b.n	80172b2 <__sflush_r+0xda>
 80172de:	bf00      	nop
 80172e0:	20400001 	.word	0x20400001

080172e4 <_fflush_r>:
 80172e4:	b538      	push	{r3, r4, r5, lr}
 80172e6:	690b      	ldr	r3, [r1, #16]
 80172e8:	4605      	mov	r5, r0
 80172ea:	460c      	mov	r4, r1
 80172ec:	b1db      	cbz	r3, 8017326 <_fflush_r+0x42>
 80172ee:	b118      	cbz	r0, 80172f8 <_fflush_r+0x14>
 80172f0:	6983      	ldr	r3, [r0, #24]
 80172f2:	b90b      	cbnz	r3, 80172f8 <_fflush_r+0x14>
 80172f4:	f7fe faf4 	bl	80158e0 <__sinit>
 80172f8:	4b0c      	ldr	r3, [pc, #48]	; (801732c <_fflush_r+0x48>)
 80172fa:	429c      	cmp	r4, r3
 80172fc:	d109      	bne.n	8017312 <_fflush_r+0x2e>
 80172fe:	686c      	ldr	r4, [r5, #4]
 8017300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017304:	b17b      	cbz	r3, 8017326 <_fflush_r+0x42>
 8017306:	4621      	mov	r1, r4
 8017308:	4628      	mov	r0, r5
 801730a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801730e:	f7ff bf63 	b.w	80171d8 <__sflush_r>
 8017312:	4b07      	ldr	r3, [pc, #28]	; (8017330 <_fflush_r+0x4c>)
 8017314:	429c      	cmp	r4, r3
 8017316:	d101      	bne.n	801731c <_fflush_r+0x38>
 8017318:	68ac      	ldr	r4, [r5, #8]
 801731a:	e7f1      	b.n	8017300 <_fflush_r+0x1c>
 801731c:	4b05      	ldr	r3, [pc, #20]	; (8017334 <_fflush_r+0x50>)
 801731e:	429c      	cmp	r4, r3
 8017320:	bf08      	it	eq
 8017322:	68ec      	ldreq	r4, [r5, #12]
 8017324:	e7ec      	b.n	8017300 <_fflush_r+0x1c>
 8017326:	2000      	movs	r0, #0
 8017328:	bd38      	pop	{r3, r4, r5, pc}
 801732a:	bf00      	nop
 801732c:	08018858 	.word	0x08018858
 8017330:	08018878 	.word	0x08018878
 8017334:	08018838 	.word	0x08018838

08017338 <_lseek_r>:
 8017338:	b538      	push	{r3, r4, r5, lr}
 801733a:	4c07      	ldr	r4, [pc, #28]	; (8017358 <_lseek_r+0x20>)
 801733c:	4605      	mov	r5, r0
 801733e:	4608      	mov	r0, r1
 8017340:	4611      	mov	r1, r2
 8017342:	2200      	movs	r2, #0
 8017344:	6022      	str	r2, [r4, #0]
 8017346:	461a      	mov	r2, r3
 8017348:	f7f1 ff54 	bl	80091f4 <_lseek>
 801734c:	1c43      	adds	r3, r0, #1
 801734e:	d102      	bne.n	8017356 <_lseek_r+0x1e>
 8017350:	6823      	ldr	r3, [r4, #0]
 8017352:	b103      	cbz	r3, 8017356 <_lseek_r+0x1e>
 8017354:	602b      	str	r3, [r5, #0]
 8017356:	bd38      	pop	{r3, r4, r5, pc}
 8017358:	20031198 	.word	0x20031198

0801735c <__swhatbuf_r>:
 801735c:	b570      	push	{r4, r5, r6, lr}
 801735e:	460e      	mov	r6, r1
 8017360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017364:	2900      	cmp	r1, #0
 8017366:	b096      	sub	sp, #88	; 0x58
 8017368:	4614      	mov	r4, r2
 801736a:	461d      	mov	r5, r3
 801736c:	da07      	bge.n	801737e <__swhatbuf_r+0x22>
 801736e:	2300      	movs	r3, #0
 8017370:	602b      	str	r3, [r5, #0]
 8017372:	89b3      	ldrh	r3, [r6, #12]
 8017374:	061a      	lsls	r2, r3, #24
 8017376:	d410      	bmi.n	801739a <__swhatbuf_r+0x3e>
 8017378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801737c:	e00e      	b.n	801739c <__swhatbuf_r+0x40>
 801737e:	466a      	mov	r2, sp
 8017380:	f000 f8a4 	bl	80174cc <_fstat_r>
 8017384:	2800      	cmp	r0, #0
 8017386:	dbf2      	blt.n	801736e <__swhatbuf_r+0x12>
 8017388:	9a01      	ldr	r2, [sp, #4]
 801738a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801738e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017392:	425a      	negs	r2, r3
 8017394:	415a      	adcs	r2, r3
 8017396:	602a      	str	r2, [r5, #0]
 8017398:	e7ee      	b.n	8017378 <__swhatbuf_r+0x1c>
 801739a:	2340      	movs	r3, #64	; 0x40
 801739c:	2000      	movs	r0, #0
 801739e:	6023      	str	r3, [r4, #0]
 80173a0:	b016      	add	sp, #88	; 0x58
 80173a2:	bd70      	pop	{r4, r5, r6, pc}

080173a4 <__smakebuf_r>:
 80173a4:	898b      	ldrh	r3, [r1, #12]
 80173a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80173a8:	079d      	lsls	r5, r3, #30
 80173aa:	4606      	mov	r6, r0
 80173ac:	460c      	mov	r4, r1
 80173ae:	d507      	bpl.n	80173c0 <__smakebuf_r+0x1c>
 80173b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80173b4:	6023      	str	r3, [r4, #0]
 80173b6:	6123      	str	r3, [r4, #16]
 80173b8:	2301      	movs	r3, #1
 80173ba:	6163      	str	r3, [r4, #20]
 80173bc:	b002      	add	sp, #8
 80173be:	bd70      	pop	{r4, r5, r6, pc}
 80173c0:	ab01      	add	r3, sp, #4
 80173c2:	466a      	mov	r2, sp
 80173c4:	f7ff ffca 	bl	801735c <__swhatbuf_r>
 80173c8:	9900      	ldr	r1, [sp, #0]
 80173ca:	4605      	mov	r5, r0
 80173cc:	4630      	mov	r0, r6
 80173ce:	f7ff fac1 	bl	8016954 <_malloc_r>
 80173d2:	b948      	cbnz	r0, 80173e8 <__smakebuf_r+0x44>
 80173d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173d8:	059a      	lsls	r2, r3, #22
 80173da:	d4ef      	bmi.n	80173bc <__smakebuf_r+0x18>
 80173dc:	f023 0303 	bic.w	r3, r3, #3
 80173e0:	f043 0302 	orr.w	r3, r3, #2
 80173e4:	81a3      	strh	r3, [r4, #12]
 80173e6:	e7e3      	b.n	80173b0 <__smakebuf_r+0xc>
 80173e8:	4b0d      	ldr	r3, [pc, #52]	; (8017420 <__smakebuf_r+0x7c>)
 80173ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80173ec:	89a3      	ldrh	r3, [r4, #12]
 80173ee:	6020      	str	r0, [r4, #0]
 80173f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173f4:	81a3      	strh	r3, [r4, #12]
 80173f6:	9b00      	ldr	r3, [sp, #0]
 80173f8:	6163      	str	r3, [r4, #20]
 80173fa:	9b01      	ldr	r3, [sp, #4]
 80173fc:	6120      	str	r0, [r4, #16]
 80173fe:	b15b      	cbz	r3, 8017418 <__smakebuf_r+0x74>
 8017400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017404:	4630      	mov	r0, r6
 8017406:	f000 f873 	bl	80174f0 <_isatty_r>
 801740a:	b128      	cbz	r0, 8017418 <__smakebuf_r+0x74>
 801740c:	89a3      	ldrh	r3, [r4, #12]
 801740e:	f023 0303 	bic.w	r3, r3, #3
 8017412:	f043 0301 	orr.w	r3, r3, #1
 8017416:	81a3      	strh	r3, [r4, #12]
 8017418:	89a3      	ldrh	r3, [r4, #12]
 801741a:	431d      	orrs	r5, r3
 801741c:	81a5      	strh	r5, [r4, #12]
 801741e:	e7cd      	b.n	80173bc <__smakebuf_r+0x18>
 8017420:	080158a9 	.word	0x080158a9

08017424 <memmove>:
 8017424:	4288      	cmp	r0, r1
 8017426:	b510      	push	{r4, lr}
 8017428:	eb01 0302 	add.w	r3, r1, r2
 801742c:	d807      	bhi.n	801743e <memmove+0x1a>
 801742e:	1e42      	subs	r2, r0, #1
 8017430:	4299      	cmp	r1, r3
 8017432:	d00a      	beq.n	801744a <memmove+0x26>
 8017434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017438:	f802 4f01 	strb.w	r4, [r2, #1]!
 801743c:	e7f8      	b.n	8017430 <memmove+0xc>
 801743e:	4283      	cmp	r3, r0
 8017440:	d9f5      	bls.n	801742e <memmove+0xa>
 8017442:	1881      	adds	r1, r0, r2
 8017444:	1ad2      	subs	r2, r2, r3
 8017446:	42d3      	cmn	r3, r2
 8017448:	d100      	bne.n	801744c <memmove+0x28>
 801744a:	bd10      	pop	{r4, pc}
 801744c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017450:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017454:	e7f7      	b.n	8017446 <memmove+0x22>

08017456 <__malloc_lock>:
 8017456:	4770      	bx	lr

08017458 <__malloc_unlock>:
 8017458:	4770      	bx	lr

0801745a <_realloc_r>:
 801745a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801745c:	4607      	mov	r7, r0
 801745e:	4614      	mov	r4, r2
 8017460:	460e      	mov	r6, r1
 8017462:	b921      	cbnz	r1, 801746e <_realloc_r+0x14>
 8017464:	4611      	mov	r1, r2
 8017466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801746a:	f7ff ba73 	b.w	8016954 <_malloc_r>
 801746e:	b922      	cbnz	r2, 801747a <_realloc_r+0x20>
 8017470:	f7ff fa22 	bl	80168b8 <_free_r>
 8017474:	4625      	mov	r5, r4
 8017476:	4628      	mov	r0, r5
 8017478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801747a:	f000 f849 	bl	8017510 <_malloc_usable_size_r>
 801747e:	42a0      	cmp	r0, r4
 8017480:	d20f      	bcs.n	80174a2 <_realloc_r+0x48>
 8017482:	4621      	mov	r1, r4
 8017484:	4638      	mov	r0, r7
 8017486:	f7ff fa65 	bl	8016954 <_malloc_r>
 801748a:	4605      	mov	r5, r0
 801748c:	2800      	cmp	r0, #0
 801748e:	d0f2      	beq.n	8017476 <_realloc_r+0x1c>
 8017490:	4631      	mov	r1, r6
 8017492:	4622      	mov	r2, r4
 8017494:	f7fb ff26 	bl	80132e4 <memcpy>
 8017498:	4631      	mov	r1, r6
 801749a:	4638      	mov	r0, r7
 801749c:	f7ff fa0c 	bl	80168b8 <_free_r>
 80174a0:	e7e9      	b.n	8017476 <_realloc_r+0x1c>
 80174a2:	4635      	mov	r5, r6
 80174a4:	e7e7      	b.n	8017476 <_realloc_r+0x1c>
	...

080174a8 <_read_r>:
 80174a8:	b538      	push	{r3, r4, r5, lr}
 80174aa:	4c07      	ldr	r4, [pc, #28]	; (80174c8 <_read_r+0x20>)
 80174ac:	4605      	mov	r5, r0
 80174ae:	4608      	mov	r0, r1
 80174b0:	4611      	mov	r1, r2
 80174b2:	2200      	movs	r2, #0
 80174b4:	6022      	str	r2, [r4, #0]
 80174b6:	461a      	mov	r2, r3
 80174b8:	f7f1 fe3c 	bl	8009134 <_read>
 80174bc:	1c43      	adds	r3, r0, #1
 80174be:	d102      	bne.n	80174c6 <_read_r+0x1e>
 80174c0:	6823      	ldr	r3, [r4, #0]
 80174c2:	b103      	cbz	r3, 80174c6 <_read_r+0x1e>
 80174c4:	602b      	str	r3, [r5, #0]
 80174c6:	bd38      	pop	{r3, r4, r5, pc}
 80174c8:	20031198 	.word	0x20031198

080174cc <_fstat_r>:
 80174cc:	b538      	push	{r3, r4, r5, lr}
 80174ce:	4c07      	ldr	r4, [pc, #28]	; (80174ec <_fstat_r+0x20>)
 80174d0:	2300      	movs	r3, #0
 80174d2:	4605      	mov	r5, r0
 80174d4:	4608      	mov	r0, r1
 80174d6:	4611      	mov	r1, r2
 80174d8:	6023      	str	r3, [r4, #0]
 80174da:	f7f1 fe70 	bl	80091be <_fstat>
 80174de:	1c43      	adds	r3, r0, #1
 80174e0:	d102      	bne.n	80174e8 <_fstat_r+0x1c>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	b103      	cbz	r3, 80174e8 <_fstat_r+0x1c>
 80174e6:	602b      	str	r3, [r5, #0]
 80174e8:	bd38      	pop	{r3, r4, r5, pc}
 80174ea:	bf00      	nop
 80174ec:	20031198 	.word	0x20031198

080174f0 <_isatty_r>:
 80174f0:	b538      	push	{r3, r4, r5, lr}
 80174f2:	4c06      	ldr	r4, [pc, #24]	; (801750c <_isatty_r+0x1c>)
 80174f4:	2300      	movs	r3, #0
 80174f6:	4605      	mov	r5, r0
 80174f8:	4608      	mov	r0, r1
 80174fa:	6023      	str	r3, [r4, #0]
 80174fc:	f7f1 fe6f 	bl	80091de <_isatty>
 8017500:	1c43      	adds	r3, r0, #1
 8017502:	d102      	bne.n	801750a <_isatty_r+0x1a>
 8017504:	6823      	ldr	r3, [r4, #0]
 8017506:	b103      	cbz	r3, 801750a <_isatty_r+0x1a>
 8017508:	602b      	str	r3, [r5, #0]
 801750a:	bd38      	pop	{r3, r4, r5, pc}
 801750c:	20031198 	.word	0x20031198

08017510 <_malloc_usable_size_r>:
 8017510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017514:	1f18      	subs	r0, r3, #4
 8017516:	2b00      	cmp	r3, #0
 8017518:	bfbc      	itt	lt
 801751a:	580b      	ldrlt	r3, [r1, r0]
 801751c:	18c0      	addlt	r0, r0, r3
 801751e:	4770      	bx	lr

08017520 <_init>:
 8017520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017522:	bf00      	nop
 8017524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017526:	bc08      	pop	{r3}
 8017528:	469e      	mov	lr, r3
 801752a:	4770      	bx	lr

0801752c <_fini>:
 801752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801752e:	bf00      	nop
 8017530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017532:	bc08      	pop	{r3}
 8017534:	469e      	mov	lr, r3
 8017536:	4770      	bx	lr
