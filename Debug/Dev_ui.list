
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08010068  08010068  00020068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010438  08010438  0003029c  2**0
                  CONTENTS
  4 .ARM          00000008  08010438  08010438  00020438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010440  08010440  0003029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010440  08010440  00020440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010444  08010444  00020444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08010448  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020eb8  2000029c  080106e4  0003029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20021154  080106e4  00031154  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a1ba  00000000  00000000  000302ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a68  00000000  00000000  0005a484  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002130  00000000  00000000  0005eef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f18  00000000  00000000  00061020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005c59  00000000  00000000  00062f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aee5  00000000  00000000  00068b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00118b21  00000000  00000000  00083a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019c597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098f4  00000000  00000000  0019c614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000029c 	.word	0x2000029c
 800021c:	00000000 	.word	0x00000000
 8000220:	08010050 	.word	0x08010050

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a0 	.word	0x200002a0
 800023c:	08010050 	.word	0x08010050

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <SMLCD_InitGPIO>:
}
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 80005f4:	2200      	movs	r2, #0
 80005f6:	2102      	movs	r1, #2
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <SMLCD_InitGPIO+0x34>)
 80005fa:	f004 ff23 	bl	8005444 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <SMLCD_InitGPIO+0x38>)
 8000604:	f004 ff1e 	bl	8005444 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <SMLCD_InitGPIO+0x34>)
 800060e:	f004 ff19 	bl	8005444 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <SMLCD_InitGPIO+0x3c>)
 800061a:	f004 ff13 	bl	8005444 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40022400 	.word	0x40022400
 8000628:	40021000 	.word	0x40021000
 800062c:	40021c00 	.word	0x40021c00

08000630 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000630:	b084      	sub	sp, #16
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
 8000636:	f107 0c08 	add.w	ip, r7, #8
 800063a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <SMLCD_Init+0x38>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <SMLCD_Init+0x3c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f107 0108 	add.w	r1, r7, #8
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	461a      	mov	r2, r3
 8000650:	f00c f886 	bl	800c760 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f82b 	bl	80006b0 <SMLCD_Orientation>
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000662:	b004      	add	sp, #16
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	2000d38c 	.word	0x2000d38c
 800066c:	2000d394 	.word	0x2000d394

08000670 <SMLCD_Clear>:

// Clear display memory (clear screen)
void SMLCD_Clear(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	SMLCD_SCS_H;
 8000676:	2201      	movs	r2, #1
 8000678:	2110      	movs	r1, #16
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <SMLCD_Clear+0x38>)
 800067c:	f004 fee2 	bl	8005444 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 8000680:	2320      	movs	r3, #32
 8000682:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 8000684:	2300      	movs	r3, #0
 8000686:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 8000688:	1d39      	adds	r1, r7, #4
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2202      	movs	r2, #2
 800068e:	4807      	ldr	r0, [pc, #28]	; (80006ac <SMLCD_Clear+0x3c>)
 8000690:	f006 ff8c 	bl	80075ac <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 8000694:	2200      	movs	r2, #0
 8000696:	2110      	movs	r1, #16
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <SMLCD_Clear+0x38>)
 800069a:	f004 fed3 	bl	8005444 <HAL_GPIO_WritePin>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	2000d394 	.word	0x2000d394

080006b0 <SMLCD_Orientation>:
}

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 0306 	and.w	r3, r3, #6
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d007      	beq.n	80006d4 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <SMLCD_Orientation+0x44>)
 80006c6:	22f0      	movs	r2, #240	; 0xf0
 80006c8:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SMLCD_Orientation+0x48>)
 80006cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006d0:	801a      	strh	r2, [r3, #0]
 80006d2:	e006      	b.n	80006e2 <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <SMLCD_Orientation+0x44>)
 80006d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006da:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <SMLCD_Orientation+0x48>)
 80006de:	22f0      	movs	r2, #240	; 0xf0
 80006e0:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <SMLCD_Orientation+0x4c>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	7013      	strb	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	2000d38e 	.word	0x2000d38e
 80006f8:	2000d390 	.word	0x2000d390
 80006fc:	20000000 	.word	0x20000000

08000700 <LCD_DrawSomeLinesSingleLine>:
		   	   SMLCD_SCS_L;
		   	   HAL_Delay(5);
		   }
	   }
}
void LCD_DrawSomeLinesSingleLine(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b0b4      	sub	sp, #208	; 0xd0
 8000704:	af00      	add	r7, sp, #0
	 static uint8_t update_Line_CMD = 0b10010000;
	 static uint8_t update_Line_0 = 0b00000000;
	 static uint8_t update_dummy = 0b00000000;


	 int x=2;
 8000706:	2302      	movs	r3, #2
 8000708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	 static int y;
	 uint8_t test[204];
	 for(y=1; y < 241;++y){
 800070c:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e0c0      	b.n	8000896 <LCD_DrawSomeLinesSingleLine+0x196>
		   x=2;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		   test[0]=update_Line_CMD;
 800071a:	4b64      	ldr	r3, [pc, #400]	; (80008ac <LCD_DrawSomeLinesSingleLine+0x1ac>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	703b      	strb	r3, [r7, #0]
		   test[1]=update_Line_0+y;
 8000720:	4b61      	ldr	r3, [pc, #388]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <LCD_DrawSomeLinesSingleLine+0x1b0>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	707b      	strb	r3, [r7, #1]
		   if(y<40){
 8000730:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b27      	cmp	r3, #39	; 0x27
 8000736:	dc12      	bgt.n	800075e <LCD_DrawSomeLinesSingleLine+0x5e>
			   while(x<202){
 8000738:	e00c      	b.n	8000754 <LCD_DrawSomeLinesSingleLine+0x54>
				   test[x] = LCD_Green;
 800073a:	4b5e      	ldr	r3, [pc, #376]	; (80008b4 <LCD_DrawSomeLinesSingleLine+0x1b4>)
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	463a      	mov	r2, r7
 8000740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000744:	4413      	add	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
				   x++;
 800074a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800074e:	3301      	adds	r3, #1
 8000750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			   while(x<202){
 8000754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000758:	2bc9      	cmp	r3, #201	; 0xc9
 800075a:	ddee      	ble.n	800073a <LCD_DrawSomeLinesSingleLine+0x3a>
 800075c:	e07b      	b.n	8000856 <LCD_DrawSomeLinesSingleLine+0x156>
			   }
		   }
		   else if(y<80){
 800075e:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b4f      	cmp	r3, #79	; 0x4f
 8000764:	dc12      	bgt.n	800078c <LCD_DrawSomeLinesSingleLine+0x8c>
			   while(x<202){
 8000766:	e00c      	b.n	8000782 <LCD_DrawSomeLinesSingleLine+0x82>
				   test[x] = LCD_White;
 8000768:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <LCD_DrawSomeLinesSingleLine+0x1b8>)
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	463a      	mov	r2, r7
 800076e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000772:	4413      	add	r3, r2
 8000774:	460a      	mov	r2, r1
 8000776:	701a      	strb	r2, [r3, #0]
				   x++;
 8000778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800077c:	3301      	adds	r3, #1
 800077e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			   while(x<202){
 8000782:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000786:	2bc9      	cmp	r3, #201	; 0xc9
 8000788:	ddee      	ble.n	8000768 <LCD_DrawSomeLinesSingleLine+0x68>
 800078a:	e064      	b.n	8000856 <LCD_DrawSomeLinesSingleLine+0x156>
			   }
		   }
		   else if(y<120){
 800078c:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b77      	cmp	r3, #119	; 0x77
 8000792:	dc12      	bgt.n	80007ba <LCD_DrawSomeLinesSingleLine+0xba>
			   while(x<202){
 8000794:	e00c      	b.n	80007b0 <LCD_DrawSomeLinesSingleLine+0xb0>
				   test[x] = LCD_Blue;
 8000796:	4b49      	ldr	r3, [pc, #292]	; (80008bc <LCD_DrawSomeLinesSingleLine+0x1bc>)
 8000798:	7819      	ldrb	r1, [r3, #0]
 800079a:	463a      	mov	r2, r7
 800079c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80007a0:	4413      	add	r3, r2
 80007a2:	460a      	mov	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
				   x++;
 80007a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80007aa:	3301      	adds	r3, #1
 80007ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			   while(x<202){
 80007b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80007b4:	2bc9      	cmp	r3, #201	; 0xc9
 80007b6:	ddee      	ble.n	8000796 <LCD_DrawSomeLinesSingleLine+0x96>
 80007b8:	e04d      	b.n	8000856 <LCD_DrawSomeLinesSingleLine+0x156>
			   }
		   }
		   else if(y<160){
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b9f      	cmp	r3, #159	; 0x9f
 80007c0:	dc12      	bgt.n	80007e8 <LCD_DrawSomeLinesSingleLine+0xe8>
			   while(x<202){
 80007c2:	e00c      	b.n	80007de <LCD_DrawSomeLinesSingleLine+0xde>
				   test[x] = LCD_Red;
 80007c4:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <LCD_DrawSomeLinesSingleLine+0x1c0>)
 80007c6:	7819      	ldrb	r1, [r3, #0]
 80007c8:	463a      	mov	r2, r7
 80007ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80007ce:	4413      	add	r3, r2
 80007d0:	460a      	mov	r2, r1
 80007d2:	701a      	strb	r2, [r3, #0]
				   x++;
 80007d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80007d8:	3301      	adds	r3, #1
 80007da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			   while(x<202){
 80007de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80007e2:	2bc9      	cmp	r3, #201	; 0xc9
 80007e4:	ddee      	ble.n	80007c4 <LCD_DrawSomeLinesSingleLine+0xc4>
 80007e6:	e036      	b.n	8000856 <LCD_DrawSomeLinesSingleLine+0x156>
			   }
		   }
		   else if(y<200){
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2bc7      	cmp	r3, #199	; 0xc7
 80007ee:	dc2e      	bgt.n	800084e <LCD_DrawSomeLinesSingleLine+0x14e>
			   while(x<202){
 80007f0:	e00c      	b.n	800080c <LCD_DrawSomeLinesSingleLine+0x10c>
				   test[x] = LCD_Black;
 80007f2:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <LCD_DrawSomeLinesSingleLine+0x1c4>)
 80007f4:	7819      	ldrb	r1, [r3, #0]
 80007f6:	463a      	mov	r2, r7
 80007f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80007fc:	4413      	add	r3, r2
 80007fe:	460a      	mov	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
				   x++;
 8000802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000806:	3301      	adds	r3, #1
 8000808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			   while(x<202){
 800080c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000810:	2bc9      	cmp	r3, #201	; 0xc9
 8000812:	ddee      	ble.n	80007f2 <LCD_DrawSomeLinesSingleLine+0xf2>
 8000814:	e01f      	b.n	8000856 <LCD_DrawSomeLinesSingleLine+0x156>
			   }
		   }
		   else{
			   while(x<202){
				   if((x%2)==0){
 8000816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d108      	bne.n	8000834 <LCD_DrawSomeLinesSingleLine+0x134>
					   test[x] = LCD_Blue;
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <LCD_DrawSomeLinesSingleLine+0x1bc>)
 8000824:	7819      	ldrb	r1, [r3, #0]
 8000826:	463a      	mov	r2, r7
 8000828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800082c:	4413      	add	r3, r2
 800082e:	460a      	mov	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	e007      	b.n	8000844 <LCD_DrawSomeLinesSingleLine+0x144>
				   }
				   else{
					   test[x] = LCD_Red;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <LCD_DrawSomeLinesSingleLine+0x1c0>)
 8000836:	7819      	ldrb	r1, [r3, #0]
 8000838:	463a      	mov	r2, r7
 800083a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800083e:	4413      	add	r3, r2
 8000840:	460a      	mov	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
				   }
				   x++;
 8000844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000848:	3301      	adds	r3, #1
 800084a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			   while(x<202){
 800084e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000852:	2bc9      	cmp	r3, #201	; 0xc9
 8000854:	dddf      	ble.n	8000816 <LCD_DrawSomeLinesSingleLine+0x116>
			   }
		   }
		   test[203] = update_dummy;
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <LCD_DrawSomeLinesSingleLine+0x1c8>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
		   test[204] = update_dummy;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <LCD_DrawSomeLinesSingleLine+0x1c8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
	   	   SMLCD_SCS_H;
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <LCD_DrawSomeLinesSingleLine+0x1cc>)
 800086c:	f004 fdea 	bl	8005444 <HAL_GPIO_WritePin>
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
 8000870:	4639      	mov	r1, r7
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	22cc      	movs	r2, #204	; 0xcc
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <LCD_DrawSomeLinesSingleLine+0x1d0>)
 8000878:	f006 fe98 	bl	80075ac <HAL_SPI_Transmit>
	   	   SMLCD_SCS_L;
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <LCD_DrawSomeLinesSingleLine+0x1cc>)
 8000882:	f004 fddf 	bl	8005444 <HAL_GPIO_WritePin>
		   HAL_Delay(5);
 8000886:	2005      	movs	r0, #5
 8000888:	f003 f962 	bl	8003b50 <HAL_Delay>
	 for(y=1; y < 241;++y){
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <LCD_DrawSomeLinesSingleLine+0x1a8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2bf0      	cmp	r3, #240	; 0xf0
 800089c:	f77f af3a 	ble.w	8000714 <LCD_DrawSomeLinesSingleLine+0x14>
	   }
}
 80008a0:	bf00      	nop
 80008a2:	37d0      	adds	r7, #208	; 0xd0
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200002b8 	.word	0x200002b8
 80008ac:	20000001 	.word	0x20000001
 80008b0:	200002bc 	.word	0x200002bc
 80008b4:	20000002 	.word	0x20000002
 80008b8:	20000003 	.word	0x20000003
 80008bc:	20000004 	.word	0x20000004
 80008c0:	20000005 	.word	0x20000005
 80008c4:	200002bd 	.word	0x200002bd
 80008c8:	200002be 	.word	0x200002be
 80008cc:	40021000 	.word	0x40021000
 80008d0:	2000d394 	.word	0x2000d394

080008d4 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 80008d8:	2201      	movs	r2, #1
 80008da:	2102      	movs	r1, #2
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <SMLCD_Enable+0x14>)
 80008de:	f004 fdb1 	bl	8005444 <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40022400 	.word	0x40022400

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b0ad      	sub	sp, #180	; 0xb4
 80008f0:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f003 f900 	bl	8003af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f90f 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 ff43 	bl	8001784 <MX_GPIO_Init>
  MX_DMA_Init();
 80008fe:	f000 feff 	bl	8001700 <MX_DMA_Init>
  MX_ADC1_Init();
 8000902:	f000 f9b1 	bl	8000c68 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000906:	f000 fa8d 	bl	8000e24 <MX_ADC2_Init>
  MX_ADC3_Init();
 800090a:	f000 fb07 	bl	8000f1c <MX_ADC3_Init>
  MX_I2C1_Init();
 800090e:	f000 fb9d 	bl	800104c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000912:	f000 fbdb 	bl	80010cc <MX_I2C2_Init>
  MX_I2C3_Init();
 8000916:	f000 fc19 	bl	800114c <MX_I2C3_Init>
  MX_I2C4_Init();
 800091a:	f000 fc57 	bl	80011cc <MX_I2C4_Init>
  MX_RTC_Init();
 800091e:	f000 fc95 	bl	800124c <MX_RTC_Init>
  MX_SPI4_Init();
 8000922:	f000 fcb9 	bl	8001298 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000926:	f000 fcf5 	bl	8001314 <MX_SPI5_Init>
  MX_TIM4_Init();
 800092a:	f000 fd31 	bl	8001390 <MX_TIM4_Init>
  MX_TIM5_Init();
 800092e:	f000 fda7 	bl	8001480 <MX_TIM5_Init>
  MX_UART4_Init();
 8000932:	f000 fe27 	bl	8001584 <MX_UART4_Init>
  MX_UART5_Init();
 8000936:	f000 fe55 	bl	80015e4 <MX_UART5_Init>
  MX_UART7_Init();
 800093a:	f000 fe83 	bl	8001644 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 800093e:	f000 feb1 	bl	80016a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8000942:	f001 f8bd 	bl	8001ac0 <outputGPIOBufInitialization>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8000946:	f241 3288 	movw	r2, #5000	; 0x1388
 800094a:	495c      	ldr	r1, [pc, #368]	; (8000abc <main+0x1d0>)
 800094c:	485c      	ldr	r0, [pc, #368]	; (8000ac0 <main+0x1d4>)
 800094e:	f003 faa7 	bl	8003ea0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8000952:	f241 3288 	movw	r2, #5000	; 0x1388
 8000956:	495b      	ldr	r1, [pc, #364]	; (8000ac4 <main+0x1d8>)
 8000958:	485b      	ldr	r0, [pc, #364]	; (8000ac8 <main+0x1dc>)
 800095a:	f003 faa1 	bl	8003ea0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 800095e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000962:	495a      	ldr	r1, [pc, #360]	; (8000acc <main+0x1e0>)
 8000964:	485a      	ldr	r0, [pc, #360]	; (8000ad0 <main+0x1e4>)
 8000966:	f003 fa9b 	bl	8003ea0 <HAL_ADC_Start_DMA>
//    HAL_Delay(1);
//    HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
//    HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Clear, 1, 100);
//    HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
//    HAL_Delay(1);
   int x=1;
 800096a:	2301      	movs	r3, #1
 800096c:	657b      	str	r3, [r7, #84]	; 0x54
//    HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(GPIOH,FRONT_LED_CTRL_Pin,GPIO_PIN_SET);
//    HAL_Delay(5000);


  configureLEDDriver();
 800096e:	f001 fa31 	bl	8001dd4 <configureLEDDriver>
    setErrorLED(4,OFF);
 8000972:	4b58      	ldr	r3, [pc, #352]	; (8000ad4 <main+0x1e8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	2004      	movs	r0, #4
 800097a:	f001 fab7 	bl	8001eec <setErrorLED>
    HAL_Delay(1000);
 800097e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000982:	f003 f8e5 	bl	8003b50 <HAL_Delay>
    setErrorLED(7,OFF);
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <main+0x1e8>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	2007      	movs	r0, #7
 800098e:	f001 faad 	bl	8001eec <setErrorLED>
    setErrorLED(8,ON);
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <main+0x1ec>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4619      	mov	r1, r3
 8000998:	2008      	movs	r0, #8
 800099a:	f001 faa7 	bl	8001eec <setErrorLED>
    HAL_Delay(1000);
 800099e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a2:	f003 f8d5 	bl	8003b50 <HAL_Delay>
    setErrorLED(8,OFF);
 80009a6:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <main+0x1e8>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	2008      	movs	r0, #8
 80009ae:	f001 fa9d 	bl	8001eec <setErrorLED>
    setErrorLED(9,ON);
 80009b2:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <main+0x1ec>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	2009      	movs	r0, #9
 80009ba:	f001 fa97 	bl	8001eec <setErrorLED>
    HAL_Delay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c2:	f003 f8c5 	bl	8003b50 <HAL_Delay>
    setErrorLED(8,ON);
 80009c6:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <main+0x1ec>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	2008      	movs	r0, #8
 80009ce:	f001 fa8d 	bl	8001eec <setErrorLED>
    setErrorLED(9,ON);
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <main+0x1ec>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	2009      	movs	r0, #9
 80009da:	f001 fa87 	bl	8001eec <setErrorLED>
    HAL_Delay(1000);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f003 f8b5 	bl	8003b50 <HAL_Delay>
    setErrorLED(9,OFF);
 80009e6:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <main+0x1e8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	2009      	movs	r0, #9
 80009ee:	f001 fa7d 	bl	8001eec <setErrorLED>
	SMLCD_Enable();
 80009f2:	f7ff ff6f 	bl	80008d4 <SMLCD_Enable>

	SMLCD_InitGPIO();
 80009f6:	f7ff fdfb 	bl	80005f0 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 80009fa:	4c38      	ldr	r4, [pc, #224]	; (8000adc <main+0x1f0>)
 80009fc:	4668      	mov	r0, sp
 80009fe:	f104 0310 	add.w	r3, r4, #16
 8000a02:	2254      	movs	r2, #84	; 0x54
 8000a04:	4619      	mov	r1, r3
 8000a06:	f00b feab 	bl	800c760 <memcpy>
 8000a0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a0e:	f7ff fe0f 	bl	8000630 <SMLCD_Init>
	SMLCD_Enable();
 8000a12:	f7ff ff5f 	bl	80008d4 <SMLCD_Enable>
	SMLCD_Clear();
 8000a16:	f7ff fe2b 	bl	8000670 <SMLCD_Clear>
  //  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a1a:	f009 f8f5 	bl	8009c08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8000a1e:	4a30      	ldr	r2, [pc, #192]	; (8000ae0 <main+0x1f4>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <main+0x1f8>)
 8000a24:	f009 f95a 	bl	8009cdc <osThreadNew>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <main+0x1fc>)
 8000a2c:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <main+0x200>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	482f      	ldr	r0, [pc, #188]	; (8000af0 <main+0x204>)
 8000a34:	f009 f952 	bl	8009cdc <osThreadNew>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <main+0x208>)
 8000a3c:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	; (8000af8 <main+0x20c>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	482e      	ldr	r0, [pc, #184]	; (8000afc <main+0x210>)
 8000a44:	f009 f94a 	bl	8009cdc <osThreadNew>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <main+0x214>)
 8000a4c:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8000a4e:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <main+0x218>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	482d      	ldr	r0, [pc, #180]	; (8000b08 <main+0x21c>)
 8000a54:	f009 f942 	bl	8009cdc <osThreadNew>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <main+0x220>)
 8000a5c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a5e:	f009 f907 	bl	8009c70 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8000a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a66:	f003 f873 	bl	8003b50 <HAL_Delay>
	  if (!x) {
 8000a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d112      	bne.n	8000a96 <main+0x1aa>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	4826      	ldr	r0, [pc, #152]	; (8000b10 <main+0x224>)
 8000a78:	f004 fce4 	bl	8005444 <HAL_GPIO_WritePin>
		  x=1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	657b      	str	r3, [r7, #84]	; 0x54

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	4823      	ldr	r0, [pc, #140]	; (8000b14 <main+0x228>)
 8000a86:	f004 fcdd 	bl	8005444 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	4821      	ldr	r0, [pc, #132]	; (8000b14 <main+0x228>)
 8000a90:	f004 fcd8 	bl	8005444 <HAL_GPIO_WritePin>
 8000a94:	e7e5      	b.n	8000a62 <main+0x176>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9c:	481c      	ldr	r0, [pc, #112]	; (8000b10 <main+0x224>)
 8000a9e:	f004 fcd1 	bl	8005444 <HAL_GPIO_WritePin>
		  x=0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	657b      	str	r3, [r7, #84]	; 0x54
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	481a      	ldr	r0, [pc, #104]	; (8000b14 <main+0x228>)
 8000aac:	f004 fcca 	bl	8005444 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	4817      	ldr	r0, [pc, #92]	; (8000b14 <main+0x228>)
 8000ab6:	f004 fcc5 	bl	8005444 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000aba:	e7d2      	b.n	8000a62 <main+0x176>
 8000abc:	2000db48 	.word	0x2000db48
 8000ac0:	200102d8 	.word	0x200102d8
 8000ac4:	2001e8f4 	.word	0x2001e8f4
 8000ac8:	2000d5c0 	.word	0x2000d5c0
 8000acc:	200103fc 	.word	0x200103fc
 8000ad0:	20010324 	.word	0x20010324
 8000ad4:	200002bf 	.word	0x200002bf
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	2000d394 	.word	0x2000d394
 8000ae0:	080100d4 	.word	0x080100d4
 8000ae4:	080029ad 	.word	0x080029ad
 8000ae8:	2001e8f0 	.word	0x2001e8f0
 8000aec:	080100f8 	.word	0x080100f8
 8000af0:	080029cd 	.word	0x080029cd
 8000af4:	200210c8 	.word	0x200210c8
 8000af8:	0801011c 	.word	0x0801011c
 8000afc:	08002a4d 	.word	0x08002a4d
 8000b00:	200210c4 	.word	0x200210c4
 8000b04:	08010140 	.word	0x08010140
 8000b08:	08002acd 	.word	0x08002acd
 8000b0c:	20010320 	.word	0x20010320
 8000b10:	40022000 	.word	0x40022000
 8000b14:	40021000 	.word	0x40021000

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0b8      	sub	sp, #224	; 0xe0
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b22:	2234      	movs	r2, #52	; 0x34
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00b fe25 	bl	800c776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	2290      	movs	r2, #144	; 0x90
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00b fe16 	bl	800c776 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b4a:	f005 fb0d 	bl	8006168 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b4e:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <SystemClock_Config+0x144>)
 8000b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b52:	4a42      	ldr	r2, [pc, #264]	; (8000c5c <SystemClock_Config+0x144>)
 8000b54:	f023 0318 	bic.w	r3, r3, #24
 8000b58:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <SystemClock_Config+0x144>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <SystemClock_Config+0x144>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <SystemClock_Config+0x144>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <SystemClock_Config+0x148>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b7a:	4a39      	ldr	r2, [pc, #228]	; (8000c60 <SystemClock_Config+0x148>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <SystemClock_Config+0x148>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000bb6:	2390      	movs	r3, #144	; 0x90
 8000bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f005 fadb 	bl	8006188 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bd8:	f002 f820 	bl	8002c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 fd6d 	bl	80066e4 <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000c10:	f002 f804 	bl	8002c1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <SystemClock_Config+0x14c>)
 8000c16:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4618      	mov	r0, r3
 8000c46:	f005 ff51 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000c50:	f001 ffe4 	bl	8002c1c <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	37e0      	adds	r7, #224	; 0xe0
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000
 8000c64:	0023d620 	.word	0x0023d620

08000c68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c7a:	4b67      	ldr	r3, [pc, #412]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000c7c:	4a67      	ldr	r2, [pc, #412]	; (8000e1c <MX_ADC1_Init+0x1b4>)
 8000c7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c80:	4b65      	ldr	r3, [pc, #404]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c88:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c8e:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c94:	4b60      	ldr	r3, [pc, #384]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca2:	4b5d      	ldr	r3, [pc, #372]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca8:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000caa:	4a5d      	ldr	r2, [pc, #372]	; (8000e20 <MX_ADC1_Init+0x1b8>)
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cae:	4b5a      	ldr	r3, [pc, #360]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 8000cb4:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000cb6:	220b      	movs	r2, #11
 8000cb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cba:	4b57      	ldr	r3, [pc, #348]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc8:	4853      	ldr	r0, [pc, #332]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000cca:	f002 ff63 	bl	8003b94 <HAL_ADC_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd4:	f001 ffa2 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	484b      	ldr	r0, [pc, #300]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000cea:	f003 fa2f 	bl	800414c <HAL_ADC_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf4:	f001 ff92 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4844      	ldr	r0, [pc, #272]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000d06:	f003 fa21 	bl	800414c <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d10:	f001 ff84 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d14:	2305      	movs	r3, #5
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	483d      	ldr	r0, [pc, #244]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000d22:	f003 fa13 	bl	800414c <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d2c:	f001 ff76 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d30:	2306      	movs	r3, #6
 8000d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d34:	2304      	movs	r3, #4
 8000d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4836      	ldr	r0, [pc, #216]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000d3e:	f003 fa05 	bl	800414c <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d48:	f001 ff68 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d50:	2305      	movs	r3, #5
 8000d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	482f      	ldr	r0, [pc, #188]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000d5a:	f003 f9f7 	bl	800414c <HAL_ADC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000d64:	f001 ff5a 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4828      	ldr	r0, [pc, #160]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000d76:	f003 f9e9 	bl	800414c <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000d80:	f001 ff4c 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d84:	2309      	movs	r3, #9
 8000d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4821      	ldr	r0, [pc, #132]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000d92:	f003 f9db 	bl	800414c <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000d9c:	f001 ff3e 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000da0:	230a      	movs	r3, #10
 8000da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	481a      	ldr	r0, [pc, #104]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000dae:	f003 f9cd 	bl	800414c <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000db8:	f001 ff30 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000dc0:	2309      	movs	r3, #9
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000dca:	f003 f9bf 	bl	800414c <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000dd4:	f001 ff22 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000dd8:	230c      	movs	r3, #12
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ddc:	230a      	movs	r3, #10
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000de6:	f003 f9b1 	bl	800414c <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000df0:	f001 ff14 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000df4:	230d      	movs	r3, #13
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_ADC1_Init+0x1b0>)
 8000e02:	f003 f9a3 	bl	800414c <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000e0c:	f001 ff06 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200102d8 	.word	0x200102d8
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	0f000001 	.word	0x0f000001

08000e24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e36:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e38:	4a36      	ldr	r2, [pc, #216]	; (8000f14 <MX_ADC2_Init+0xf0>)
 8000e3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e42:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e4a:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e66:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <MX_ADC2_Init+0xf4>)
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e84:	4822      	ldr	r0, [pc, #136]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000e86:	f002 fe85 	bl	8003b94 <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000e90:	f001 fec4 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481a      	ldr	r0, [pc, #104]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000ea6:	f003 f951 	bl	800414c <HAL_ADC_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000eb0:	f001 feb4 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000ec2:	f003 f943 	bl	800414c <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000ecc:	f001 fea6 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000ede:	f003 f935 	bl	800414c <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000ee8:	f001 fe98 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000eec:	230f      	movs	r3, #15
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_ADC2_Init+0xec>)
 8000efa:	f003 f927 	bl	800414c <HAL_ADC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000f04:	f001 fe8a 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000d5c0 	.word	0x2000d5c0
 8000f14:	40012100 	.word	0x40012100
 8000f18:	0f000001 	.word	0x0f000001

08000f1c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f2e:	4b44      	ldr	r3, [pc, #272]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f30:	4a44      	ldr	r2, [pc, #272]	; (8001044 <MX_ADC3_Init+0x128>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f34:	4b42      	ldr	r3, [pc, #264]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5c:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f5e:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <MX_ADC3_Init+0x12c>)
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f62:	4b37      	ldr	r3, [pc, #220]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f6a:	2206      	movs	r2, #6
 8000f6c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f7c:	4830      	ldr	r0, [pc, #192]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f7e:	f002 fe09 	bl	8003b94 <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000f88:	f001 fe48 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f94:	2307      	movs	r3, #7
 8000f96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4828      	ldr	r0, [pc, #160]	; (8001040 <MX_ADC3_Init+0x124>)
 8000f9e:	f003 f8d5 	bl	800414c <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f001 fe38 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4821      	ldr	r0, [pc, #132]	; (8001040 <MX_ADC3_Init+0x124>)
 8000fba:	f003 f8c7 	bl	800414c <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000fc4:	f001 fe2a 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481a      	ldr	r0, [pc, #104]	; (8001040 <MX_ADC3_Init+0x124>)
 8000fd6:	f003 f8b9 	bl	800414c <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000fe0:	f001 fe1c 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <MX_ADC3_Init+0x124>)
 8000ff2:	f003 f8ab 	bl	800414c <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000ffc:	f001 fe0e 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001000:	2307      	movs	r3, #7
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001004:	2305      	movs	r3, #5
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_ADC3_Init+0x124>)
 800100e:	f003 f89d 	bl	800414c <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8001018:	f001 fe00 	bl	8002c1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800101c:	2308      	movs	r3, #8
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001020:	2306      	movs	r3, #6
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_ADC3_Init+0x124>)
 800102a:	f003 f88f 	bl	800414c <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8001034:	f001 fdf2 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20010324 	.word	0x20010324
 8001044:	40012200 	.word	0x40012200
 8001048:	0f000001 	.word	0x0f000001

0800104c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <MX_I2C1_Init+0x78>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101622;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <MX_I2C1_Init+0x7c>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001064:	2201      	movs	r2, #1
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001088:	f004 fa34 	bl	80054f4 <HAL_I2C_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001092:	f001 fdc3 	bl	8002c1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x74>)
 800109a:	f004 fe85 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010a4:	f001 fdba 	bl	8002c1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_I2C1_Init+0x74>)
 80010ac:	f004 fec7 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f001 fdb1 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000d608 	.word	0x2000d608
 80010c4:	40005400 	.word	0x40005400
 80010c8:	00101622 	.word	0x00101622

080010cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_I2C2_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_I2C2_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00101622;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_I2C2_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <MX_I2C2_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_I2C2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_I2C2_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_I2C2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_I2C2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C2_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C2_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C2_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <MX_I2C2_Init+0x74>)
 8001108:	f004 f9f4 	bl	80054f4 <HAL_I2C_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001112:	f001 fd83 	bl	8002c1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_I2C2_Init+0x74>)
 800111a:	f004 fe45 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001124:	f001 fd7a 	bl	8002c1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_I2C2_Init+0x74>)
 800112c:	f004 fe87 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001136:	f001 fd71 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000da58 	.word	0x2000da58
 8001144:	40005800 	.word	0x40005800
 8001148:	00101622 	.word	0x00101622

0800114c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_I2C3_Init+0x74>)
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <MX_I2C3_Init+0x78>)
 8001154:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00101622;
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_I2C3_Init+0x74>)
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <MX_I2C3_Init+0x7c>)
 800115a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_I2C3_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_I2C3_Init+0x74>)
 8001164:	2201      	movs	r2, #1
 8001166:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_I2C3_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_I2C3_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_I2C3_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_I2C3_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_I2C3_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <MX_I2C3_Init+0x74>)
 8001188:	f004 f9b4 	bl	80054f4 <HAL_I2C_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001192:	f001 fd43 	bl	8002c1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <MX_I2C3_Init+0x74>)
 800119a:	f004 fe05 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80011a4:	f001 fd3a 	bl	8002c1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011a8:	2100      	movs	r1, #0
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_I2C3_Init+0x74>)
 80011ac:	f004 fe47 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80011b6:	f001 fd31 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000d3f8 	.word	0x2000d3f8
 80011c4:	40005c00 	.word	0x40005c00
 80011c8:	00101622 	.word	0x00101622

080011cc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C4_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C4_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00101622;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C4_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C4_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C4_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C4_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C4_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C4_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C4_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C4_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C4_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C4_Init+0x74>)
 8001208:	f004 f974 	bl	80054f4 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001212:	f001 fd03 	bl	8002c1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C4_Init+0x74>)
 800121a:	f004 fdc5 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001224:	f001 fcfa 	bl	8002c1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C4_Init+0x74>)
 800122c:	f004 fe07 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001236:	f001 fcf1 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000d444 	.word	0x2000d444
 8001244:	40006000 	.word	0x40006000
 8001248:	00101622 	.word	0x00101622

0800124c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_RTC_Init+0x44>)
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <MX_RTC_Init+0x48>)
 8001254:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_RTC_Init+0x44>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_RTC_Init+0x44>)
 800125e:	227f      	movs	r2, #127	; 0x7f
 8001260:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_RTC_Init+0x44>)
 8001264:	22ff      	movs	r2, #255	; 0xff
 8001266:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_RTC_Init+0x44>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_RTC_Init+0x44>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_RTC_Init+0x44>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_RTC_Init+0x44>)
 800127c:	f006 f85c 	bl	8007338 <HAL_RTC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001286:	f001 fcc9 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200103dc 	.word	0x200103dc
 8001294:	40002800 	.word	0x40002800

08001298 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_SPI4_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <MX_SPI4_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_SPI4_Init+0x74>)
 80012a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_SPI4_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_SPI4_Init+0x74>)
 80012b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012b6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_SPI4_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_SPI4_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_SPI4_Init+0x74>)
 80012c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ca:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_SPI4_Init+0x74>)
 80012ce:	2210      	movs	r2, #16
 80012d0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_SPI4_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_SPI4_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_SPI4_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_SPI4_Init+0x74>)
 80012e6:	2207      	movs	r2, #7
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_SPI4_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_SPI4_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_SPI4_Init+0x74>)
 80012f8:	f006 f8c6 	bl	8007488 <HAL_SPI_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001302:	f001 fc8b 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000d394 	.word	0x2000d394
 8001310:	40013400 	.word	0x40013400

08001314 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_SPI5_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <MX_SPI5_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_SPI5_Init+0x74>)
 8001320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001324:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_SPI5_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_SPI5_Init+0x74>)
 800132e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001332:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_SPI5_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_SPI5_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_SPI5_Init+0x74>)
 8001342:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001346:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_SPI5_Init+0x74>)
 800134a:	2218      	movs	r2, #24
 800134c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_SPI5_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_SPI5_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_SPI5_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_SPI5_Init+0x74>)
 8001362:	2207      	movs	r2, #7
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_SPI5_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_SPI5_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_SPI5_Init+0x74>)
 8001374:	f006 f888 	bl	8007488 <HAL_SPI_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800137e:	f001 fc4d 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000d510 	.word	0x2000d510
 800138c:	40015000 	.word	0x40015000

08001390 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013c4:	4a2d      	ldr	r2, [pc, #180]	; (800147c <MX_TIM4_Init+0xec>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013e8:	4823      	ldr	r0, [pc, #140]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013ea:	f006 fc81 	bl	8007cf0 <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013f4:	f001 fc12 	bl	8002c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	4619      	mov	r1, r3
 8001404:	481c      	ldr	r0, [pc, #112]	; (8001478 <MX_TIM4_Init+0xe8>)
 8001406:	f006 ff35 	bl	8008274 <HAL_TIM_ConfigClockSource>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001410:	f001 fc04 	bl	8002c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001414:	4818      	ldr	r0, [pc, #96]	; (8001478 <MX_TIM4_Init+0xe8>)
 8001416:	f006 fcc1 	bl	8007d9c <HAL_TIM_PWM_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001420:	f001 fbfc 	bl	8002c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <MX_TIM4_Init+0xe8>)
 8001434:	f007 fb98 	bl	8008b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800143e:	f001 fbed 	bl	8002c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	; (8001478 <MX_TIM4_Init+0xe8>)
 800145a:	f006 fdf3 	bl	8008044 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001464:	f001 fbda 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <MX_TIM4_Init+0xe8>)
 800146a:	f001 ffd3 	bl	8003414 <HAL_TIM_MspPostInit>

}
 800146e:	bf00      	nop
 8001470:	3738      	adds	r7, #56	; 0x38
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000d574 	.word	0x2000d574
 800147c:	40000800 	.word	0x40000800

08001480 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <MX_TIM5_Init+0xfc>)
 80014b4:	4a32      	ldr	r2, [pc, #200]	; (8001580 <MX_TIM5_Init+0x100>)
 80014b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <MX_TIM5_Init+0xfc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <MX_TIM5_Init+0xfc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_TIM5_Init+0xfc>)
 80014c6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_TIM5_Init+0xfc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_TIM5_Init+0xfc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014d8:	4828      	ldr	r0, [pc, #160]	; (800157c <MX_TIM5_Init+0xfc>)
 80014da:	f006 fc09 	bl	8007cf0 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80014e4:	f001 fb9a 	bl	8002c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4821      	ldr	r0, [pc, #132]	; (800157c <MX_TIM5_Init+0xfc>)
 80014f6:	f006 febd 	bl	8008274 <HAL_TIM_ConfigClockSource>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001500:	f001 fb8c 	bl	8002c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001504:	481d      	ldr	r0, [pc, #116]	; (800157c <MX_TIM5_Init+0xfc>)
 8001506:	f006 fc49 	bl	8007d9c <HAL_TIM_PWM_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001510:	f001 fb84 	bl	8002c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4816      	ldr	r0, [pc, #88]	; (800157c <MX_TIM5_Init+0xfc>)
 8001524:	f007 fb20 	bl	8008b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800152e:	f001 fb75 	bl	8002c1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001532:	2360      	movs	r3, #96	; 0x60
 8001534:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_TIM5_Init+0xfc>)
 800154a:	f006 fd7b 	bl	8008044 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001554:	f001 fb62 	bl	8002c1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	2204      	movs	r2, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM5_Init+0xfc>)
 8001560:	f006 fd70 	bl	8008044 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800156a:	f001 fb57 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM5_Init+0xfc>)
 8001570:	f001 ff50 	bl	8003414 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	; 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000db08 	.word	0x2000db08
 8001580:	40000c00 	.word	0x40000c00

08001584 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_UART4_Init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <MX_UART4_Init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_UART4_Init+0x58>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_UART4_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_UART4_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_UART4_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_UART4_Init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_UART4_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_UART4_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_UART4_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_UART4_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_UART4_Init+0x58>)
 80015c8:	f007 fb7a 	bl	8008cc0 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80015d2:	f001 fb23 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20012b0c 	.word	0x20012b0c
 80015e0:	40004c00 	.word	0x40004c00

080015e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_UART5_Init+0x58>)
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <MX_UART5_Init+0x5c>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_UART5_Init+0x58>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_UART5_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_UART5_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_UART5_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_UART5_Init+0x58>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_UART5_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_UART5_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_UART5_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_UART5_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_UART5_Init+0x58>)
 8001628:	f007 fb4a 	bl	8008cc0 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001632:	f001 faf3 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20010258 	.word	0x20010258
 8001640:	40005000 	.word	0x40005000

08001644 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_UART7_Init+0x58>)
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_UART7_Init+0x5c>)
 800164c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_UART7_Init+0x58>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_UART7_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_UART7_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_UART7_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_UART7_Init+0x58>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_UART7_Init+0x58>)
 8001670:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001674:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_UART7_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_UART7_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_UART7_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_UART7_Init+0x58>)
 800168a:	f007 fb19 	bl	8008cc0 <HAL_UART_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8001694:	f001 fac2 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000d490 	.word	0x2000d490
 80016a0:	40007800 	.word	0x40007800

080016a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b2:	2206      	movs	r2, #6
 80016b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c4:	2202      	movs	r2, #2
 80016c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e8:	f004 fbf5 	bl	8005ed6 <HAL_PCD_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016f2:	f001 fa93 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000d654 	.word	0x2000d654

08001700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_DMA_Init+0x80>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <MX_DMA_Init+0x80>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_DMA_Init+0x80>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_DMA_Init+0x80>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_DMA_Init+0x80>)
 8001724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_DMA_Init+0x80>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	200b      	movs	r0, #11
 800173c:	f003 f88e 	bl	800485c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001740:	200b      	movs	r0, #11
 8001742:	f003 f8a7 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2105      	movs	r1, #5
 800174a:	2038      	movs	r0, #56	; 0x38
 800174c:	f003 f886 	bl	800485c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001750:	2038      	movs	r0, #56	; 0x38
 8001752:	f003 f89f 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	2039      	movs	r0, #57	; 0x39
 800175c:	f003 f87e 	bl	800485c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001760:	2039      	movs	r0, #57	; 0x39
 8001762:	f003 f897 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	203a      	movs	r0, #58	; 0x3a
 800176c:	f003 f876 	bl	800485c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001770:	203a      	movs	r0, #58	; 0x3a
 8001772:	f003 f88f 	bl	8004894 <HAL_NVIC_EnableIRQ>

}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b090      	sub	sp, #64	; 0x40
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179a:	4bb0      	ldr	r3, [pc, #704]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4aaf      	ldr	r2, [pc, #700]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017a0:	f043 0310 	orr.w	r3, r3, #16
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4bad      	ldr	r3, [pc, #692]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b2:	4baa      	ldr	r3, [pc, #680]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4aa9      	ldr	r2, [pc, #676]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4ba7      	ldr	r3, [pc, #668]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4aa3      	ldr	r2, [pc, #652]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	623b      	str	r3, [r7, #32]
 80017e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a9d      	ldr	r2, [pc, #628]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b9b      	ldr	r3, [pc, #620]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b98      	ldr	r3, [pc, #608]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a97      	ldr	r2, [pc, #604]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b95      	ldr	r3, [pc, #596]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001812:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a91      	ldr	r2, [pc, #580]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a8b      	ldr	r2, [pc, #556]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001842:	4b86      	ldr	r3, [pc, #536]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a85      	ldr	r2, [pc, #532]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b83      	ldr	r3, [pc, #524]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001872:	4b7a      	ldr	r3, [pc, #488]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a79      	ldr	r2, [pc, #484]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800188a:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a73      	ldr	r2, [pc, #460]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <MX_GPIO_Init+0x2d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2110      	movs	r1, #16
 80018a6:	486e      	ldr	r0, [pc, #440]	; (8001a60 <MX_GPIO_Init+0x2dc>)
 80018a8:	f003 fdcc 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 80018ac:	2200      	movs	r2, #0
 80018ae:	f244 012f 	movw	r1, #16431	; 0x402f
 80018b2:	486c      	ldr	r0, [pc, #432]	; (8001a64 <MX_GPIO_Init+0x2e0>)
 80018b4:	f003 fdc6 	bl	8005444 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f241 1150 	movw	r1, #4432	; 0x1150
 80018be:	486a      	ldr	r0, [pc, #424]	; (8001a68 <MX_GPIO_Init+0x2e4>)
 80018c0:	f003 fdc0 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2103      	movs	r1, #3
 80018c8:	4868      	ldr	r0, [pc, #416]	; (8001a6c <MX_GPIO_Init+0x2e8>)
 80018ca:	f003 fdbb 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 80018ce:	2200      	movs	r2, #0
 80018d0:	f243 013c 	movw	r1, #12348	; 0x303c
 80018d4:	4866      	ldr	r0, [pc, #408]	; (8001a70 <MX_GPIO_Init+0x2ec>)
 80018d6:	f003 fdb5 	bl	8005444 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f241 0104 	movw	r1, #4100	; 0x1004
 80018e0:	4864      	ldr	r0, [pc, #400]	; (8001a74 <MX_GPIO_Init+0x2f0>)
 80018e2:	f003 fdaf 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80018ec:	4862      	ldr	r0, [pc, #392]	; (8001a78 <MX_GPIO_Init+0x2f4>)
 80018ee:	f003 fda9 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	211b      	movs	r1, #27
 80018f6:	4861      	ldr	r0, [pc, #388]	; (8001a7c <MX_GPIO_Init+0x2f8>)
 80018f8:	f003 fda4 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 80018fc:	2310      	movs	r3, #16
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4853      	ldr	r0, [pc, #332]	; (8001a60 <MX_GPIO_Init+0x2dc>)
 8001914:	f003 fbd4 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8001918:	2308      	movs	r3, #8
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001928:	4619      	mov	r1, r3
 800192a:	484d      	ldr	r0, [pc, #308]	; (8001a60 <MX_GPIO_Init+0x2dc>)
 800192c:	f003 fbc8 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8001930:	f244 032f 	movw	r3, #16431	; 0x402f
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	4846      	ldr	r0, [pc, #280]	; (8001a64 <MX_GPIO_Init+0x2e0>)
 800194a:	f003 fbb9 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	4845      	ldr	r0, [pc, #276]	; (8001a78 <MX_GPIO_Init+0x2f4>)
 8001962:	f003 fbad 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8001966:	f241 1350 	movw	r3, #4432	; 0x1150
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	483a      	ldr	r0, [pc, #232]	; (8001a68 <MX_GPIO_Init+0x2e4>)
 8001980:	f003 fb9e 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8001984:	23f0      	movs	r3, #240	; 0xf0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001988:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <MX_GPIO_Init+0x2fc>)
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001994:	4619      	mov	r1, r3
 8001996:	4835      	ldr	r0, [pc, #212]	; (8001a6c <MX_GPIO_Init+0x2e8>)
 8001998:	f003 fb92 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	4834      	ldr	r0, [pc, #208]	; (8001a84 <MX_GPIO_Init+0x300>)
 80019b2:	f003 fb85 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 80019b6:	f64f 7310 	movw	r3, #65296	; 0xff10
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	482f      	ldr	r0, [pc, #188]	; (8001a88 <MX_GPIO_Init+0x304>)
 80019cc:	f003 fb78 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 80019d0:	2303      	movs	r3, #3
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	4821      	ldr	r0, [pc, #132]	; (8001a6c <MX_GPIO_Init+0x2e8>)
 80019e8:	f003 fb6a 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 80019ec:	f243 033c 	movw	r3, #12348	; 0x303c
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a02:	4619      	mov	r1, r3
 8001a04:	481a      	ldr	r0, [pc, #104]	; (8001a70 <MX_GPIO_Init+0x2ec>)
 8001a06:	f003 fb5b 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 8001a0a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <MX_GPIO_Init+0x2f0>)
 8001a24:	f003 fb4c 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 8001a28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <MX_GPIO_Init+0x2f4>)
 8001a42:	f003 fb3d 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 8001a46:	231b      	movs	r3, #27
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5a:	e017      	b.n	8001a8c <MX_GPIO_Init+0x308>
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40021800 	.word	0x40021800
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022800 	.word	0x40022800
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021c00 	.word	0x40021c00
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40022400 	.word	0x40022400
 8001a80:	10210000 	.word	0x10210000
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480b      	ldr	r0, [pc, #44]	; (8001abc <MX_GPIO_Init+0x338>)
 8001a90:	f003 fb16 	bl	80050c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2105      	movs	r1, #5
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f002 fedf 	bl	800485c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a9e:	200a      	movs	r0, #10
 8001aa0:	f002 fef8 	bl	8004894 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	2017      	movs	r0, #23
 8001aaa:	f002 fed7 	bl	800485c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aae:	2017      	movs	r0, #23
 8001ab0:	f002 fef0 	bl	8004894 <HAL_NVIC_EnableIRQ>

}
 8001ab4:	bf00      	nop
 8001ab6:	3740      	adds	r7, #64	; 0x40
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40022400 	.word	0x40022400

08001ac0 <outputGPIOBufInitialization>:

/* USER CODE BEGIN 4 */
void outputGPIOBufInitialization(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 8001ac4:	220e      	movs	r2, #14
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <outputGPIOBufInitialization+0x14>)
 8001aca:	f00a fe54 	bl	800c776 <memset>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200103cc 	.word	0x200103cc

08001ad8 <uartTransmitChar>:
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}

void uartTransmitChar(char *message, int uart){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0b6      	sub	sp, #216	; 0xd8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00b fc63 	bl	800d3b4 <siprintf>
 8001aee:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	if (uart == 7){
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	d108      	bne.n	8001b0a <uartTransmitChar+0x32>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8001af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	f107 010c 	add.w	r1, r7, #12
 8001b02:	2364      	movs	r3, #100	; 0x64
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <uartTransmitChar+0x3c>)
 8001b06:	f007 f929 	bl	8008d5c <HAL_UART_Transmit>
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	37d8      	adds	r7, #216	; 0xd8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000d490 	.word	0x2000d490

08001b18 <uartTransmitInt>:
void uartTransmitInt(uint16_t *number, int uart){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b098      	sub	sp, #96	; 0x60
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	char uart_buf[80];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "0x%x\r\n", number);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4909      	ldr	r1, [pc, #36]	; (8001b50 <uartTransmitInt+0x38>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00b fc42 	bl	800d3b4 <siprintf>
 8001b30:	65f8      	str	r0, [r7, #92]	; 0x5c
	if (uart == 7){
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	d107      	bne.n	8001b48 <uartTransmitInt+0x30>
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
 8001b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f107 010c 	add.w	r1, r7, #12
 8001b40:	2364      	movs	r3, #100	; 0x64
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <uartTransmitInt+0x3c>)
 8001b44:	f007 f90a 	bl	8008d5c <HAL_UART_Transmit>
	}

}
 8001b48:	bf00      	nop
 8001b4a:	3760      	adds	r7, #96	; 0x60
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	0801009c 	.word	0x0801009c
 8001b54:	2000d490 	.word	0x2000d490

08001b58 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	460b      	mov	r3, r1
 8001b68:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8001b6a:	4a4f      	ldr	r2, [pc, #316]	; (8001ca8 <readI2CRegister+0x150>)
 8001b6c:	7bbb      	ldrb	r3, [r7, #14]
 8001b6e:	7013      	strb	r3, [r2, #0]
  	if(i2CBank == 1){
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10c      	bne.n	8001b90 <readI2CRegister+0x38>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	b299      	uxth	r1, r3
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <readI2CRegister+0x150>)
 8001b84:	4849      	ldr	r0, [pc, #292]	; (8001cac <readI2CRegister+0x154>)
 8001b86:	f003 fd45 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	75fb      	strb	r3, [r7, #23]
 8001b8e:	e02e      	b.n	8001bee <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 2){
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d10c      	bne.n	8001bb0 <readI2CRegister+0x58>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4a41      	ldr	r2, [pc, #260]	; (8001ca8 <readI2CRegister+0x150>)
 8001ba4:	4842      	ldr	r0, [pc, #264]	; (8001cb0 <readI2CRegister+0x158>)
 8001ba6:	f003 fd35 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001baa:	4603      	mov	r3, r0
 8001bac:	75fb      	strb	r3, [r7, #23]
 8001bae:	e01e      	b.n	8001bee <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 3){
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d10c      	bne.n	8001bd0 <readI2CRegister+0x78>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4a39      	ldr	r2, [pc, #228]	; (8001ca8 <readI2CRegister+0x150>)
 8001bc4:	483b      	ldr	r0, [pc, #236]	; (8001cb4 <readI2CRegister+0x15c>)
 8001bc6:	f003 fd25 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	75fb      	strb	r3, [r7, #23]
 8001bce:	e00e      	b.n	8001bee <readI2CRegister+0x96>
  	}
  	else if(i2CBank == 4){
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d10b      	bne.n	8001bee <readI2CRegister+0x96>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	b299      	uxth	r1, r3
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <readI2CRegister+0x150>)
 8001be4:	4834      	ldr	r0, [pc, #208]	; (8001cb8 <readI2CRegister+0x160>)
 8001be6:	f003 fd15 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001bea:	4603      	mov	r3, r0
 8001bec:	75fb      	strb	r3, [r7, #23]
  	}
	  if ( ret != HAL_OK ) {
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <readI2CRegister+0xa0>
	          return 0xfe;
 8001bf4:	23fe      	movs	r3, #254	; 0xfe
 8001bf6:	e052      	b.n	8001c9e <readI2CRegister+0x146>
	        }
	  else {
		  if(i2CBank == 1){
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10e      	bne.n	8001c1c <readI2CRegister+0xc4>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	b299      	uxth	r1, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <readI2CRegister+0x150>)
 8001c10:	4826      	ldr	r0, [pc, #152]	; (8001cac <readI2CRegister+0x154>)
 8001c12:	f003 fdf3 	bl	80057fc <HAL_I2C_Master_Receive>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	e034      	b.n	8001c86 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 2){
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d10e      	bne.n	8001c40 <readI2CRegister+0xe8>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	b299      	uxth	r1, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <readI2CRegister+0x150>)
 8001c34:	481e      	ldr	r0, [pc, #120]	; (8001cb0 <readI2CRegister+0x158>)
 8001c36:	f003 fde1 	bl	80057fc <HAL_I2C_Master_Receive>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	75fb      	strb	r3, [r7, #23]
 8001c3e:	e022      	b.n	8001c86 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 3){
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d10e      	bne.n	8001c64 <readI2CRegister+0x10c>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	b299      	uxth	r1, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <readI2CRegister+0x150>)
 8001c58:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <readI2CRegister+0x15c>)
 8001c5a:	f003 fdcf 	bl	80057fc <HAL_I2C_Master_Receive>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	75fb      	strb	r3, [r7, #23]
 8001c62:	e010      	b.n	8001c86 <readI2CRegister+0x12e>
			}
			else if(i2CBank == 4){
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d10d      	bne.n	8001c86 <readI2CRegister+0x12e>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	b299      	uxth	r1, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <readI2CRegister+0x150>)
 8001c7c:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <readI2CRegister+0x160>)
 8001c7e:	f003 fdbd 	bl	80057fc <HAL_I2C_Master_Receive>
 8001c82:	4603      	mov	r3, r0
 8001c84:	75fb      	strb	r3, [r7, #23]
			}
		  if ( ret != HAL_OK ) {
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <readI2CRegister+0x138>
		          return 0xfe;
 8001c8c:	23fe      	movs	r3, #254	; 0xfe
 8001c8e:	e006      	b.n	8001c9e <readI2CRegister+0x146>
		        }
		  else{
			  uartTransmitInt(buf[0],7);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <readI2CRegister+0x150>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2107      	movs	r1, #7
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff3e 	bl	8001b18 <uartTransmitInt>
			  return buf;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <readI2CRegister+0x150>)
		  }
}
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200002c0 	.word	0x200002c0
 8001cac:	2000d608 	.word	0x2000d608
 8001cb0:	2000da58 	.word	0x2000da58
 8001cb4:	2000d3f8 	.word	0x2000d3f8
 8001cb8:	2000d444 	.word	0x2000d444

08001cbc <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	73bb      	strb	r3, [r7, #14]
	  	uint8_t buf[20];
	  	HAL_StatusTypeDef ret;
	  	buf[0]=reg;
 8001cce:	7bbb      	ldrb	r3, [r7, #14]
 8001cd0:	753b      	strb	r3, [r7, #20]
	  	int x = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cda:	e00d      	b.n	8001cf8 <writeI2CRegister+0x3c>
	  		buf[1+x] = bytes[x];
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	441a      	add	r2, r3
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001cec:	440b      	add	r3, r1
 8001cee:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  	for (x=0;x<(sizeof(bytes)-1);x++){
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d9ee      	bls.n	8001cdc <writeI2CRegister+0x20>
	  	}
	  	if(i2CBank == 1){
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d112      	bne.n	8001d2a <writeI2CRegister+0x6e>
	  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	b299      	uxth	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	f107 0214 	add.w	r2, r7, #20
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4829      	ldr	r0, [pc, #164]	; (8001dc4 <writeI2CRegister+0x108>)
 8001d1e:	f003 fc79 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d28:	e040      	b.n	8001dac <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 2){
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d112      	bne.n	8001d56 <writeI2CRegister+0x9a>
	  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	b299      	uxth	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	f107 0214 	add.w	r2, r7, #20
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	481f      	ldr	r0, [pc, #124]	; (8001dc8 <writeI2CRegister+0x10c>)
 8001d4a:	f003 fc63 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d54:	e02a      	b.n	8001dac <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 3){
 8001d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d112      	bne.n	8001d82 <writeI2CRegister+0xc6>
	  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	b298      	uxth	r0, r3
 8001d68:	f107 0214 	add.w	r2, r7, #20
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4603      	mov	r3, r0
 8001d74:	4815      	ldr	r0, [pc, #84]	; (8001dcc <writeI2CRegister+0x110>)
 8001d76:	f003 fc4d 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d80:	e014      	b.n	8001dac <writeI2CRegister+0xf0>
	  	}
	  	else if(i2CBank == 4){
 8001d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d111      	bne.n	8001dac <writeI2CRegister+0xf0>
	  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	b299      	uxth	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	b298      	uxth	r0, r3
 8001d94:	f107 0214 	add.w	r2, r7, #20
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <writeI2CRegister+0x114>)
 8001da2:	f003 fc37 	bl	8005614 <HAL_I2C_Master_Transmit>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	}
	  	if ( ret != HAL_OK ) {
 8001dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <writeI2CRegister+0xfc>
	  	          return 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e000      	b.n	8001dba <writeI2CRegister+0xfe>
	  	        }
	  	else {
	  		  return 1;
 8001db8:	2301      	movs	r3, #1
	  }
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3730      	adds	r7, #48	; 0x30
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000d608 	.word	0x2000d608
 8001dc8:	2000da58 	.word	0x2000da58
 8001dcc:	2000d3f8 	.word	0x2000d3f8
 8001dd0:	2000d444 	.word	0x2000d444

08001dd4 <configureLEDDriver>:
void configureLEDDriver(){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <configureLEDDriver+0x110>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, currentMultiplier,1,LED.i2cBank);
 8001de4:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <configureLEDDriver+0x114>)
 8001de6:	7818      	ldrb	r0, [r3, #0]
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <configureLEDDriver+0x114>)
 8001dea:	7999      	ldrb	r1, [r3, #6]
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <configureLEDDriver+0x114>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	f7ff ff60 	bl	8001cbc <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <configureLEDDriver+0x114>)
 8001dfe:	7818      	ldrb	r0, [r3, #0]
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e02:	7999      	ldrb	r1, [r3, #6]
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fea5 	bl	8001b58 <readI2CRegister>
 8001e0e:	6038      	str	r0, [r7, #0]
	uartTransmitInt(buf[0],7);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2107      	movs	r1, #7
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe7e 	bl	8001b18 <uartTransmitInt>
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,LED.mode0_oscon_value,1,LED.i2cBank);
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e1e:	7818      	ldrb	r0, [r3, #0]
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e22:	7859      	ldrb	r1, [r3, #1]
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e26:	79db      	ldrb	r3, [r3, #7]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	f7ff ff43 	bl	8001cbc <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,clear,1,LED.i2cBank);
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e38:	7818      	ldrb	r0, [r3, #0]
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e3c:	7899      	ldrb	r1, [r3, #2]
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2301      	movs	r3, #1
 8001e46:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <configureLEDDriver+0x110>)
 8001e48:	f7ff ff38 	bl	8001cbc <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,clear,1,LED.i2cBank);
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e4e:	7818      	ldrb	r0, [r3, #0]
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e52:	78d9      	ldrb	r1, [r3, #3]
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <configureLEDDriver+0x110>)
 8001e5e:	f7ff ff2d 	bl	8001cbc <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,clear,1,LED.i2cBank);
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e64:	7818      	ldrb	r0, [r3, #0]
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e68:	7919      	ldrb	r1, [r3, #4]
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <configureLEDDriver+0x110>)
 8001e74:	f7ff ff22 	bl	8001cbc <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,clear,1,LED.i2cBank);
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e7a:	7818      	ldrb	r0, [r3, #0]
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e7e:	7959      	ldrb	r1, [r3, #5]
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <configureLEDDriver+0x110>)
 8001e8a:	f7ff ff17 	bl	8001cbc <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,LED.pwm,1,LED.i2cBank);
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e90:	7818      	ldrb	r0, [r3, #0]
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e94:	7a19      	ldrb	r1, [r3, #8]
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e98:	7adb      	ldrb	r3, [r3, #11]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <configureLEDDriver+0x114>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f7ff ff0a 	bl	8001cbc <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,LED.pwm,1,LED.i2cBank);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <configureLEDDriver+0x114>)
 8001eaa:	7818      	ldrb	r0, [r3, #0]
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <configureLEDDriver+0x114>)
 8001eae:	7a59      	ldrb	r1, [r3, #9]
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <configureLEDDriver+0x114>)
 8001eb2:	7adb      	ldrb	r3, [r3, #11]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <configureLEDDriver+0x114>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f7ff fefd 	bl	8001cbc <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,LED.pwm,1,LED.i2cBank);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <configureLEDDriver+0x114>)
 8001ec4:	7818      	ldrb	r0, [r3, #0]
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <configureLEDDriver+0x114>)
 8001ec8:	7a99      	ldrb	r1, [r3, #10]
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <configureLEDDriver+0x114>)
 8001ecc:	7adb      	ldrb	r3, [r3, #11]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <configureLEDDriver+0x114>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f7ff fef0 	bl	8001cbc <writeI2CRegister>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200002d4 	.word	0x200002d4
 8001ee8:	20000008 	.word	0x20000008

08001eec <setErrorLED>:
		 HAL_SPI_Transmit(&hspi4, (uint8_t*)&bytesSent, sizeof(bytesSent), 100);
	 }
	 SMLCD_SCS_L;
}*/
//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 8001efc:	2304      	movs	r3, #4
 8001efe:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 8001f00:	2310      	movs	r3, #16
 8001f02:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 8001f04:	2340      	movs	r3, #64	; 0x40
 8001f06:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8001f10:	2320      	movs	r3, #32
 8001f12:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	dc05      	bgt.n	8001f2a <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8001f1e:	4b80      	ldr	r3, [pc, #512]	; (8002120 <setErrorLED+0x234>)
 8001f20:	789b      	ldrb	r3, [r3, #2]
 8001f22:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	e019      	b.n	8001f5e <setErrorLED+0x72>
	}
	else if(led <8){
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b07      	cmp	r3, #7
 8001f2e:	dc06      	bgt.n	8001f3e <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8001f30:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <setErrorLED+0x234>)
 8001f32:	78db      	ldrb	r3, [r3, #3]
 8001f34:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3b04      	subs	r3, #4
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	e00f      	b.n	8001f5e <setErrorLED+0x72>
	}
	else if(led <12){
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0b      	cmp	r3, #11
 8001f42:	dc06      	bgt.n	8001f52 <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8001f44:	4b76      	ldr	r3, [pc, #472]	; (8002120 <setErrorLED+0x234>)
 8001f46:	791b      	ldrb	r3, [r3, #4]
 8001f48:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	e005      	b.n	8001f5e <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <setErrorLED+0x234>)
 8001f54:	795b      	ldrb	r3, [r3, #5]
 8001f56:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b0c      	subs	r3, #12
 8001f5c:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8001f5e:	4b70      	ldr	r3, [pc, #448]	; (8002120 <setErrorLED+0x234>)
 8001f60:	7818      	ldrb	r0, [r3, #0]
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <setErrorLED+0x234>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	7ef9      	ldrb	r1, [r7, #27]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f7ff fdf5 	bl	8001b58 <readI2CRegister>
 8001f6e:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	f200 80bd 	bhi.w	80020f2 <setErrorLED+0x206>
 8001f78:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <setErrorLED+0x94>)
 8001f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7e:	bf00      	nop
 8001f80:	08001f91 	.word	0x08001f91
 8001f84:	08001ff7 	.word	0x08001ff7
 8001f88:	0800205d 	.word	0x0800205d
 8001f8c:	0800208d 	.word	0x0800208d

	case 0:
		if(change){
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <setErrorLED+0xd0>
			if(led == 8){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d107      	bne.n	8001fac <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	7dbb      	ldrb	r3, [r7, #22]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 8001faa:	e0a2      	b.n	80020f2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	7ebb      	ldrb	r3, [r7, #26]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	701a      	strb	r2, [r3, #0]
		break;
 8001fba:	e09a      	b.n	80020f2 <setErrorLED+0x206>
			if(led == 8){
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d10c      	bne.n	8001fdc <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25a      	sxtb	r2, r3
 8001fc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b25b      	sxtb	r3, r3
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	701a      	strb	r2, [r3, #0]
		break;
 8001fda:	e08a      	b.n	80020f2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b25a      	sxtb	r2, r3
 8001fe2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	4013      	ands	r3, r2
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	701a      	strb	r2, [r3, #0]
		break;
 8001ff4:	e07d      	b.n	80020f2 <setErrorLED+0x206>

	case 1:
		if(change){
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <setErrorLED+0x136>
			if(led == 9){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d107      	bne.n	8002012 <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	7d7b      	ldrb	r3, [r7, #21]
 8002008:	4313      	orrs	r3, r2
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8002010:	e06f      	b.n	80020f2 <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	7e7b      	ldrb	r3, [r7, #25]
 8002018:	4313      	orrs	r3, r2
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	701a      	strb	r2, [r3, #0]
		break;
 8002020:	e067      	b.n	80020f2 <setErrorLED+0x206>
			if(led == 9){
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b09      	cmp	r3, #9
 8002026:	d10c      	bne.n	8002042 <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25a      	sxtb	r2, r3
 800202e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002032:	43db      	mvns	r3, r3
 8002034:	b25b      	sxtb	r3, r3
 8002036:	4013      	ands	r3, r2
 8002038:	b25b      	sxtb	r3, r3
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]
		break;
 8002040:	e057      	b.n	80020f2 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b25a      	sxtb	r2, r3
 8002048:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800204c:	43db      	mvns	r3, r3
 800204e:	b25b      	sxtb	r3, r3
 8002050:	4013      	ands	r3, r2
 8002052:	b25b      	sxtb	r3, r3
 8002054:	b2da      	uxtb	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	701a      	strb	r2, [r3, #0]
		break;
 800205a:	e04a      	b.n	80020f2 <setErrorLED+0x206>

	case 2:
		if(change){
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	7e3b      	ldrb	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8002070:	e03f      	b.n	80020f2 <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b25a      	sxtb	r2, r3
 8002078:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800207c:	43db      	mvns	r3, r3
 800207e:	b25b      	sxtb	r3, r3
 8002080:	4013      	ands	r3, r2
 8002082:	b25b      	sxtb	r3, r3
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	701a      	strb	r2, [r3, #0]
		break;
 800208a:	e032      	b.n	80020f2 <setErrorLED+0x206>

	case 3:
		if(change){
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d012      	beq.n	80020b8 <setErrorLED+0x1cc>
			if(led == 7){
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b07      	cmp	r3, #7
 8002096:	d107      	bne.n	80020a8 <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	4313      	orrs	r3, r2
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 80020a6:	e023      	b.n	80020f0 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	701a      	strb	r2, [r3, #0]
		break;
 80020b6:	e01b      	b.n	80020f0 <setErrorLED+0x204>
			if(led == 7){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b07      	cmp	r3, #7
 80020bc:	d10c      	bne.n	80020d8 <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b25a      	sxtb	r2, r3
 80020c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	701a      	strb	r2, [r3, #0]
		break;
 80020d6:	e00b      	b.n	80020f0 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b25a      	sxtb	r2, r3
 80020de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4013      	ands	r3, r2
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	701a      	strb	r2, [r3, #0]
		break;
 80020f0:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <setErrorLED+0x234>)
 80020f4:	7818      	ldrb	r0, [r3, #0]
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <setErrorLED+0x234>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	7ef9      	ldrb	r1, [r7, #27]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2301      	movs	r3, #1
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	f7ff fddb 	bl	8001cbc <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <setErrorLED+0x234>)
 8002108:	7818      	ldrb	r0, [r3, #0]
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <setErrorLED+0x234>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	7ef9      	ldrb	r1, [r7, #27]
 8002110:	2201      	movs	r2, #1
 8002112:	f7ff fd21 	bl	8001b58 <readI2CRegister>
 8002116:	60f8      	str	r0, [r7, #12]
}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000008 	.word	0x20000008

08002124 <getADCValues>:


float* getADCValues(){
 8002124:	b580      	push	{r7, lr}
 8002126:	b09e      	sub	sp, #120	; 0x78
 8002128:	af00      	add	r7, sp, #0
	static float adcValues[20];
	int avgADCCounterValues[20];
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2250      	movs	r2, #80	; 0x50
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f00a fb20 	bl	800c776 <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	int adc1DataRepeat=22;
 8002136:	2316      	movs	r3, #22
 8002138:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 800213a:	2308      	movs	r3, #8
 800213c:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 800213e:	230c      	movs	r3, #12
 8002140:	663b      	str	r3, [r7, #96]	; 0x60
	for(adcChannelCounter=0;adcChannelCounter<20;adcChannelCounter++){
 8002142:	2300      	movs	r3, #0
 8002144:	677b      	str	r3, [r7, #116]	; 0x74
 8002146:	e171      	b.n	800242c <getADCValues+0x308>
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8002148:	4b97      	ldr	r3, [pc, #604]	; (80023a8 <getADCValues+0x284>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800214e:	429a      	cmp	r2, r3
 8002150:	d009      	beq.n	8002166 <getADCValues+0x42>
 8002152:	4b95      	ldr	r3, [pc, #596]	; (80023a8 <getADCValues+0x284>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002158:	429a      	cmp	r2, r3
 800215a:	d004      	beq.n	8002166 <getADCValues+0x42>
 800215c:	4b92      	ldr	r3, [pc, #584]	; (80023a8 <getADCValues+0x284>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002162:	429a      	cmp	r2, r3
 8002164:	d102      	bne.n	800216c <getADCValues+0x48>
			adcIndex=0;
 8002166:	2300      	movs	r3, #0
 8002168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800216a:	e071      	b.n	8002250 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 800216c:	4b8e      	ldr	r3, [pc, #568]	; (80023a8 <getADCValues+0x284>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002172:	429a      	cmp	r2, r3
 8002174:	d009      	beq.n	800218a <getADCValues+0x66>
 8002176:	4b8c      	ldr	r3, [pc, #560]	; (80023a8 <getADCValues+0x284>)
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800217c:	429a      	cmp	r2, r3
 800217e:	d004      	beq.n	800218a <getADCValues+0x66>
 8002180:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <getADCValues+0x284>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002186:	429a      	cmp	r2, r3
 8002188:	d102      	bne.n	8002190 <getADCValues+0x6c>
			adcIndex=2;
 800218a:	2302      	movs	r3, #2
 800218c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800218e:	e05f      	b.n	8002250 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8002190:	4b85      	ldr	r3, [pc, #532]	; (80023a8 <getADCValues+0x284>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002196:	429a      	cmp	r2, r3
 8002198:	d009      	beq.n	80021ae <getADCValues+0x8a>
 800219a:	4b83      	ldr	r3, [pc, #524]	; (80023a8 <getADCValues+0x284>)
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d004      	beq.n	80021ae <getADCValues+0x8a>
 80021a4:	4b80      	ldr	r3, [pc, #512]	; (80023a8 <getADCValues+0x284>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d102      	bne.n	80021b4 <getADCValues+0x90>
			adcIndex=4;
 80021ae:	2304      	movs	r3, #4
 80021b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021b2:	e04d      	b.n	8002250 <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 80021b4:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <getADCValues+0x284>)
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d009      	beq.n	80021d2 <getADCValues+0xae>
 80021be:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <getADCValues+0x284>)
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d004      	beq.n	80021d2 <getADCValues+0xae>
 80021c8:	4b77      	ldr	r3, [pc, #476]	; (80023a8 <getADCValues+0x284>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d102      	bne.n	80021d8 <getADCValues+0xb4>
			adcIndex=6;
 80021d2:	2306      	movs	r3, #6
 80021d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021d6:	e03b      	b.n	8002250 <getADCValues+0x12c>
		}
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 80021d8:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <getADCValues+0x284>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021de:	429a      	cmp	r2, r3
 80021e0:	d004      	beq.n	80021ec <getADCValues+0xc8>
 80021e2:	4b71      	ldr	r3, [pc, #452]	; (80023a8 <getADCValues+0x284>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d102      	bne.n	80021f2 <getADCValues+0xce>
			adcIndex=8;
 80021ec:	2308      	movs	r3, #8
 80021ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021f0:	e02e      	b.n	8002250 <getADCValues+0x12c>
		}
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 80021f2:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <getADCValues+0x284>)
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d004      	beq.n	8002206 <getADCValues+0xe2>
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <getADCValues+0x284>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002202:	429a      	cmp	r2, r3
 8002204:	d102      	bne.n	800220c <getADCValues+0xe8>
			adcIndex=10;
 8002206:	230a      	movs	r3, #10
 8002208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800220a:	e021      	b.n	8002250 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc9){
 800220c:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <getADCValues+0x284>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002212:	429a      	cmp	r2, r3
 8002214:	d102      	bne.n	800221c <getADCValues+0xf8>
			adcIndex=12;
 8002216:	230c      	movs	r3, #12
 8002218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800221a:	e019      	b.n	8002250 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc10){
 800221c:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <getADCValues+0x284>)
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002222:	429a      	cmp	r2, r3
 8002224:	d102      	bne.n	800222c <getADCValues+0x108>
			adcIndex=14;
 8002226:	230e      	movs	r3, #14
 8002228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800222a:	e011      	b.n	8002250 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc11){
 800222c:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <getADCValues+0x284>)
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002232:	429a      	cmp	r2, r3
 8002234:	d102      	bne.n	800223c <getADCValues+0x118>
			adcIndex=16;
 8002236:	2310      	movs	r3, #16
 8002238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800223a:	e009      	b.n	8002250 <getADCValues+0x12c>
		}
		else if(adcChannelCounter==Adc.adc12){
 800223c:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <getADCValues+0x284>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002242:	429a      	cmp	r2, r3
 8002244:	d102      	bne.n	800224c <getADCValues+0x128>
			adcIndex=18;
 8002246:	2312      	movs	r3, #18
 8002248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800224a:	e001      	b.n	8002250 <getADCValues+0x12c>
		}
		else{
			adcIndex=20;
 800224c:	2314      	movs	r3, #20
 800224e:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8002250:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <getADCValues+0x284>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002256:	429a      	cmp	r2, r3
 8002258:	d00e      	beq.n	8002278 <getADCValues+0x154>
 800225a:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <getADCValues+0x284>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002260:	429a      	cmp	r2, r3
 8002262:	d009      	beq.n	8002278 <getADCValues+0x154>
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <getADCValues+0x284>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800226a:	429a      	cmp	r2, r3
 800226c:	d004      	beq.n	8002278 <getADCValues+0x154>
 800226e:	4b4e      	ldr	r3, [pc, #312]	; (80023a8 <getADCValues+0x284>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002274:	429a      	cmp	r2, r3
 8002276:	d13a      	bne.n	80022ee <getADCValues+0x1ca>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002278:	2300      	movs	r3, #0
 800227a:	673b      	str	r3, [r7, #112]	; 0x70
 800227c:	e033      	b.n	80022e6 <getADCValues+0x1c2>
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 800227e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002280:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002288:	4413      	add	r3, r2
 800228a:	657b      	str	r3, [r7, #84]	; 0x54
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 800228c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002294:	4413      	add	r3, r2
 8002296:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800229a:	4944      	ldr	r1, [pc, #272]	; (80023ac <getADCValues+0x288>)
 800229c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800229e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80022a2:	441a      	add	r2, r3
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80022ac:	440b      	add	r3, r1
 80022ae:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80022b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b4:	2b13      	cmp	r3, #19
 80022b6:	d113      	bne.n	80022e0 <getADCValues+0x1bc>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80022b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80022c0:	4413      	add	r3, r2
 80022c2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80022c6:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <getADCValues+0x28c>)
 80022c8:	fb82 1203 	smull	r1, r2, r2, r3
 80022cc:	10d2      	asrs	r2, r2, #3
 80022ce:	17db      	asrs	r3, r3, #31
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80022da:	440b      	add	r3, r1
 80022dc:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80022e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e2:	3301      	adds	r3, #1
 80022e4:	673b      	str	r3, [r7, #112]	; 0x70
 80022e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e8:	2b13      	cmp	r3, #19
 80022ea:	ddc8      	ble.n	800227e <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 80022ec:	e09b      	b.n	8002426 <getADCValues+0x302>
				}
			}
		}
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 80022ee:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <getADCValues+0x284>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d018      	beq.n	800232a <getADCValues+0x206>
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <getADCValues+0x284>)
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022fe:	429a      	cmp	r2, r3
 8002300:	d013      	beq.n	800232a <getADCValues+0x206>
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <getADCValues+0x284>)
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002308:	429a      	cmp	r2, r3
 800230a:	d00e      	beq.n	800232a <getADCValues+0x206>
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <getADCValues+0x284>)
 800230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002310:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002312:	429a      	cmp	r2, r3
 8002314:	d009      	beq.n	800232a <getADCValues+0x206>
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <getADCValues+0x284>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800231c:	429a      	cmp	r2, r3
 800231e:	d004      	beq.n	800232a <getADCValues+0x206>
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <getADCValues+0x284>)
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002326:	429a      	cmp	r2, r3
 8002328:	d13a      	bne.n	80023a0 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800232a:	2300      	movs	r3, #0
 800232c:	673b      	str	r3, [r7, #112]	; 0x70
 800232e:	e033      	b.n	8002398 <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8002330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002332:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800233a:	4413      	add	r3, r2
 800233c:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 800233e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002346:	4413      	add	r3, r2
 8002348:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800234c:	4919      	ldr	r1, [pc, #100]	; (80023b4 <getADCValues+0x290>)
 800234e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002350:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002354:	441a      	add	r2, r3
 8002356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800235e:	440b      	add	r3, r1
 8002360:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8002364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002366:	2b13      	cmp	r3, #19
 8002368:	d113      	bne.n	8002392 <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 800236a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002372:	4413      	add	r3, r2
 8002374:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002378:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <getADCValues+0x28c>)
 800237a:	fb82 1203 	smull	r1, r2, r2, r3
 800237e:	10d2      	asrs	r2, r2, #3
 8002380:	17db      	asrs	r3, r3, #31
 8002382:	1ad2      	subs	r2, r2, r3
 8002384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800238c:	440b      	add	r3, r1
 800238e:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8002392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002394:	3301      	adds	r3, #1
 8002396:	673b      	str	r3, [r7, #112]	; 0x70
 8002398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239a:	2b13      	cmp	r3, #19
 800239c:	ddc8      	ble.n	8002330 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 800239e:	e042      	b.n	8002426 <getADCValues+0x302>
				}
			}
		}
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	673b      	str	r3, [r7, #112]	; 0x70
 80023a4:	e03c      	b.n	8002420 <getADCValues+0x2fc>
 80023a6:	bf00      	nop
 80023a8:	20000048 	.word	0x20000048
 80023ac:	2001e8f4 	.word	0x2001e8f4
 80023b0:	66666667 	.word	0x66666667
 80023b4:	200103fc 	.word	0x200103fc
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 80023b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023c2:	4413      	add	r3, r2
 80023c4:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 80023c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80023ce:	4413      	add	r3, r2
 80023d0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80023d4:	49c9      	ldr	r1, [pc, #804]	; (80026fc <getADCValues+0x5d8>)
 80023d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80023dc:	441a      	add	r2, r3
 80023de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80023e6:	440b      	add	r3, r1
 80023e8:	f843 2c74 	str.w	r2, [r3, #-116]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 80023ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ee:	2b13      	cmp	r3, #19
 80023f0:	d113      	bne.n	800241a <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 80023f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80023fa:	4413      	add	r3, r2
 80023fc:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002400:	4abf      	ldr	r2, [pc, #764]	; (8002700 <getADCValues+0x5dc>)
 8002402:	fb82 1203 	smull	r1, r2, r2, r3
 8002406:	10d2      	asrs	r2, r2, #3
 8002408:	17db      	asrs	r3, r3, #31
 800240a:	1ad2      	subs	r2, r2, r3
 800240c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002414:	440b      	add	r3, r1
 8002416:	f843 2c74 	str.w	r2, [r3, #-116]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 800241a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241c:	3301      	adds	r3, #1
 800241e:	673b      	str	r3, [r7, #112]	; 0x70
 8002420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002422:	2b13      	cmp	r3, #19
 8002424:	ddc8      	ble.n	80023b8 <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<20;adcChannelCounter++){
 8002426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002428:	3301      	adds	r3, #1
 800242a:	677b      	str	r3, [r7, #116]	; 0x74
 800242c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242e:	2b13      	cmp	r3, #19
 8002430:	f77f ae8a 	ble.w	8002148 <getADCValues+0x24>
				}
			}
		}
	}
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002434:	4bb3      	ldr	r3, [pc, #716]	; (8002704 <getADCValues+0x5e0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800243e:	4413      	add	r3, r2
 8002440:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800244c:	4bad      	ldr	r3, [pc, #692]	; (8002704 <getADCValues+0x5e0>)
 800244e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002456:	4bab      	ldr	r3, [pc, #684]	; (8002704 <getADCValues+0x5e0>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002462:	4ba8      	ldr	r3, [pc, #672]	; (8002704 <getADCValues+0x5e0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	4aa7      	ldr	r2, [pc, #668]	; (8002708 <getADCValues+0x5e4>)
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002474:	4ba3      	ldr	r3, [pc, #652]	; (8002704 <getADCValues+0x5e0>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800247e:	4413      	add	r3, r2
 8002480:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800248c:	4b9d      	ldr	r3, [pc, #628]	; (8002704 <getADCValues+0x5e0>)
 800248e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002496:	4b9b      	ldr	r3, [pc, #620]	; (8002704 <getADCValues+0x5e0>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a2:	4b98      	ldr	r3, [pc, #608]	; (8002704 <getADCValues+0x5e0>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	4a97      	ldr	r2, [pc, #604]	; (8002708 <getADCValues+0x5e4>)
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80024b4:	4b93      	ldr	r3, [pc, #588]	; (8002704 <getADCValues+0x5e0>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80024be:	4413      	add	r3, r2
 80024c0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b8d      	ldr	r3, [pc, #564]	; (8002704 <getADCValues+0x5e0>)
 80024ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80024d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d6:	4b8b      	ldr	r3, [pc, #556]	; (8002704 <getADCValues+0x5e0>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e2:	4b88      	ldr	r3, [pc, #544]	; (8002704 <getADCValues+0x5e0>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	4a87      	ldr	r2, [pc, #540]	; (8002708 <getADCValues+0x5e4>)
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80024f4:	4b83      	ldr	r3, [pc, #524]	; (8002704 <getADCValues+0x5e0>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80024fe:	4413      	add	r3, r2
 8002500:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250c:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <getADCValues+0x5e0>)
 800250e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002516:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <getADCValues+0x5e0>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002522:	4b78      	ldr	r3, [pc, #480]	; (8002704 <getADCValues+0x5e0>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	4a77      	ldr	r2, [pc, #476]	; (8002708 <getADCValues+0x5e4>)
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002534:	4b73      	ldr	r3, [pc, #460]	; (8002704 <getADCValues+0x5e0>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800253e:	4413      	add	r3, r2
 8002540:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002544:	ee07 3a90 	vmov	s15, r3
 8002548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254c:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <getADCValues+0x5e0>)
 800254e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002556:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <getADCValues+0x5e0>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	4b68      	ldr	r3, [pc, #416]	; (8002704 <getADCValues+0x5e0>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256a:	4a67      	ldr	r2, [pc, #412]	; (8002708 <getADCValues+0x5e4>)
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002574:	4b63      	ldr	r3, [pc, #396]	; (8002704 <getADCValues+0x5e0>)
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800257e:	4413      	add	r3, r2
 8002580:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258c:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <getADCValues+0x5e0>)
 800258e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <getADCValues+0x5e0>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a2:	4b58      	ldr	r3, [pc, #352]	; (8002704 <getADCValues+0x5e0>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025aa:	4a57      	ldr	r2, [pc, #348]	; (8002708 <getADCValues+0x5e4>)
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <getADCValues+0x5e0>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80025be:	4413      	add	r3, r2
 80025c0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025cc:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <getADCValues+0x5e0>)
 80025ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80025d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d6:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <getADCValues+0x5e0>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <getADCValues+0x5e0>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	4a47      	ldr	r2, [pc, #284]	; (8002708 <getADCValues+0x5e4>)
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80025f4:	4b43      	ldr	r3, [pc, #268]	; (8002704 <getADCValues+0x5e0>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80025fe:	4413      	add	r3, r2
 8002600:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800260c:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <getADCValues+0x5e0>)
 800260e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <getADCValues+0x5e0>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <getADCValues+0x5e0>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	4a37      	ldr	r2, [pc, #220]	; (8002708 <getADCValues+0x5e4>)
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002634:	4b33      	ldr	r3, [pc, #204]	; (8002704 <getADCValues+0x5e0>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800263e:	4413      	add	r3, r2
 8002640:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <getADCValues+0x5e0>)
 800264e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <getADCValues+0x5e0>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002662:	4b28      	ldr	r3, [pc, #160]	; (8002704 <getADCValues+0x5e0>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	4a27      	ldr	r2, [pc, #156]	; (8002708 <getADCValues+0x5e4>)
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <getADCValues+0x5e0>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800267e:	4413      	add	r3, r2
 8002680:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <getADCValues+0x5e0>)
 800268e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <getADCValues+0x5e0>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <getADCValues+0x5e0>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <getADCValues+0x5e4>)
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <getADCValues+0x5e0>)
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80026be:	4413      	add	r3, r2
 80026c0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <getADCValues+0x5e0>)
 80026ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80026d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <getADCValues+0x5e0>)
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <getADCValues+0x5e0>)
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <getADCValues+0x5e4>)
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <getADCValues+0x5e0>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	e007      	b.n	800270c <getADCValues+0x5e8>
 80026fc:	2000db48 	.word	0x2000db48
 8002700:	66666667 	.word	0x66666667
 8002704:	20000048 	.word	0x20000048
 8002708:	200002d8 	.word	0x200002d8
 800270c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002710:	4413      	add	r3, r2
 8002712:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271e:	4b9c      	ldr	r3, [pc, #624]	; (8002990 <getADCValues+0x86c>)
 8002720:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002728:	4b99      	ldr	r3, [pc, #612]	; (8002990 <getADCValues+0x86c>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002734:	4b96      	ldr	r3, [pc, #600]	; (8002990 <getADCValues+0x86c>)
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	4a95      	ldr	r2, [pc, #596]	; (8002994 <getADCValues+0x870>)
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002746:	4b92      	ldr	r3, [pc, #584]	; (8002990 <getADCValues+0x86c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002750:	4413      	add	r3, r2
 8002752:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275e:	4b8c      	ldr	r3, [pc, #560]	; (8002990 <getADCValues+0x86c>)
 8002760:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002768:	4b89      	ldr	r3, [pc, #548]	; (8002990 <getADCValues+0x86c>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002774:	4b86      	ldr	r3, [pc, #536]	; (8002990 <getADCValues+0x86c>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	4a85      	ldr	r2, [pc, #532]	; (8002994 <getADCValues+0x870>)
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002786:	4b82      	ldr	r3, [pc, #520]	; (8002990 <getADCValues+0x86c>)
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002790:	4413      	add	r3, r2
 8002792:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279e:	4b7c      	ldr	r3, [pc, #496]	; (8002990 <getADCValues+0x86c>)
 80027a0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b79      	ldr	r3, [pc, #484]	; (8002990 <getADCValues+0x86c>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b4:	4b76      	ldr	r3, [pc, #472]	; (8002990 <getADCValues+0x86c>)
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027bc:	4a75      	ldr	r2, [pc, #468]	; (8002994 <getADCValues+0x870>)
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <getADCValues+0x86c>)
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80027d0:	4413      	add	r3, r2
 80027d2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027de:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <getADCValues+0x86c>)
 80027e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80027e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e8:	4b69      	ldr	r3, [pc, #420]	; (8002990 <getADCValues+0x86c>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f4:	4b66      	ldr	r3, [pc, #408]	; (8002990 <getADCValues+0x86c>)
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	4a65      	ldr	r2, [pc, #404]	; (8002994 <getADCValues+0x870>)
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8002806:	4b62      	ldr	r3, [pc, #392]	; (8002990 <getADCValues+0x86c>)
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002810:	4413      	add	r3, r2
 8002812:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281e:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <getADCValues+0x86c>)
 8002820:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <getADCValues+0x86c>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002834:	4b56      	ldr	r3, [pc, #344]	; (8002990 <getADCValues+0x86c>)
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	4a55      	ldr	r2, [pc, #340]	; (8002994 <getADCValues+0x870>)
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002846:	4b52      	ldr	r3, [pc, #328]	; (8002990 <getADCValues+0x86c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002850:	4413      	add	r3, r2
 8002852:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800285e:	4b4c      	ldr	r3, [pc, #304]	; (8002990 <getADCValues+0x86c>)
 8002860:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002868:	4b49      	ldr	r3, [pc, #292]	; (8002990 <getADCValues+0x86c>)
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <getADCValues+0x86c>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <getADCValues+0x870>)
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002886:	4b42      	ldr	r3, [pc, #264]	; (8002990 <getADCValues+0x86c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002890:	4413      	add	r3, r2
 8002892:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800289e:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <getADCValues+0x86c>)
 80028a0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80028a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <getADCValues+0x86c>)
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <getADCValues+0x86c>)
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <getADCValues+0x870>)
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80028c6:	4b32      	ldr	r3, [pc, #200]	; (8002990 <getADCValues+0x86c>)
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80028d0:	4413      	add	r3, r2
 80028d2:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <getADCValues+0x86c>)
 80028e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80028e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e8:	4b29      	ldr	r3, [pc, #164]	; (8002990 <getADCValues+0x86c>)
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f4:	4b26      	ldr	r3, [pc, #152]	; (8002990 <getADCValues+0x86c>)
 80028f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <getADCValues+0x870>)
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <getADCValues+0x86c>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002910:	4413      	add	r3, r2
 8002912:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <getADCValues+0x86c>)
 8002920:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <getADCValues+0x86c>)
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <getADCValues+0x86c>)
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <getADCValues+0x870>)
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <getADCValues+0x86c>)
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002950:	4413      	add	r3, r2
 8002952:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <getADCValues+0x86c>)
 8002960:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <getADCValues+0x86c>)
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <getADCValues+0x86c>)
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297c:	4a05      	ldr	r2, [pc, #20]	; (8002994 <getADCValues+0x870>)
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 8002986:	4b03      	ldr	r3, [pc, #12]	; (8002994 <getADCValues+0x870>)
}
 8002988:	4618      	mov	r0, r3
 800298a:	3778      	adds	r7, #120	; 0x78
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000048 	.word	0x20000048
 8002994:	200002d8 	.word	0x200002d8

08002998 <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 80029b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b8:	4803      	ldr	r0, [pc, #12]	; (80029c8 <startHeartbeat+0x1c>)
 80029ba:	f002 fd5c 	bl	8005476 <HAL_GPIO_TogglePin>
	  osDelay(500);
 80029be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029c2:	f007 fa31 	bl	8009e28 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 80029c6:	e7f5      	b.n	80029b4 <startHeartbeat+0x8>
 80029c8:	40022000 	.word	0x40022000

080029cc <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  /* Infinite loop */
  for(;;)
  {
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 80029d4:	2203      	movs	r2, #3
 80029d6:	2100      	movs	r1, #0
 80029d8:	4815      	ldr	r0, [pc, #84]	; (8002a30 <startADCRead+0x64>)
 80029da:	f009 fecc 	bl	800c776 <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 80029de:	f242 7210 	movw	r2, #10000	; 0x2710
 80029e2:	2100      	movs	r1, #0
 80029e4:	4813      	ldr	r0, [pc, #76]	; (8002a34 <startADCRead+0x68>)
 80029e6:	f009 fec6 	bl	800c776 <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80029ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80029ee:	2100      	movs	r1, #0
 80029f0:	4811      	ldr	r0, [pc, #68]	; (8002a38 <startADCRead+0x6c>)
 80029f2:	f009 fec0 	bl	800c776 <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80029f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80029fa:	2100      	movs	r1, #0
 80029fc:	480f      	ldr	r0, [pc, #60]	; (8002a3c <startADCRead+0x70>)
 80029fe:	f009 feba 	bl	800c776 <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	490b      	ldr	r1, [pc, #44]	; (8002a34 <startADCRead+0x68>)
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <startADCRead+0x74>)
 8002a0a:	f001 fa49 	bl	8003ea0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4909      	ldr	r1, [pc, #36]	; (8002a38 <startADCRead+0x6c>)
 8002a14:	480b      	ldr	r0, [pc, #44]	; (8002a44 <startADCRead+0x78>)
 8002a16:	f001 fa43 	bl	8003ea0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4907      	ldr	r1, [pc, #28]	; (8002a3c <startADCRead+0x70>)
 8002a20:	4809      	ldr	r0, [pc, #36]	; (8002a48 <startADCRead+0x7c>)
 8002a22:	f001 fa3d 	bl	8003ea0 <HAL_ADC_Start_DMA>
    osDelay(1000);
 8002a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a2a:	f007 f9fd 	bl	8009e28 <osDelay>
  {
 8002a2e:	e7d1      	b.n	80029d4 <startADCRead+0x8>
 8002a30:	2000db04 	.word	0x2000db04
 8002a34:	2000db48 	.word	0x2000db48
 8002a38:	2001e8f4 	.word	0x2001e8f4
 8002a3c:	200103fc 	.word	0x200103fc
 8002a40:	200102d8 	.word	0x200102d8
 8002a44:	2000d5c0 	.word	0x2000d5c0
 8002a48:	20010324 	.word	0x20010324

08002a4c <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	 static uint8_t LCD_Blink_White2 = 0b00000000;
	 static uint8_t LCD_Blink_Black1 = 0b00010000;
	 static uint8_t LCD_Blink_Black2 = 0b00000000;
	 //static uint16_t LCD_Blink_White = 0b0001100000000000;
	 //static uint16_t LCD_Blink_Black = 0b0001000000000000;
	 int x = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
	 float *adcValues;
  for(;;)
  {
	  	  if(inputButtonSet<5){
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <GetDaScreenBlink+0x70>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d802      	bhi.n	8002a66 <GetDaScreenBlink+0x1a>
	  		  inputButtonSet=5;
 8002a60:	4b16      	ldr	r3, [pc, #88]	; (8002abc <GetDaScreenBlink+0x70>)
 8002a62:	2205      	movs	r2, #5
 8002a64:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <GetDaScreenBlink+0x74>)
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <GetDaScreenBlink+0x74>)
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <GetDaScreenBlink+0x74>)
 8002a74:	789b      	ldrb	r3, [r3, #2]
 8002a76:	4013      	ands	r3, r2
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <GetDaScreenBlink+0x3e>
	  		  adcValues = getADCValues();
 8002a7e:	f7ff fb51 	bl	8002124 <getADCValues>
 8002a82:	6138      	str	r0, [r7, #16]
	  		  float *adcValues1 = adcValues+1;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	3304      	adds	r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
	  		 // uartTransmitFloat(adcValues,7);
	  	  }
	 	  if (!x) {
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <GetDaScreenBlink+0x52>
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
	 		  x=1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]

	 		  uartTransmitChar("hello\r\n",7);
 8002a94:	2107      	movs	r1, #7
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <GetDaScreenBlink+0x78>)
 8002a98:	f7ff f81e 	bl	8001ad8 <uartTransmitChar>
 8002a9c:	e005      	b.n	8002aaa <GetDaScreenBlink+0x5e>
	 		  //HAL_SPI_Transmit(&hspi4, (uint8_t *)&LCD_Blink_White2, 1, 100);
	 		  //HAL_GPIO_TogglePin(LCD_SS_GPIO_Port,LCD_SS_Pin);
	 	  }
	 	  else{
	 		  //HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
	 		  x=0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
	 		  uartTransmitChar("here\r\n",7);
 8002aa2:	2107      	movs	r1, #7
 8002aa4:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <GetDaScreenBlink+0x7c>)
 8002aa6:	f7ff f817 	bl	8001ad8 <uartTransmitChar>
	 		  //HAL_SPI_Transmit(&hspi4, (uint8_t *)&LCD_Blink_Black1, 1, 100);
	 		 //HAL_SPI_Transmit(&hspi4, (uint8_t *)&LCD_Blink_Black2, 1, 100);
	 		  //HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
	 	  }
	 	  //LCD_BlackWhite(x);
	 	  SMLCD_Clear();
 8002aaa:	f7fd fde1 	bl	8000670 <SMLCD_Clear>
	 	  LCD_DrawSomeLinesSingleLine();
 8002aae:	f7fd fe27 	bl	8000700 <LCD_DrawSomeLinesSingleLine>
	 	  osDelay(400);
 8002ab2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ab6:	f007 f9b7 	bl	8009e28 <osDelay>
	  	  if(inputButtonSet<5){
 8002aba:	e7cd      	b.n	8002a58 <GetDaScreenBlink+0xc>
 8002abc:	20000006 	.word	0x20000006
 8002ac0:	2000db04 	.word	0x2000db04
 8002ac4:	080100ac 	.word	0x080100ac
 8002ac8:	080100b4 	.word	0x080100b4

08002acc <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8002ad4:	4b42      	ldr	r3, [pc, #264]	; (8002be0 <startGpioInputRead+0x114>)
 8002ad6:	681c      	ldr	r4, [r3, #0]
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	4842      	ldr	r0, [pc, #264]	; (8002be4 <startGpioInputRead+0x118>)
 8002adc:	f002 fc9a 	bl	8005414 <HAL_GPIO_ReadPin>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b40      	ldr	r3, [pc, #256]	; (8002be8 <startGpioInputRead+0x11c>)
 8002ae6:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8002ae8:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <startGpioInputRead+0x114>)
 8002aea:	685c      	ldr	r4, [r3, #4]
 8002aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af0:	483e      	ldr	r0, [pc, #248]	; (8002bec <startGpioInputRead+0x120>)
 8002af2:	f002 fc8f 	bl	8005414 <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <startGpioInputRead+0x11c>)
 8002afc:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <startGpioInputRead+0x114>)
 8002b00:	689c      	ldr	r4, [r3, #8]
 8002b02:	2110      	movs	r1, #16
 8002b04:	483a      	ldr	r0, [pc, #232]	; (8002bf0 <startGpioInputRead+0x124>)
 8002b06:	f002 fc85 	bl	8005414 <HAL_GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b36      	ldr	r3, [pc, #216]	; (8002be8 <startGpioInputRead+0x11c>)
 8002b10:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <startGpioInputRead+0x114>)
 8002b14:	68dc      	ldr	r4, [r3, #12]
 8002b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b1a:	4835      	ldr	r0, [pc, #212]	; (8002bf0 <startGpioInputRead+0x124>)
 8002b1c:	f002 fc7a 	bl	8005414 <HAL_GPIO_ReadPin>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <startGpioInputRead+0x11c>)
 8002b26:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <startGpioInputRead+0x114>)
 8002b2a:	691c      	ldr	r4, [r3, #16]
 8002b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b30:	482f      	ldr	r0, [pc, #188]	; (8002bf0 <startGpioInputRead+0x124>)
 8002b32:	f002 fc6f 	bl	8005414 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <startGpioInputRead+0x11c>)
 8002b3c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 8002b3e:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <startGpioInputRead+0x114>)
 8002b40:	695c      	ldr	r4, [r3, #20]
 8002b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b46:	482a      	ldr	r0, [pc, #168]	; (8002bf0 <startGpioInputRead+0x124>)
 8002b48:	f002 fc64 	bl	8005414 <HAL_GPIO_ReadPin>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <startGpioInputRead+0x11c>)
 8002b52:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <startGpioInputRead+0x114>)
 8002b56:	699c      	ldr	r4, [r3, #24]
 8002b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b5c:	4824      	ldr	r0, [pc, #144]	; (8002bf0 <startGpioInputRead+0x124>)
 8002b5e:	f002 fc59 	bl	8005414 <HAL_GPIO_ReadPin>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <startGpioInputRead+0x11c>)
 8002b68:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <startGpioInputRead+0x114>)
 8002b6c:	69dc      	ldr	r4, [r3, #28]
 8002b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b72:	481f      	ldr	r0, [pc, #124]	; (8002bf0 <startGpioInputRead+0x124>)
 8002b74:	f002 fc4e 	bl	8005414 <HAL_GPIO_ReadPin>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <startGpioInputRead+0x11c>)
 8002b7e:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <startGpioInputRead+0x114>)
 8002b82:	6a1c      	ldr	r4, [r3, #32]
 8002b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b88:	4819      	ldr	r0, [pc, #100]	; (8002bf0 <startGpioInputRead+0x124>)
 8002b8a:	f002 fc43 	bl	8005414 <HAL_GPIO_ReadPin>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <startGpioInputRead+0x11c>)
 8002b94:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <startGpioInputRead+0x114>)
 8002b98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b9e:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <startGpioInputRead+0x124>)
 8002ba0:	f002 fc38 	bl	8005414 <HAL_GPIO_ReadPin>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <startGpioInputRead+0x11c>)
 8002baa:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <startGpioInputRead+0x114>)
 8002bae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb4:	480e      	ldr	r0, [pc, #56]	; (8002bf0 <startGpioInputRead+0x124>)
 8002bb6:	f002 fc2d 	bl	8005414 <HAL_GPIO_ReadPin>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <startGpioInputRead+0x11c>)
 8002bc0:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <startGpioInputRead+0x114>)
 8002bc4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002bc6:	2108      	movs	r1, #8
 8002bc8:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <startGpioInputRead+0x128>)
 8002bca:	f002 fc23 	bl	8005414 <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <startGpioInputRead+0x11c>)
 8002bd4:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8002bd6:	f240 30b6 	movw	r0, #950	; 0x3b6
 8002bda:	f007 f925 	bl	8009e28 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8002bde:	e779      	b.n	8002ad4 <startGpioInputRead+0x8>
 8002be0:	20000018 	.word	0x20000018
 8002be4:	40020400 	.word	0x40020400
 8002be8:	2000d5b4 	.word	0x2000d5b4
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c0a:	f000 ff81 	bl	8003b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40001000 	.word	0x40001000

08002c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <Error_Handler+0x6>

08002c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	210f      	movs	r1, #15
 8002c5e:	f06f 0001 	mvn.w	r0, #1
 8002c62:	f001 fdfb 	bl	800485c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b094      	sub	sp, #80	; 0x50
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a91      	ldr	r2, [pc, #580]	; (8002ed8 <HAL_ADC_MspInit+0x264>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	f040 808c 	bne.w	8002db0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c98:	4b90      	ldr	r3, [pc, #576]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	4a8f      	ldr	r2, [pc, #572]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca4:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb0:	4b8a      	ldr	r3, [pc, #552]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a89      	ldr	r2, [pc, #548]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b87      	ldr	r3, [pc, #540]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc8:	4b84      	ldr	r3, [pc, #528]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a83      	ldr	r2, [pc, #524]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b81      	ldr	r3, [pc, #516]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	4a7d      	ldr	r2, [pc, #500]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	6313      	str	r3, [r2, #48]	; 0x30
 8002cec:	4b7b      	ldr	r3, [pc, #492]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4875      	ldr	r0, [pc, #468]	; (8002ee0 <HAL_ADC_MspInit+0x26c>)
 8002d0c:	f002 f9d8 	bl	80050c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8002d10:	23f8      	movs	r3, #248	; 0xf8
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d14:	2303      	movs	r3, #3
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d20:	4619      	mov	r1, r3
 8002d22:	4870      	ldr	r0, [pc, #448]	; (8002ee4 <HAL_ADC_MspInit+0x270>)
 8002d24:	f002 f9cc 	bl	80050c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	486b      	ldr	r0, [pc, #428]	; (8002ee8 <HAL_ADC_MspInit+0x274>)
 8002d3c:	f002 f9c0 	bl	80050c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d42:	4a6b      	ldr	r2, [pc, #428]	; (8002ef0 <HAL_ADC_MspInit+0x27c>)
 8002d44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d46:	4b69      	ldr	r3, [pc, #420]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d4c:	4b67      	ldr	r3, [pc, #412]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d52:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d58:	4b64      	ldr	r3, [pc, #400]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d68:	4b60      	ldr	r3, [pc, #384]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d70:	4b5e      	ldr	r3, [pc, #376]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d7c:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d82:	485a      	ldr	r0, [pc, #360]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d84:	f001 fd94 	bl	80048b0 <HAL_DMA_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 8002d8e:	f7ff ff45 	bl	8002c1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a55      	ldr	r2, [pc, #340]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_ADC_MspInit+0x278>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2105      	movs	r1, #5
 8002da2:	2012      	movs	r0, #18
 8002da4:	f001 fd5a 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002da8:	2012      	movs	r0, #18
 8002daa:	f001 fd73 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002dae:	e13a      	b.n	8003026 <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a4f      	ldr	r2, [pc, #316]	; (8002ef4 <HAL_ADC_MspInit+0x280>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	f040 80a2 	bne.w	8002f00 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002dbc:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	4a46      	ldr	r2, [pc, #280]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc8:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd4:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	4a40      	ldr	r2, [pc, #256]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6313      	str	r3, [r2, #48]	; 0x30
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dec:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4a3a      	ldr	r2, [pc, #232]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6313      	str	r3, [r2, #48]	; 0x30
 8002df8:	4b38      	ldr	r3, [pc, #224]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e04:	4b35      	ldr	r3, [pc, #212]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a34      	ldr	r2, [pc, #208]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_ADC_MspInit+0x268>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8002e1c:	233f      	movs	r3, #63	; 0x3f
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e20:	2303      	movs	r3, #3
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	482c      	ldr	r0, [pc, #176]	; (8002ee0 <HAL_ADC_MspInit+0x26c>)
 8002e30:	f002 f946 	bl	80050c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 8002e34:	237b      	movs	r3, #123	; 0x7b
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e44:	4619      	mov	r1, r3
 8002e46:	4827      	ldr	r0, [pc, #156]	; (8002ee4 <HAL_ADC_MspInit+0x270>)
 8002e48:	f002 f93a 	bl	80050c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e50:	2303      	movs	r3, #3
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4822      	ldr	r0, [pc, #136]	; (8002ee8 <HAL_ADC_MspInit+0x274>)
 8002e60:	f002 f92e 	bl	80050c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002e64:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e66:	4a25      	ldr	r2, [pc, #148]	; (8002efc <HAL_ADC_MspInit+0x288>)
 8002e68:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e70:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e72:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e78:	4b1f      	ldr	r3, [pc, #124]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e84:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e8c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e94:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002e96:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002ea8:	4813      	ldr	r0, [pc, #76]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002eaa:	f001 fd01 	bl	80048b0 <HAL_DMA_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 8002eb4:	f7ff feb2 	bl	8002c1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <HAL_ADC_MspInit+0x284>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2105      	movs	r1, #5
 8002ec8:	2012      	movs	r0, #18
 8002eca:	f001 fcc7 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ece:	2012      	movs	r0, #18
 8002ed0:	f001 fce0 	bl	8004894 <HAL_NVIC_EnableIRQ>
}
 8002ed4:	e0a7      	b.n	8003026 <HAL_ADC_MspInit+0x3b2>
 8002ed6:	bf00      	nop
 8002ed8:	40012000 	.word	0x40012000
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	2001036c 	.word	0x2001036c
 8002ef0:	40026410 	.word	0x40026410
 8002ef4:	40012100 	.word	0x40012100
 8002ef8:	20021004 	.word	0x20021004
 8002efc:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	; (8003030 <HAL_ADC_MspInit+0x3bc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f040 808d 	bne.w	8003026 <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f0c:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	4a48      	ldr	r2, [pc, #288]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f16:	6453      	str	r3, [r2, #68]	; 0x44
 8002f18:	4b46      	ldr	r3, [pc, #280]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f24:	4b43      	ldr	r3, [pc, #268]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	4a42      	ldr	r2, [pc, #264]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f2a:	f043 0320 	orr.w	r3, r3, #32
 8002f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f30:	4b40      	ldr	r3, [pc, #256]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3c:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6313      	str	r3, [r2, #48]	; 0x30
 8002f48:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f54:	4b37      	ldr	r3, [pc, #220]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	4a36      	ldr	r2, [pc, #216]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f60:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_ADC_MspInit+0x3c0>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8002f6c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f72:	2303      	movs	r3, #3
 8002f74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f7e:	4619      	mov	r1, r3
 8002f80:	482d      	ldr	r0, [pc, #180]	; (8003038 <HAL_ADC_MspInit+0x3c4>)
 8002f82:	f002 f89d 	bl	80050c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8002f86:	230f      	movs	r3, #15
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f96:	4619      	mov	r1, r3
 8002f98:	4828      	ldr	r0, [pc, #160]	; (800303c <HAL_ADC_MspInit+0x3c8>)
 8002f9a:	f002 f891 	bl	80050c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4823      	ldr	r0, [pc, #140]	; (8003040 <HAL_ADC_MspInit+0x3cc>)
 8002fb2:	f002 f885 	bl	80050c0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002fb6:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fb8:	4a23      	ldr	r2, [pc, #140]	; (8003048 <HAL_ADC_MspInit+0x3d4>)
 8002fba:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fc2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fde:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fe6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ffa:	4812      	ldr	r0, [pc, #72]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8002ffc:	f001 fc58 	bl	80048b0 <HAL_DMA_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_ADC_MspInit+0x396>
      Error_Handler();
 8003006:	f7ff fe09 	bl	8002c1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 800300e:	639a      	str	r2, [r3, #56]	; 0x38
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <HAL_ADC_MspInit+0x3d0>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2105      	movs	r1, #5
 800301a:	2012      	movs	r0, #18
 800301c:	f001 fc1e 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003020:	2012      	movs	r0, #18
 8003022:	f001 fc37 	bl	8004894 <HAL_NVIC_EnableIRQ>
}
 8003026:	bf00      	nop
 8003028:	3750      	adds	r7, #80	; 0x50
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40012200 	.word	0x40012200
 8003034:	40023800 	.word	0x40023800
 8003038:	40021400 	.word	0x40021400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020000 	.word	0x40020000
 8003044:	2000daa4 	.word	0x2000daa4
 8003048:	40026428 	.word	0x40026428

0800304c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b090      	sub	sp, #64	; 0x40
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a6c      	ldr	r2, [pc, #432]	; (800321c <HAL_I2C_MspInit+0x1d0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d129      	bne.n	80030c2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306e:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	4a6b      	ldr	r2, [pc, #428]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6313      	str	r3, [r2, #48]	; 0x30
 800307a:	4b69      	ldr	r3, [pc, #420]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 8003086:	f44f 7340 	mov.w	r3, #768	; 0x300
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800308c:	2312      	movs	r3, #18
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003090:	2301      	movs	r3, #1
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003094:	2303      	movs	r3, #3
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003098:	2304      	movs	r3, #4
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030a0:	4619      	mov	r1, r3
 80030a2:	4860      	ldr	r0, [pc, #384]	; (8003224 <HAL_I2C_MspInit+0x1d8>)
 80030a4:	f002 f80c 	bl	80050c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030a8:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a5c      	ldr	r2, [pc, #368]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80030ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
 80030b4:	4b5a      	ldr	r3, [pc, #360]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80030c0:	e0a7      	b.n	8003212 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_I2C_MspInit+0x1dc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d128      	bne.n	800311e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030cc:	4b54      	ldr	r3, [pc, #336]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	4a53      	ldr	r2, [pc, #332]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80030d2:	f043 0320 	orr.w	r3, r3, #32
 80030d6:	6313      	str	r3, [r2, #48]	; 0x30
 80030d8:	4b51      	ldr	r3, [pc, #324]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	623b      	str	r3, [r7, #32]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 80030e4:	2303      	movs	r3, #3
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e8:	2312      	movs	r3, #18
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030ec:	2301      	movs	r3, #1
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030f4:	2304      	movs	r3, #4
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030fc:	4619      	mov	r1, r3
 80030fe:	484b      	ldr	r0, [pc, #300]	; (800322c <HAL_I2C_MspInit+0x1e0>)
 8003100:	f001 ffde 	bl	80050c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003104:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	4a45      	ldr	r2, [pc, #276]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 800310a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800310e:	6413      	str	r3, [r2, #64]	; 0x40
 8003110:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	69fb      	ldr	r3, [r7, #28]
}
 800311c:	e079      	b.n	8003212 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_I2C_MspInit+0x1e4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d146      	bne.n	80031b6 <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003128:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	4a3c      	ldr	r2, [pc, #240]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6313      	str	r3, [r2, #48]	; 0x30
 8003134:	4b3a      	ldr	r3, [pc, #232]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003140:	4b37      	ldr	r3, [pc, #220]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	4a36      	ldr	r2, [pc, #216]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6313      	str	r3, [r2, #48]	; 0x30
 800314c:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8003158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800315e:	2312      	movs	r3, #18
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003162:	2301      	movs	r3, #1
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003166:	2303      	movs	r3, #3
 8003168:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800316a:	2304      	movs	r3, #4
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 800316e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003172:	4619      	mov	r1, r3
 8003174:	482f      	ldr	r0, [pc, #188]	; (8003234 <HAL_I2C_MspInit+0x1e8>)
 8003176:	f001 ffa3 	bl	80050c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 800317a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003180:	2312      	movs	r3, #18
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003184:	2301      	movs	r3, #1
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003188:	2303      	movs	r3, #3
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800318c:	2304      	movs	r3, #4
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 8003190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003194:	4619      	mov	r1, r3
 8003196:	4828      	ldr	r0, [pc, #160]	; (8003238 <HAL_I2C_MspInit+0x1ec>)
 8003198:	f001 ff92 	bl	80050c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80031a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031a6:	6413      	str	r3, [r2, #64]	; 0x40
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]
}
 80031b4:	e02d      	b.n	8003212 <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a20      	ldr	r2, [pc, #128]	; (800323c <HAL_I2C_MspInit+0x1f0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d128      	bne.n	8003212 <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80031c6:	f043 0320 	orr.w	r3, r3, #32
 80031ca:	6313      	str	r3, [r2, #48]	; 0x30
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 80031d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031de:	2312      	movs	r3, #18
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e2:	2301      	movs	r3, #1
 80031e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e6:	2303      	movs	r3, #3
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80031ea:	2304      	movs	r3, #4
 80031ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f2:	4619      	mov	r1, r3
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <HAL_I2C_MspInit+0x1e0>)
 80031f6:	f001 ff63 	bl	80050c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_I2C_MspInit+0x1d4>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
}
 8003212:	bf00      	nop
 8003214:	3740      	adds	r7, #64	; 0x40
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40005400 	.word	0x40005400
 8003220:	40023800 	.word	0x40023800
 8003224:	40020400 	.word	0x40020400
 8003228:	40005800 	.word	0x40005800
 800322c:	40021400 	.word	0x40021400
 8003230:	40005c00 	.word	0x40005c00
 8003234:	40020800 	.word	0x40020800
 8003238:	40020000 	.word	0x40020000
 800323c:	40006000 	.word	0x40006000

08003240 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a07      	ldr	r2, [pc, #28]	; (800326c <HAL_RTC_MspInit+0x2c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d105      	bne.n	800325e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <HAL_RTC_MspInit+0x30>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	4a06      	ldr	r2, [pc, #24]	; (8003270 <HAL_RTC_MspInit+0x30>)
 8003258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40002800 	.word	0x40002800
 8003270:	40023800 	.word	0x40023800

08003274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08c      	sub	sp, #48	; 0x30
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 031c 	add.w	r3, r7, #28
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a40      	ldr	r2, [pc, #256]	; (8003394 <HAL_SPI_MspInit+0x120>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d130      	bne.n	80032f8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003296:	4b40      	ldr	r3, [pc, #256]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a3f      	ldr	r2, [pc, #252]	; (8003398 <HAL_SPI_MspInit+0x124>)
 800329c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_SPI_MspInit+0x124>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ae:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_SPI_MspInit+0x124>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a39      	ldr	r2, [pc, #228]	; (8003398 <HAL_SPI_MspInit+0x124>)
 80032b4:	f043 0310 	orr.w	r3, r3, #16
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_SPI_MspInit+0x124>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80032c6:	2364      	movs	r3, #100	; 0x64
 80032c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80032d6:	2305      	movs	r3, #5
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	4619      	mov	r1, r3
 80032e0:	482e      	ldr	r0, [pc, #184]	; (800339c <HAL_SPI_MspInit+0x128>)
 80032e2:	f001 feed 	bl	80050c0 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2105      	movs	r1, #5
 80032ea:	2054      	movs	r0, #84	; 0x54
 80032ec:	f001 fab6 	bl	800485c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80032f0:	2054      	movs	r0, #84	; 0x54
 80032f2:	f001 facf 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80032f6:	e049      	b.n	800338c <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a28      	ldr	r2, [pc, #160]	; (80033a0 <HAL_SPI_MspInit+0x12c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d144      	bne.n	800338c <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003302:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4a24      	ldr	r2, [pc, #144]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800330c:	6453      	str	r3, [r2, #68]	; 0x44
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <HAL_SPI_MspInit+0x124>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003338:	f043 0320 	orr.w	r3, r3, #32
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_SPI_MspInit+0x124>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 800334a:	23e0      	movs	r3, #224	; 0xe0
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800335a:	2305      	movs	r3, #5
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4619      	mov	r1, r3
 8003364:	480f      	ldr	r0, [pc, #60]	; (80033a4 <HAL_SPI_MspInit+0x130>)
 8003366:	f001 feab 	bl	80050c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 800336a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003378:	2303      	movs	r3, #3
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800337c:	2305      	movs	r3, #5
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8003380:	f107 031c 	add.w	r3, r7, #28
 8003384:	4619      	mov	r1, r3
 8003386:	4808      	ldr	r0, [pc, #32]	; (80033a8 <HAL_SPI_MspInit+0x134>)
 8003388:	f001 fe9a 	bl	80050c0 <HAL_GPIO_Init>
}
 800338c:	bf00      	nop
 800338e:	3730      	adds	r7, #48	; 0x30
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40013400 	.word	0x40013400
 8003398:	40023800 	.word	0x40023800
 800339c:	40021000 	.word	0x40021000
 80033a0:	40015000 	.word	0x40015000
 80033a4:	40021c00 	.word	0x40021c00
 80033a8:	40021400 	.word	0x40021400

080033ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a13      	ldr	r2, [pc, #76]	; (8003408 <HAL_TIM_Base_MspInit+0x5c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_TIM_Base_MspInit+0x60>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_TIM_Base_MspInit+0x60>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_TIM_Base_MspInit+0x60>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80033d6:	e010      	b.n	80033fa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <HAL_TIM_Base_MspInit+0x64>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10b      	bne.n	80033fa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_TIM_Base_MspInit+0x60>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <HAL_TIM_Base_MspInit+0x60>)
 80033e8:	f043 0308 	orr.w	r3, r3, #8
 80033ec:	6413      	str	r3, [r2, #64]	; 0x40
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_TIM_Base_MspInit+0x60>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40000800 	.word	0x40000800
 800340c:	40023800 	.word	0x40023800
 8003410:	40000c00 	.word	0x40000c00

08003414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_TIM_MspPostInit+0xa8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d11c      	bne.n	8003470 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <HAL_TIM_MspPostInit+0xac>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a21      	ldr	r2, [pc, #132]	; (80034c0 <HAL_TIM_MspPostInit+0xac>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <HAL_TIM_MspPostInit+0xac>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 800344e:	2340      	movs	r3, #64	; 0x40
 8003450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800345e:	2302      	movs	r3, #2
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	4816      	ldr	r0, [pc, #88]	; (80034c4 <HAL_TIM_MspPostInit+0xb0>)
 800346a:	f001 fe29 	bl	80050c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800346e:	e021      	b.n	80034b4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <HAL_TIM_MspPostInit+0xb4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d11c      	bne.n	80034b4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_TIM_MspPostInit+0xac>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_TIM_MspPostInit+0xac>)
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_TIM_MspPostInit+0xac>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8003492:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2300      	movs	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034a4:	2302      	movs	r3, #2
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4619      	mov	r1, r3
 80034ae:	4807      	ldr	r0, [pc, #28]	; (80034cc <HAL_TIM_MspPostInit+0xb8>)
 80034b0:	f001 fe06 	bl	80050c0 <HAL_GPIO_Init>
}
 80034b4:	bf00      	nop
 80034b6:	3728      	adds	r7, #40	; 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40020400 	.word	0x40020400
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40021c00 	.word	0x40021c00

080034d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a6c      	ldr	r2, [pc, #432]	; (80036a0 <HAL_UART_MspInit+0x1d0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d129      	bne.n	8003546 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034f2:	4b6c      	ldr	r3, [pc, #432]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a6b      	ldr	r2, [pc, #428]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 80034f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a65      	ldr	r2, [pc, #404]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8003522:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003530:	2303      	movs	r3, #3
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003534:	2308      	movs	r3, #8
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353c:	4619      	mov	r1, r3
 800353e:	485a      	ldr	r0, [pc, #360]	; (80036a8 <HAL_UART_MspInit+0x1d8>)
 8003540:	f001 fdbe 	bl	80050c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003544:	e0a7      	b.n	8003696 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART5)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_UART_MspInit+0x1dc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d174      	bne.n	800363a <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003550:	4b54      	ldr	r3, [pc, #336]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a53      	ldr	r2, [pc, #332]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b51      	ldr	r3, [pc, #324]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003568:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a4d      	ldr	r2, [pc, #308]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003580:	4b48      	ldr	r3, [pc, #288]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	4a47      	ldr	r2, [pc, #284]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003586:	f043 0308 	orr.w	r3, r3, #8
 800358a:	6313      	str	r3, [r2, #48]	; 0x30
 800358c:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8003598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a6:	2303      	movs	r3, #3
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035aa:	2308      	movs	r3, #8
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 80035ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b2:	4619      	mov	r1, r3
 80035b4:	483c      	ldr	r0, [pc, #240]	; (80036a8 <HAL_UART_MspInit+0x1d8>)
 80035b6:	f001 fd83 	bl	80050c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 80035ba:	2304      	movs	r3, #4
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c6:	2303      	movs	r3, #3
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035ca:	2308      	movs	r3, #8
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d2:	4619      	mov	r1, r3
 80035d4:	4836      	ldr	r0, [pc, #216]	; (80036b0 <HAL_UART_MspInit+0x1e0>)
 80035d6:	f001 fd73 	bl	80050c0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 80035dc:	4a36      	ldr	r2, [pc, #216]	; (80036b8 <HAL_UART_MspInit+0x1e8>)
 80035de:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 80035e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035e6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 80035f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fa:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003602:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 800360a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800360e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003616:	4b27      	ldr	r3, [pc, #156]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 8003618:	2200      	movs	r2, #0
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800361c:	4825      	ldr	r0, [pc, #148]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 800361e:	f001 f947 	bl	80048b0 <HAL_DMA_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003628:	f7ff faf8 	bl	8002c1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 8003630:	66da      	str	r2, [r3, #108]	; 0x6c
 8003632:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_UART_MspInit+0x1e4>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003638:	e02d      	b.n	8003696 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==UART7)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_UART_MspInit+0x1ec>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d128      	bne.n	8003696 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800364a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 8003662:	f043 0310 	orr.w	r3, r3, #16
 8003666:	6313      	str	r3, [r2, #48]	; 0x30
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_UART_MspInit+0x1d4>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8003674:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003686:	2308      	movs	r3, #8
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800368a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368e:	4619      	mov	r1, r3
 8003690:	480b      	ldr	r0, [pc, #44]	; (80036c0 <HAL_UART_MspInit+0x1f0>)
 8003692:	f001 fd15 	bl	80050c0 <HAL_GPIO_Init>
}
 8003696:	bf00      	nop
 8003698:	3738      	adds	r7, #56	; 0x38
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40005000 	.word	0x40005000
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	20021064 	.word	0x20021064
 80036b8:	40026010 	.word	0x40026010
 80036bc:	40007800 	.word	0x40007800
 80036c0:	40021000 	.word	0x40021000

080036c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e4:	d134      	bne.n	8003750 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <HAL_PCD_MspInit+0x94>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_PCD_MspInit+0x94>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_PCD_MspInit+0x94>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80036fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370c:	2303      	movs	r3, #3
 800370e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003710:	230a      	movs	r3, #10
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	4619      	mov	r1, r3
 800371a:	4810      	ldr	r0, [pc, #64]	; (800375c <HAL_PCD_MspInit+0x98>)
 800371c:	f001 fcd0 	bl	80050c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_PCD_MspInit+0x94>)
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <HAL_PCD_MspInit+0x94>)
 8003726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372a:	6353      	str	r3, [r2, #52]	; 0x34
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_PCD_MspInit+0x94>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_PCD_MspInit+0x94>)
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	4a06      	ldr	r2, [pc, #24]	; (8003758 <HAL_PCD_MspInit+0x94>)
 800373e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003742:	6453      	str	r3, [r2, #68]	; 0x44
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_PCD_MspInit+0x94>)
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	40020000 	.word	0x40020000

08003760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08c      	sub	sp, #48	; 0x30
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003770:	2200      	movs	r2, #0
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	2036      	movs	r0, #54	; 0x36
 8003776:	f001 f871 	bl	800485c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800377a:	2036      	movs	r0, #54	; 0x36
 800377c:	f001 f88a 	bl	8004894 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_InitTick+0xa0>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <HAL_InitTick+0xa0>)
 8003786:	f043 0310 	orr.w	r3, r3, #16
 800378a:	6413      	str	r3, [r2, #64]	; 0x40
 800378c:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <HAL_InitTick+0xa0>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003798:	f107 0210 	add.w	r2, r7, #16
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 f970 	bl	8006a88 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037a8:	f003 f946 	bl	8006a38 <HAL_RCC_GetPCLK1Freq>
 80037ac:	4603      	mov	r3, r0
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <HAL_InitTick+0xa4>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0c9b      	lsrs	r3, r3, #18
 80037bc:	3b01      	subs	r3, #1
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_InitTick+0xa8>)
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <HAL_InitTick+0xac>)
 80037c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_InitTick+0xa8>)
 80037c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <HAL_InitTick+0xa8>)
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_InitTick+0xa8>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_InitTick+0xa8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037e0:	4809      	ldr	r0, [pc, #36]	; (8003808 <HAL_InitTick+0xa8>)
 80037e2:	f004 fa85 	bl	8007cf0 <HAL_TIM_Base_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d104      	bne.n	80037f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80037ec:	4806      	ldr	r0, [pc, #24]	; (8003808 <HAL_InitTick+0xa8>)
 80037ee:	f004 faab 	bl	8007d48 <HAL_TIM_Base_Start_IT>
 80037f2:	4603      	mov	r3, r0
 80037f4:	e000      	b.n	80037f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3730      	adds	r7, #48	; 0x30
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	431bde83 	.word	0x431bde83
 8003808:	200210cc 	.word	0x200210cc
 800380c:	40001000 	.word	0x40001000

08003810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003814:	e7fe      	b.n	8003814 <NMI_Handler+0x4>

08003816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800381a:	e7fe      	b.n	800381a <HardFault_Handler+0x4>

0800381c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003820:	e7fe      	b.n	8003820 <MemManage_Handler+0x4>

08003822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003826:	e7fe      	b.n	8003826 <BusFault_Handler+0x4>

08003828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800382c:	e7fe      	b.n	800382c <UsageFault_Handler+0x4>

0800382e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003840:	2010      	movs	r0, #16
 8003842:	f001 fe33 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(inputButtonSet>buttonPriority.back){
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <EXTI4_IRQHandler+0x28>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <EXTI4_IRQHandler+0x2c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	dd04      	ble.n	800385e <EXTI4_IRQHandler+0x22>
	  inputButtonSet = buttonPriority.back;
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <EXTI4_IRQHandler+0x2c>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4b02      	ldr	r3, [pc, #8]	; (8003864 <EXTI4_IRQHandler+0x28>)
 800385c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000006 	.word	0x20000006
 8003868:	200000ac 	.word	0x200000ac

0800386c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Stream0_IRQHandler+0x10>)
 8003872:	f001 f9bd 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20021064 	.word	0x20021064

08003880 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003884:	4805      	ldr	r0, [pc, #20]	; (800389c <ADC_IRQHandler+0x1c>)
 8003886:	f000 f9c9 	bl	8003c1c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800388a:	4805      	ldr	r0, [pc, #20]	; (80038a0 <ADC_IRQHandler+0x20>)
 800388c:	f000 f9c6 	bl	8003c1c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8003890:	4804      	ldr	r0, [pc, #16]	; (80038a4 <ADC_IRQHandler+0x24>)
 8003892:	f000 f9c3 	bl	8003c1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200102d8 	.word	0x200102d8
 80038a0:	2000d5c0 	.word	0x2000d5c0
 80038a4:	20010324 	.word	0x20010324

080038a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 80038ae:	2120      	movs	r1, #32
 80038b0:	482a      	ldr	r0, [pc, #168]	; (800395c <EXTI9_5_IRQHandler+0xb4>)
 80038b2:	f001 fdaf 	bl	8005414 <HAL_GPIO_ReadPin>
 80038b6:	4603      	mov	r3, r0
 80038b8:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 80038ba:	2140      	movs	r1, #64	; 0x40
 80038bc:	4827      	ldr	r0, [pc, #156]	; (800395c <EXTI9_5_IRQHandler+0xb4>)
 80038be:	f001 fda9 	bl	8005414 <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	4824      	ldr	r0, [pc, #144]	; (800395c <EXTI9_5_IRQHandler+0xb4>)
 80038ca:	f001 fda3 	bl	8005414 <HAL_GPIO_ReadPin>
 80038ce:	4603      	mov	r3, r0
 80038d0:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5)){ //up button
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <EXTI9_5_IRQHandler+0xb8>)
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <EXTI9_5_IRQHandler+0x50>
		if(inputButtonSet > buttonPriority.up){
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <EXTI9_5_IRQHandler+0xbc>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <EXTI9_5_IRQHandler+0xc0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	dd2a      	ble.n	8003942 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.up;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <EXTI9_5_IRQHandler+0xc0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <EXTI9_5_IRQHandler+0xbc>)
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e024      	b.n	8003942 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6)){ //sel button
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <EXTI9_5_IRQHandler+0xb8>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00c      	beq.n	800391e <EXTI9_5_IRQHandler+0x76>
		if(inputButtonSet > buttonPriority.sel){
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <EXTI9_5_IRQHandler+0xbc>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <EXTI9_5_IRQHandler+0xc0>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	429a      	cmp	r2, r3
 8003910:	dd17      	ble.n	8003942 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.sel;
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <EXTI9_5_IRQHandler+0xc0>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <EXTI9_5_IRQHandler+0xbc>)
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e011      	b.n	8003942 <EXTI9_5_IRQHandler+0x9a>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){ //down button
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <EXTI9_5_IRQHandler+0xb8>)
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <EXTI9_5_IRQHandler+0x9a>
		if(inputButtonSet > buttonPriority.down){
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <EXTI9_5_IRQHandler+0xbc>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <EXTI9_5_IRQHandler+0xc0>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	dd04      	ble.n	8003942 <EXTI9_5_IRQHandler+0x9a>
			inputButtonSet = buttonPriority.down;
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <EXTI9_5_IRQHandler+0xc0>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <EXTI9_5_IRQHandler+0xbc>)
 8003940:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003942:	2020      	movs	r0, #32
 8003944:	f001 fdb2 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003948:	2040      	movs	r0, #64	; 0x40
 800394a:	f001 fdaf 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800394e:	2080      	movs	r0, #128	; 0x80
 8003950:	f001 fdac 	bl	80054ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40022800 	.word	0x40022800
 8003960:	40013c00 	.word	0x40013c00
 8003964:	20000006 	.word	0x20000006
 8003968:	200000ac 	.word	0x200000ac

0800396c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <TIM6_DAC_IRQHandler+0x10>)
 8003972:	f004 fa48 	bl	8007e06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200210cc 	.word	0x200210cc

08003980 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003984:	4805      	ldr	r0, [pc, #20]	; (800399c <DMA2_Stream0_IRQHandler+0x1c>)
 8003986:	f001 f933 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 800398a:	4805      	ldr	r0, [pc, #20]	; (80039a0 <DMA2_Stream0_IRQHandler+0x20>)
 800398c:	f000 fb76 	bl	800407c <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <DMA2_Stream0_IRQHandler+0x24>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2001036c 	.word	0x2001036c
 80039a0:	200102d8 	.word	0x200102d8
 80039a4:	2000db04 	.word	0x2000db04

080039a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80039ac:	4805      	ldr	r0, [pc, #20]	; (80039c4 <DMA2_Stream1_IRQHandler+0x1c>)
 80039ae:	f001 f91f 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 80039b2:	4805      	ldr	r0, [pc, #20]	; (80039c8 <DMA2_Stream1_IRQHandler+0x20>)
 80039b4:	f000 fb62 	bl	800407c <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <DMA2_Stream1_IRQHandler+0x24>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000daa4 	.word	0x2000daa4
 80039c8:	20010324 	.word	0x20010324
 80039cc:	2000db04 	.word	0x2000db04

080039d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <DMA2_Stream2_IRQHandler+0x1c>)
 80039d6:	f001 f90b 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <DMA2_Stream2_IRQHandler+0x20>)
 80039dc:	f000 fb4e 	bl	800407c <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <DMA2_Stream2_IRQHandler+0x24>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20021004 	.word	0x20021004
 80039f0:	2000d5c0 	.word	0x2000d5c0
 80039f4:	2000db04 	.word	0x2000db04

080039f8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <SPI4_IRQHandler+0x10>)
 80039fe:	f003 ff3b 	bl	8007878 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	2000d394 	.word	0x2000d394

08003a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a14:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <_sbrk+0x5c>)
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <_sbrk+0x60>)
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <_sbrk+0x64>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d102      	bne.n	8003a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <_sbrk+0x64>)
 8003a2a:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <_sbrk+0x68>)
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <_sbrk+0x64>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d207      	bcs.n	8003a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a3c:	f008 fe66 	bl	800c70c <__errno>
 8003a40:	4602      	mov	r2, r0
 8003a42:	230c      	movs	r3, #12
 8003a44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	e009      	b.n	8003a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <_sbrk+0x64>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <_sbrk+0x64>)
 8003a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20080000 	.word	0x20080000
 8003a6c:	00000400 	.word	0x00000400
 8003a70:	20000328 	.word	0x20000328
 8003a74:	20021158 	.word	0x20021158

08003a78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <SystemInit+0x28>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <SystemInit+0x28>)
 8003a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <SystemInit+0x28>)
 8003a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a92:	609a      	str	r2, [r3, #8]
#endif
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003adc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003aa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003aaa:	e003      	b.n	8003ab4 <LoopCopyDataInit>

08003aac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003aae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ab2:	3104      	adds	r1, #4

08003ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ab4:	480b      	ldr	r0, [pc, #44]	; (8003ae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003aba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003abc:	d3f6      	bcc.n	8003aac <CopyDataInit>
  ldr  r2, =_sbss
 8003abe:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ac0:	e002      	b.n	8003ac8 <LoopFillZerobss>

08003ac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ac4:	f842 3b04 	str.w	r3, [r2], #4

08003ac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003aca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003acc:	d3f9      	bcc.n	8003ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ace:	f7ff ffd3 	bl	8003a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ad2:	f008 fe21 	bl	800c718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ad6:	f7fc ff09 	bl	80008ec <main>
  bx  lr    
 8003ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003adc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003ae0:	08010448 	.word	0x08010448
  ldr  r0, =_sdata
 8003ae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ae8:	2000029c 	.word	0x2000029c
  ldr  r2, =_sbss
 8003aec:	2000029c 	.word	0x2000029c
  ldr  r3, = _ebss
 8003af0:	20021154 	.word	0x20021154

08003af4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af4:	e7fe      	b.n	8003af4 <CAN1_RX0_IRQHandler>

08003af6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afa:	2003      	movs	r0, #3
 8003afc:	f000 fea3 	bl	8004846 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7ff fe2d 	bl	8003760 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b06:	f7ff f88d 	bl	8002c24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_IncTick+0x20>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_IncTick+0x24>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_IncTick+0x24>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	200000c4 	.word	0x200000c4
 8003b34:	2002110c 	.word	0x2002110c

08003b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <HAL_GetTick+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	2002110c 	.word	0x2002110c

08003b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff ffee 	bl	8003b38 <HAL_GetTick>
 8003b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d005      	beq.n	8003b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_Delay+0x40>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b76:	bf00      	nop
 8003b78:	f7ff ffde 	bl	8003b38 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d8f7      	bhi.n	8003b78 <HAL_Delay+0x28>
  {
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200000c4 	.word	0x200000c4

08003b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e031      	b.n	8003c0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff f85e 	bl	8002c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_ADC_Init+0x84>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fbfc 	bl	80043e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8003bfe:	e001      	b.n	8003c04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	ffffeefd 	.word	0xffffeefd

08003c1c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d049      	beq.n	8003cf2 <HAL_ADC_IRQHandler+0xd6>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d046      	beq.n	8003cf2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d12b      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d127      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d119      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0220 	bic.w	r2, r2, #32
 8003cbc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe fe58 	bl	8002998 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0212 	mvn.w	r2, #18
 8003cf0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d057      	beq.n	8003dd4 <HAL_ADC_IRQHandler+0x1b8>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d054      	beq.n	8003dd4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d139      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d12b      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d124      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11d      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d119      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fc87 	bl	80046d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 020c 	mvn.w	r2, #12
 8003dd2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d017      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x21a>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d014      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10d      	bne.n	8003e36 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f97c 	bl	8004124 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0201 	mvn.w	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_ADC_IRQHandler+0x27a>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d012      	beq.n	8003e96 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f043 0202 	orr.w	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0220 	mvn.w	r2, #32
 8003e84:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f956 	bl	8004138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0220 	mvn.w	r2, #32
 8003e94:	601a      	str	r2, [r3, #0]
  }
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Start_DMA+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e0c7      	b.n	800404e <HAL_ADC_Start_DMA+0x1ae>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d018      	beq.n	8003f06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003ee4:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_ADC_Start_DMA+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a5c      	ldr	r2, [pc, #368]	; (800405c <HAL_ADC_Start_DMA+0x1bc>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0c9a      	lsrs	r2, r3, #18
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f9      	bne.n	8003efa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	f040 809b 	bne.w	800404c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <HAL_ADC_Start_DMA+0x1c0>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	d106      	bne.n	8003f60 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f023 0206 	bic.w	r2, r3, #6
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f5e:	e002      	b.n	8003f66 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	4a3c      	ldr	r2, [pc, #240]	; (8004064 <HAL_ADC_Start_DMA+0x1c4>)
 8003f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	4a3b      	ldr	r2, [pc, #236]	; (8004068 <HAL_ADC_Start_DMA+0x1c8>)
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	4a3a      	ldr	r2, [pc, #232]	; (800406c <HAL_ADC_Start_DMA+0x1cc>)
 8003f84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	334c      	adds	r3, #76	; 0x4c
 8003fba:	4619      	mov	r1, r3
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f000 fd24 	bl	8004a0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_ADC_Start_DMA+0x1d0>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10f      	bne.n	8003ff0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d136      	bne.n	800404c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	e02d      	b.n	800404c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <HAL_ADC_Start_DMA+0x1d4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10e      	bne.n	8004018 <HAL_ADC_Start_DMA+0x178>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004016:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_ADC_Start_DMA+0x1d0>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d113      	bne.n	800404c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_ADC_Start_DMA+0x1d8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10e      	bne.n	800404c <HAL_ADC_Start_DMA+0x1ac>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800404a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200000bc 	.word	0x200000bc
 800405c:	431bde83 	.word	0x431bde83
 8004060:	fffff8fe 	.word	0xfffff8fe
 8004064:	080045d5 	.word	0x080045d5
 8004068:	0800468f 	.word	0x0800468f
 800406c:	080046ab 	.word	0x080046ab
 8004070:	40012300 	.word	0x40012300
 8004074:	40012000 	.word	0x40012000
 8004078:	40012200 	.word	0x40012200

0800407c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_ADC_Stop_DMA+0x1a>
 8004092:	2302      	movs	r3, #2
 8004094:	e036      	b.n	8004104 <HAL_ADC_Stop_DMA+0x88>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d11e      	bne.n	80040fa <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ca:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fcfb 	bl	8004acc <HAL_DMA_Abort>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80040e8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <HAL_ADC_Stop_DMA+0x90>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	ffffeefe 	.word	0xffffeefe

08004110 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e12a      	b.n	80043be <HAL_ADC_ConfigChannel+0x272>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b09      	cmp	r3, #9
 8004176:	d93a      	bls.n	80041ee <HAL_ADC_ConfigChannel+0xa2>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004180:	d035      	beq.n	80041ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68d9      	ldr	r1, [r3, #12]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	3b1e      	subs	r3, #30
 8004198:	2207      	movs	r2, #7
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43da      	mvns	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	400a      	ands	r2, r1
 80041a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a87      	ldr	r2, [pc, #540]	; (80043cc <HAL_ADC_ConfigChannel+0x280>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10a      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68d9      	ldr	r1, [r3, #12]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	061a      	lsls	r2, r3, #24
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c6:	e035      	b.n	8004234 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68d9      	ldr	r1, [r3, #12]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4618      	mov	r0, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4403      	add	r3, r0
 80041e0:	3b1e      	subs	r3, #30
 80041e2:	409a      	lsls	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ec:	e022      	b.n	8004234 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6919      	ldr	r1, [r3, #16]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	2207      	movs	r2, #7
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43da      	mvns	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	400a      	ands	r2, r1
 8004210:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6919      	ldr	r1, [r3, #16]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	4618      	mov	r0, r3
 8004224:	4603      	mov	r3, r0
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4403      	add	r3, r0
 800422a:	409a      	lsls	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b06      	cmp	r3, #6
 800423a:	d824      	bhi.n	8004286 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	3b05      	subs	r3, #5
 800424e:	221f      	movs	r2, #31
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43da      	mvns	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	400a      	ands	r2, r1
 800425c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	4618      	mov	r0, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	3b05      	subs	r3, #5
 8004278:	fa00 f203 	lsl.w	r2, r0, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	635a      	str	r2, [r3, #52]	; 0x34
 8004284:	e04c      	b.n	8004320 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d824      	bhi.n	80042d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	3b23      	subs	r3, #35	; 0x23
 80042a0:	221f      	movs	r2, #31
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	400a      	ands	r2, r1
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	3b23      	subs	r3, #35	; 0x23
 80042ca:	fa00 f203 	lsl.w	r2, r0, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
 80042d6:	e023      	b.n	8004320 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	3b41      	subs	r3, #65	; 0x41
 80042ea:	221f      	movs	r2, #31
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43da      	mvns	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	400a      	ands	r2, r1
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	4618      	mov	r0, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	3b41      	subs	r3, #65	; 0x41
 8004314:	fa00 f203 	lsl.w	r2, r0, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <HAL_ADC_ConfigChannel+0x284>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10a      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x1f4>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004332:	d105      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004334:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <HAL_ADC_ConfigChannel+0x288>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_ADC_ConfigChannel+0x288>)
 800433a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800433e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <HAL_ADC_ConfigChannel+0x284>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d109      	bne.n	800435e <HAL_ADC_ConfigChannel+0x212>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b12      	cmp	r3, #18
 8004350:	d105      	bne.n	800435e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <HAL_ADC_ConfigChannel+0x288>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <HAL_ADC_ConfigChannel+0x288>)
 8004358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800435c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <HAL_ADC_ConfigChannel+0x284>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d125      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x268>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a17      	ldr	r2, [pc, #92]	; (80043cc <HAL_ADC_ConfigChannel+0x280>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d003      	beq.n	800437a <HAL_ADC_ConfigChannel+0x22e>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b11      	cmp	r3, #17
 8004378:	d11c      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800437a:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_ADC_ConfigChannel+0x288>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <HAL_ADC_ConfigChannel+0x288>)
 8004380:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004384:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <HAL_ADC_ConfigChannel+0x280>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d111      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_ADC_ConfigChannel+0x28c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a11      	ldr	r2, [pc, #68]	; (80043dc <HAL_ADC_ConfigChannel+0x290>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0c9a      	lsrs	r2, r3, #18
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043a6:	e002      	b.n	80043ae <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f9      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	10000012 	.word	0x10000012
 80043d0:	40012000 	.word	0x40012000
 80043d4:	40012300 	.word	0x40012300
 80043d8:	200000bc 	.word	0x200000bc
 80043dc:	431bde83 	.word	0x431bde83

080043e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80043e8:	4b78      	ldr	r3, [pc, #480]	; (80045cc <ADC_Init+0x1ec>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4a77      	ldr	r2, [pc, #476]	; (80045cc <ADC_Init+0x1ec>)
 80043ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80043f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80043f4:	4b75      	ldr	r3, [pc, #468]	; (80045cc <ADC_Init+0x1ec>)
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4973      	ldr	r1, [pc, #460]	; (80045cc <ADC_Init+0x1ec>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	021a      	lsls	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6899      	ldr	r1, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	4a58      	ldr	r2, [pc, #352]	; (80045d0 <ADC_Init+0x1f0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d022      	beq.n	80044ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004482:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6899      	ldr	r1, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6899      	ldr	r1, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	e00f      	b.n	80044da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0202 	bic.w	r2, r2, #2
 80044e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	005a      	lsls	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01b      	beq.n	8004540 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004516:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004526:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	3b01      	subs	r3, #1
 8004534:	035a      	lsls	r2, r3, #13
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	e007      	b.n	8004550 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	3b01      	subs	r3, #1
 800456c:	051a      	lsls	r2, r3, #20
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004592:	025a      	lsls	r2, r3, #9
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6899      	ldr	r1, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	029a      	lsls	r2, r3, #10
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40012300 	.word	0x40012300
 80045d0:	0f000001 	.word	0x0f000001

080045d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d13c      	bne.n	8004668 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d12b      	bne.n	8004660 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800460c:	2b00      	cmp	r3, #0
 800460e:	d127      	bne.n	8004660 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	d006      	beq.n	800462c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004628:	2b00      	cmp	r3, #0
 800462a:	d119      	bne.n	8004660 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0220 	bic.w	r2, r2, #32
 800463a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f043 0201 	orr.w	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7fe f999 	bl	8002998 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004666:	e00e      	b.n	8004686 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff fd5f 	bl	8004138 <HAL_ADC_ErrorCallback>
}
 800467a:	e004      	b.n	8004686 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff fd37 	bl	8004110 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2240      	movs	r2, #64	; 0x40
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f043 0204 	orr.w	r2, r3, #4
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fd34 	bl	8004138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <__NVIC_SetPriorityGrouping+0x40>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004708:	4013      	ands	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <__NVIC_SetPriorityGrouping+0x44>)
 8004716:	4313      	orrs	r3, r2
 8004718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800471a:	4a04      	ldr	r2, [pc, #16]	; (800472c <__NVIC_SetPriorityGrouping+0x40>)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	60d3      	str	r3, [r2, #12]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000ed00 	.word	0xe000ed00
 8004730:	05fa0000 	.word	0x05fa0000

08004734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <__NVIC_GetPriorityGrouping+0x18>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 0307 	and.w	r3, r3, #7
}
 8004742:	4618      	mov	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	2b00      	cmp	r3, #0
 8004760:	db0b      	blt.n	800477a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	f003 021f 	and.w	r2, r3, #31
 8004768:	4907      	ldr	r1, [pc, #28]	; (8004788 <__NVIC_EnableIRQ+0x38>)
 800476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2001      	movs	r0, #1
 8004772:	fa00 f202 	lsl.w	r2, r0, r2
 8004776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000e100 	.word	0xe000e100

0800478c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	6039      	str	r1, [r7, #0]
 8004796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479c:	2b00      	cmp	r3, #0
 800479e:	db0a      	blt.n	80047b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	490c      	ldr	r1, [pc, #48]	; (80047d8 <__NVIC_SetPriority+0x4c>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	0112      	lsls	r2, r2, #4
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	440b      	add	r3, r1
 80047b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b4:	e00a      	b.n	80047cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4908      	ldr	r1, [pc, #32]	; (80047dc <__NVIC_SetPriority+0x50>)
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	3b04      	subs	r3, #4
 80047c4:	0112      	lsls	r2, r2, #4
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	440b      	add	r3, r1
 80047ca:	761a      	strb	r2, [r3, #24]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000e100 	.word	0xe000e100
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f1c3 0307 	rsb	r3, r3, #7
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	bf28      	it	cs
 80047fe:	2304      	movcs	r3, #4
 8004800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3304      	adds	r3, #4
 8004806:	2b06      	cmp	r3, #6
 8004808:	d902      	bls.n	8004810 <NVIC_EncodePriority+0x30>
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	3b03      	subs	r3, #3
 800480e:	e000      	b.n	8004812 <NVIC_EncodePriority+0x32>
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004814:	f04f 32ff 	mov.w	r2, #4294967295
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	401a      	ands	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004828:	f04f 31ff 	mov.w	r1, #4294967295
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	43d9      	mvns	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	4313      	orrs	r3, r2
         );
}
 800483a:	4618      	mov	r0, r3
 800483c:	3724      	adds	r7, #36	; 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff ff4c 	bl	80046ec <__NVIC_SetPriorityGrouping>
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800486e:	f7ff ff61 	bl	8004734 <__NVIC_GetPriorityGrouping>
 8004872:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	6978      	ldr	r0, [r7, #20]
 800487a:	f7ff ffb1 	bl	80047e0 <NVIC_EncodePriority>
 800487e:	4602      	mov	r2, r0
 8004880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff ff80 	bl	800478c <__NVIC_SetPriority>
}
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ff54 	bl	8004750 <__NVIC_EnableIRQ>
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048bc:	f7ff f93c 	bl	8003b38 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e099      	b.n	8004a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ec:	e00f      	b.n	800490e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ee:	f7ff f923 	bl	8003b38 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b05      	cmp	r3, #5
 80048fa:	d908      	bls.n	800490e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2203      	movs	r2, #3
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e078      	b.n	8004a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e8      	bne.n	80048ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_DMA_Init+0x158>)
 8004928:	4013      	ands	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800493a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b04      	cmp	r3, #4
 8004966:	d107      	bne.n	8004978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	4313      	orrs	r3, r2
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0307 	bic.w	r3, r3, #7
 800498e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d117      	bne.n	80049d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00e      	beq.n	80049d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fb09 	bl	8004fcc <DMA_CheckFifoParam>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2240      	movs	r2, #64	; 0x40
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049ce:	2301      	movs	r3, #1
 80049d0:	e016      	b.n	8004a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fac0 	bl	8004f60 <DMA_CalcBaseAndBitshift>
 80049e0:	4603      	mov	r3, r0
 80049e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	223f      	movs	r2, #63	; 0x3f
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e010803f 	.word	0xe010803f

08004a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_DMA_Start_IT+0x26>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e048      	b.n	8004ac4 <HAL_DMA_Start_IT+0xb8>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d137      	bne.n	8004ab6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fa52 	bl	8004f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	223f      	movs	r2, #63	; 0x3f
 8004a66:	409a      	lsls	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0216 	orr.w	r2, r2, #22
 8004a7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a8a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e005      	b.n	8004ac2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ada:	f7ff f82d 	bl	8003b38 <HAL_GetTick>
 8004ade:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d008      	beq.n	8004afe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e052      	b.n	8004ba4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0216 	bic.w	r2, r2, #22
 8004b0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <HAL_DMA_Abort+0x62>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0208 	bic.w	r2, r2, #8
 8004b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b4e:	e013      	b.n	8004b78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b50:	f7fe fff2 	bl	8003b38 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	d90c      	bls.n	8004b78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e015      	b.n	8004ba4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e4      	bne.n	8004b50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	223f      	movs	r2, #63	; 0x3f
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d004      	beq.n	8004bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00c      	b.n	8004be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2205      	movs	r2, #5
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004bfc:	4b92      	ldr	r3, [pc, #584]	; (8004e48 <HAL_DMA_IRQHandler+0x258>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a92      	ldr	r2, [pc, #584]	; (8004e4c <HAL_DMA_IRQHandler+0x25c>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0a9b      	lsrs	r3, r3, #10
 8004c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01a      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0204 	bic.w	r2, r2, #4
 8004c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c48:	2208      	movs	r2, #8
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	2201      	movs	r2, #1
 8004c62:	409a      	lsls	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d012      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	2201      	movs	r2, #1
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f043 0202 	orr.w	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	2204      	movs	r2, #4
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d012      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f043 0204 	orr.w	r2, r3, #4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ccc:	2210      	movs	r2, #16
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d043      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d03c      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	2210      	movs	r2, #16
 8004cec:	409a      	lsls	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
 8004d1e:	e01f      	b.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
 8004d30:	e016      	b.n	8004d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0208 	bic.w	r2, r2, #8
 8004d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	2220      	movs	r2, #32
 8004d66:	409a      	lsls	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 808e 	beq.w	8004e8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8086 	beq.w	8004e8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	2220      	movs	r2, #32
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b05      	cmp	r3, #5
 8004d98:	d136      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0216 	bic.w	r2, r2, #22
 8004da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_DMA_IRQHandler+0x1da>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0208 	bic.w	r2, r2, #8
 8004dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	223f      	movs	r2, #63	; 0x3f
 8004de0:	409a      	lsls	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d07d      	beq.n	8004efa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
        }
        return;
 8004e06:	e078      	b.n	8004efa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01c      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d108      	bne.n	8004e36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d030      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
 8004e34:	e02b      	b.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d027      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
 8004e46:	e022      	b.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
 8004e48:	200000bc 	.word	0x200000bc
 8004e4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0210 	bic.w	r2, r2, #16
 8004e6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d032      	beq.n	8004efc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d022      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2205      	movs	r2, #5
 8004ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d307      	bcc.n	8004ed6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f2      	bne.n	8004eba <HAL_DMA_IRQHandler+0x2ca>
 8004ed4:	e000      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ed6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
 8004ef8:	e000      	b.n	8004efc <HAL_DMA_IRQHandler+0x30c>
        return;
 8004efa:	bf00      	nop
    }
  }
}
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop

08004f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d108      	bne.n	8004f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f42:	e007      	b.n	8004f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	3b10      	subs	r3, #16
 8004f70:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x60>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d908      	bls.n	8004fa0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	1d1a      	adds	r2, r3, #4
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	659a      	str	r2, [r3, #88]	; 0x58
 8004f9e:	e006      	b.n	8004fae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	aaaaaaab 	.word	0xaaaaaaab
 8004fc4:	0801017c 	.word	0x0801017c
 8004fc8:	fffffc00 	.word	0xfffffc00

08004fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11f      	bne.n	8005026 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d855      	bhi.n	8005098 <DMA_CheckFifoParam+0xcc>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <DMA_CheckFifoParam+0x28>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	08005017 	.word	0x08005017
 8004ffc:	08005005 	.word	0x08005005
 8005000:	08005099 	.word	0x08005099
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d045      	beq.n	800509c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005014:	e042      	b.n	800509c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800501e:	d13f      	bne.n	80050a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005024:	e03c      	b.n	80050a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502e:	d121      	bne.n	8005074 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d836      	bhi.n	80050a4 <DMA_CheckFifoParam+0xd8>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <DMA_CheckFifoParam+0x70>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	0800504d 	.word	0x0800504d
 8005040:	08005053 	.word	0x08005053
 8005044:	0800504d 	.word	0x0800504d
 8005048:	08005065 	.word	0x08005065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      break;
 8005050:	e02f      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d024      	beq.n	80050a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005062:	e021      	b.n	80050a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800506c:	d11e      	bne.n	80050ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005072:	e01b      	b.n	80050ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d902      	bls.n	8005080 <DMA_CheckFifoParam+0xb4>
 800507a:	2b03      	cmp	r3, #3
 800507c:	d003      	beq.n	8005086 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800507e:	e018      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e015      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00e      	beq.n	80050b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
      break;
 8005096:	e00b      	b.n	80050b0 <DMA_CheckFifoParam+0xe4>
      break;
 8005098:	bf00      	nop
 800509a:	e00a      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      break;
 800509c:	bf00      	nop
 800509e:	e008      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      break;
 80050a0:	bf00      	nop
 80050a2:	e006      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      break;
 80050a4:	bf00      	nop
 80050a6:	e004      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      break;
 80050a8:	bf00      	nop
 80050aa:	e002      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80050ac:	bf00      	nop
 80050ae:	e000      	b.n	80050b2 <DMA_CheckFifoParam+0xe6>
      break;
 80050b0:	bf00      	nop
    }
  } 
  
  return status; 
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	; 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	e175      	b.n	80053cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050e0:	2201      	movs	r2, #1
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	f040 8164 	bne.w	80053c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d00b      	beq.n	800511e <HAL_GPIO_Init+0x5e>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d007      	beq.n	800511e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005112:	2b11      	cmp	r3, #17
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b12      	cmp	r3, #18
 800511c:	d130      	bne.n	8005180 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005154:	2201      	movs	r2, #1
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 0201 	and.w	r2, r3, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	2203      	movs	r2, #3
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0x100>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b12      	cmp	r3, #18
 80051be:	d123      	bne.n	8005208 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	08da      	lsrs	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3208      	adds	r2, #8
 80051c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	220f      	movs	r2, #15
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	08da      	lsrs	r2, r3, #3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3208      	adds	r2, #8
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	2203      	movs	r2, #3
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 0203 	and.w	r2, r3, #3
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80be 	beq.w	80053c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524a:	4b65      	ldr	r3, [pc, #404]	; (80053e0 <HAL_GPIO_Init+0x320>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	4a64      	ldr	r2, [pc, #400]	; (80053e0 <HAL_GPIO_Init+0x320>)
 8005250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005254:	6453      	str	r3, [r2, #68]	; 0x44
 8005256:	4b62      	ldr	r3, [pc, #392]	; (80053e0 <HAL_GPIO_Init+0x320>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005262:	4a60      	ldr	r2, [pc, #384]	; (80053e4 <HAL_GPIO_Init+0x324>)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	089b      	lsrs	r3, r3, #2
 8005268:	3302      	adds	r3, #2
 800526a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	220f      	movs	r2, #15
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a57      	ldr	r2, [pc, #348]	; (80053e8 <HAL_GPIO_Init+0x328>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d037      	beq.n	80052fe <HAL_GPIO_Init+0x23e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a56      	ldr	r2, [pc, #344]	; (80053ec <HAL_GPIO_Init+0x32c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_GPIO_Init+0x23a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a55      	ldr	r2, [pc, #340]	; (80053f0 <HAL_GPIO_Init+0x330>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02b      	beq.n	80052f6 <HAL_GPIO_Init+0x236>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a54      	ldr	r2, [pc, #336]	; (80053f4 <HAL_GPIO_Init+0x334>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d025      	beq.n	80052f2 <HAL_GPIO_Init+0x232>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a53      	ldr	r2, [pc, #332]	; (80053f8 <HAL_GPIO_Init+0x338>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d01f      	beq.n	80052ee <HAL_GPIO_Init+0x22e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a52      	ldr	r2, [pc, #328]	; (80053fc <HAL_GPIO_Init+0x33c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d019      	beq.n	80052ea <HAL_GPIO_Init+0x22a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a51      	ldr	r2, [pc, #324]	; (8005400 <HAL_GPIO_Init+0x340>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_GPIO_Init+0x226>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a50      	ldr	r2, [pc, #320]	; (8005404 <HAL_GPIO_Init+0x344>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00d      	beq.n	80052e2 <HAL_GPIO_Init+0x222>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a4f      	ldr	r2, [pc, #316]	; (8005408 <HAL_GPIO_Init+0x348>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <HAL_GPIO_Init+0x21e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a4e      	ldr	r2, [pc, #312]	; (800540c <HAL_GPIO_Init+0x34c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <HAL_GPIO_Init+0x21a>
 80052d6:	2309      	movs	r3, #9
 80052d8:	e012      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052da:	230a      	movs	r3, #10
 80052dc:	e010      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052de:	2308      	movs	r3, #8
 80052e0:	e00e      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052e2:	2307      	movs	r3, #7
 80052e4:	e00c      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052e6:	2306      	movs	r3, #6
 80052e8:	e00a      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052ea:	2305      	movs	r3, #5
 80052ec:	e008      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052ee:	2304      	movs	r3, #4
 80052f0:	e006      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052f2:	2303      	movs	r3, #3
 80052f4:	e004      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e002      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <HAL_GPIO_Init+0x240>
 80052fe:	2300      	movs	r3, #0
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	f002 0203 	and.w	r2, r2, #3
 8005306:	0092      	lsls	r2, r2, #2
 8005308:	4093      	lsls	r3, r2
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4313      	orrs	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005310:	4934      	ldr	r1, [pc, #208]	; (80053e4 <HAL_GPIO_Init+0x324>)
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	089b      	lsrs	r3, r3, #2
 8005316:	3302      	adds	r3, #2
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800531e:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <HAL_GPIO_Init+0x350>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005342:	4a33      	ldr	r2, [pc, #204]	; (8005410 <HAL_GPIO_Init+0x350>)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005348:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_GPIO_Init+0x350>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800536c:	4a28      	ldr	r2, [pc, #160]	; (8005410 <HAL_GPIO_Init+0x350>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005372:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_GPIO_Init+0x350>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	43db      	mvns	r3, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_GPIO_Init+0x350>)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800539c:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <HAL_GPIO_Init+0x350>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053c0:	4a13      	ldr	r2, [pc, #76]	; (8005410 <HAL_GPIO_Init+0x350>)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3301      	adds	r3, #1
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	f67f ae86 	bls.w	80050e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053d4:	bf00      	nop
 80053d6:	3724      	adds	r7, #36	; 0x24
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40013800 	.word	0x40013800
 80053e8:	40020000 	.word	0x40020000
 80053ec:	40020400 	.word	0x40020400
 80053f0:	40020800 	.word	0x40020800
 80053f4:	40020c00 	.word	0x40020c00
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40021400 	.word	0x40021400
 8005400:	40021800 	.word	0x40021800
 8005404:	40021c00 	.word	0x40021c00
 8005408:	40022000 	.word	0x40022000
 800540c:	40022400 	.word	0x40022400
 8005410:	40013c00 	.word	0x40013c00

08005414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e001      	b.n	8005436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
 8005450:	4613      	mov	r3, r2
 8005452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005454:	787b      	ldrb	r3, [r7, #1]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800545a:	887a      	ldrh	r2, [r7, #2]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005460:	e003      	b.n	800546a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005462:	887b      	ldrh	r3, [r7, #2]
 8005464:	041a      	lsls	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	619a      	str	r2, [r3, #24]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	041a      	lsls	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005496:	e002      	b.n	800549e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005498:	887a      	ldrh	r2, [r7, #2]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	619a      	str	r2, [r3, #24]
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054b6:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d006      	beq.n	80054d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054c2:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f806 	bl	80054dc <HAL_GPIO_EXTI_Callback>
  }
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40013c00 	.word	0x40013c00

080054dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e07f      	b.n	8005606 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fd fd96 	bl	800304c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005544:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005554:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	e006      	b.n	800557c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800557a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d104      	bne.n	800558e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800558c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <HAL_I2C_Init+0x11c>)
 800559a:	430b      	orrs	r3, r1
 800559c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	ea42 0103 	orr.w	r1, r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69d9      	ldr	r1, [r3, #28]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	02008000 	.word	0x02008000

08005614 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	461a      	mov	r2, r3
 8005620:	460b      	mov	r3, r1
 8005622:	817b      	strh	r3, [r7, #10]
 8005624:	4613      	mov	r3, r2
 8005626:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b20      	cmp	r3, #32
 8005632:	f040 80da 	bne.w	80057ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_I2C_Master_Transmit+0x30>
 8005640:	2302      	movs	r3, #2
 8005642:	e0d3      	b.n	80057ec <HAL_I2C_Master_Transmit+0x1d8>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800564c:	f7fe fa74 	bl	8003b38 <HAL_GetTick>
 8005650:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	2319      	movs	r3, #25
 8005658:	2201      	movs	r2, #1
 800565a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f9e6 	bl	8005a30 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e0be      	b.n	80057ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2221      	movs	r2, #33	; 0x21
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2210      	movs	r2, #16
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	893a      	ldrh	r2, [r7, #8]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	2bff      	cmp	r3, #255	; 0xff
 800569e:	d90e      	bls.n	80056be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	22ff      	movs	r2, #255	; 0xff
 80056a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	8979      	ldrh	r1, [r7, #10]
 80056ae:	4b51      	ldr	r3, [pc, #324]	; (80057f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fb48 	bl	8005d4c <I2C_TransferConfig>
 80056bc:	e06c      	b.n	8005798 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	8979      	ldrh	r1, [r7, #10]
 80056d0:	4b48      	ldr	r3, [pc, #288]	; (80057f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fb37 	bl	8005d4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80056de:	e05b      	b.n	8005798 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	6a39      	ldr	r1, [r7, #32]
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f9e3 	bl	8005ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e07b      	b.n	80057ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d034      	beq.n	8005798 <HAL_I2C_Master_Transmit+0x184>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	2b00      	cmp	r3, #0
 8005734:	d130      	bne.n	8005798 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	2200      	movs	r2, #0
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f975 	bl	8005a30 <I2C_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e04d      	b.n	80057ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2bff      	cmp	r3, #255	; 0xff
 8005758:	d90e      	bls.n	8005778 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005764:	b2da      	uxtb	r2, r3
 8005766:	8979      	ldrh	r1, [r7, #10]
 8005768:	2300      	movs	r3, #0
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 faeb 	bl	8005d4c <I2C_TransferConfig>
 8005776:	e00f      	b.n	8005798 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	b2da      	uxtb	r2, r3
 8005788:	8979      	ldrh	r1, [r7, #10]
 800578a:	2300      	movs	r3, #0
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fada 	bl	8005d4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d19e      	bne.n	80056e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	6a39      	ldr	r1, [r7, #32]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f9c2 	bl	8005b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e01a      	b.n	80057ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2220      	movs	r2, #32
 80057bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80057ca:	400b      	ands	r3, r1
 80057cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	80002000 	.word	0x80002000
 80057f8:	fe00e800 	.word	0xfe00e800

080057fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	461a      	mov	r2, r3
 8005808:	460b      	mov	r3, r1
 800580a:	817b      	strh	r3, [r7, #10]
 800580c:	4613      	mov	r3, r2
 800580e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b20      	cmp	r3, #32
 800581a:	f040 80db 	bne.w	80059d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_I2C_Master_Receive+0x30>
 8005828:	2302      	movs	r3, #2
 800582a:	e0d4      	b.n	80059d6 <HAL_I2C_Master_Receive+0x1da>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005834:	f7fe f980 	bl	8003b38 <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	2319      	movs	r3, #25
 8005840:	2201      	movs	r2, #1
 8005842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f8f2 	bl	8005a30 <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e0bf      	b.n	80059d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2222      	movs	r2, #34	; 0x22
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2210      	movs	r2, #16
 8005862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	893a      	ldrh	r2, [r7, #8]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	2bff      	cmp	r3, #255	; 0xff
 8005886:	d90e      	bls.n	80058a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	22ff      	movs	r2, #255	; 0xff
 800588c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005892:	b2da      	uxtb	r2, r3
 8005894:	8979      	ldrh	r1, [r7, #10]
 8005896:	4b52      	ldr	r3, [pc, #328]	; (80059e0 <HAL_I2C_Master_Receive+0x1e4>)
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fa54 	bl	8005d4c <I2C_TransferConfig>
 80058a4:	e06d      	b.n	8005982 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	8979      	ldrh	r1, [r7, #10]
 80058b8:	4b49      	ldr	r3, [pc, #292]	; (80059e0 <HAL_I2C_Master_Receive+0x1e4>)
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fa43 	bl	8005d4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80058c6:	e05c      	b.n	8005982 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	6a39      	ldr	r1, [r7, #32]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f96b 	bl	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e07c      	b.n	80059d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d034      	beq.n	8005982 <HAL_I2C_Master_Receive+0x186>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d130      	bne.n	8005982 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	2200      	movs	r2, #0
 8005928:	2180      	movs	r1, #128	; 0x80
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f880 	bl	8005a30 <I2C_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e04d      	b.n	80059d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	2bff      	cmp	r3, #255	; 0xff
 8005942:	d90e      	bls.n	8005962 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	22ff      	movs	r2, #255	; 0xff
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	b2da      	uxtb	r2, r3
 8005950:	8979      	ldrh	r1, [r7, #10]
 8005952:	2300      	movs	r3, #0
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f9f6 	bl	8005d4c <I2C_TransferConfig>
 8005960:	e00f      	b.n	8005982 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005970:	b2da      	uxtb	r2, r3
 8005972:	8979      	ldrh	r1, [r7, #10]
 8005974:	2300      	movs	r3, #0
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f9e5 	bl	8005d4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d19d      	bne.n	80058c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	6a39      	ldr	r1, [r7, #32]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f8cd 	bl	8005b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e01a      	b.n	80059d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2220      	movs	r2, #32
 80059a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <HAL_I2C_Master_Receive+0x1e8>)
 80059b4:	400b      	ands	r3, r1
 80059b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	80002400 	.word	0x80002400
 80059e4:	fe00e800 	.word	0xfe00e800

080059e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d103      	bne.n	8005a06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d007      	beq.n	8005a24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	619a      	str	r2, [r3, #24]
  }
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a40:	e022      	b.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d01e      	beq.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7fe f875 	bl	8003b38 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d113      	bne.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e00f      	b.n	8005aa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d0cd      	beq.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005abc:	e02c      	b.n	8005b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f8dc 	bl	8005c80 <I2C_IsAcknowledgeFailed>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e02a      	b.n	8005b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad8:	d01e      	beq.n	8005b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7fe f82d 	bl	8003b38 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d113      	bne.n	8005b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	f043 0220 	orr.w	r2, r3, #32
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e007      	b.n	8005b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d1cb      	bne.n	8005abe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b3c:	e028      	b.n	8005b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f89c 	bl	8005c80 <I2C_IsAcknowledgeFailed>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e026      	b.n	8005ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fd fff1 	bl	8003b38 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d113      	bne.n	8005b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e007      	b.n	8005ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d1cf      	bne.n	8005b3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bb4:	e055      	b.n	8005c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f860 	bl	8005c80 <I2C_IsAcknowledgeFailed>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e053      	b.n	8005c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d129      	bne.n	8005c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d105      	bne.n	8005bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e03f      	b.n	8005c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6859      	ldr	r1, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005c06:	400b      	ands	r3, r1
 8005c08:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e022      	b.n	8005c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2c:	f7fd ff84 	bl	8003b38 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10f      	bne.n	8005c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e007      	b.n	8005c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d1a2      	bne.n	8005bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	fe00e800 	.word	0xfe00e800

08005c80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d151      	bne.n	8005d3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c9a:	e022      	b.n	8005ce2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d01e      	beq.n	8005ce2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fd ff48 	bl	8003b38 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_IsAcknowledgeFailed+0x3a>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d113      	bne.n	8005ce2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f043 0220 	orr.w	r2, r3, #32
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e02e      	b.n	8005d40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d1d5      	bne.n	8005c9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff fe71 	bl	80059e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d12:	400b      	ands	r3, r1
 8005d14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	f043 0204 	orr.w	r2, r3, #4
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	fe00e800 	.word	0xfe00e800

08005d4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	817b      	strh	r3, [r7, #10]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	0d5b      	lsrs	r3, r3, #21
 8005d68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <I2C_TransferConfig+0x58>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	43db      	mvns	r3, r3
 8005d72:	ea02 0103 	and.w	r1, r2, r3
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d7c:	7a7b      	ldrb	r3, [r7, #9]
 8005d7e:	041b      	lsls	r3, r3, #16
 8005d80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	03ff63ff 	.word	0x03ff63ff

08005da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d138      	bne.n	8005e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e032      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	; 0x24
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d139      	bne.n	8005ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e033      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2224      	movs	r2, #36	; 0x24
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e000      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed8:	b08f      	sub	sp, #60	; 0x3c
 8005eda:	af0a      	add	r7, sp, #40	; 0x28
 8005edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e116      	b.n	8006116 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fd fbde 	bl	80036c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f003 fc0e 	bl	8009748 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	687e      	ldr	r6, [r7, #4]
 8005f34:	466d      	mov	r5, sp
 8005f36:	f106 0410 	add.w	r4, r6, #16
 8005f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f46:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f4a:	1d33      	adds	r3, r6, #4
 8005f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f4e:	6838      	ldr	r0, [r7, #0]
 8005f50:	f003 fba2 	bl	8009698 <USB_CoreInit>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0d7      	b.n	8006116 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f003 fbfc 	bl	800976a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
 8005f76:	e04a      	b.n	800600e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f78:	7bfa      	ldrb	r2, [r7, #15]
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	333d      	adds	r3, #61	; 0x3d
 8005f88:	2201      	movs	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	333c      	adds	r3, #60	; 0x3c
 8005f9c:	7bfa      	ldrb	r2, [r7, #15]
 8005f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fa0:	7bfa      	ldrb	r2, [r7, #15]
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	b298      	uxth	r0, r3
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3342      	adds	r3, #66	; 0x42
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fb8:	7bfa      	ldrb	r2, [r7, #15]
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	333f      	adds	r3, #63	; 0x3f
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fcc:	7bfa      	ldrb	r2, [r7, #15]
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	1a9b      	subs	r3, r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	3344      	adds	r3, #68	; 0x44
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fe0:	7bfa      	ldrb	r2, [r7, #15]
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	3348      	adds	r3, #72	; 0x48
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ff4:	7bfa      	ldrb	r2, [r7, #15]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	3350      	adds	r3, #80	; 0x50
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	3301      	adds	r3, #1
 800600c:	73fb      	strb	r3, [r7, #15]
 800600e:	7bfa      	ldrb	r2, [r7, #15]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d3af      	bcc.n	8005f78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
 800601c:	e044      	b.n	80060a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800601e:	7bfa      	ldrb	r2, [r7, #15]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006030:	2200      	movs	r2, #0
 8006032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006046:	7bfa      	ldrb	r2, [r7, #15]
 8006048:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800604a:	7bfa      	ldrb	r2, [r7, #15]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006076:	7bfa      	ldrb	r2, [r7, #15]
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	3301      	adds	r3, #1
 80060a6:	73fb      	strb	r3, [r7, #15]
 80060a8:	7bfa      	ldrb	r2, [r7, #15]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d3b5      	bcc.n	800601e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	687e      	ldr	r6, [r7, #4]
 80060ba:	466d      	mov	r5, sp
 80060bc:	f106 0410 	add.w	r4, r6, #16
 80060c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80060d0:	1d33      	adds	r3, r6, #4
 80060d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060d4:	6838      	ldr	r0, [r7, #0]
 80060d6:	f003 fb73 	bl	80097c0 <USB_DevInit>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e014      	b.n	8006116 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b01      	cmp	r3, #1
 8006102:	d102      	bne.n	800610a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f80b 	bl	8006120 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f003 fd25 	bl	8009b5e <USB_DevDisconnect>

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_PCDEx_ActivateLPM+0x44>)
 8006150:	4313      	orrs	r3, r2
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	10000003 	.word	0x10000003

08006168 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a04      	ldr	r2, [pc, #16]	; (8006184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006176:	6013      	str	r3, [r2, #0]
}
 8006178:	bf00      	nop
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40007000 	.word	0x40007000

08006188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006190:	2300      	movs	r3, #0
 8006192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e29b      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8087 	beq.w	80062ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061ac:	4b96      	ldr	r3, [pc, #600]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d00c      	beq.n	80061d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b8:	4b93      	ldr	r3, [pc, #588]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d112      	bne.n	80061ea <HAL_RCC_OscConfig+0x62>
 80061c4:	4b90      	ldr	r3, [pc, #576]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061d0:	d10b      	bne.n	80061ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d2:	4b8d      	ldr	r3, [pc, #564]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d06c      	beq.n	80062b8 <HAL_RCC_OscConfig+0x130>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d168      	bne.n	80062b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e275      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x7a>
 80061f4:	4b84      	ldr	r3, [pc, #528]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a83      	ldr	r2, [pc, #524]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e02e      	b.n	8006260 <HAL_RCC_OscConfig+0xd8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x9c>
 800620a:	4b7f      	ldr	r3, [pc, #508]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a7e      	ldr	r2, [pc, #504]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4b7c      	ldr	r3, [pc, #496]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a7b      	ldr	r2, [pc, #492]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800621c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	e01d      	b.n	8006260 <HAL_RCC_OscConfig+0xd8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800622c:	d10c      	bne.n	8006248 <HAL_RCC_OscConfig+0xc0>
 800622e:	4b76      	ldr	r3, [pc, #472]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a75      	ldr	r2, [pc, #468]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b73      	ldr	r3, [pc, #460]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a72      	ldr	r2, [pc, #456]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e00b      	b.n	8006260 <HAL_RCC_OscConfig+0xd8>
 8006248:	4b6f      	ldr	r3, [pc, #444]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a6e      	ldr	r2, [pc, #440]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800624e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	4b6c      	ldr	r3, [pc, #432]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a6b      	ldr	r2, [pc, #428]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800625a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fd fc66 	bl	8003b38 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006270:	f7fd fc62 	bl	8003b38 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	; 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e229      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	4b61      	ldr	r3, [pc, #388]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0xe8>
 800628e:	e014      	b.n	80062ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fd fc52 	bl	8003b38 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fd fc4e 	bl	8003b38 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	; 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e215      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062aa:	4b57      	ldr	r3, [pc, #348]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x110>
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d069      	beq.n	800639a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062c6:	4b50      	ldr	r3, [pc, #320]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062d2:	4b4d      	ldr	r3, [pc, #308]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d11c      	bne.n	8006318 <HAL_RCC_OscConfig+0x190>
 80062de:	4b4a      	ldr	r3, [pc, #296]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d116      	bne.n	8006318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ea:	4b47      	ldr	r3, [pc, #284]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_RCC_OscConfig+0x17a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d001      	beq.n	8006302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e1e9      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006302:	4b41      	ldr	r3, [pc, #260]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	493d      	ldr	r1, [pc, #244]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006316:	e040      	b.n	800639a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d023      	beq.n	8006368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006320:	4b39      	ldr	r3, [pc, #228]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a38      	ldr	r2, [pc, #224]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fd fc04 	bl	8003b38 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006334:	f7fd fc00 	bl	8003b38 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e1c7      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006346:	4b30      	ldr	r3, [pc, #192]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4929      	ldr	r1, [pc, #164]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
 8006366:	e018      	b.n	800639a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006368:	4b27      	ldr	r3, [pc, #156]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006374:	f7fd fbe0 	bl	8003b38 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637c:	f7fd fbdc 	bl	8003b38 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e1a3      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800638e:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d038      	beq.n	8006418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d019      	beq.n	80063e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ae:	4b16      	ldr	r3, [pc, #88]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80063b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ba:	f7fd fbbd 	bl	8003b38 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c2:	f7fd fbb9 	bl	8003b38 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e180      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80063d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0x23a>
 80063e0:	e01a      	b.n	8006418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e2:	4b09      	ldr	r3, [pc, #36]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80063e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e6:	4a08      	ldr	r2, [pc, #32]	; (8006408 <HAL_RCC_OscConfig+0x280>)
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ee:	f7fd fba3 	bl	8003b38 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f4:	e00a      	b.n	800640c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f6:	f7fd fb9f 	bl	8003b38 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d903      	bls.n	800640c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e166      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
 8006408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800640c:	4b92      	ldr	r3, [pc, #584]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 800640e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ee      	bne.n	80063f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80a4 	beq.w	800656e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006426:	4b8c      	ldr	r3, [pc, #560]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	4b89      	ldr	r3, [pc, #548]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	4a88      	ldr	r2, [pc, #544]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643c:	6413      	str	r3, [r2, #64]	; 0x40
 800643e:	4b86      	ldr	r3, [pc, #536]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800644e:	4b83      	ldr	r3, [pc, #524]	; (800665c <HAL_RCC_OscConfig+0x4d4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d118      	bne.n	800648c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800645a:	4b80      	ldr	r3, [pc, #512]	; (800665c <HAL_RCC_OscConfig+0x4d4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7f      	ldr	r2, [pc, #508]	; (800665c <HAL_RCC_OscConfig+0x4d4>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006466:	f7fd fb67 	bl	8003b38 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800646c:	e008      	b.n	8006480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800646e:	f7fd fb63 	bl	8003b38 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b64      	cmp	r3, #100	; 0x64
 800647a:	d901      	bls.n	8006480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e12a      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006480:	4b76      	ldr	r3, [pc, #472]	; (800665c <HAL_RCC_OscConfig+0x4d4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0f0      	beq.n	800646e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d106      	bne.n	80064a2 <HAL_RCC_OscConfig+0x31a>
 8006494:	4b70      	ldr	r3, [pc, #448]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006498:	4a6f      	ldr	r2, [pc, #444]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	6713      	str	r3, [r2, #112]	; 0x70
 80064a0:	e02d      	b.n	80064fe <HAL_RCC_OscConfig+0x376>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x33c>
 80064aa:	4b6b      	ldr	r3, [pc, #428]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a6a      	ldr	r2, [pc, #424]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
 80064b6:	4b68      	ldr	r3, [pc, #416]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	4a67      	ldr	r2, [pc, #412]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	6713      	str	r3, [r2, #112]	; 0x70
 80064c2:	e01c      	b.n	80064fe <HAL_RCC_OscConfig+0x376>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCC_OscConfig+0x35e>
 80064cc:	4b62      	ldr	r3, [pc, #392]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d0:	4a61      	ldr	r2, [pc, #388]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064d2:	f043 0304 	orr.w	r3, r3, #4
 80064d6:	6713      	str	r3, [r2, #112]	; 0x70
 80064d8:	4b5f      	ldr	r3, [pc, #380]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064dc:	4a5e      	ldr	r2, [pc, #376]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6713      	str	r3, [r2, #112]	; 0x70
 80064e4:	e00b      	b.n	80064fe <HAL_RCC_OscConfig+0x376>
 80064e6:	4b5c      	ldr	r3, [pc, #368]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	4a5b      	ldr	r2, [pc, #364]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	6713      	str	r3, [r2, #112]	; 0x70
 80064f2:	4b59      	ldr	r3, [pc, #356]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a58      	ldr	r2, [pc, #352]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80064f8:	f023 0304 	bic.w	r3, r3, #4
 80064fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d015      	beq.n	8006532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006506:	f7fd fb17 	bl	8003b38 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650c:	e00a      	b.n	8006524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fd fb13 	bl	8003b38 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e0d8      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006524:	4b4c      	ldr	r3, [pc, #304]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0ee      	beq.n	800650e <HAL_RCC_OscConfig+0x386>
 8006530:	e014      	b.n	800655c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006532:	f7fd fb01 	bl	8003b38 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006538:	e00a      	b.n	8006550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653a:	f7fd fafd 	bl	8003b38 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	f241 3288 	movw	r2, #5000	; 0x1388
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e0c2      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006550:	4b41      	ldr	r3, [pc, #260]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1ee      	bne.n	800653a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d105      	bne.n	800656e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006562:	4b3d      	ldr	r3, [pc, #244]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	4a3c      	ldr	r2, [pc, #240]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800656c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80ae 	beq.w	80066d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006578:	4b37      	ldr	r3, [pc, #220]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b08      	cmp	r3, #8
 8006582:	d06d      	beq.n	8006660 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d14b      	bne.n	8006624 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800658c:	4b32      	ldr	r3, [pc, #200]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a31      	ldr	r2, [pc, #196]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fd face 	bl	8003b38 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a0:	f7fd faca 	bl	8003b38 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e091      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b2:	4b29      	ldr	r3, [pc, #164]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69da      	ldr	r2, [r3, #28]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	019b      	lsls	r3, r3, #6
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	3b01      	subs	r3, #1
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	061b      	lsls	r3, r3, #24
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	071b      	lsls	r3, r3, #28
 80065ea:	491b      	ldr	r1, [pc, #108]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a18      	ldr	r2, [pc, #96]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 80065f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fd fa9c 	bl	8003b38 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006604:	f7fd fa98 	bl	8003b38 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e05f      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006616:	4b10      	ldr	r3, [pc, #64]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x47c>
 8006622:	e057      	b.n	80066d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800662e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fd fa82 	bl	8003b38 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006638:	f7fd fa7e 	bl	8003b38 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e045      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	4b03      	ldr	r3, [pc, #12]	; (8006658 <HAL_RCC_OscConfig+0x4d0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x4b0>
 8006656:	e03d      	b.n	80066d4 <HAL_RCC_OscConfig+0x54c>
 8006658:	40023800 	.word	0x40023800
 800665c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006660:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <HAL_RCC_OscConfig+0x558>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d030      	beq.n	80066d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d129      	bne.n	80066d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d122      	bne.n	80066d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006690:	4013      	ands	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006696:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006698:	4293      	cmp	r3, r2
 800669a:	d119      	bne.n	80066d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	3b01      	subs	r3, #1
 80066aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d10f      	bne.n	80066d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066bc:	429a      	cmp	r2, r3
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800

080066e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0d0      	b.n	800689e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066fc:	4b6a      	ldr	r3, [pc, #424]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d910      	bls.n	800672c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670a:	4b67      	ldr	r3, [pc, #412]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 020f 	bic.w	r2, r3, #15
 8006712:	4965      	ldr	r1, [pc, #404]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b63      	ldr	r3, [pc, #396]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b8      	b.n	800689e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d020      	beq.n	800677a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b59      	ldr	r3, [pc, #356]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 800674a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800675c:	4b53      	ldr	r3, [pc, #332]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a52      	ldr	r2, [pc, #328]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006768:	4b50      	ldr	r3, [pc, #320]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	494d      	ldr	r1, [pc, #308]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d040      	beq.n	8006808 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d115      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d107      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e073      	b.n	800689e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b6:	4b3d      	ldr	r3, [pc, #244]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e06b      	b.n	800689e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067c6:	4b39      	ldr	r3, [pc, #228]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f023 0203 	bic.w	r2, r3, #3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4936      	ldr	r1, [pc, #216]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d8:	f7fd f9ae 	bl	8003b38 <HAL_GetTick>
 80067dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e0:	f7fd f9aa 	bl	8003b38 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e053      	b.n	800689e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f6:	4b2d      	ldr	r3, [pc, #180]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 020c 	and.w	r2, r3, #12
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	429a      	cmp	r2, r3
 8006806:	d1eb      	bne.n	80067e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006808:	4b27      	ldr	r3, [pc, #156]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d210      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f023 020f 	bic.w	r2, r3, #15
 800681e:	4922      	ldr	r1, [pc, #136]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4313      	orrs	r3, r2
 8006824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e032      	b.n	800689e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4916      	ldr	r1, [pc, #88]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490e      	ldr	r1, [pc, #56]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006876:	f000 f821 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 800687a:	4601      	mov	r1, r0
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_ClockConfig+0x1c8>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <HAL_RCC_ClockConfig+0x1cc>)
 8006888:	5cd3      	ldrb	r3, [r2, r3]
 800688a:	fa21 f303 	lsr.w	r3, r1, r3
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_ClockConfig+0x1d4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fc ff62 	bl	8003760 <HAL_InitTick>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023c00 	.word	0x40023c00
 80068ac:	40023800 	.word	0x40023800
 80068b0:	08010164 	.word	0x08010164
 80068b4:	200000bc 	.word	0x200000bc
 80068b8:	200000c0 	.word	0x200000c0

080068bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	2300      	movs	r3, #0
 80068cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d2:	4b50      	ldr	r3, [pc, #320]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 030c 	and.w	r3, r3, #12
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d007      	beq.n	80068ee <HAL_RCC_GetSysClockFreq+0x32>
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d008      	beq.n	80068f4 <HAL_RCC_GetSysClockFreq+0x38>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f040 808d 	bne.w	8006a02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068e8:	4b4b      	ldr	r3, [pc, #300]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x15c>)
 80068ea:	60bb      	str	r3, [r7, #8]
      break;
 80068ec:	e08c      	b.n	8006a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ee:	4b4b      	ldr	r3, [pc, #300]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80068f0:	60bb      	str	r3, [r7, #8]
      break;
 80068f2:	e089      	b.n	8006a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068f4:	4b47      	ldr	r3, [pc, #284]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80068fe:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d023      	beq.n	8006952 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800690a:	4b42      	ldr	r3, [pc, #264]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x158>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	099b      	lsrs	r3, r3, #6
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	ea03 0501 	and.w	r5, r3, r1
 8006920:	ea04 0602 	and.w	r6, r4, r2
 8006924:	4a3d      	ldr	r2, [pc, #244]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006926:	fb02 f106 	mul.w	r1, r2, r6
 800692a:	2200      	movs	r2, #0
 800692c:	fb02 f205 	mul.w	r2, r2, r5
 8006930:	440a      	add	r2, r1
 8006932:	493a      	ldr	r1, [pc, #232]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006934:	fba5 0101 	umull	r0, r1, r5, r1
 8006938:	1853      	adds	r3, r2, r1
 800693a:	4619      	mov	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f04f 0400 	mov.w	r4, #0
 8006942:	461a      	mov	r2, r3
 8006944:	4623      	mov	r3, r4
 8006946:	f7f9 fcd3 	bl	80002f0 <__aeabi_uldivmod>
 800694a:	4603      	mov	r3, r0
 800694c:	460c      	mov	r4, r1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e049      	b.n	80069e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006952:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	099b      	lsrs	r3, r3, #6
 8006958:	f04f 0400 	mov.w	r4, #0
 800695c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	ea03 0501 	and.w	r5, r3, r1
 8006968:	ea04 0602 	and.w	r6, r4, r2
 800696c:	4629      	mov	r1, r5
 800696e:	4632      	mov	r2, r6
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	f04f 0400 	mov.w	r4, #0
 8006978:	0154      	lsls	r4, r2, #5
 800697a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800697e:	014b      	lsls	r3, r1, #5
 8006980:	4619      	mov	r1, r3
 8006982:	4622      	mov	r2, r4
 8006984:	1b49      	subs	r1, r1, r5
 8006986:	eb62 0206 	sbc.w	r2, r2, r6
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	f04f 0400 	mov.w	r4, #0
 8006992:	0194      	lsls	r4, r2, #6
 8006994:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006998:	018b      	lsls	r3, r1, #6
 800699a:	1a5b      	subs	r3, r3, r1
 800699c:	eb64 0402 	sbc.w	r4, r4, r2
 80069a0:	f04f 0100 	mov.w	r1, #0
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	00e2      	lsls	r2, r4, #3
 80069aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069ae:	00d9      	lsls	r1, r3, #3
 80069b0:	460b      	mov	r3, r1
 80069b2:	4614      	mov	r4, r2
 80069b4:	195b      	adds	r3, r3, r5
 80069b6:	eb44 0406 	adc.w	r4, r4, r6
 80069ba:	f04f 0100 	mov.w	r1, #0
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	02a2      	lsls	r2, r4, #10
 80069c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80069c8:	0299      	lsls	r1, r3, #10
 80069ca:	460b      	mov	r3, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	4621      	mov	r1, r4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f04f 0400 	mov.w	r4, #0
 80069d8:	461a      	mov	r2, r3
 80069da:	4623      	mov	r3, r4
 80069dc:	f7f9 fc88 	bl	80002f0 <__aeabi_uldivmod>
 80069e0:	4603      	mov	r3, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	0c1b      	lsrs	r3, r3, #16
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	3301      	adds	r3, #1
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fe:	60bb      	str	r3, [r7, #8]
      break;
 8006a00:	e002      	b.n	8006a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a04:	60bb      	str	r3, [r7, #8]
      break;
 8006a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a08:	68bb      	ldr	r3, [r7, #8]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40023800 	.word	0x40023800
 8006a18:	00f42400 	.word	0x00f42400
 8006a1c:	017d7840 	.word	0x017d7840

08006a20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	200000bc 	.word	0x200000bc

08006a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a3c:	f7ff fff0 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a40:	4601      	mov	r1, r0
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	0a9b      	lsrs	r3, r3, #10
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	4a03      	ldr	r2, [pc, #12]	; (8006a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a4e:	5cd3      	ldrb	r3, [r2, r3]
 8006a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	08010174 	.word	0x08010174

08006a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a64:	f7ff ffdc 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0b5b      	lsrs	r3, r3, #13
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4a03      	ldr	r2, [pc, #12]	; (8006a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a76:	5cd3      	ldrb	r3, [r2, r3]
 8006a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	08010174 	.word	0x08010174

08006a88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	220f      	movs	r2, #15
 8006a96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a98:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0203 	and.w	r2, r3, #3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006aa4:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	; (8006ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006abc:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	08db      	lsrs	r3, r3, #3
 8006ac2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006aca:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <HAL_RCC_GetClockConfig+0x60>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 020f 	and.w	r2, r3, #15
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	601a      	str	r2, [r3, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	40023c00 	.word	0x40023c00

08006aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d012      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b14:	4b69      	ldr	r3, [pc, #420]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4a68      	ldr	r2, [pc, #416]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b1e:	6093      	str	r3, [r2, #8]
 8006b20:	4b66      	ldr	r3, [pc, #408]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	4964      	ldr	r1, [pc, #400]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b36:	2301      	movs	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d017      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b46:	4b5d      	ldr	r3, [pc, #372]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b54:	4959      	ldr	r1, [pc, #356]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b64:	d101      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b66:	2301      	movs	r3, #1
 8006b68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b72:	2301      	movs	r3, #1
 8006b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d017      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b82:	4b4e      	ldr	r3, [pc, #312]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	494a      	ldr	r1, [pc, #296]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 808b 	beq.w	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bd0:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	4a39      	ldr	r2, [pc, #228]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bda:	6413      	str	r3, [r2, #64]	; 0x40
 8006bdc:	4b37      	ldr	r3, [pc, #220]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006be8:	4b35      	ldr	r3, [pc, #212]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a34      	ldr	r2, [pc, #208]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf4:	f7fc ffa0 	bl	8003b38 <HAL_GetTick>
 8006bf8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfc:	f7fc ff9c 	bl	8003b38 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b64      	cmp	r3, #100	; 0x64
 8006c08:	d901      	bls.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e38d      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c0e:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c1a:	4b28      	ldr	r3, [pc, #160]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d035      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d02e      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c38:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c42:	4b1e      	ldr	r3, [pc, #120]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	4a1d      	ldr	r2, [pc, #116]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c5a:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c60:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d114      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fc ff64 	bl	8003b38 <HAL_GetTick>
 8006c70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c72:	e00a      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c74:	f7fc ff60 	bl	8003b38 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e34f      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c8a:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0ee      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca2:	d111      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	4901      	ldr	r1, [pc, #4]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
 8006cba:	e00b      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40007000 	.word	0x40007000
 8006cc4:	0ffffcff 	.word	0x0ffffcff
 8006cc8:	4bb3      	ldr	r3, [pc, #716]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4ab2      	ldr	r2, [pc, #712]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cd2:	6093      	str	r3, [r2, #8]
 8006cd4:	4bb0      	ldr	r3, [pc, #704]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce0:	49ad      	ldr	r1, [pc, #692]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d010      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cf2:	4ba9      	ldr	r3, [pc, #676]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf8:	4aa7      	ldr	r2, [pc, #668]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d02:	4ba5      	ldr	r3, [pc, #660]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	49a2      	ldr	r1, [pc, #648]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d20:	4b9d      	ldr	r3, [pc, #628]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2e:	499a      	ldr	r1, [pc, #616]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d42:	4b95      	ldr	r3, [pc, #596]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d50:	4991      	ldr	r1, [pc, #580]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d64:	4b8c      	ldr	r3, [pc, #560]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d72:	4989      	ldr	r1, [pc, #548]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d86:	4b84      	ldr	r3, [pc, #528]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d94:	4980      	ldr	r1, [pc, #512]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006da8:	4b7b      	ldr	r3, [pc, #492]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dae:	f023 0203 	bic.w	r2, r3, #3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db6:	4978      	ldr	r1, [pc, #480]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dca:	4b73      	ldr	r3, [pc, #460]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd0:	f023 020c 	bic.w	r2, r3, #12
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dd8:	496f      	ldr	r1, [pc, #444]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dec:	4b6a      	ldr	r3, [pc, #424]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	4967      	ldr	r1, [pc, #412]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e0e:	4b62      	ldr	r3, [pc, #392]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	495e      	ldr	r1, [pc, #376]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e30:	4b59      	ldr	r3, [pc, #356]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	4956      	ldr	r1, [pc, #344]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e52:	4b51      	ldr	r3, [pc, #324]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e60:	494d      	ldr	r1, [pc, #308]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e74:	4b48      	ldr	r3, [pc, #288]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e82:	4945      	ldr	r1, [pc, #276]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e96:	4b40      	ldr	r3, [pc, #256]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea4:	493c      	ldr	r1, [pc, #240]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006eb8:	4b37      	ldr	r3, [pc, #220]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec6:	4934      	ldr	r1, [pc, #208]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d011      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006eda:	4b2f      	ldr	r3, [pc, #188]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee8:	492b      	ldr	r1, [pc, #172]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef8:	d101      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f1a:	4b1f      	ldr	r3, [pc, #124]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f28:	491b      	ldr	r1, [pc, #108]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f3c:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4c:	4912      	ldr	r1, [pc, #72]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006f60:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f70:	4909      	ldr	r1, [pc, #36]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	e002      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	4985      	ldr	r1, [pc, #532]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006fb0:	4b80      	ldr	r3, [pc, #512]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc0:	497c      	ldr	r1, [pc, #496]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d005      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fd6:	f040 80d6 	bne.w	8007186 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fda:	4b76      	ldr	r3, [pc, #472]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a75      	ldr	r2, [pc, #468]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fe0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe6:	f7fc fda7 	bl	8003b38 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fec:	e008      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fee:	f7fc fda3 	bl	8003b38 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b64      	cmp	r3, #100	; 0x64
 8006ffa:	d901      	bls.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e194      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007000:	4b6c      	ldr	r3, [pc, #432]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f0      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d021      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11d      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007020:	4b64      	ldr	r3, [pc, #400]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007026:	0c1b      	lsrs	r3, r3, #16
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800702e:	4b61      	ldr	r3, [pc, #388]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007034:	0e1b      	lsrs	r3, r3, #24
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	019a      	lsls	r2, r3, #6
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	431a      	orrs	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	061b      	lsls	r3, r3, #24
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	071b      	lsls	r3, r3, #28
 8007054:	4957      	ldr	r1, [pc, #348]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007070:	d00a      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800707a:	2b00      	cmp	r3, #0
 800707c:	d02e      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007086:	d129      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007088:	4b4a      	ldr	r3, [pc, #296]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800708a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800708e:	0c1b      	lsrs	r3, r3, #16
 8007090:	f003 0303 	and.w	r3, r3, #3
 8007094:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007096:	4b47      	ldr	r3, [pc, #284]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709c:	0f1b      	lsrs	r3, r3, #28
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	019a      	lsls	r2, r3, #6
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	431a      	orrs	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	061b      	lsls	r3, r3, #24
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	071b      	lsls	r3, r3, #28
 80070bc:	493d      	ldr	r1, [pc, #244]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070c4:	4b3b      	ldr	r3, [pc, #236]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	f023 021f 	bic.w	r2, r3, #31
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	3b01      	subs	r3, #1
 80070d4:	4937      	ldr	r1, [pc, #220]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01d      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070e8:	4b32      	ldr	r3, [pc, #200]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070f6:	4b2f      	ldr	r3, [pc, #188]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070fc:	0f1b      	lsrs	r3, r3, #28
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	019a      	lsls	r2, r3, #6
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	431a      	orrs	r2, r3
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	061b      	lsls	r3, r3, #24
 8007116:	431a      	orrs	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	071b      	lsls	r3, r3, #28
 800711c:	4925      	ldr	r1, [pc, #148]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d011      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	019a      	lsls	r2, r3, #6
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	431a      	orrs	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	061b      	lsls	r3, r3, #24
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	071b      	lsls	r3, r3, #28
 800714c:	4919      	ldr	r1, [pc, #100]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007154:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800715a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800715e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007160:	f7fc fcea 	bl	8003b38 <HAL_GetTick>
 8007164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007166:	e008      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007168:	f7fc fce6 	bl	8003b38 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b64      	cmp	r3, #100	; 0x64
 8007174:	d901      	bls.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e0d7      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800717a:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b01      	cmp	r3, #1
 800718a:	f040 80cd 	bne.w	8007328 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800718e:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800719a:	f7fc fccd 	bl	8003b38 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071a0:	e00a      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071a2:	f7fc fcc9 	bl	8003b38 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b64      	cmp	r3, #100	; 0x64
 80071ae:	d903      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e0ba      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80071b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071b8:	4b5e      	ldr	r3, [pc, #376]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071c4:	d0ed      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d02e      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d12a      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071ee:	4b51      	ldr	r3, [pc, #324]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	0c1b      	lsrs	r3, r3, #16
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071fc:	4b4d      	ldr	r3, [pc, #308]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	0f1b      	lsrs	r3, r3, #28
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	019a      	lsls	r2, r3, #6
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	431a      	orrs	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	061b      	lsls	r3, r3, #24
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	071b      	lsls	r3, r3, #28
 8007222:	4944      	ldr	r1, [pc, #272]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800722a:	4b42      	ldr	r3, [pc, #264]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800722c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007230:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	3b01      	subs	r3, #1
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	493d      	ldr	r1, [pc, #244]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d022      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007258:	d11d      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800725a:	4b36      	ldr	r3, [pc, #216]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800725c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007268:	4b32      	ldr	r3, [pc, #200]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726e:	0f1b      	lsrs	r3, r3, #28
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	019a      	lsls	r2, r3, #6
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	431a      	orrs	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	431a      	orrs	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	071b      	lsls	r3, r3, #28
 800728e:	4929      	ldr	r1, [pc, #164]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d028      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a8:	0e1b      	lsrs	r3, r3, #24
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072b0:	4b20      	ldr	r3, [pc, #128]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	f003 0303 	and.w	r3, r3, #3
 80072bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	019a      	lsls	r2, r3, #6
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	431a      	orrs	r2, r3
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	071b      	lsls	r3, r3, #28
 80072d6:	4917      	ldr	r1, [pc, #92]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072de:	4b15      	ldr	r3, [pc, #84]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	4911      	ldr	r1, [pc, #68]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072f4:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a0e      	ldr	r2, [pc, #56]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007300:	f7fc fc1a 	bl	8003b38 <HAL_GetTick>
 8007304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007306:	e008      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007308:	f7fc fc16 	bl	8003b38 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b64      	cmp	r3, #100	; 0x64
 8007314:	d901      	bls.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e007      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007326:	d1ef      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40023800 	.word	0x40023800

08007338 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e06b      	b.n	8007422 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	7f5b      	ldrb	r3, [r3, #29]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fb ff70 	bl	8003240 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	22ca      	movs	r2, #202	; 0xca
 800736c:	625a      	str	r2, [r3, #36]	; 0x24
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2253      	movs	r2, #83	; 0x53
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f85a 	bl	8007430 <RTC_EnterInitMode>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d008      	beq.n	8007394 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	22ff      	movs	r2, #255	; 0xff
 8007388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2204      	movs	r2, #4
 800738e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e046      	b.n	8007422 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6899      	ldr	r1, [r3, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b23      	ldr	r3, [pc, #140]	; (800742c <HAL_RTC_Init+0xf4>)
 80073a0:	400b      	ands	r3, r1
 80073a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6899      	ldr	r1, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	68d2      	ldr	r2, [r2, #12]
 80073ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6919      	ldr	r1, [r3, #16]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	041a      	lsls	r2, r3, #16
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073ee:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0208 	bic.w	r2, r2, #8
 80073fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	22ff      	movs	r2, #255	; 0xff
 8007418:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007420:	2300      	movs	r3, #0
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	ff8fffbf 	.word	0xff8fffbf

08007430 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d119      	bne.n	800747e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f04f 32ff 	mov.w	r2, #4294967295
 8007452:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007454:	f7fc fb70 	bl	8003b38 <HAL_GetTick>
 8007458:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800745a:	e009      	b.n	8007470 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800745c:	f7fc fb6c 	bl	8003b38 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800746a:	d901      	bls.n	8007470 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e007      	b.n	8007480 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0ee      	beq.n	800745c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e084      	b.n	80075a4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fb fedd 	bl	8003274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074da:	d902      	bls.n	80074e2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	e002      	b.n	80074e8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074f0:	d007      	beq.n	8007502 <HAL_SPI_Init+0x7a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074fa:	d002      	beq.n	8007502 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007512:	d903      	bls.n	800751c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
 800751a:	e002      	b.n	8007522 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	ea42 0103 	orr.w	r1, r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	0c1b      	lsrs	r3, r3, #16
 8007562:	f003 0204 	and.w	r2, r3, #4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	ea42 0103 	orr.w	r1, r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	430a      	orrs	r2, r1
 8007582:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69da      	ldr	r2, [r3, #28]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007592:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_SPI_Transmit+0x22>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e150      	b.n	8007870 <HAL_SPI_Transmit+0x2c4>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075d6:	f7fc faaf 	bl	8003b38 <HAL_GetTick>
 80075da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d002      	beq.n	80075f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075ec:	2302      	movs	r3, #2
 80075ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075f0:	e135      	b.n	800785e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_SPI_Transmit+0x52>
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d102      	bne.n	8007604 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007602:	e12c      	b.n	800785e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2203      	movs	r2, #3
 8007608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764e:	d107      	bne.n	8007660 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800765e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d007      	beq.n	800767e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800767c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007686:	d94b      	bls.n	8007720 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <HAL_SPI_Transmit+0xea>
 8007690:	8afb      	ldrh	r3, [r7, #22]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d13e      	bne.n	8007714 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	881a      	ldrh	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	1c9a      	adds	r2, r3, #2
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076ba:	e02b      	b.n	8007714 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d112      	bne.n	80076f0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	1c9a      	adds	r2, r3, #2
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076ee:	e011      	b.n	8007714 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076f0:	f7fc fa22 	bl	8003b38 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d803      	bhi.n	8007708 <HAL_SPI_Transmit+0x15c>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d102      	bne.n	800770e <HAL_SPI_Transmit+0x162>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d102      	bne.n	8007714 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007712:	e0a4      	b.n	800785e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1ce      	bne.n	80076bc <HAL_SPI_Transmit+0x110>
 800771e:	e07c      	b.n	800781a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <HAL_SPI_Transmit+0x182>
 8007728:	8afb      	ldrh	r3, [r7, #22]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d170      	bne.n	8007810 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	d912      	bls.n	800775e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	881a      	ldrh	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	1c9a      	adds	r2, r3, #2
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b02      	subs	r3, #2
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800775c:	e058      	b.n	8007810 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	330c      	adds	r3, #12
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007784:	e044      	b.n	8007810 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b02      	cmp	r3, #2
 8007792:	d12b      	bne.n	80077ec <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	d912      	bls.n	80077c4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	1c9a      	adds	r2, r3, #2
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b02      	subs	r3, #2
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077c2:	e025      	b.n	8007810 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077ea:	e011      	b.n	8007810 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077ec:	f7fc f9a4 	bl	8003b38 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d803      	bhi.n	8007804 <HAL_SPI_Transmit+0x258>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d102      	bne.n	800780a <HAL_SPI_Transmit+0x25e>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800780e:	e026      	b.n	800785e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1b5      	bne.n	8007786 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fa20 	bl	8007c64 <SPI_EndRxTxTransaction>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2220      	movs	r2, #32
 800782e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007838:	2300      	movs	r3, #0
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	77fb      	strb	r3, [r7, #31]
 800785a:	e000      	b.n	800785e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800785c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800786e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	099b      	lsrs	r3, r3, #6
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10f      	bne.n	80078bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	099b      	lsrs	r3, r3, #6
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
    return;
 80078ba:	e0d8      	b.n	8007a6e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <HAL_SPI_IRQHandler+0x66>
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	09db      	lsrs	r3, r3, #7
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
    return;
 80078dc:	e0c7      	b.n	8007a6e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10c      	bne.n	8007904 <HAL_SPI_IRQHandler+0x8c>
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	099b      	lsrs	r3, r3, #6
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_SPI_IRQHandler+0x8c>
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	0a1b      	lsrs	r3, r3, #8
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80b5 	beq.w	8007a6e <HAL_SPI_IRQHandler+0x1f6>
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80ae 	beq.w	8007a6e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	099b      	lsrs	r3, r3, #6
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d023      	beq.n	8007966 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d011      	beq.n	800794e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792e:	f043 0204 	orr.w	r2, r3, #4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	e00b      	b.n	8007966 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	693b      	ldr	r3, [r7, #16]
        return;
 8007964:	e083      	b.n	8007a6e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d014      	beq.n	800799c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007976:	f043 0201 	orr.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00c      	beq.n	80079c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ac:	f043 0208 	orr.w	r2, r3, #8
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079b4:	2300      	movs	r3, #0
 80079b6:	60bb      	str	r3, [r7, #8]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	60bb      	str	r3, [r7, #8]
 80079c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d050      	beq.n	8007a6c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <HAL_SPI_IRQHandler+0x17e>
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d034      	beq.n	8007a60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0203 	bic.w	r2, r2, #3
 8007a04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d011      	beq.n	8007a32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <HAL_SPI_IRQHandler+0x1fc>)
 8007a14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fd f8c6 	bl	8004bac <HAL_DMA_Abort_IT>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d016      	beq.n	8007a68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	4a0d      	ldr	r2, [pc, #52]	; (8007a74 <HAL_SPI_IRQHandler+0x1fc>)
 8007a40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fd f8b0 	bl	8004bac <HAL_DMA_Abort_IT>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007a5e:	e003      	b.n	8007a68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f809 	bl	8007a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a66:	e000      	b.n	8007a6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007a68:	bf00      	nop
    return;
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
  }
}
 8007a6e:	3720      	adds	r7, #32
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	08007a8d 	.word	0x08007a8d

08007a78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff ffe5 	bl	8007a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ac6:	e04c      	b.n	8007b62 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d048      	beq.n	8007b62 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007ad0:	f7fc f832 	bl	8003b38 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d902      	bls.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d13d      	bne.n	8007b62 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007afe:	d111      	bne.n	8007b24 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b08:	d004      	beq.n	8007b14 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b12:	d107      	bne.n	8007b24 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2c:	d10f      	bne.n	8007b4e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e00f      	b.n	8007b82 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	bf0c      	ite	eq
 8007b72:	2301      	moveq	r3, #1
 8007b74:	2300      	movne	r3, #0
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d1a3      	bne.n	8007ac8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b98:	e057      	b.n	8007c4a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ba0:	d106      	bne.n	8007bb0 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d048      	beq.n	8007c4a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007bb8:	f7fb ffbe 	bl	8003b38 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d902      	bls.n	8007bce <SPI_WaitFifoStateUntilTimeout+0x44>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d13d      	bne.n	8007c4a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007be6:	d111      	bne.n	8007c0c <SPI_WaitFifoStateUntilTimeout+0x82>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bf0:	d004      	beq.n	8007bfc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfa:	d107      	bne.n	8007c0c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c14:	d10f      	bne.n	8007c36 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e008      	b.n	8007c5c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4013      	ands	r3, r2
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d19f      	bne.n	8007b9a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff ff84 	bl	8007b8a <SPI_WaitFifoStateUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8c:	f043 0220 	orr.w	r2, r3, #32
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e027      	b.n	8007ce8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2180      	movs	r1, #128	; 0x80
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff ff07 	bl	8007ab6 <SPI_WaitFlagStateUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d007      	beq.n	8007cbe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb2:	f043 0220 	orr.w	r2, r3, #32
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e014      	b.n	8007ce8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff ff5d 	bl	8007b8a <SPI_WaitFifoStateUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cda:	f043 0220 	orr.w	r2, r3, #32
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e000      	b.n	8007ce8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e01d      	b.n	8007d3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fb fb48 	bl	80033ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	f000 fb82 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <HAL_TIM_Base_Start_IT+0x50>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b06      	cmp	r3, #6
 8007d70:	d00b      	beq.n	8007d8a <HAL_TIM_Base_Start_IT+0x42>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d78:	d007      	beq.n	8007d8a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0201 	orr.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	00010007 	.word	0x00010007

08007d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e01d      	b.n	8007dea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f815 	bl	8007df2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f000 fb2c 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d122      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d11b      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f06f 0202 	mvn.w	r2, #2
 8007e32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fad7 	bl	80083fc <HAL_TIM_IC_CaptureCallback>
 8007e4e:	e005      	b.n	8007e5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fac9 	bl	80083e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fada 	bl	8008410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d122      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	d11b      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f06f 0204 	mvn.w	r2, #4
 8007e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 faad 	bl	80083fc <HAL_TIM_IC_CaptureCallback>
 8007ea2:	e005      	b.n	8007eb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa9f 	bl	80083e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fab0 	bl	8008410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d122      	bne.n	8007f0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d11b      	bne.n	8007f0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f06f 0208 	mvn.w	r2, #8
 8007eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2204      	movs	r2, #4
 8007ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa83 	bl	80083fc <HAL_TIM_IC_CaptureCallback>
 8007ef6:	e005      	b.n	8007f04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fa75 	bl	80083e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa86 	bl	8008410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0310 	and.w	r3, r3, #16
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d122      	bne.n	8007f5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f003 0310 	and.w	r3, r3, #16
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d11b      	bne.n	8007f5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f06f 0210 	mvn.w	r2, #16
 8007f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2208      	movs	r2, #8
 8007f34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa59 	bl	80083fc <HAL_TIM_IC_CaptureCallback>
 8007f4a:	e005      	b.n	8007f58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fa4b 	bl	80083e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa5c 	bl	8008410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d10e      	bne.n	8007f8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d107      	bne.n	8007f8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f06f 0201 	mvn.w	r2, #1
 8007f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7fa fe37 	bl	8002bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f94:	2b80      	cmp	r3, #128	; 0x80
 8007f96:	d10e      	bne.n	8007fb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa2:	2b80      	cmp	r3, #128	; 0x80
 8007fa4:	d107      	bne.n	8007fb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fe71 	bl	8008c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc4:	d10e      	bne.n	8007fe4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd0:	2b80      	cmp	r3, #128	; 0x80
 8007fd2:	d107      	bne.n	8007fe4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fe64 	bl	8008cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d10e      	bne.n	8008010 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffc:	2b40      	cmp	r3, #64	; 0x40
 8007ffe:	d107      	bne.n	8008010 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa0a 	bl	8008424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b20      	cmp	r3, #32
 800801c:	d10e      	bne.n	800803c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b20      	cmp	r3, #32
 800802a:	d107      	bne.n	800803c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f06f 0220 	mvn.w	r2, #32
 8008034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fe24 	bl	8008c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800805a:	2302      	movs	r3, #2
 800805c:	e105      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x226>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2202      	movs	r2, #2
 800806a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b14      	cmp	r3, #20
 8008072:	f200 80f0 	bhi.w	8008256 <HAL_TIM_PWM_ConfigChannel+0x212>
 8008076:	a201      	add	r2, pc, #4	; (adr r2, 800807c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	080080d1 	.word	0x080080d1
 8008080:	08008257 	.word	0x08008257
 8008084:	08008257 	.word	0x08008257
 8008088:	08008257 	.word	0x08008257
 800808c:	08008111 	.word	0x08008111
 8008090:	08008257 	.word	0x08008257
 8008094:	08008257 	.word	0x08008257
 8008098:	08008257 	.word	0x08008257
 800809c:	08008153 	.word	0x08008153
 80080a0:	08008257 	.word	0x08008257
 80080a4:	08008257 	.word	0x08008257
 80080a8:	08008257 	.word	0x08008257
 80080ac:	08008193 	.word	0x08008193
 80080b0:	08008257 	.word	0x08008257
 80080b4:	08008257 	.word	0x08008257
 80080b8:	08008257 	.word	0x08008257
 80080bc:	080081d5 	.word	0x080081d5
 80080c0:	08008257 	.word	0x08008257
 80080c4:	08008257 	.word	0x08008257
 80080c8:	08008257 	.word	0x08008257
 80080cc:	08008215 	.word	0x08008215
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fa4e 	bl	8008578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f042 0208 	orr.w	r2, r2, #8
 80080ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0204 	bic.w	r2, r2, #4
 80080fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6999      	ldr	r1, [r3, #24]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	691a      	ldr	r2, [r3, #16]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	619a      	str	r2, [r3, #24]
      break;
 800810e:	e0a3      	b.n	8008258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	4618      	mov	r0, r3
 8008118:	f000 faa0 	bl	800865c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699a      	ldr	r2, [r3, #24]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800812a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800813a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6999      	ldr	r1, [r3, #24]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	021a      	lsls	r2, r3, #8
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	619a      	str	r2, [r3, #24]
      break;
 8008150:	e082      	b.n	8008258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68b9      	ldr	r1, [r7, #8]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 faf7 	bl	800874c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0208 	orr.w	r2, r2, #8
 800816c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	69da      	ldr	r2, [r3, #28]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0204 	bic.w	r2, r2, #4
 800817c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69d9      	ldr	r1, [r3, #28]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	61da      	str	r2, [r3, #28]
      break;
 8008190:	e062      	b.n	8008258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fb4d 	bl	8008838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69da      	ldr	r2, [r3, #28]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69d9      	ldr	r1, [r3, #28]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	021a      	lsls	r2, r3, #8
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	61da      	str	r2, [r3, #28]
      break;
 80081d2:	e041      	b.n	8008258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fb84 	bl	80088e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0208 	orr.w	r2, r2, #8
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0204 	bic.w	r2, r2, #4
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008212:	e021      	b.n	8008258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fbb6 	bl	800898c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800822e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800823e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	021a      	lsls	r2, r3, #8
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008254:	e000      	b.n	8008258 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008256:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop

08008274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_TIM_ConfigClockSource+0x18>
 8008288:	2302      	movs	r3, #2
 800828a:	e0a6      	b.n	80083da <HAL_TIM_ConfigClockSource+0x166>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	4b4f      	ldr	r3, [pc, #316]	; (80083e4 <HAL_TIM_ConfigClockSource+0x170>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	d067      	beq.n	8008394 <HAL_TIM_ConfigClockSource+0x120>
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	d80b      	bhi.n	80082e0 <HAL_TIM_ConfigClockSource+0x6c>
 80082c8:	2b10      	cmp	r3, #16
 80082ca:	d073      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x140>
 80082cc:	2b10      	cmp	r3, #16
 80082ce:	d802      	bhi.n	80082d6 <HAL_TIM_ConfigClockSource+0x62>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d06f      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80082d4:	e078      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d06c      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x140>
 80082da:	2b30      	cmp	r3, #48	; 0x30
 80082dc:	d06a      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80082de:	e073      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082e0:	2b70      	cmp	r3, #112	; 0x70
 80082e2:	d00d      	beq.n	8008300 <HAL_TIM_ConfigClockSource+0x8c>
 80082e4:	2b70      	cmp	r3, #112	; 0x70
 80082e6:	d804      	bhi.n	80082f2 <HAL_TIM_ConfigClockSource+0x7e>
 80082e8:	2b50      	cmp	r3, #80	; 0x50
 80082ea:	d033      	beq.n	8008354 <HAL_TIM_ConfigClockSource+0xe0>
 80082ec:	2b60      	cmp	r3, #96	; 0x60
 80082ee:	d041      	beq.n	8008374 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80082f0:	e06a      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f6:	d066      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0x152>
 80082f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fc:	d017      	beq.n	800832e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80082fe:	e063      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	6899      	ldr	r1, [r3, #8]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f000 fc0a 	bl	8008b28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008322:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	609a      	str	r2, [r3, #8]
      break;
 800832c:	e04c      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6899      	ldr	r1, [r3, #8]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f000 fbf3 	bl	8008b28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008350:	609a      	str	r2, [r3, #8]
      break;
 8008352:	e039      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	461a      	mov	r2, r3
 8008362:	f000 fb67 	bl	8008a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2150      	movs	r1, #80	; 0x50
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fbc0 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 8008372:	e029      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	6859      	ldr	r1, [r3, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	461a      	mov	r2, r3
 8008382:	f000 fb86 	bl	8008a92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2160      	movs	r1, #96	; 0x60
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fbb0 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 8008392:	e019      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6859      	ldr	r1, [r3, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	461a      	mov	r2, r3
 80083a2:	f000 fb47 	bl	8008a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2140      	movs	r1, #64	; 0x40
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 fba0 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 80083b2:	e009      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f000 fb97 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 80083c4:	e000      	b.n	80083c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80083c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	fffeff88 	.word	0xfffeff88

080083e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a40      	ldr	r2, [pc, #256]	; (800854c <TIM_Base_SetConfig+0x114>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008456:	d00f      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a3d      	ldr	r2, [pc, #244]	; (8008550 <TIM_Base_SetConfig+0x118>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a3c      	ldr	r2, [pc, #240]	; (8008554 <TIM_Base_SetConfig+0x11c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a3b      	ldr	r2, [pc, #236]	; (8008558 <TIM_Base_SetConfig+0x120>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_Base_SetConfig+0x40>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a3a      	ldr	r2, [pc, #232]	; (800855c <TIM_Base_SetConfig+0x124>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d108      	bne.n	800848a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800847e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a2f      	ldr	r2, [pc, #188]	; (800854c <TIM_Base_SetConfig+0x114>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d02b      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008498:	d027      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a2c      	ldr	r2, [pc, #176]	; (8008550 <TIM_Base_SetConfig+0x118>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d023      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a2b      	ldr	r2, [pc, #172]	; (8008554 <TIM_Base_SetConfig+0x11c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01f      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a2a      	ldr	r2, [pc, #168]	; (8008558 <TIM_Base_SetConfig+0x120>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d01b      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a29      	ldr	r2, [pc, #164]	; (800855c <TIM_Base_SetConfig+0x124>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d017      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a28      	ldr	r2, [pc, #160]	; (8008560 <TIM_Base_SetConfig+0x128>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a27      	ldr	r2, [pc, #156]	; (8008564 <TIM_Base_SetConfig+0x12c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00f      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a26      	ldr	r2, [pc, #152]	; (8008568 <TIM_Base_SetConfig+0x130>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00b      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a25      	ldr	r2, [pc, #148]	; (800856c <TIM_Base_SetConfig+0x134>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d007      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a24      	ldr	r2, [pc, #144]	; (8008570 <TIM_Base_SetConfig+0x138>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d003      	beq.n	80084ea <TIM_Base_SetConfig+0xb2>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a23      	ldr	r2, [pc, #140]	; (8008574 <TIM_Base_SetConfig+0x13c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d108      	bne.n	80084fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a0a      	ldr	r2, [pc, #40]	; (800854c <TIM_Base_SetConfig+0x114>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d003      	beq.n	8008530 <TIM_Base_SetConfig+0xf8>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a0c      	ldr	r2, [pc, #48]	; (800855c <TIM_Base_SetConfig+0x124>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d103      	bne.n	8008538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	691a      	ldr	r2, [r3, #16]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	615a      	str	r2, [r3, #20]
}
 800853e:	bf00      	nop
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	40010000 	.word	0x40010000
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40010400 	.word	0x40010400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800
 800856c:	40001800 	.word	0x40001800
 8008570:	40001c00 	.word	0x40001c00
 8008574:	40002000 	.word	0x40002000

08008578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	f023 0201 	bic.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4b2b      	ldr	r3, [pc, #172]	; (8008650 <TIM_OC1_SetConfig+0xd8>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f023 0302 	bic.w	r3, r3, #2
 80085c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a21      	ldr	r2, [pc, #132]	; (8008654 <TIM_OC1_SetConfig+0xdc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <TIM_OC1_SetConfig+0x64>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a20      	ldr	r2, [pc, #128]	; (8008658 <TIM_OC1_SetConfig+0xe0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d10c      	bne.n	80085f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f023 0308 	bic.w	r3, r3, #8
 80085e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f023 0304 	bic.w	r3, r3, #4
 80085f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a16      	ldr	r2, [pc, #88]	; (8008654 <TIM_OC1_SetConfig+0xdc>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d003      	beq.n	8008606 <TIM_OC1_SetConfig+0x8e>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a15      	ldr	r2, [pc, #84]	; (8008658 <TIM_OC1_SetConfig+0xe0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d111      	bne.n	800862a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800860c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	621a      	str	r2, [r3, #32]
}
 8008644:	bf00      	nop
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	fffeff8f 	.word	0xfffeff8f
 8008654:	40010000 	.word	0x40010000
 8008658:	40010400 	.word	0x40010400

0800865c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f023 0210 	bic.w	r2, r3, #16
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4b2e      	ldr	r3, [pc, #184]	; (8008740 <TIM_OC2_SetConfig+0xe4>)
 8008688:	4013      	ands	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f023 0320 	bic.w	r3, r3, #32
 80086a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a23      	ldr	r2, [pc, #140]	; (8008744 <TIM_OC2_SetConfig+0xe8>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_OC2_SetConfig+0x68>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a22      	ldr	r2, [pc, #136]	; (8008748 <TIM_OC2_SetConfig+0xec>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d10d      	bne.n	80086e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a18      	ldr	r2, [pc, #96]	; (8008744 <TIM_OC2_SetConfig+0xe8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d003      	beq.n	80086f0 <TIM_OC2_SetConfig+0x94>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <TIM_OC2_SetConfig+0xec>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d113      	bne.n	8008718 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	feff8fff 	.word	0xfeff8fff
 8008744:	40010000 	.word	0x40010000
 8008748:	40010400 	.word	0x40010400

0800874c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4b2d      	ldr	r3, [pc, #180]	; (800882c <TIM_OC3_SetConfig+0xe0>)
 8008778:	4013      	ands	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 0303 	bic.w	r3, r3, #3
 8008782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a22      	ldr	r2, [pc, #136]	; (8008830 <TIM_OC3_SetConfig+0xe4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_OC3_SetConfig+0x66>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a21      	ldr	r2, [pc, #132]	; (8008834 <TIM_OC3_SetConfig+0xe8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d10d      	bne.n	80087ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <TIM_OC3_SetConfig+0xe4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d003      	beq.n	80087de <TIM_OC3_SetConfig+0x92>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a16      	ldr	r2, [pc, #88]	; (8008834 <TIM_OC3_SetConfig+0xe8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d113      	bne.n	8008806 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	011b      	lsls	r3, r3, #4
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	621a      	str	r2, [r3, #32]
}
 8008820:	bf00      	nop
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	fffeff8f 	.word	0xfffeff8f
 8008830:	40010000 	.word	0x40010000
 8008834:	40010400 	.word	0x40010400

08008838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <TIM_OC4_SetConfig+0xa4>)
 8008864:	4013      	ands	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800886e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	031b      	lsls	r3, r3, #12
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	4313      	orrs	r3, r2
 800888e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <TIM_OC4_SetConfig+0xa8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d003      	beq.n	80088a0 <TIM_OC4_SetConfig+0x68>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <TIM_OC4_SetConfig+0xac>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d109      	bne.n	80088b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	019b      	lsls	r3, r3, #6
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	621a      	str	r2, [r3, #32]
}
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	feff8fff 	.word	0xfeff8fff
 80088e0:	40010000 	.word	0x40010000
 80088e4:	40010400 	.word	0x40010400

080088e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <TIM_OC5_SetConfig+0x98>)
 8008914:	4013      	ands	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008928:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a12      	ldr	r2, [pc, #72]	; (8008984 <TIM_OC5_SetConfig+0x9c>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_OC5_SetConfig+0x5e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a11      	ldr	r2, [pc, #68]	; (8008988 <TIM_OC5_SetConfig+0xa0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d109      	bne.n	800895a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	621a      	str	r2, [r3, #32]
}
 8008974:	bf00      	nop
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	fffeff8f 	.word	0xfffeff8f
 8008984:	40010000 	.word	0x40010000
 8008988:	40010400 	.word	0x40010400

0800898c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4b1c      	ldr	r3, [pc, #112]	; (8008a28 <TIM_OC6_SetConfig+0x9c>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	051b      	lsls	r3, r3, #20
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a13      	ldr	r2, [pc, #76]	; (8008a2c <TIM_OC6_SetConfig+0xa0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d003      	beq.n	80089ec <TIM_OC6_SetConfig+0x60>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a12      	ldr	r2, [pc, #72]	; (8008a30 <TIM_OC6_SetConfig+0xa4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d109      	bne.n	8008a00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	029b      	lsls	r3, r3, #10
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	621a      	str	r2, [r3, #32]
}
 8008a1a:	bf00      	nop
 8008a1c:	371c      	adds	r7, #28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	feff8fff 	.word	0xfeff8fff
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40010400 	.word	0x40010400

08008a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	f023 0201 	bic.w	r2, r3, #1
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f023 030a 	bic.w	r3, r3, #10
 8008a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	621a      	str	r2, [r3, #32]
}
 8008a86:	bf00      	nop
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b087      	sub	sp, #28
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f023 0210 	bic.w	r2, r3, #16
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	031b      	lsls	r3, r3, #12
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	621a      	str	r2, [r3, #32]
}
 8008ae6:	bf00      	nop
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b0a:	683a      	ldr	r2, [r7, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f043 0307 	orr.w	r3, r3, #7
 8008b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	609a      	str	r2, [r3, #8]
}
 8008b1c:	bf00      	nop
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	021a      	lsls	r2, r3, #8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	609a      	str	r2, [r3, #8]
}
 8008b5c:	bf00      	nop
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e06d      	b.n	8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a30      	ldr	r2, [pc, #192]	; (8008c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d004      	beq.n	8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a2f      	ldr	r2, [pc, #188]	; (8008c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d108      	bne.n	8008bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a20      	ldr	r2, [pc, #128]	; (8008c68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d022      	beq.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf2:	d01d      	beq.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a1d      	ldr	r2, [pc, #116]	; (8008c70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d018      	beq.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a1c      	ldr	r2, [pc, #112]	; (8008c74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d013      	beq.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a1a      	ldr	r2, [pc, #104]	; (8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00e      	beq.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a15      	ldr	r2, [pc, #84]	; (8008c6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d009      	beq.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a16      	ldr	r2, [pc, #88]	; (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d004      	beq.n	8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a15      	ldr	r2, [pc, #84]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10c      	bne.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	40010000 	.word	0x40010000
 8008c6c:	40010400 	.word	0x40010400
 8008c70:	40000400 	.word	0x40000400
 8008c74:	40000800 	.word	0x40000800
 8008c78:	40000c00 	.word	0x40000c00
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40001800 	.word	0x40001800

08008c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e040      	b.n	8008d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d106      	bne.n	8008ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7fa fbf4 	bl	80034d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2224      	movs	r2, #36	; 0x24
 8008cec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 0201 	bic.w	r2, r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f8be 	bl	8008e80 <UART_SetConfig>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e022      	b.n	8008d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fb5c 	bl	80093d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689a      	ldr	r2, [r3, #8]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fbe3 	bl	8009518 <UART_CheckIdleState>
 8008d52:	4603      	mov	r3, r0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08a      	sub	sp, #40	; 0x28
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	d17f      	bne.n	8008e74 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <HAL_UART_Transmit+0x24>
 8008d7a:	88fb      	ldrh	r3, [r7, #6]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e078      	b.n	8008e76 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d101      	bne.n	8008d92 <HAL_UART_Transmit+0x36>
 8008d8e:	2302      	movs	r3, #2
 8008d90:	e071      	b.n	8008e76 <HAL_UART_Transmit+0x11a>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2221      	movs	r2, #33	; 0x21
 8008da4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008da6:	f7fa fec7 	bl	8003b38 <HAL_GetTick>
 8008daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	88fa      	ldrh	r2, [r7, #6]
 8008db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc4:	d108      	bne.n	8008dd8 <HAL_UART_Transmit+0x7c>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e003      	b.n	8008de0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008de8:	e02c      	b.n	8008e44 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2200      	movs	r2, #0
 8008df2:	2180      	movs	r1, #128	; 0x80
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 fbd4 	bl	80095a2 <UART_WaitOnFlagUntilTimeout>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e038      	b.n	8008e76 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	61bb      	str	r3, [r7, #24]
 8008e20:	e007      	b.n	8008e32 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	781a      	ldrb	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1cc      	bne.n	8008dea <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2200      	movs	r2, #0
 8008e58:	2140      	movs	r1, #64	; 0x40
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fba1 	bl	80095a2 <UART_WaitOnFlagUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e005      	b.n	8008e76 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e000      	b.n	8008e76 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008e74:	2302      	movs	r3, #2
  }
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3720      	adds	r7, #32
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4bb1      	ldr	r3, [pc, #708]	; (8009174 <UART_SetConfig+0x2f4>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6812      	ldr	r2, [r2, #0]
 8008eb6:	6939      	ldr	r1, [r7, #16]
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a9f      	ldr	r2, [pc, #636]	; (8009178 <UART_SetConfig+0x2f8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d121      	bne.n	8008f44 <UART_SetConfig+0xc4>
 8008f00:	4b9e      	ldr	r3, [pc, #632]	; (800917c <UART_SetConfig+0x2fc>)
 8008f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d816      	bhi.n	8008f3c <UART_SetConfig+0xbc>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <UART_SetConfig+0x94>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f25 	.word	0x08008f25
 8008f18:	08008f31 	.word	0x08008f31
 8008f1c:	08008f2b 	.word	0x08008f2b
 8008f20:	08008f37 	.word	0x08008f37
 8008f24:	2301      	movs	r3, #1
 8008f26:	77fb      	strb	r3, [r7, #31]
 8008f28:	e151      	b.n	80091ce <UART_SetConfig+0x34e>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	77fb      	strb	r3, [r7, #31]
 8008f2e:	e14e      	b.n	80091ce <UART_SetConfig+0x34e>
 8008f30:	2304      	movs	r3, #4
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e14b      	b.n	80091ce <UART_SetConfig+0x34e>
 8008f36:	2308      	movs	r3, #8
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e148      	b.n	80091ce <UART_SetConfig+0x34e>
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	bf00      	nop
 8008f42:	e144      	b.n	80091ce <UART_SetConfig+0x34e>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a8d      	ldr	r2, [pc, #564]	; (8009180 <UART_SetConfig+0x300>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d134      	bne.n	8008fb8 <UART_SetConfig+0x138>
 8008f4e:	4b8b      	ldr	r3, [pc, #556]	; (800917c <UART_SetConfig+0x2fc>)
 8008f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f54:	f003 030c 	and.w	r3, r3, #12
 8008f58:	2b0c      	cmp	r3, #12
 8008f5a:	d829      	bhi.n	8008fb0 <UART_SetConfig+0x130>
 8008f5c:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <UART_SetConfig+0xe4>)
 8008f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f62:	bf00      	nop
 8008f64:	08008f99 	.word	0x08008f99
 8008f68:	08008fb1 	.word	0x08008fb1
 8008f6c:	08008fb1 	.word	0x08008fb1
 8008f70:	08008fb1 	.word	0x08008fb1
 8008f74:	08008fa5 	.word	0x08008fa5
 8008f78:	08008fb1 	.word	0x08008fb1
 8008f7c:	08008fb1 	.word	0x08008fb1
 8008f80:	08008fb1 	.word	0x08008fb1
 8008f84:	08008f9f 	.word	0x08008f9f
 8008f88:	08008fb1 	.word	0x08008fb1
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb1 	.word	0x08008fb1
 8008f94:	08008fab 	.word	0x08008fab
 8008f98:	2300      	movs	r3, #0
 8008f9a:	77fb      	strb	r3, [r7, #31]
 8008f9c:	e117      	b.n	80091ce <UART_SetConfig+0x34e>
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	77fb      	strb	r3, [r7, #31]
 8008fa2:	e114      	b.n	80091ce <UART_SetConfig+0x34e>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	77fb      	strb	r3, [r7, #31]
 8008fa8:	e111      	b.n	80091ce <UART_SetConfig+0x34e>
 8008faa:	2308      	movs	r3, #8
 8008fac:	77fb      	strb	r3, [r7, #31]
 8008fae:	e10e      	b.n	80091ce <UART_SetConfig+0x34e>
 8008fb0:	2310      	movs	r3, #16
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	bf00      	nop
 8008fb6:	e10a      	b.n	80091ce <UART_SetConfig+0x34e>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a71      	ldr	r2, [pc, #452]	; (8009184 <UART_SetConfig+0x304>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d120      	bne.n	8009004 <UART_SetConfig+0x184>
 8008fc2:	4b6e      	ldr	r3, [pc, #440]	; (800917c <UART_SetConfig+0x2fc>)
 8008fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d00f      	beq.n	8008ff0 <UART_SetConfig+0x170>
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d802      	bhi.n	8008fda <UART_SetConfig+0x15a>
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <UART_SetConfig+0x164>
 8008fd8:	e010      	b.n	8008ffc <UART_SetConfig+0x17c>
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	d005      	beq.n	8008fea <UART_SetConfig+0x16a>
 8008fde:	2b30      	cmp	r3, #48	; 0x30
 8008fe0:	d009      	beq.n	8008ff6 <UART_SetConfig+0x176>
 8008fe2:	e00b      	b.n	8008ffc <UART_SetConfig+0x17c>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	77fb      	strb	r3, [r7, #31]
 8008fe8:	e0f1      	b.n	80091ce <UART_SetConfig+0x34e>
 8008fea:	2302      	movs	r3, #2
 8008fec:	77fb      	strb	r3, [r7, #31]
 8008fee:	e0ee      	b.n	80091ce <UART_SetConfig+0x34e>
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	77fb      	strb	r3, [r7, #31]
 8008ff4:	e0eb      	b.n	80091ce <UART_SetConfig+0x34e>
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	77fb      	strb	r3, [r7, #31]
 8008ffa:	e0e8      	b.n	80091ce <UART_SetConfig+0x34e>
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	77fb      	strb	r3, [r7, #31]
 8009000:	bf00      	nop
 8009002:	e0e4      	b.n	80091ce <UART_SetConfig+0x34e>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a5f      	ldr	r2, [pc, #380]	; (8009188 <UART_SetConfig+0x308>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d120      	bne.n	8009050 <UART_SetConfig+0x1d0>
 800900e:	4b5b      	ldr	r3, [pc, #364]	; (800917c <UART_SetConfig+0x2fc>)
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009014:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	d00f      	beq.n	800903c <UART_SetConfig+0x1bc>
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d802      	bhi.n	8009026 <UART_SetConfig+0x1a6>
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <UART_SetConfig+0x1b0>
 8009024:	e010      	b.n	8009048 <UART_SetConfig+0x1c8>
 8009026:	2b80      	cmp	r3, #128	; 0x80
 8009028:	d005      	beq.n	8009036 <UART_SetConfig+0x1b6>
 800902a:	2bc0      	cmp	r3, #192	; 0xc0
 800902c:	d009      	beq.n	8009042 <UART_SetConfig+0x1c2>
 800902e:	e00b      	b.n	8009048 <UART_SetConfig+0x1c8>
 8009030:	2300      	movs	r3, #0
 8009032:	77fb      	strb	r3, [r7, #31]
 8009034:	e0cb      	b.n	80091ce <UART_SetConfig+0x34e>
 8009036:	2302      	movs	r3, #2
 8009038:	77fb      	strb	r3, [r7, #31]
 800903a:	e0c8      	b.n	80091ce <UART_SetConfig+0x34e>
 800903c:	2304      	movs	r3, #4
 800903e:	77fb      	strb	r3, [r7, #31]
 8009040:	e0c5      	b.n	80091ce <UART_SetConfig+0x34e>
 8009042:	2308      	movs	r3, #8
 8009044:	77fb      	strb	r3, [r7, #31]
 8009046:	e0c2      	b.n	80091ce <UART_SetConfig+0x34e>
 8009048:	2310      	movs	r3, #16
 800904a:	77fb      	strb	r3, [r7, #31]
 800904c:	bf00      	nop
 800904e:	e0be      	b.n	80091ce <UART_SetConfig+0x34e>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a4d      	ldr	r2, [pc, #308]	; (800918c <UART_SetConfig+0x30c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d124      	bne.n	80090a4 <UART_SetConfig+0x224>
 800905a:	4b48      	ldr	r3, [pc, #288]	; (800917c <UART_SetConfig+0x2fc>)
 800905c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009068:	d012      	beq.n	8009090 <UART_SetConfig+0x210>
 800906a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906e:	d802      	bhi.n	8009076 <UART_SetConfig+0x1f6>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <UART_SetConfig+0x204>
 8009074:	e012      	b.n	800909c <UART_SetConfig+0x21c>
 8009076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800907a:	d006      	beq.n	800908a <UART_SetConfig+0x20a>
 800907c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009080:	d009      	beq.n	8009096 <UART_SetConfig+0x216>
 8009082:	e00b      	b.n	800909c <UART_SetConfig+0x21c>
 8009084:	2300      	movs	r3, #0
 8009086:	77fb      	strb	r3, [r7, #31]
 8009088:	e0a1      	b.n	80091ce <UART_SetConfig+0x34e>
 800908a:	2302      	movs	r3, #2
 800908c:	77fb      	strb	r3, [r7, #31]
 800908e:	e09e      	b.n	80091ce <UART_SetConfig+0x34e>
 8009090:	2304      	movs	r3, #4
 8009092:	77fb      	strb	r3, [r7, #31]
 8009094:	e09b      	b.n	80091ce <UART_SetConfig+0x34e>
 8009096:	2308      	movs	r3, #8
 8009098:	77fb      	strb	r3, [r7, #31]
 800909a:	e098      	b.n	80091ce <UART_SetConfig+0x34e>
 800909c:	2310      	movs	r3, #16
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	bf00      	nop
 80090a2:	e094      	b.n	80091ce <UART_SetConfig+0x34e>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a39      	ldr	r2, [pc, #228]	; (8009190 <UART_SetConfig+0x310>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d124      	bne.n	80090f8 <UART_SetConfig+0x278>
 80090ae:	4b33      	ldr	r3, [pc, #204]	; (800917c <UART_SetConfig+0x2fc>)
 80090b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090bc:	d012      	beq.n	80090e4 <UART_SetConfig+0x264>
 80090be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c2:	d802      	bhi.n	80090ca <UART_SetConfig+0x24a>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d007      	beq.n	80090d8 <UART_SetConfig+0x258>
 80090c8:	e012      	b.n	80090f0 <UART_SetConfig+0x270>
 80090ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ce:	d006      	beq.n	80090de <UART_SetConfig+0x25e>
 80090d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090d4:	d009      	beq.n	80090ea <UART_SetConfig+0x26a>
 80090d6:	e00b      	b.n	80090f0 <UART_SetConfig+0x270>
 80090d8:	2301      	movs	r3, #1
 80090da:	77fb      	strb	r3, [r7, #31]
 80090dc:	e077      	b.n	80091ce <UART_SetConfig+0x34e>
 80090de:	2302      	movs	r3, #2
 80090e0:	77fb      	strb	r3, [r7, #31]
 80090e2:	e074      	b.n	80091ce <UART_SetConfig+0x34e>
 80090e4:	2304      	movs	r3, #4
 80090e6:	77fb      	strb	r3, [r7, #31]
 80090e8:	e071      	b.n	80091ce <UART_SetConfig+0x34e>
 80090ea:	2308      	movs	r3, #8
 80090ec:	77fb      	strb	r3, [r7, #31]
 80090ee:	e06e      	b.n	80091ce <UART_SetConfig+0x34e>
 80090f0:	2310      	movs	r3, #16
 80090f2:	77fb      	strb	r3, [r7, #31]
 80090f4:	bf00      	nop
 80090f6:	e06a      	b.n	80091ce <UART_SetConfig+0x34e>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a25      	ldr	r2, [pc, #148]	; (8009194 <UART_SetConfig+0x314>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d124      	bne.n	800914c <UART_SetConfig+0x2cc>
 8009102:	4b1e      	ldr	r3, [pc, #120]	; (800917c <UART_SetConfig+0x2fc>)
 8009104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009108:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800910c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009110:	d012      	beq.n	8009138 <UART_SetConfig+0x2b8>
 8009112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009116:	d802      	bhi.n	800911e <UART_SetConfig+0x29e>
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <UART_SetConfig+0x2ac>
 800911c:	e012      	b.n	8009144 <UART_SetConfig+0x2c4>
 800911e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009122:	d006      	beq.n	8009132 <UART_SetConfig+0x2b2>
 8009124:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009128:	d009      	beq.n	800913e <UART_SetConfig+0x2be>
 800912a:	e00b      	b.n	8009144 <UART_SetConfig+0x2c4>
 800912c:	2300      	movs	r3, #0
 800912e:	77fb      	strb	r3, [r7, #31]
 8009130:	e04d      	b.n	80091ce <UART_SetConfig+0x34e>
 8009132:	2302      	movs	r3, #2
 8009134:	77fb      	strb	r3, [r7, #31]
 8009136:	e04a      	b.n	80091ce <UART_SetConfig+0x34e>
 8009138:	2304      	movs	r3, #4
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e047      	b.n	80091ce <UART_SetConfig+0x34e>
 800913e:	2308      	movs	r3, #8
 8009140:	77fb      	strb	r3, [r7, #31]
 8009142:	e044      	b.n	80091ce <UART_SetConfig+0x34e>
 8009144:	2310      	movs	r3, #16
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	bf00      	nop
 800914a:	e040      	b.n	80091ce <UART_SetConfig+0x34e>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a11      	ldr	r2, [pc, #68]	; (8009198 <UART_SetConfig+0x318>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d139      	bne.n	80091ca <UART_SetConfig+0x34a>
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <UART_SetConfig+0x2fc>)
 8009158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009164:	d027      	beq.n	80091b6 <UART_SetConfig+0x336>
 8009166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800916a:	d817      	bhi.n	800919c <UART_SetConfig+0x31c>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01c      	beq.n	80091aa <UART_SetConfig+0x32a>
 8009170:	e027      	b.n	80091c2 <UART_SetConfig+0x342>
 8009172:	bf00      	nop
 8009174:	efff69f3 	.word	0xefff69f3
 8009178:	40011000 	.word	0x40011000
 800917c:	40023800 	.word	0x40023800
 8009180:	40004400 	.word	0x40004400
 8009184:	40004800 	.word	0x40004800
 8009188:	40004c00 	.word	0x40004c00
 800918c:	40005000 	.word	0x40005000
 8009190:	40011400 	.word	0x40011400
 8009194:	40007800 	.word	0x40007800
 8009198:	40007c00 	.word	0x40007c00
 800919c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a0:	d006      	beq.n	80091b0 <UART_SetConfig+0x330>
 80091a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80091a6:	d009      	beq.n	80091bc <UART_SetConfig+0x33c>
 80091a8:	e00b      	b.n	80091c2 <UART_SetConfig+0x342>
 80091aa:	2300      	movs	r3, #0
 80091ac:	77fb      	strb	r3, [r7, #31]
 80091ae:	e00e      	b.n	80091ce <UART_SetConfig+0x34e>
 80091b0:	2302      	movs	r3, #2
 80091b2:	77fb      	strb	r3, [r7, #31]
 80091b4:	e00b      	b.n	80091ce <UART_SetConfig+0x34e>
 80091b6:	2304      	movs	r3, #4
 80091b8:	77fb      	strb	r3, [r7, #31]
 80091ba:	e008      	b.n	80091ce <UART_SetConfig+0x34e>
 80091bc:	2308      	movs	r3, #8
 80091be:	77fb      	strb	r3, [r7, #31]
 80091c0:	e005      	b.n	80091ce <UART_SetConfig+0x34e>
 80091c2:	2310      	movs	r3, #16
 80091c4:	77fb      	strb	r3, [r7, #31]
 80091c6:	bf00      	nop
 80091c8:	e001      	b.n	80091ce <UART_SetConfig+0x34e>
 80091ca:	2310      	movs	r3, #16
 80091cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091d6:	d17f      	bne.n	80092d8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80091d8:	7ffb      	ldrb	r3, [r7, #31]
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d85c      	bhi.n	8009298 <UART_SetConfig+0x418>
 80091de:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <UART_SetConfig+0x364>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	08009209 	.word	0x08009209
 80091e8:	08009229 	.word	0x08009229
 80091ec:	08009249 	.word	0x08009249
 80091f0:	08009299 	.word	0x08009299
 80091f4:	08009261 	.word	0x08009261
 80091f8:	08009299 	.word	0x08009299
 80091fc:	08009299 	.word	0x08009299
 8009200:	08009299 	.word	0x08009299
 8009204:	08009281 	.word	0x08009281
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009208:	f7fd fc16 	bl	8006a38 <HAL_RCC_GetPCLK1Freq>
 800920c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	005a      	lsls	r2, r3, #1
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	085b      	lsrs	r3, r3, #1
 8009218:	441a      	add	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009222:	b29b      	uxth	r3, r3
 8009224:	61bb      	str	r3, [r7, #24]
        break;
 8009226:	e03a      	b.n	800929e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009228:	f7fd fc1a 	bl	8006a60 <HAL_RCC_GetPCLK2Freq>
 800922c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	005a      	lsls	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	441a      	add	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009242:	b29b      	uxth	r3, r3
 8009244:	61bb      	str	r3, [r7, #24]
        break;
 8009246:	e02a      	b.n	800929e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	085a      	lsrs	r2, r3, #1
 800924e:	4b5f      	ldr	r3, [pc, #380]	; (80093cc <UART_SetConfig+0x54c>)
 8009250:	4413      	add	r3, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6852      	ldr	r2, [r2, #4]
 8009256:	fbb3 f3f2 	udiv	r3, r3, r2
 800925a:	b29b      	uxth	r3, r3
 800925c:	61bb      	str	r3, [r7, #24]
        break;
 800925e:	e01e      	b.n	800929e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009260:	f7fd fb2c 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 8009264:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	005a      	lsls	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	441a      	add	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	fbb2 f3f3 	udiv	r3, r2, r3
 800927a:	b29b      	uxth	r3, r3
 800927c:	61bb      	str	r3, [r7, #24]
        break;
 800927e:	e00e      	b.n	800929e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	085b      	lsrs	r3, r3, #1
 8009286:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009292:	b29b      	uxth	r3, r3
 8009294:	61bb      	str	r3, [r7, #24]
        break;
 8009296:	e002      	b.n	800929e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	75fb      	strb	r3, [r7, #23]
        break;
 800929c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b0f      	cmp	r3, #15
 80092a2:	d916      	bls.n	80092d2 <UART_SetConfig+0x452>
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092aa:	d212      	bcs.n	80092d2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	f023 030f 	bic.w	r3, r3, #15
 80092b4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	085b      	lsrs	r3, r3, #1
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	897b      	ldrh	r3, [r7, #10]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	897a      	ldrh	r2, [r7, #10]
 80092ce:	60da      	str	r2, [r3, #12]
 80092d0:	e070      	b.n	80093b4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	75fb      	strb	r3, [r7, #23]
 80092d6:	e06d      	b.n	80093b4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80092d8:	7ffb      	ldrb	r3, [r7, #31]
 80092da:	2b08      	cmp	r3, #8
 80092dc:	d859      	bhi.n	8009392 <UART_SetConfig+0x512>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <UART_SetConfig+0x464>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009309 	.word	0x08009309
 80092e8:	08009327 	.word	0x08009327
 80092ec:	08009345 	.word	0x08009345
 80092f0:	08009393 	.word	0x08009393
 80092f4:	0800935d 	.word	0x0800935d
 80092f8:	08009393 	.word	0x08009393
 80092fc:	08009393 	.word	0x08009393
 8009300:	08009393 	.word	0x08009393
 8009304:	0800937b 	.word	0x0800937b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009308:	f7fd fb96 	bl	8006a38 <HAL_RCC_GetPCLK1Freq>
 800930c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	085a      	lsrs	r2, r3, #1
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	441a      	add	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009320:	b29b      	uxth	r3, r3
 8009322:	61bb      	str	r3, [r7, #24]
        break;
 8009324:	e038      	b.n	8009398 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009326:	f7fd fb9b 	bl	8006a60 <HAL_RCC_GetPCLK2Freq>
 800932a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	085a      	lsrs	r2, r3, #1
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	441a      	add	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	fbb2 f3f3 	udiv	r3, r2, r3
 800933e:	b29b      	uxth	r3, r3
 8009340:	61bb      	str	r3, [r7, #24]
        break;
 8009342:	e029      	b.n	8009398 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	085a      	lsrs	r2, r3, #1
 800934a:	4b21      	ldr	r3, [pc, #132]	; (80093d0 <UART_SetConfig+0x550>)
 800934c:	4413      	add	r3, r2
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	6852      	ldr	r2, [r2, #4]
 8009352:	fbb3 f3f2 	udiv	r3, r3, r2
 8009356:	b29b      	uxth	r3, r3
 8009358:	61bb      	str	r3, [r7, #24]
        break;
 800935a:	e01d      	b.n	8009398 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800935c:	f7fd faae 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 8009360:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	085a      	lsrs	r2, r3, #1
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	441a      	add	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	fbb2 f3f3 	udiv	r3, r2, r3
 8009374:	b29b      	uxth	r3, r3
 8009376:	61bb      	str	r3, [r7, #24]
        break;
 8009378:	e00e      	b.n	8009398 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	085b      	lsrs	r3, r3, #1
 8009380:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	fbb2 f3f3 	udiv	r3, r2, r3
 800938c:	b29b      	uxth	r3, r3
 800938e:	61bb      	str	r3, [r7, #24]
        break;
 8009390:	e002      	b.n	8009398 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	75fb      	strb	r3, [r7, #23]
        break;
 8009396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	2b0f      	cmp	r3, #15
 800939c:	d908      	bls.n	80093b0 <UART_SetConfig+0x530>
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a4:	d204      	bcs.n	80093b0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	60da      	str	r2, [r3, #12]
 80093ae:	e001      	b.n	80093b4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3720      	adds	r7, #32
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	01e84800 	.word	0x01e84800
 80093d0:	00f42400 	.word	0x00f42400

080093d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d01a      	beq.n	80094ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094d2:	d10a      	bne.n	80094ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	605a      	str	r2, [r3, #4]
  }
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af02      	add	r7, sp, #8
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009526:	f7fa fb07 	bl	8003b38 <HAL_GetTick>
 800952a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0308 	and.w	r3, r3, #8
 8009536:	2b08      	cmp	r3, #8
 8009538:	d10e      	bne.n	8009558 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800953a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f82a 	bl	80095a2 <UART_WaitOnFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e020      	b.n	800959a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b04      	cmp	r3, #4
 8009564:	d10e      	bne.n	8009584 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f814 	bl	80095a2 <UART_WaitOnFlagUntilTimeout>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e00a      	b.n	800959a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	4613      	mov	r3, r2
 80095b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095b2:	e05d      	b.n	8009670 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ba:	d059      	beq.n	8009670 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095bc:	f7fa fabc 	bl	8003b38 <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d302      	bcc.n	80095d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d11b      	bne.n	800960a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0201 	bic.w	r2, r2, #1
 80095f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2220      	movs	r2, #32
 80095fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e042      	b.n	8009690 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d02b      	beq.n	8009670 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009626:	d123      	bne.n	8009670 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009630:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009640:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2220      	movs	r2, #32
 8009656:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2220      	movs	r2, #32
 800965c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2220      	movs	r2, #32
 8009662:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e00f      	b.n	8009690 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69da      	ldr	r2, [r3, #28]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	4013      	ands	r3, r2
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	429a      	cmp	r2, r3
 800967e:	bf0c      	ite	eq
 8009680:	2301      	moveq	r3, #1
 8009682:	2300      	movne	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	461a      	mov	r2, r3
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	429a      	cmp	r2, r3
 800968c:	d092      	beq.n	80095b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009698:	b084      	sub	sp, #16
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	f107 001c 	add.w	r0, r7, #28
 80096a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d120      	bne.n	80096f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	4b20      	ldr	r3, [pc, #128]	; (8009744 <USB_CoreInit+0xac>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d105      	bne.n	80096e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa52 	bl	8009b90 <USB_CoreReset>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]
 80096f0:	e010      	b.n	8009714 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa46 	bl	8009b90 <USB_CoreReset>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	2b01      	cmp	r3, #1
 8009718:	d10b      	bne.n	8009732 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f043 0206 	orr.w	r2, r3, #6
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f043 0220 	orr.w	r2, r3, #32
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800973e:	b004      	add	sp, #16
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	ffbdffbf 	.word	0xffbdffbf

08009748 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f023 0201 	bic.w	r2, r3, #1
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d106      	bne.n	8009796 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60da      	str	r2, [r3, #12]
 8009794:	e00b      	b.n	80097ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d106      	bne.n	80097aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60da      	str	r2, [r3, #12]
 80097a8:	e001      	b.n	80097ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e003      	b.n	80097b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80097ae:	2032      	movs	r0, #50	; 0x32
 80097b0:	f7fa f9ce 	bl	8003b50 <HAL_Delay>

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097c0:	b084      	sub	sp, #16
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b086      	sub	sp, #24
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80097ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	e009      	b.n	80097f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	3340      	adds	r3, #64	; 0x40
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	3301      	adds	r3, #1
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b0e      	cmp	r3, #14
 80097f8:	d9f2      	bls.n	80097e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d11c      	bne.n	800983a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800980e:	f043 0302 	orr.w	r3, r3, #2
 8009812:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	e005      	b.n	8009846 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800984c:	461a      	mov	r2, r3
 800984e:	2300      	movs	r3, #0
 8009850:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009858:	4619      	mov	r1, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009860:	461a      	mov	r2, r3
 8009862:	680b      	ldr	r3, [r1, #0]
 8009864:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	2b01      	cmp	r3, #1
 800986a:	d10c      	bne.n	8009886 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d104      	bne.n	800987c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009872:	2100      	movs	r1, #0
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f959 	bl	8009b2c <USB_SetDevSpeed>
 800987a:	e018      	b.n	80098ae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800987c:	2101      	movs	r1, #1
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f954 	bl	8009b2c <USB_SetDevSpeed>
 8009884:	e013      	b.n	80098ae <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	2b03      	cmp	r3, #3
 800988a:	d10c      	bne.n	80098a6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d104      	bne.n	800989c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009892:	2100      	movs	r1, #0
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f949 	bl	8009b2c <USB_SetDevSpeed>
 800989a:	e008      	b.n	80098ae <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800989c:	2101      	movs	r1, #1
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f944 	bl	8009b2c <USB_SetDevSpeed>
 80098a4:	e003      	b.n	80098ae <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098a6:	2103      	movs	r1, #3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f93f 	bl	8009b2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098ae:	2110      	movs	r1, #16
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f8f3 	bl	8009a9c <USB_FlushTxFifo>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f911 	bl	8009ae8 <USB_FlushRxFifo>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	461a      	mov	r2, r3
 80098d8:	2300      	movs	r3, #0
 80098da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e2:	461a      	mov	r2, r3
 80098e4:	2300      	movs	r3, #0
 80098e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ee:	461a      	mov	r2, r3
 80098f0:	2300      	movs	r3, #0
 80098f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098f4:	2300      	movs	r3, #0
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	e043      	b.n	8009982 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800990c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009910:	d118      	bne.n	8009944 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009924:	461a      	mov	r2, r3
 8009926:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	e013      	b.n	8009956 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4413      	add	r3, r2
 8009936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993a:	461a      	mov	r2, r3
 800993c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	e008      	b.n	8009956 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009950:	461a      	mov	r2, r3
 8009952:	2300      	movs	r3, #0
 8009954:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009962:	461a      	mov	r2, r3
 8009964:	2300      	movs	r3, #0
 8009966:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	461a      	mov	r2, r3
 8009976:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800997a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	3301      	adds	r3, #1
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	429a      	cmp	r2, r3
 8009988:	d3b7      	bcc.n	80098fa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800998a:	2300      	movs	r3, #0
 800998c:	613b      	str	r3, [r7, #16]
 800998e:	e043      	b.n	8009a18 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099a6:	d118      	bne.n	80099da <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ba:	461a      	mov	r2, r3
 80099bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	e013      	b.n	80099ec <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d0:	461a      	mov	r2, r3
 80099d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	e008      	b.n	80099ec <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e6:	461a      	mov	r2, r3
 80099e8:	2300      	movs	r3, #0
 80099ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f8:	461a      	mov	r2, r3
 80099fa:	2300      	movs	r3, #0
 80099fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	3301      	adds	r3, #1
 8009a16:	613b      	str	r3, [r7, #16]
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d3b7      	bcc.n	8009990 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d105      	bne.n	8009a54 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	f043 0210 	orr.w	r2, r3, #16
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <USB_DevInit+0x2d4>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d005      	beq.n	8009a72 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	f043 0208 	orr.w	r2, r3, #8
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d105      	bne.n	8009a84 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <USB_DevInit+0x2d8>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a90:	b004      	add	sp, #16
 8009a92:	4770      	bx	lr
 8009a94:	803c3800 	.word	0x803c3800
 8009a98:	40000004 	.word	0x40000004

08009a9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	019b      	lsls	r3, r3, #6
 8009aae:	f043 0220 	orr.w	r2, r3, #32
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4a09      	ldr	r2, [pc, #36]	; (8009ae4 <USB_FlushTxFifo+0x48>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d901      	bls.n	8009ac8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e006      	b.n	8009ad6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b20      	cmp	r3, #32
 8009ad2:	d0f0      	beq.n	8009ab6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	00030d40 	.word	0x00030d40

08009ae8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2210      	movs	r2, #16
 8009af8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4a09      	ldr	r2, [pc, #36]	; (8009b28 <USB_FlushRxFifo+0x40>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d901      	bls.n	8009b0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e006      	b.n	8009b1a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f003 0310 	and.w	r3, r3, #16
 8009b14:	2b10      	cmp	r3, #16
 8009b16:	d0f0      	beq.n	8009afa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	00030d40 	.word	0x00030d40

08009b2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b78:	f043 0302 	orr.w	r3, r3, #2
 8009b7c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009b7e:	2003      	movs	r0, #3
 8009b80:	f7f9 ffe6 	bl	8003b50 <HAL_Delay>

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4a13      	ldr	r2, [pc, #76]	; (8009bf4 <USB_CoreReset+0x64>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d901      	bls.n	8009bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e01b      	b.n	8009be6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	daf2      	bge.n	8009b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f043 0201 	orr.w	r2, r3, #1
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <USB_CoreReset+0x64>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d901      	bls.n	8009bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e006      	b.n	8009be6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d0f0      	beq.n	8009bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	00030d40 	.word	0x00030d40

08009bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009bfc:	bf00      	nop
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
	...

08009c08 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c0e:	f3ef 8305 	mrs	r3, IPSR
 8009c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10f      	bne.n	8009c3a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d105      	bne.n	8009c32 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c26:	f3ef 8311 	mrs	r3, BASEPRI
 8009c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d007      	beq.n	8009c42 <osKernelInitialize+0x3a>
 8009c32:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <osKernelInitialize+0x64>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d103      	bne.n	8009c42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009c3a:	f06f 0305 	mvn.w	r3, #5
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e00c      	b.n	8009c5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <osKernelInitialize+0x64>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d105      	bne.n	8009c56 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c4a:	4b08      	ldr	r3, [pc, #32]	; (8009c6c <osKernelInitialize+0x64>)
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	e002      	b.n	8009c5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009c56:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	2000032c 	.word	0x2000032c

08009c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c76:	f3ef 8305 	mrs	r3, IPSR
 8009c7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10f      	bne.n	8009ca2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c82:	f3ef 8310 	mrs	r3, PRIMASK
 8009c86:	607b      	str	r3, [r7, #4]
  return(result);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d105      	bne.n	8009c9a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8009c92:	603b      	str	r3, [r7, #0]
  return(result);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <osKernelStart+0x3a>
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <osKernelStart+0x68>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d103      	bne.n	8009caa <osKernelStart+0x3a>
    stat = osErrorISR;
 8009ca2:	f06f 0305 	mvn.w	r3, #5
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	e010      	b.n	8009ccc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009caa:	4b0b      	ldr	r3, [pc, #44]	; (8009cd8 <osKernelStart+0x68>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d109      	bne.n	8009cc6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009cb2:	f7ff ffa1 	bl	8009bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009cb6:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <osKernelStart+0x68>)
 8009cb8:	2202      	movs	r2, #2
 8009cba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009cbc:	f001 f89c 	bl	800adf8 <vTaskStartScheduler>
      stat = osOK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e002      	b.n	8009ccc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	2000032c 	.word	0x2000032c

08009cdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b090      	sub	sp, #64	; 0x40
 8009ce0:	af04      	add	r7, sp, #16
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cec:	f3ef 8305 	mrs	r3, IPSR
 8009cf0:	61fb      	str	r3, [r7, #28]
  return(result);
 8009cf2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 808f 	bne.w	8009e18 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d06:	f3ef 8311 	mrs	r3, BASEPRI
 8009d0a:	617b      	str	r3, [r7, #20]
  return(result);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <osThreadNew+0x3e>
 8009d12:	4b44      	ldr	r3, [pc, #272]	; (8009e24 <osThreadNew+0x148>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d07e      	beq.n	8009e18 <osThreadNew+0x13c>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d07b      	beq.n	8009e18 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009d20:	2380      	movs	r3, #128	; 0x80
 8009d22:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009d24:	2318      	movs	r3, #24
 8009d26:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d045      	beq.n	8009dc4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <osThreadNew+0x6a>
        name = attr->name;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d008      	beq.n	8009d6c <osThreadNew+0x90>
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	2b38      	cmp	r3, #56	; 0x38
 8009d5e:	d805      	bhi.n	8009d6c <osThreadNew+0x90>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <osThreadNew+0x94>
        return (NULL);
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	e054      	b.n	8009e1a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	089b      	lsrs	r3, r3, #2
 8009d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00e      	beq.n	8009da6 <osThreadNew+0xca>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b5b      	cmp	r3, #91	; 0x5b
 8009d8e:	d90a      	bls.n	8009da6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d006      	beq.n	8009da6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <osThreadNew+0xca>
        mem = 1;
 8009da0:	2301      	movs	r3, #1
 8009da2:	623b      	str	r3, [r7, #32]
 8009da4:	e010      	b.n	8009dc8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10c      	bne.n	8009dc8 <osThreadNew+0xec>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d108      	bne.n	8009dc8 <osThreadNew+0xec>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d104      	bne.n	8009dc8 <osThreadNew+0xec>
          mem = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	623b      	str	r3, [r7, #32]
 8009dc2:	e001      	b.n	8009dc8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d110      	bne.n	8009df0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dd6:	9202      	str	r2, [sp, #8]
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 fe2b 	bl	800aa40 <xTaskCreateStatic>
 8009dea:	4603      	mov	r3, r0
 8009dec:	613b      	str	r3, [r7, #16]
 8009dee:	e013      	b.n	8009e18 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d110      	bne.n	8009e18 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	f107 0310 	add.w	r3, r7, #16
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fe79 	bl	800ab00 <xTaskCreate>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d001      	beq.n	8009e18 <osThreadNew+0x13c>
          hTask = NULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e18:	693b      	ldr	r3, [r7, #16]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3730      	adds	r7, #48	; 0x30
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	2000032c 	.word	0x2000032c

08009e28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e30:	f3ef 8305 	mrs	r3, IPSR
 8009e34:	613b      	str	r3, [r7, #16]
  return(result);
 8009e36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10f      	bne.n	8009e5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d105      	bne.n	8009e54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e48:	f3ef 8311 	mrs	r3, BASEPRI
 8009e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <osDelay+0x3c>
 8009e54:	4b0a      	ldr	r3, [pc, #40]	; (8009e80 <osDelay+0x58>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d103      	bne.n	8009e64 <osDelay+0x3c>
    stat = osErrorISR;
 8009e5c:	f06f 0305 	mvn.w	r3, #5
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	e007      	b.n	8009e74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 ff8c 	bl	800ad8c <vTaskDelay>
    }
  }

  return (stat);
 8009e74:	697b      	ldr	r3, [r7, #20]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	2000032c 	.word	0x2000032c

08009e84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a06      	ldr	r2, [pc, #24]	; (8009eb4 <vApplicationGetIdleTaskMemory+0x30>)
 8009e9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2280      	movs	r2, #128	; 0x80
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20000330 	.word	0x20000330
 8009eb4:	2000038c 	.word	0x2000038c

08009eb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4a07      	ldr	r2, [pc, #28]	; (8009ee4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ec8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a06      	ldr	r2, [pc, #24]	; (8009ee8 <vApplicationGetTimerTaskMemory+0x30>)
 8009ece:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ed6:	601a      	str	r2, [r3, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	2000058c 	.word	0x2000058c
 8009ee8:	200005e8 	.word	0x200005e8

08009eec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f103 0208 	add.w	r2, r3, #8
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f103 0208 	add.w	r2, r3, #8
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f103 0208 	add.w	r2, r3, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f3a:	bf00      	nop
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b085      	sub	sp, #20
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d103      	bne.n	8009fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	e00c      	b.n	8009fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e002      	b.n	8009fbc <vListInsert+0x2e>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d2f6      	bcs.n	8009fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6892      	ldr	r2, [r2, #8]
 800a016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	6852      	ldr	r2, [r2, #4]
 800a020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d103      	bne.n	800a034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	1e5a      	subs	r2, r3, #1
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10b      	bne.n	800a080 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	b672      	cpsid	i
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	b662      	cpsie	i
 800a07c:	60bb      	str	r3, [r7, #8]
 800a07e:	e7fe      	b.n	800a07e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800a080:	f002 f842 	bl	800c108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08c:	68f9      	ldr	r1, [r7, #12]
 800a08e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a090:	fb01 f303 	mul.w	r3, r1, r3
 800a094:	441a      	add	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0b6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ba:	441a      	add	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	22ff      	movs	r2, #255	; 0xff
 800a0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	22ff      	movs	r2, #255	; 0xff
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d114      	bne.n	800a100 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d01a      	beq.n	800a114 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3310      	adds	r3, #16
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 f916 	bl	800b314 <xTaskRemoveFromEventList>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d012      	beq.n	800a114 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0ee:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <xQueueGenericReset+0xd0>)
 800a0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	e009      	b.n	800a114 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3310      	adds	r3, #16
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff fef1 	bl	8009eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3324      	adds	r3, #36	; 0x24
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff feec 	bl	8009eec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a114:	f002 f82a 	bl	800c16c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a118:	2301      	movs	r3, #1
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	e000ed04 	.word	0xe000ed04

0800a128 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08e      	sub	sp, #56	; 0x38
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10b      	bne.n	800a154 <xQueueGenericCreateStatic+0x2c>
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	b672      	cpsid	i
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	b662      	cpsie	i
 800a150:	62bb      	str	r3, [r7, #40]	; 0x28
 800a152:	e7fe      	b.n	800a152 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10b      	bne.n	800a172 <xQueueGenericCreateStatic+0x4a>
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	b672      	cpsid	i
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	b662      	cpsie	i
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
 800a170:	e7fe      	b.n	800a170 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <xQueueGenericCreateStatic+0x56>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <xQueueGenericCreateStatic+0x5a>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <xQueueGenericCreateStatic+0x5c>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <xQueueGenericCreateStatic+0x78>
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	b672      	cpsid	i
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	b662      	cpsie	i
 800a19c:	623b      	str	r3, [r7, #32]
 800a19e:	e7fe      	b.n	800a19e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <xQueueGenericCreateStatic+0x84>
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <xQueueGenericCreateStatic+0x88>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e000      	b.n	800a1b2 <xQueueGenericCreateStatic+0x8a>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10b      	bne.n	800a1ce <xQueueGenericCreateStatic+0xa6>
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	b672      	cpsid	i
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	b662      	cpsie	i
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	e7fe      	b.n	800a1cc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1ce:	2350      	movs	r3, #80	; 0x50
 800a1d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b50      	cmp	r3, #80	; 0x50
 800a1d6:	d00b      	beq.n	800a1f0 <xQueueGenericCreateStatic+0xc8>
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	b672      	cpsid	i
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	b662      	cpsie	i
 800a1ec:	61bb      	str	r3, [r7, #24]
 800a1ee:	e7fe      	b.n	800a1ee <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00d      	beq.n	800a218 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a204:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	68b9      	ldr	r1, [r7, #8]
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 f805 	bl	800a222 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3730      	adds	r7, #48	; 0x30
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
 800a22e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d103      	bne.n	800a23e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	e002      	b.n	800a244 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a250:	2101      	movs	r1, #1
 800a252:	69b8      	ldr	r0, [r7, #24]
 800a254:	f7ff fefe 	bl	800a054 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	78fa      	ldrb	r2, [r7, #3]
 800a25c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a260:	bf00      	nop
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08e      	sub	sp, #56	; 0x38
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a276:	2300      	movs	r3, #0
 800a278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10b      	bne.n	800a29c <xQueueGenericSend+0x34>
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	b672      	cpsid	i
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	b662      	cpsie	i
 800a298:	62bb      	str	r3, [r7, #40]	; 0x28
 800a29a:	e7fe      	b.n	800a29a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d103      	bne.n	800a2aa <xQueueGenericSend+0x42>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d101      	bne.n	800a2ae <xQueueGenericSend+0x46>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e000      	b.n	800a2b0 <xQueueGenericSend+0x48>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10b      	bne.n	800a2cc <xQueueGenericSend+0x64>
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	b672      	cpsid	i
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	b662      	cpsie	i
 800a2c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ca:	e7fe      	b.n	800a2ca <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d103      	bne.n	800a2da <xQueueGenericSend+0x72>
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d101      	bne.n	800a2de <xQueueGenericSend+0x76>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <xQueueGenericSend+0x78>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10b      	bne.n	800a2fc <xQueueGenericSend+0x94>
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	b672      	cpsid	i
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	b662      	cpsie	i
 800a2f8:	623b      	str	r3, [r7, #32]
 800a2fa:	e7fe      	b.n	800a2fa <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2fc:	f001 f9c8 	bl	800b690 <xTaskGetSchedulerState>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <xQueueGenericSend+0xa4>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <xQueueGenericSend+0xa8>
 800a30c:	2301      	movs	r3, #1
 800a30e:	e000      	b.n	800a312 <xQueueGenericSend+0xaa>
 800a310:	2300      	movs	r3, #0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10b      	bne.n	800a32e <xQueueGenericSend+0xc6>
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	b672      	cpsid	i
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	b662      	cpsie	i
 800a32a:	61fb      	str	r3, [r7, #28]
 800a32c:	e7fe      	b.n	800a32c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a32e:	f001 feeb 	bl	800c108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d302      	bcc.n	800a344 <xQueueGenericSend+0xdc>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b02      	cmp	r3, #2
 800a342:	d129      	bne.n	800a398 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a34a:	f000 fa0d 	bl	800a768 <prvCopyDataToQueue>
 800a34e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	d010      	beq.n	800a37a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	3324      	adds	r3, #36	; 0x24
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 ffd9 	bl	800b314 <xTaskRemoveFromEventList>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d013      	beq.n	800a390 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a368:	4b3f      	ldr	r3, [pc, #252]	; (800a468 <xQueueGenericSend+0x200>)
 800a36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	e00a      	b.n	800a390 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a380:	4b39      	ldr	r3, [pc, #228]	; (800a468 <xQueueGenericSend+0x200>)
 800a382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a390:	f001 feec 	bl	800c16c <vPortExitCritical>
				return pdPASS;
 800a394:	2301      	movs	r3, #1
 800a396:	e063      	b.n	800a460 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d103      	bne.n	800a3a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a39e:	f001 fee5 	bl	800c16c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e05c      	b.n	800a460 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d106      	bne.n	800a3ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3ac:	f107 0314 	add.w	r3, r7, #20
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 f813 	bl	800b3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3ba:	f001 fed7 	bl	800c16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3be:	f000 fd83 	bl	800aec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3c2:	f001 fea1 	bl	800c108 <vPortEnterCritical>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3cc:	b25b      	sxtb	r3, r3
 800a3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d2:	d103      	bne.n	800a3dc <xQueueGenericSend+0x174>
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3e2:	b25b      	sxtb	r3, r3
 800a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e8:	d103      	bne.n	800a3f2 <xQueueGenericSend+0x18a>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3f2:	f001 febb 	bl	800c16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3f6:	1d3a      	adds	r2, r7, #4
 800a3f8:	f107 0314 	add.w	r3, r7, #20
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 f802 	bl	800b408 <xTaskCheckForTimeOut>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d124      	bne.n	800a454 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a40a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a40c:	f000 faa4 	bl	800a958 <prvIsQueueFull>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d018      	beq.n	800a448 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	3310      	adds	r3, #16
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 ff26 	bl	800b270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a426:	f000 fa2f 	bl	800a888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a42a:	f000 fd5b 	bl	800aee4 <xTaskResumeAll>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	f47f af7c 	bne.w	800a32e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <xQueueGenericSend+0x200>)
 800a438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	e772      	b.n	800a32e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a44a:	f000 fa1d 	bl	800a888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a44e:	f000 fd49 	bl	800aee4 <xTaskResumeAll>
 800a452:	e76c      	b.n	800a32e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a456:	f000 fa17 	bl	800a888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a45a:	f000 fd43 	bl	800aee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a45e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a460:	4618      	mov	r0, r3
 800a462:	3738      	adds	r7, #56	; 0x38
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08e      	sub	sp, #56	; 0x38
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10b      	bne.n	800a49c <xQueueGenericSendFromISR+0x30>
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	b672      	cpsid	i
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	b662      	cpsie	i
 800a498:	627b      	str	r3, [r7, #36]	; 0x24
 800a49a:	e7fe      	b.n	800a49a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d103      	bne.n	800a4aa <xQueueGenericSendFromISR+0x3e>
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <xQueueGenericSendFromISR+0x42>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <xQueueGenericSendFromISR+0x44>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10b      	bne.n	800a4cc <xQueueGenericSendFromISR+0x60>
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	b672      	cpsid	i
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	b662      	cpsie	i
 800a4c8:	623b      	str	r3, [r7, #32]
 800a4ca:	e7fe      	b.n	800a4ca <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d103      	bne.n	800a4da <xQueueGenericSendFromISR+0x6e>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d101      	bne.n	800a4de <xQueueGenericSendFromISR+0x72>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <xQueueGenericSendFromISR+0x74>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10b      	bne.n	800a4fc <xQueueGenericSendFromISR+0x90>
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	b672      	cpsid	i
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	b662      	cpsie	i
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	e7fe      	b.n	800a4fa <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4fc:	f001 fee4 	bl	800c2c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a500:	f3ef 8211 	mrs	r2, BASEPRI
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	b672      	cpsid	i
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	b662      	cpsie	i
 800a518:	61ba      	str	r2, [r7, #24]
 800a51a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a51c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a51e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d302      	bcc.n	800a532 <xQueueGenericSendFromISR+0xc6>
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d12c      	bne.n	800a58c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	68b9      	ldr	r1, [r7, #8]
 800a540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a542:	f000 f911 	bl	800a768 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a546:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54e:	d112      	bne.n	800a576 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b00      	cmp	r3, #0
 800a556:	d016      	beq.n	800a586 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	3324      	adds	r3, #36	; 0x24
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fed9 	bl	800b314 <xTaskRemoveFromEventList>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00e      	beq.n	800a586 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00b      	beq.n	800a586 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	e007      	b.n	800a586 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a576:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a57a:	3301      	adds	r3, #1
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	b25a      	sxtb	r2, r3
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a586:	2301      	movs	r3, #1
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a58a:	e001      	b.n	800a590 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	637b      	str	r3, [r7, #52]	; 0x34
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3738      	adds	r7, #56	; 0x38
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b08c      	sub	sp, #48	; 0x30
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10b      	bne.n	800a5d6 <xQueueReceive+0x32>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	b672      	cpsid	i
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	b662      	cpsie	i
 800a5d2:	623b      	str	r3, [r7, #32]
 800a5d4:	e7fe      	b.n	800a5d4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d103      	bne.n	800a5e4 <xQueueReceive+0x40>
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <xQueueReceive+0x44>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e000      	b.n	800a5ea <xQueueReceive+0x46>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10b      	bne.n	800a606 <xQueueReceive+0x62>
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	b672      	cpsid	i
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	b662      	cpsie	i
 800a602:	61fb      	str	r3, [r7, #28]
 800a604:	e7fe      	b.n	800a604 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a606:	f001 f843 	bl	800b690 <xTaskGetSchedulerState>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d102      	bne.n	800a616 <xQueueReceive+0x72>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <xQueueReceive+0x76>
 800a616:	2301      	movs	r3, #1
 800a618:	e000      	b.n	800a61c <xQueueReceive+0x78>
 800a61a:	2300      	movs	r3, #0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10b      	bne.n	800a638 <xQueueReceive+0x94>
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	b672      	cpsid	i
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	b662      	cpsie	i
 800a634:	61bb      	str	r3, [r7, #24]
 800a636:	e7fe      	b.n	800a636 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a638:	f001 fd66 	bl	800c108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	2b00      	cmp	r3, #0
 800a646:	d01f      	beq.n	800a688 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a648:	68b9      	ldr	r1, [r7, #8]
 800a64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a64c:	f000 f8f6 	bl	800a83c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	1e5a      	subs	r2, r3, #1
 800a654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a656:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00f      	beq.n	800a680 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	3310      	adds	r3, #16
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fe55 	bl	800b314 <xTaskRemoveFromEventList>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d007      	beq.n	800a680 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a670:	4b3c      	ldr	r3, [pc, #240]	; (800a764 <xQueueReceive+0x1c0>)
 800a672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a680:	f001 fd74 	bl	800c16c <vPortExitCritical>
				return pdPASS;
 800a684:	2301      	movs	r3, #1
 800a686:	e069      	b.n	800a75c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d103      	bne.n	800a696 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a68e:	f001 fd6d 	bl	800c16c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a692:	2300      	movs	r3, #0
 800a694:	e062      	b.n	800a75c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d106      	bne.n	800a6aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a69c:	f107 0310 	add.w	r3, r7, #16
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fe9b 	bl	800b3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6aa:	f001 fd5f 	bl	800c16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ae:	f000 fc0b 	bl	800aec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6b2:	f001 fd29 	bl	800c108 <vPortEnterCritical>
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6bc:	b25b      	sxtb	r3, r3
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c2:	d103      	bne.n	800a6cc <xQueueReceive+0x128>
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6d2:	b25b      	sxtb	r3, r3
 800a6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d8:	d103      	bne.n	800a6e2 <xQueueReceive+0x13e>
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6e2:	f001 fd43 	bl	800c16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6e6:	1d3a      	adds	r2, r7, #4
 800a6e8:	f107 0310 	add.w	r3, r7, #16
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fe8a 	bl	800b408 <xTaskCheckForTimeOut>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d123      	bne.n	800a742 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6fc:	f000 f916 	bl	800a92c <prvIsQueueEmpty>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d017      	beq.n	800a736 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	3324      	adds	r3, #36	; 0x24
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fdae 	bl	800b270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a716:	f000 f8b7 	bl	800a888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a71a:	f000 fbe3 	bl	800aee4 <xTaskResumeAll>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d189      	bne.n	800a638 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a724:	4b0f      	ldr	r3, [pc, #60]	; (800a764 <xQueueReceive+0x1c0>)
 800a726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	e780      	b.n	800a638 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a738:	f000 f8a6 	bl	800a888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a73c:	f000 fbd2 	bl	800aee4 <xTaskResumeAll>
 800a740:	e77a      	b.n	800a638 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a744:	f000 f8a0 	bl	800a888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a748:	f000 fbcc 	bl	800aee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a74e:	f000 f8ed 	bl	800a92c <prvIsQueueEmpty>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	f43f af6f 	beq.w	800a638 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a75a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3730      	adds	r7, #48	; 0x30
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	e000ed04 	.word	0xe000ed04

0800a768 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a774:	2300      	movs	r3, #0
 800a776:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10d      	bne.n	800a7a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d14d      	bne.n	800a82a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	4618      	mov	r0, r3
 800a794:	f000 ff9a 	bl	800b6cc <xTaskPriorityDisinherit>
 800a798:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	609a      	str	r2, [r3, #8]
 800a7a0:	e043      	b.n	800a82a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d119      	bne.n	800a7dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6858      	ldr	r0, [r3, #4]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	68b9      	ldr	r1, [r7, #8]
 800a7b4:	f001 ffd4 	bl	800c760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c0:	441a      	add	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d32b      	bcc.n	800a82a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	605a      	str	r2, [r3, #4]
 800a7da:	e026      	b.n	800a82a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	68d8      	ldr	r0, [r3, #12]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	f001 ffba 	bl	800c760 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f4:	425b      	negs	r3, r3
 800a7f6:	441a      	add	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	429a      	cmp	r2, r3
 800a806:	d207      	bcs.n	800a818 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a810:	425b      	negs	r3, r3
 800a812:	441a      	add	r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d105      	bne.n	800a82a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	3b01      	subs	r3, #1
 800a828:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	1c5a      	adds	r2, r3, #1
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a832:	697b      	ldr	r3, [r7, #20]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d018      	beq.n	800a880 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	441a      	add	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	429a      	cmp	r2, r3
 800a866:	d303      	bcc.n	800a870 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	68d9      	ldr	r1, [r3, #12]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	461a      	mov	r2, r3
 800a87a:	6838      	ldr	r0, [r7, #0]
 800a87c:	f001 ff70 	bl	800c760 <memcpy>
	}
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a890:	f001 fc3a 	bl	800c108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a89a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a89c:	e011      	b.n	800a8c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d012      	beq.n	800a8cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3324      	adds	r3, #36	; 0x24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fd32 	bl	800b314 <xTaskRemoveFromEventList>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8b6:	f000 fe0b 	bl	800b4d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dce9      	bgt.n	800a89e <prvUnlockQueue+0x16>
 800a8ca:	e000      	b.n	800a8ce <prvUnlockQueue+0x46>
					break;
 800a8cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	22ff      	movs	r2, #255	; 0xff
 800a8d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8d6:	f001 fc49 	bl	800c16c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8da:	f001 fc15 	bl	800c108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8e6:	e011      	b.n	800a90c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d012      	beq.n	800a916 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3310      	adds	r3, #16
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fd0d 	bl	800b314 <xTaskRemoveFromEventList>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a900:	f000 fde6 	bl	800b4d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	3b01      	subs	r3, #1
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a90c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a910:	2b00      	cmp	r3, #0
 800a912:	dce9      	bgt.n	800a8e8 <prvUnlockQueue+0x60>
 800a914:	e000      	b.n	800a918 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a916:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	22ff      	movs	r2, #255	; 0xff
 800a91c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a920:	f001 fc24 	bl	800c16c <vPortExitCritical>
}
 800a924:	bf00      	nop
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a934:	f001 fbe8 	bl	800c108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d102      	bne.n	800a946 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e001      	b.n	800a94a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a94a:	f001 fc0f 	bl	800c16c <vPortExitCritical>

	return xReturn;
 800a94e:	68fb      	ldr	r3, [r7, #12]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a960:	f001 fbd2 	bl	800c108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d102      	bne.n	800a976 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	e001      	b.n	800a97a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a976:	2300      	movs	r3, #0
 800a978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a97a:	f001 fbf7 	bl	800c16c <vPortExitCritical>

	return xReturn;
 800a97e:	68fb      	ldr	r3, [r7, #12]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a992:	2300      	movs	r3, #0
 800a994:	60fb      	str	r3, [r7, #12]
 800a996:	e014      	b.n	800a9c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a998:	4a0e      	ldr	r2, [pc, #56]	; (800a9d4 <vQueueAddToRegistry+0x4c>)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10b      	bne.n	800a9bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9a4:	490b      	ldr	r1, [pc, #44]	; (800a9d4 <vQueueAddToRegistry+0x4c>)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <vQueueAddToRegistry+0x4c>)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	4413      	add	r3, r2
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9ba:	e005      	b.n	800a9c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b07      	cmp	r3, #7
 800a9c6:	d9e7      	bls.n	800a998 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9c8:	bf00      	nop
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	20021110 	.word	0x20021110

0800a9d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9e8:	f001 fb8e 	bl	800c108 <vPortEnterCritical>
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9f2:	b25b      	sxtb	r3, r3
 800a9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f8:	d103      	bne.n	800aa02 <vQueueWaitForMessageRestricted+0x2a>
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa08:	b25b      	sxtb	r3, r3
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0e:	d103      	bne.n	800aa18 <vQueueWaitForMessageRestricted+0x40>
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa18:	f001 fba8 	bl	800c16c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d106      	bne.n	800aa32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	3324      	adds	r3, #36	; 0x24
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fc45 	bl	800b2bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa32:	6978      	ldr	r0, [r7, #20]
 800aa34:	f7ff ff28 	bl	800a888 <prvUnlockQueue>
	}
 800aa38:	bf00      	nop
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08e      	sub	sp, #56	; 0x38
 800aa44:	af04      	add	r7, sp, #16
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10b      	bne.n	800aa6c <xTaskCreateStatic+0x2c>
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	b672      	cpsid	i
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	b662      	cpsie	i
 800aa68:	623b      	str	r3, [r7, #32]
 800aa6a:	e7fe      	b.n	800aa6a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10b      	bne.n	800aa8a <xTaskCreateStatic+0x4a>
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	b672      	cpsid	i
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	b662      	cpsie	i
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	e7fe      	b.n	800aa88 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa8a:	235c      	movs	r3, #92	; 0x5c
 800aa8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	2b5c      	cmp	r3, #92	; 0x5c
 800aa92:	d00b      	beq.n	800aaac <xTaskCreateStatic+0x6c>
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	b672      	cpsid	i
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	b662      	cpsie	i
 800aaa8:	61bb      	str	r3, [r7, #24]
 800aaaa:	e7fe      	b.n	800aaaa <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aaac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d01e      	beq.n	800aaf2 <xTaskCreateStatic+0xb2>
 800aab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d01b      	beq.n	800aaf2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aabc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aac2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aacc:	2300      	movs	r3, #0
 800aace:	9303      	str	r3, [sp, #12]
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	9302      	str	r3, [sp, #8]
 800aad4:	f107 0314 	add.w	r3, r7, #20
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 f850 	bl	800ab8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaec:	f000 f8de 	bl	800acac <prvAddNewTaskToReadyList>
 800aaf0:	e001      	b.n	800aaf6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aaf6:	697b      	ldr	r3, [r7, #20]
	}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3728      	adds	r7, #40	; 0x28
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b08c      	sub	sp, #48	; 0x30
 800ab04:	af04      	add	r7, sp, #16
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab10:	88fb      	ldrh	r3, [r7, #6]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 fc19 	bl	800c34c <pvPortMalloc>
 800ab1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab22:	205c      	movs	r0, #92	; 0x5c
 800ab24:	f001 fc12 	bl	800c34c <pvPortMalloc>
 800ab28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	631a      	str	r2, [r3, #48]	; 0x30
 800ab36:	e005      	b.n	800ab44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab38:	6978      	ldr	r0, [r7, #20]
 800ab3a:	f001 fccf 	bl	800c4dc <vPortFree>
 800ab3e:	e001      	b.n	800ab44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d017      	beq.n	800ab7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab52:	88fa      	ldrh	r2, [r7, #6]
 800ab54:	2300      	movs	r3, #0
 800ab56:	9303      	str	r3, [sp, #12]
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	9302      	str	r3, [sp, #8]
 800ab5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5e:	9301      	str	r3, [sp, #4]
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	68b9      	ldr	r1, [r7, #8]
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 f80e 	bl	800ab8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab6e:	69f8      	ldr	r0, [r7, #28]
 800ab70:	f000 f89c 	bl	800acac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab74:	2301      	movs	r3, #1
 800ab76:	61bb      	str	r3, [r7, #24]
 800ab78:	e002      	b.n	800ab80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab80:	69bb      	ldr	r3, [r7, #24]
	}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b088      	sub	sp, #32
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
 800ab96:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	461a      	mov	r2, r3
 800aba2:	21a5      	movs	r1, #165	; 0xa5
 800aba4:	f001 fde7 	bl	800c776 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800abb2:	440b      	add	r3, r1
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	f023 0307 	bic.w	r3, r3, #7
 800abc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <prvInitialiseNewTask+0x5a>
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	b672      	cpsid	i
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	b662      	cpsie	i
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	e7fe      	b.n	800abe2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d01f      	beq.n	800ac2a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abea:	2300      	movs	r3, #0
 800abec:	61fb      	str	r3, [r7, #28]
 800abee:	e012      	b.n	800ac16 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abf0:	68ba      	ldr	r2, [r7, #8]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	4413      	add	r3, r2
 800abf6:	7819      	ldrb	r1, [r3, #0]
 800abf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	4413      	add	r3, r2
 800abfe:	3334      	adds	r3, #52	; 0x34
 800ac00:	460a      	mov	r2, r1
 800ac02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d006      	beq.n	800ac1e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	3301      	adds	r3, #1
 800ac14:	61fb      	str	r3, [r7, #28]
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	2b0f      	cmp	r3, #15
 800ac1a:	d9e9      	bls.n	800abf0 <prvInitialiseNewTask+0x66>
 800ac1c:	e000      	b.n	800ac20 <prvInitialiseNewTask+0x96>
			{
				break;
 800ac1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac28:	e003      	b.n	800ac32 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	2b37      	cmp	r3, #55	; 0x37
 800ac36:	d901      	bls.n	800ac3c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac38:	2337      	movs	r3, #55	; 0x37
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	3304      	adds	r3, #4
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7ff f96a 	bl	8009f2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	3318      	adds	r3, #24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff f965 	bl	8009f2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	68f9      	ldr	r1, [r7, #12]
 800ac8a:	69b8      	ldr	r0, [r7, #24]
 800ac8c:	f001 f936 	bl	800befc <pxPortInitialiseStack>
 800ac90:	4602      	mov	r2, r0
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aca2:	bf00      	nop
 800aca4:	3720      	adds	r7, #32
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acb4:	f001 fa28 	bl	800c108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acb8:	4b2d      	ldr	r3, [pc, #180]	; (800ad70 <prvAddNewTaskToReadyList+0xc4>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	4a2c      	ldr	r2, [pc, #176]	; (800ad70 <prvAddNewTaskToReadyList+0xc4>)
 800acc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acc2:	4b2c      	ldr	r3, [pc, #176]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acca:	4a2a      	ldr	r2, [pc, #168]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acd0:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <prvAddNewTaskToReadyList+0xc4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d110      	bne.n	800acfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acd8:	f000 fc1e 	bl	800b518 <prvInitialiseTaskLists>
 800acdc:	e00d      	b.n	800acfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acde:	4b26      	ldr	r3, [pc, #152]	; (800ad78 <prvAddNewTaskToReadyList+0xcc>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d109      	bne.n	800acfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ace6:	4b23      	ldr	r3, [pc, #140]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d802      	bhi.n	800acfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acf4:	4a1f      	ldr	r2, [pc, #124]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acfa:	4b20      	ldr	r3, [pc, #128]	; (800ad7c <prvAddNewTaskToReadyList+0xd0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3301      	adds	r3, #1
 800ad00:	4a1e      	ldr	r2, [pc, #120]	; (800ad7c <prvAddNewTaskToReadyList+0xd0>)
 800ad02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad04:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <prvAddNewTaskToReadyList+0xd0>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad10:	4b1b      	ldr	r3, [pc, #108]	; (800ad80 <prvAddNewTaskToReadyList+0xd4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d903      	bls.n	800ad20 <prvAddNewTaskToReadyList+0x74>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1c:	4a18      	ldr	r2, [pc, #96]	; (800ad80 <prvAddNewTaskToReadyList+0xd4>)
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4a15      	ldr	r2, [pc, #84]	; (800ad84 <prvAddNewTaskToReadyList+0xd8>)
 800ad2e:	441a      	add	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f7ff f905 	bl	8009f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad3c:	f001 fa16 	bl	800c16c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad40:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <prvAddNewTaskToReadyList+0xcc>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00e      	beq.n	800ad66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <prvAddNewTaskToReadyList+0xc8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d207      	bcs.n	800ad66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad56:	4b0c      	ldr	r3, [pc, #48]	; (800ad88 <prvAddNewTaskToReadyList+0xdc>)
 800ad58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad66:	bf00      	nop
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000ebc 	.word	0x20000ebc
 800ad74:	200009e8 	.word	0x200009e8
 800ad78:	20000ec8 	.word	0x20000ec8
 800ad7c:	20000ed8 	.word	0x20000ed8
 800ad80:	20000ec4 	.word	0x20000ec4
 800ad84:	200009ec 	.word	0x200009ec
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d018      	beq.n	800add0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad9e:	4b14      	ldr	r3, [pc, #80]	; (800adf0 <vTaskDelay+0x64>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <vTaskDelay+0x32>
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	b672      	cpsid	i
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	b662      	cpsie	i
 800adba:	60bb      	str	r3, [r7, #8]
 800adbc:	e7fe      	b.n	800adbc <vTaskDelay+0x30>
			vTaskSuspendAll();
 800adbe:	f000 f883 	bl	800aec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adc2:	2100      	movs	r1, #0
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fcf1 	bl	800b7ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adca:	f000 f88b 	bl	800aee4 <xTaskResumeAll>
 800adce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d107      	bne.n	800ade6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800add6:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <vTaskDelay+0x68>)
 800add8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20000ee4 	.word	0x20000ee4
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08a      	sub	sp, #40	; 0x28
 800adfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae06:	463a      	mov	r2, r7
 800ae08:	1d39      	adds	r1, r7, #4
 800ae0a:	f107 0308 	add.w	r3, r7, #8
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff f838 	bl	8009e84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	9202      	str	r2, [sp, #8]
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	2300      	movs	r3, #0
 800ae24:	460a      	mov	r2, r1
 800ae26:	4922      	ldr	r1, [pc, #136]	; (800aeb0 <vTaskStartScheduler+0xb8>)
 800ae28:	4822      	ldr	r0, [pc, #136]	; (800aeb4 <vTaskStartScheduler+0xbc>)
 800ae2a:	f7ff fe09 	bl	800aa40 <xTaskCreateStatic>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	4b21      	ldr	r3, [pc, #132]	; (800aeb8 <vTaskStartScheduler+0xc0>)
 800ae32:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae34:	4b20      	ldr	r3, [pc, #128]	; (800aeb8 <vTaskStartScheduler+0xc0>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	617b      	str	r3, [r7, #20]
 800ae40:	e001      	b.n	800ae46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d102      	bne.n	800ae52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae4c:	f000 fd02 	bl	800b854 <xTimerCreateTimerTask>
 800ae50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d117      	bne.n	800ae88 <vTaskStartScheduler+0x90>
 800ae58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5c:	b672      	cpsid	i
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	b662      	cpsie	i
 800ae6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae6e:	4b13      	ldr	r3, [pc, #76]	; (800aebc <vTaskStartScheduler+0xc4>)
 800ae70:	f04f 32ff 	mov.w	r2, #4294967295
 800ae74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <vTaskStartScheduler+0xc8>)
 800ae78:	2201      	movs	r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae7c:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <vTaskStartScheduler+0xcc>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae82:	f001 f8c5 	bl	800c010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae86:	e00f      	b.n	800aea8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d10b      	bne.n	800aea8 <vTaskStartScheduler+0xb0>
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	b672      	cpsid	i
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	b662      	cpsie	i
 800aea4:	60fb      	str	r3, [r7, #12]
 800aea6:	e7fe      	b.n	800aea6 <vTaskStartScheduler+0xae>
}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	080100bc 	.word	0x080100bc
 800aeb4:	0800b4e9 	.word	0x0800b4e9
 800aeb8:	20000ee0 	.word	0x20000ee0
 800aebc:	20000edc 	.word	0x20000edc
 800aec0:	20000ec8 	.word	0x20000ec8
 800aec4:	20000ec0 	.word	0x20000ec0

0800aec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aec8:	b480      	push	{r7}
 800aeca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aecc:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <vTaskSuspendAll+0x18>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3301      	adds	r3, #1
 800aed2:	4a03      	ldr	r2, [pc, #12]	; (800aee0 <vTaskSuspendAll+0x18>)
 800aed4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800aed6:	bf00      	nop
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20000ee4 	.word	0x20000ee4

0800aee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aef2:	4b42      	ldr	r3, [pc, #264]	; (800affc <xTaskResumeAll+0x118>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10b      	bne.n	800af12 <xTaskResumeAll+0x2e>
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	b672      	cpsid	i
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	b662      	cpsie	i
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	e7fe      	b.n	800af10 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af12:	f001 f8f9 	bl	800c108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af16:	4b39      	ldr	r3, [pc, #228]	; (800affc <xTaskResumeAll+0x118>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	4a37      	ldr	r2, [pc, #220]	; (800affc <xTaskResumeAll+0x118>)
 800af1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af20:	4b36      	ldr	r3, [pc, #216]	; (800affc <xTaskResumeAll+0x118>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d162      	bne.n	800afee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af28:	4b35      	ldr	r3, [pc, #212]	; (800b000 <xTaskResumeAll+0x11c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d05e      	beq.n	800afee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af30:	e02f      	b.n	800af92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af32:	4b34      	ldr	r3, [pc, #208]	; (800b004 <xTaskResumeAll+0x120>)
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3318      	adds	r3, #24
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff f85e 	bl	800a000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3304      	adds	r3, #4
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff f859 	bl	800a000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af52:	4b2d      	ldr	r3, [pc, #180]	; (800b008 <xTaskResumeAll+0x124>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	429a      	cmp	r2, r3
 800af58:	d903      	bls.n	800af62 <xTaskResumeAll+0x7e>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	4a2a      	ldr	r2, [pc, #168]	; (800b008 <xTaskResumeAll+0x124>)
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4a27      	ldr	r2, [pc, #156]	; (800b00c <xTaskResumeAll+0x128>)
 800af70:	441a      	add	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3304      	adds	r3, #4
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	f7fe ffe4 	bl	8009f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af82:	4b23      	ldr	r3, [pc, #140]	; (800b010 <xTaskResumeAll+0x12c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	429a      	cmp	r2, r3
 800af8a:	d302      	bcc.n	800af92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800af8c:	4b21      	ldr	r3, [pc, #132]	; (800b014 <xTaskResumeAll+0x130>)
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af92:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <xTaskResumeAll+0x120>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1cb      	bne.n	800af32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d001      	beq.n	800afa4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afa0:	f000 fb56 	bl	800b650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800afa4:	4b1c      	ldr	r3, [pc, #112]	; (800b018 <xTaskResumeAll+0x134>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d010      	beq.n	800afd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afb0:	f000 f846 	bl	800b040 <xTaskIncrementTick>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800afba:	4b16      	ldr	r3, [pc, #88]	; (800b014 <xTaskResumeAll+0x130>)
 800afbc:	2201      	movs	r2, #1
 800afbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1f1      	bne.n	800afb0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800afcc:	4b12      	ldr	r3, [pc, #72]	; (800b018 <xTaskResumeAll+0x134>)
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afd2:	4b10      	ldr	r3, [pc, #64]	; (800b014 <xTaskResumeAll+0x130>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d009      	beq.n	800afee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afda:	2301      	movs	r3, #1
 800afdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afde:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <xTaskResumeAll+0x138>)
 800afe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afee:	f001 f8bd 	bl	800c16c <vPortExitCritical>

	return xAlreadyYielded;
 800aff2:	68bb      	ldr	r3, [r7, #8]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000ee4 	.word	0x20000ee4
 800b000:	20000ebc 	.word	0x20000ebc
 800b004:	20000e7c 	.word	0x20000e7c
 800b008:	20000ec4 	.word	0x20000ec4
 800b00c:	200009ec 	.word	0x200009ec
 800b010:	200009e8 	.word	0x200009e8
 800b014:	20000ed0 	.word	0x20000ed0
 800b018:	20000ecc 	.word	0x20000ecc
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <xTaskGetTickCount+0x1c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b02c:	687b      	ldr	r3, [r7, #4]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	20000ec0 	.word	0x20000ec0

0800b040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b04a:	4b4f      	ldr	r3, [pc, #316]	; (800b188 <xTaskIncrementTick+0x148>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f040 808a 	bne.w	800b168 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b054:	4b4d      	ldr	r3, [pc, #308]	; (800b18c <xTaskIncrementTick+0x14c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3301      	adds	r3, #1
 800b05a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b05c:	4a4b      	ldr	r2, [pc, #300]	; (800b18c <xTaskIncrementTick+0x14c>)
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d121      	bne.n	800b0ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b068:	4b49      	ldr	r3, [pc, #292]	; (800b190 <xTaskIncrementTick+0x150>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <xTaskIncrementTick+0x4a>
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	b672      	cpsid	i
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	b662      	cpsie	i
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	e7fe      	b.n	800b088 <xTaskIncrementTick+0x48>
 800b08a:	4b41      	ldr	r3, [pc, #260]	; (800b190 <xTaskIncrementTick+0x150>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	4b40      	ldr	r3, [pc, #256]	; (800b194 <xTaskIncrementTick+0x154>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a3e      	ldr	r2, [pc, #248]	; (800b190 <xTaskIncrementTick+0x150>)
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	4a3e      	ldr	r2, [pc, #248]	; (800b194 <xTaskIncrementTick+0x154>)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	4b3e      	ldr	r3, [pc, #248]	; (800b198 <xTaskIncrementTick+0x158>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	4a3c      	ldr	r2, [pc, #240]	; (800b198 <xTaskIncrementTick+0x158>)
 800b0a6:	6013      	str	r3, [r2, #0]
 800b0a8:	f000 fad2 	bl	800b650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0ac:	4b3b      	ldr	r3, [pc, #236]	; (800b19c <xTaskIncrementTick+0x15c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d349      	bcc.n	800b14a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0b6:	4b36      	ldr	r3, [pc, #216]	; (800b190 <xTaskIncrementTick+0x150>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d104      	bne.n	800b0ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0c0:	4b36      	ldr	r3, [pc, #216]	; (800b19c <xTaskIncrementTick+0x15c>)
 800b0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c6:	601a      	str	r2, [r3, #0]
					break;
 800b0c8:	e03f      	b.n	800b14a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ca:	4b31      	ldr	r3, [pc, #196]	; (800b190 <xTaskIncrementTick+0x150>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d203      	bcs.n	800b0ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0e2:	4a2e      	ldr	r2, [pc, #184]	; (800b19c <xTaskIncrementTick+0x15c>)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0e8:	e02f      	b.n	800b14a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe ff86 	bl	800a000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d004      	beq.n	800b106 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	3318      	adds	r3, #24
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe ff7d 	bl	800a000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10a:	4b25      	ldr	r3, [pc, #148]	; (800b1a0 <xTaskIncrementTick+0x160>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d903      	bls.n	800b11a <xTaskIncrementTick+0xda>
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b116:	4a22      	ldr	r2, [pc, #136]	; (800b1a0 <xTaskIncrementTick+0x160>)
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4a1f      	ldr	r2, [pc, #124]	; (800b1a4 <xTaskIncrementTick+0x164>)
 800b128:	441a      	add	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe ff08 	bl	8009f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13a:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <xTaskIncrementTick+0x168>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	429a      	cmp	r2, r3
 800b142:	d3b8      	bcc.n	800b0b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b144:	2301      	movs	r3, #1
 800b146:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b148:	e7b5      	b.n	800b0b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b14a:	4b17      	ldr	r3, [pc, #92]	; (800b1a8 <xTaskIncrementTick+0x168>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b150:	4914      	ldr	r1, [pc, #80]	; (800b1a4 <xTaskIncrementTick+0x164>)
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	440b      	add	r3, r1
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d907      	bls.n	800b172 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b162:	2301      	movs	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	e004      	b.n	800b172 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b168:	4b10      	ldr	r3, [pc, #64]	; (800b1ac <xTaskIncrementTick+0x16c>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3301      	adds	r3, #1
 800b16e:	4a0f      	ldr	r2, [pc, #60]	; (800b1ac <xTaskIncrementTick+0x16c>)
 800b170:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b172:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <xTaskIncrementTick+0x170>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b17a:	2301      	movs	r3, #1
 800b17c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b17e:	697b      	ldr	r3, [r7, #20]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	20000ee4 	.word	0x20000ee4
 800b18c:	20000ec0 	.word	0x20000ec0
 800b190:	20000e74 	.word	0x20000e74
 800b194:	20000e78 	.word	0x20000e78
 800b198:	20000ed4 	.word	0x20000ed4
 800b19c:	20000edc 	.word	0x20000edc
 800b1a0:	20000ec4 	.word	0x20000ec4
 800b1a4:	200009ec 	.word	0x200009ec
 800b1a8:	200009e8 	.word	0x200009e8
 800b1ac:	20000ecc 	.word	0x20000ecc
 800b1b0:	20000ed0 	.word	0x20000ed0

0800b1b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1ba:	4b28      	ldr	r3, [pc, #160]	; (800b25c <vTaskSwitchContext+0xa8>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1c2:	4b27      	ldr	r3, [pc, #156]	; (800b260 <vTaskSwitchContext+0xac>)
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1c8:	e042      	b.n	800b250 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b1ca:	4b25      	ldr	r3, [pc, #148]	; (800b260 <vTaskSwitchContext+0xac>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1d0:	4b24      	ldr	r3, [pc, #144]	; (800b264 <vTaskSwitchContext+0xb0>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	e011      	b.n	800b1fc <vTaskSwitchContext+0x48>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <vTaskSwitchContext+0x42>
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	b672      	cpsid	i
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	b662      	cpsie	i
 800b1f2:	607b      	str	r3, [r7, #4]
 800b1f4:	e7fe      	b.n	800b1f4 <vTaskSwitchContext+0x40>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	491a      	ldr	r1, [pc, #104]	; (800b268 <vTaskSwitchContext+0xb4>)
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	4613      	mov	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	440b      	add	r3, r1
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0e3      	beq.n	800b1d8 <vTaskSwitchContext+0x24>
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	4613      	mov	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4a13      	ldr	r2, [pc, #76]	; (800b268 <vTaskSwitchContext+0xb4>)
 800b21c:	4413      	add	r3, r2
 800b21e:	60bb      	str	r3, [r7, #8]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	605a      	str	r2, [r3, #4]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	3308      	adds	r3, #8
 800b232:	429a      	cmp	r2, r3
 800b234:	d104      	bne.n	800b240 <vTaskSwitchContext+0x8c>
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	605a      	str	r2, [r3, #4]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	4a09      	ldr	r2, [pc, #36]	; (800b26c <vTaskSwitchContext+0xb8>)
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	4a06      	ldr	r2, [pc, #24]	; (800b264 <vTaskSwitchContext+0xb0>)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6013      	str	r3, [r2, #0]
}
 800b250:	bf00      	nop
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	20000ee4 	.word	0x20000ee4
 800b260:	20000ed0 	.word	0x20000ed0
 800b264:	20000ec4 	.word	0x20000ec4
 800b268:	200009ec 	.word	0x200009ec
 800b26c:	200009e8 	.word	0x200009e8

0800b270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10b      	bne.n	800b298 <vTaskPlaceOnEventList+0x28>
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	b672      	cpsid	i
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	b662      	cpsie	i
 800b294:	60fb      	str	r3, [r7, #12]
 800b296:	e7fe      	b.n	800b296 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b298:	4b07      	ldr	r3, [pc, #28]	; (800b2b8 <vTaskPlaceOnEventList+0x48>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3318      	adds	r3, #24
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7fe fe74 	bl	8009f8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	6838      	ldr	r0, [r7, #0]
 800b2aa:	f000 fa7f 	bl	800b7ac <prvAddCurrentTaskToDelayedList>
}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	200009e8 	.word	0x200009e8

0800b2bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <vTaskPlaceOnEventListRestricted+0x2a>
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	b672      	cpsid	i
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	b662      	cpsie	i
 800b2e2:	617b      	str	r3, [r7, #20]
 800b2e4:	e7fe      	b.n	800b2e4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2e6:	4b0a      	ldr	r3, [pc, #40]	; (800b310 <vTaskPlaceOnEventListRestricted+0x54>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3318      	adds	r3, #24
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7fe fe29 	bl	8009f46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	68b8      	ldr	r0, [r7, #8]
 800b304:	f000 fa52 	bl	800b7ac <prvAddCurrentTaskToDelayedList>
	}
 800b308:	bf00      	nop
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	200009e8 	.word	0x200009e8

0800b314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10b      	bne.n	800b342 <xTaskRemoveFromEventList+0x2e>
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	b672      	cpsid	i
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	b662      	cpsie	i
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e7fe      	b.n	800b340 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	3318      	adds	r3, #24
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe fe5a 	bl	800a000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b34c:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <xTaskRemoveFromEventList+0xb0>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11d      	bne.n	800b390 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	3304      	adds	r3, #4
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe fe51 	bl	800a000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b362:	4b19      	ldr	r3, [pc, #100]	; (800b3c8 <xTaskRemoveFromEventList+0xb4>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d903      	bls.n	800b372 <xTaskRemoveFromEventList+0x5e>
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	4a16      	ldr	r2, [pc, #88]	; (800b3c8 <xTaskRemoveFromEventList+0xb4>)
 800b370:	6013      	str	r3, [r2, #0]
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4a13      	ldr	r2, [pc, #76]	; (800b3cc <xTaskRemoveFromEventList+0xb8>)
 800b380:	441a      	add	r2, r3
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	3304      	adds	r3, #4
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7fe fddc 	bl	8009f46 <vListInsertEnd>
 800b38e:	e005      	b.n	800b39c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	3318      	adds	r3, #24
 800b394:	4619      	mov	r1, r3
 800b396:	480e      	ldr	r0, [pc, #56]	; (800b3d0 <xTaskRemoveFromEventList+0xbc>)
 800b398:	f7fe fdd5 	bl	8009f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a0:	4b0c      	ldr	r3, [pc, #48]	; (800b3d4 <xTaskRemoveFromEventList+0xc0>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d905      	bls.n	800b3b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3ae:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <xTaskRemoveFromEventList+0xc4>)
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	e001      	b.n	800b3ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3ba:	697b      	ldr	r3, [r7, #20]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3718      	adds	r7, #24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000ee4 	.word	0x20000ee4
 800b3c8:	20000ec4 	.word	0x20000ec4
 800b3cc:	200009ec 	.word	0x200009ec
 800b3d0:	20000e7c 	.word	0x20000e7c
 800b3d4:	200009e8 	.word	0x200009e8
 800b3d8:	20000ed0 	.word	0x20000ed0

0800b3dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3e4:	4b06      	ldr	r3, [pc, #24]	; (800b400 <vTaskInternalSetTimeOutState+0x24>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3ec:	4b05      	ldr	r3, [pc, #20]	; (800b404 <vTaskInternalSetTimeOutState+0x28>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	605a      	str	r2, [r3, #4]
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	20000ed4 	.word	0x20000ed4
 800b404:	20000ec0 	.word	0x20000ec0

0800b408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10b      	bne.n	800b430 <xTaskCheckForTimeOut+0x28>
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	b672      	cpsid	i
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	b662      	cpsie	i
 800b42c:	613b      	str	r3, [r7, #16]
 800b42e:	e7fe      	b.n	800b42e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10b      	bne.n	800b44e <xTaskCheckForTimeOut+0x46>
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	b672      	cpsid	i
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	b662      	cpsie	i
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e7fe      	b.n	800b44c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b44e:	f000 fe5b 	bl	800c108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b452:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <xTaskCheckForTimeOut+0xc0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46a:	d102      	bne.n	800b472 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	e023      	b.n	800b4ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	4b15      	ldr	r3, [pc, #84]	; (800b4cc <xTaskCheckForTimeOut+0xc4>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d007      	beq.n	800b48e <xTaskCheckForTimeOut+0x86>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	429a      	cmp	r2, r3
 800b486:	d302      	bcc.n	800b48e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e015      	b.n	800b4ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	429a      	cmp	r2, r3
 800b496:	d20b      	bcs.n	800b4b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff ff99 	bl	800b3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61fb      	str	r3, [r7, #28]
 800b4ae:	e004      	b.n	800b4ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4ba:	f000 fe57 	bl	800c16c <vPortExitCritical>

	return xReturn;
 800b4be:	69fb      	ldr	r3, [r7, #28]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3720      	adds	r7, #32
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000ec0 	.word	0x20000ec0
 800b4cc:	20000ed4 	.word	0x20000ed4

0800b4d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4d4:	4b03      	ldr	r3, [pc, #12]	; (800b4e4 <vTaskMissedYield+0x14>)
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	601a      	str	r2, [r3, #0]
}
 800b4da:	bf00      	nop
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	20000ed0 	.word	0x20000ed0

0800b4e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4f0:	f000 f852 	bl	800b598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4f4:	4b06      	ldr	r3, [pc, #24]	; (800b510 <prvIdleTask+0x28>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d9f9      	bls.n	800b4f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <prvIdleTask+0x2c>)
 800b4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b50c:	e7f0      	b.n	800b4f0 <prvIdleTask+0x8>
 800b50e:	bf00      	nop
 800b510:	200009ec 	.word	0x200009ec
 800b514:	e000ed04 	.word	0xe000ed04

0800b518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b51e:	2300      	movs	r3, #0
 800b520:	607b      	str	r3, [r7, #4]
 800b522:	e00c      	b.n	800b53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4a12      	ldr	r2, [pc, #72]	; (800b578 <prvInitialiseTaskLists+0x60>)
 800b530:	4413      	add	r3, r2
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fcda 	bl	8009eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	3301      	adds	r3, #1
 800b53c:	607b      	str	r3, [r7, #4]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b37      	cmp	r3, #55	; 0x37
 800b542:	d9ef      	bls.n	800b524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b544:	480d      	ldr	r0, [pc, #52]	; (800b57c <prvInitialiseTaskLists+0x64>)
 800b546:	f7fe fcd1 	bl	8009eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b54a:	480d      	ldr	r0, [pc, #52]	; (800b580 <prvInitialiseTaskLists+0x68>)
 800b54c:	f7fe fcce 	bl	8009eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b550:	480c      	ldr	r0, [pc, #48]	; (800b584 <prvInitialiseTaskLists+0x6c>)
 800b552:	f7fe fccb 	bl	8009eec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b556:	480c      	ldr	r0, [pc, #48]	; (800b588 <prvInitialiseTaskLists+0x70>)
 800b558:	f7fe fcc8 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b55c:	480b      	ldr	r0, [pc, #44]	; (800b58c <prvInitialiseTaskLists+0x74>)
 800b55e:	f7fe fcc5 	bl	8009eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b562:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <prvInitialiseTaskLists+0x78>)
 800b564:	4a05      	ldr	r2, [pc, #20]	; (800b57c <prvInitialiseTaskLists+0x64>)
 800b566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <prvInitialiseTaskLists+0x7c>)
 800b56a:	4a05      	ldr	r2, [pc, #20]	; (800b580 <prvInitialiseTaskLists+0x68>)
 800b56c:	601a      	str	r2, [r3, #0]
}
 800b56e:	bf00      	nop
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	200009ec 	.word	0x200009ec
 800b57c:	20000e4c 	.word	0x20000e4c
 800b580:	20000e60 	.word	0x20000e60
 800b584:	20000e7c 	.word	0x20000e7c
 800b588:	20000e90 	.word	0x20000e90
 800b58c:	20000ea8 	.word	0x20000ea8
 800b590:	20000e74 	.word	0x20000e74
 800b594:	20000e78 	.word	0x20000e78

0800b598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b59e:	e019      	b.n	800b5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5a0:	f000 fdb2 	bl	800c108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5a4:	4b0f      	ldr	r3, [pc, #60]	; (800b5e4 <prvCheckTasksWaitingTermination+0x4c>)
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fe fd25 	bl	800a000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5b6:	4b0c      	ldr	r3, [pc, #48]	; (800b5e8 <prvCheckTasksWaitingTermination+0x50>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	4a0a      	ldr	r2, [pc, #40]	; (800b5e8 <prvCheckTasksWaitingTermination+0x50>)
 800b5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <prvCheckTasksWaitingTermination+0x54>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	4a09      	ldr	r2, [pc, #36]	; (800b5ec <prvCheckTasksWaitingTermination+0x54>)
 800b5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5ca:	f000 fdcf 	bl	800c16c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f80e 	bl	800b5f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5d4:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <prvCheckTasksWaitingTermination+0x54>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e1      	bne.n	800b5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20000e90 	.word	0x20000e90
 800b5e8:	20000ebc 	.word	0x20000ebc
 800b5ec:	20000ea4 	.word	0x20000ea4

0800b5f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d108      	bne.n	800b614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b606:	4618      	mov	r0, r3
 800b608:	f000 ff68 	bl	800c4dc <vPortFree>
				vPortFree( pxTCB );
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 ff65 	bl	800c4dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b612:	e019      	b.n	800b648 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d103      	bne.n	800b626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 ff5c 	bl	800c4dc <vPortFree>
	}
 800b624:	e010      	b.n	800b648 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d00b      	beq.n	800b648 <prvDeleteTCB+0x58>
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	b672      	cpsid	i
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	b662      	cpsie	i
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e7fe      	b.n	800b646 <prvDeleteTCB+0x56>
	}
 800b648:	bf00      	nop
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b656:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <prvResetNextTaskUnblockTime+0x38>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d104      	bne.n	800b66a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b660:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <prvResetNextTaskUnblockTime+0x3c>)
 800b662:	f04f 32ff 	mov.w	r2, #4294967295
 800b666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b668:	e008      	b.n	800b67c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b66a:	4b07      	ldr	r3, [pc, #28]	; (800b688 <prvResetNextTaskUnblockTime+0x38>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	4a04      	ldr	r2, [pc, #16]	; (800b68c <prvResetNextTaskUnblockTime+0x3c>)
 800b67a:	6013      	str	r3, [r2, #0]
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	20000e74 	.word	0x20000e74
 800b68c:	20000edc 	.word	0x20000edc

0800b690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b696:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <xTaskGetSchedulerState+0x34>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d102      	bne.n	800b6a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	607b      	str	r3, [r7, #4]
 800b6a2:	e008      	b.n	800b6b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a4:	4b08      	ldr	r3, [pc, #32]	; (800b6c8 <xTaskGetSchedulerState+0x38>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	607b      	str	r3, [r7, #4]
 800b6b0:	e001      	b.n	800b6b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6b6:	687b      	ldr	r3, [r7, #4]
	}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	20000ec8 	.word	0x20000ec8
 800b6c8:	20000ee4 	.word	0x20000ee4

0800b6cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b086      	sub	sp, #24
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d058      	beq.n	800b794 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6e2:	4b2f      	ldr	r3, [pc, #188]	; (800b7a0 <xTaskPriorityDisinherit+0xd4>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d00b      	beq.n	800b704 <xTaskPriorityDisinherit+0x38>
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	b672      	cpsid	i
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	b662      	cpsie	i
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e7fe      	b.n	800b702 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10b      	bne.n	800b724 <xTaskPriorityDisinherit+0x58>
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	b672      	cpsid	i
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	b662      	cpsie	i
 800b720:	60bb      	str	r3, [r7, #8]
 800b722:	e7fe      	b.n	800b722 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b728:	1e5a      	subs	r2, r3, #1
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b736:	429a      	cmp	r2, r3
 800b738:	d02c      	beq.n	800b794 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d128      	bne.n	800b794 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	3304      	adds	r3, #4
 800b746:	4618      	mov	r0, r3
 800b748:	f7fe fc5a 	bl	800a000 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b764:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <xTaskPriorityDisinherit+0xd8>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d903      	bls.n	800b774 <xTaskPriorityDisinherit+0xa8>
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	4a0c      	ldr	r2, [pc, #48]	; (800b7a4 <xTaskPriorityDisinherit+0xd8>)
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b778:	4613      	mov	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4a09      	ldr	r2, [pc, #36]	; (800b7a8 <xTaskPriorityDisinherit+0xdc>)
 800b782:	441a      	add	r2, r3
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	3304      	adds	r3, #4
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f7fe fbdb 	bl	8009f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b790:	2301      	movs	r3, #1
 800b792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b794:	697b      	ldr	r3, [r7, #20]
	}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	200009e8 	.word	0x200009e8
 800b7a4:	20000ec4 	.word	0x20000ec4
 800b7a8:	200009ec 	.word	0x200009ec

0800b7ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7b6:	4b21      	ldr	r3, [pc, #132]	; (800b83c <prvAddCurrentTaskToDelayedList+0x90>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7bc:	4b20      	ldr	r3, [pc, #128]	; (800b840 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fc1c 	bl	800a000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ce:	d10a      	bne.n	800b7e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d007      	beq.n	800b7e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7d6:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4819      	ldr	r0, [pc, #100]	; (800b844 <prvAddCurrentTaskToDelayedList+0x98>)
 800b7e0:	f7fe fbb1 	bl	8009f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7e4:	e026      	b.n	800b834 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7ee:	4b14      	ldr	r3, [pc, #80]	; (800b840 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d209      	bcs.n	800b812 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7fe:	4b12      	ldr	r3, [pc, #72]	; (800b848 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <prvAddCurrentTaskToDelayedList+0x94>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3304      	adds	r3, #4
 800b808:	4619      	mov	r1, r3
 800b80a:	4610      	mov	r0, r2
 800b80c:	f7fe fbbf 	bl	8009f8e <vListInsert>
}
 800b810:	e010      	b.n	800b834 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b812:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <prvAddCurrentTaskToDelayedList+0x94>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3304      	adds	r3, #4
 800b81c:	4619      	mov	r1, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	f7fe fbb5 	bl	8009f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b824:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d202      	bcs.n	800b834 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b82e:	4a08      	ldr	r2, [pc, #32]	; (800b850 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	6013      	str	r3, [r2, #0]
}
 800b834:	bf00      	nop
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20000ec0 	.word	0x20000ec0
 800b840:	200009e8 	.word	0x200009e8
 800b844:	20000ea8 	.word	0x20000ea8
 800b848:	20000e78 	.word	0x20000e78
 800b84c:	20000e74 	.word	0x20000e74
 800b850:	20000edc 	.word	0x20000edc

0800b854 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b85e:	f000 fb0d 	bl	800be7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b862:	4b1d      	ldr	r3, [pc, #116]	; (800b8d8 <xTimerCreateTimerTask+0x84>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d021      	beq.n	800b8ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b872:	1d3a      	adds	r2, r7, #4
 800b874:	f107 0108 	add.w	r1, r7, #8
 800b878:	f107 030c 	add.w	r3, r7, #12
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe fb1b 	bl	8009eb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	9202      	str	r2, [sp, #8]
 800b88a:	9301      	str	r3, [sp, #4]
 800b88c:	2302      	movs	r3, #2
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	2300      	movs	r3, #0
 800b892:	460a      	mov	r2, r1
 800b894:	4911      	ldr	r1, [pc, #68]	; (800b8dc <xTimerCreateTimerTask+0x88>)
 800b896:	4812      	ldr	r0, [pc, #72]	; (800b8e0 <xTimerCreateTimerTask+0x8c>)
 800b898:	f7ff f8d2 	bl	800aa40 <xTaskCreateStatic>
 800b89c:	4602      	mov	r2, r0
 800b89e:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <xTimerCreateTimerTask+0x90>)
 800b8a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8a2:	4b10      	ldr	r3, [pc, #64]	; (800b8e4 <xTimerCreateTimerTask+0x90>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10b      	bne.n	800b8cc <xTimerCreateTimerTask+0x78>
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	b672      	cpsid	i
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	b662      	cpsie	i
 800b8c8:	613b      	str	r3, [r7, #16]
 800b8ca:	e7fe      	b.n	800b8ca <xTimerCreateTimerTask+0x76>
	return xReturn;
 800b8cc:	697b      	ldr	r3, [r7, #20]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000f18 	.word	0x20000f18
 800b8dc:	080100c4 	.word	0x080100c4
 800b8e0:	0800ba21 	.word	0x0800ba21
 800b8e4:	20000f1c 	.word	0x20000f1c

0800b8e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08a      	sub	sp, #40	; 0x28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10b      	bne.n	800b918 <xTimerGenericCommand+0x30>
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	b672      	cpsid	i
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	b662      	cpsie	i
 800b914:	623b      	str	r3, [r7, #32]
 800b916:	e7fe      	b.n	800b916 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b918:	4b19      	ldr	r3, [pc, #100]	; (800b980 <xTimerGenericCommand+0x98>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d02a      	beq.n	800b976 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b05      	cmp	r3, #5
 800b930:	dc18      	bgt.n	800b964 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b932:	f7ff fead 	bl	800b690 <xTaskGetSchedulerState>
 800b936:	4603      	mov	r3, r0
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d109      	bne.n	800b950 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b93c:	4b10      	ldr	r3, [pc, #64]	; (800b980 <xTimerGenericCommand+0x98>)
 800b93e:	6818      	ldr	r0, [r3, #0]
 800b940:	f107 0110 	add.w	r1, r7, #16
 800b944:	2300      	movs	r3, #0
 800b946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b948:	f7fe fc8e 	bl	800a268 <xQueueGenericSend>
 800b94c:	6278      	str	r0, [r7, #36]	; 0x24
 800b94e:	e012      	b.n	800b976 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b950:	4b0b      	ldr	r3, [pc, #44]	; (800b980 <xTimerGenericCommand+0x98>)
 800b952:	6818      	ldr	r0, [r3, #0]
 800b954:	f107 0110 	add.w	r1, r7, #16
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	f7fe fc84 	bl	800a268 <xQueueGenericSend>
 800b960:	6278      	str	r0, [r7, #36]	; 0x24
 800b962:	e008      	b.n	800b976 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b964:	4b06      	ldr	r3, [pc, #24]	; (800b980 <xTimerGenericCommand+0x98>)
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	f107 0110 	add.w	r1, r7, #16
 800b96c:	2300      	movs	r3, #0
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	f7fe fd7c 	bl	800a46c <xQueueGenericSendFromISR>
 800b974:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3728      	adds	r7, #40	; 0x28
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	20000f18 	.word	0x20000f18

0800b984 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af02      	add	r7, sp, #8
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b98e:	4b23      	ldr	r3, [pc, #140]	; (800ba1c <prvProcessExpiredTimer+0x98>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fb2f 	bl	800a000 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a8:	f003 0304 	and.w	r3, r3, #4
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d023      	beq.n	800b9f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	699a      	ldr	r2, [r3, #24]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	18d1      	adds	r1, r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	6978      	ldr	r0, [r7, #20]
 800b9be:	f000 f8d3 	bl	800bb68 <prvInsertTimerInActiveList>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d020      	beq.n	800ba0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	6978      	ldr	r0, [r7, #20]
 800b9d4:	f7ff ff88 	bl	800b8e8 <xTimerGenericCommand>
 800b9d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d114      	bne.n	800ba0a <prvProcessExpiredTimer+0x86>
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	b672      	cpsid	i
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	b662      	cpsie	i
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e7fe      	b.n	800b9f6 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9fe:	f023 0301 	bic.w	r3, r3, #1
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	6978      	ldr	r0, [r7, #20]
 800ba10:	4798      	blx	r3
}
 800ba12:	bf00      	nop
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20000f10 	.word	0x20000f10

0800ba20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba28:	f107 0308 	add.w	r3, r7, #8
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 f857 	bl	800bae0 <prvGetNextExpireTime>
 800ba32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	4619      	mov	r1, r3
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 f803 	bl	800ba44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba3e:	f000 f8d5 	bl	800bbec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba42:	e7f1      	b.n	800ba28 <prvTimerTask+0x8>

0800ba44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba4e:	f7ff fa3b 	bl	800aec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba52:	f107 0308 	add.w	r3, r7, #8
 800ba56:	4618      	mov	r0, r3
 800ba58:	f000 f866 	bl	800bb28 <prvSampleTimeNow>
 800ba5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d130      	bne.n	800bac6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <prvProcessTimerOrBlockTask+0x3c>
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d806      	bhi.n	800ba80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba72:	f7ff fa37 	bl	800aee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba76:	68f9      	ldr	r1, [r7, #12]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff ff83 	bl	800b984 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba7e:	e024      	b.n	800baca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d008      	beq.n	800ba98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba86:	4b13      	ldr	r3, [pc, #76]	; (800bad4 <prvProcessTimerOrBlockTask+0x90>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <prvProcessTimerOrBlockTask+0x50>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e000      	b.n	800ba96 <prvProcessTimerOrBlockTask+0x52>
 800ba94:	2300      	movs	r3, #0
 800ba96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba98:	4b0f      	ldr	r3, [pc, #60]	; (800bad8 <prvProcessTimerOrBlockTask+0x94>)
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	f7fe ff97 	bl	800a9d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800baaa:	f7ff fa1b 	bl	800aee4 <xTaskResumeAll>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <prvProcessTimerOrBlockTask+0x98>)
 800bab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baba:	601a      	str	r2, [r3, #0]
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	f3bf 8f6f 	isb	sy
}
 800bac4:	e001      	b.n	800baca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bac6:	f7ff fa0d 	bl	800aee4 <xTaskResumeAll>
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000f14 	.word	0x20000f14
 800bad8:	20000f18 	.word	0x20000f18
 800badc:	e000ed04 	.word	0xe000ed04

0800bae0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bae8:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <prvGetNextExpireTime+0x44>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <prvGetNextExpireTime+0x16>
 800baf2:	2201      	movs	r2, #1
 800baf4:	e000      	b.n	800baf8 <prvGetNextExpireTime+0x18>
 800baf6:	2200      	movs	r2, #0
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d105      	bne.n	800bb10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb04:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <prvGetNextExpireTime+0x44>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	e001      	b.n	800bb14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb14:	68fb      	ldr	r3, [r7, #12]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	20000f10 	.word	0x20000f10

0800bb28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb30:	f7ff fa76 	bl	800b020 <xTaskGetTickCount>
 800bb34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb36:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <prvSampleTimeNow+0x3c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d205      	bcs.n	800bb4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb40:	f000 f936 	bl	800bdb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	e002      	b.n	800bb52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb52:	4a04      	ldr	r2, [pc, #16]	; (800bb64 <prvSampleTimeNow+0x3c>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb58:	68fb      	ldr	r3, [r7, #12]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20000f20 	.word	0x20000f20

0800bb68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d812      	bhi.n	800bbb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	1ad2      	subs	r2, r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d302      	bcc.n	800bba2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	617b      	str	r3, [r7, #20]
 800bba0:	e01b      	b.n	800bbda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bba2:	4b10      	ldr	r3, [pc, #64]	; (800bbe4 <prvInsertTimerInActiveList+0x7c>)
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f7fe f9ee 	bl	8009f8e <vListInsert>
 800bbb2:	e012      	b.n	800bbda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d206      	bcs.n	800bbca <prvInsertTimerInActiveList+0x62>
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d302      	bcc.n	800bbca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	e007      	b.n	800bbda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbca:	4b07      	ldr	r3, [pc, #28]	; (800bbe8 <prvInsertTimerInActiveList+0x80>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4610      	mov	r0, r2
 800bbd6:	f7fe f9da 	bl	8009f8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbda:	697b      	ldr	r3, [r7, #20]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3718      	adds	r7, #24
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20000f14 	.word	0x20000f14
 800bbe8:	20000f10 	.word	0x20000f10

0800bbec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08e      	sub	sp, #56	; 0x38
 800bbf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbf2:	e0cc      	b.n	800bd8e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	da19      	bge.n	800bc2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbfa:	1d3b      	adds	r3, r7, #4
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10b      	bne.n	800bc1e <prvProcessReceivedCommands+0x32>
 800bc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0a:	b672      	cpsid	i
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	b662      	cpsie	i
 800bc1a:	61fb      	str	r3, [r7, #28]
 800bc1c:	e7fe      	b.n	800bc1c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc24:	6850      	ldr	r0, [r2, #4]
 800bc26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc28:	6892      	ldr	r2, [r2, #8]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f2c0 80ab 	blt.w	800bd8c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d004      	beq.n	800bc4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe f9da 	bl	800a000 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc4c:	463b      	mov	r3, r7
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff ff6a 	bl	800bb28 <prvSampleTimeNow>
 800bc54:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b09      	cmp	r3, #9
 800bc5a:	f200 8098 	bhi.w	800bd8e <prvProcessReceivedCommands+0x1a2>
 800bc5e:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <prvProcessReceivedCommands+0x78>)
 800bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc64:	0800bc8d 	.word	0x0800bc8d
 800bc68:	0800bc8d 	.word	0x0800bc8d
 800bc6c:	0800bc8d 	.word	0x0800bc8d
 800bc70:	0800bd03 	.word	0x0800bd03
 800bc74:	0800bd17 	.word	0x0800bd17
 800bc78:	0800bd63 	.word	0x0800bd63
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc8d 	.word	0x0800bc8d
 800bc84:	0800bd03 	.word	0x0800bd03
 800bc88:	0800bd17 	.word	0x0800bd17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	18d1      	adds	r1, r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcac:	f7ff ff5c 	bl	800bb68 <prvInsertTimerInActiveList>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d06b      	beq.n	800bd8e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	6a1b      	ldr	r3, [r3, #32]
 800bcba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d060      	beq.n	800bd8e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	441a      	add	r2, r3
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2100      	movs	r1, #0
 800bcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcde:	f7ff fe03 	bl	800b8e8 <xTimerGenericCommand>
 800bce2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d151      	bne.n	800bd8e <prvProcessReceivedCommands+0x1a2>
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	b672      	cpsid	i
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	b662      	cpsie	i
 800bcfe:	61bb      	str	r3, [r7, #24]
 800bd00:	e7fe      	b.n	800bd00 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd08:	f023 0301 	bic.w	r3, r3, #1
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd14:	e03b      	b.n	800bd8e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1c:	f043 0301 	orr.w	r3, r3, #1
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10b      	bne.n	800bd4e <prvProcessReceivedCommands+0x162>
 800bd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3a:	b672      	cpsid	i
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	b662      	cpsie	i
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e7fe      	b.n	800bd4c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	699a      	ldr	r2, [r3, #24]
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	18d1      	adds	r1, r2, r3
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5c:	f7ff ff04 	bl	800bb68 <prvInsertTimerInActiveList>
					break;
 800bd60:	e015      	b.n	800bd8e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd68:	f003 0302 	and.w	r3, r3, #2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d103      	bne.n	800bd78 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd72:	f000 fbb3 	bl	800c4dc <vPortFree>
 800bd76:	e00a      	b.n	800bd8e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd8a:	e000      	b.n	800bd8e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd8e:	4b07      	ldr	r3, [pc, #28]	; (800bdac <prvProcessReceivedCommands+0x1c0>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	1d39      	adds	r1, r7, #4
 800bd94:	2200      	movs	r2, #0
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe fc04 	bl	800a5a4 <xQueueReceive>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f47f af28 	bne.w	800bbf4 <prvProcessReceivedCommands+0x8>
	}
}
 800bda4:	bf00      	nop
 800bda6:	3730      	adds	r7, #48	; 0x30
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20000f18 	.word	0x20000f18

0800bdb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b088      	sub	sp, #32
 800bdb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdb6:	e049      	b.n	800be4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdb8:	4b2e      	ldr	r3, [pc, #184]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc2:	4b2c      	ldr	r3, [pc, #176]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fe f915 	bl	800a000 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde4:	f003 0304 	and.w	r3, r3, #4
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d02f      	beq.n	800be4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d90e      	bls.n	800be1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be0a:	4b1a      	ldr	r3, [pc, #104]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3304      	adds	r3, #4
 800be12:	4619      	mov	r1, r3
 800be14:	4610      	mov	r0, r2
 800be16:	f7fe f8ba 	bl	8009f8e <vListInsert>
 800be1a:	e017      	b.n	800be4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be1c:	2300      	movs	r3, #0
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	2300      	movs	r3, #0
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	2100      	movs	r1, #0
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fd5e 	bl	800b8e8 <xTimerGenericCommand>
 800be2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <prvSwitchTimerLists+0x9c>
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	b672      	cpsid	i
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	b662      	cpsie	i
 800be48:	603b      	str	r3, [r7, #0]
 800be4a:	e7fe      	b.n	800be4a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be4c:	4b09      	ldr	r3, [pc, #36]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1b0      	bne.n	800bdb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be56:	4b07      	ldr	r3, [pc, #28]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be5c:	4b06      	ldr	r3, [pc, #24]	; (800be78 <prvSwitchTimerLists+0xc8>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a04      	ldr	r2, [pc, #16]	; (800be74 <prvSwitchTimerLists+0xc4>)
 800be62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be64:	4a04      	ldr	r2, [pc, #16]	; (800be78 <prvSwitchTimerLists+0xc8>)
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	6013      	str	r3, [r2, #0]
}
 800be6a:	bf00      	nop
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20000f10 	.word	0x20000f10
 800be78:	20000f14 	.word	0x20000f14

0800be7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be82:	f000 f941 	bl	800c108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be86:	4b15      	ldr	r3, [pc, #84]	; (800bedc <prvCheckForValidListAndQueue+0x60>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d120      	bne.n	800bed0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be8e:	4814      	ldr	r0, [pc, #80]	; (800bee0 <prvCheckForValidListAndQueue+0x64>)
 800be90:	f7fe f82c 	bl	8009eec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be94:	4813      	ldr	r0, [pc, #76]	; (800bee4 <prvCheckForValidListAndQueue+0x68>)
 800be96:	f7fe f829 	bl	8009eec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be9a:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <prvCheckForValidListAndQueue+0x6c>)
 800be9c:	4a10      	ldr	r2, [pc, #64]	; (800bee0 <prvCheckForValidListAndQueue+0x64>)
 800be9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bea0:	4b12      	ldr	r3, [pc, #72]	; (800beec <prvCheckForValidListAndQueue+0x70>)
 800bea2:	4a10      	ldr	r2, [pc, #64]	; (800bee4 <prvCheckForValidListAndQueue+0x68>)
 800bea4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bea6:	2300      	movs	r3, #0
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <prvCheckForValidListAndQueue+0x74>)
 800beac:	4a11      	ldr	r2, [pc, #68]	; (800bef4 <prvCheckForValidListAndQueue+0x78>)
 800beae:	2110      	movs	r1, #16
 800beb0:	200a      	movs	r0, #10
 800beb2:	f7fe f939 	bl	800a128 <xQueueGenericCreateStatic>
 800beb6:	4602      	mov	r2, r0
 800beb8:	4b08      	ldr	r3, [pc, #32]	; (800bedc <prvCheckForValidListAndQueue+0x60>)
 800beba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bebc:	4b07      	ldr	r3, [pc, #28]	; (800bedc <prvCheckForValidListAndQueue+0x60>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d005      	beq.n	800bed0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <prvCheckForValidListAndQueue+0x60>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	490b      	ldr	r1, [pc, #44]	; (800bef8 <prvCheckForValidListAndQueue+0x7c>)
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fd5c 	bl	800a988 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bed0:	f000 f94c 	bl	800c16c <vPortExitCritical>
}
 800bed4:	bf00      	nop
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20000f18 	.word	0x20000f18
 800bee0:	20000ee8 	.word	0x20000ee8
 800bee4:	20000efc 	.word	0x20000efc
 800bee8:	20000f10 	.word	0x20000f10
 800beec:	20000f14 	.word	0x20000f14
 800bef0:	20000fc4 	.word	0x20000fc4
 800bef4:	20000f24 	.word	0x20000f24
 800bef8:	080100cc 	.word	0x080100cc

0800befc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3b04      	subs	r3, #4
 800bf0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3b04      	subs	r3, #4
 800bf1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f023 0201 	bic.w	r2, r3, #1
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	3b04      	subs	r3, #4
 800bf2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf2c:	4a0c      	ldr	r2, [pc, #48]	; (800bf60 <pxPortInitialiseStack+0x64>)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3b14      	subs	r3, #20
 800bf36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3b04      	subs	r3, #4
 800bf42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f06f 0202 	mvn.w	r2, #2
 800bf4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	3b20      	subs	r3, #32
 800bf50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf52:	68fb      	ldr	r3, [r7, #12]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	0800bf65 	.word	0x0800bf65

0800bf64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf6e:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <prvTaskExitError+0x58>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf76:	d00b      	beq.n	800bf90 <prvTaskExitError+0x2c>
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	b672      	cpsid	i
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	b662      	cpsie	i
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	e7fe      	b.n	800bf8e <prvTaskExitError+0x2a>
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	b672      	cpsid	i
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	b662      	cpsie	i
 800bfa4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfa6:	bf00      	nop
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0fc      	beq.n	800bfa8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfae:	bf00      	nop
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	200000c8 	.word	0x200000c8

0800bfc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfc0:	4b07      	ldr	r3, [pc, #28]	; (800bfe0 <pxCurrentTCBConst2>)
 800bfc2:	6819      	ldr	r1, [r3, #0]
 800bfc4:	6808      	ldr	r0, [r1, #0]
 800bfc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfca:	f380 8809 	msr	PSP, r0
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f04f 0000 	mov.w	r0, #0
 800bfd6:	f380 8811 	msr	BASEPRI, r0
 800bfda:	4770      	bx	lr
 800bfdc:	f3af 8000 	nop.w

0800bfe0 <pxCurrentTCBConst2>:
 800bfe0:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfe4:	bf00      	nop
 800bfe6:	bf00      	nop

0800bfe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfe8:	4808      	ldr	r0, [pc, #32]	; (800c00c <prvPortStartFirstTask+0x24>)
 800bfea:	6800      	ldr	r0, [r0, #0]
 800bfec:	6800      	ldr	r0, [r0, #0]
 800bfee:	f380 8808 	msr	MSP, r0
 800bff2:	f04f 0000 	mov.w	r0, #0
 800bff6:	f380 8814 	msr	CONTROL, r0
 800bffa:	b662      	cpsie	i
 800bffc:	b661      	cpsie	f
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	df00      	svc	0
 800c008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c00a:	bf00      	nop
 800c00c:	e000ed08 	.word	0xe000ed08

0800c010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c016:	4b36      	ldr	r3, [pc, #216]	; (800c0f0 <xPortStartScheduler+0xe0>)
 800c018:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	22ff      	movs	r2, #255	; 0xff
 800c026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c030:	78fb      	ldrb	r3, [r7, #3]
 800c032:	b2db      	uxtb	r3, r3
 800c034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	4b2e      	ldr	r3, [pc, #184]	; (800c0f4 <xPortStartScheduler+0xe4>)
 800c03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c03e:	4b2e      	ldr	r3, [pc, #184]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c040:	2207      	movs	r2, #7
 800c042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c044:	e009      	b.n	800c05a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c046:	4b2c      	ldr	r3, [pc, #176]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	4a2a      	ldr	r2, [pc, #168]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c050:	78fb      	ldrb	r3, [r7, #3]
 800c052:	b2db      	uxtb	r3, r3
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	b2db      	uxtb	r3, r3
 800c058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c05a:	78fb      	ldrb	r3, [r7, #3]
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c062:	2b80      	cmp	r3, #128	; 0x80
 800c064:	d0ef      	beq.n	800c046 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c066:	4b24      	ldr	r3, [pc, #144]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f1c3 0307 	rsb	r3, r3, #7
 800c06e:	2b04      	cmp	r3, #4
 800c070:	d00b      	beq.n	800c08a <xPortStartScheduler+0x7a>
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	b672      	cpsid	i
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	b662      	cpsie	i
 800c086:	60bb      	str	r3, [r7, #8]
 800c088:	e7fe      	b.n	800c088 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c08a:	4b1b      	ldr	r3, [pc, #108]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	4a19      	ldr	r2, [pc, #100]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c092:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c094:	4b18      	ldr	r3, [pc, #96]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c09c:	4a16      	ldr	r2, [pc, #88]	; (800c0f8 <xPortStartScheduler+0xe8>)
 800c09e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	b2da      	uxtb	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0a8:	4b14      	ldr	r3, [pc, #80]	; (800c0fc <xPortStartScheduler+0xec>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a13      	ldr	r2, [pc, #76]	; (800c0fc <xPortStartScheduler+0xec>)
 800c0ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0b4:	4b11      	ldr	r3, [pc, #68]	; (800c0fc <xPortStartScheduler+0xec>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a10      	ldr	r2, [pc, #64]	; (800c0fc <xPortStartScheduler+0xec>)
 800c0ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0c0:	f000 f8d4 	bl	800c26c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0c4:	4b0e      	ldr	r3, [pc, #56]	; (800c100 <xPortStartScheduler+0xf0>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0ca:	f000 f8f3 	bl	800c2b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0ce:	4b0d      	ldr	r3, [pc, #52]	; (800c104 <xPortStartScheduler+0xf4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a0c      	ldr	r2, [pc, #48]	; (800c104 <xPortStartScheduler+0xf4>)
 800c0d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c0d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0da:	f7ff ff85 	bl	800bfe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0de:	f7ff f869 	bl	800b1b4 <vTaskSwitchContext>
	prvTaskExitError();
 800c0e2:	f7ff ff3f 	bl	800bf64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	e000e400 	.word	0xe000e400
 800c0f4:	20001014 	.word	0x20001014
 800c0f8:	20001018 	.word	0x20001018
 800c0fc:	e000ed20 	.word	0xe000ed20
 800c100:	200000c8 	.word	0x200000c8
 800c104:	e000ef34 	.word	0xe000ef34

0800c108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	b672      	cpsid	i
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	b662      	cpsie	i
 800c122:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c124:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <vPortEnterCritical+0x5c>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	3301      	adds	r3, #1
 800c12a:	4a0e      	ldr	r2, [pc, #56]	; (800c164 <vPortEnterCritical+0x5c>)
 800c12c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c12e:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <vPortEnterCritical+0x5c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d110      	bne.n	800c158 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c136:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <vPortEnterCritical+0x60>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00b      	beq.n	800c158 <vPortEnterCritical+0x50>
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	b672      	cpsid	i
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	b662      	cpsie	i
 800c154:	603b      	str	r3, [r7, #0]
 800c156:	e7fe      	b.n	800c156 <vPortEnterCritical+0x4e>
	}
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	200000c8 	.word	0x200000c8
 800c168:	e000ed04 	.word	0xe000ed04

0800c16c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c172:	4b12      	ldr	r3, [pc, #72]	; (800c1bc <vPortExitCritical+0x50>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10b      	bne.n	800c192 <vPortExitCritical+0x26>
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	b672      	cpsid	i
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	b662      	cpsie	i
 800c18e:	607b      	str	r3, [r7, #4]
 800c190:	e7fe      	b.n	800c190 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c192:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <vPortExitCritical+0x50>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3b01      	subs	r3, #1
 800c198:	4a08      	ldr	r2, [pc, #32]	; (800c1bc <vPortExitCritical+0x50>)
 800c19a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c19c:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <vPortExitCritical+0x50>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d104      	bne.n	800c1ae <vPortExitCritical+0x42>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1ae:	bf00      	nop
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	200000c8 	.word	0x200000c8

0800c1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1c0:	f3ef 8009 	mrs	r0, PSP
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	4b15      	ldr	r3, [pc, #84]	; (800c220 <pxCurrentTCBConst>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	f01e 0f10 	tst.w	lr, #16
 800c1d0:	bf08      	it	eq
 800c1d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1da:	6010      	str	r0, [r2, #0]
 800c1dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1e4:	b672      	cpsid	i
 800c1e6:	f380 8811 	msr	BASEPRI, r0
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	b662      	cpsie	i
 800c1f4:	f7fe ffde 	bl	800b1b4 <vTaskSwitchContext>
 800c1f8:	f04f 0000 	mov.w	r0, #0
 800c1fc:	f380 8811 	msr	BASEPRI, r0
 800c200:	bc09      	pop	{r0, r3}
 800c202:	6819      	ldr	r1, [r3, #0]
 800c204:	6808      	ldr	r0, [r1, #0]
 800c206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	f01e 0f10 	tst.w	lr, #16
 800c20e:	bf08      	it	eq
 800c210:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c214:	f380 8809 	msr	PSP, r0
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <pxCurrentTCBConst>:
 800c220:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c224:	bf00      	nop
 800c226:	bf00      	nop

0800c228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	b672      	cpsid	i
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	b662      	cpsie	i
 800c242:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c244:	f7fe fefc 	bl	800b040 <xTaskIncrementTick>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d003      	beq.n	800c256 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c24e:	4b06      	ldr	r3, [pc, #24]	; (800c268 <SysTick_Handler+0x40>)
 800c250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	2300      	movs	r3, #0
 800c258:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c260:	bf00      	nop
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	e000ed04 	.word	0xe000ed04

0800c26c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c26c:	b480      	push	{r7}
 800c26e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c270:	4b0b      	ldr	r3, [pc, #44]	; (800c2a0 <vPortSetupTimerInterrupt+0x34>)
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c276:	4b0b      	ldr	r3, [pc, #44]	; (800c2a4 <vPortSetupTimerInterrupt+0x38>)
 800c278:	2200      	movs	r2, #0
 800c27a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c27c:	4b0a      	ldr	r3, [pc, #40]	; (800c2a8 <vPortSetupTimerInterrupt+0x3c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a0a      	ldr	r2, [pc, #40]	; (800c2ac <vPortSetupTimerInterrupt+0x40>)
 800c282:	fba2 2303 	umull	r2, r3, r2, r3
 800c286:	099b      	lsrs	r3, r3, #6
 800c288:	4a09      	ldr	r2, [pc, #36]	; (800c2b0 <vPortSetupTimerInterrupt+0x44>)
 800c28a:	3b01      	subs	r3, #1
 800c28c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c28e:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <vPortSetupTimerInterrupt+0x34>)
 800c290:	2207      	movs	r2, #7
 800c292:	601a      	str	r2, [r3, #0]
}
 800c294:	bf00      	nop
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	e000e010 	.word	0xe000e010
 800c2a4:	e000e018 	.word	0xe000e018
 800c2a8:	200000bc 	.word	0x200000bc
 800c2ac:	10624dd3 	.word	0x10624dd3
 800c2b0:	e000e014 	.word	0xe000e014

0800c2b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c2c4 <vPortEnableVFP+0x10>
 800c2b8:	6801      	ldr	r1, [r0, #0]
 800c2ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c2be:	6001      	str	r1, [r0, #0]
 800c2c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2c2:	bf00      	nop
 800c2c4:	e000ed88 	.word	0xe000ed88

0800c2c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2ce:	f3ef 8305 	mrs	r3, IPSR
 800c2d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b0f      	cmp	r3, #15
 800c2d8:	d915      	bls.n	800c306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2da:	4a18      	ldr	r2, [pc, #96]	; (800c33c <vPortValidateInterruptPriority+0x74>)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4413      	add	r3, r2
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2e4:	4b16      	ldr	r3, [pc, #88]	; (800c340 <vPortValidateInterruptPriority+0x78>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	7afa      	ldrb	r2, [r7, #11]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d20b      	bcs.n	800c306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	b672      	cpsid	i
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	b662      	cpsie	i
 800c302:	607b      	str	r3, [r7, #4]
 800c304:	e7fe      	b.n	800c304 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c306:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <vPortValidateInterruptPriority+0x7c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c30e:	4b0e      	ldr	r3, [pc, #56]	; (800c348 <vPortValidateInterruptPriority+0x80>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	d90b      	bls.n	800c32e <vPortValidateInterruptPriority+0x66>
 800c316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31a:	b672      	cpsid	i
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	b662      	cpsie	i
 800c32a:	603b      	str	r3, [r7, #0]
 800c32c:	e7fe      	b.n	800c32c <vPortValidateInterruptPriority+0x64>
	}
 800c32e:	bf00      	nop
 800c330:	3714      	adds	r7, #20
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	e000e3f0 	.word	0xe000e3f0
 800c340:	20001014 	.word	0x20001014
 800c344:	e000ed0c 	.word	0xe000ed0c
 800c348:	20001018 	.word	0x20001018

0800c34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08a      	sub	sp, #40	; 0x28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c354:	2300      	movs	r3, #0
 800c356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c358:	f7fe fdb6 	bl	800aec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c35c:	4b5a      	ldr	r3, [pc, #360]	; (800c4c8 <pvPortMalloc+0x17c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d101      	bne.n	800c368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c364:	f000 f916 	bl	800c594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c368:	4b58      	ldr	r3, [pc, #352]	; (800c4cc <pvPortMalloc+0x180>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4013      	ands	r3, r2
 800c370:	2b00      	cmp	r3, #0
 800c372:	f040 8090 	bne.w	800c496 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01e      	beq.n	800c3ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c37c:	2208      	movs	r2, #8
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4413      	add	r3, r2
 800c382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d015      	beq.n	800c3ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f023 0307 	bic.w	r3, r3, #7
 800c394:	3308      	adds	r3, #8
 800c396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f003 0307 	and.w	r3, r3, #7
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00b      	beq.n	800c3ba <pvPortMalloc+0x6e>
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	b672      	cpsid	i
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	b662      	cpsie	i
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e7fe      	b.n	800c3b8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d06a      	beq.n	800c496 <pvPortMalloc+0x14a>
 800c3c0:	4b43      	ldr	r3, [pc, #268]	; (800c4d0 <pvPortMalloc+0x184>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d865      	bhi.n	800c496 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3ca:	4b42      	ldr	r3, [pc, #264]	; (800c4d4 <pvPortMalloc+0x188>)
 800c3cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3ce:	4b41      	ldr	r3, [pc, #260]	; (800c4d4 <pvPortMalloc+0x188>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3d4:	e004      	b.n	800c3e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d903      	bls.n	800c3f2 <pvPortMalloc+0xa6>
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1f1      	bne.n	800c3d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3f2:	4b35      	ldr	r3, [pc, #212]	; (800c4c8 <pvPortMalloc+0x17c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d04c      	beq.n	800c496 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2208      	movs	r2, #8
 800c402:	4413      	add	r3, r2
 800c404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	6a3b      	ldr	r3, [r7, #32]
 800c40c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	685a      	ldr	r2, [r3, #4]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	1ad2      	subs	r2, r2, r3
 800c416:	2308      	movs	r3, #8
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d920      	bls.n	800c460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4413      	add	r3, r2
 800c424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	f003 0307 	and.w	r3, r3, #7
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00b      	beq.n	800c448 <pvPortMalloc+0xfc>
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	b672      	cpsid	i
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	b662      	cpsie	i
 800c444:	613b      	str	r3, [r7, #16]
 800c446:	e7fe      	b.n	800c446 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	1ad2      	subs	r2, r2, r3
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c45a:	69b8      	ldr	r0, [r7, #24]
 800c45c:	f000 f8fc 	bl	800c658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c460:	4b1b      	ldr	r3, [pc, #108]	; (800c4d0 <pvPortMalloc+0x184>)
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	4a19      	ldr	r2, [pc, #100]	; (800c4d0 <pvPortMalloc+0x184>)
 800c46c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c46e:	4b18      	ldr	r3, [pc, #96]	; (800c4d0 <pvPortMalloc+0x184>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	4b19      	ldr	r3, [pc, #100]	; (800c4d8 <pvPortMalloc+0x18c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	429a      	cmp	r2, r3
 800c478:	d203      	bcs.n	800c482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c47a:	4b15      	ldr	r3, [pc, #84]	; (800c4d0 <pvPortMalloc+0x184>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a16      	ldr	r2, [pc, #88]	; (800c4d8 <pvPortMalloc+0x18c>)
 800c480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <pvPortMalloc+0x180>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	431a      	orrs	r2, r3
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c496:	f7fe fd25 	bl	800aee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	f003 0307 	and.w	r3, r3, #7
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <pvPortMalloc+0x170>
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	b672      	cpsid	i
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	b662      	cpsie	i
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	e7fe      	b.n	800c4ba <pvPortMalloc+0x16e>
	return pvReturn;
 800c4bc:	69fb      	ldr	r3, [r7, #28]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3728      	adds	r7, #40	; 0x28
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	2000d374 	.word	0x2000d374
 800c4cc:	2000d380 	.word	0x2000d380
 800c4d0:	2000d378 	.word	0x2000d378
 800c4d4:	2000d36c 	.word	0x2000d36c
 800c4d8:	2000d37c 	.word	0x2000d37c

0800c4dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d04a      	beq.n	800c584 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4ee:	2308      	movs	r3, #8
 800c4f0:	425b      	negs	r3, r3
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	4b22      	ldr	r3, [pc, #136]	; (800c58c <vPortFree+0xb0>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4013      	ands	r3, r2
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10b      	bne.n	800c522 <vPortFree+0x46>
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	b672      	cpsid	i
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	b662      	cpsie	i
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e7fe      	b.n	800c520 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00b      	beq.n	800c542 <vPortFree+0x66>
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	b672      	cpsid	i
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	b662      	cpsie	i
 800c53e:	60bb      	str	r3, [r7, #8]
 800c540:	e7fe      	b.n	800c540 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	4b11      	ldr	r3, [pc, #68]	; (800c58c <vPortFree+0xb0>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4013      	ands	r3, r2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d019      	beq.n	800c584 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d115      	bne.n	800c584 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	4b0b      	ldr	r3, [pc, #44]	; (800c58c <vPortFree+0xb0>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	43db      	mvns	r3, r3
 800c562:	401a      	ands	r2, r3
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c568:	f7fe fcae 	bl	800aec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	4b07      	ldr	r3, [pc, #28]	; (800c590 <vPortFree+0xb4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4413      	add	r3, r2
 800c576:	4a06      	ldr	r2, [pc, #24]	; (800c590 <vPortFree+0xb4>)
 800c578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c57a:	6938      	ldr	r0, [r7, #16]
 800c57c:	f000 f86c 	bl	800c658 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c580:	f7fe fcb0 	bl	800aee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	2000d380 	.word	0x2000d380
 800c590:	2000d378 	.word	0x2000d378

0800c594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c59a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c59e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5a0:	4b27      	ldr	r3, [pc, #156]	; (800c640 <prvHeapInit+0xac>)
 800c5a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00c      	beq.n	800c5c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3307      	adds	r3, #7
 800c5b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f023 0307 	bic.w	r3, r3, #7
 800c5ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	4a1f      	ldr	r2, [pc, #124]	; (800c640 <prvHeapInit+0xac>)
 800c5c4:	4413      	add	r3, r2
 800c5c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5cc:	4a1d      	ldr	r2, [pc, #116]	; (800c644 <prvHeapInit+0xb0>)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5d2:	4b1c      	ldr	r3, [pc, #112]	; (800c644 <prvHeapInit+0xb0>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	4413      	add	r3, r2
 800c5de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5e0:	2208      	movs	r2, #8
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	1a9b      	subs	r3, r3, r2
 800c5e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f023 0307 	bic.w	r3, r3, #7
 800c5ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	4a15      	ldr	r2, [pc, #84]	; (800c648 <prvHeapInit+0xb4>)
 800c5f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5f6:	4b14      	ldr	r3, [pc, #80]	; (800c648 <prvHeapInit+0xb4>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5fe:	4b12      	ldr	r3, [pc, #72]	; (800c648 <prvHeapInit+0xb4>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2200      	movs	r2, #0
 800c604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	1ad2      	subs	r2, r2, r3
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c614:	4b0c      	ldr	r3, [pc, #48]	; (800c648 <prvHeapInit+0xb4>)
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	4a0a      	ldr	r2, [pc, #40]	; (800c64c <prvHeapInit+0xb8>)
 800c622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	4a09      	ldr	r2, [pc, #36]	; (800c650 <prvHeapInit+0xbc>)
 800c62a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c62c:	4b09      	ldr	r3, [pc, #36]	; (800c654 <prvHeapInit+0xc0>)
 800c62e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c632:	601a      	str	r2, [r3, #0]
}
 800c634:	bf00      	nop
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr
 800c640:	2000101c 	.word	0x2000101c
 800c644:	2000d36c 	.word	0x2000d36c
 800c648:	2000d374 	.word	0x2000d374
 800c64c:	2000d37c 	.word	0x2000d37c
 800c650:	2000d378 	.word	0x2000d378
 800c654:	2000d380 	.word	0x2000d380

0800c658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c660:	4b28      	ldr	r3, [pc, #160]	; (800c704 <prvInsertBlockIntoFreeList+0xac>)
 800c662:	60fb      	str	r3, [r7, #12]
 800c664:	e002      	b.n	800c66c <prvInsertBlockIntoFreeList+0x14>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	429a      	cmp	r2, r3
 800c674:	d8f7      	bhi.n	800c666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	4413      	add	r3, r2
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	429a      	cmp	r2, r3
 800c686:	d108      	bne.n	800c69a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	441a      	add	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	68ba      	ldr	r2, [r7, #8]
 800c6a4:	441a      	add	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d118      	bne.n	800c6e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	4b15      	ldr	r3, [pc, #84]	; (800c708 <prvInsertBlockIntoFreeList+0xb0>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d00d      	beq.n	800c6d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	441a      	add	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	e008      	b.n	800c6e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <prvInsertBlockIntoFreeList+0xb0>)
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	e003      	b.n	800c6e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d002      	beq.n	800c6f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6f6:	bf00      	nop
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	2000d36c 	.word	0x2000d36c
 800c708:	2000d374 	.word	0x2000d374

0800c70c <__errno>:
 800c70c:	4b01      	ldr	r3, [pc, #4]	; (800c714 <__errno+0x8>)
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	200000cc 	.word	0x200000cc

0800c718 <__libc_init_array>:
 800c718:	b570      	push	{r4, r5, r6, lr}
 800c71a:	4e0d      	ldr	r6, [pc, #52]	; (800c750 <__libc_init_array+0x38>)
 800c71c:	4c0d      	ldr	r4, [pc, #52]	; (800c754 <__libc_init_array+0x3c>)
 800c71e:	1ba4      	subs	r4, r4, r6
 800c720:	10a4      	asrs	r4, r4, #2
 800c722:	2500      	movs	r5, #0
 800c724:	42a5      	cmp	r5, r4
 800c726:	d109      	bne.n	800c73c <__libc_init_array+0x24>
 800c728:	4e0b      	ldr	r6, [pc, #44]	; (800c758 <__libc_init_array+0x40>)
 800c72a:	4c0c      	ldr	r4, [pc, #48]	; (800c75c <__libc_init_array+0x44>)
 800c72c:	f003 fc90 	bl	8010050 <_init>
 800c730:	1ba4      	subs	r4, r4, r6
 800c732:	10a4      	asrs	r4, r4, #2
 800c734:	2500      	movs	r5, #0
 800c736:	42a5      	cmp	r5, r4
 800c738:	d105      	bne.n	800c746 <__libc_init_array+0x2e>
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c740:	4798      	blx	r3
 800c742:	3501      	adds	r5, #1
 800c744:	e7ee      	b.n	800c724 <__libc_init_array+0xc>
 800c746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c74a:	4798      	blx	r3
 800c74c:	3501      	adds	r5, #1
 800c74e:	e7f2      	b.n	800c736 <__libc_init_array+0x1e>
 800c750:	08010440 	.word	0x08010440
 800c754:	08010440 	.word	0x08010440
 800c758:	08010440 	.word	0x08010440
 800c75c:	08010444 	.word	0x08010444

0800c760 <memcpy>:
 800c760:	b510      	push	{r4, lr}
 800c762:	1e43      	subs	r3, r0, #1
 800c764:	440a      	add	r2, r1
 800c766:	4291      	cmp	r1, r2
 800c768:	d100      	bne.n	800c76c <memcpy+0xc>
 800c76a:	bd10      	pop	{r4, pc}
 800c76c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c770:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c774:	e7f7      	b.n	800c766 <memcpy+0x6>

0800c776 <memset>:
 800c776:	4402      	add	r2, r0
 800c778:	4603      	mov	r3, r0
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d100      	bne.n	800c780 <memset+0xa>
 800c77e:	4770      	bx	lr
 800c780:	f803 1b01 	strb.w	r1, [r3], #1
 800c784:	e7f9      	b.n	800c77a <memset+0x4>

0800c786 <__cvt>:
 800c786:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c788:	ed2d 8b02 	vpush	{d8}
 800c78c:	eeb0 8b40 	vmov.f64	d8, d0
 800c790:	b085      	sub	sp, #20
 800c792:	4617      	mov	r7, r2
 800c794:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c796:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c798:	ee18 2a90 	vmov	r2, s17
 800c79c:	f025 0520 	bic.w	r5, r5, #32
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	bfb6      	itet	lt
 800c7a4:	222d      	movlt	r2, #45	; 0x2d
 800c7a6:	2200      	movge	r2, #0
 800c7a8:	eeb1 8b40 	vneglt.f64	d8, d0
 800c7ac:	2d46      	cmp	r5, #70	; 0x46
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	701a      	strb	r2, [r3, #0]
 800c7b2:	d004      	beq.n	800c7be <__cvt+0x38>
 800c7b4:	2d45      	cmp	r5, #69	; 0x45
 800c7b6:	d100      	bne.n	800c7ba <__cvt+0x34>
 800c7b8:	3401      	adds	r4, #1
 800c7ba:	2102      	movs	r1, #2
 800c7bc:	e000      	b.n	800c7c0 <__cvt+0x3a>
 800c7be:	2103      	movs	r1, #3
 800c7c0:	ab03      	add	r3, sp, #12
 800c7c2:	9301      	str	r3, [sp, #4]
 800c7c4:	ab02      	add	r3, sp, #8
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	4633      	mov	r3, r6
 800c7cc:	eeb0 0b48 	vmov.f64	d0, d8
 800c7d0:	f001 fd1e 	bl	800e210 <_dtoa_r>
 800c7d4:	2d47      	cmp	r5, #71	; 0x47
 800c7d6:	d101      	bne.n	800c7dc <__cvt+0x56>
 800c7d8:	07fb      	lsls	r3, r7, #31
 800c7da:	d51e      	bpl.n	800c81a <__cvt+0x94>
 800c7dc:	2d46      	cmp	r5, #70	; 0x46
 800c7de:	eb00 0304 	add.w	r3, r0, r4
 800c7e2:	d10c      	bne.n	800c7fe <__cvt+0x78>
 800c7e4:	7802      	ldrb	r2, [r0, #0]
 800c7e6:	2a30      	cmp	r2, #48	; 0x30
 800c7e8:	d107      	bne.n	800c7fa <__cvt+0x74>
 800c7ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7f2:	bf1c      	itt	ne
 800c7f4:	f1c4 0401 	rsbne	r4, r4, #1
 800c7f8:	6034      	strne	r4, [r6, #0]
 800c7fa:	6832      	ldr	r2, [r6, #0]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c806:	d007      	beq.n	800c818 <__cvt+0x92>
 800c808:	2130      	movs	r1, #48	; 0x30
 800c80a:	9a03      	ldr	r2, [sp, #12]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d204      	bcs.n	800c81a <__cvt+0x94>
 800c810:	1c54      	adds	r4, r2, #1
 800c812:	9403      	str	r4, [sp, #12]
 800c814:	7011      	strb	r1, [r2, #0]
 800c816:	e7f8      	b.n	800c80a <__cvt+0x84>
 800c818:	9303      	str	r3, [sp, #12]
 800c81a:	9b03      	ldr	r3, [sp, #12]
 800c81c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c81e:	1a1b      	subs	r3, r3, r0
 800c820:	6013      	str	r3, [r2, #0]
 800c822:	b005      	add	sp, #20
 800c824:	ecbd 8b02 	vpop	{d8}
 800c828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c82a <__exponent>:
 800c82a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c82c:	2900      	cmp	r1, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	bfba      	itte	lt
 800c832:	4249      	neglt	r1, r1
 800c834:	232d      	movlt	r3, #45	; 0x2d
 800c836:	232b      	movge	r3, #43	; 0x2b
 800c838:	2909      	cmp	r1, #9
 800c83a:	f804 2b02 	strb.w	r2, [r4], #2
 800c83e:	7043      	strb	r3, [r0, #1]
 800c840:	dd20      	ble.n	800c884 <__exponent+0x5a>
 800c842:	f10d 0307 	add.w	r3, sp, #7
 800c846:	461f      	mov	r7, r3
 800c848:	260a      	movs	r6, #10
 800c84a:	fb91 f5f6 	sdiv	r5, r1, r6
 800c84e:	fb06 1115 	mls	r1, r6, r5, r1
 800c852:	3130      	adds	r1, #48	; 0x30
 800c854:	2d09      	cmp	r5, #9
 800c856:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c85a:	f103 32ff 	add.w	r2, r3, #4294967295
 800c85e:	4629      	mov	r1, r5
 800c860:	dc09      	bgt.n	800c876 <__exponent+0x4c>
 800c862:	3130      	adds	r1, #48	; 0x30
 800c864:	3b02      	subs	r3, #2
 800c866:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c86a:	42bb      	cmp	r3, r7
 800c86c:	4622      	mov	r2, r4
 800c86e:	d304      	bcc.n	800c87a <__exponent+0x50>
 800c870:	1a10      	subs	r0, r2, r0
 800c872:	b003      	add	sp, #12
 800c874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c876:	4613      	mov	r3, r2
 800c878:	e7e7      	b.n	800c84a <__exponent+0x20>
 800c87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c87e:	f804 2b01 	strb.w	r2, [r4], #1
 800c882:	e7f2      	b.n	800c86a <__exponent+0x40>
 800c884:	2330      	movs	r3, #48	; 0x30
 800c886:	4419      	add	r1, r3
 800c888:	7083      	strb	r3, [r0, #2]
 800c88a:	1d02      	adds	r2, r0, #4
 800c88c:	70c1      	strb	r1, [r0, #3]
 800c88e:	e7ef      	b.n	800c870 <__exponent+0x46>

0800c890 <_printf_float>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	b08d      	sub	sp, #52	; 0x34
 800c896:	460c      	mov	r4, r1
 800c898:	4616      	mov	r6, r2
 800c89a:	461f      	mov	r7, r3
 800c89c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	f002 fd2d 	bl	800f300 <_localeconv_r>
 800c8a6:	f8d0 b000 	ldr.w	fp, [r0]
 800c8aa:	4658      	mov	r0, fp
 800c8ac:	f7f3 fcc8 	bl	8000240 <strlen>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b8:	9005      	str	r0, [sp, #20]
 800c8ba:	3307      	adds	r3, #7
 800c8bc:	f023 0307 	bic.w	r3, r3, #7
 800c8c0:	f103 0108 	add.w	r1, r3, #8
 800c8c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c8c8:	6822      	ldr	r2, [r4, #0]
 800c8ca:	f8c8 1000 	str.w	r1, [r8]
 800c8ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c8d6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800cb60 <_printf_float+0x2d0>
 800c8da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c8de:	eeb0 6bc0 	vabs.f64	d6, d0
 800c8e2:	eeb4 6b47 	vcmp.f64	d6, d7
 800c8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ea:	dd24      	ble.n	800c936 <_printf_float+0xa6>
 800c8ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f4:	d502      	bpl.n	800c8fc <_printf_float+0x6c>
 800c8f6:	232d      	movs	r3, #45	; 0x2d
 800c8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8fc:	499a      	ldr	r1, [pc, #616]	; (800cb68 <_printf_float+0x2d8>)
 800c8fe:	4b9b      	ldr	r3, [pc, #620]	; (800cb6c <_printf_float+0x2dc>)
 800c900:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c904:	bf8c      	ite	hi
 800c906:	4688      	movhi	r8, r1
 800c908:	4698      	movls	r8, r3
 800c90a:	f022 0204 	bic.w	r2, r2, #4
 800c90e:	2303      	movs	r3, #3
 800c910:	6123      	str	r3, [r4, #16]
 800c912:	6022      	str	r2, [r4, #0]
 800c914:	f04f 0a00 	mov.w	sl, #0
 800c918:	9700      	str	r7, [sp, #0]
 800c91a:	4633      	mov	r3, r6
 800c91c:	aa0b      	add	r2, sp, #44	; 0x2c
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f000 f9e1 	bl	800cce8 <_printf_common>
 800c926:	3001      	adds	r0, #1
 800c928:	f040 8089 	bne.w	800ca3e <_printf_float+0x1ae>
 800c92c:	f04f 30ff 	mov.w	r0, #4294967295
 800c930:	b00d      	add	sp, #52	; 0x34
 800c932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c936:	eeb4 0b40 	vcmp.f64	d0, d0
 800c93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93e:	d702      	bvc.n	800c946 <_printf_float+0xb6>
 800c940:	498b      	ldr	r1, [pc, #556]	; (800cb70 <_printf_float+0x2e0>)
 800c942:	4b8c      	ldr	r3, [pc, #560]	; (800cb74 <_printf_float+0x2e4>)
 800c944:	e7dc      	b.n	800c900 <_printf_float+0x70>
 800c946:	6861      	ldr	r1, [r4, #4]
 800c948:	1c4b      	adds	r3, r1, #1
 800c94a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c94e:	ab0a      	add	r3, sp, #40	; 0x28
 800c950:	a809      	add	r0, sp, #36	; 0x24
 800c952:	d13b      	bne.n	800c9cc <_printf_float+0x13c>
 800c954:	2106      	movs	r1, #6
 800c956:	6061      	str	r1, [r4, #4]
 800c958:	f04f 0c00 	mov.w	ip, #0
 800c95c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c960:	e9cd 0900 	strd	r0, r9, [sp]
 800c964:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c968:	6022      	str	r2, [r4, #0]
 800c96a:	6861      	ldr	r1, [r4, #4]
 800c96c:	4628      	mov	r0, r5
 800c96e:	f7ff ff0a 	bl	800c786 <__cvt>
 800c972:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800c976:	2b47      	cmp	r3, #71	; 0x47
 800c978:	4680      	mov	r8, r0
 800c97a:	d109      	bne.n	800c990 <_printf_float+0x100>
 800c97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c97e:	1cd8      	adds	r0, r3, #3
 800c980:	db02      	blt.n	800c988 <_printf_float+0xf8>
 800c982:	6862      	ldr	r2, [r4, #4]
 800c984:	4293      	cmp	r3, r2
 800c986:	dd47      	ble.n	800ca18 <_printf_float+0x188>
 800c988:	f1a9 0902 	sub.w	r9, r9, #2
 800c98c:	fa5f f989 	uxtb.w	r9, r9
 800c990:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c994:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c996:	d824      	bhi.n	800c9e2 <_printf_float+0x152>
 800c998:	3901      	subs	r1, #1
 800c99a:	464a      	mov	r2, r9
 800c99c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9a0:	9109      	str	r1, [sp, #36]	; 0x24
 800c9a2:	f7ff ff42 	bl	800c82a <__exponent>
 800c9a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9a8:	1813      	adds	r3, r2, r0
 800c9aa:	2a01      	cmp	r2, #1
 800c9ac:	4682      	mov	sl, r0
 800c9ae:	6123      	str	r3, [r4, #16]
 800c9b0:	dc02      	bgt.n	800c9b8 <_printf_float+0x128>
 800c9b2:	6822      	ldr	r2, [r4, #0]
 800c9b4:	07d1      	lsls	r1, r2, #31
 800c9b6:	d501      	bpl.n	800c9bc <_printf_float+0x12c>
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	6123      	str	r3, [r4, #16]
 800c9bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0a9      	beq.n	800c918 <_printf_float+0x88>
 800c9c4:	232d      	movs	r3, #45	; 0x2d
 800c9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9ca:	e7a5      	b.n	800c918 <_printf_float+0x88>
 800c9cc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800c9d0:	f000 8178 	beq.w	800ccc4 <_printf_float+0x434>
 800c9d4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c9d8:	d1be      	bne.n	800c958 <_printf_float+0xc8>
 800c9da:	2900      	cmp	r1, #0
 800c9dc:	d1bc      	bne.n	800c958 <_printf_float+0xc8>
 800c9de:	2101      	movs	r1, #1
 800c9e0:	e7b9      	b.n	800c956 <_printf_float+0xc6>
 800c9e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c9e6:	d119      	bne.n	800ca1c <_printf_float+0x18c>
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	6863      	ldr	r3, [r4, #4]
 800c9ec:	dd0c      	ble.n	800ca08 <_printf_float+0x178>
 800c9ee:	6121      	str	r1, [r4, #16]
 800c9f0:	b913      	cbnz	r3, 800c9f8 <_printf_float+0x168>
 800c9f2:	6822      	ldr	r2, [r4, #0]
 800c9f4:	07d2      	lsls	r2, r2, #31
 800c9f6:	d502      	bpl.n	800c9fe <_printf_float+0x16e>
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	440b      	add	r3, r1
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca00:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca02:	f04f 0a00 	mov.w	sl, #0
 800ca06:	e7d9      	b.n	800c9bc <_printf_float+0x12c>
 800ca08:	b913      	cbnz	r3, 800ca10 <_printf_float+0x180>
 800ca0a:	6822      	ldr	r2, [r4, #0]
 800ca0c:	07d0      	lsls	r0, r2, #31
 800ca0e:	d501      	bpl.n	800ca14 <_printf_float+0x184>
 800ca10:	3302      	adds	r3, #2
 800ca12:	e7f3      	b.n	800c9fc <_printf_float+0x16c>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e7f1      	b.n	800c9fc <_printf_float+0x16c>
 800ca18:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ca1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca20:	4293      	cmp	r3, r2
 800ca22:	db05      	blt.n	800ca30 <_printf_float+0x1a0>
 800ca24:	6822      	ldr	r2, [r4, #0]
 800ca26:	6123      	str	r3, [r4, #16]
 800ca28:	07d1      	lsls	r1, r2, #31
 800ca2a:	d5e8      	bpl.n	800c9fe <_printf_float+0x16e>
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	e7e5      	b.n	800c9fc <_printf_float+0x16c>
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	bfd4      	ite	le
 800ca34:	f1c3 0302 	rsble	r3, r3, #2
 800ca38:	2301      	movgt	r3, #1
 800ca3a:	4413      	add	r3, r2
 800ca3c:	e7de      	b.n	800c9fc <_printf_float+0x16c>
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	055a      	lsls	r2, r3, #21
 800ca42:	d407      	bmi.n	800ca54 <_printf_float+0x1c4>
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	4642      	mov	r2, r8
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	47b8      	blx	r7
 800ca4e:	3001      	adds	r0, #1
 800ca50:	d12a      	bne.n	800caa8 <_printf_float+0x218>
 800ca52:	e76b      	b.n	800c92c <_printf_float+0x9c>
 800ca54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ca58:	f240 80de 	bls.w	800cc18 <_printf_float+0x388>
 800ca5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ca60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca68:	d133      	bne.n	800cad2 <_printf_float+0x242>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	4a42      	ldr	r2, [pc, #264]	; (800cb78 <_printf_float+0x2e8>)
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4628      	mov	r0, r5
 800ca72:	47b8      	blx	r7
 800ca74:	3001      	adds	r0, #1
 800ca76:	f43f af59 	beq.w	800c92c <_printf_float+0x9c>
 800ca7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	db02      	blt.n	800ca88 <_printf_float+0x1f8>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	07d8      	lsls	r0, r3, #31
 800ca86:	d50f      	bpl.n	800caa8 <_printf_float+0x218>
 800ca88:	9b05      	ldr	r3, [sp, #20]
 800ca8a:	465a      	mov	r2, fp
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	f43f af4a 	beq.w	800c92c <_printf_float+0x9c>
 800ca98:	f04f 0800 	mov.w	r8, #0
 800ca9c:	f104 091a 	add.w	r9, r4, #26
 800caa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa2:	3b01      	subs	r3, #1
 800caa4:	4543      	cmp	r3, r8
 800caa6:	dc09      	bgt.n	800cabc <_printf_float+0x22c>
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	079b      	lsls	r3, r3, #30
 800caac:	f100 8105 	bmi.w	800ccba <_printf_float+0x42a>
 800cab0:	68e0      	ldr	r0, [r4, #12]
 800cab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cab4:	4298      	cmp	r0, r3
 800cab6:	bfb8      	it	lt
 800cab8:	4618      	movlt	r0, r3
 800caba:	e739      	b.n	800c930 <_printf_float+0xa0>
 800cabc:	2301      	movs	r3, #1
 800cabe:	464a      	mov	r2, r9
 800cac0:	4631      	mov	r1, r6
 800cac2:	4628      	mov	r0, r5
 800cac4:	47b8      	blx	r7
 800cac6:	3001      	adds	r0, #1
 800cac8:	f43f af30 	beq.w	800c92c <_printf_float+0x9c>
 800cacc:	f108 0801 	add.w	r8, r8, #1
 800cad0:	e7e6      	b.n	800caa0 <_printf_float+0x210>
 800cad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dc2b      	bgt.n	800cb30 <_printf_float+0x2a0>
 800cad8:	2301      	movs	r3, #1
 800cada:	4a27      	ldr	r2, [pc, #156]	; (800cb78 <_printf_float+0x2e8>)
 800cadc:	4631      	mov	r1, r6
 800cade:	4628      	mov	r0, r5
 800cae0:	47b8      	blx	r7
 800cae2:	3001      	adds	r0, #1
 800cae4:	f43f af22 	beq.w	800c92c <_printf_float+0x9c>
 800cae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caea:	b923      	cbnz	r3, 800caf6 <_printf_float+0x266>
 800caec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caee:	b913      	cbnz	r3, 800caf6 <_printf_float+0x266>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	07d9      	lsls	r1, r3, #31
 800caf4:	d5d8      	bpl.n	800caa8 <_printf_float+0x218>
 800caf6:	9b05      	ldr	r3, [sp, #20]
 800caf8:	465a      	mov	r2, fp
 800cafa:	4631      	mov	r1, r6
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b8      	blx	r7
 800cb00:	3001      	adds	r0, #1
 800cb02:	f43f af13 	beq.w	800c92c <_printf_float+0x9c>
 800cb06:	f04f 0900 	mov.w	r9, #0
 800cb0a:	f104 0a1a 	add.w	sl, r4, #26
 800cb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb10:	425b      	negs	r3, r3
 800cb12:	454b      	cmp	r3, r9
 800cb14:	dc01      	bgt.n	800cb1a <_printf_float+0x28a>
 800cb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb18:	e795      	b.n	800ca46 <_printf_float+0x1b6>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	4652      	mov	r2, sl
 800cb1e:	4631      	mov	r1, r6
 800cb20:	4628      	mov	r0, r5
 800cb22:	47b8      	blx	r7
 800cb24:	3001      	adds	r0, #1
 800cb26:	f43f af01 	beq.w	800c92c <_printf_float+0x9c>
 800cb2a:	f109 0901 	add.w	r9, r9, #1
 800cb2e:	e7ee      	b.n	800cb0e <_printf_float+0x27e>
 800cb30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb34:	429a      	cmp	r2, r3
 800cb36:	bfa8      	it	ge
 800cb38:	461a      	movge	r2, r3
 800cb3a:	2a00      	cmp	r2, #0
 800cb3c:	4691      	mov	r9, r2
 800cb3e:	dd07      	ble.n	800cb50 <_printf_float+0x2c0>
 800cb40:	4613      	mov	r3, r2
 800cb42:	4631      	mov	r1, r6
 800cb44:	4642      	mov	r2, r8
 800cb46:	4628      	mov	r0, r5
 800cb48:	47b8      	blx	r7
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	f43f aeee 	beq.w	800c92c <_printf_float+0x9c>
 800cb50:	f104 031a 	add.w	r3, r4, #26
 800cb54:	f04f 0a00 	mov.w	sl, #0
 800cb58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb5c:	9307      	str	r3, [sp, #28]
 800cb5e:	e017      	b.n	800cb90 <_printf_float+0x300>
 800cb60:	ffffffff 	.word	0xffffffff
 800cb64:	7fefffff 	.word	0x7fefffff
 800cb68:	08010188 	.word	0x08010188
 800cb6c:	08010184 	.word	0x08010184
 800cb70:	08010190 	.word	0x08010190
 800cb74:	0801018c 	.word	0x0801018c
 800cb78:	08010194 	.word	0x08010194
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	9a07      	ldr	r2, [sp, #28]
 800cb80:	4631      	mov	r1, r6
 800cb82:	4628      	mov	r0, r5
 800cb84:	47b8      	blx	r7
 800cb86:	3001      	adds	r0, #1
 800cb88:	f43f aed0 	beq.w	800c92c <_printf_float+0x9c>
 800cb8c:	f10a 0a01 	add.w	sl, sl, #1
 800cb90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb92:	9306      	str	r3, [sp, #24]
 800cb94:	eba3 0309 	sub.w	r3, r3, r9
 800cb98:	4553      	cmp	r3, sl
 800cb9a:	dcef      	bgt.n	800cb7c <_printf_float+0x2ec>
 800cb9c:	9b06      	ldr	r3, [sp, #24]
 800cb9e:	4498      	add	r8, r3
 800cba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cba4:	429a      	cmp	r2, r3
 800cba6:	db15      	blt.n	800cbd4 <_printf_float+0x344>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	07da      	lsls	r2, r3, #31
 800cbac:	d412      	bmi.n	800cbd4 <_printf_float+0x344>
 800cbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb0:	9a06      	ldr	r2, [sp, #24]
 800cbb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbb4:	1a9a      	subs	r2, r3, r2
 800cbb6:	eba3 0a01 	sub.w	sl, r3, r1
 800cbba:	4592      	cmp	sl, r2
 800cbbc:	bfa8      	it	ge
 800cbbe:	4692      	movge	sl, r2
 800cbc0:	f1ba 0f00 	cmp.w	sl, #0
 800cbc4:	dc0e      	bgt.n	800cbe4 <_printf_float+0x354>
 800cbc6:	f04f 0800 	mov.w	r8, #0
 800cbca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbce:	f104 091a 	add.w	r9, r4, #26
 800cbd2:	e019      	b.n	800cc08 <_printf_float+0x378>
 800cbd4:	9b05      	ldr	r3, [sp, #20]
 800cbd6:	465a      	mov	r2, fp
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4628      	mov	r0, r5
 800cbdc:	47b8      	blx	r7
 800cbde:	3001      	adds	r0, #1
 800cbe0:	d1e5      	bne.n	800cbae <_printf_float+0x31e>
 800cbe2:	e6a3      	b.n	800c92c <_printf_float+0x9c>
 800cbe4:	4653      	mov	r3, sl
 800cbe6:	4642      	mov	r2, r8
 800cbe8:	4631      	mov	r1, r6
 800cbea:	4628      	mov	r0, r5
 800cbec:	47b8      	blx	r7
 800cbee:	3001      	adds	r0, #1
 800cbf0:	d1e9      	bne.n	800cbc6 <_printf_float+0x336>
 800cbf2:	e69b      	b.n	800c92c <_printf_float+0x9c>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	464a      	mov	r2, r9
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	47b8      	blx	r7
 800cbfe:	3001      	adds	r0, #1
 800cc00:	f43f ae94 	beq.w	800c92c <_printf_float+0x9c>
 800cc04:	f108 0801 	add.w	r8, r8, #1
 800cc08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc0c:	1a9b      	subs	r3, r3, r2
 800cc0e:	eba3 030a 	sub.w	r3, r3, sl
 800cc12:	4543      	cmp	r3, r8
 800cc14:	dcee      	bgt.n	800cbf4 <_printf_float+0x364>
 800cc16:	e747      	b.n	800caa8 <_printf_float+0x218>
 800cc18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc1a:	2a01      	cmp	r2, #1
 800cc1c:	dc01      	bgt.n	800cc22 <_printf_float+0x392>
 800cc1e:	07db      	lsls	r3, r3, #31
 800cc20:	d539      	bpl.n	800cc96 <_printf_float+0x406>
 800cc22:	2301      	movs	r3, #1
 800cc24:	4642      	mov	r2, r8
 800cc26:	4631      	mov	r1, r6
 800cc28:	4628      	mov	r0, r5
 800cc2a:	47b8      	blx	r7
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	f43f ae7d 	beq.w	800c92c <_printf_float+0x9c>
 800cc32:	9b05      	ldr	r3, [sp, #20]
 800cc34:	465a      	mov	r2, fp
 800cc36:	4631      	mov	r1, r6
 800cc38:	4628      	mov	r0, r5
 800cc3a:	47b8      	blx	r7
 800cc3c:	3001      	adds	r0, #1
 800cc3e:	f108 0801 	add.w	r8, r8, #1
 800cc42:	f43f ae73 	beq.w	800c92c <_printf_float+0x9c>
 800cc46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc54:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc58:	d018      	beq.n	800cc8c <_printf_float+0x3fc>
 800cc5a:	4642      	mov	r2, r8
 800cc5c:	4631      	mov	r1, r6
 800cc5e:	4628      	mov	r0, r5
 800cc60:	47b8      	blx	r7
 800cc62:	3001      	adds	r0, #1
 800cc64:	d10e      	bne.n	800cc84 <_printf_float+0x3f4>
 800cc66:	e661      	b.n	800c92c <_printf_float+0x9c>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	464a      	mov	r2, r9
 800cc6c:	4631      	mov	r1, r6
 800cc6e:	4628      	mov	r0, r5
 800cc70:	47b8      	blx	r7
 800cc72:	3001      	adds	r0, #1
 800cc74:	f43f ae5a 	beq.w	800c92c <_printf_float+0x9c>
 800cc78:	f108 0801 	add.w	r8, r8, #1
 800cc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	4543      	cmp	r3, r8
 800cc82:	dcf1      	bgt.n	800cc68 <_printf_float+0x3d8>
 800cc84:	4653      	mov	r3, sl
 800cc86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc8a:	e6dd      	b.n	800ca48 <_printf_float+0x1b8>
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	f104 091a 	add.w	r9, r4, #26
 800cc94:	e7f2      	b.n	800cc7c <_printf_float+0x3ec>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e7df      	b.n	800cc5a <_printf_float+0x3ca>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	464a      	mov	r2, r9
 800cc9e:	4631      	mov	r1, r6
 800cca0:	4628      	mov	r0, r5
 800cca2:	47b8      	blx	r7
 800cca4:	3001      	adds	r0, #1
 800cca6:	f43f ae41 	beq.w	800c92c <_printf_float+0x9c>
 800ccaa:	f108 0801 	add.w	r8, r8, #1
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccb2:	1a9b      	subs	r3, r3, r2
 800ccb4:	4543      	cmp	r3, r8
 800ccb6:	dcf0      	bgt.n	800cc9a <_printf_float+0x40a>
 800ccb8:	e6fa      	b.n	800cab0 <_printf_float+0x220>
 800ccba:	f04f 0800 	mov.w	r8, #0
 800ccbe:	f104 0919 	add.w	r9, r4, #25
 800ccc2:	e7f4      	b.n	800ccae <_printf_float+0x41e>
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	f43f ae8a 	beq.w	800c9de <_printf_float+0x14e>
 800ccca:	f04f 0c00 	mov.w	ip, #0
 800ccce:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ccd2:	e9cd 0900 	strd	r0, r9, [sp]
 800ccd6:	6022      	str	r2, [r4, #0]
 800ccd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7ff fd52 	bl	800c786 <__cvt>
 800cce2:	4680      	mov	r8, r0
 800cce4:	e64a      	b.n	800c97c <_printf_float+0xec>
 800cce6:	bf00      	nop

0800cce8 <_printf_common>:
 800cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccec:	4691      	mov	r9, r2
 800ccee:	461f      	mov	r7, r3
 800ccf0:	688a      	ldr	r2, [r1, #8]
 800ccf2:	690b      	ldr	r3, [r1, #16]
 800ccf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	bfb8      	it	lt
 800ccfc:	4613      	movlt	r3, r2
 800ccfe:	f8c9 3000 	str.w	r3, [r9]
 800cd02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd06:	4606      	mov	r6, r0
 800cd08:	460c      	mov	r4, r1
 800cd0a:	b112      	cbz	r2, 800cd12 <_printf_common+0x2a>
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	f8c9 3000 	str.w	r3, [r9]
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	0699      	lsls	r1, r3, #26
 800cd16:	bf42      	ittt	mi
 800cd18:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cd1c:	3302      	addmi	r3, #2
 800cd1e:	f8c9 3000 	strmi.w	r3, [r9]
 800cd22:	6825      	ldr	r5, [r4, #0]
 800cd24:	f015 0506 	ands.w	r5, r5, #6
 800cd28:	d107      	bne.n	800cd3a <_printf_common+0x52>
 800cd2a:	f104 0a19 	add.w	sl, r4, #25
 800cd2e:	68e3      	ldr	r3, [r4, #12]
 800cd30:	f8d9 2000 	ldr.w	r2, [r9]
 800cd34:	1a9b      	subs	r3, r3, r2
 800cd36:	42ab      	cmp	r3, r5
 800cd38:	dc28      	bgt.n	800cd8c <_printf_common+0xa4>
 800cd3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cd3e:	6822      	ldr	r2, [r4, #0]
 800cd40:	3300      	adds	r3, #0
 800cd42:	bf18      	it	ne
 800cd44:	2301      	movne	r3, #1
 800cd46:	0692      	lsls	r2, r2, #26
 800cd48:	d42d      	bmi.n	800cda6 <_printf_common+0xbe>
 800cd4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd4e:	4639      	mov	r1, r7
 800cd50:	4630      	mov	r0, r6
 800cd52:	47c0      	blx	r8
 800cd54:	3001      	adds	r0, #1
 800cd56:	d020      	beq.n	800cd9a <_printf_common+0xb2>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	68e5      	ldr	r5, [r4, #12]
 800cd5c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd60:	f003 0306 	and.w	r3, r3, #6
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	bf08      	it	eq
 800cd68:	1aad      	subeq	r5, r5, r2
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	6922      	ldr	r2, [r4, #16]
 800cd6e:	bf0c      	ite	eq
 800cd70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd74:	2500      	movne	r5, #0
 800cd76:	4293      	cmp	r3, r2
 800cd78:	bfc4      	itt	gt
 800cd7a:	1a9b      	subgt	r3, r3, r2
 800cd7c:	18ed      	addgt	r5, r5, r3
 800cd7e:	f04f 0900 	mov.w	r9, #0
 800cd82:	341a      	adds	r4, #26
 800cd84:	454d      	cmp	r5, r9
 800cd86:	d11a      	bne.n	800cdbe <_printf_common+0xd6>
 800cd88:	2000      	movs	r0, #0
 800cd8a:	e008      	b.n	800cd9e <_printf_common+0xb6>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	4652      	mov	r2, sl
 800cd90:	4639      	mov	r1, r7
 800cd92:	4630      	mov	r0, r6
 800cd94:	47c0      	blx	r8
 800cd96:	3001      	adds	r0, #1
 800cd98:	d103      	bne.n	800cda2 <_printf_common+0xba>
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda2:	3501      	adds	r5, #1
 800cda4:	e7c3      	b.n	800cd2e <_printf_common+0x46>
 800cda6:	18e1      	adds	r1, r4, r3
 800cda8:	1c5a      	adds	r2, r3, #1
 800cdaa:	2030      	movs	r0, #48	; 0x30
 800cdac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdb0:	4422      	add	r2, r4
 800cdb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdba:	3302      	adds	r3, #2
 800cdbc:	e7c5      	b.n	800cd4a <_printf_common+0x62>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	47c0      	blx	r8
 800cdc8:	3001      	adds	r0, #1
 800cdca:	d0e6      	beq.n	800cd9a <_printf_common+0xb2>
 800cdcc:	f109 0901 	add.w	r9, r9, #1
 800cdd0:	e7d8      	b.n	800cd84 <_printf_common+0x9c>
	...

0800cdd4 <_printf_i>:
 800cdd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cddc:	460c      	mov	r4, r1
 800cdde:	7e09      	ldrb	r1, [r1, #24]
 800cde0:	b085      	sub	sp, #20
 800cde2:	296e      	cmp	r1, #110	; 0x6e
 800cde4:	4617      	mov	r7, r2
 800cde6:	4606      	mov	r6, r0
 800cde8:	4698      	mov	r8, r3
 800cdea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdec:	f000 80b3 	beq.w	800cf56 <_printf_i+0x182>
 800cdf0:	d822      	bhi.n	800ce38 <_printf_i+0x64>
 800cdf2:	2963      	cmp	r1, #99	; 0x63
 800cdf4:	d036      	beq.n	800ce64 <_printf_i+0x90>
 800cdf6:	d80a      	bhi.n	800ce0e <_printf_i+0x3a>
 800cdf8:	2900      	cmp	r1, #0
 800cdfa:	f000 80b9 	beq.w	800cf70 <_printf_i+0x19c>
 800cdfe:	2958      	cmp	r1, #88	; 0x58
 800ce00:	f000 8083 	beq.w	800cf0a <_printf_i+0x136>
 800ce04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ce0c:	e032      	b.n	800ce74 <_printf_i+0xa0>
 800ce0e:	2964      	cmp	r1, #100	; 0x64
 800ce10:	d001      	beq.n	800ce16 <_printf_i+0x42>
 800ce12:	2969      	cmp	r1, #105	; 0x69
 800ce14:	d1f6      	bne.n	800ce04 <_printf_i+0x30>
 800ce16:	6820      	ldr	r0, [r4, #0]
 800ce18:	6813      	ldr	r3, [r2, #0]
 800ce1a:	0605      	lsls	r5, r0, #24
 800ce1c:	f103 0104 	add.w	r1, r3, #4
 800ce20:	d52a      	bpl.n	800ce78 <_printf_i+0xa4>
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6011      	str	r1, [r2, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	da03      	bge.n	800ce32 <_printf_i+0x5e>
 800ce2a:	222d      	movs	r2, #45	; 0x2d
 800ce2c:	425b      	negs	r3, r3
 800ce2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ce32:	486f      	ldr	r0, [pc, #444]	; (800cff0 <_printf_i+0x21c>)
 800ce34:	220a      	movs	r2, #10
 800ce36:	e039      	b.n	800ceac <_printf_i+0xd8>
 800ce38:	2973      	cmp	r1, #115	; 0x73
 800ce3a:	f000 809d 	beq.w	800cf78 <_printf_i+0x1a4>
 800ce3e:	d808      	bhi.n	800ce52 <_printf_i+0x7e>
 800ce40:	296f      	cmp	r1, #111	; 0x6f
 800ce42:	d020      	beq.n	800ce86 <_printf_i+0xb2>
 800ce44:	2970      	cmp	r1, #112	; 0x70
 800ce46:	d1dd      	bne.n	800ce04 <_printf_i+0x30>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	f043 0320 	orr.w	r3, r3, #32
 800ce4e:	6023      	str	r3, [r4, #0]
 800ce50:	e003      	b.n	800ce5a <_printf_i+0x86>
 800ce52:	2975      	cmp	r1, #117	; 0x75
 800ce54:	d017      	beq.n	800ce86 <_printf_i+0xb2>
 800ce56:	2978      	cmp	r1, #120	; 0x78
 800ce58:	d1d4      	bne.n	800ce04 <_printf_i+0x30>
 800ce5a:	2378      	movs	r3, #120	; 0x78
 800ce5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce60:	4864      	ldr	r0, [pc, #400]	; (800cff4 <_printf_i+0x220>)
 800ce62:	e055      	b.n	800cf10 <_printf_i+0x13c>
 800ce64:	6813      	ldr	r3, [r2, #0]
 800ce66:	1d19      	adds	r1, r3, #4
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	6011      	str	r1, [r2, #0]
 800ce6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce74:	2301      	movs	r3, #1
 800ce76:	e08c      	b.n	800cf92 <_printf_i+0x1be>
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6011      	str	r1, [r2, #0]
 800ce7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce80:	bf18      	it	ne
 800ce82:	b21b      	sxthne	r3, r3
 800ce84:	e7cf      	b.n	800ce26 <_printf_i+0x52>
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	6825      	ldr	r5, [r4, #0]
 800ce8a:	1d18      	adds	r0, r3, #4
 800ce8c:	6010      	str	r0, [r2, #0]
 800ce8e:	0628      	lsls	r0, r5, #24
 800ce90:	d501      	bpl.n	800ce96 <_printf_i+0xc2>
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	e002      	b.n	800ce9c <_printf_i+0xc8>
 800ce96:	0668      	lsls	r0, r5, #25
 800ce98:	d5fb      	bpl.n	800ce92 <_printf_i+0xbe>
 800ce9a:	881b      	ldrh	r3, [r3, #0]
 800ce9c:	4854      	ldr	r0, [pc, #336]	; (800cff0 <_printf_i+0x21c>)
 800ce9e:	296f      	cmp	r1, #111	; 0x6f
 800cea0:	bf14      	ite	ne
 800cea2:	220a      	movne	r2, #10
 800cea4:	2208      	moveq	r2, #8
 800cea6:	2100      	movs	r1, #0
 800cea8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceac:	6865      	ldr	r5, [r4, #4]
 800ceae:	60a5      	str	r5, [r4, #8]
 800ceb0:	2d00      	cmp	r5, #0
 800ceb2:	f2c0 8095 	blt.w	800cfe0 <_printf_i+0x20c>
 800ceb6:	6821      	ldr	r1, [r4, #0]
 800ceb8:	f021 0104 	bic.w	r1, r1, #4
 800cebc:	6021      	str	r1, [r4, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d13d      	bne.n	800cf3e <_printf_i+0x16a>
 800cec2:	2d00      	cmp	r5, #0
 800cec4:	f040 808e 	bne.w	800cfe4 <_printf_i+0x210>
 800cec8:	4665      	mov	r5, ip
 800ceca:	2a08      	cmp	r2, #8
 800cecc:	d10b      	bne.n	800cee6 <_printf_i+0x112>
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	07db      	lsls	r3, r3, #31
 800ced2:	d508      	bpl.n	800cee6 <_printf_i+0x112>
 800ced4:	6923      	ldr	r3, [r4, #16]
 800ced6:	6862      	ldr	r2, [r4, #4]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	bfde      	ittt	le
 800cedc:	2330      	movle	r3, #48	; 0x30
 800cede:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cee6:	ebac 0305 	sub.w	r3, ip, r5
 800ceea:	6123      	str	r3, [r4, #16]
 800ceec:	f8cd 8000 	str.w	r8, [sp]
 800cef0:	463b      	mov	r3, r7
 800cef2:	aa03      	add	r2, sp, #12
 800cef4:	4621      	mov	r1, r4
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7ff fef6 	bl	800cce8 <_printf_common>
 800cefc:	3001      	adds	r0, #1
 800cefe:	d14d      	bne.n	800cf9c <_printf_i+0x1c8>
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295
 800cf04:	b005      	add	sp, #20
 800cf06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf0a:	4839      	ldr	r0, [pc, #228]	; (800cff0 <_printf_i+0x21c>)
 800cf0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cf10:	6813      	ldr	r3, [r2, #0]
 800cf12:	6821      	ldr	r1, [r4, #0]
 800cf14:	1d1d      	adds	r5, r3, #4
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6015      	str	r5, [r2, #0]
 800cf1a:	060a      	lsls	r2, r1, #24
 800cf1c:	d50b      	bpl.n	800cf36 <_printf_i+0x162>
 800cf1e:	07ca      	lsls	r2, r1, #31
 800cf20:	bf44      	itt	mi
 800cf22:	f041 0120 	orrmi.w	r1, r1, #32
 800cf26:	6021      	strmi	r1, [r4, #0]
 800cf28:	b91b      	cbnz	r3, 800cf32 <_printf_i+0x15e>
 800cf2a:	6822      	ldr	r2, [r4, #0]
 800cf2c:	f022 0220 	bic.w	r2, r2, #32
 800cf30:	6022      	str	r2, [r4, #0]
 800cf32:	2210      	movs	r2, #16
 800cf34:	e7b7      	b.n	800cea6 <_printf_i+0xd2>
 800cf36:	064d      	lsls	r5, r1, #25
 800cf38:	bf48      	it	mi
 800cf3a:	b29b      	uxthmi	r3, r3
 800cf3c:	e7ef      	b.n	800cf1e <_printf_i+0x14a>
 800cf3e:	4665      	mov	r5, ip
 800cf40:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf44:	fb02 3311 	mls	r3, r2, r1, r3
 800cf48:	5cc3      	ldrb	r3, [r0, r3]
 800cf4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cf4e:	460b      	mov	r3, r1
 800cf50:	2900      	cmp	r1, #0
 800cf52:	d1f5      	bne.n	800cf40 <_printf_i+0x16c>
 800cf54:	e7b9      	b.n	800ceca <_printf_i+0xf6>
 800cf56:	6813      	ldr	r3, [r2, #0]
 800cf58:	6825      	ldr	r5, [r4, #0]
 800cf5a:	6961      	ldr	r1, [r4, #20]
 800cf5c:	1d18      	adds	r0, r3, #4
 800cf5e:	6010      	str	r0, [r2, #0]
 800cf60:	0628      	lsls	r0, r5, #24
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	d501      	bpl.n	800cf6a <_printf_i+0x196>
 800cf66:	6019      	str	r1, [r3, #0]
 800cf68:	e002      	b.n	800cf70 <_printf_i+0x19c>
 800cf6a:	066a      	lsls	r2, r5, #25
 800cf6c:	d5fb      	bpl.n	800cf66 <_printf_i+0x192>
 800cf6e:	8019      	strh	r1, [r3, #0]
 800cf70:	2300      	movs	r3, #0
 800cf72:	6123      	str	r3, [r4, #16]
 800cf74:	4665      	mov	r5, ip
 800cf76:	e7b9      	b.n	800ceec <_printf_i+0x118>
 800cf78:	6813      	ldr	r3, [r2, #0]
 800cf7a:	1d19      	adds	r1, r3, #4
 800cf7c:	6011      	str	r1, [r2, #0]
 800cf7e:	681d      	ldr	r5, [r3, #0]
 800cf80:	6862      	ldr	r2, [r4, #4]
 800cf82:	2100      	movs	r1, #0
 800cf84:	4628      	mov	r0, r5
 800cf86:	f7f3 f963 	bl	8000250 <memchr>
 800cf8a:	b108      	cbz	r0, 800cf90 <_printf_i+0x1bc>
 800cf8c:	1b40      	subs	r0, r0, r5
 800cf8e:	6060      	str	r0, [r4, #4]
 800cf90:	6863      	ldr	r3, [r4, #4]
 800cf92:	6123      	str	r3, [r4, #16]
 800cf94:	2300      	movs	r3, #0
 800cf96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf9a:	e7a7      	b.n	800ceec <_printf_i+0x118>
 800cf9c:	6923      	ldr	r3, [r4, #16]
 800cf9e:	462a      	mov	r2, r5
 800cfa0:	4639      	mov	r1, r7
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	47c0      	blx	r8
 800cfa6:	3001      	adds	r0, #1
 800cfa8:	d0aa      	beq.n	800cf00 <_printf_i+0x12c>
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	079b      	lsls	r3, r3, #30
 800cfae:	d413      	bmi.n	800cfd8 <_printf_i+0x204>
 800cfb0:	68e0      	ldr	r0, [r4, #12]
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	4298      	cmp	r0, r3
 800cfb6:	bfb8      	it	lt
 800cfb8:	4618      	movlt	r0, r3
 800cfba:	e7a3      	b.n	800cf04 <_printf_i+0x130>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	464a      	mov	r2, r9
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d09a      	beq.n	800cf00 <_printf_i+0x12c>
 800cfca:	3501      	adds	r5, #1
 800cfcc:	68e3      	ldr	r3, [r4, #12]
 800cfce:	9a03      	ldr	r2, [sp, #12]
 800cfd0:	1a9b      	subs	r3, r3, r2
 800cfd2:	42ab      	cmp	r3, r5
 800cfd4:	dcf2      	bgt.n	800cfbc <_printf_i+0x1e8>
 800cfd6:	e7eb      	b.n	800cfb0 <_printf_i+0x1dc>
 800cfd8:	2500      	movs	r5, #0
 800cfda:	f104 0919 	add.w	r9, r4, #25
 800cfde:	e7f5      	b.n	800cfcc <_printf_i+0x1f8>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1ac      	bne.n	800cf3e <_printf_i+0x16a>
 800cfe4:	7803      	ldrb	r3, [r0, #0]
 800cfe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfee:	e76c      	b.n	800ceca <_printf_i+0xf6>
 800cff0:	08010196 	.word	0x08010196
 800cff4:	080101a7 	.word	0x080101a7

0800cff8 <_scanf_float>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	469a      	mov	sl, r3
 800cffe:	688b      	ldr	r3, [r1, #8]
 800d000:	4616      	mov	r6, r2
 800d002:	1e5a      	subs	r2, r3, #1
 800d004:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d008:	b087      	sub	sp, #28
 800d00a:	bf83      	ittte	hi
 800d00c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d010:	189b      	addhi	r3, r3, r2
 800d012:	9301      	strhi	r3, [sp, #4]
 800d014:	2300      	movls	r3, #0
 800d016:	bf86      	itte	hi
 800d018:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d01c:	608b      	strhi	r3, [r1, #8]
 800d01e:	9301      	strls	r3, [sp, #4]
 800d020:	680b      	ldr	r3, [r1, #0]
 800d022:	4688      	mov	r8, r1
 800d024:	f04f 0b00 	mov.w	fp, #0
 800d028:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d02c:	f848 3b1c 	str.w	r3, [r8], #28
 800d030:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d034:	4607      	mov	r7, r0
 800d036:	460c      	mov	r4, r1
 800d038:	4645      	mov	r5, r8
 800d03a:	465a      	mov	r2, fp
 800d03c:	46d9      	mov	r9, fp
 800d03e:	f8cd b008 	str.w	fp, [sp, #8]
 800d042:	68a1      	ldr	r1, [r4, #8]
 800d044:	b181      	cbz	r1, 800d068 <_scanf_float+0x70>
 800d046:	6833      	ldr	r3, [r6, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b49      	cmp	r3, #73	; 0x49
 800d04c:	d071      	beq.n	800d132 <_scanf_float+0x13a>
 800d04e:	d84d      	bhi.n	800d0ec <_scanf_float+0xf4>
 800d050:	2b39      	cmp	r3, #57	; 0x39
 800d052:	d840      	bhi.n	800d0d6 <_scanf_float+0xde>
 800d054:	2b31      	cmp	r3, #49	; 0x31
 800d056:	f080 8088 	bcs.w	800d16a <_scanf_float+0x172>
 800d05a:	2b2d      	cmp	r3, #45	; 0x2d
 800d05c:	f000 8090 	beq.w	800d180 <_scanf_float+0x188>
 800d060:	d815      	bhi.n	800d08e <_scanf_float+0x96>
 800d062:	2b2b      	cmp	r3, #43	; 0x2b
 800d064:	f000 808c 	beq.w	800d180 <_scanf_float+0x188>
 800d068:	f1b9 0f00 	cmp.w	r9, #0
 800d06c:	d003      	beq.n	800d076 <_scanf_float+0x7e>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	3a01      	subs	r2, #1
 800d078:	2a01      	cmp	r2, #1
 800d07a:	f200 80ea 	bhi.w	800d252 <_scanf_float+0x25a>
 800d07e:	4545      	cmp	r5, r8
 800d080:	f200 80dc 	bhi.w	800d23c <_scanf_float+0x244>
 800d084:	2601      	movs	r6, #1
 800d086:	4630      	mov	r0, r6
 800d088:	b007      	add	sp, #28
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08e:	2b2e      	cmp	r3, #46	; 0x2e
 800d090:	f000 809f 	beq.w	800d1d2 <_scanf_float+0x1da>
 800d094:	2b30      	cmp	r3, #48	; 0x30
 800d096:	d1e7      	bne.n	800d068 <_scanf_float+0x70>
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d09e:	d064      	beq.n	800d16a <_scanf_float+0x172>
 800d0a0:	9b01      	ldr	r3, [sp, #4]
 800d0a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d0a6:	6020      	str	r0, [r4, #0]
 800d0a8:	f109 0901 	add.w	r9, r9, #1
 800d0ac:	b11b      	cbz	r3, 800d0b6 <_scanf_float+0xbe>
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	3101      	adds	r1, #1
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	60a1      	str	r1, [r4, #8]
 800d0b6:	68a3      	ldr	r3, [r4, #8]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	60a3      	str	r3, [r4, #8]
 800d0bc:	6923      	ldr	r3, [r4, #16]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	6123      	str	r3, [r4, #16]
 800d0c2:	6873      	ldr	r3, [r6, #4]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	6073      	str	r3, [r6, #4]
 800d0ca:	f340 80ac 	ble.w	800d226 <_scanf_float+0x22e>
 800d0ce:	6833      	ldr	r3, [r6, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	6033      	str	r3, [r6, #0]
 800d0d4:	e7b5      	b.n	800d042 <_scanf_float+0x4a>
 800d0d6:	2b45      	cmp	r3, #69	; 0x45
 800d0d8:	f000 8085 	beq.w	800d1e6 <_scanf_float+0x1ee>
 800d0dc:	2b46      	cmp	r3, #70	; 0x46
 800d0de:	d06a      	beq.n	800d1b6 <_scanf_float+0x1be>
 800d0e0:	2b41      	cmp	r3, #65	; 0x41
 800d0e2:	d1c1      	bne.n	800d068 <_scanf_float+0x70>
 800d0e4:	2a01      	cmp	r2, #1
 800d0e6:	d1bf      	bne.n	800d068 <_scanf_float+0x70>
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	e046      	b.n	800d17a <_scanf_float+0x182>
 800d0ec:	2b65      	cmp	r3, #101	; 0x65
 800d0ee:	d07a      	beq.n	800d1e6 <_scanf_float+0x1ee>
 800d0f0:	d818      	bhi.n	800d124 <_scanf_float+0x12c>
 800d0f2:	2b54      	cmp	r3, #84	; 0x54
 800d0f4:	d066      	beq.n	800d1c4 <_scanf_float+0x1cc>
 800d0f6:	d811      	bhi.n	800d11c <_scanf_float+0x124>
 800d0f8:	2b4e      	cmp	r3, #78	; 0x4e
 800d0fa:	d1b5      	bne.n	800d068 <_scanf_float+0x70>
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	d146      	bne.n	800d18e <_scanf_float+0x196>
 800d100:	f1b9 0f00 	cmp.w	r9, #0
 800d104:	d145      	bne.n	800d192 <_scanf_float+0x19a>
 800d106:	6821      	ldr	r1, [r4, #0]
 800d108:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d10c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d110:	d13f      	bne.n	800d192 <_scanf_float+0x19a>
 800d112:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d116:	6021      	str	r1, [r4, #0]
 800d118:	2201      	movs	r2, #1
 800d11a:	e02e      	b.n	800d17a <_scanf_float+0x182>
 800d11c:	2b59      	cmp	r3, #89	; 0x59
 800d11e:	d01e      	beq.n	800d15e <_scanf_float+0x166>
 800d120:	2b61      	cmp	r3, #97	; 0x61
 800d122:	e7de      	b.n	800d0e2 <_scanf_float+0xea>
 800d124:	2b6e      	cmp	r3, #110	; 0x6e
 800d126:	d0e9      	beq.n	800d0fc <_scanf_float+0x104>
 800d128:	d815      	bhi.n	800d156 <_scanf_float+0x15e>
 800d12a:	2b66      	cmp	r3, #102	; 0x66
 800d12c:	d043      	beq.n	800d1b6 <_scanf_float+0x1be>
 800d12e:	2b69      	cmp	r3, #105	; 0x69
 800d130:	d19a      	bne.n	800d068 <_scanf_float+0x70>
 800d132:	f1bb 0f00 	cmp.w	fp, #0
 800d136:	d138      	bne.n	800d1aa <_scanf_float+0x1b2>
 800d138:	f1b9 0f00 	cmp.w	r9, #0
 800d13c:	d197      	bne.n	800d06e <_scanf_float+0x76>
 800d13e:	6821      	ldr	r1, [r4, #0]
 800d140:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d144:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d148:	d195      	bne.n	800d076 <_scanf_float+0x7e>
 800d14a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d14e:	6021      	str	r1, [r4, #0]
 800d150:	f04f 0b01 	mov.w	fp, #1
 800d154:	e011      	b.n	800d17a <_scanf_float+0x182>
 800d156:	2b74      	cmp	r3, #116	; 0x74
 800d158:	d034      	beq.n	800d1c4 <_scanf_float+0x1cc>
 800d15a:	2b79      	cmp	r3, #121	; 0x79
 800d15c:	d184      	bne.n	800d068 <_scanf_float+0x70>
 800d15e:	f1bb 0f07 	cmp.w	fp, #7
 800d162:	d181      	bne.n	800d068 <_scanf_float+0x70>
 800d164:	f04f 0b08 	mov.w	fp, #8
 800d168:	e007      	b.n	800d17a <_scanf_float+0x182>
 800d16a:	eb12 0f0b 	cmn.w	r2, fp
 800d16e:	f47f af7b 	bne.w	800d068 <_scanf_float+0x70>
 800d172:	6821      	ldr	r1, [r4, #0]
 800d174:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d178:	6021      	str	r1, [r4, #0]
 800d17a:	702b      	strb	r3, [r5, #0]
 800d17c:	3501      	adds	r5, #1
 800d17e:	e79a      	b.n	800d0b6 <_scanf_float+0xbe>
 800d180:	6821      	ldr	r1, [r4, #0]
 800d182:	0608      	lsls	r0, r1, #24
 800d184:	f57f af70 	bpl.w	800d068 <_scanf_float+0x70>
 800d188:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d18c:	e7f4      	b.n	800d178 <_scanf_float+0x180>
 800d18e:	2a02      	cmp	r2, #2
 800d190:	d047      	beq.n	800d222 <_scanf_float+0x22a>
 800d192:	f1bb 0f01 	cmp.w	fp, #1
 800d196:	d003      	beq.n	800d1a0 <_scanf_float+0x1a8>
 800d198:	f1bb 0f04 	cmp.w	fp, #4
 800d19c:	f47f af64 	bne.w	800d068 <_scanf_float+0x70>
 800d1a0:	f10b 0b01 	add.w	fp, fp, #1
 800d1a4:	fa5f fb8b 	uxtb.w	fp, fp
 800d1a8:	e7e7      	b.n	800d17a <_scanf_float+0x182>
 800d1aa:	f1bb 0f03 	cmp.w	fp, #3
 800d1ae:	d0f7      	beq.n	800d1a0 <_scanf_float+0x1a8>
 800d1b0:	f1bb 0f05 	cmp.w	fp, #5
 800d1b4:	e7f2      	b.n	800d19c <_scanf_float+0x1a4>
 800d1b6:	f1bb 0f02 	cmp.w	fp, #2
 800d1ba:	f47f af55 	bne.w	800d068 <_scanf_float+0x70>
 800d1be:	f04f 0b03 	mov.w	fp, #3
 800d1c2:	e7da      	b.n	800d17a <_scanf_float+0x182>
 800d1c4:	f1bb 0f06 	cmp.w	fp, #6
 800d1c8:	f47f af4e 	bne.w	800d068 <_scanf_float+0x70>
 800d1cc:	f04f 0b07 	mov.w	fp, #7
 800d1d0:	e7d3      	b.n	800d17a <_scanf_float+0x182>
 800d1d2:	6821      	ldr	r1, [r4, #0]
 800d1d4:	0588      	lsls	r0, r1, #22
 800d1d6:	f57f af47 	bpl.w	800d068 <_scanf_float+0x70>
 800d1da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d1de:	6021      	str	r1, [r4, #0]
 800d1e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1e4:	e7c9      	b.n	800d17a <_scanf_float+0x182>
 800d1e6:	6821      	ldr	r1, [r4, #0]
 800d1e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d1ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d1f0:	d006      	beq.n	800d200 <_scanf_float+0x208>
 800d1f2:	0548      	lsls	r0, r1, #21
 800d1f4:	f57f af38 	bpl.w	800d068 <_scanf_float+0x70>
 800d1f8:	f1b9 0f00 	cmp.w	r9, #0
 800d1fc:	f43f af3b 	beq.w	800d076 <_scanf_float+0x7e>
 800d200:	0588      	lsls	r0, r1, #22
 800d202:	bf58      	it	pl
 800d204:	9802      	ldrpl	r0, [sp, #8]
 800d206:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d20a:	bf58      	it	pl
 800d20c:	eba9 0000 	subpl.w	r0, r9, r0
 800d210:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d214:	bf58      	it	pl
 800d216:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d21a:	6021      	str	r1, [r4, #0]
 800d21c:	f04f 0900 	mov.w	r9, #0
 800d220:	e7ab      	b.n	800d17a <_scanf_float+0x182>
 800d222:	2203      	movs	r2, #3
 800d224:	e7a9      	b.n	800d17a <_scanf_float+0x182>
 800d226:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d22a:	9205      	str	r2, [sp, #20]
 800d22c:	4631      	mov	r1, r6
 800d22e:	4638      	mov	r0, r7
 800d230:	4798      	blx	r3
 800d232:	9a05      	ldr	r2, [sp, #20]
 800d234:	2800      	cmp	r0, #0
 800d236:	f43f af04 	beq.w	800d042 <_scanf_float+0x4a>
 800d23a:	e715      	b.n	800d068 <_scanf_float+0x70>
 800d23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d244:	4632      	mov	r2, r6
 800d246:	4638      	mov	r0, r7
 800d248:	4798      	blx	r3
 800d24a:	6923      	ldr	r3, [r4, #16]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	6123      	str	r3, [r4, #16]
 800d250:	e715      	b.n	800d07e <_scanf_float+0x86>
 800d252:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d256:	2b06      	cmp	r3, #6
 800d258:	d80a      	bhi.n	800d270 <_scanf_float+0x278>
 800d25a:	f1bb 0f02 	cmp.w	fp, #2
 800d25e:	d966      	bls.n	800d32e <_scanf_float+0x336>
 800d260:	f1ab 0b03 	sub.w	fp, fp, #3
 800d264:	fa5f fb8b 	uxtb.w	fp, fp
 800d268:	eba5 0b0b 	sub.w	fp, r5, fp
 800d26c:	455d      	cmp	r5, fp
 800d26e:	d149      	bne.n	800d304 <_scanf_float+0x30c>
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	05da      	lsls	r2, r3, #23
 800d274:	d51f      	bpl.n	800d2b6 <_scanf_float+0x2be>
 800d276:	055b      	lsls	r3, r3, #21
 800d278:	d466      	bmi.n	800d348 <_scanf_float+0x350>
 800d27a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d27e:	6923      	ldr	r3, [r4, #16]
 800d280:	2965      	cmp	r1, #101	; 0x65
 800d282:	f103 33ff 	add.w	r3, r3, #4294967295
 800d286:	f105 3bff 	add.w	fp, r5, #4294967295
 800d28a:	6123      	str	r3, [r4, #16]
 800d28c:	d00d      	beq.n	800d2aa <_scanf_float+0x2b2>
 800d28e:	2945      	cmp	r1, #69	; 0x45
 800d290:	d00b      	beq.n	800d2aa <_scanf_float+0x2b2>
 800d292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d296:	4632      	mov	r2, r6
 800d298:	4638      	mov	r0, r7
 800d29a:	4798      	blx	r3
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	f1a5 0b02 	sub.w	fp, r5, #2
 800d2a8:	6123      	str	r3, [r4, #16]
 800d2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2ae:	4632      	mov	r2, r6
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	4798      	blx	r3
 800d2b4:	465d      	mov	r5, fp
 800d2b6:	6826      	ldr	r6, [r4, #0]
 800d2b8:	f016 0610 	ands.w	r6, r6, #16
 800d2bc:	d170      	bne.n	800d3a0 <_scanf_float+0x3a8>
 800d2be:	702e      	strb	r6, [r5, #0]
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d2c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2ca:	d140      	bne.n	800d34e <_scanf_float+0x356>
 800d2cc:	9b02      	ldr	r3, [sp, #8]
 800d2ce:	eba9 0303 	sub.w	r3, r9, r3
 800d2d2:	425a      	negs	r2, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d147      	bne.n	800d368 <_scanf_float+0x370>
 800d2d8:	2200      	movs	r2, #0
 800d2da:	4638      	mov	r0, r7
 800d2dc:	4641      	mov	r1, r8
 800d2de:	f000 fe6b 	bl	800dfb8 <_strtod_r>
 800d2e2:	6820      	ldr	r0, [r4, #0]
 800d2e4:	f8da 3000 	ldr.w	r3, [sl]
 800d2e8:	f010 0f02 	tst.w	r0, #2
 800d2ec:	f103 0204 	add.w	r2, r3, #4
 800d2f0:	f8ca 2000 	str.w	r2, [sl]
 800d2f4:	d043      	beq.n	800d37e <_scanf_float+0x386>
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	ed83 0b00 	vstr	d0, [r3]
 800d2fc:	68e3      	ldr	r3, [r4, #12]
 800d2fe:	3301      	adds	r3, #1
 800d300:	60e3      	str	r3, [r4, #12]
 800d302:	e6c0      	b.n	800d086 <_scanf_float+0x8e>
 800d304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d308:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d30c:	4632      	mov	r2, r6
 800d30e:	4638      	mov	r0, r7
 800d310:	4798      	blx	r3
 800d312:	6923      	ldr	r3, [r4, #16]
 800d314:	3b01      	subs	r3, #1
 800d316:	6123      	str	r3, [r4, #16]
 800d318:	e7a8      	b.n	800d26c <_scanf_float+0x274>
 800d31a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d31e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d322:	4632      	mov	r2, r6
 800d324:	4638      	mov	r0, r7
 800d326:	4798      	blx	r3
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	3b01      	subs	r3, #1
 800d32c:	6123      	str	r3, [r4, #16]
 800d32e:	4545      	cmp	r5, r8
 800d330:	d8f3      	bhi.n	800d31a <_scanf_float+0x322>
 800d332:	e6a7      	b.n	800d084 <_scanf_float+0x8c>
 800d334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d338:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d33c:	4632      	mov	r2, r6
 800d33e:	4638      	mov	r0, r7
 800d340:	4798      	blx	r3
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	3b01      	subs	r3, #1
 800d346:	6123      	str	r3, [r4, #16]
 800d348:	4545      	cmp	r5, r8
 800d34a:	d8f3      	bhi.n	800d334 <_scanf_float+0x33c>
 800d34c:	e69a      	b.n	800d084 <_scanf_float+0x8c>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d0c1      	beq.n	800d2d8 <_scanf_float+0x2e0>
 800d354:	9904      	ldr	r1, [sp, #16]
 800d356:	230a      	movs	r3, #10
 800d358:	4632      	mov	r2, r6
 800d35a:	3101      	adds	r1, #1
 800d35c:	4638      	mov	r0, r7
 800d35e:	f000 feb7 	bl	800e0d0 <_strtol_r>
 800d362:	9b03      	ldr	r3, [sp, #12]
 800d364:	9d04      	ldr	r5, [sp, #16]
 800d366:	1ac2      	subs	r2, r0, r3
 800d368:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d36c:	429d      	cmp	r5, r3
 800d36e:	bf28      	it	cs
 800d370:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d374:	490b      	ldr	r1, [pc, #44]	; (800d3a4 <_scanf_float+0x3ac>)
 800d376:	4628      	mov	r0, r5
 800d378:	f000 f81c 	bl	800d3b4 <siprintf>
 800d37c:	e7ac      	b.n	800d2d8 <_scanf_float+0x2e0>
 800d37e:	f010 0004 	ands.w	r0, r0, #4
 800d382:	d1b8      	bne.n	800d2f6 <_scanf_float+0x2fe>
 800d384:	eeb4 0b40 	vcmp.f64	d0, d0
 800d388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38c:	681d      	ldr	r5, [r3, #0]
 800d38e:	d704      	bvc.n	800d39a <_scanf_float+0x3a2>
 800d390:	f000 f80a 	bl	800d3a8 <nanf>
 800d394:	ed85 0a00 	vstr	s0, [r5]
 800d398:	e7b0      	b.n	800d2fc <_scanf_float+0x304>
 800d39a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d39e:	e7f9      	b.n	800d394 <_scanf_float+0x39c>
 800d3a0:	2600      	movs	r6, #0
 800d3a2:	e670      	b.n	800d086 <_scanf_float+0x8e>
 800d3a4:	080101b8 	.word	0x080101b8

0800d3a8 <nanf>:
 800d3a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d3b0 <nanf+0x8>
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	7fc00000 	.word	0x7fc00000

0800d3b4 <siprintf>:
 800d3b4:	b40e      	push	{r1, r2, r3}
 800d3b6:	b500      	push	{lr}
 800d3b8:	b09c      	sub	sp, #112	; 0x70
 800d3ba:	ab1d      	add	r3, sp, #116	; 0x74
 800d3bc:	9002      	str	r0, [sp, #8]
 800d3be:	9006      	str	r0, [sp, #24]
 800d3c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3c4:	4809      	ldr	r0, [pc, #36]	; (800d3ec <siprintf+0x38>)
 800d3c6:	9107      	str	r1, [sp, #28]
 800d3c8:	9104      	str	r1, [sp, #16]
 800d3ca:	4909      	ldr	r1, [pc, #36]	; (800d3f0 <siprintf+0x3c>)
 800d3cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3d0:	9105      	str	r1, [sp, #20]
 800d3d2:	6800      	ldr	r0, [r0, #0]
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	a902      	add	r1, sp, #8
 800d3d8:	f002 fcca 	bl	800fd70 <_svfiprintf_r>
 800d3dc:	9b02      	ldr	r3, [sp, #8]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	b01c      	add	sp, #112	; 0x70
 800d3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3e8:	b003      	add	sp, #12
 800d3ea:	4770      	bx	lr
 800d3ec:	200000cc 	.word	0x200000cc
 800d3f0:	ffff0208 	.word	0xffff0208

0800d3f4 <sulp>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	460d      	mov	r5, r1
 800d3fa:	4616      	mov	r6, r2
 800d3fc:	ec45 4b10 	vmov	d0, r4, r5
 800d400:	f002 fa72 	bl	800f8e8 <__ulp>
 800d404:	b17e      	cbz	r6, 800d426 <sulp+0x32>
 800d406:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d40a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d40e:	2b00      	cmp	r3, #0
 800d410:	dd09      	ble.n	800d426 <sulp+0x32>
 800d412:	051b      	lsls	r3, r3, #20
 800d414:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d418:	2000      	movs	r0, #0
 800d41a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d41e:	ec41 0b17 	vmov	d7, r0, r1
 800d422:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d426:	bd70      	pop	{r4, r5, r6, pc}

0800d428 <_strtod_l>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	ed2d 8b0c 	vpush	{d8-d13}
 800d430:	4698      	mov	r8, r3
 800d432:	b09d      	sub	sp, #116	; 0x74
 800d434:	2300      	movs	r3, #0
 800d436:	4604      	mov	r4, r0
 800d438:	4640      	mov	r0, r8
 800d43a:	460e      	mov	r6, r1
 800d43c:	9214      	str	r2, [sp, #80]	; 0x50
 800d43e:	9318      	str	r3, [sp, #96]	; 0x60
 800d440:	f001 ff5b 	bl	800f2fa <__localeconv_l>
 800d444:	4681      	mov	r9, r0
 800d446:	6800      	ldr	r0, [r0, #0]
 800d448:	f7f2 fefa 	bl	8000240 <strlen>
 800d44c:	f04f 0a00 	mov.w	sl, #0
 800d450:	4607      	mov	r7, r0
 800d452:	f04f 0b00 	mov.w	fp, #0
 800d456:	9617      	str	r6, [sp, #92]	; 0x5c
 800d458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d45a:	781a      	ldrb	r2, [r3, #0]
 800d45c:	2a0d      	cmp	r2, #13
 800d45e:	d834      	bhi.n	800d4ca <_strtod_l+0xa2>
 800d460:	2a09      	cmp	r2, #9
 800d462:	d238      	bcs.n	800d4d6 <_strtod_l+0xae>
 800d464:	2a00      	cmp	r2, #0
 800d466:	d040      	beq.n	800d4ea <_strtod_l+0xc2>
 800d468:	2300      	movs	r3, #0
 800d46a:	930d      	str	r3, [sp, #52]	; 0x34
 800d46c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d46e:	782b      	ldrb	r3, [r5, #0]
 800d470:	2b30      	cmp	r3, #48	; 0x30
 800d472:	f040 80b3 	bne.w	800d5dc <_strtod_l+0x1b4>
 800d476:	786b      	ldrb	r3, [r5, #1]
 800d478:	2b58      	cmp	r3, #88	; 0x58
 800d47a:	d001      	beq.n	800d480 <_strtod_l+0x58>
 800d47c:	2b78      	cmp	r3, #120	; 0x78
 800d47e:	d169      	bne.n	800d554 <_strtod_l+0x12c>
 800d480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	ab18      	add	r3, sp, #96	; 0x60
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	f8cd 8008 	str.w	r8, [sp, #8]
 800d48c:	ab19      	add	r3, sp, #100	; 0x64
 800d48e:	4a8f      	ldr	r2, [pc, #572]	; (800d6cc <_strtod_l+0x2a4>)
 800d490:	a917      	add	r1, sp, #92	; 0x5c
 800d492:	4620      	mov	r0, r4
 800d494:	f001 fc57 	bl	800ed46 <__gethex>
 800d498:	f010 0607 	ands.w	r6, r0, #7
 800d49c:	4607      	mov	r7, r0
 800d49e:	d005      	beq.n	800d4ac <_strtod_l+0x84>
 800d4a0:	2e06      	cmp	r6, #6
 800d4a2:	d12c      	bne.n	800d4fe <_strtod_l+0xd6>
 800d4a4:	3501      	adds	r5, #1
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	9517      	str	r5, [sp, #92]	; 0x5c
 800d4aa:	930d      	str	r3, [sp, #52]	; 0x34
 800d4ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f040 855e 	bne.w	800df70 <_strtod_l+0xb48>
 800d4b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4b6:	b1eb      	cbz	r3, 800d4f4 <_strtod_l+0xcc>
 800d4b8:	ec4b ab17 	vmov	d7, sl, fp
 800d4bc:	eeb1 0b47 	vneg.f64	d0, d7
 800d4c0:	b01d      	add	sp, #116	; 0x74
 800d4c2:	ecbd 8b0c 	vpop	{d8-d13}
 800d4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ca:	2a2b      	cmp	r2, #43	; 0x2b
 800d4cc:	d015      	beq.n	800d4fa <_strtod_l+0xd2>
 800d4ce:	2a2d      	cmp	r2, #45	; 0x2d
 800d4d0:	d004      	beq.n	800d4dc <_strtod_l+0xb4>
 800d4d2:	2a20      	cmp	r2, #32
 800d4d4:	d1c8      	bne.n	800d468 <_strtod_l+0x40>
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4da:	e7bd      	b.n	800d458 <_strtod_l+0x30>
 800d4dc:	2201      	movs	r2, #1
 800d4de:	920d      	str	r2, [sp, #52]	; 0x34
 800d4e0:	1c5a      	adds	r2, r3, #1
 800d4e2:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4e4:	785b      	ldrb	r3, [r3, #1]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1c0      	bne.n	800d46c <_strtod_l+0x44>
 800d4ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f040 853c 	bne.w	800df6c <_strtod_l+0xb44>
 800d4f4:	ec4b ab10 	vmov	d0, sl, fp
 800d4f8:	e7e2      	b.n	800d4c0 <_strtod_l+0x98>
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	e7ef      	b.n	800d4de <_strtod_l+0xb6>
 800d4fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d500:	b13a      	cbz	r2, 800d512 <_strtod_l+0xea>
 800d502:	2135      	movs	r1, #53	; 0x35
 800d504:	a81a      	add	r0, sp, #104	; 0x68
 800d506:	f002 fae8 	bl	800fada <__copybits>
 800d50a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d50c:	4620      	mov	r0, r4
 800d50e:	f001 ff53 	bl	800f3b8 <_Bfree>
 800d512:	3e01      	subs	r6, #1
 800d514:	2e04      	cmp	r6, #4
 800d516:	d806      	bhi.n	800d526 <_strtod_l+0xfe>
 800d518:	e8df f006 	tbb	[pc, r6]
 800d51c:	1714030a 	.word	0x1714030a
 800d520:	0a          	.byte	0x0a
 800d521:	00          	.byte	0x00
 800d522:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d526:	073b      	lsls	r3, r7, #28
 800d528:	d5c0      	bpl.n	800d4ac <_strtod_l+0x84>
 800d52a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d52e:	e7bd      	b.n	800d4ac <_strtod_l+0x84>
 800d530:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d534:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d536:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d53a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d53e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d542:	e7f0      	b.n	800d526 <_strtod_l+0xfe>
 800d544:	f8df b188 	ldr.w	fp, [pc, #392]	; 800d6d0 <_strtod_l+0x2a8>
 800d548:	e7ed      	b.n	800d526 <_strtod_l+0xfe>
 800d54a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d54e:	f04f 3aff 	mov.w	sl, #4294967295
 800d552:	e7e8      	b.n	800d526 <_strtod_l+0xfe>
 800d554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	9217      	str	r2, [sp, #92]	; 0x5c
 800d55a:	785b      	ldrb	r3, [r3, #1]
 800d55c:	2b30      	cmp	r3, #48	; 0x30
 800d55e:	d0f9      	beq.n	800d554 <_strtod_l+0x12c>
 800d560:	2b00      	cmp	r3, #0
 800d562:	d0a3      	beq.n	800d4ac <_strtod_l+0x84>
 800d564:	2301      	movs	r3, #1
 800d566:	930a      	str	r3, [sp, #40]	; 0x28
 800d568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d56a:	930c      	str	r3, [sp, #48]	; 0x30
 800d56c:	2300      	movs	r3, #0
 800d56e:	9306      	str	r3, [sp, #24]
 800d570:	9308      	str	r3, [sp, #32]
 800d572:	461d      	mov	r5, r3
 800d574:	220a      	movs	r2, #10
 800d576:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d578:	f890 8000 	ldrb.w	r8, [r0]
 800d57c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800d580:	b2d9      	uxtb	r1, r3
 800d582:	2909      	cmp	r1, #9
 800d584:	d92c      	bls.n	800d5e0 <_strtod_l+0x1b8>
 800d586:	463a      	mov	r2, r7
 800d588:	f8d9 1000 	ldr.w	r1, [r9]
 800d58c:	f002 fcf8 	bl	800ff80 <strncmp>
 800d590:	2800      	cmp	r0, #0
 800d592:	d035      	beq.n	800d600 <_strtod_l+0x1d8>
 800d594:	2000      	movs	r0, #0
 800d596:	4642      	mov	r2, r8
 800d598:	462b      	mov	r3, r5
 800d59a:	4601      	mov	r1, r0
 800d59c:	9004      	str	r0, [sp, #16]
 800d59e:	2a65      	cmp	r2, #101	; 0x65
 800d5a0:	d001      	beq.n	800d5a6 <_strtod_l+0x17e>
 800d5a2:	2a45      	cmp	r2, #69	; 0x45
 800d5a4:	d117      	bne.n	800d5d6 <_strtod_l+0x1ae>
 800d5a6:	b923      	cbnz	r3, 800d5b2 <_strtod_l+0x18a>
 800d5a8:	b910      	cbnz	r0, 800d5b0 <_strtod_l+0x188>
 800d5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d09c      	beq.n	800d4ea <_strtod_l+0xc2>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d5b4:	1c72      	adds	r2, r6, #1
 800d5b6:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5b8:	7872      	ldrb	r2, [r6, #1]
 800d5ba:	2a2b      	cmp	r2, #43	; 0x2b
 800d5bc:	f000 8082 	beq.w	800d6c4 <_strtod_l+0x29c>
 800d5c0:	2a2d      	cmp	r2, #45	; 0x2d
 800d5c2:	d079      	beq.n	800d6b8 <_strtod_l+0x290>
 800d5c4:	f04f 0e00 	mov.w	lr, #0
 800d5c8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800d5cc:	f1bc 0f09 	cmp.w	ip, #9
 800d5d0:	f240 8086 	bls.w	800d6e0 <_strtod_l+0x2b8>
 800d5d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d5d6:	f04f 0800 	mov.w	r8, #0
 800d5da:	e0a8      	b.n	800d72e <_strtod_l+0x306>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e7c2      	b.n	800d566 <_strtod_l+0x13e>
 800d5e0:	2d08      	cmp	r5, #8
 800d5e2:	bfd5      	itete	le
 800d5e4:	9908      	ldrle	r1, [sp, #32]
 800d5e6:	9906      	ldrgt	r1, [sp, #24]
 800d5e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d5f0:	f100 0001 	add.w	r0, r0, #1
 800d5f4:	bfd4      	ite	le
 800d5f6:	9308      	strle	r3, [sp, #32]
 800d5f8:	9306      	strgt	r3, [sp, #24]
 800d5fa:	3501      	adds	r5, #1
 800d5fc:	9017      	str	r0, [sp, #92]	; 0x5c
 800d5fe:	e7ba      	b.n	800d576 <_strtod_l+0x14e>
 800d600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d602:	19da      	adds	r2, r3, r7
 800d604:	9217      	str	r2, [sp, #92]	; 0x5c
 800d606:	5dda      	ldrb	r2, [r3, r7]
 800d608:	2d00      	cmp	r5, #0
 800d60a:	d038      	beq.n	800d67e <_strtod_l+0x256>
 800d60c:	4601      	mov	r1, r0
 800d60e:	462b      	mov	r3, r5
 800d610:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800d614:	2f09      	cmp	r7, #9
 800d616:	d913      	bls.n	800d640 <_strtod_l+0x218>
 800d618:	2701      	movs	r7, #1
 800d61a:	9704      	str	r7, [sp, #16]
 800d61c:	e7bf      	b.n	800d59e <_strtod_l+0x176>
 800d61e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	9217      	str	r2, [sp, #92]	; 0x5c
 800d624:	785a      	ldrb	r2, [r3, #1]
 800d626:	3001      	adds	r0, #1
 800d628:	2a30      	cmp	r2, #48	; 0x30
 800d62a:	d0f8      	beq.n	800d61e <_strtod_l+0x1f6>
 800d62c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d630:	2b08      	cmp	r3, #8
 800d632:	f200 84a2 	bhi.w	800df7a <_strtod_l+0xb52>
 800d636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d638:	930c      	str	r3, [sp, #48]	; 0x30
 800d63a:	4601      	mov	r1, r0
 800d63c:	2000      	movs	r0, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800d644:	f100 0701 	add.w	r7, r0, #1
 800d648:	d013      	beq.n	800d672 <_strtod_l+0x24a>
 800d64a:	4439      	add	r1, r7
 800d64c:	eb00 0e03 	add.w	lr, r0, r3
 800d650:	461f      	mov	r7, r3
 800d652:	f04f 0c0a 	mov.w	ip, #10
 800d656:	45be      	cmp	lr, r7
 800d658:	d113      	bne.n	800d682 <_strtod_l+0x25a>
 800d65a:	181f      	adds	r7, r3, r0
 800d65c:	2f08      	cmp	r7, #8
 800d65e:	f103 0301 	add.w	r3, r3, #1
 800d662:	4403      	add	r3, r0
 800d664:	dc1d      	bgt.n	800d6a2 <_strtod_l+0x27a>
 800d666:	9a08      	ldr	r2, [sp, #32]
 800d668:	200a      	movs	r0, #10
 800d66a:	fb00 8202 	mla	r2, r0, r2, r8
 800d66e:	9208      	str	r2, [sp, #32]
 800d670:	2700      	movs	r7, #0
 800d672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d674:	1c50      	adds	r0, r2, #1
 800d676:	9017      	str	r0, [sp, #92]	; 0x5c
 800d678:	7852      	ldrb	r2, [r2, #1]
 800d67a:	4638      	mov	r0, r7
 800d67c:	e7c8      	b.n	800d610 <_strtod_l+0x1e8>
 800d67e:	4628      	mov	r0, r5
 800d680:	e7d2      	b.n	800d628 <_strtod_l+0x200>
 800d682:	2f08      	cmp	r7, #8
 800d684:	f107 0701 	add.w	r7, r7, #1
 800d688:	dc04      	bgt.n	800d694 <_strtod_l+0x26c>
 800d68a:	9a08      	ldr	r2, [sp, #32]
 800d68c:	fb0c f202 	mul.w	r2, ip, r2
 800d690:	9208      	str	r2, [sp, #32]
 800d692:	e7e0      	b.n	800d656 <_strtod_l+0x22e>
 800d694:	2f10      	cmp	r7, #16
 800d696:	bfde      	ittt	le
 800d698:	9a06      	ldrle	r2, [sp, #24]
 800d69a:	fb0c f202 	mulle.w	r2, ip, r2
 800d69e:	9206      	strle	r2, [sp, #24]
 800d6a0:	e7d9      	b.n	800d656 <_strtod_l+0x22e>
 800d6a2:	2b10      	cmp	r3, #16
 800d6a4:	bfdf      	itttt	le
 800d6a6:	9a06      	ldrle	r2, [sp, #24]
 800d6a8:	200a      	movle	r0, #10
 800d6aa:	fb00 8202 	mlale	r2, r0, r2, r8
 800d6ae:	9206      	strle	r2, [sp, #24]
 800d6b0:	e7de      	b.n	800d670 <_strtod_l+0x248>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	9304      	str	r3, [sp, #16]
 800d6b6:	e777      	b.n	800d5a8 <_strtod_l+0x180>
 800d6b8:	f04f 0e01 	mov.w	lr, #1
 800d6bc:	1cb2      	adds	r2, r6, #2
 800d6be:	9217      	str	r2, [sp, #92]	; 0x5c
 800d6c0:	78b2      	ldrb	r2, [r6, #2]
 800d6c2:	e781      	b.n	800d5c8 <_strtod_l+0x1a0>
 800d6c4:	f04f 0e00 	mov.w	lr, #0
 800d6c8:	e7f8      	b.n	800d6bc <_strtod_l+0x294>
 800d6ca:	bf00      	nop
 800d6cc:	080101c0 	.word	0x080101c0
 800d6d0:	7ff00000 	.word	0x7ff00000
 800d6d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6d6:	f102 0c01 	add.w	ip, r2, #1
 800d6da:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d6de:	7852      	ldrb	r2, [r2, #1]
 800d6e0:	2a30      	cmp	r2, #48	; 0x30
 800d6e2:	d0f7      	beq.n	800d6d4 <_strtod_l+0x2ac>
 800d6e4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800d6e8:	f1bc 0f08 	cmp.w	ip, #8
 800d6ec:	f63f af73 	bhi.w	800d5d6 <_strtod_l+0x1ae>
 800d6f0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800d6f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6f6:	920e      	str	r2, [sp, #56]	; 0x38
 800d6f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d6fa:	f102 0c01 	add.w	ip, r2, #1
 800d6fe:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800d702:	7852      	ldrb	r2, [r2, #1]
 800d704:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800d708:	f1b9 0f09 	cmp.w	r9, #9
 800d70c:	d939      	bls.n	800d782 <_strtod_l+0x35a>
 800d70e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d710:	ebac 0c07 	sub.w	ip, ip, r7
 800d714:	f1bc 0f08 	cmp.w	ip, #8
 800d718:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800d71c:	dc37      	bgt.n	800d78e <_strtod_l+0x366>
 800d71e:	45e0      	cmp	r8, ip
 800d720:	bfa8      	it	ge
 800d722:	46e0      	movge	r8, ip
 800d724:	f1be 0f00 	cmp.w	lr, #0
 800d728:	d001      	beq.n	800d72e <_strtod_l+0x306>
 800d72a:	f1c8 0800 	rsb	r8, r8, #0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d151      	bne.n	800d7d6 <_strtod_l+0x3ae>
 800d732:	2800      	cmp	r0, #0
 800d734:	f47f aeba 	bne.w	800d4ac <_strtod_l+0x84>
 800d738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f47f aeb6 	bne.w	800d4ac <_strtod_l+0x84>
 800d740:	9b04      	ldr	r3, [sp, #16]
 800d742:	2b00      	cmp	r3, #0
 800d744:	f47f aed1 	bne.w	800d4ea <_strtod_l+0xc2>
 800d748:	2a4e      	cmp	r2, #78	; 0x4e
 800d74a:	d027      	beq.n	800d79c <_strtod_l+0x374>
 800d74c:	dc21      	bgt.n	800d792 <_strtod_l+0x36a>
 800d74e:	2a49      	cmp	r2, #73	; 0x49
 800d750:	f47f aecb 	bne.w	800d4ea <_strtod_l+0xc2>
 800d754:	499a      	ldr	r1, [pc, #616]	; (800d9c0 <_strtod_l+0x598>)
 800d756:	a817      	add	r0, sp, #92	; 0x5c
 800d758:	f001 fd28 	bl	800f1ac <__match>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f43f aec4 	beq.w	800d4ea <_strtod_l+0xc2>
 800d762:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d764:	4997      	ldr	r1, [pc, #604]	; (800d9c4 <_strtod_l+0x59c>)
 800d766:	3b01      	subs	r3, #1
 800d768:	a817      	add	r0, sp, #92	; 0x5c
 800d76a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d76c:	f001 fd1e 	bl	800f1ac <__match>
 800d770:	b910      	cbnz	r0, 800d778 <_strtod_l+0x350>
 800d772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d774:	3301      	adds	r3, #1
 800d776:	9317      	str	r3, [sp, #92]	; 0x5c
 800d778:	f8df b260 	ldr.w	fp, [pc, #608]	; 800d9dc <_strtod_l+0x5b4>
 800d77c:	f04f 0a00 	mov.w	sl, #0
 800d780:	e694      	b.n	800d4ac <_strtod_l+0x84>
 800d782:	270a      	movs	r7, #10
 800d784:	fb07 2808 	mla	r8, r7, r8, r2
 800d788:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800d78c:	e7b4      	b.n	800d6f8 <_strtod_l+0x2d0>
 800d78e:	46e0      	mov	r8, ip
 800d790:	e7c8      	b.n	800d724 <_strtod_l+0x2fc>
 800d792:	2a69      	cmp	r2, #105	; 0x69
 800d794:	d0de      	beq.n	800d754 <_strtod_l+0x32c>
 800d796:	2a6e      	cmp	r2, #110	; 0x6e
 800d798:	f47f aea7 	bne.w	800d4ea <_strtod_l+0xc2>
 800d79c:	498a      	ldr	r1, [pc, #552]	; (800d9c8 <_strtod_l+0x5a0>)
 800d79e:	a817      	add	r0, sp, #92	; 0x5c
 800d7a0:	f001 fd04 	bl	800f1ac <__match>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	f43f aea0 	beq.w	800d4ea <_strtod_l+0xc2>
 800d7aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b28      	cmp	r3, #40	; 0x28
 800d7b0:	d10e      	bne.n	800d7d0 <_strtod_l+0x3a8>
 800d7b2:	aa1a      	add	r2, sp, #104	; 0x68
 800d7b4:	4985      	ldr	r1, [pc, #532]	; (800d9cc <_strtod_l+0x5a4>)
 800d7b6:	a817      	add	r0, sp, #92	; 0x5c
 800d7b8:	f001 fd0c 	bl	800f1d4 <__hexnan>
 800d7bc:	2805      	cmp	r0, #5
 800d7be:	d107      	bne.n	800d7d0 <_strtod_l+0x3a8>
 800d7c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7c2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d7c6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d7ca:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d7ce:	e66d      	b.n	800d4ac <_strtod_l+0x84>
 800d7d0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800d9e0 <_strtod_l+0x5b8>
 800d7d4:	e7d2      	b.n	800d77c <_strtod_l+0x354>
 800d7d6:	eddd 7a08 	vldr	s15, [sp, #32]
 800d7da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d7de:	eba8 0201 	sub.w	r2, r8, r1
 800d7e2:	2d00      	cmp	r5, #0
 800d7e4:	bf08      	it	eq
 800d7e6:	461d      	moveq	r5, r3
 800d7e8:	2b10      	cmp	r3, #16
 800d7ea:	9204      	str	r2, [sp, #16]
 800d7ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	bfa8      	it	ge
 800d7f4:	2210      	movge	r2, #16
 800d7f6:	2b09      	cmp	r3, #9
 800d7f8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d7fc:	dc14      	bgt.n	800d828 <_strtod_l+0x400>
 800d7fe:	9904      	ldr	r1, [sp, #16]
 800d800:	2900      	cmp	r1, #0
 800d802:	f43f ae53 	beq.w	800d4ac <_strtod_l+0x84>
 800d806:	9904      	ldr	r1, [sp, #16]
 800d808:	dd72      	ble.n	800d8f0 <_strtod_l+0x4c8>
 800d80a:	2916      	cmp	r1, #22
 800d80c:	dc5a      	bgt.n	800d8c4 <_strtod_l+0x49c>
 800d80e:	4970      	ldr	r1, [pc, #448]	; (800d9d0 <_strtod_l+0x5a8>)
 800d810:	9b04      	ldr	r3, [sp, #16]
 800d812:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d816:	ed91 7b00 	vldr	d7, [r1]
 800d81a:	ec4b ab16 	vmov	d6, sl, fp
 800d81e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d822:	ec5b ab17 	vmov	sl, fp, d7
 800d826:	e641      	b.n	800d4ac <_strtod_l+0x84>
 800d828:	4969      	ldr	r1, [pc, #420]	; (800d9d0 <_strtod_l+0x5a8>)
 800d82a:	eddd 7a06 	vldr	s15, [sp, #24]
 800d82e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d832:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800d836:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d83a:	2b0f      	cmp	r3, #15
 800d83c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d840:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d844:	ec5b ab17 	vmov	sl, fp, d7
 800d848:	ddd9      	ble.n	800d7fe <_strtod_l+0x3d6>
 800d84a:	9904      	ldr	r1, [sp, #16]
 800d84c:	1a9a      	subs	r2, r3, r2
 800d84e:	440a      	add	r2, r1
 800d850:	2a00      	cmp	r2, #0
 800d852:	f340 8096 	ble.w	800d982 <_strtod_l+0x55a>
 800d856:	f012 000f 	ands.w	r0, r2, #15
 800d85a:	d00a      	beq.n	800d872 <_strtod_l+0x44a>
 800d85c:	495c      	ldr	r1, [pc, #368]	; (800d9d0 <_strtod_l+0x5a8>)
 800d85e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d862:	ed91 7b00 	vldr	d7, [r1]
 800d866:	ec4b ab16 	vmov	d6, sl, fp
 800d86a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d86e:	ec5b ab17 	vmov	sl, fp, d7
 800d872:	f032 020f 	bics.w	r2, r2, #15
 800d876:	d072      	beq.n	800d95e <_strtod_l+0x536>
 800d878:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800d87c:	dd45      	ble.n	800d90a <_strtod_l+0x4e2>
 800d87e:	2500      	movs	r5, #0
 800d880:	46a8      	mov	r8, r5
 800d882:	9506      	str	r5, [sp, #24]
 800d884:	46a9      	mov	r9, r5
 800d886:	2322      	movs	r3, #34	; 0x22
 800d888:	f8df b150 	ldr.w	fp, [pc, #336]	; 800d9dc <_strtod_l+0x5b4>
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	f04f 0a00 	mov.w	sl, #0
 800d892:	9b06      	ldr	r3, [sp, #24]
 800d894:	2b00      	cmp	r3, #0
 800d896:	f43f ae09 	beq.w	800d4ac <_strtod_l+0x84>
 800d89a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d89c:	4620      	mov	r0, r4
 800d89e:	f001 fd8b 	bl	800f3b8 <_Bfree>
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f001 fd87 	bl	800f3b8 <_Bfree>
 800d8aa:	4641      	mov	r1, r8
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f001 fd83 	bl	800f3b8 <_Bfree>
 800d8b2:	9906      	ldr	r1, [sp, #24]
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f001 fd7f 	bl	800f3b8 <_Bfree>
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f001 fd7b 	bl	800f3b8 <_Bfree>
 800d8c2:	e5f3      	b.n	800d4ac <_strtod_l+0x84>
 800d8c4:	9804      	ldr	r0, [sp, #16]
 800d8c6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800d8ca:	4281      	cmp	r1, r0
 800d8cc:	dbbd      	blt.n	800d84a <_strtod_l+0x422>
 800d8ce:	4a40      	ldr	r2, [pc, #256]	; (800d9d0 <_strtod_l+0x5a8>)
 800d8d0:	f1c3 030f 	rsb	r3, r3, #15
 800d8d4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d8d8:	ed91 7b00 	vldr	d7, [r1]
 800d8dc:	ec4b ab16 	vmov	d6, sl, fp
 800d8e0:	1ac3      	subs	r3, r0, r3
 800d8e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d8e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8ea:	ed92 6b00 	vldr	d6, [r2]
 800d8ee:	e796      	b.n	800d81e <_strtod_l+0x3f6>
 800d8f0:	3116      	adds	r1, #22
 800d8f2:	dbaa      	blt.n	800d84a <_strtod_l+0x422>
 800d8f4:	4936      	ldr	r1, [pc, #216]	; (800d9d0 <_strtod_l+0x5a8>)
 800d8f6:	9b04      	ldr	r3, [sp, #16]
 800d8f8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800d8fc:	ed91 7b00 	vldr	d7, [r1]
 800d900:	ec4b ab16 	vmov	d6, sl, fp
 800d904:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d908:	e78b      	b.n	800d822 <_strtod_l+0x3fa>
 800d90a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800d90e:	2000      	movs	r0, #0
 800d910:	4e30      	ldr	r6, [pc, #192]	; (800d9d4 <_strtod_l+0x5ac>)
 800d912:	1112      	asrs	r2, r2, #4
 800d914:	4601      	mov	r1, r0
 800d916:	2a01      	cmp	r2, #1
 800d918:	dc23      	bgt.n	800d962 <_strtod_l+0x53a>
 800d91a:	b108      	cbz	r0, 800d920 <_strtod_l+0x4f8>
 800d91c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d920:	4a2c      	ldr	r2, [pc, #176]	; (800d9d4 <_strtod_l+0x5ac>)
 800d922:	482d      	ldr	r0, [pc, #180]	; (800d9d8 <_strtod_l+0x5b0>)
 800d924:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800d928:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d92c:	ed91 7b00 	vldr	d7, [r1]
 800d930:	ec4b ab16 	vmov	d6, sl, fp
 800d934:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d938:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d93c:	9907      	ldr	r1, [sp, #28]
 800d93e:	4a27      	ldr	r2, [pc, #156]	; (800d9dc <_strtod_l+0x5b4>)
 800d940:	400a      	ands	r2, r1
 800d942:	4282      	cmp	r2, r0
 800d944:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d948:	d899      	bhi.n	800d87e <_strtod_l+0x456>
 800d94a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800d94e:	4282      	cmp	r2, r0
 800d950:	bf86      	itte	hi
 800d952:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800d9e4 <_strtod_l+0x5bc>
 800d956:	f04f 3aff 	movhi.w	sl, #4294967295
 800d95a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800d95e:	2700      	movs	r7, #0
 800d960:	e070      	b.n	800da44 <_strtod_l+0x61c>
 800d962:	07d7      	lsls	r7, r2, #31
 800d964:	d50a      	bpl.n	800d97c <_strtod_l+0x554>
 800d966:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800d96a:	ed90 7b00 	vldr	d7, [r0]
 800d96e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800d972:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d976:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d97a:	2001      	movs	r0, #1
 800d97c:	3101      	adds	r1, #1
 800d97e:	1052      	asrs	r2, r2, #1
 800d980:	e7c9      	b.n	800d916 <_strtod_l+0x4ee>
 800d982:	d0ec      	beq.n	800d95e <_strtod_l+0x536>
 800d984:	4252      	negs	r2, r2
 800d986:	f012 000f 	ands.w	r0, r2, #15
 800d98a:	d00a      	beq.n	800d9a2 <_strtod_l+0x57a>
 800d98c:	4910      	ldr	r1, [pc, #64]	; (800d9d0 <_strtod_l+0x5a8>)
 800d98e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d992:	ed91 7b00 	vldr	d7, [r1]
 800d996:	ec4b ab16 	vmov	d6, sl, fp
 800d99a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d99e:	ec5b ab17 	vmov	sl, fp, d7
 800d9a2:	1112      	asrs	r2, r2, #4
 800d9a4:	d0db      	beq.n	800d95e <_strtod_l+0x536>
 800d9a6:	2a1f      	cmp	r2, #31
 800d9a8:	dd1e      	ble.n	800d9e8 <_strtod_l+0x5c0>
 800d9aa:	2500      	movs	r5, #0
 800d9ac:	46a8      	mov	r8, r5
 800d9ae:	9506      	str	r5, [sp, #24]
 800d9b0:	46a9      	mov	r9, r5
 800d9b2:	2322      	movs	r3, #34	; 0x22
 800d9b4:	f04f 0a00 	mov.w	sl, #0
 800d9b8:	f04f 0b00 	mov.w	fp, #0
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	e768      	b.n	800d892 <_strtod_l+0x46a>
 800d9c0:	08010189 	.word	0x08010189
 800d9c4:	08010213 	.word	0x08010213
 800d9c8:	08010191 	.word	0x08010191
 800d9cc:	080101d4 	.word	0x080101d4
 800d9d0:	08010250 	.word	0x08010250
 800d9d4:	08010228 	.word	0x08010228
 800d9d8:	7ca00000 	.word	0x7ca00000
 800d9dc:	7ff00000 	.word	0x7ff00000
 800d9e0:	fff80000 	.word	0xfff80000
 800d9e4:	7fefffff 	.word	0x7fefffff
 800d9e8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800d9ec:	f012 0710 	ands.w	r7, r2, #16
 800d9f0:	49ab      	ldr	r1, [pc, #684]	; (800dca0 <_strtod_l+0x878>)
 800d9f2:	bf18      	it	ne
 800d9f4:	276a      	movne	r7, #106	; 0x6a
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	2a00      	cmp	r2, #0
 800d9fa:	f300 8113 	bgt.w	800dc24 <_strtod_l+0x7fc>
 800d9fe:	b108      	cbz	r0, 800da04 <_strtod_l+0x5dc>
 800da00:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800da04:	b1bf      	cbz	r7, 800da36 <_strtod_l+0x60e>
 800da06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da0a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800da0e:	2a00      	cmp	r2, #0
 800da10:	4659      	mov	r1, fp
 800da12:	dd10      	ble.n	800da36 <_strtod_l+0x60e>
 800da14:	2a1f      	cmp	r2, #31
 800da16:	f340 8113 	ble.w	800dc40 <_strtod_l+0x818>
 800da1a:	2a34      	cmp	r2, #52	; 0x34
 800da1c:	bfde      	ittt	le
 800da1e:	3a20      	suble	r2, #32
 800da20:	f04f 30ff 	movle.w	r0, #4294967295
 800da24:	fa00 f202 	lslle.w	r2, r0, r2
 800da28:	f04f 0a00 	mov.w	sl, #0
 800da2c:	bfcc      	ite	gt
 800da2e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da32:	ea02 0b01 	andle.w	fp, r2, r1
 800da36:	ec4b ab17 	vmov	d7, sl, fp
 800da3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da42:	d0b2      	beq.n	800d9aa <_strtod_l+0x582>
 800da44:	9a08      	ldr	r2, [sp, #32]
 800da46:	9200      	str	r2, [sp, #0]
 800da48:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da4a:	462a      	mov	r2, r5
 800da4c:	4620      	mov	r0, r4
 800da4e:	f001 fd05 	bl	800f45c <__s2b>
 800da52:	9006      	str	r0, [sp, #24]
 800da54:	2800      	cmp	r0, #0
 800da56:	f43f af12 	beq.w	800d87e <_strtod_l+0x456>
 800da5a:	9a04      	ldr	r2, [sp, #16]
 800da5c:	9b04      	ldr	r3, [sp, #16]
 800da5e:	2a00      	cmp	r2, #0
 800da60:	f1c3 0300 	rsb	r3, r3, #0
 800da64:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800dc88 <_strtod_l+0x860>
 800da68:	bfa8      	it	ge
 800da6a:	2300      	movge	r3, #0
 800da6c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800dc90 <_strtod_l+0x868>
 800da70:	ed9f bb89 	vldr	d11, [pc, #548]	; 800dc98 <_strtod_l+0x870>
 800da74:	930e      	str	r3, [sp, #56]	; 0x38
 800da76:	2500      	movs	r5, #0
 800da78:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da7c:	9310      	str	r3, [sp, #64]	; 0x40
 800da7e:	46a8      	mov	r8, r5
 800da80:	9b06      	ldr	r3, [sp, #24]
 800da82:	4620      	mov	r0, r4
 800da84:	6859      	ldr	r1, [r3, #4]
 800da86:	f001 fc63 	bl	800f350 <_Balloc>
 800da8a:	4681      	mov	r9, r0
 800da8c:	2800      	cmp	r0, #0
 800da8e:	f43f aefa 	beq.w	800d886 <_strtod_l+0x45e>
 800da92:	9b06      	ldr	r3, [sp, #24]
 800da94:	691a      	ldr	r2, [r3, #16]
 800da96:	3202      	adds	r2, #2
 800da98:	f103 010c 	add.w	r1, r3, #12
 800da9c:	0092      	lsls	r2, r2, #2
 800da9e:	300c      	adds	r0, #12
 800daa0:	f7fe fe5e 	bl	800c760 <memcpy>
 800daa4:	aa1a      	add	r2, sp, #104	; 0x68
 800daa6:	a919      	add	r1, sp, #100	; 0x64
 800daa8:	ec4b ab10 	vmov	d0, sl, fp
 800daac:	4620      	mov	r0, r4
 800daae:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dab2:	f001 ff8f 	bl	800f9d4 <__d2b>
 800dab6:	9018      	str	r0, [sp, #96]	; 0x60
 800dab8:	2800      	cmp	r0, #0
 800daba:	f43f aee4 	beq.w	800d886 <_strtod_l+0x45e>
 800dabe:	2101      	movs	r1, #1
 800dac0:	4620      	mov	r0, r4
 800dac2:	f001 fd57 	bl	800f574 <__i2b>
 800dac6:	4680      	mov	r8, r0
 800dac8:	2800      	cmp	r0, #0
 800daca:	f43f aedc 	beq.w	800d886 <_strtod_l+0x45e>
 800dace:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dad0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dad2:	2e00      	cmp	r6, #0
 800dad4:	bfb1      	iteee	lt
 800dad6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800dad8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800dada:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800dadc:	18f3      	addge	r3, r6, r3
 800dade:	bfba      	itte	lt
 800dae0:	1b98      	sublt	r0, r3, r6
 800dae2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dae4:	9308      	strge	r3, [sp, #32]
 800dae6:	eba6 0607 	sub.w	r6, r6, r7
 800daea:	bfb8      	it	lt
 800daec:	9308      	strlt	r3, [sp, #32]
 800daee:	4416      	add	r6, r2
 800daf0:	4b6c      	ldr	r3, [pc, #432]	; (800dca4 <_strtod_l+0x87c>)
 800daf2:	3e01      	subs	r6, #1
 800daf4:	429e      	cmp	r6, r3
 800daf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dafa:	f280 80b4 	bge.w	800dc66 <_strtod_l+0x83e>
 800dafe:	1b9b      	subs	r3, r3, r6
 800db00:	2b1f      	cmp	r3, #31
 800db02:	eba2 0203 	sub.w	r2, r2, r3
 800db06:	f04f 0101 	mov.w	r1, #1
 800db0a:	f300 80a0 	bgt.w	800dc4e <_strtod_l+0x826>
 800db0e:	fa01 f303 	lsl.w	r3, r1, r3
 800db12:	9311      	str	r3, [sp, #68]	; 0x44
 800db14:	2300      	movs	r3, #0
 800db16:	930f      	str	r3, [sp, #60]	; 0x3c
 800db18:	9b08      	ldr	r3, [sp, #32]
 800db1a:	4413      	add	r3, r2
 800db1c:	4402      	add	r2, r0
 800db1e:	18be      	adds	r6, r7, r2
 800db20:	9a08      	ldr	r2, [sp, #32]
 800db22:	429a      	cmp	r2, r3
 800db24:	bfa8      	it	ge
 800db26:	461a      	movge	r2, r3
 800db28:	42b2      	cmp	r2, r6
 800db2a:	bfa8      	it	ge
 800db2c:	4632      	movge	r2, r6
 800db2e:	2a00      	cmp	r2, #0
 800db30:	dd04      	ble.n	800db3c <_strtod_l+0x714>
 800db32:	9908      	ldr	r1, [sp, #32]
 800db34:	1a9b      	subs	r3, r3, r2
 800db36:	1ab6      	subs	r6, r6, r2
 800db38:	1a8a      	subs	r2, r1, r2
 800db3a:	9208      	str	r2, [sp, #32]
 800db3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db3e:	b1c2      	cbz	r2, 800db72 <_strtod_l+0x74a>
 800db40:	4641      	mov	r1, r8
 800db42:	4620      	mov	r0, r4
 800db44:	9315      	str	r3, [sp, #84]	; 0x54
 800db46:	f001 fdb5 	bl	800f6b4 <__pow5mult>
 800db4a:	4680      	mov	r8, r0
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f43f ae9a 	beq.w	800d886 <_strtod_l+0x45e>
 800db52:	4601      	mov	r1, r0
 800db54:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800db56:	4620      	mov	r0, r4
 800db58:	f001 fd15 	bl	800f586 <__multiply>
 800db5c:	900c      	str	r0, [sp, #48]	; 0x30
 800db5e:	2800      	cmp	r0, #0
 800db60:	f43f ae91 	beq.w	800d886 <_strtod_l+0x45e>
 800db64:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db66:	4620      	mov	r0, r4
 800db68:	f001 fc26 	bl	800f3b8 <_Bfree>
 800db6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db70:	9218      	str	r2, [sp, #96]	; 0x60
 800db72:	2b00      	cmp	r3, #0
 800db74:	dc7c      	bgt.n	800dc70 <_strtod_l+0x848>
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	dd08      	ble.n	800db8e <_strtod_l+0x766>
 800db7c:	4649      	mov	r1, r9
 800db7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db80:	4620      	mov	r0, r4
 800db82:	f001 fd97 	bl	800f6b4 <__pow5mult>
 800db86:	4681      	mov	r9, r0
 800db88:	2800      	cmp	r0, #0
 800db8a:	f43f ae7c 	beq.w	800d886 <_strtod_l+0x45e>
 800db8e:	2e00      	cmp	r6, #0
 800db90:	dd08      	ble.n	800dba4 <_strtod_l+0x77c>
 800db92:	4649      	mov	r1, r9
 800db94:	4632      	mov	r2, r6
 800db96:	4620      	mov	r0, r4
 800db98:	f001 fdda 	bl	800f750 <__lshift>
 800db9c:	4681      	mov	r9, r0
 800db9e:	2800      	cmp	r0, #0
 800dba0:	f43f ae71 	beq.w	800d886 <_strtod_l+0x45e>
 800dba4:	9b08      	ldr	r3, [sp, #32]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	dd08      	ble.n	800dbbc <_strtod_l+0x794>
 800dbaa:	4641      	mov	r1, r8
 800dbac:	461a      	mov	r2, r3
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f001 fdce 	bl	800f750 <__lshift>
 800dbb4:	4680      	mov	r8, r0
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	f43f ae65 	beq.w	800d886 <_strtod_l+0x45e>
 800dbbc:	464a      	mov	r2, r9
 800dbbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f001 fe33 	bl	800f82c <__mdiff>
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	f43f ae5c 	beq.w	800d886 <_strtod_l+0x45e>
 800dbce:	68c3      	ldr	r3, [r0, #12]
 800dbd0:	930c      	str	r3, [sp, #48]	; 0x30
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60c3      	str	r3, [r0, #12]
 800dbd6:	4641      	mov	r1, r8
 800dbd8:	f001 fe0e 	bl	800f7f8 <__mcmp>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	da63      	bge.n	800dca8 <_strtod_l+0x880>
 800dbe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbe2:	b9e3      	cbnz	r3, 800dc1e <_strtod_l+0x7f6>
 800dbe4:	f1ba 0f00 	cmp.w	sl, #0
 800dbe8:	d119      	bne.n	800dc1e <_strtod_l+0x7f6>
 800dbea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbee:	b9b3      	cbnz	r3, 800dc1e <_strtod_l+0x7f6>
 800dbf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dbf4:	0d1b      	lsrs	r3, r3, #20
 800dbf6:	051b      	lsls	r3, r3, #20
 800dbf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dbfc:	d90f      	bls.n	800dc1e <_strtod_l+0x7f6>
 800dbfe:	696b      	ldr	r3, [r5, #20]
 800dc00:	b913      	cbnz	r3, 800dc08 <_strtod_l+0x7e0>
 800dc02:	692b      	ldr	r3, [r5, #16]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	dd0a      	ble.n	800dc1e <_strtod_l+0x7f6>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f001 fd9f 	bl	800f750 <__lshift>
 800dc12:	4641      	mov	r1, r8
 800dc14:	4605      	mov	r5, r0
 800dc16:	f001 fdef 	bl	800f7f8 <__mcmp>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	dc75      	bgt.n	800dd0a <_strtod_l+0x8e2>
 800dc1e:	2f00      	cmp	r7, #0
 800dc20:	d17f      	bne.n	800dd22 <_strtod_l+0x8fa>
 800dc22:	e63a      	b.n	800d89a <_strtod_l+0x472>
 800dc24:	07d6      	lsls	r6, r2, #31
 800dc26:	d508      	bpl.n	800dc3a <_strtod_l+0x812>
 800dc28:	ed9d 6b06 	vldr	d6, [sp, #24]
 800dc2c:	ed91 7b00 	vldr	d7, [r1]
 800dc30:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dc34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc38:	2001      	movs	r0, #1
 800dc3a:	1052      	asrs	r2, r2, #1
 800dc3c:	3108      	adds	r1, #8
 800dc3e:	e6db      	b.n	800d9f8 <_strtod_l+0x5d0>
 800dc40:	f04f 31ff 	mov.w	r1, #4294967295
 800dc44:	fa01 f202 	lsl.w	r2, r1, r2
 800dc48:	ea02 0a0a 	and.w	sl, r2, sl
 800dc4c:	e6f3      	b.n	800da36 <_strtod_l+0x60e>
 800dc4e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800dc52:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800dc56:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800dc5a:	36e2      	adds	r6, #226	; 0xe2
 800dc5c:	fa01 f306 	lsl.w	r3, r1, r6
 800dc60:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc62:	9111      	str	r1, [sp, #68]	; 0x44
 800dc64:	e758      	b.n	800db18 <_strtod_l+0x6f0>
 800dc66:	2300      	movs	r3, #0
 800dc68:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	9311      	str	r3, [sp, #68]	; 0x44
 800dc6e:	e753      	b.n	800db18 <_strtod_l+0x6f0>
 800dc70:	461a      	mov	r2, r3
 800dc72:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc74:	4620      	mov	r0, r4
 800dc76:	f001 fd6b 	bl	800f750 <__lshift>
 800dc7a:	9018      	str	r0, [sp, #96]	; 0x60
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	f47f af7a 	bne.w	800db76 <_strtod_l+0x74e>
 800dc82:	e600      	b.n	800d886 <_strtod_l+0x45e>
 800dc84:	f3af 8000 	nop.w
 800dc88:	94a03595 	.word	0x94a03595
 800dc8c:	3fdfffff 	.word	0x3fdfffff
 800dc90:	35afe535 	.word	0x35afe535
 800dc94:	3fe00000 	.word	0x3fe00000
 800dc98:	94a03595 	.word	0x94a03595
 800dc9c:	3fcfffff 	.word	0x3fcfffff
 800dca0:	080101e8 	.word	0x080101e8
 800dca4:	fffffc02 	.word	0xfffffc02
 800dca8:	f8cd b020 	str.w	fp, [sp, #32]
 800dcac:	f040 8085 	bne.w	800ddba <_strtod_l+0x992>
 800dcb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcb6:	b322      	cbz	r2, 800dd02 <_strtod_l+0x8da>
 800dcb8:	4ab7      	ldr	r2, [pc, #732]	; (800df98 <_strtod_l+0xb70>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d154      	bne.n	800dd68 <_strtod_l+0x940>
 800dcbe:	4651      	mov	r1, sl
 800dcc0:	b1e7      	cbz	r7, 800dcfc <_strtod_l+0x8d4>
 800dcc2:	4bb6      	ldr	r3, [pc, #728]	; (800df9c <_strtod_l+0xb74>)
 800dcc4:	465a      	mov	r2, fp
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dccc:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd0:	d803      	bhi.n	800dcda <_strtod_l+0x8b2>
 800dcd2:	0d1b      	lsrs	r3, r3, #20
 800dcd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcd8:	409a      	lsls	r2, r3
 800dcda:	4291      	cmp	r1, r2
 800dcdc:	d144      	bne.n	800dd68 <_strtod_l+0x940>
 800dcde:	4bb0      	ldr	r3, [pc, #704]	; (800dfa0 <_strtod_l+0xb78>)
 800dce0:	9a08      	ldr	r2, [sp, #32]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d102      	bne.n	800dcec <_strtod_l+0x8c4>
 800dce6:	3101      	adds	r1, #1
 800dce8:	f43f adcd 	beq.w	800d886 <_strtod_l+0x45e>
 800dcec:	4bab      	ldr	r3, [pc, #684]	; (800df9c <_strtod_l+0xb74>)
 800dcee:	9a08      	ldr	r2, [sp, #32]
 800dcf0:	401a      	ands	r2, r3
 800dcf2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800dcf6:	f04f 0a00 	mov.w	sl, #0
 800dcfa:	e790      	b.n	800dc1e <_strtod_l+0x7f6>
 800dcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800dd00:	e7eb      	b.n	800dcda <_strtod_l+0x8b2>
 800dd02:	bb8b      	cbnz	r3, 800dd68 <_strtod_l+0x940>
 800dd04:	f1ba 0f00 	cmp.w	sl, #0
 800dd08:	d12e      	bne.n	800dd68 <_strtod_l+0x940>
 800dd0a:	465b      	mov	r3, fp
 800dd0c:	4aa3      	ldr	r2, [pc, #652]	; (800df9c <_strtod_l+0xb74>)
 800dd0e:	b30f      	cbz	r7, 800dd54 <_strtod_l+0x92c>
 800dd10:	ea02 010b 	and.w	r1, r2, fp
 800dd14:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dd18:	dc1c      	bgt.n	800dd54 <_strtod_l+0x92c>
 800dd1a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dd1e:	f77f ae48 	ble.w	800d9b2 <_strtod_l+0x58a>
 800dd22:	4aa0      	ldr	r2, [pc, #640]	; (800dfa4 <_strtod_l+0xb7c>)
 800dd24:	2300      	movs	r3, #0
 800dd26:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800dd2a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800dd2e:	ec4b ab17 	vmov	d7, sl, fp
 800dd32:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd36:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dd3a:	9b05      	ldr	r3, [sp, #20]
 800dd3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f47f adaa 	bne.w	800d89a <_strtod_l+0x472>
 800dd46:	9b04      	ldr	r3, [sp, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f47f ada6 	bne.w	800d89a <_strtod_l+0x472>
 800dd4e:	2322      	movs	r3, #34	; 0x22
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	e5a2      	b.n	800d89a <_strtod_l+0x472>
 800dd54:	4013      	ands	r3, r2
 800dd56:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd5a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd5e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd62:	f04f 3aff 	mov.w	sl, #4294967295
 800dd66:	e75a      	b.n	800dc1e <_strtod_l+0x7f6>
 800dd68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd6a:	b18b      	cbz	r3, 800dd90 <_strtod_l+0x968>
 800dd6c:	9a08      	ldr	r2, [sp, #32]
 800dd6e:	4213      	tst	r3, r2
 800dd70:	f43f af55 	beq.w	800dc1e <_strtod_l+0x7f6>
 800dd74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd76:	463a      	mov	r2, r7
 800dd78:	4650      	mov	r0, sl
 800dd7a:	4659      	mov	r1, fp
 800dd7c:	b163      	cbz	r3, 800dd98 <_strtod_l+0x970>
 800dd7e:	f7ff fb39 	bl	800d3f4 <sulp>
 800dd82:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800dd86:	ee37 7b00 	vadd.f64	d7, d7, d0
 800dd8a:	ec5b ab17 	vmov	sl, fp, d7
 800dd8e:	e746      	b.n	800dc1e <_strtod_l+0x7f6>
 800dd90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd92:	ea13 0f0a 	tst.w	r3, sl
 800dd96:	e7eb      	b.n	800dd70 <_strtod_l+0x948>
 800dd98:	f7ff fb2c 	bl	800d3f4 <sulp>
 800dd9c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800dda0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800dda4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dda8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ddb4:	f43f adfd 	beq.w	800d9b2 <_strtod_l+0x58a>
 800ddb8:	e731      	b.n	800dc1e <_strtod_l+0x7f6>
 800ddba:	4641      	mov	r1, r8
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f001 fe58 	bl	800fa72 <__ratio>
 800ddc2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ddc6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ddca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddce:	d869      	bhi.n	800dea4 <_strtod_l+0xa7c>
 800ddd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d045      	beq.n	800de62 <_strtod_l+0xa3a>
 800ddd6:	4b74      	ldr	r3, [pc, #464]	; (800dfa8 <_strtod_l+0xb80>)
 800ddd8:	2200      	movs	r2, #0
 800ddda:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800ddde:	9808      	ldr	r0, [sp, #32]
 800dde0:	496e      	ldr	r1, [pc, #440]	; (800df9c <_strtod_l+0xb74>)
 800dde2:	ea00 0601 	and.w	r6, r0, r1
 800dde6:	4871      	ldr	r0, [pc, #452]	; (800dfac <_strtod_l+0xb84>)
 800dde8:	4286      	cmp	r6, r0
 800ddea:	f040 8089 	bne.w	800df00 <_strtod_l+0xad8>
 800ddee:	910f      	str	r1, [sp, #60]	; 0x3c
 800ddf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ddf4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800ddf8:	9908      	ldr	r1, [sp, #32]
 800ddfa:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800ddfe:	ec4b ab10 	vmov	d0, sl, fp
 800de02:	ec43 2b1c 	vmov	d12, r2, r3
 800de06:	f001 fd6f 	bl	800f8e8 <__ulp>
 800de0a:	ec4b ab1d 	vmov	d13, sl, fp
 800de0e:	eeac db00 	vfma.f64	d13, d12, d0
 800de12:	ed8d db08 	vstr	d13, [sp, #32]
 800de16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de1a:	4a65      	ldr	r2, [pc, #404]	; (800dfb0 <_strtod_l+0xb88>)
 800de1c:	4019      	ands	r1, r3
 800de1e:	4291      	cmp	r1, r2
 800de20:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800de24:	d948      	bls.n	800deb8 <_strtod_l+0xa90>
 800de26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d103      	bne.n	800de38 <_strtod_l+0xa10>
 800de30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de32:	3301      	adds	r3, #1
 800de34:	f43f ad27 	beq.w	800d886 <_strtod_l+0x45e>
 800de38:	f8df b164 	ldr.w	fp, [pc, #356]	; 800dfa0 <_strtod_l+0xb78>
 800de3c:	f04f 3aff 	mov.w	sl, #4294967295
 800de40:	9918      	ldr	r1, [sp, #96]	; 0x60
 800de42:	4620      	mov	r0, r4
 800de44:	f001 fab8 	bl	800f3b8 <_Bfree>
 800de48:	4649      	mov	r1, r9
 800de4a:	4620      	mov	r0, r4
 800de4c:	f001 fab4 	bl	800f3b8 <_Bfree>
 800de50:	4641      	mov	r1, r8
 800de52:	4620      	mov	r0, r4
 800de54:	f001 fab0 	bl	800f3b8 <_Bfree>
 800de58:	4629      	mov	r1, r5
 800de5a:	4620      	mov	r0, r4
 800de5c:	f001 faac 	bl	800f3b8 <_Bfree>
 800de60:	e60e      	b.n	800da80 <_strtod_l+0x658>
 800de62:	f1ba 0f00 	cmp.w	sl, #0
 800de66:	d113      	bne.n	800de90 <_strtod_l+0xa68>
 800de68:	9b08      	ldr	r3, [sp, #32]
 800de6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de6e:	b9b3      	cbnz	r3, 800de9e <_strtod_l+0xa76>
 800de70:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800de74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800de78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800de80:	d401      	bmi.n	800de86 <_strtod_l+0xa5e>
 800de82:	ee20 8b08 	vmul.f64	d8, d0, d8
 800de86:	eeb1 7b48 	vneg.f64	d7, d8
 800de8a:	ec53 2b17 	vmov	r2, r3, d7
 800de8e:	e7a6      	b.n	800ddde <_strtod_l+0x9b6>
 800de90:	f1ba 0f01 	cmp.w	sl, #1
 800de94:	d103      	bne.n	800de9e <_strtod_l+0xa76>
 800de96:	9b08      	ldr	r3, [sp, #32]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f43f ad8a 	beq.w	800d9b2 <_strtod_l+0x58a>
 800de9e:	2200      	movs	r2, #0
 800dea0:	4b44      	ldr	r3, [pc, #272]	; (800dfb4 <_strtod_l+0xb8c>)
 800dea2:	e79a      	b.n	800ddda <_strtod_l+0x9b2>
 800dea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dea6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800deaa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d0e9      	beq.n	800de86 <_strtod_l+0xa5e>
 800deb2:	ec53 2b18 	vmov	r2, r3, d8
 800deb6:	e792      	b.n	800ddde <_strtod_l+0x9b6>
 800deb8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800debc:	2f00      	cmp	r7, #0
 800debe:	d1bf      	bne.n	800de40 <_strtod_l+0xa18>
 800dec0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dec4:	0d1b      	lsrs	r3, r3, #20
 800dec6:	051b      	lsls	r3, r3, #20
 800dec8:	429e      	cmp	r6, r3
 800deca:	d1b9      	bne.n	800de40 <_strtod_l+0xa18>
 800decc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800ded0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ded2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800ded6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800deda:	b92b      	cbnz	r3, 800dee8 <_strtod_l+0xac0>
 800dedc:	f1ba 0f00 	cmp.w	sl, #0
 800dee0:	d102      	bne.n	800dee8 <_strtod_l+0xac0>
 800dee2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800dee6:	b3d2      	cbz	r2, 800df5e <_strtod_l+0xb36>
 800dee8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800deec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def0:	f53f acd3 	bmi.w	800d89a <_strtod_l+0x472>
 800def4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800def8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defc:	dda0      	ble.n	800de40 <_strtod_l+0xa18>
 800defe:	e4cc      	b.n	800d89a <_strtod_l+0x472>
 800df00:	b1ef      	cbz	r7, 800df3e <_strtod_l+0xb16>
 800df02:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800df06:	d81a      	bhi.n	800df3e <_strtod_l+0xb16>
 800df08:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800df90 <_strtod_l+0xb68>
 800df0c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800df10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df14:	d810      	bhi.n	800df38 <_strtod_l+0xb10>
 800df16:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800df1a:	ee17 3a90 	vmov	r3, s15
 800df1e:	2b00      	cmp	r3, #0
 800df20:	bf08      	it	eq
 800df22:	2301      	moveq	r3, #1
 800df24:	ee07 3a90 	vmov	s15, r3
 800df28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df2a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800df2e:	b99b      	cbnz	r3, 800df58 <_strtod_l+0xb30>
 800df30:	eeb1 7b48 	vneg.f64	d7, d8
 800df34:	ec53 2b17 	vmov	r2, r3, d7
 800df38:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800df3c:	1b8b      	subs	r3, r1, r6
 800df3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800df42:	ec43 2b1c 	vmov	d12, r2, r3
 800df46:	f001 fccf 	bl	800f8e8 <__ulp>
 800df4a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800df4e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800df52:	ec5b ab17 	vmov	sl, fp, d7
 800df56:	e7b1      	b.n	800debc <_strtod_l+0xa94>
 800df58:	ec53 2b18 	vmov	r2, r3, d8
 800df5c:	e7ec      	b.n	800df38 <_strtod_l+0xb10>
 800df5e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800df62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df66:	f57f af6b 	bpl.w	800de40 <_strtod_l+0xa18>
 800df6a:	e496      	b.n	800d89a <_strtod_l+0x472>
 800df6c:	2300      	movs	r3, #0
 800df6e:	930d      	str	r3, [sp, #52]	; 0x34
 800df70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	f7ff ba9d 	b.w	800d4b4 <_strtod_l+0x8c>
 800df7a:	2a65      	cmp	r2, #101	; 0x65
 800df7c:	f04f 0100 	mov.w	r1, #0
 800df80:	f43f ab97 	beq.w	800d6b2 <_strtod_l+0x28a>
 800df84:	2701      	movs	r7, #1
 800df86:	460b      	mov	r3, r1
 800df88:	9704      	str	r7, [sp, #16]
 800df8a:	f7ff bb0a 	b.w	800d5a2 <_strtod_l+0x17a>
 800df8e:	bf00      	nop
 800df90:	ffc00000 	.word	0xffc00000
 800df94:	41dfffff 	.word	0x41dfffff
 800df98:	000fffff 	.word	0x000fffff
 800df9c:	7ff00000 	.word	0x7ff00000
 800dfa0:	7fefffff 	.word	0x7fefffff
 800dfa4:	39500000 	.word	0x39500000
 800dfa8:	3ff00000 	.word	0x3ff00000
 800dfac:	7fe00000 	.word	0x7fe00000
 800dfb0:	7c9fffff 	.word	0x7c9fffff
 800dfb4:	bff00000 	.word	0xbff00000

0800dfb8 <_strtod_r>:
 800dfb8:	4b05      	ldr	r3, [pc, #20]	; (800dfd0 <_strtod_r+0x18>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	b410      	push	{r4}
 800dfbe:	6a1b      	ldr	r3, [r3, #32]
 800dfc0:	4c04      	ldr	r4, [pc, #16]	; (800dfd4 <_strtod_r+0x1c>)
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	bf08      	it	eq
 800dfc6:	4623      	moveq	r3, r4
 800dfc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfcc:	f7ff ba2c 	b.w	800d428 <_strtod_l>
 800dfd0:	200000cc 	.word	0x200000cc
 800dfd4:	20000130 	.word	0x20000130

0800dfd8 <_strtol_l.isra.0>:
 800dfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfdc:	4680      	mov	r8, r0
 800dfde:	4689      	mov	r9, r1
 800dfe0:	4692      	mov	sl, r2
 800dfe2:	461e      	mov	r6, r3
 800dfe4:	460f      	mov	r7, r1
 800dfe6:	463d      	mov	r5, r7
 800dfe8:	9808      	ldr	r0, [sp, #32]
 800dfea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfee:	f001 f981 	bl	800f2f4 <__locale_ctype_ptr_l>
 800dff2:	4420      	add	r0, r4
 800dff4:	7843      	ldrb	r3, [r0, #1]
 800dff6:	f013 0308 	ands.w	r3, r3, #8
 800dffa:	d132      	bne.n	800e062 <_strtol_l.isra.0+0x8a>
 800dffc:	2c2d      	cmp	r4, #45	; 0x2d
 800dffe:	d132      	bne.n	800e066 <_strtol_l.isra.0+0x8e>
 800e000:	787c      	ldrb	r4, [r7, #1]
 800e002:	1cbd      	adds	r5, r7, #2
 800e004:	2201      	movs	r2, #1
 800e006:	2e00      	cmp	r6, #0
 800e008:	d05d      	beq.n	800e0c6 <_strtol_l.isra.0+0xee>
 800e00a:	2e10      	cmp	r6, #16
 800e00c:	d109      	bne.n	800e022 <_strtol_l.isra.0+0x4a>
 800e00e:	2c30      	cmp	r4, #48	; 0x30
 800e010:	d107      	bne.n	800e022 <_strtol_l.isra.0+0x4a>
 800e012:	782b      	ldrb	r3, [r5, #0]
 800e014:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e018:	2b58      	cmp	r3, #88	; 0x58
 800e01a:	d14f      	bne.n	800e0bc <_strtol_l.isra.0+0xe4>
 800e01c:	786c      	ldrb	r4, [r5, #1]
 800e01e:	2610      	movs	r6, #16
 800e020:	3502      	adds	r5, #2
 800e022:	2a00      	cmp	r2, #0
 800e024:	bf14      	ite	ne
 800e026:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e02a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e02e:	2700      	movs	r7, #0
 800e030:	fbb1 fcf6 	udiv	ip, r1, r6
 800e034:	4638      	mov	r0, r7
 800e036:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e03a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e03e:	2b09      	cmp	r3, #9
 800e040:	d817      	bhi.n	800e072 <_strtol_l.isra.0+0x9a>
 800e042:	461c      	mov	r4, r3
 800e044:	42a6      	cmp	r6, r4
 800e046:	dd23      	ble.n	800e090 <_strtol_l.isra.0+0xb8>
 800e048:	1c7b      	adds	r3, r7, #1
 800e04a:	d007      	beq.n	800e05c <_strtol_l.isra.0+0x84>
 800e04c:	4584      	cmp	ip, r0
 800e04e:	d31c      	bcc.n	800e08a <_strtol_l.isra.0+0xb2>
 800e050:	d101      	bne.n	800e056 <_strtol_l.isra.0+0x7e>
 800e052:	45a6      	cmp	lr, r4
 800e054:	db19      	blt.n	800e08a <_strtol_l.isra.0+0xb2>
 800e056:	fb00 4006 	mla	r0, r0, r6, r4
 800e05a:	2701      	movs	r7, #1
 800e05c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e060:	e7eb      	b.n	800e03a <_strtol_l.isra.0+0x62>
 800e062:	462f      	mov	r7, r5
 800e064:	e7bf      	b.n	800dfe6 <_strtol_l.isra.0+0xe>
 800e066:	2c2b      	cmp	r4, #43	; 0x2b
 800e068:	bf04      	itt	eq
 800e06a:	1cbd      	addeq	r5, r7, #2
 800e06c:	787c      	ldrbeq	r4, [r7, #1]
 800e06e:	461a      	mov	r2, r3
 800e070:	e7c9      	b.n	800e006 <_strtol_l.isra.0+0x2e>
 800e072:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e076:	2b19      	cmp	r3, #25
 800e078:	d801      	bhi.n	800e07e <_strtol_l.isra.0+0xa6>
 800e07a:	3c37      	subs	r4, #55	; 0x37
 800e07c:	e7e2      	b.n	800e044 <_strtol_l.isra.0+0x6c>
 800e07e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e082:	2b19      	cmp	r3, #25
 800e084:	d804      	bhi.n	800e090 <_strtol_l.isra.0+0xb8>
 800e086:	3c57      	subs	r4, #87	; 0x57
 800e088:	e7dc      	b.n	800e044 <_strtol_l.isra.0+0x6c>
 800e08a:	f04f 37ff 	mov.w	r7, #4294967295
 800e08e:	e7e5      	b.n	800e05c <_strtol_l.isra.0+0x84>
 800e090:	1c7b      	adds	r3, r7, #1
 800e092:	d108      	bne.n	800e0a6 <_strtol_l.isra.0+0xce>
 800e094:	2322      	movs	r3, #34	; 0x22
 800e096:	f8c8 3000 	str.w	r3, [r8]
 800e09a:	4608      	mov	r0, r1
 800e09c:	f1ba 0f00 	cmp.w	sl, #0
 800e0a0:	d107      	bne.n	800e0b2 <_strtol_l.isra.0+0xda>
 800e0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0a6:	b102      	cbz	r2, 800e0aa <_strtol_l.isra.0+0xd2>
 800e0a8:	4240      	negs	r0, r0
 800e0aa:	f1ba 0f00 	cmp.w	sl, #0
 800e0ae:	d0f8      	beq.n	800e0a2 <_strtol_l.isra.0+0xca>
 800e0b0:	b10f      	cbz	r7, 800e0b6 <_strtol_l.isra.0+0xde>
 800e0b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800e0b6:	f8ca 9000 	str.w	r9, [sl]
 800e0ba:	e7f2      	b.n	800e0a2 <_strtol_l.isra.0+0xca>
 800e0bc:	2430      	movs	r4, #48	; 0x30
 800e0be:	2e00      	cmp	r6, #0
 800e0c0:	d1af      	bne.n	800e022 <_strtol_l.isra.0+0x4a>
 800e0c2:	2608      	movs	r6, #8
 800e0c4:	e7ad      	b.n	800e022 <_strtol_l.isra.0+0x4a>
 800e0c6:	2c30      	cmp	r4, #48	; 0x30
 800e0c8:	d0a3      	beq.n	800e012 <_strtol_l.isra.0+0x3a>
 800e0ca:	260a      	movs	r6, #10
 800e0cc:	e7a9      	b.n	800e022 <_strtol_l.isra.0+0x4a>
	...

0800e0d0 <_strtol_r>:
 800e0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0d2:	4c06      	ldr	r4, [pc, #24]	; (800e0ec <_strtol_r+0x1c>)
 800e0d4:	4d06      	ldr	r5, [pc, #24]	; (800e0f0 <_strtol_r+0x20>)
 800e0d6:	6824      	ldr	r4, [r4, #0]
 800e0d8:	6a24      	ldr	r4, [r4, #32]
 800e0da:	2c00      	cmp	r4, #0
 800e0dc:	bf08      	it	eq
 800e0de:	462c      	moveq	r4, r5
 800e0e0:	9400      	str	r4, [sp, #0]
 800e0e2:	f7ff ff79 	bl	800dfd8 <_strtol_l.isra.0>
 800e0e6:	b003      	add	sp, #12
 800e0e8:	bd30      	pop	{r4, r5, pc}
 800e0ea:	bf00      	nop
 800e0ec:	200000cc 	.word	0x200000cc
 800e0f0:	20000130 	.word	0x20000130

0800e0f4 <quorem>:
 800e0f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f8:	6903      	ldr	r3, [r0, #16]
 800e0fa:	690c      	ldr	r4, [r1, #16]
 800e0fc:	42a3      	cmp	r3, r4
 800e0fe:	4680      	mov	r8, r0
 800e100:	f2c0 8082 	blt.w	800e208 <quorem+0x114>
 800e104:	3c01      	subs	r4, #1
 800e106:	f101 0714 	add.w	r7, r1, #20
 800e10a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e10e:	f100 0614 	add.w	r6, r0, #20
 800e112:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e116:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e11a:	eb06 030c 	add.w	r3, r6, ip
 800e11e:	3501      	adds	r5, #1
 800e120:	eb07 090c 	add.w	r9, r7, ip
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	fbb0 f5f5 	udiv	r5, r0, r5
 800e12a:	b395      	cbz	r5, 800e192 <quorem+0x9e>
 800e12c:	f04f 0a00 	mov.w	sl, #0
 800e130:	4638      	mov	r0, r7
 800e132:	46b6      	mov	lr, r6
 800e134:	46d3      	mov	fp, sl
 800e136:	f850 2b04 	ldr.w	r2, [r0], #4
 800e13a:	b293      	uxth	r3, r2
 800e13c:	fb05 a303 	mla	r3, r5, r3, sl
 800e140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e144:	b29b      	uxth	r3, r3
 800e146:	ebab 0303 	sub.w	r3, fp, r3
 800e14a:	0c12      	lsrs	r2, r2, #16
 800e14c:	f8de b000 	ldr.w	fp, [lr]
 800e150:	fb05 a202 	mla	r2, r5, r2, sl
 800e154:	fa13 f38b 	uxtah	r3, r3, fp
 800e158:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e15c:	fa1f fb82 	uxth.w	fp, r2
 800e160:	f8de 2000 	ldr.w	r2, [lr]
 800e164:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e172:	4581      	cmp	r9, r0
 800e174:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e178:	f84e 3b04 	str.w	r3, [lr], #4
 800e17c:	d2db      	bcs.n	800e136 <quorem+0x42>
 800e17e:	f856 300c 	ldr.w	r3, [r6, ip]
 800e182:	b933      	cbnz	r3, 800e192 <quorem+0x9e>
 800e184:	9b01      	ldr	r3, [sp, #4]
 800e186:	3b04      	subs	r3, #4
 800e188:	429e      	cmp	r6, r3
 800e18a:	461a      	mov	r2, r3
 800e18c:	d330      	bcc.n	800e1f0 <quorem+0xfc>
 800e18e:	f8c8 4010 	str.w	r4, [r8, #16]
 800e192:	4640      	mov	r0, r8
 800e194:	f001 fb30 	bl	800f7f8 <__mcmp>
 800e198:	2800      	cmp	r0, #0
 800e19a:	db25      	blt.n	800e1e8 <quorem+0xf4>
 800e19c:	3501      	adds	r5, #1
 800e19e:	4630      	mov	r0, r6
 800e1a0:	f04f 0c00 	mov.w	ip, #0
 800e1a4:	f857 2b04 	ldr.w	r2, [r7], #4
 800e1a8:	f8d0 e000 	ldr.w	lr, [r0]
 800e1ac:	b293      	uxth	r3, r2
 800e1ae:	ebac 0303 	sub.w	r3, ip, r3
 800e1b2:	0c12      	lsrs	r2, r2, #16
 800e1b4:	fa13 f38e 	uxtah	r3, r3, lr
 800e1b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e1bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1c6:	45b9      	cmp	r9, r7
 800e1c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e1cc:	f840 3b04 	str.w	r3, [r0], #4
 800e1d0:	d2e8      	bcs.n	800e1a4 <quorem+0xb0>
 800e1d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e1d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e1da:	b92a      	cbnz	r2, 800e1e8 <quorem+0xf4>
 800e1dc:	3b04      	subs	r3, #4
 800e1de:	429e      	cmp	r6, r3
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	d30b      	bcc.n	800e1fc <quorem+0x108>
 800e1e4:	f8c8 4010 	str.w	r4, [r8, #16]
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	b003      	add	sp, #12
 800e1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f0:	6812      	ldr	r2, [r2, #0]
 800e1f2:	3b04      	subs	r3, #4
 800e1f4:	2a00      	cmp	r2, #0
 800e1f6:	d1ca      	bne.n	800e18e <quorem+0x9a>
 800e1f8:	3c01      	subs	r4, #1
 800e1fa:	e7c5      	b.n	800e188 <quorem+0x94>
 800e1fc:	6812      	ldr	r2, [r2, #0]
 800e1fe:	3b04      	subs	r3, #4
 800e200:	2a00      	cmp	r2, #0
 800e202:	d1ef      	bne.n	800e1e4 <quorem+0xf0>
 800e204:	3c01      	subs	r4, #1
 800e206:	e7ea      	b.n	800e1de <quorem+0xea>
 800e208:	2000      	movs	r0, #0
 800e20a:	e7ee      	b.n	800e1ea <quorem+0xf6>
 800e20c:	0000      	movs	r0, r0
	...

0800e210 <_dtoa_r>:
 800e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e214:	ec57 6b10 	vmov	r6, r7, d0
 800e218:	b095      	sub	sp, #84	; 0x54
 800e21a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e21c:	9108      	str	r1, [sp, #32]
 800e21e:	4604      	mov	r4, r0
 800e220:	920a      	str	r2, [sp, #40]	; 0x28
 800e222:	9311      	str	r3, [sp, #68]	; 0x44
 800e224:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800e228:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e22c:	b93d      	cbnz	r5, 800e23e <_dtoa_r+0x2e>
 800e22e:	2010      	movs	r0, #16
 800e230:	f001 f874 	bl	800f31c <malloc>
 800e234:	6260      	str	r0, [r4, #36]	; 0x24
 800e236:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e23a:	6005      	str	r5, [r0, #0]
 800e23c:	60c5      	str	r5, [r0, #12]
 800e23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e240:	6819      	ldr	r1, [r3, #0]
 800e242:	b151      	cbz	r1, 800e25a <_dtoa_r+0x4a>
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	604a      	str	r2, [r1, #4]
 800e248:	2301      	movs	r3, #1
 800e24a:	4093      	lsls	r3, r2
 800e24c:	608b      	str	r3, [r1, #8]
 800e24e:	4620      	mov	r0, r4
 800e250:	f001 f8b2 	bl	800f3b8 <_Bfree>
 800e254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	1e3b      	subs	r3, r7, #0
 800e25c:	bfb9      	ittee	lt
 800e25e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e262:	9303      	strlt	r3, [sp, #12]
 800e264:	2300      	movge	r3, #0
 800e266:	f8c8 3000 	strge.w	r3, [r8]
 800e26a:	9d03      	ldr	r5, [sp, #12]
 800e26c:	4bac      	ldr	r3, [pc, #688]	; (800e520 <_dtoa_r+0x310>)
 800e26e:	bfbc      	itt	lt
 800e270:	2201      	movlt	r2, #1
 800e272:	f8c8 2000 	strlt.w	r2, [r8]
 800e276:	43ab      	bics	r3, r5
 800e278:	d11b      	bne.n	800e2b2 <_dtoa_r+0xa2>
 800e27a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e27c:	f242 730f 	movw	r3, #9999	; 0x270f
 800e280:	6013      	str	r3, [r2, #0]
 800e282:	9b02      	ldr	r3, [sp, #8]
 800e284:	b923      	cbnz	r3, 800e290 <_dtoa_r+0x80>
 800e286:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e28a:	2d00      	cmp	r5, #0
 800e28c:	f000 84dd 	beq.w	800ec4a <_dtoa_r+0xa3a>
 800e290:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e292:	b953      	cbnz	r3, 800e2aa <_dtoa_r+0x9a>
 800e294:	4ba3      	ldr	r3, [pc, #652]	; (800e524 <_dtoa_r+0x314>)
 800e296:	e020      	b.n	800e2da <_dtoa_r+0xca>
 800e298:	4ba3      	ldr	r3, [pc, #652]	; (800e528 <_dtoa_r+0x318>)
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	3308      	adds	r3, #8
 800e29e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2a0:	6013      	str	r3, [r2, #0]
 800e2a2:	9804      	ldr	r0, [sp, #16]
 800e2a4:	b015      	add	sp, #84	; 0x54
 800e2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2aa:	4b9e      	ldr	r3, [pc, #632]	; (800e524 <_dtoa_r+0x314>)
 800e2ac:	9304      	str	r3, [sp, #16]
 800e2ae:	3303      	adds	r3, #3
 800e2b0:	e7f5      	b.n	800e29e <_dtoa_r+0x8e>
 800e2b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2be:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e2c2:	d10c      	bne.n	800e2de <_dtoa_r+0xce>
 800e2c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	6013      	str	r3, [r2, #0]
 800e2ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 84b9 	beq.w	800ec44 <_dtoa_r+0xa34>
 800e2d2:	4b96      	ldr	r3, [pc, #600]	; (800e52c <_dtoa_r+0x31c>)
 800e2d4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	9304      	str	r3, [sp, #16]
 800e2dc:	e7e1      	b.n	800e2a2 <_dtoa_r+0x92>
 800e2de:	a913      	add	r1, sp, #76	; 0x4c
 800e2e0:	aa12      	add	r2, sp, #72	; 0x48
 800e2e2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f001 fb74 	bl	800f9d4 <__d2b>
 800e2ec:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800e2f0:	9001      	str	r0, [sp, #4]
 800e2f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e2f4:	2e00      	cmp	r6, #0
 800e2f6:	d046      	beq.n	800e386 <_dtoa_r+0x176>
 800e2f8:	9805      	ldr	r0, [sp, #20]
 800e2fa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e2fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e302:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800e306:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e30a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800e30e:	2700      	movs	r7, #0
 800e310:	ee07 aa90 	vmov	s15, sl
 800e314:	ec43 2b16 	vmov	d6, r2, r3
 800e318:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e31c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800e508 <_dtoa_r+0x2f8>
 800e320:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e324:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e328:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800e510 <_dtoa_r+0x300>
 800e32c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800e330:	eeb0 7b46 	vmov.f64	d7, d6
 800e334:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800e518 <_dtoa_r+0x308>
 800e338:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e33c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e340:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e348:	ee16 ba90 	vmov	fp, s13
 800e34c:	d508      	bpl.n	800e360 <_dtoa_r+0x150>
 800e34e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e352:	eeb4 6b47 	vcmp.f64	d6, d7
 800e356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35a:	bf18      	it	ne
 800e35c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e360:	f1bb 0f16 	cmp.w	fp, #22
 800e364:	d834      	bhi.n	800e3d0 <_dtoa_r+0x1c0>
 800e366:	4b72      	ldr	r3, [pc, #456]	; (800e530 <_dtoa_r+0x320>)
 800e368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e36c:	ed93 7b00 	vldr	d7, [r3]
 800e370:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e374:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37c:	dd01      	ble.n	800e382 <_dtoa_r+0x172>
 800e37e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e382:	2300      	movs	r3, #0
 800e384:	e025      	b.n	800e3d2 <_dtoa_r+0x1c2>
 800e386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e388:	eb01 0a03 	add.w	sl, r1, r3
 800e38c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800e390:	2b20      	cmp	r3, #32
 800e392:	dd17      	ble.n	800e3c4 <_dtoa_r+0x1b4>
 800e394:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800e398:	9a02      	ldr	r2, [sp, #8]
 800e39a:	409d      	lsls	r5, r3
 800e39c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800e3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800e3a4:	432b      	orrs	r3, r5
 800e3a6:	ee07 3a90 	vmov	s15, r3
 800e3aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e3ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e3b6:	9805      	ldr	r0, [sp, #20]
 800e3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3bc:	2701      	movs	r7, #1
 800e3be:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800e3c2:	e7a5      	b.n	800e310 <_dtoa_r+0x100>
 800e3c4:	9a02      	ldr	r2, [sp, #8]
 800e3c6:	f1c3 0320 	rsb	r3, r3, #32
 800e3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e3ce:	e7ea      	b.n	800e3a6 <_dtoa_r+0x196>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	eba1 0a0a 	sub.w	sl, r1, sl
 800e3d6:	9310      	str	r3, [sp, #64]	; 0x40
 800e3d8:	f1ba 0301 	subs.w	r3, sl, #1
 800e3dc:	9307      	str	r3, [sp, #28]
 800e3de:	bf43      	ittte	mi
 800e3e0:	2300      	movmi	r3, #0
 800e3e2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800e3e6:	9307      	strmi	r3, [sp, #28]
 800e3e8:	f04f 0a00 	movpl.w	sl, #0
 800e3ec:	f1bb 0f00 	cmp.w	fp, #0
 800e3f0:	db19      	blt.n	800e426 <_dtoa_r+0x216>
 800e3f2:	9b07      	ldr	r3, [sp, #28]
 800e3f4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e3f8:	445b      	add	r3, fp
 800e3fa:	9307      	str	r3, [sp, #28]
 800e3fc:	f04f 0800 	mov.w	r8, #0
 800e400:	9b08      	ldr	r3, [sp, #32]
 800e402:	2b09      	cmp	r3, #9
 800e404:	d866      	bhi.n	800e4d4 <_dtoa_r+0x2c4>
 800e406:	2b05      	cmp	r3, #5
 800e408:	bfc4      	itt	gt
 800e40a:	3b04      	subgt	r3, #4
 800e40c:	9308      	strgt	r3, [sp, #32]
 800e40e:	9b08      	ldr	r3, [sp, #32]
 800e410:	f1a3 0302 	sub.w	r3, r3, #2
 800e414:	bfcc      	ite	gt
 800e416:	2500      	movgt	r5, #0
 800e418:	2501      	movle	r5, #1
 800e41a:	2b03      	cmp	r3, #3
 800e41c:	d866      	bhi.n	800e4ec <_dtoa_r+0x2dc>
 800e41e:	e8df f003 	tbb	[pc, r3]
 800e422:	5755      	.short	0x5755
 800e424:	4909      	.short	0x4909
 800e426:	2300      	movs	r3, #0
 800e428:	ebaa 0a0b 	sub.w	sl, sl, fp
 800e42c:	f1cb 0800 	rsb	r8, fp, #0
 800e430:	930b      	str	r3, [sp, #44]	; 0x2c
 800e432:	e7e5      	b.n	800e400 <_dtoa_r+0x1f0>
 800e434:	2301      	movs	r3, #1
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	dd59      	ble.n	800e4f2 <_dtoa_r+0x2e2>
 800e43e:	9306      	str	r3, [sp, #24]
 800e440:	4699      	mov	r9, r3
 800e442:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e444:	2200      	movs	r2, #0
 800e446:	6072      	str	r2, [r6, #4]
 800e448:	2204      	movs	r2, #4
 800e44a:	f102 0014 	add.w	r0, r2, #20
 800e44e:	4298      	cmp	r0, r3
 800e450:	6871      	ldr	r1, [r6, #4]
 800e452:	d953      	bls.n	800e4fc <_dtoa_r+0x2ec>
 800e454:	4620      	mov	r0, r4
 800e456:	f000 ff7b 	bl	800f350 <_Balloc>
 800e45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e45c:	6030      	str	r0, [r6, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	9304      	str	r3, [sp, #16]
 800e462:	f1b9 0f0e 	cmp.w	r9, #14
 800e466:	f200 80c2 	bhi.w	800e5ee <_dtoa_r+0x3de>
 800e46a:	2d00      	cmp	r5, #0
 800e46c:	f000 80bf 	beq.w	800e5ee <_dtoa_r+0x3de>
 800e470:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e474:	f1bb 0f00 	cmp.w	fp, #0
 800e478:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800e47c:	f340 80e6 	ble.w	800e64c <_dtoa_r+0x43c>
 800e480:	4a2b      	ldr	r2, [pc, #172]	; (800e530 <_dtoa_r+0x320>)
 800e482:	f00b 030f 	and.w	r3, fp, #15
 800e486:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e48a:	ed93 7b00 	vldr	d7, [r3]
 800e48e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800e492:	06da      	lsls	r2, r3, #27
 800e494:	f140 80d8 	bpl.w	800e648 <_dtoa_r+0x438>
 800e498:	4a26      	ldr	r2, [pc, #152]	; (800e534 <_dtoa_r+0x324>)
 800e49a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800e49e:	ed92 6b08 	vldr	d6, [r2, #32]
 800e4a2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e4a6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e4aa:	f003 030f 	and.w	r3, r3, #15
 800e4ae:	2203      	movs	r2, #3
 800e4b0:	4920      	ldr	r1, [pc, #128]	; (800e534 <_dtoa_r+0x324>)
 800e4b2:	e04a      	b.n	800e54a <_dtoa_r+0x33a>
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4ba:	445b      	add	r3, fp
 800e4bc:	f103 0901 	add.w	r9, r3, #1
 800e4c0:	9306      	str	r3, [sp, #24]
 800e4c2:	464b      	mov	r3, r9
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	bfb8      	it	lt
 800e4c8:	2301      	movlt	r3, #1
 800e4ca:	e7ba      	b.n	800e442 <_dtoa_r+0x232>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	e7b2      	b.n	800e436 <_dtoa_r+0x226>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e7f0      	b.n	800e4b6 <_dtoa_r+0x2a6>
 800e4d4:	2501      	movs	r5, #1
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800e4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e0:	9306      	str	r3, [sp, #24]
 800e4e2:	4699      	mov	r9, r3
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2312      	movs	r3, #18
 800e4e8:	920a      	str	r2, [sp, #40]	; 0x28
 800e4ea:	e7aa      	b.n	800e442 <_dtoa_r+0x232>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f0:	e7f4      	b.n	800e4dc <_dtoa_r+0x2cc>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	9306      	str	r3, [sp, #24]
 800e4f6:	4699      	mov	r9, r3
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	e7f5      	b.n	800e4e8 <_dtoa_r+0x2d8>
 800e4fc:	3101      	adds	r1, #1
 800e4fe:	6071      	str	r1, [r6, #4]
 800e500:	0052      	lsls	r2, r2, #1
 800e502:	e7a2      	b.n	800e44a <_dtoa_r+0x23a>
 800e504:	f3af 8000 	nop.w
 800e508:	636f4361 	.word	0x636f4361
 800e50c:	3fd287a7 	.word	0x3fd287a7
 800e510:	8b60c8b3 	.word	0x8b60c8b3
 800e514:	3fc68a28 	.word	0x3fc68a28
 800e518:	509f79fb 	.word	0x509f79fb
 800e51c:	3fd34413 	.word	0x3fd34413
 800e520:	7ff00000 	.word	0x7ff00000
 800e524:	08010219 	.word	0x08010219
 800e528:	08010210 	.word	0x08010210
 800e52c:	08010195 	.word	0x08010195
 800e530:	08010250 	.word	0x08010250
 800e534:	08010228 	.word	0x08010228
 800e538:	07de      	lsls	r6, r3, #31
 800e53a:	d504      	bpl.n	800e546 <_dtoa_r+0x336>
 800e53c:	ed91 6b00 	vldr	d6, [r1]
 800e540:	3201      	adds	r2, #1
 800e542:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e546:	105b      	asrs	r3, r3, #1
 800e548:	3108      	adds	r1, #8
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1f4      	bne.n	800e538 <_dtoa_r+0x328>
 800e54e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e552:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e556:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e55a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f000 80a7 	beq.w	800e6b0 <_dtoa_r+0x4a0>
 800e562:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e566:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e56a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e572:	f140 809d 	bpl.w	800e6b0 <_dtoa_r+0x4a0>
 800e576:	f1b9 0f00 	cmp.w	r9, #0
 800e57a:	f000 8099 	beq.w	800e6b0 <_dtoa_r+0x4a0>
 800e57e:	9b06      	ldr	r3, [sp, #24]
 800e580:	2b00      	cmp	r3, #0
 800e582:	dd30      	ble.n	800e5e6 <_dtoa_r+0x3d6>
 800e584:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e588:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e58c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e590:	9d06      	ldr	r5, [sp, #24]
 800e592:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e596:	3201      	adds	r2, #1
 800e598:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e59c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e5a0:	ee07 2a90 	vmov	s15, r2
 800e5a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e5a8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e5ac:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e5b0:	9a03      	ldr	r2, [sp, #12]
 800e5b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800e5ba:	2d00      	cmp	r5, #0
 800e5bc:	d17b      	bne.n	800e6b6 <_dtoa_r+0x4a6>
 800e5be:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e5c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e5c6:	ec41 0b17 	vmov	d7, r0, r1
 800e5ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d2:	f300 8253 	bgt.w	800ea7c <_dtoa_r+0x86c>
 800e5d6:	eeb1 7b47 	vneg.f64	d7, d7
 800e5da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e2:	f100 8249 	bmi.w	800ea78 <_dtoa_r+0x868>
 800e5e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e5ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f2c0 8119 	blt.w	800e828 <_dtoa_r+0x618>
 800e5f6:	f1bb 0f0e 	cmp.w	fp, #14
 800e5fa:	f300 8115 	bgt.w	800e828 <_dtoa_r+0x618>
 800e5fe:	4bc3      	ldr	r3, [pc, #780]	; (800e90c <_dtoa_r+0x6fc>)
 800e600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e604:	ed93 6b00 	vldr	d6, [r3]
 800e608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f280 80ba 	bge.w	800e784 <_dtoa_r+0x574>
 800e610:	f1b9 0f00 	cmp.w	r9, #0
 800e614:	f300 80b6 	bgt.w	800e784 <_dtoa_r+0x574>
 800e618:	f040 822d 	bne.w	800ea76 <_dtoa_r+0x866>
 800e61c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e620:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e624:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e628:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e630:	464d      	mov	r5, r9
 800e632:	464f      	mov	r7, r9
 800e634:	f280 8204 	bge.w	800ea40 <_dtoa_r+0x830>
 800e638:	9b04      	ldr	r3, [sp, #16]
 800e63a:	9a04      	ldr	r2, [sp, #16]
 800e63c:	1c5e      	adds	r6, r3, #1
 800e63e:	2331      	movs	r3, #49	; 0x31
 800e640:	7013      	strb	r3, [r2, #0]
 800e642:	f10b 0b01 	add.w	fp, fp, #1
 800e646:	e1ff      	b.n	800ea48 <_dtoa_r+0x838>
 800e648:	2202      	movs	r2, #2
 800e64a:	e731      	b.n	800e4b0 <_dtoa_r+0x2a0>
 800e64c:	d02e      	beq.n	800e6ac <_dtoa_r+0x49c>
 800e64e:	f1cb 0300 	rsb	r3, fp, #0
 800e652:	4aae      	ldr	r2, [pc, #696]	; (800e90c <_dtoa_r+0x6fc>)
 800e654:	f003 010f 	and.w	r1, r3, #15
 800e658:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e65c:	ed92 7b00 	vldr	d7, [r2]
 800e660:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800e664:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e668:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e66c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800e670:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e674:	49a6      	ldr	r1, [pc, #664]	; (800e910 <_dtoa_r+0x700>)
 800e676:	111b      	asrs	r3, r3, #4
 800e678:	2000      	movs	r0, #0
 800e67a:	2202      	movs	r2, #2
 800e67c:	b93b      	cbnz	r3, 800e68e <_dtoa_r+0x47e>
 800e67e:	2800      	cmp	r0, #0
 800e680:	f43f af6b 	beq.w	800e55a <_dtoa_r+0x34a>
 800e684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e68c:	e765      	b.n	800e55a <_dtoa_r+0x34a>
 800e68e:	07dd      	lsls	r5, r3, #31
 800e690:	d509      	bpl.n	800e6a6 <_dtoa_r+0x496>
 800e692:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e696:	ed91 7b00 	vldr	d7, [r1]
 800e69a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e69e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e6a2:	3201      	adds	r2, #1
 800e6a4:	2001      	movs	r0, #1
 800e6a6:	105b      	asrs	r3, r3, #1
 800e6a8:	3108      	adds	r1, #8
 800e6aa:	e7e7      	b.n	800e67c <_dtoa_r+0x46c>
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	e754      	b.n	800e55a <_dtoa_r+0x34a>
 800e6b0:	465b      	mov	r3, fp
 800e6b2:	464d      	mov	r5, r9
 800e6b4:	e770      	b.n	800e598 <_dtoa_r+0x388>
 800e6b6:	4a95      	ldr	r2, [pc, #596]	; (800e90c <_dtoa_r+0x6fc>)
 800e6b8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800e6bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6c2:	ec41 0b17 	vmov	d7, r0, r1
 800e6c6:	b35a      	cbz	r2, 800e720 <_dtoa_r+0x510>
 800e6c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e6cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e6d0:	9e04      	ldr	r6, [sp, #16]
 800e6d2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e6d6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e6da:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e6de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e6e2:	ee14 2a90 	vmov	r2, s9
 800e6e6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e6ea:	3230      	adds	r2, #48	; 0x30
 800e6ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e6f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f8:	f806 2b01 	strb.w	r2, [r6], #1
 800e6fc:	d43b      	bmi.n	800e776 <_dtoa_r+0x566>
 800e6fe:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e702:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70a:	d472      	bmi.n	800e7f2 <_dtoa_r+0x5e2>
 800e70c:	9a04      	ldr	r2, [sp, #16]
 800e70e:	1ab2      	subs	r2, r6, r2
 800e710:	4295      	cmp	r5, r2
 800e712:	f77f af68 	ble.w	800e5e6 <_dtoa_r+0x3d6>
 800e716:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e71a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e71e:	e7de      	b.n	800e6de <_dtoa_r+0x4ce>
 800e720:	9a04      	ldr	r2, [sp, #16]
 800e722:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e726:	1956      	adds	r6, r2, r5
 800e728:	4611      	mov	r1, r2
 800e72a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e72e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e732:	ee14 2a90 	vmov	r2, s9
 800e736:	3230      	adds	r2, #48	; 0x30
 800e738:	f801 2b01 	strb.w	r2, [r1], #1
 800e73c:	42b1      	cmp	r1, r6
 800e73e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e742:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e746:	d11a      	bne.n	800e77e <_dtoa_r+0x56e>
 800e748:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e74c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e750:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e758:	dc4b      	bgt.n	800e7f2 <_dtoa_r+0x5e2>
 800e75a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e75e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e766:	f57f af3e 	bpl.w	800e5e6 <_dtoa_r+0x3d6>
 800e76a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e76e:	2a30      	cmp	r2, #48	; 0x30
 800e770:	f106 31ff 	add.w	r1, r6, #4294967295
 800e774:	d001      	beq.n	800e77a <_dtoa_r+0x56a>
 800e776:	469b      	mov	fp, r3
 800e778:	e02a      	b.n	800e7d0 <_dtoa_r+0x5c0>
 800e77a:	460e      	mov	r6, r1
 800e77c:	e7f5      	b.n	800e76a <_dtoa_r+0x55a>
 800e77e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e782:	e7d4      	b.n	800e72e <_dtoa_r+0x51e>
 800e784:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e788:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e78c:	9e04      	ldr	r6, [sp, #16]
 800e78e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e792:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e796:	ee15 3a10 	vmov	r3, s10
 800e79a:	3330      	adds	r3, #48	; 0x30
 800e79c:	f806 3b01 	strb.w	r3, [r6], #1
 800e7a0:	9b04      	ldr	r3, [sp, #16]
 800e7a2:	1af3      	subs	r3, r6, r3
 800e7a4:	4599      	cmp	r9, r3
 800e7a6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e7aa:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e7ae:	d133      	bne.n	800e818 <_dtoa_r+0x608>
 800e7b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e7b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7bc:	dc18      	bgt.n	800e7f0 <_dtoa_r+0x5e0>
 800e7be:	eeb4 7b46 	vcmp.f64	d7, d6
 800e7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c6:	d103      	bne.n	800e7d0 <_dtoa_r+0x5c0>
 800e7c8:	ee15 3a10 	vmov	r3, s10
 800e7cc:	07db      	lsls	r3, r3, #31
 800e7ce:	d40f      	bmi.n	800e7f0 <_dtoa_r+0x5e0>
 800e7d0:	9901      	ldr	r1, [sp, #4]
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f000 fdf0 	bl	800f3b8 <_Bfree>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e7dc:	7033      	strb	r3, [r6, #0]
 800e7de:	f10b 0301 	add.w	r3, fp, #1
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f43f ad5b 	beq.w	800e2a2 <_dtoa_r+0x92>
 800e7ec:	601e      	str	r6, [r3, #0]
 800e7ee:	e558      	b.n	800e2a2 <_dtoa_r+0x92>
 800e7f0:	465b      	mov	r3, fp
 800e7f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e7f6:	2939      	cmp	r1, #57	; 0x39
 800e7f8:	f106 32ff 	add.w	r2, r6, #4294967295
 800e7fc:	d106      	bne.n	800e80c <_dtoa_r+0x5fc>
 800e7fe:	9904      	ldr	r1, [sp, #16]
 800e800:	4291      	cmp	r1, r2
 800e802:	d107      	bne.n	800e814 <_dtoa_r+0x604>
 800e804:	2230      	movs	r2, #48	; 0x30
 800e806:	700a      	strb	r2, [r1, #0]
 800e808:	3301      	adds	r3, #1
 800e80a:	460a      	mov	r2, r1
 800e80c:	7811      	ldrb	r1, [r2, #0]
 800e80e:	3101      	adds	r1, #1
 800e810:	7011      	strb	r1, [r2, #0]
 800e812:	e7b0      	b.n	800e776 <_dtoa_r+0x566>
 800e814:	4616      	mov	r6, r2
 800e816:	e7ec      	b.n	800e7f2 <_dtoa_r+0x5e2>
 800e818:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e81c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e824:	d1b3      	bne.n	800e78e <_dtoa_r+0x57e>
 800e826:	e7d3      	b.n	800e7d0 <_dtoa_r+0x5c0>
 800e828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e82a:	2a00      	cmp	r2, #0
 800e82c:	f000 808d 	beq.w	800e94a <_dtoa_r+0x73a>
 800e830:	9a08      	ldr	r2, [sp, #32]
 800e832:	2a01      	cmp	r2, #1
 800e834:	dc72      	bgt.n	800e91c <_dtoa_r+0x70c>
 800e836:	2f00      	cmp	r7, #0
 800e838:	d06c      	beq.n	800e914 <_dtoa_r+0x704>
 800e83a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e83e:	4645      	mov	r5, r8
 800e840:	4656      	mov	r6, sl
 800e842:	9a07      	ldr	r2, [sp, #28]
 800e844:	2101      	movs	r1, #1
 800e846:	441a      	add	r2, r3
 800e848:	4620      	mov	r0, r4
 800e84a:	449a      	add	sl, r3
 800e84c:	9207      	str	r2, [sp, #28]
 800e84e:	f000 fe91 	bl	800f574 <__i2b>
 800e852:	4607      	mov	r7, r0
 800e854:	2e00      	cmp	r6, #0
 800e856:	dd0b      	ble.n	800e870 <_dtoa_r+0x660>
 800e858:	9b07      	ldr	r3, [sp, #28]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	dd08      	ble.n	800e870 <_dtoa_r+0x660>
 800e85e:	42b3      	cmp	r3, r6
 800e860:	9a07      	ldr	r2, [sp, #28]
 800e862:	bfa8      	it	ge
 800e864:	4633      	movge	r3, r6
 800e866:	ebaa 0a03 	sub.w	sl, sl, r3
 800e86a:	1af6      	subs	r6, r6, r3
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	9307      	str	r3, [sp, #28]
 800e870:	f1b8 0f00 	cmp.w	r8, #0
 800e874:	d01d      	beq.n	800e8b2 <_dtoa_r+0x6a2>
 800e876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d06a      	beq.n	800e952 <_dtoa_r+0x742>
 800e87c:	b18d      	cbz	r5, 800e8a2 <_dtoa_r+0x692>
 800e87e:	4639      	mov	r1, r7
 800e880:	462a      	mov	r2, r5
 800e882:	4620      	mov	r0, r4
 800e884:	f000 ff16 	bl	800f6b4 <__pow5mult>
 800e888:	9a01      	ldr	r2, [sp, #4]
 800e88a:	4601      	mov	r1, r0
 800e88c:	4607      	mov	r7, r0
 800e88e:	4620      	mov	r0, r4
 800e890:	f000 fe79 	bl	800f586 <__multiply>
 800e894:	9901      	ldr	r1, [sp, #4]
 800e896:	900c      	str	r0, [sp, #48]	; 0x30
 800e898:	4620      	mov	r0, r4
 800e89a:	f000 fd8d 	bl	800f3b8 <_Bfree>
 800e89e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	ebb8 0205 	subs.w	r2, r8, r5
 800e8a6:	d004      	beq.n	800e8b2 <_dtoa_r+0x6a2>
 800e8a8:	9901      	ldr	r1, [sp, #4]
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f000 ff02 	bl	800f6b4 <__pow5mult>
 800e8b0:	9001      	str	r0, [sp, #4]
 800e8b2:	2101      	movs	r1, #1
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f000 fe5d 	bl	800f574 <__i2b>
 800e8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8bc:	4605      	mov	r5, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 81ca 	beq.w	800ec58 <_dtoa_r+0xa48>
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	4601      	mov	r1, r0
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f000 fef3 	bl	800f6b4 <__pow5mult>
 800e8ce:	9b08      	ldr	r3, [sp, #32]
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	4605      	mov	r5, r0
 800e8d4:	dc44      	bgt.n	800e960 <_dtoa_r+0x750>
 800e8d6:	9b02      	ldr	r3, [sp, #8]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d13c      	bne.n	800e956 <_dtoa_r+0x746>
 800e8dc:	9b03      	ldr	r3, [sp, #12]
 800e8de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d137      	bne.n	800e956 <_dtoa_r+0x746>
 800e8e6:	9b03      	ldr	r3, [sp, #12]
 800e8e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e8ec:	0d1b      	lsrs	r3, r3, #20
 800e8ee:	051b      	lsls	r3, r3, #20
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d033      	beq.n	800e95c <_dtoa_r+0x74c>
 800e8f4:	9b07      	ldr	r3, [sp, #28]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	f10a 0a01 	add.w	sl, sl, #1
 800e8fc:	9307      	str	r3, [sp, #28]
 800e8fe:	f04f 0801 	mov.w	r8, #1
 800e902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e904:	bb73      	cbnz	r3, 800e964 <_dtoa_r+0x754>
 800e906:	2001      	movs	r0, #1
 800e908:	e034      	b.n	800e974 <_dtoa_r+0x764>
 800e90a:	bf00      	nop
 800e90c:	08010250 	.word	0x08010250
 800e910:	08010228 	.word	0x08010228
 800e914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e916:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e91a:	e790      	b.n	800e83e <_dtoa_r+0x62e>
 800e91c:	f109 35ff 	add.w	r5, r9, #4294967295
 800e920:	45a8      	cmp	r8, r5
 800e922:	bfbf      	itttt	lt
 800e924:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800e926:	eba5 0808 	sublt.w	r8, r5, r8
 800e92a:	4443      	addlt	r3, r8
 800e92c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800e92e:	bfb6      	itet	lt
 800e930:	46a8      	movlt	r8, r5
 800e932:	eba8 0505 	subge.w	r5, r8, r5
 800e936:	2500      	movlt	r5, #0
 800e938:	f1b9 0f00 	cmp.w	r9, #0
 800e93c:	bfb9      	ittee	lt
 800e93e:	ebaa 0609 	sublt.w	r6, sl, r9
 800e942:	2300      	movlt	r3, #0
 800e944:	4656      	movge	r6, sl
 800e946:	464b      	movge	r3, r9
 800e948:	e77b      	b.n	800e842 <_dtoa_r+0x632>
 800e94a:	4645      	mov	r5, r8
 800e94c:	4656      	mov	r6, sl
 800e94e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e950:	e780      	b.n	800e854 <_dtoa_r+0x644>
 800e952:	4642      	mov	r2, r8
 800e954:	e7a8      	b.n	800e8a8 <_dtoa_r+0x698>
 800e956:	f04f 0800 	mov.w	r8, #0
 800e95a:	e7d2      	b.n	800e902 <_dtoa_r+0x6f2>
 800e95c:	4698      	mov	r8, r3
 800e95e:	e7d0      	b.n	800e902 <_dtoa_r+0x6f2>
 800e960:	f04f 0800 	mov.w	r8, #0
 800e964:	692b      	ldr	r3, [r5, #16]
 800e966:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e96a:	6918      	ldr	r0, [r3, #16]
 800e96c:	f000 fdb4 	bl	800f4d8 <__hi0bits>
 800e970:	f1c0 0020 	rsb	r0, r0, #32
 800e974:	9b07      	ldr	r3, [sp, #28]
 800e976:	4418      	add	r0, r3
 800e978:	f010 001f 	ands.w	r0, r0, #31
 800e97c:	d047      	beq.n	800ea0e <_dtoa_r+0x7fe>
 800e97e:	f1c0 0320 	rsb	r3, r0, #32
 800e982:	2b04      	cmp	r3, #4
 800e984:	dd3b      	ble.n	800e9fe <_dtoa_r+0x7ee>
 800e986:	9b07      	ldr	r3, [sp, #28]
 800e988:	f1c0 001c 	rsb	r0, r0, #28
 800e98c:	4482      	add	sl, r0
 800e98e:	4406      	add	r6, r0
 800e990:	4403      	add	r3, r0
 800e992:	9307      	str	r3, [sp, #28]
 800e994:	f1ba 0f00 	cmp.w	sl, #0
 800e998:	dd05      	ble.n	800e9a6 <_dtoa_r+0x796>
 800e99a:	4652      	mov	r2, sl
 800e99c:	9901      	ldr	r1, [sp, #4]
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f000 fed6 	bl	800f750 <__lshift>
 800e9a4:	9001      	str	r0, [sp, #4]
 800e9a6:	9b07      	ldr	r3, [sp, #28]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	dd05      	ble.n	800e9b8 <_dtoa_r+0x7a8>
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f000 fecd 	bl	800f750 <__lshift>
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9ba:	b353      	cbz	r3, 800ea12 <_dtoa_r+0x802>
 800e9bc:	4629      	mov	r1, r5
 800e9be:	9801      	ldr	r0, [sp, #4]
 800e9c0:	f000 ff1a 	bl	800f7f8 <__mcmp>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	da24      	bge.n	800ea12 <_dtoa_r+0x802>
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	220a      	movs	r2, #10
 800e9cc:	9901      	ldr	r1, [sp, #4]
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f000 fd09 	bl	800f3e6 <__multadd>
 800e9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d6:	9001      	str	r0, [sp, #4]
 800e9d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f000 8142 	beq.w	800ec66 <_dtoa_r+0xa56>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	220a      	movs	r2, #10
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f000 fcfc 	bl	800f3e6 <__multadd>
 800e9ee:	9b06      	ldr	r3, [sp, #24]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	4607      	mov	r7, r0
 800e9f4:	dc4b      	bgt.n	800ea8e <_dtoa_r+0x87e>
 800e9f6:	9b08      	ldr	r3, [sp, #32]
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	dd48      	ble.n	800ea8e <_dtoa_r+0x87e>
 800e9fc:	e011      	b.n	800ea22 <_dtoa_r+0x812>
 800e9fe:	d0c9      	beq.n	800e994 <_dtoa_r+0x784>
 800ea00:	9a07      	ldr	r2, [sp, #28]
 800ea02:	331c      	adds	r3, #28
 800ea04:	441a      	add	r2, r3
 800ea06:	449a      	add	sl, r3
 800ea08:	441e      	add	r6, r3
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	e7c1      	b.n	800e992 <_dtoa_r+0x782>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	e7f6      	b.n	800ea00 <_dtoa_r+0x7f0>
 800ea12:	f1b9 0f00 	cmp.w	r9, #0
 800ea16:	dc34      	bgt.n	800ea82 <_dtoa_r+0x872>
 800ea18:	9b08      	ldr	r3, [sp, #32]
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	dd31      	ble.n	800ea82 <_dtoa_r+0x872>
 800ea1e:	f8cd 9018 	str.w	r9, [sp, #24]
 800ea22:	9b06      	ldr	r3, [sp, #24]
 800ea24:	b963      	cbnz	r3, 800ea40 <_dtoa_r+0x830>
 800ea26:	4629      	mov	r1, r5
 800ea28:	2205      	movs	r2, #5
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f000 fcdb 	bl	800f3e6 <__multadd>
 800ea30:	4601      	mov	r1, r0
 800ea32:	4605      	mov	r5, r0
 800ea34:	9801      	ldr	r0, [sp, #4]
 800ea36:	f000 fedf 	bl	800f7f8 <__mcmp>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	f73f adfc 	bgt.w	800e638 <_dtoa_r+0x428>
 800ea40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea42:	9e04      	ldr	r6, [sp, #16]
 800ea44:	ea6f 0b03 	mvn.w	fp, r3
 800ea48:	f04f 0900 	mov.w	r9, #0
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fcb2 	bl	800f3b8 <_Bfree>
 800ea54:	2f00      	cmp	r7, #0
 800ea56:	f43f aebb 	beq.w	800e7d0 <_dtoa_r+0x5c0>
 800ea5a:	f1b9 0f00 	cmp.w	r9, #0
 800ea5e:	d005      	beq.n	800ea6c <_dtoa_r+0x85c>
 800ea60:	45b9      	cmp	r9, r7
 800ea62:	d003      	beq.n	800ea6c <_dtoa_r+0x85c>
 800ea64:	4649      	mov	r1, r9
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 fca6 	bl	800f3b8 <_Bfree>
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f000 fca2 	bl	800f3b8 <_Bfree>
 800ea74:	e6ac      	b.n	800e7d0 <_dtoa_r+0x5c0>
 800ea76:	2500      	movs	r5, #0
 800ea78:	462f      	mov	r7, r5
 800ea7a:	e7e1      	b.n	800ea40 <_dtoa_r+0x830>
 800ea7c:	469b      	mov	fp, r3
 800ea7e:	462f      	mov	r7, r5
 800ea80:	e5da      	b.n	800e638 <_dtoa_r+0x428>
 800ea82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea84:	f8cd 9018 	str.w	r9, [sp, #24]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	f000 80f3 	beq.w	800ec74 <_dtoa_r+0xa64>
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	dd05      	ble.n	800ea9e <_dtoa_r+0x88e>
 800ea92:	4639      	mov	r1, r7
 800ea94:	4632      	mov	r2, r6
 800ea96:	4620      	mov	r0, r4
 800ea98:	f000 fe5a 	bl	800f750 <__lshift>
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	f1b8 0f00 	cmp.w	r8, #0
 800eaa2:	d04c      	beq.n	800eb3e <_dtoa_r+0x92e>
 800eaa4:	6879      	ldr	r1, [r7, #4]
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f000 fc52 	bl	800f350 <_Balloc>
 800eaac:	693a      	ldr	r2, [r7, #16]
 800eaae:	3202      	adds	r2, #2
 800eab0:	4606      	mov	r6, r0
 800eab2:	0092      	lsls	r2, r2, #2
 800eab4:	f107 010c 	add.w	r1, r7, #12
 800eab8:	300c      	adds	r0, #12
 800eaba:	f7fd fe51 	bl	800c760 <memcpy>
 800eabe:	2201      	movs	r2, #1
 800eac0:	4631      	mov	r1, r6
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 fe44 	bl	800f750 <__lshift>
 800eac8:	9b02      	ldr	r3, [sp, #8]
 800eaca:	f8dd a010 	ldr.w	sl, [sp, #16]
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	46b9      	mov	r9, r7
 800ead4:	9307      	str	r3, [sp, #28]
 800ead6:	4607      	mov	r7, r0
 800ead8:	4629      	mov	r1, r5
 800eada:	9801      	ldr	r0, [sp, #4]
 800eadc:	f7ff fb0a 	bl	800e0f4 <quorem>
 800eae0:	4649      	mov	r1, r9
 800eae2:	4606      	mov	r6, r0
 800eae4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800eae8:	9801      	ldr	r0, [sp, #4]
 800eaea:	f000 fe85 	bl	800f7f8 <__mcmp>
 800eaee:	463a      	mov	r2, r7
 800eaf0:	9002      	str	r0, [sp, #8]
 800eaf2:	4629      	mov	r1, r5
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f000 fe99 	bl	800f82c <__mdiff>
 800eafa:	68c3      	ldr	r3, [r0, #12]
 800eafc:	4602      	mov	r2, r0
 800eafe:	bb03      	cbnz	r3, 800eb42 <_dtoa_r+0x932>
 800eb00:	4601      	mov	r1, r0
 800eb02:	9009      	str	r0, [sp, #36]	; 0x24
 800eb04:	9801      	ldr	r0, [sp, #4]
 800eb06:	f000 fe77 	bl	800f7f8 <__mcmp>
 800eb0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	4611      	mov	r1, r2
 800eb10:	4620      	mov	r0, r4
 800eb12:	9309      	str	r3, [sp, #36]	; 0x24
 800eb14:	f000 fc50 	bl	800f3b8 <_Bfree>
 800eb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb1a:	b9a3      	cbnz	r3, 800eb46 <_dtoa_r+0x936>
 800eb1c:	9a08      	ldr	r2, [sp, #32]
 800eb1e:	b992      	cbnz	r2, 800eb46 <_dtoa_r+0x936>
 800eb20:	9a07      	ldr	r2, [sp, #28]
 800eb22:	b982      	cbnz	r2, 800eb46 <_dtoa_r+0x936>
 800eb24:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eb28:	d029      	beq.n	800eb7e <_dtoa_r+0x96e>
 800eb2a:	9b02      	ldr	r3, [sp, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	dd01      	ble.n	800eb34 <_dtoa_r+0x924>
 800eb30:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800eb34:	f10a 0601 	add.w	r6, sl, #1
 800eb38:	f88a 8000 	strb.w	r8, [sl]
 800eb3c:	e786      	b.n	800ea4c <_dtoa_r+0x83c>
 800eb3e:	4638      	mov	r0, r7
 800eb40:	e7c2      	b.n	800eac8 <_dtoa_r+0x8b8>
 800eb42:	2301      	movs	r3, #1
 800eb44:	e7e3      	b.n	800eb0e <_dtoa_r+0x8fe>
 800eb46:	9a02      	ldr	r2, [sp, #8]
 800eb48:	2a00      	cmp	r2, #0
 800eb4a:	db04      	blt.n	800eb56 <_dtoa_r+0x946>
 800eb4c:	d124      	bne.n	800eb98 <_dtoa_r+0x988>
 800eb4e:	9a08      	ldr	r2, [sp, #32]
 800eb50:	bb12      	cbnz	r2, 800eb98 <_dtoa_r+0x988>
 800eb52:	9a07      	ldr	r2, [sp, #28]
 800eb54:	bb02      	cbnz	r2, 800eb98 <_dtoa_r+0x988>
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	ddec      	ble.n	800eb34 <_dtoa_r+0x924>
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	9901      	ldr	r1, [sp, #4]
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f000 fdf6 	bl	800f750 <__lshift>
 800eb64:	4629      	mov	r1, r5
 800eb66:	9001      	str	r0, [sp, #4]
 800eb68:	f000 fe46 	bl	800f7f8 <__mcmp>
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	dc03      	bgt.n	800eb78 <_dtoa_r+0x968>
 800eb70:	d1e0      	bne.n	800eb34 <_dtoa_r+0x924>
 800eb72:	f018 0f01 	tst.w	r8, #1
 800eb76:	d0dd      	beq.n	800eb34 <_dtoa_r+0x924>
 800eb78:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eb7c:	d1d8      	bne.n	800eb30 <_dtoa_r+0x920>
 800eb7e:	2339      	movs	r3, #57	; 0x39
 800eb80:	f10a 0601 	add.w	r6, sl, #1
 800eb84:	f88a 3000 	strb.w	r3, [sl]
 800eb88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb8c:	2b39      	cmp	r3, #57	; 0x39
 800eb8e:	f106 32ff 	add.w	r2, r6, #4294967295
 800eb92:	d04c      	beq.n	800ec2e <_dtoa_r+0xa1e>
 800eb94:	3301      	adds	r3, #1
 800eb96:	e051      	b.n	800ec3c <_dtoa_r+0xa2c>
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f10a 0601 	add.w	r6, sl, #1
 800eb9e:	dd05      	ble.n	800ebac <_dtoa_r+0x99c>
 800eba0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eba4:	d0eb      	beq.n	800eb7e <_dtoa_r+0x96e>
 800eba6:	f108 0801 	add.w	r8, r8, #1
 800ebaa:	e7c5      	b.n	800eb38 <_dtoa_r+0x928>
 800ebac:	9b04      	ldr	r3, [sp, #16]
 800ebae:	9a06      	ldr	r2, [sp, #24]
 800ebb0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800ebb4:	1af3      	subs	r3, r6, r3
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d021      	beq.n	800ebfe <_dtoa_r+0x9ee>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	220a      	movs	r2, #10
 800ebbe:	9901      	ldr	r1, [sp, #4]
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 fc10 	bl	800f3e6 <__multadd>
 800ebc6:	45b9      	cmp	r9, r7
 800ebc8:	9001      	str	r0, [sp, #4]
 800ebca:	f04f 0300 	mov.w	r3, #0
 800ebce:	f04f 020a 	mov.w	r2, #10
 800ebd2:	4649      	mov	r1, r9
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	d105      	bne.n	800ebe4 <_dtoa_r+0x9d4>
 800ebd8:	f000 fc05 	bl	800f3e6 <__multadd>
 800ebdc:	4681      	mov	r9, r0
 800ebde:	4607      	mov	r7, r0
 800ebe0:	46b2      	mov	sl, r6
 800ebe2:	e779      	b.n	800ead8 <_dtoa_r+0x8c8>
 800ebe4:	f000 fbff 	bl	800f3e6 <__multadd>
 800ebe8:	4639      	mov	r1, r7
 800ebea:	4681      	mov	r9, r0
 800ebec:	2300      	movs	r3, #0
 800ebee:	220a      	movs	r2, #10
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f000 fbf8 	bl	800f3e6 <__multadd>
 800ebf6:	4607      	mov	r7, r0
 800ebf8:	e7f2      	b.n	800ebe0 <_dtoa_r+0x9d0>
 800ebfa:	f04f 0900 	mov.w	r9, #0
 800ebfe:	2201      	movs	r2, #1
 800ec00:	9901      	ldr	r1, [sp, #4]
 800ec02:	4620      	mov	r0, r4
 800ec04:	f000 fda4 	bl	800f750 <__lshift>
 800ec08:	4629      	mov	r1, r5
 800ec0a:	9001      	str	r0, [sp, #4]
 800ec0c:	f000 fdf4 	bl	800f7f8 <__mcmp>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	dcb9      	bgt.n	800eb88 <_dtoa_r+0x978>
 800ec14:	d102      	bne.n	800ec1c <_dtoa_r+0xa0c>
 800ec16:	f018 0f01 	tst.w	r8, #1
 800ec1a:	d1b5      	bne.n	800eb88 <_dtoa_r+0x978>
 800ec1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec20:	2b30      	cmp	r3, #48	; 0x30
 800ec22:	f106 32ff 	add.w	r2, r6, #4294967295
 800ec26:	f47f af11 	bne.w	800ea4c <_dtoa_r+0x83c>
 800ec2a:	4616      	mov	r6, r2
 800ec2c:	e7f6      	b.n	800ec1c <_dtoa_r+0xa0c>
 800ec2e:	9b04      	ldr	r3, [sp, #16]
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d105      	bne.n	800ec40 <_dtoa_r+0xa30>
 800ec34:	9a04      	ldr	r2, [sp, #16]
 800ec36:	f10b 0b01 	add.w	fp, fp, #1
 800ec3a:	2331      	movs	r3, #49	; 0x31
 800ec3c:	7013      	strb	r3, [r2, #0]
 800ec3e:	e705      	b.n	800ea4c <_dtoa_r+0x83c>
 800ec40:	4616      	mov	r6, r2
 800ec42:	e7a1      	b.n	800eb88 <_dtoa_r+0x978>
 800ec44:	4b16      	ldr	r3, [pc, #88]	; (800eca0 <_dtoa_r+0xa90>)
 800ec46:	f7ff bb48 	b.w	800e2da <_dtoa_r+0xca>
 800ec4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f47f ab23 	bne.w	800e298 <_dtoa_r+0x88>
 800ec52:	4b14      	ldr	r3, [pc, #80]	; (800eca4 <_dtoa_r+0xa94>)
 800ec54:	f7ff bb41 	b.w	800e2da <_dtoa_r+0xca>
 800ec58:	9b08      	ldr	r3, [sp, #32]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	f77f ae3b 	ble.w	800e8d6 <_dtoa_r+0x6c6>
 800ec60:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ec64:	e64f      	b.n	800e906 <_dtoa_r+0x6f6>
 800ec66:	9b06      	ldr	r3, [sp, #24]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	dc03      	bgt.n	800ec74 <_dtoa_r+0xa64>
 800ec6c:	9b08      	ldr	r3, [sp, #32]
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	f73f aed7 	bgt.w	800ea22 <_dtoa_r+0x812>
 800ec74:	9e04      	ldr	r6, [sp, #16]
 800ec76:	9801      	ldr	r0, [sp, #4]
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7ff fa3b 	bl	800e0f4 <quorem>
 800ec7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ec82:	f806 8b01 	strb.w	r8, [r6], #1
 800ec86:	9b04      	ldr	r3, [sp, #16]
 800ec88:	9a06      	ldr	r2, [sp, #24]
 800ec8a:	1af3      	subs	r3, r6, r3
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	ddb4      	ble.n	800ebfa <_dtoa_r+0x9ea>
 800ec90:	2300      	movs	r3, #0
 800ec92:	220a      	movs	r2, #10
 800ec94:	9901      	ldr	r1, [sp, #4]
 800ec96:	4620      	mov	r0, r4
 800ec98:	f000 fba5 	bl	800f3e6 <__multadd>
 800ec9c:	9001      	str	r0, [sp, #4]
 800ec9e:	e7ea      	b.n	800ec76 <_dtoa_r+0xa66>
 800eca0:	08010194 	.word	0x08010194
 800eca4:	08010210 	.word	0x08010210

0800eca8 <rshift>:
 800eca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecaa:	6906      	ldr	r6, [r0, #16]
 800ecac:	114b      	asrs	r3, r1, #5
 800ecae:	429e      	cmp	r6, r3
 800ecb0:	f100 0414 	add.w	r4, r0, #20
 800ecb4:	dd30      	ble.n	800ed18 <rshift+0x70>
 800ecb6:	f011 011f 	ands.w	r1, r1, #31
 800ecba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ecbe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ecc2:	d108      	bne.n	800ecd6 <rshift+0x2e>
 800ecc4:	4621      	mov	r1, r4
 800ecc6:	42b2      	cmp	r2, r6
 800ecc8:	460b      	mov	r3, r1
 800ecca:	d211      	bcs.n	800ecf0 <rshift+0x48>
 800eccc:	f852 3b04 	ldr.w	r3, [r2], #4
 800ecd0:	f841 3b04 	str.w	r3, [r1], #4
 800ecd4:	e7f7      	b.n	800ecc6 <rshift+0x1e>
 800ecd6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ecda:	f1c1 0c20 	rsb	ip, r1, #32
 800ecde:	40cd      	lsrs	r5, r1
 800ece0:	3204      	adds	r2, #4
 800ece2:	4623      	mov	r3, r4
 800ece4:	42b2      	cmp	r2, r6
 800ece6:	4617      	mov	r7, r2
 800ece8:	d30c      	bcc.n	800ed04 <rshift+0x5c>
 800ecea:	601d      	str	r5, [r3, #0]
 800ecec:	b105      	cbz	r5, 800ecf0 <rshift+0x48>
 800ecee:	3304      	adds	r3, #4
 800ecf0:	1b1a      	subs	r2, r3, r4
 800ecf2:	42a3      	cmp	r3, r4
 800ecf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ecf8:	bf08      	it	eq
 800ecfa:	2300      	moveq	r3, #0
 800ecfc:	6102      	str	r2, [r0, #16]
 800ecfe:	bf08      	it	eq
 800ed00:	6143      	streq	r3, [r0, #20]
 800ed02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed04:	683f      	ldr	r7, [r7, #0]
 800ed06:	fa07 f70c 	lsl.w	r7, r7, ip
 800ed0a:	433d      	orrs	r5, r7
 800ed0c:	f843 5b04 	str.w	r5, [r3], #4
 800ed10:	f852 5b04 	ldr.w	r5, [r2], #4
 800ed14:	40cd      	lsrs	r5, r1
 800ed16:	e7e5      	b.n	800ece4 <rshift+0x3c>
 800ed18:	4623      	mov	r3, r4
 800ed1a:	e7e9      	b.n	800ecf0 <rshift+0x48>

0800ed1c <__hexdig_fun>:
 800ed1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ed20:	2b09      	cmp	r3, #9
 800ed22:	d802      	bhi.n	800ed2a <__hexdig_fun+0xe>
 800ed24:	3820      	subs	r0, #32
 800ed26:	b2c0      	uxtb	r0, r0
 800ed28:	4770      	bx	lr
 800ed2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ed2e:	2b05      	cmp	r3, #5
 800ed30:	d801      	bhi.n	800ed36 <__hexdig_fun+0x1a>
 800ed32:	3847      	subs	r0, #71	; 0x47
 800ed34:	e7f7      	b.n	800ed26 <__hexdig_fun+0xa>
 800ed36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ed3a:	2b05      	cmp	r3, #5
 800ed3c:	d801      	bhi.n	800ed42 <__hexdig_fun+0x26>
 800ed3e:	3827      	subs	r0, #39	; 0x27
 800ed40:	e7f1      	b.n	800ed26 <__hexdig_fun+0xa>
 800ed42:	2000      	movs	r0, #0
 800ed44:	4770      	bx	lr

0800ed46 <__gethex>:
 800ed46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed4a:	b08b      	sub	sp, #44	; 0x2c
 800ed4c:	468a      	mov	sl, r1
 800ed4e:	9002      	str	r0, [sp, #8]
 800ed50:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ed52:	9306      	str	r3, [sp, #24]
 800ed54:	4690      	mov	r8, r2
 800ed56:	f000 fad0 	bl	800f2fa <__localeconv_l>
 800ed5a:	6803      	ldr	r3, [r0, #0]
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f1 fa6e 	bl	8000240 <strlen>
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	9001      	str	r0, [sp, #4]
 800ed68:	4403      	add	r3, r0
 800ed6a:	f04f 0b00 	mov.w	fp, #0
 800ed6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ed72:	9307      	str	r3, [sp, #28]
 800ed74:	f8da 3000 	ldr.w	r3, [sl]
 800ed78:	3302      	adds	r3, #2
 800ed7a:	461f      	mov	r7, r3
 800ed7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ed80:	2830      	cmp	r0, #48	; 0x30
 800ed82:	d06c      	beq.n	800ee5e <__gethex+0x118>
 800ed84:	f7ff ffca 	bl	800ed1c <__hexdig_fun>
 800ed88:	4604      	mov	r4, r0
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d16a      	bne.n	800ee64 <__gethex+0x11e>
 800ed8e:	9a01      	ldr	r2, [sp, #4]
 800ed90:	9903      	ldr	r1, [sp, #12]
 800ed92:	4638      	mov	r0, r7
 800ed94:	f001 f8f4 	bl	800ff80 <strncmp>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d166      	bne.n	800ee6a <__gethex+0x124>
 800ed9c:	9b01      	ldr	r3, [sp, #4]
 800ed9e:	5cf8      	ldrb	r0, [r7, r3]
 800eda0:	18fe      	adds	r6, r7, r3
 800eda2:	f7ff ffbb 	bl	800ed1c <__hexdig_fun>
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d062      	beq.n	800ee70 <__gethex+0x12a>
 800edaa:	4633      	mov	r3, r6
 800edac:	7818      	ldrb	r0, [r3, #0]
 800edae:	2830      	cmp	r0, #48	; 0x30
 800edb0:	461f      	mov	r7, r3
 800edb2:	f103 0301 	add.w	r3, r3, #1
 800edb6:	d0f9      	beq.n	800edac <__gethex+0x66>
 800edb8:	f7ff ffb0 	bl	800ed1c <__hexdig_fun>
 800edbc:	fab0 f580 	clz	r5, r0
 800edc0:	096d      	lsrs	r5, r5, #5
 800edc2:	4634      	mov	r4, r6
 800edc4:	f04f 0b01 	mov.w	fp, #1
 800edc8:	463a      	mov	r2, r7
 800edca:	4616      	mov	r6, r2
 800edcc:	3201      	adds	r2, #1
 800edce:	7830      	ldrb	r0, [r6, #0]
 800edd0:	f7ff ffa4 	bl	800ed1c <__hexdig_fun>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	d1f8      	bne.n	800edca <__gethex+0x84>
 800edd8:	9a01      	ldr	r2, [sp, #4]
 800edda:	9903      	ldr	r1, [sp, #12]
 800eddc:	4630      	mov	r0, r6
 800edde:	f001 f8cf 	bl	800ff80 <strncmp>
 800ede2:	b950      	cbnz	r0, 800edfa <__gethex+0xb4>
 800ede4:	b954      	cbnz	r4, 800edfc <__gethex+0xb6>
 800ede6:	9b01      	ldr	r3, [sp, #4]
 800ede8:	18f4      	adds	r4, r6, r3
 800edea:	4622      	mov	r2, r4
 800edec:	4616      	mov	r6, r2
 800edee:	3201      	adds	r2, #1
 800edf0:	7830      	ldrb	r0, [r6, #0]
 800edf2:	f7ff ff93 	bl	800ed1c <__hexdig_fun>
 800edf6:	2800      	cmp	r0, #0
 800edf8:	d1f8      	bne.n	800edec <__gethex+0xa6>
 800edfa:	b10c      	cbz	r4, 800ee00 <__gethex+0xba>
 800edfc:	1ba4      	subs	r4, r4, r6
 800edfe:	00a4      	lsls	r4, r4, #2
 800ee00:	7833      	ldrb	r3, [r6, #0]
 800ee02:	2b50      	cmp	r3, #80	; 0x50
 800ee04:	d001      	beq.n	800ee0a <__gethex+0xc4>
 800ee06:	2b70      	cmp	r3, #112	; 0x70
 800ee08:	d140      	bne.n	800ee8c <__gethex+0x146>
 800ee0a:	7873      	ldrb	r3, [r6, #1]
 800ee0c:	2b2b      	cmp	r3, #43	; 0x2b
 800ee0e:	d031      	beq.n	800ee74 <__gethex+0x12e>
 800ee10:	2b2d      	cmp	r3, #45	; 0x2d
 800ee12:	d033      	beq.n	800ee7c <__gethex+0x136>
 800ee14:	1c71      	adds	r1, r6, #1
 800ee16:	f04f 0900 	mov.w	r9, #0
 800ee1a:	7808      	ldrb	r0, [r1, #0]
 800ee1c:	f7ff ff7e 	bl	800ed1c <__hexdig_fun>
 800ee20:	1e43      	subs	r3, r0, #1
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b18      	cmp	r3, #24
 800ee26:	d831      	bhi.n	800ee8c <__gethex+0x146>
 800ee28:	f1a0 0210 	sub.w	r2, r0, #16
 800ee2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee30:	f7ff ff74 	bl	800ed1c <__hexdig_fun>
 800ee34:	1e43      	subs	r3, r0, #1
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	2b18      	cmp	r3, #24
 800ee3a:	d922      	bls.n	800ee82 <__gethex+0x13c>
 800ee3c:	f1b9 0f00 	cmp.w	r9, #0
 800ee40:	d000      	beq.n	800ee44 <__gethex+0xfe>
 800ee42:	4252      	negs	r2, r2
 800ee44:	4414      	add	r4, r2
 800ee46:	f8ca 1000 	str.w	r1, [sl]
 800ee4a:	b30d      	cbz	r5, 800ee90 <__gethex+0x14a>
 800ee4c:	f1bb 0f00 	cmp.w	fp, #0
 800ee50:	bf0c      	ite	eq
 800ee52:	2706      	moveq	r7, #6
 800ee54:	2700      	movne	r7, #0
 800ee56:	4638      	mov	r0, r7
 800ee58:	b00b      	add	sp, #44	; 0x2c
 800ee5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5e:	f10b 0b01 	add.w	fp, fp, #1
 800ee62:	e78a      	b.n	800ed7a <__gethex+0x34>
 800ee64:	2500      	movs	r5, #0
 800ee66:	462c      	mov	r4, r5
 800ee68:	e7ae      	b.n	800edc8 <__gethex+0x82>
 800ee6a:	463e      	mov	r6, r7
 800ee6c:	2501      	movs	r5, #1
 800ee6e:	e7c7      	b.n	800ee00 <__gethex+0xba>
 800ee70:	4604      	mov	r4, r0
 800ee72:	e7fb      	b.n	800ee6c <__gethex+0x126>
 800ee74:	f04f 0900 	mov.w	r9, #0
 800ee78:	1cb1      	adds	r1, r6, #2
 800ee7a:	e7ce      	b.n	800ee1a <__gethex+0xd4>
 800ee7c:	f04f 0901 	mov.w	r9, #1
 800ee80:	e7fa      	b.n	800ee78 <__gethex+0x132>
 800ee82:	230a      	movs	r3, #10
 800ee84:	fb03 0202 	mla	r2, r3, r2, r0
 800ee88:	3a10      	subs	r2, #16
 800ee8a:	e7cf      	b.n	800ee2c <__gethex+0xe6>
 800ee8c:	4631      	mov	r1, r6
 800ee8e:	e7da      	b.n	800ee46 <__gethex+0x100>
 800ee90:	1bf3      	subs	r3, r6, r7
 800ee92:	3b01      	subs	r3, #1
 800ee94:	4629      	mov	r1, r5
 800ee96:	2b07      	cmp	r3, #7
 800ee98:	dc49      	bgt.n	800ef2e <__gethex+0x1e8>
 800ee9a:	9802      	ldr	r0, [sp, #8]
 800ee9c:	f000 fa58 	bl	800f350 <_Balloc>
 800eea0:	9b01      	ldr	r3, [sp, #4]
 800eea2:	f100 0914 	add.w	r9, r0, #20
 800eea6:	f04f 0b00 	mov.w	fp, #0
 800eeaa:	f1c3 0301 	rsb	r3, r3, #1
 800eeae:	4605      	mov	r5, r0
 800eeb0:	f8cd 9010 	str.w	r9, [sp, #16]
 800eeb4:	46da      	mov	sl, fp
 800eeb6:	9308      	str	r3, [sp, #32]
 800eeb8:	42b7      	cmp	r7, r6
 800eeba:	d33b      	bcc.n	800ef34 <__gethex+0x1ee>
 800eebc:	9804      	ldr	r0, [sp, #16]
 800eebe:	f840 ab04 	str.w	sl, [r0], #4
 800eec2:	eba0 0009 	sub.w	r0, r0, r9
 800eec6:	1080      	asrs	r0, r0, #2
 800eec8:	6128      	str	r0, [r5, #16]
 800eeca:	0147      	lsls	r7, r0, #5
 800eecc:	4650      	mov	r0, sl
 800eece:	f000 fb03 	bl	800f4d8 <__hi0bits>
 800eed2:	f8d8 6000 	ldr.w	r6, [r8]
 800eed6:	1a3f      	subs	r7, r7, r0
 800eed8:	42b7      	cmp	r7, r6
 800eeda:	dd64      	ble.n	800efa6 <__gethex+0x260>
 800eedc:	1bbf      	subs	r7, r7, r6
 800eede:	4639      	mov	r1, r7
 800eee0:	4628      	mov	r0, r5
 800eee2:	f000 fe14 	bl	800fb0e <__any_on>
 800eee6:	4682      	mov	sl, r0
 800eee8:	b178      	cbz	r0, 800ef0a <__gethex+0x1c4>
 800eeea:	1e7b      	subs	r3, r7, #1
 800eeec:	1159      	asrs	r1, r3, #5
 800eeee:	f003 021f 	and.w	r2, r3, #31
 800eef2:	f04f 0a01 	mov.w	sl, #1
 800eef6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eefa:	fa0a f202 	lsl.w	r2, sl, r2
 800eefe:	420a      	tst	r2, r1
 800ef00:	d003      	beq.n	800ef0a <__gethex+0x1c4>
 800ef02:	4553      	cmp	r3, sl
 800ef04:	dc46      	bgt.n	800ef94 <__gethex+0x24e>
 800ef06:	f04f 0a02 	mov.w	sl, #2
 800ef0a:	4639      	mov	r1, r7
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	f7ff fecb 	bl	800eca8 <rshift>
 800ef12:	443c      	add	r4, r7
 800ef14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef18:	42a3      	cmp	r3, r4
 800ef1a:	da52      	bge.n	800efc2 <__gethex+0x27c>
 800ef1c:	4629      	mov	r1, r5
 800ef1e:	9802      	ldr	r0, [sp, #8]
 800ef20:	f000 fa4a 	bl	800f3b8 <_Bfree>
 800ef24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef26:	2300      	movs	r3, #0
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	27a3      	movs	r7, #163	; 0xa3
 800ef2c:	e793      	b.n	800ee56 <__gethex+0x110>
 800ef2e:	3101      	adds	r1, #1
 800ef30:	105b      	asrs	r3, r3, #1
 800ef32:	e7b0      	b.n	800ee96 <__gethex+0x150>
 800ef34:	1e73      	subs	r3, r6, #1
 800ef36:	9305      	str	r3, [sp, #20]
 800ef38:	9a07      	ldr	r2, [sp, #28]
 800ef3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d018      	beq.n	800ef74 <__gethex+0x22e>
 800ef42:	f1bb 0f20 	cmp.w	fp, #32
 800ef46:	d107      	bne.n	800ef58 <__gethex+0x212>
 800ef48:	9b04      	ldr	r3, [sp, #16]
 800ef4a:	f8c3 a000 	str.w	sl, [r3]
 800ef4e:	3304      	adds	r3, #4
 800ef50:	f04f 0a00 	mov.w	sl, #0
 800ef54:	9304      	str	r3, [sp, #16]
 800ef56:	46d3      	mov	fp, sl
 800ef58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ef5c:	f7ff fede 	bl	800ed1c <__hexdig_fun>
 800ef60:	f000 000f 	and.w	r0, r0, #15
 800ef64:	fa00 f00b 	lsl.w	r0, r0, fp
 800ef68:	ea4a 0a00 	orr.w	sl, sl, r0
 800ef6c:	f10b 0b04 	add.w	fp, fp, #4
 800ef70:	9b05      	ldr	r3, [sp, #20]
 800ef72:	e00d      	b.n	800ef90 <__gethex+0x24a>
 800ef74:	9b05      	ldr	r3, [sp, #20]
 800ef76:	9a08      	ldr	r2, [sp, #32]
 800ef78:	4413      	add	r3, r2
 800ef7a:	42bb      	cmp	r3, r7
 800ef7c:	d3e1      	bcc.n	800ef42 <__gethex+0x1fc>
 800ef7e:	4618      	mov	r0, r3
 800ef80:	9a01      	ldr	r2, [sp, #4]
 800ef82:	9903      	ldr	r1, [sp, #12]
 800ef84:	9309      	str	r3, [sp, #36]	; 0x24
 800ef86:	f000 fffb 	bl	800ff80 <strncmp>
 800ef8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d1d8      	bne.n	800ef42 <__gethex+0x1fc>
 800ef90:	461e      	mov	r6, r3
 800ef92:	e791      	b.n	800eeb8 <__gethex+0x172>
 800ef94:	1eb9      	subs	r1, r7, #2
 800ef96:	4628      	mov	r0, r5
 800ef98:	f000 fdb9 	bl	800fb0e <__any_on>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d0b2      	beq.n	800ef06 <__gethex+0x1c0>
 800efa0:	f04f 0a03 	mov.w	sl, #3
 800efa4:	e7b1      	b.n	800ef0a <__gethex+0x1c4>
 800efa6:	da09      	bge.n	800efbc <__gethex+0x276>
 800efa8:	1bf7      	subs	r7, r6, r7
 800efaa:	4629      	mov	r1, r5
 800efac:	463a      	mov	r2, r7
 800efae:	9802      	ldr	r0, [sp, #8]
 800efb0:	f000 fbce 	bl	800f750 <__lshift>
 800efb4:	1be4      	subs	r4, r4, r7
 800efb6:	4605      	mov	r5, r0
 800efb8:	f100 0914 	add.w	r9, r0, #20
 800efbc:	f04f 0a00 	mov.w	sl, #0
 800efc0:	e7a8      	b.n	800ef14 <__gethex+0x1ce>
 800efc2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800efc6:	42a0      	cmp	r0, r4
 800efc8:	dd6a      	ble.n	800f0a0 <__gethex+0x35a>
 800efca:	1b04      	subs	r4, r0, r4
 800efcc:	42a6      	cmp	r6, r4
 800efce:	dc2e      	bgt.n	800f02e <__gethex+0x2e8>
 800efd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efd4:	2b02      	cmp	r3, #2
 800efd6:	d022      	beq.n	800f01e <__gethex+0x2d8>
 800efd8:	2b03      	cmp	r3, #3
 800efda:	d024      	beq.n	800f026 <__gethex+0x2e0>
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d115      	bne.n	800f00c <__gethex+0x2c6>
 800efe0:	42a6      	cmp	r6, r4
 800efe2:	d113      	bne.n	800f00c <__gethex+0x2c6>
 800efe4:	2e01      	cmp	r6, #1
 800efe6:	dc0b      	bgt.n	800f000 <__gethex+0x2ba>
 800efe8:	9a06      	ldr	r2, [sp, #24]
 800efea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	2301      	movs	r3, #1
 800eff2:	612b      	str	r3, [r5, #16]
 800eff4:	f8c9 3000 	str.w	r3, [r9]
 800eff8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800effa:	2762      	movs	r7, #98	; 0x62
 800effc:	601d      	str	r5, [r3, #0]
 800effe:	e72a      	b.n	800ee56 <__gethex+0x110>
 800f000:	1e71      	subs	r1, r6, #1
 800f002:	4628      	mov	r0, r5
 800f004:	f000 fd83 	bl	800fb0e <__any_on>
 800f008:	2800      	cmp	r0, #0
 800f00a:	d1ed      	bne.n	800efe8 <__gethex+0x2a2>
 800f00c:	4629      	mov	r1, r5
 800f00e:	9802      	ldr	r0, [sp, #8]
 800f010:	f000 f9d2 	bl	800f3b8 <_Bfree>
 800f014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f016:	2300      	movs	r3, #0
 800f018:	6013      	str	r3, [r2, #0]
 800f01a:	2750      	movs	r7, #80	; 0x50
 800f01c:	e71b      	b.n	800ee56 <__gethex+0x110>
 800f01e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f020:	2b00      	cmp	r3, #0
 800f022:	d0e1      	beq.n	800efe8 <__gethex+0x2a2>
 800f024:	e7f2      	b.n	800f00c <__gethex+0x2c6>
 800f026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1dd      	bne.n	800efe8 <__gethex+0x2a2>
 800f02c:	e7ee      	b.n	800f00c <__gethex+0x2c6>
 800f02e:	1e67      	subs	r7, r4, #1
 800f030:	f1ba 0f00 	cmp.w	sl, #0
 800f034:	d131      	bne.n	800f09a <__gethex+0x354>
 800f036:	b127      	cbz	r7, 800f042 <__gethex+0x2fc>
 800f038:	4639      	mov	r1, r7
 800f03a:	4628      	mov	r0, r5
 800f03c:	f000 fd67 	bl	800fb0e <__any_on>
 800f040:	4682      	mov	sl, r0
 800f042:	117a      	asrs	r2, r7, #5
 800f044:	2301      	movs	r3, #1
 800f046:	f007 071f 	and.w	r7, r7, #31
 800f04a:	fa03 f707 	lsl.w	r7, r3, r7
 800f04e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f052:	4621      	mov	r1, r4
 800f054:	421f      	tst	r7, r3
 800f056:	4628      	mov	r0, r5
 800f058:	bf18      	it	ne
 800f05a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f05e:	1b36      	subs	r6, r6, r4
 800f060:	f7ff fe22 	bl	800eca8 <rshift>
 800f064:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f068:	2702      	movs	r7, #2
 800f06a:	f1ba 0f00 	cmp.w	sl, #0
 800f06e:	d048      	beq.n	800f102 <__gethex+0x3bc>
 800f070:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f074:	2b02      	cmp	r3, #2
 800f076:	d015      	beq.n	800f0a4 <__gethex+0x35e>
 800f078:	2b03      	cmp	r3, #3
 800f07a:	d017      	beq.n	800f0ac <__gethex+0x366>
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d109      	bne.n	800f094 <__gethex+0x34e>
 800f080:	f01a 0f02 	tst.w	sl, #2
 800f084:	d006      	beq.n	800f094 <__gethex+0x34e>
 800f086:	f8d9 3000 	ldr.w	r3, [r9]
 800f08a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f08e:	f01a 0f01 	tst.w	sl, #1
 800f092:	d10e      	bne.n	800f0b2 <__gethex+0x36c>
 800f094:	f047 0710 	orr.w	r7, r7, #16
 800f098:	e033      	b.n	800f102 <__gethex+0x3bc>
 800f09a:	f04f 0a01 	mov.w	sl, #1
 800f09e:	e7d0      	b.n	800f042 <__gethex+0x2fc>
 800f0a0:	2701      	movs	r7, #1
 800f0a2:	e7e2      	b.n	800f06a <__gethex+0x324>
 800f0a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0a6:	f1c3 0301 	rsb	r3, r3, #1
 800f0aa:	9315      	str	r3, [sp, #84]	; 0x54
 800f0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d0f0      	beq.n	800f094 <__gethex+0x34e>
 800f0b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f0b6:	f105 0314 	add.w	r3, r5, #20
 800f0ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f0be:	eb03 010a 	add.w	r1, r3, sl
 800f0c2:	f04f 0c00 	mov.w	ip, #0
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f0d0:	d01c      	beq.n	800f10c <__gethex+0x3c6>
 800f0d2:	3201      	adds	r2, #1
 800f0d4:	6002      	str	r2, [r0, #0]
 800f0d6:	2f02      	cmp	r7, #2
 800f0d8:	f105 0314 	add.w	r3, r5, #20
 800f0dc:	d138      	bne.n	800f150 <__gethex+0x40a>
 800f0de:	f8d8 2000 	ldr.w	r2, [r8]
 800f0e2:	3a01      	subs	r2, #1
 800f0e4:	42b2      	cmp	r2, r6
 800f0e6:	d10a      	bne.n	800f0fe <__gethex+0x3b8>
 800f0e8:	1171      	asrs	r1, r6, #5
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f006 061f 	and.w	r6, r6, #31
 800f0f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0f4:	fa02 f606 	lsl.w	r6, r2, r6
 800f0f8:	421e      	tst	r6, r3
 800f0fa:	bf18      	it	ne
 800f0fc:	4617      	movne	r7, r2
 800f0fe:	f047 0720 	orr.w	r7, r7, #32
 800f102:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f104:	601d      	str	r5, [r3, #0]
 800f106:	9b06      	ldr	r3, [sp, #24]
 800f108:	601c      	str	r4, [r3, #0]
 800f10a:	e6a4      	b.n	800ee56 <__gethex+0x110>
 800f10c:	4299      	cmp	r1, r3
 800f10e:	f843 cc04 	str.w	ip, [r3, #-4]
 800f112:	d8d8      	bhi.n	800f0c6 <__gethex+0x380>
 800f114:	68ab      	ldr	r3, [r5, #8]
 800f116:	4599      	cmp	r9, r3
 800f118:	db12      	blt.n	800f140 <__gethex+0x3fa>
 800f11a:	6869      	ldr	r1, [r5, #4]
 800f11c:	9802      	ldr	r0, [sp, #8]
 800f11e:	3101      	adds	r1, #1
 800f120:	f000 f916 	bl	800f350 <_Balloc>
 800f124:	692a      	ldr	r2, [r5, #16]
 800f126:	3202      	adds	r2, #2
 800f128:	f105 010c 	add.w	r1, r5, #12
 800f12c:	4683      	mov	fp, r0
 800f12e:	0092      	lsls	r2, r2, #2
 800f130:	300c      	adds	r0, #12
 800f132:	f7fd fb15 	bl	800c760 <memcpy>
 800f136:	4629      	mov	r1, r5
 800f138:	9802      	ldr	r0, [sp, #8]
 800f13a:	f000 f93d 	bl	800f3b8 <_Bfree>
 800f13e:	465d      	mov	r5, fp
 800f140:	692b      	ldr	r3, [r5, #16]
 800f142:	1c5a      	adds	r2, r3, #1
 800f144:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f148:	612a      	str	r2, [r5, #16]
 800f14a:	2201      	movs	r2, #1
 800f14c:	615a      	str	r2, [r3, #20]
 800f14e:	e7c2      	b.n	800f0d6 <__gethex+0x390>
 800f150:	692a      	ldr	r2, [r5, #16]
 800f152:	454a      	cmp	r2, r9
 800f154:	dd0b      	ble.n	800f16e <__gethex+0x428>
 800f156:	2101      	movs	r1, #1
 800f158:	4628      	mov	r0, r5
 800f15a:	f7ff fda5 	bl	800eca8 <rshift>
 800f15e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f162:	3401      	adds	r4, #1
 800f164:	42a3      	cmp	r3, r4
 800f166:	f6ff aed9 	blt.w	800ef1c <__gethex+0x1d6>
 800f16a:	2701      	movs	r7, #1
 800f16c:	e7c7      	b.n	800f0fe <__gethex+0x3b8>
 800f16e:	f016 061f 	ands.w	r6, r6, #31
 800f172:	d0fa      	beq.n	800f16a <__gethex+0x424>
 800f174:	449a      	add	sl, r3
 800f176:	f1c6 0620 	rsb	r6, r6, #32
 800f17a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f17e:	f000 f9ab 	bl	800f4d8 <__hi0bits>
 800f182:	42b0      	cmp	r0, r6
 800f184:	dbe7      	blt.n	800f156 <__gethex+0x410>
 800f186:	e7f0      	b.n	800f16a <__gethex+0x424>

0800f188 <L_shift>:
 800f188:	f1c2 0208 	rsb	r2, r2, #8
 800f18c:	0092      	lsls	r2, r2, #2
 800f18e:	b570      	push	{r4, r5, r6, lr}
 800f190:	f1c2 0620 	rsb	r6, r2, #32
 800f194:	6843      	ldr	r3, [r0, #4]
 800f196:	6804      	ldr	r4, [r0, #0]
 800f198:	fa03 f506 	lsl.w	r5, r3, r6
 800f19c:	432c      	orrs	r4, r5
 800f19e:	40d3      	lsrs	r3, r2
 800f1a0:	6004      	str	r4, [r0, #0]
 800f1a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f1a6:	4288      	cmp	r0, r1
 800f1a8:	d3f4      	bcc.n	800f194 <L_shift+0xc>
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}

0800f1ac <__match>:
 800f1ac:	b530      	push	{r4, r5, lr}
 800f1ae:	6803      	ldr	r3, [r0, #0]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1b6:	b914      	cbnz	r4, 800f1be <__match+0x12>
 800f1b8:	6003      	str	r3, [r0, #0]
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	bd30      	pop	{r4, r5, pc}
 800f1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f1c6:	2d19      	cmp	r5, #25
 800f1c8:	bf98      	it	ls
 800f1ca:	3220      	addls	r2, #32
 800f1cc:	42a2      	cmp	r2, r4
 800f1ce:	d0f0      	beq.n	800f1b2 <__match+0x6>
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	e7f3      	b.n	800f1bc <__match+0x10>

0800f1d4 <__hexnan>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	680b      	ldr	r3, [r1, #0]
 800f1da:	6801      	ldr	r1, [r0, #0]
 800f1dc:	115f      	asrs	r7, r3, #5
 800f1de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f1e2:	f013 031f 	ands.w	r3, r3, #31
 800f1e6:	b087      	sub	sp, #28
 800f1e8:	bf18      	it	ne
 800f1ea:	3704      	addne	r7, #4
 800f1ec:	2500      	movs	r5, #0
 800f1ee:	1f3e      	subs	r6, r7, #4
 800f1f0:	4682      	mov	sl, r0
 800f1f2:	4690      	mov	r8, r2
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	f847 5c04 	str.w	r5, [r7, #-4]
 800f1fa:	46b1      	mov	r9, r6
 800f1fc:	4634      	mov	r4, r6
 800f1fe:	9502      	str	r5, [sp, #8]
 800f200:	46ab      	mov	fp, r5
 800f202:	784a      	ldrb	r2, [r1, #1]
 800f204:	1c4b      	adds	r3, r1, #1
 800f206:	9303      	str	r3, [sp, #12]
 800f208:	b342      	cbz	r2, 800f25c <__hexnan+0x88>
 800f20a:	4610      	mov	r0, r2
 800f20c:	9105      	str	r1, [sp, #20]
 800f20e:	9204      	str	r2, [sp, #16]
 800f210:	f7ff fd84 	bl	800ed1c <__hexdig_fun>
 800f214:	2800      	cmp	r0, #0
 800f216:	d143      	bne.n	800f2a0 <__hexnan+0xcc>
 800f218:	9a04      	ldr	r2, [sp, #16]
 800f21a:	9905      	ldr	r1, [sp, #20]
 800f21c:	2a20      	cmp	r2, #32
 800f21e:	d818      	bhi.n	800f252 <__hexnan+0x7e>
 800f220:	9b02      	ldr	r3, [sp, #8]
 800f222:	459b      	cmp	fp, r3
 800f224:	dd13      	ble.n	800f24e <__hexnan+0x7a>
 800f226:	454c      	cmp	r4, r9
 800f228:	d206      	bcs.n	800f238 <__hexnan+0x64>
 800f22a:	2d07      	cmp	r5, #7
 800f22c:	dc04      	bgt.n	800f238 <__hexnan+0x64>
 800f22e:	462a      	mov	r2, r5
 800f230:	4649      	mov	r1, r9
 800f232:	4620      	mov	r0, r4
 800f234:	f7ff ffa8 	bl	800f188 <L_shift>
 800f238:	4544      	cmp	r4, r8
 800f23a:	d944      	bls.n	800f2c6 <__hexnan+0xf2>
 800f23c:	2300      	movs	r3, #0
 800f23e:	f1a4 0904 	sub.w	r9, r4, #4
 800f242:	f844 3c04 	str.w	r3, [r4, #-4]
 800f246:	f8cd b008 	str.w	fp, [sp, #8]
 800f24a:	464c      	mov	r4, r9
 800f24c:	461d      	mov	r5, r3
 800f24e:	9903      	ldr	r1, [sp, #12]
 800f250:	e7d7      	b.n	800f202 <__hexnan+0x2e>
 800f252:	2a29      	cmp	r2, #41	; 0x29
 800f254:	d14a      	bne.n	800f2ec <__hexnan+0x118>
 800f256:	3102      	adds	r1, #2
 800f258:	f8ca 1000 	str.w	r1, [sl]
 800f25c:	f1bb 0f00 	cmp.w	fp, #0
 800f260:	d044      	beq.n	800f2ec <__hexnan+0x118>
 800f262:	454c      	cmp	r4, r9
 800f264:	d206      	bcs.n	800f274 <__hexnan+0xa0>
 800f266:	2d07      	cmp	r5, #7
 800f268:	dc04      	bgt.n	800f274 <__hexnan+0xa0>
 800f26a:	462a      	mov	r2, r5
 800f26c:	4649      	mov	r1, r9
 800f26e:	4620      	mov	r0, r4
 800f270:	f7ff ff8a 	bl	800f188 <L_shift>
 800f274:	4544      	cmp	r4, r8
 800f276:	d928      	bls.n	800f2ca <__hexnan+0xf6>
 800f278:	4643      	mov	r3, r8
 800f27a:	f854 2b04 	ldr.w	r2, [r4], #4
 800f27e:	f843 2b04 	str.w	r2, [r3], #4
 800f282:	42a6      	cmp	r6, r4
 800f284:	d2f9      	bcs.n	800f27a <__hexnan+0xa6>
 800f286:	2200      	movs	r2, #0
 800f288:	f843 2b04 	str.w	r2, [r3], #4
 800f28c:	429e      	cmp	r6, r3
 800f28e:	d2fb      	bcs.n	800f288 <__hexnan+0xb4>
 800f290:	6833      	ldr	r3, [r6, #0]
 800f292:	b91b      	cbnz	r3, 800f29c <__hexnan+0xc8>
 800f294:	4546      	cmp	r6, r8
 800f296:	d127      	bne.n	800f2e8 <__hexnan+0x114>
 800f298:	2301      	movs	r3, #1
 800f29a:	6033      	str	r3, [r6, #0]
 800f29c:	2005      	movs	r0, #5
 800f29e:	e026      	b.n	800f2ee <__hexnan+0x11a>
 800f2a0:	3501      	adds	r5, #1
 800f2a2:	2d08      	cmp	r5, #8
 800f2a4:	f10b 0b01 	add.w	fp, fp, #1
 800f2a8:	dd06      	ble.n	800f2b8 <__hexnan+0xe4>
 800f2aa:	4544      	cmp	r4, r8
 800f2ac:	d9cf      	bls.n	800f24e <__hexnan+0x7a>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2b4:	2501      	movs	r5, #1
 800f2b6:	3c04      	subs	r4, #4
 800f2b8:	6822      	ldr	r2, [r4, #0]
 800f2ba:	f000 000f 	and.w	r0, r0, #15
 800f2be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f2c2:	6020      	str	r0, [r4, #0]
 800f2c4:	e7c3      	b.n	800f24e <__hexnan+0x7a>
 800f2c6:	2508      	movs	r5, #8
 800f2c8:	e7c1      	b.n	800f24e <__hexnan+0x7a>
 800f2ca:	9b01      	ldr	r3, [sp, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d0df      	beq.n	800f290 <__hexnan+0xbc>
 800f2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d4:	f1c3 0320 	rsb	r3, r3, #32
 800f2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f2dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f2e0:	401a      	ands	r2, r3
 800f2e2:	f847 2c04 	str.w	r2, [r7, #-4]
 800f2e6:	e7d3      	b.n	800f290 <__hexnan+0xbc>
 800f2e8:	3e04      	subs	r6, #4
 800f2ea:	e7d1      	b.n	800f290 <__hexnan+0xbc>
 800f2ec:	2004      	movs	r0, #4
 800f2ee:	b007      	add	sp, #28
 800f2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2f4 <__locale_ctype_ptr_l>:
 800f2f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f2f8:	4770      	bx	lr

0800f2fa <__localeconv_l>:
 800f2fa:	30f0      	adds	r0, #240	; 0xf0
 800f2fc:	4770      	bx	lr
	...

0800f300 <_localeconv_r>:
 800f300:	4b04      	ldr	r3, [pc, #16]	; (800f314 <_localeconv_r+0x14>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6a18      	ldr	r0, [r3, #32]
 800f306:	4b04      	ldr	r3, [pc, #16]	; (800f318 <_localeconv_r+0x18>)
 800f308:	2800      	cmp	r0, #0
 800f30a:	bf08      	it	eq
 800f30c:	4618      	moveq	r0, r3
 800f30e:	30f0      	adds	r0, #240	; 0xf0
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	200000cc 	.word	0x200000cc
 800f318:	20000130 	.word	0x20000130

0800f31c <malloc>:
 800f31c:	4b02      	ldr	r3, [pc, #8]	; (800f328 <malloc+0xc>)
 800f31e:	4601      	mov	r1, r0
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	f000 bc71 	b.w	800fc08 <_malloc_r>
 800f326:	bf00      	nop
 800f328:	200000cc 	.word	0x200000cc

0800f32c <__ascii_mbtowc>:
 800f32c:	b082      	sub	sp, #8
 800f32e:	b901      	cbnz	r1, 800f332 <__ascii_mbtowc+0x6>
 800f330:	a901      	add	r1, sp, #4
 800f332:	b142      	cbz	r2, 800f346 <__ascii_mbtowc+0x1a>
 800f334:	b14b      	cbz	r3, 800f34a <__ascii_mbtowc+0x1e>
 800f336:	7813      	ldrb	r3, [r2, #0]
 800f338:	600b      	str	r3, [r1, #0]
 800f33a:	7812      	ldrb	r2, [r2, #0]
 800f33c:	1c10      	adds	r0, r2, #0
 800f33e:	bf18      	it	ne
 800f340:	2001      	movne	r0, #1
 800f342:	b002      	add	sp, #8
 800f344:	4770      	bx	lr
 800f346:	4610      	mov	r0, r2
 800f348:	e7fb      	b.n	800f342 <__ascii_mbtowc+0x16>
 800f34a:	f06f 0001 	mvn.w	r0, #1
 800f34e:	e7f8      	b.n	800f342 <__ascii_mbtowc+0x16>

0800f350 <_Balloc>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f354:	4604      	mov	r4, r0
 800f356:	460e      	mov	r6, r1
 800f358:	b93d      	cbnz	r5, 800f36a <_Balloc+0x1a>
 800f35a:	2010      	movs	r0, #16
 800f35c:	f7ff ffde 	bl	800f31c <malloc>
 800f360:	6260      	str	r0, [r4, #36]	; 0x24
 800f362:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f366:	6005      	str	r5, [r0, #0]
 800f368:	60c5      	str	r5, [r0, #12]
 800f36a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f36c:	68eb      	ldr	r3, [r5, #12]
 800f36e:	b183      	cbz	r3, 800f392 <_Balloc+0x42>
 800f370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f378:	b9b8      	cbnz	r0, 800f3aa <_Balloc+0x5a>
 800f37a:	2101      	movs	r1, #1
 800f37c:	fa01 f506 	lsl.w	r5, r1, r6
 800f380:	1d6a      	adds	r2, r5, #5
 800f382:	0092      	lsls	r2, r2, #2
 800f384:	4620      	mov	r0, r4
 800f386:	f000 fbe3 	bl	800fb50 <_calloc_r>
 800f38a:	b160      	cbz	r0, 800f3a6 <_Balloc+0x56>
 800f38c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f390:	e00e      	b.n	800f3b0 <_Balloc+0x60>
 800f392:	2221      	movs	r2, #33	; 0x21
 800f394:	2104      	movs	r1, #4
 800f396:	4620      	mov	r0, r4
 800f398:	f000 fbda 	bl	800fb50 <_calloc_r>
 800f39c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f39e:	60e8      	str	r0, [r5, #12]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1e4      	bne.n	800f370 <_Balloc+0x20>
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	bd70      	pop	{r4, r5, r6, pc}
 800f3aa:	6802      	ldr	r2, [r0, #0]
 800f3ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3b6:	e7f7      	b.n	800f3a8 <_Balloc+0x58>

0800f3b8 <_Bfree>:
 800f3b8:	b570      	push	{r4, r5, r6, lr}
 800f3ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f3bc:	4606      	mov	r6, r0
 800f3be:	460d      	mov	r5, r1
 800f3c0:	b93c      	cbnz	r4, 800f3d2 <_Bfree+0x1a>
 800f3c2:	2010      	movs	r0, #16
 800f3c4:	f7ff ffaa 	bl	800f31c <malloc>
 800f3c8:	6270      	str	r0, [r6, #36]	; 0x24
 800f3ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3ce:	6004      	str	r4, [r0, #0]
 800f3d0:	60c4      	str	r4, [r0, #12]
 800f3d2:	b13d      	cbz	r5, 800f3e4 <_Bfree+0x2c>
 800f3d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f3d6:	686a      	ldr	r2, [r5, #4]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3de:	6029      	str	r1, [r5, #0]
 800f3e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f3e4:	bd70      	pop	{r4, r5, r6, pc}

0800f3e6 <__multadd>:
 800f3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ea:	690d      	ldr	r5, [r1, #16]
 800f3ec:	461f      	mov	r7, r3
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	460c      	mov	r4, r1
 800f3f2:	f101 0c14 	add.w	ip, r1, #20
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	f8dc 0000 	ldr.w	r0, [ip]
 800f3fc:	b281      	uxth	r1, r0
 800f3fe:	fb02 7101 	mla	r1, r2, r1, r7
 800f402:	0c0f      	lsrs	r7, r1, #16
 800f404:	0c00      	lsrs	r0, r0, #16
 800f406:	fb02 7000 	mla	r0, r2, r0, r7
 800f40a:	b289      	uxth	r1, r1
 800f40c:	3301      	adds	r3, #1
 800f40e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f412:	429d      	cmp	r5, r3
 800f414:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f418:	f84c 1b04 	str.w	r1, [ip], #4
 800f41c:	dcec      	bgt.n	800f3f8 <__multadd+0x12>
 800f41e:	b1d7      	cbz	r7, 800f456 <__multadd+0x70>
 800f420:	68a3      	ldr	r3, [r4, #8]
 800f422:	42ab      	cmp	r3, r5
 800f424:	dc12      	bgt.n	800f44c <__multadd+0x66>
 800f426:	6861      	ldr	r1, [r4, #4]
 800f428:	4630      	mov	r0, r6
 800f42a:	3101      	adds	r1, #1
 800f42c:	f7ff ff90 	bl	800f350 <_Balloc>
 800f430:	6922      	ldr	r2, [r4, #16]
 800f432:	3202      	adds	r2, #2
 800f434:	f104 010c 	add.w	r1, r4, #12
 800f438:	4680      	mov	r8, r0
 800f43a:	0092      	lsls	r2, r2, #2
 800f43c:	300c      	adds	r0, #12
 800f43e:	f7fd f98f 	bl	800c760 <memcpy>
 800f442:	4621      	mov	r1, r4
 800f444:	4630      	mov	r0, r6
 800f446:	f7ff ffb7 	bl	800f3b8 <_Bfree>
 800f44a:	4644      	mov	r4, r8
 800f44c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f450:	3501      	adds	r5, #1
 800f452:	615f      	str	r7, [r3, #20]
 800f454:	6125      	str	r5, [r4, #16]
 800f456:	4620      	mov	r0, r4
 800f458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f45c <__s2b>:
 800f45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f460:	460c      	mov	r4, r1
 800f462:	4615      	mov	r5, r2
 800f464:	461f      	mov	r7, r3
 800f466:	2209      	movs	r2, #9
 800f468:	3308      	adds	r3, #8
 800f46a:	4606      	mov	r6, r0
 800f46c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f470:	2100      	movs	r1, #0
 800f472:	2201      	movs	r2, #1
 800f474:	429a      	cmp	r2, r3
 800f476:	db20      	blt.n	800f4ba <__s2b+0x5e>
 800f478:	4630      	mov	r0, r6
 800f47a:	f7ff ff69 	bl	800f350 <_Balloc>
 800f47e:	9b08      	ldr	r3, [sp, #32]
 800f480:	6143      	str	r3, [r0, #20]
 800f482:	2d09      	cmp	r5, #9
 800f484:	f04f 0301 	mov.w	r3, #1
 800f488:	6103      	str	r3, [r0, #16]
 800f48a:	dd19      	ble.n	800f4c0 <__s2b+0x64>
 800f48c:	f104 0809 	add.w	r8, r4, #9
 800f490:	46c1      	mov	r9, r8
 800f492:	442c      	add	r4, r5
 800f494:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f498:	4601      	mov	r1, r0
 800f49a:	3b30      	subs	r3, #48	; 0x30
 800f49c:	220a      	movs	r2, #10
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f7ff ffa1 	bl	800f3e6 <__multadd>
 800f4a4:	45a1      	cmp	r9, r4
 800f4a6:	d1f5      	bne.n	800f494 <__s2b+0x38>
 800f4a8:	eb08 0405 	add.w	r4, r8, r5
 800f4ac:	3c08      	subs	r4, #8
 800f4ae:	1b2d      	subs	r5, r5, r4
 800f4b0:	1963      	adds	r3, r4, r5
 800f4b2:	42bb      	cmp	r3, r7
 800f4b4:	db07      	blt.n	800f4c6 <__s2b+0x6a>
 800f4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ba:	0052      	lsls	r2, r2, #1
 800f4bc:	3101      	adds	r1, #1
 800f4be:	e7d9      	b.n	800f474 <__s2b+0x18>
 800f4c0:	340a      	adds	r4, #10
 800f4c2:	2509      	movs	r5, #9
 800f4c4:	e7f3      	b.n	800f4ae <__s2b+0x52>
 800f4c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4ca:	4601      	mov	r1, r0
 800f4cc:	3b30      	subs	r3, #48	; 0x30
 800f4ce:	220a      	movs	r2, #10
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	f7ff ff88 	bl	800f3e6 <__multadd>
 800f4d6:	e7eb      	b.n	800f4b0 <__s2b+0x54>

0800f4d8 <__hi0bits>:
 800f4d8:	0c02      	lsrs	r2, r0, #16
 800f4da:	0412      	lsls	r2, r2, #16
 800f4dc:	4603      	mov	r3, r0
 800f4de:	b9b2      	cbnz	r2, 800f50e <__hi0bits+0x36>
 800f4e0:	0403      	lsls	r3, r0, #16
 800f4e2:	2010      	movs	r0, #16
 800f4e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f4e8:	bf04      	itt	eq
 800f4ea:	021b      	lsleq	r3, r3, #8
 800f4ec:	3008      	addeq	r0, #8
 800f4ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f4f2:	bf04      	itt	eq
 800f4f4:	011b      	lsleq	r3, r3, #4
 800f4f6:	3004      	addeq	r0, #4
 800f4f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f4fc:	bf04      	itt	eq
 800f4fe:	009b      	lsleq	r3, r3, #2
 800f500:	3002      	addeq	r0, #2
 800f502:	2b00      	cmp	r3, #0
 800f504:	db06      	blt.n	800f514 <__hi0bits+0x3c>
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	d503      	bpl.n	800f512 <__hi0bits+0x3a>
 800f50a:	3001      	adds	r0, #1
 800f50c:	4770      	bx	lr
 800f50e:	2000      	movs	r0, #0
 800f510:	e7e8      	b.n	800f4e4 <__hi0bits+0xc>
 800f512:	2020      	movs	r0, #32
 800f514:	4770      	bx	lr

0800f516 <__lo0bits>:
 800f516:	6803      	ldr	r3, [r0, #0]
 800f518:	f013 0207 	ands.w	r2, r3, #7
 800f51c:	4601      	mov	r1, r0
 800f51e:	d00b      	beq.n	800f538 <__lo0bits+0x22>
 800f520:	07da      	lsls	r2, r3, #31
 800f522:	d423      	bmi.n	800f56c <__lo0bits+0x56>
 800f524:	0798      	lsls	r0, r3, #30
 800f526:	bf49      	itett	mi
 800f528:	085b      	lsrmi	r3, r3, #1
 800f52a:	089b      	lsrpl	r3, r3, #2
 800f52c:	2001      	movmi	r0, #1
 800f52e:	600b      	strmi	r3, [r1, #0]
 800f530:	bf5c      	itt	pl
 800f532:	600b      	strpl	r3, [r1, #0]
 800f534:	2002      	movpl	r0, #2
 800f536:	4770      	bx	lr
 800f538:	b298      	uxth	r0, r3
 800f53a:	b9a8      	cbnz	r0, 800f568 <__lo0bits+0x52>
 800f53c:	0c1b      	lsrs	r3, r3, #16
 800f53e:	2010      	movs	r0, #16
 800f540:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f544:	bf04      	itt	eq
 800f546:	0a1b      	lsreq	r3, r3, #8
 800f548:	3008      	addeq	r0, #8
 800f54a:	071a      	lsls	r2, r3, #28
 800f54c:	bf04      	itt	eq
 800f54e:	091b      	lsreq	r3, r3, #4
 800f550:	3004      	addeq	r0, #4
 800f552:	079a      	lsls	r2, r3, #30
 800f554:	bf04      	itt	eq
 800f556:	089b      	lsreq	r3, r3, #2
 800f558:	3002      	addeq	r0, #2
 800f55a:	07da      	lsls	r2, r3, #31
 800f55c:	d402      	bmi.n	800f564 <__lo0bits+0x4e>
 800f55e:	085b      	lsrs	r3, r3, #1
 800f560:	d006      	beq.n	800f570 <__lo0bits+0x5a>
 800f562:	3001      	adds	r0, #1
 800f564:	600b      	str	r3, [r1, #0]
 800f566:	4770      	bx	lr
 800f568:	4610      	mov	r0, r2
 800f56a:	e7e9      	b.n	800f540 <__lo0bits+0x2a>
 800f56c:	2000      	movs	r0, #0
 800f56e:	4770      	bx	lr
 800f570:	2020      	movs	r0, #32
 800f572:	4770      	bx	lr

0800f574 <__i2b>:
 800f574:	b510      	push	{r4, lr}
 800f576:	460c      	mov	r4, r1
 800f578:	2101      	movs	r1, #1
 800f57a:	f7ff fee9 	bl	800f350 <_Balloc>
 800f57e:	2201      	movs	r2, #1
 800f580:	6144      	str	r4, [r0, #20]
 800f582:	6102      	str	r2, [r0, #16]
 800f584:	bd10      	pop	{r4, pc}

0800f586 <__multiply>:
 800f586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58a:	4614      	mov	r4, r2
 800f58c:	690a      	ldr	r2, [r1, #16]
 800f58e:	6923      	ldr	r3, [r4, #16]
 800f590:	429a      	cmp	r2, r3
 800f592:	bfb8      	it	lt
 800f594:	460b      	movlt	r3, r1
 800f596:	4688      	mov	r8, r1
 800f598:	bfbc      	itt	lt
 800f59a:	46a0      	movlt	r8, r4
 800f59c:	461c      	movlt	r4, r3
 800f59e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f5a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f5ae:	eb07 0609 	add.w	r6, r7, r9
 800f5b2:	42b3      	cmp	r3, r6
 800f5b4:	bfb8      	it	lt
 800f5b6:	3101      	addlt	r1, #1
 800f5b8:	f7ff feca 	bl	800f350 <_Balloc>
 800f5bc:	f100 0514 	add.w	r5, r0, #20
 800f5c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	4573      	cmp	r3, lr
 800f5ca:	d316      	bcc.n	800f5fa <__multiply+0x74>
 800f5cc:	f104 0214 	add.w	r2, r4, #20
 800f5d0:	f108 0114 	add.w	r1, r8, #20
 800f5d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f5d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	9b00      	ldr	r3, [sp, #0]
 800f5e0:	9201      	str	r2, [sp, #4]
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d80c      	bhi.n	800f600 <__multiply+0x7a>
 800f5e6:	2e00      	cmp	r6, #0
 800f5e8:	dd03      	ble.n	800f5f2 <__multiply+0x6c>
 800f5ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d05d      	beq.n	800f6ae <__multiply+0x128>
 800f5f2:	6106      	str	r6, [r0, #16]
 800f5f4:	b003      	add	sp, #12
 800f5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fa:	f843 2b04 	str.w	r2, [r3], #4
 800f5fe:	e7e3      	b.n	800f5c8 <__multiply+0x42>
 800f600:	f8b2 b000 	ldrh.w	fp, [r2]
 800f604:	f1bb 0f00 	cmp.w	fp, #0
 800f608:	d023      	beq.n	800f652 <__multiply+0xcc>
 800f60a:	4689      	mov	r9, r1
 800f60c:	46ac      	mov	ip, r5
 800f60e:	f04f 0800 	mov.w	r8, #0
 800f612:	f859 4b04 	ldr.w	r4, [r9], #4
 800f616:	f8dc a000 	ldr.w	sl, [ip]
 800f61a:	b2a3      	uxth	r3, r4
 800f61c:	fa1f fa8a 	uxth.w	sl, sl
 800f620:	fb0b a303 	mla	r3, fp, r3, sl
 800f624:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f628:	f8dc 4000 	ldr.w	r4, [ip]
 800f62c:	4443      	add	r3, r8
 800f62e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f632:	fb0b 840a 	mla	r4, fp, sl, r8
 800f636:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f63a:	46e2      	mov	sl, ip
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f642:	454f      	cmp	r7, r9
 800f644:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f648:	f84a 3b04 	str.w	r3, [sl], #4
 800f64c:	d82b      	bhi.n	800f6a6 <__multiply+0x120>
 800f64e:	f8cc 8004 	str.w	r8, [ip, #4]
 800f652:	9b01      	ldr	r3, [sp, #4]
 800f654:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f658:	3204      	adds	r2, #4
 800f65a:	f1ba 0f00 	cmp.w	sl, #0
 800f65e:	d020      	beq.n	800f6a2 <__multiply+0x11c>
 800f660:	682b      	ldr	r3, [r5, #0]
 800f662:	4689      	mov	r9, r1
 800f664:	46a8      	mov	r8, r5
 800f666:	f04f 0b00 	mov.w	fp, #0
 800f66a:	f8b9 c000 	ldrh.w	ip, [r9]
 800f66e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f672:	fb0a 440c 	mla	r4, sl, ip, r4
 800f676:	445c      	add	r4, fp
 800f678:	46c4      	mov	ip, r8
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f680:	f84c 3b04 	str.w	r3, [ip], #4
 800f684:	f859 3b04 	ldr.w	r3, [r9], #4
 800f688:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f68c:	0c1b      	lsrs	r3, r3, #16
 800f68e:	fb0a b303 	mla	r3, sl, r3, fp
 800f692:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f696:	454f      	cmp	r7, r9
 800f698:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f69c:	d805      	bhi.n	800f6aa <__multiply+0x124>
 800f69e:	f8c8 3004 	str.w	r3, [r8, #4]
 800f6a2:	3504      	adds	r5, #4
 800f6a4:	e79b      	b.n	800f5de <__multiply+0x58>
 800f6a6:	46d4      	mov	ip, sl
 800f6a8:	e7b3      	b.n	800f612 <__multiply+0x8c>
 800f6aa:	46e0      	mov	r8, ip
 800f6ac:	e7dd      	b.n	800f66a <__multiply+0xe4>
 800f6ae:	3e01      	subs	r6, #1
 800f6b0:	e799      	b.n	800f5e6 <__multiply+0x60>
	...

0800f6b4 <__pow5mult>:
 800f6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b8:	4615      	mov	r5, r2
 800f6ba:	f012 0203 	ands.w	r2, r2, #3
 800f6be:	4606      	mov	r6, r0
 800f6c0:	460f      	mov	r7, r1
 800f6c2:	d007      	beq.n	800f6d4 <__pow5mult+0x20>
 800f6c4:	3a01      	subs	r2, #1
 800f6c6:	4c21      	ldr	r4, [pc, #132]	; (800f74c <__pow5mult+0x98>)
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6ce:	f7ff fe8a 	bl	800f3e6 <__multadd>
 800f6d2:	4607      	mov	r7, r0
 800f6d4:	10ad      	asrs	r5, r5, #2
 800f6d6:	d035      	beq.n	800f744 <__pow5mult+0x90>
 800f6d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f6da:	b93c      	cbnz	r4, 800f6ec <__pow5mult+0x38>
 800f6dc:	2010      	movs	r0, #16
 800f6de:	f7ff fe1d 	bl	800f31c <malloc>
 800f6e2:	6270      	str	r0, [r6, #36]	; 0x24
 800f6e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6e8:	6004      	str	r4, [r0, #0]
 800f6ea:	60c4      	str	r4, [r0, #12]
 800f6ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f6f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6f4:	b94c      	cbnz	r4, 800f70a <__pow5mult+0x56>
 800f6f6:	f240 2171 	movw	r1, #625	; 0x271
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	f7ff ff3a 	bl	800f574 <__i2b>
 800f700:	2300      	movs	r3, #0
 800f702:	f8c8 0008 	str.w	r0, [r8, #8]
 800f706:	4604      	mov	r4, r0
 800f708:	6003      	str	r3, [r0, #0]
 800f70a:	f04f 0800 	mov.w	r8, #0
 800f70e:	07eb      	lsls	r3, r5, #31
 800f710:	d50a      	bpl.n	800f728 <__pow5mult+0x74>
 800f712:	4639      	mov	r1, r7
 800f714:	4622      	mov	r2, r4
 800f716:	4630      	mov	r0, r6
 800f718:	f7ff ff35 	bl	800f586 <__multiply>
 800f71c:	4639      	mov	r1, r7
 800f71e:	4681      	mov	r9, r0
 800f720:	4630      	mov	r0, r6
 800f722:	f7ff fe49 	bl	800f3b8 <_Bfree>
 800f726:	464f      	mov	r7, r9
 800f728:	106d      	asrs	r5, r5, #1
 800f72a:	d00b      	beq.n	800f744 <__pow5mult+0x90>
 800f72c:	6820      	ldr	r0, [r4, #0]
 800f72e:	b938      	cbnz	r0, 800f740 <__pow5mult+0x8c>
 800f730:	4622      	mov	r2, r4
 800f732:	4621      	mov	r1, r4
 800f734:	4630      	mov	r0, r6
 800f736:	f7ff ff26 	bl	800f586 <__multiply>
 800f73a:	6020      	str	r0, [r4, #0]
 800f73c:	f8c0 8000 	str.w	r8, [r0]
 800f740:	4604      	mov	r4, r0
 800f742:	e7e4      	b.n	800f70e <__pow5mult+0x5a>
 800f744:	4638      	mov	r0, r7
 800f746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f74a:	bf00      	nop
 800f74c:	08010318 	.word	0x08010318

0800f750 <__lshift>:
 800f750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f754:	460c      	mov	r4, r1
 800f756:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f75a:	6923      	ldr	r3, [r4, #16]
 800f75c:	6849      	ldr	r1, [r1, #4]
 800f75e:	eb0a 0903 	add.w	r9, sl, r3
 800f762:	68a3      	ldr	r3, [r4, #8]
 800f764:	4607      	mov	r7, r0
 800f766:	4616      	mov	r6, r2
 800f768:	f109 0501 	add.w	r5, r9, #1
 800f76c:	42ab      	cmp	r3, r5
 800f76e:	db32      	blt.n	800f7d6 <__lshift+0x86>
 800f770:	4638      	mov	r0, r7
 800f772:	f7ff fded 	bl	800f350 <_Balloc>
 800f776:	2300      	movs	r3, #0
 800f778:	4680      	mov	r8, r0
 800f77a:	f100 0114 	add.w	r1, r0, #20
 800f77e:	461a      	mov	r2, r3
 800f780:	4553      	cmp	r3, sl
 800f782:	db2b      	blt.n	800f7dc <__lshift+0x8c>
 800f784:	6920      	ldr	r0, [r4, #16]
 800f786:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f78a:	f104 0314 	add.w	r3, r4, #20
 800f78e:	f016 021f 	ands.w	r2, r6, #31
 800f792:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f796:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f79a:	d025      	beq.n	800f7e8 <__lshift+0x98>
 800f79c:	f1c2 0e20 	rsb	lr, r2, #32
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	681e      	ldr	r6, [r3, #0]
 800f7a4:	468a      	mov	sl, r1
 800f7a6:	4096      	lsls	r6, r2
 800f7a8:	4330      	orrs	r0, r6
 800f7aa:	f84a 0b04 	str.w	r0, [sl], #4
 800f7ae:	f853 0b04 	ldr.w	r0, [r3], #4
 800f7b2:	459c      	cmp	ip, r3
 800f7b4:	fa20 f00e 	lsr.w	r0, r0, lr
 800f7b8:	d814      	bhi.n	800f7e4 <__lshift+0x94>
 800f7ba:	6048      	str	r0, [r1, #4]
 800f7bc:	b108      	cbz	r0, 800f7c2 <__lshift+0x72>
 800f7be:	f109 0502 	add.w	r5, r9, #2
 800f7c2:	3d01      	subs	r5, #1
 800f7c4:	4638      	mov	r0, r7
 800f7c6:	f8c8 5010 	str.w	r5, [r8, #16]
 800f7ca:	4621      	mov	r1, r4
 800f7cc:	f7ff fdf4 	bl	800f3b8 <_Bfree>
 800f7d0:	4640      	mov	r0, r8
 800f7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7d6:	3101      	adds	r1, #1
 800f7d8:	005b      	lsls	r3, r3, #1
 800f7da:	e7c7      	b.n	800f76c <__lshift+0x1c>
 800f7dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	e7cd      	b.n	800f780 <__lshift+0x30>
 800f7e4:	4651      	mov	r1, sl
 800f7e6:	e7dc      	b.n	800f7a2 <__lshift+0x52>
 800f7e8:	3904      	subs	r1, #4
 800f7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7f2:	459c      	cmp	ip, r3
 800f7f4:	d8f9      	bhi.n	800f7ea <__lshift+0x9a>
 800f7f6:	e7e4      	b.n	800f7c2 <__lshift+0x72>

0800f7f8 <__mcmp>:
 800f7f8:	6903      	ldr	r3, [r0, #16]
 800f7fa:	690a      	ldr	r2, [r1, #16]
 800f7fc:	1a9b      	subs	r3, r3, r2
 800f7fe:	b530      	push	{r4, r5, lr}
 800f800:	d10c      	bne.n	800f81c <__mcmp+0x24>
 800f802:	0092      	lsls	r2, r2, #2
 800f804:	3014      	adds	r0, #20
 800f806:	3114      	adds	r1, #20
 800f808:	1884      	adds	r4, r0, r2
 800f80a:	4411      	add	r1, r2
 800f80c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f810:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f814:	4295      	cmp	r5, r2
 800f816:	d003      	beq.n	800f820 <__mcmp+0x28>
 800f818:	d305      	bcc.n	800f826 <__mcmp+0x2e>
 800f81a:	2301      	movs	r3, #1
 800f81c:	4618      	mov	r0, r3
 800f81e:	bd30      	pop	{r4, r5, pc}
 800f820:	42a0      	cmp	r0, r4
 800f822:	d3f3      	bcc.n	800f80c <__mcmp+0x14>
 800f824:	e7fa      	b.n	800f81c <__mcmp+0x24>
 800f826:	f04f 33ff 	mov.w	r3, #4294967295
 800f82a:	e7f7      	b.n	800f81c <__mcmp+0x24>

0800f82c <__mdiff>:
 800f82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f830:	460d      	mov	r5, r1
 800f832:	4607      	mov	r7, r0
 800f834:	4611      	mov	r1, r2
 800f836:	4628      	mov	r0, r5
 800f838:	4614      	mov	r4, r2
 800f83a:	f7ff ffdd 	bl	800f7f8 <__mcmp>
 800f83e:	1e06      	subs	r6, r0, #0
 800f840:	d108      	bne.n	800f854 <__mdiff+0x28>
 800f842:	4631      	mov	r1, r6
 800f844:	4638      	mov	r0, r7
 800f846:	f7ff fd83 	bl	800f350 <_Balloc>
 800f84a:	2301      	movs	r3, #1
 800f84c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f854:	bfa4      	itt	ge
 800f856:	4623      	movge	r3, r4
 800f858:	462c      	movge	r4, r5
 800f85a:	4638      	mov	r0, r7
 800f85c:	6861      	ldr	r1, [r4, #4]
 800f85e:	bfa6      	itte	ge
 800f860:	461d      	movge	r5, r3
 800f862:	2600      	movge	r6, #0
 800f864:	2601      	movlt	r6, #1
 800f866:	f7ff fd73 	bl	800f350 <_Balloc>
 800f86a:	692b      	ldr	r3, [r5, #16]
 800f86c:	60c6      	str	r6, [r0, #12]
 800f86e:	6926      	ldr	r6, [r4, #16]
 800f870:	f105 0914 	add.w	r9, r5, #20
 800f874:	f104 0214 	add.w	r2, r4, #20
 800f878:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f87c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f880:	f100 0514 	add.w	r5, r0, #20
 800f884:	f04f 0e00 	mov.w	lr, #0
 800f888:	f852 ab04 	ldr.w	sl, [r2], #4
 800f88c:	f859 4b04 	ldr.w	r4, [r9], #4
 800f890:	fa1e f18a 	uxtah	r1, lr, sl
 800f894:	b2a3      	uxth	r3, r4
 800f896:	1ac9      	subs	r1, r1, r3
 800f898:	0c23      	lsrs	r3, r4, #16
 800f89a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f89e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f8a2:	b289      	uxth	r1, r1
 800f8a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f8a8:	45c8      	cmp	r8, r9
 800f8aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f8ae:	4694      	mov	ip, r2
 800f8b0:	f845 3b04 	str.w	r3, [r5], #4
 800f8b4:	d8e8      	bhi.n	800f888 <__mdiff+0x5c>
 800f8b6:	45bc      	cmp	ip, r7
 800f8b8:	d304      	bcc.n	800f8c4 <__mdiff+0x98>
 800f8ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f8be:	b183      	cbz	r3, 800f8e2 <__mdiff+0xb6>
 800f8c0:	6106      	str	r6, [r0, #16]
 800f8c2:	e7c5      	b.n	800f850 <__mdiff+0x24>
 800f8c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f8c8:	fa1e f381 	uxtah	r3, lr, r1
 800f8cc:	141a      	asrs	r2, r3, #16
 800f8ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f8dc:	f845 3b04 	str.w	r3, [r5], #4
 800f8e0:	e7e9      	b.n	800f8b6 <__mdiff+0x8a>
 800f8e2:	3e01      	subs	r6, #1
 800f8e4:	e7e9      	b.n	800f8ba <__mdiff+0x8e>
	...

0800f8e8 <__ulp>:
 800f8e8:	4b12      	ldr	r3, [pc, #72]	; (800f934 <__ulp+0x4c>)
 800f8ea:	ee10 2a90 	vmov	r2, s1
 800f8ee:	401a      	ands	r2, r3
 800f8f0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd04      	ble.n	800f902 <__ulp+0x1a>
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	ec41 0b10 	vmov	d0, r0, r1
 800f900:	4770      	bx	lr
 800f902:	425b      	negs	r3, r3
 800f904:	151b      	asrs	r3, r3, #20
 800f906:	2b13      	cmp	r3, #19
 800f908:	f04f 0000 	mov.w	r0, #0
 800f90c:	f04f 0100 	mov.w	r1, #0
 800f910:	dc04      	bgt.n	800f91c <__ulp+0x34>
 800f912:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f916:	fa42 f103 	asr.w	r1, r2, r3
 800f91a:	e7ef      	b.n	800f8fc <__ulp+0x14>
 800f91c:	3b14      	subs	r3, #20
 800f91e:	2b1e      	cmp	r3, #30
 800f920:	f04f 0201 	mov.w	r2, #1
 800f924:	bfda      	itte	le
 800f926:	f1c3 031f 	rsble	r3, r3, #31
 800f92a:	fa02 f303 	lslle.w	r3, r2, r3
 800f92e:	4613      	movgt	r3, r2
 800f930:	4618      	mov	r0, r3
 800f932:	e7e3      	b.n	800f8fc <__ulp+0x14>
 800f934:	7ff00000 	.word	0x7ff00000

0800f938 <__b2d>:
 800f938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f93a:	6905      	ldr	r5, [r0, #16]
 800f93c:	f100 0714 	add.w	r7, r0, #20
 800f940:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f944:	1f2e      	subs	r6, r5, #4
 800f946:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f94a:	4620      	mov	r0, r4
 800f94c:	f7ff fdc4 	bl	800f4d8 <__hi0bits>
 800f950:	f1c0 0320 	rsb	r3, r0, #32
 800f954:	280a      	cmp	r0, #10
 800f956:	600b      	str	r3, [r1, #0]
 800f958:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f9d0 <__b2d+0x98>
 800f95c:	dc14      	bgt.n	800f988 <__b2d+0x50>
 800f95e:	f1c0 0e0b 	rsb	lr, r0, #11
 800f962:	fa24 f10e 	lsr.w	r1, r4, lr
 800f966:	42b7      	cmp	r7, r6
 800f968:	ea41 030c 	orr.w	r3, r1, ip
 800f96c:	bf34      	ite	cc
 800f96e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f972:	2100      	movcs	r1, #0
 800f974:	3015      	adds	r0, #21
 800f976:	fa04 f000 	lsl.w	r0, r4, r0
 800f97a:	fa21 f10e 	lsr.w	r1, r1, lr
 800f97e:	ea40 0201 	orr.w	r2, r0, r1
 800f982:	ec43 2b10 	vmov	d0, r2, r3
 800f986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f988:	42b7      	cmp	r7, r6
 800f98a:	bf3a      	itte	cc
 800f98c:	f1a5 0608 	subcc.w	r6, r5, #8
 800f990:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f994:	2100      	movcs	r1, #0
 800f996:	380b      	subs	r0, #11
 800f998:	d015      	beq.n	800f9c6 <__b2d+0x8e>
 800f99a:	4084      	lsls	r4, r0
 800f99c:	f1c0 0520 	rsb	r5, r0, #32
 800f9a0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f9a4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f9a8:	42be      	cmp	r6, r7
 800f9aa:	fa21 fc05 	lsr.w	ip, r1, r5
 800f9ae:	ea44 030c 	orr.w	r3, r4, ip
 800f9b2:	bf8c      	ite	hi
 800f9b4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f9b8:	2400      	movls	r4, #0
 800f9ba:	fa01 f000 	lsl.w	r0, r1, r0
 800f9be:	40ec      	lsrs	r4, r5
 800f9c0:	ea40 0204 	orr.w	r2, r0, r4
 800f9c4:	e7dd      	b.n	800f982 <__b2d+0x4a>
 800f9c6:	ea44 030c 	orr.w	r3, r4, ip
 800f9ca:	460a      	mov	r2, r1
 800f9cc:	e7d9      	b.n	800f982 <__b2d+0x4a>
 800f9ce:	bf00      	nop
 800f9d0:	3ff00000 	.word	0x3ff00000

0800f9d4 <__d2b>:
 800f9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9d8:	460e      	mov	r6, r1
 800f9da:	2101      	movs	r1, #1
 800f9dc:	ec59 8b10 	vmov	r8, r9, d0
 800f9e0:	4615      	mov	r5, r2
 800f9e2:	f7ff fcb5 	bl	800f350 <_Balloc>
 800f9e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f9ea:	4607      	mov	r7, r0
 800f9ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9f0:	bb34      	cbnz	r4, 800fa40 <__d2b+0x6c>
 800f9f2:	9301      	str	r3, [sp, #4]
 800f9f4:	f1b8 0300 	subs.w	r3, r8, #0
 800f9f8:	d027      	beq.n	800fa4a <__d2b+0x76>
 800f9fa:	a802      	add	r0, sp, #8
 800f9fc:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fa00:	f7ff fd89 	bl	800f516 <__lo0bits>
 800fa04:	9900      	ldr	r1, [sp, #0]
 800fa06:	b1f0      	cbz	r0, 800fa46 <__d2b+0x72>
 800fa08:	9a01      	ldr	r2, [sp, #4]
 800fa0a:	f1c0 0320 	rsb	r3, r0, #32
 800fa0e:	fa02 f303 	lsl.w	r3, r2, r3
 800fa12:	430b      	orrs	r3, r1
 800fa14:	40c2      	lsrs	r2, r0
 800fa16:	617b      	str	r3, [r7, #20]
 800fa18:	9201      	str	r2, [sp, #4]
 800fa1a:	9b01      	ldr	r3, [sp, #4]
 800fa1c:	61bb      	str	r3, [r7, #24]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bf14      	ite	ne
 800fa22:	2102      	movne	r1, #2
 800fa24:	2101      	moveq	r1, #1
 800fa26:	6139      	str	r1, [r7, #16]
 800fa28:	b1c4      	cbz	r4, 800fa5c <__d2b+0x88>
 800fa2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fa2e:	4404      	add	r4, r0
 800fa30:	6034      	str	r4, [r6, #0]
 800fa32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa36:	6028      	str	r0, [r5, #0]
 800fa38:	4638      	mov	r0, r7
 800fa3a:	b003      	add	sp, #12
 800fa3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa44:	e7d5      	b.n	800f9f2 <__d2b+0x1e>
 800fa46:	6179      	str	r1, [r7, #20]
 800fa48:	e7e7      	b.n	800fa1a <__d2b+0x46>
 800fa4a:	a801      	add	r0, sp, #4
 800fa4c:	f7ff fd63 	bl	800f516 <__lo0bits>
 800fa50:	9b01      	ldr	r3, [sp, #4]
 800fa52:	617b      	str	r3, [r7, #20]
 800fa54:	2101      	movs	r1, #1
 800fa56:	6139      	str	r1, [r7, #16]
 800fa58:	3020      	adds	r0, #32
 800fa5a:	e7e5      	b.n	800fa28 <__d2b+0x54>
 800fa5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fa60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa64:	6030      	str	r0, [r6, #0]
 800fa66:	6918      	ldr	r0, [r3, #16]
 800fa68:	f7ff fd36 	bl	800f4d8 <__hi0bits>
 800fa6c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fa70:	e7e1      	b.n	800fa36 <__d2b+0x62>

0800fa72 <__ratio>:
 800fa72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa76:	4688      	mov	r8, r1
 800fa78:	4669      	mov	r1, sp
 800fa7a:	4681      	mov	r9, r0
 800fa7c:	f7ff ff5c 	bl	800f938 <__b2d>
 800fa80:	a901      	add	r1, sp, #4
 800fa82:	4640      	mov	r0, r8
 800fa84:	ec57 6b10 	vmov	r6, r7, d0
 800fa88:	ee10 4a10 	vmov	r4, s0
 800fa8c:	f7ff ff54 	bl	800f938 <__b2d>
 800fa90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fa98:	eba3 0c02 	sub.w	ip, r3, r2
 800fa9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800faa0:	1a9b      	subs	r3, r3, r2
 800faa2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800faa6:	ec51 0b10 	vmov	r0, r1, d0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	ee10 aa10 	vmov	sl, s0
 800fab0:	bfce      	itee	gt
 800fab2:	463a      	movgt	r2, r7
 800fab4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fab8:	460a      	movle	r2, r1
 800faba:	463d      	mov	r5, r7
 800fabc:	468b      	mov	fp, r1
 800fabe:	bfcc      	ite	gt
 800fac0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fac4:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fac8:	ec45 4b17 	vmov	d7, r4, r5
 800facc:	ec4b ab16 	vmov	d6, sl, fp
 800fad0:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800fad4:	b003      	add	sp, #12
 800fad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fada <__copybits>:
 800fada:	3901      	subs	r1, #1
 800fadc:	b510      	push	{r4, lr}
 800fade:	1149      	asrs	r1, r1, #5
 800fae0:	6914      	ldr	r4, [r2, #16]
 800fae2:	3101      	adds	r1, #1
 800fae4:	f102 0314 	add.w	r3, r2, #20
 800fae8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800faec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800faf0:	42a3      	cmp	r3, r4
 800faf2:	4602      	mov	r2, r0
 800faf4:	d303      	bcc.n	800fafe <__copybits+0x24>
 800faf6:	2300      	movs	r3, #0
 800faf8:	428a      	cmp	r2, r1
 800fafa:	d305      	bcc.n	800fb08 <__copybits+0x2e>
 800fafc:	bd10      	pop	{r4, pc}
 800fafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb02:	f840 2b04 	str.w	r2, [r0], #4
 800fb06:	e7f3      	b.n	800faf0 <__copybits+0x16>
 800fb08:	f842 3b04 	str.w	r3, [r2], #4
 800fb0c:	e7f4      	b.n	800faf8 <__copybits+0x1e>

0800fb0e <__any_on>:
 800fb0e:	f100 0214 	add.w	r2, r0, #20
 800fb12:	6900      	ldr	r0, [r0, #16]
 800fb14:	114b      	asrs	r3, r1, #5
 800fb16:	4298      	cmp	r0, r3
 800fb18:	b510      	push	{r4, lr}
 800fb1a:	db11      	blt.n	800fb40 <__any_on+0x32>
 800fb1c:	dd0a      	ble.n	800fb34 <__any_on+0x26>
 800fb1e:	f011 011f 	ands.w	r1, r1, #31
 800fb22:	d007      	beq.n	800fb34 <__any_on+0x26>
 800fb24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb28:	fa24 f001 	lsr.w	r0, r4, r1
 800fb2c:	fa00 f101 	lsl.w	r1, r0, r1
 800fb30:	428c      	cmp	r4, r1
 800fb32:	d10b      	bne.n	800fb4c <__any_on+0x3e>
 800fb34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d803      	bhi.n	800fb44 <__any_on+0x36>
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	bd10      	pop	{r4, pc}
 800fb40:	4603      	mov	r3, r0
 800fb42:	e7f7      	b.n	800fb34 <__any_on+0x26>
 800fb44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb48:	2900      	cmp	r1, #0
 800fb4a:	d0f5      	beq.n	800fb38 <__any_on+0x2a>
 800fb4c:	2001      	movs	r0, #1
 800fb4e:	e7f6      	b.n	800fb3e <__any_on+0x30>

0800fb50 <_calloc_r>:
 800fb50:	b538      	push	{r3, r4, r5, lr}
 800fb52:	fb02 f401 	mul.w	r4, r2, r1
 800fb56:	4621      	mov	r1, r4
 800fb58:	f000 f856 	bl	800fc08 <_malloc_r>
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	b118      	cbz	r0, 800fb68 <_calloc_r+0x18>
 800fb60:	4622      	mov	r2, r4
 800fb62:	2100      	movs	r1, #0
 800fb64:	f7fc fe07 	bl	800c776 <memset>
 800fb68:	4628      	mov	r0, r5
 800fb6a:	bd38      	pop	{r3, r4, r5, pc}

0800fb6c <_free_r>:
 800fb6c:	b538      	push	{r3, r4, r5, lr}
 800fb6e:	4605      	mov	r5, r0
 800fb70:	2900      	cmp	r1, #0
 800fb72:	d045      	beq.n	800fc00 <_free_r+0x94>
 800fb74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb78:	1f0c      	subs	r4, r1, #4
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	bfb8      	it	lt
 800fb7e:	18e4      	addlt	r4, r4, r3
 800fb80:	f000 fa36 	bl	800fff0 <__malloc_lock>
 800fb84:	4a1f      	ldr	r2, [pc, #124]	; (800fc04 <_free_r+0x98>)
 800fb86:	6813      	ldr	r3, [r2, #0]
 800fb88:	4610      	mov	r0, r2
 800fb8a:	b933      	cbnz	r3, 800fb9a <_free_r+0x2e>
 800fb8c:	6063      	str	r3, [r4, #4]
 800fb8e:	6014      	str	r4, [r2, #0]
 800fb90:	4628      	mov	r0, r5
 800fb92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb96:	f000 ba2c 	b.w	800fff2 <__malloc_unlock>
 800fb9a:	42a3      	cmp	r3, r4
 800fb9c:	d90c      	bls.n	800fbb8 <_free_r+0x4c>
 800fb9e:	6821      	ldr	r1, [r4, #0]
 800fba0:	1862      	adds	r2, r4, r1
 800fba2:	4293      	cmp	r3, r2
 800fba4:	bf04      	itt	eq
 800fba6:	681a      	ldreq	r2, [r3, #0]
 800fba8:	685b      	ldreq	r3, [r3, #4]
 800fbaa:	6063      	str	r3, [r4, #4]
 800fbac:	bf04      	itt	eq
 800fbae:	1852      	addeq	r2, r2, r1
 800fbb0:	6022      	streq	r2, [r4, #0]
 800fbb2:	6004      	str	r4, [r0, #0]
 800fbb4:	e7ec      	b.n	800fb90 <_free_r+0x24>
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	b10a      	cbz	r2, 800fbc0 <_free_r+0x54>
 800fbbc:	42a2      	cmp	r2, r4
 800fbbe:	d9fa      	bls.n	800fbb6 <_free_r+0x4a>
 800fbc0:	6819      	ldr	r1, [r3, #0]
 800fbc2:	1858      	adds	r0, r3, r1
 800fbc4:	42a0      	cmp	r0, r4
 800fbc6:	d10b      	bne.n	800fbe0 <_free_r+0x74>
 800fbc8:	6820      	ldr	r0, [r4, #0]
 800fbca:	4401      	add	r1, r0
 800fbcc:	1858      	adds	r0, r3, r1
 800fbce:	4282      	cmp	r2, r0
 800fbd0:	6019      	str	r1, [r3, #0]
 800fbd2:	d1dd      	bne.n	800fb90 <_free_r+0x24>
 800fbd4:	6810      	ldr	r0, [r2, #0]
 800fbd6:	6852      	ldr	r2, [r2, #4]
 800fbd8:	605a      	str	r2, [r3, #4]
 800fbda:	4401      	add	r1, r0
 800fbdc:	6019      	str	r1, [r3, #0]
 800fbde:	e7d7      	b.n	800fb90 <_free_r+0x24>
 800fbe0:	d902      	bls.n	800fbe8 <_free_r+0x7c>
 800fbe2:	230c      	movs	r3, #12
 800fbe4:	602b      	str	r3, [r5, #0]
 800fbe6:	e7d3      	b.n	800fb90 <_free_r+0x24>
 800fbe8:	6820      	ldr	r0, [r4, #0]
 800fbea:	1821      	adds	r1, r4, r0
 800fbec:	428a      	cmp	r2, r1
 800fbee:	bf04      	itt	eq
 800fbf0:	6811      	ldreq	r1, [r2, #0]
 800fbf2:	6852      	ldreq	r2, [r2, #4]
 800fbf4:	6062      	str	r2, [r4, #4]
 800fbf6:	bf04      	itt	eq
 800fbf8:	1809      	addeq	r1, r1, r0
 800fbfa:	6021      	streq	r1, [r4, #0]
 800fbfc:	605c      	str	r4, [r3, #4]
 800fbfe:	e7c7      	b.n	800fb90 <_free_r+0x24>
 800fc00:	bd38      	pop	{r3, r4, r5, pc}
 800fc02:	bf00      	nop
 800fc04:	2000d384 	.word	0x2000d384

0800fc08 <_malloc_r>:
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	1ccd      	adds	r5, r1, #3
 800fc0c:	f025 0503 	bic.w	r5, r5, #3
 800fc10:	3508      	adds	r5, #8
 800fc12:	2d0c      	cmp	r5, #12
 800fc14:	bf38      	it	cc
 800fc16:	250c      	movcc	r5, #12
 800fc18:	2d00      	cmp	r5, #0
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	db01      	blt.n	800fc22 <_malloc_r+0x1a>
 800fc1e:	42a9      	cmp	r1, r5
 800fc20:	d903      	bls.n	800fc2a <_malloc_r+0x22>
 800fc22:	230c      	movs	r3, #12
 800fc24:	6033      	str	r3, [r6, #0]
 800fc26:	2000      	movs	r0, #0
 800fc28:	bd70      	pop	{r4, r5, r6, pc}
 800fc2a:	f000 f9e1 	bl	800fff0 <__malloc_lock>
 800fc2e:	4a21      	ldr	r2, [pc, #132]	; (800fcb4 <_malloc_r+0xac>)
 800fc30:	6814      	ldr	r4, [r2, #0]
 800fc32:	4621      	mov	r1, r4
 800fc34:	b991      	cbnz	r1, 800fc5c <_malloc_r+0x54>
 800fc36:	4c20      	ldr	r4, [pc, #128]	; (800fcb8 <_malloc_r+0xb0>)
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	b91b      	cbnz	r3, 800fc44 <_malloc_r+0x3c>
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	f000 f98f 	bl	800ff60 <_sbrk_r>
 800fc42:	6020      	str	r0, [r4, #0]
 800fc44:	4629      	mov	r1, r5
 800fc46:	4630      	mov	r0, r6
 800fc48:	f000 f98a 	bl	800ff60 <_sbrk_r>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d124      	bne.n	800fc9a <_malloc_r+0x92>
 800fc50:	230c      	movs	r3, #12
 800fc52:	6033      	str	r3, [r6, #0]
 800fc54:	4630      	mov	r0, r6
 800fc56:	f000 f9cc 	bl	800fff2 <__malloc_unlock>
 800fc5a:	e7e4      	b.n	800fc26 <_malloc_r+0x1e>
 800fc5c:	680b      	ldr	r3, [r1, #0]
 800fc5e:	1b5b      	subs	r3, r3, r5
 800fc60:	d418      	bmi.n	800fc94 <_malloc_r+0x8c>
 800fc62:	2b0b      	cmp	r3, #11
 800fc64:	d90f      	bls.n	800fc86 <_malloc_r+0x7e>
 800fc66:	600b      	str	r3, [r1, #0]
 800fc68:	50cd      	str	r5, [r1, r3]
 800fc6a:	18cc      	adds	r4, r1, r3
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	f000 f9c0 	bl	800fff2 <__malloc_unlock>
 800fc72:	f104 000b 	add.w	r0, r4, #11
 800fc76:	1d23      	adds	r3, r4, #4
 800fc78:	f020 0007 	bic.w	r0, r0, #7
 800fc7c:	1ac3      	subs	r3, r0, r3
 800fc7e:	d0d3      	beq.n	800fc28 <_malloc_r+0x20>
 800fc80:	425a      	negs	r2, r3
 800fc82:	50e2      	str	r2, [r4, r3]
 800fc84:	e7d0      	b.n	800fc28 <_malloc_r+0x20>
 800fc86:	428c      	cmp	r4, r1
 800fc88:	684b      	ldr	r3, [r1, #4]
 800fc8a:	bf16      	itet	ne
 800fc8c:	6063      	strne	r3, [r4, #4]
 800fc8e:	6013      	streq	r3, [r2, #0]
 800fc90:	460c      	movne	r4, r1
 800fc92:	e7eb      	b.n	800fc6c <_malloc_r+0x64>
 800fc94:	460c      	mov	r4, r1
 800fc96:	6849      	ldr	r1, [r1, #4]
 800fc98:	e7cc      	b.n	800fc34 <_malloc_r+0x2c>
 800fc9a:	1cc4      	adds	r4, r0, #3
 800fc9c:	f024 0403 	bic.w	r4, r4, #3
 800fca0:	42a0      	cmp	r0, r4
 800fca2:	d005      	beq.n	800fcb0 <_malloc_r+0xa8>
 800fca4:	1a21      	subs	r1, r4, r0
 800fca6:	4630      	mov	r0, r6
 800fca8:	f000 f95a 	bl	800ff60 <_sbrk_r>
 800fcac:	3001      	adds	r0, #1
 800fcae:	d0cf      	beq.n	800fc50 <_malloc_r+0x48>
 800fcb0:	6025      	str	r5, [r4, #0]
 800fcb2:	e7db      	b.n	800fc6c <_malloc_r+0x64>
 800fcb4:	2000d384 	.word	0x2000d384
 800fcb8:	2000d388 	.word	0x2000d388

0800fcbc <__ssputs_r>:
 800fcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcc0:	688e      	ldr	r6, [r1, #8]
 800fcc2:	429e      	cmp	r6, r3
 800fcc4:	4682      	mov	sl, r0
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	4690      	mov	r8, r2
 800fcca:	4699      	mov	r9, r3
 800fccc:	d837      	bhi.n	800fd3e <__ssputs_r+0x82>
 800fcce:	898a      	ldrh	r2, [r1, #12]
 800fcd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fcd4:	d031      	beq.n	800fd3a <__ssputs_r+0x7e>
 800fcd6:	6825      	ldr	r5, [r4, #0]
 800fcd8:	6909      	ldr	r1, [r1, #16]
 800fcda:	1a6f      	subs	r7, r5, r1
 800fcdc:	6965      	ldr	r5, [r4, #20]
 800fcde:	2302      	movs	r3, #2
 800fce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fce4:	fb95 f5f3 	sdiv	r5, r5, r3
 800fce8:	f109 0301 	add.w	r3, r9, #1
 800fcec:	443b      	add	r3, r7
 800fcee:	429d      	cmp	r5, r3
 800fcf0:	bf38      	it	cc
 800fcf2:	461d      	movcc	r5, r3
 800fcf4:	0553      	lsls	r3, r2, #21
 800fcf6:	d530      	bpl.n	800fd5a <__ssputs_r+0x9e>
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	f7ff ff85 	bl	800fc08 <_malloc_r>
 800fcfe:	4606      	mov	r6, r0
 800fd00:	b950      	cbnz	r0, 800fd18 <__ssputs_r+0x5c>
 800fd02:	230c      	movs	r3, #12
 800fd04:	f8ca 3000 	str.w	r3, [sl]
 800fd08:	89a3      	ldrh	r3, [r4, #12]
 800fd0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd0e:	81a3      	strh	r3, [r4, #12]
 800fd10:	f04f 30ff 	mov.w	r0, #4294967295
 800fd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd18:	463a      	mov	r2, r7
 800fd1a:	6921      	ldr	r1, [r4, #16]
 800fd1c:	f7fc fd20 	bl	800c760 <memcpy>
 800fd20:	89a3      	ldrh	r3, [r4, #12]
 800fd22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd2a:	81a3      	strh	r3, [r4, #12]
 800fd2c:	6126      	str	r6, [r4, #16]
 800fd2e:	6165      	str	r5, [r4, #20]
 800fd30:	443e      	add	r6, r7
 800fd32:	1bed      	subs	r5, r5, r7
 800fd34:	6026      	str	r6, [r4, #0]
 800fd36:	60a5      	str	r5, [r4, #8]
 800fd38:	464e      	mov	r6, r9
 800fd3a:	454e      	cmp	r6, r9
 800fd3c:	d900      	bls.n	800fd40 <__ssputs_r+0x84>
 800fd3e:	464e      	mov	r6, r9
 800fd40:	4632      	mov	r2, r6
 800fd42:	4641      	mov	r1, r8
 800fd44:	6820      	ldr	r0, [r4, #0]
 800fd46:	f000 f93a 	bl	800ffbe <memmove>
 800fd4a:	68a3      	ldr	r3, [r4, #8]
 800fd4c:	1b9b      	subs	r3, r3, r6
 800fd4e:	60a3      	str	r3, [r4, #8]
 800fd50:	6823      	ldr	r3, [r4, #0]
 800fd52:	441e      	add	r6, r3
 800fd54:	6026      	str	r6, [r4, #0]
 800fd56:	2000      	movs	r0, #0
 800fd58:	e7dc      	b.n	800fd14 <__ssputs_r+0x58>
 800fd5a:	462a      	mov	r2, r5
 800fd5c:	f000 f94a 	bl	800fff4 <_realloc_r>
 800fd60:	4606      	mov	r6, r0
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d1e2      	bne.n	800fd2c <__ssputs_r+0x70>
 800fd66:	6921      	ldr	r1, [r4, #16]
 800fd68:	4650      	mov	r0, sl
 800fd6a:	f7ff feff 	bl	800fb6c <_free_r>
 800fd6e:	e7c8      	b.n	800fd02 <__ssputs_r+0x46>

0800fd70 <_svfiprintf_r>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	461d      	mov	r5, r3
 800fd76:	898b      	ldrh	r3, [r1, #12]
 800fd78:	061f      	lsls	r7, r3, #24
 800fd7a:	b09d      	sub	sp, #116	; 0x74
 800fd7c:	4680      	mov	r8, r0
 800fd7e:	460c      	mov	r4, r1
 800fd80:	4616      	mov	r6, r2
 800fd82:	d50f      	bpl.n	800fda4 <_svfiprintf_r+0x34>
 800fd84:	690b      	ldr	r3, [r1, #16]
 800fd86:	b96b      	cbnz	r3, 800fda4 <_svfiprintf_r+0x34>
 800fd88:	2140      	movs	r1, #64	; 0x40
 800fd8a:	f7ff ff3d 	bl	800fc08 <_malloc_r>
 800fd8e:	6020      	str	r0, [r4, #0]
 800fd90:	6120      	str	r0, [r4, #16]
 800fd92:	b928      	cbnz	r0, 800fda0 <_svfiprintf_r+0x30>
 800fd94:	230c      	movs	r3, #12
 800fd96:	f8c8 3000 	str.w	r3, [r8]
 800fd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd9e:	e0c8      	b.n	800ff32 <_svfiprintf_r+0x1c2>
 800fda0:	2340      	movs	r3, #64	; 0x40
 800fda2:	6163      	str	r3, [r4, #20]
 800fda4:	2300      	movs	r3, #0
 800fda6:	9309      	str	r3, [sp, #36]	; 0x24
 800fda8:	2320      	movs	r3, #32
 800fdaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdae:	2330      	movs	r3, #48	; 0x30
 800fdb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdb4:	9503      	str	r5, [sp, #12]
 800fdb6:	f04f 0b01 	mov.w	fp, #1
 800fdba:	4637      	mov	r7, r6
 800fdbc:	463d      	mov	r5, r7
 800fdbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fdc2:	b10b      	cbz	r3, 800fdc8 <_svfiprintf_r+0x58>
 800fdc4:	2b25      	cmp	r3, #37	; 0x25
 800fdc6:	d13e      	bne.n	800fe46 <_svfiprintf_r+0xd6>
 800fdc8:	ebb7 0a06 	subs.w	sl, r7, r6
 800fdcc:	d00b      	beq.n	800fde6 <_svfiprintf_r+0x76>
 800fdce:	4653      	mov	r3, sl
 800fdd0:	4632      	mov	r2, r6
 800fdd2:	4621      	mov	r1, r4
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	f7ff ff71 	bl	800fcbc <__ssputs_r>
 800fdda:	3001      	adds	r0, #1
 800fddc:	f000 80a4 	beq.w	800ff28 <_svfiprintf_r+0x1b8>
 800fde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde2:	4453      	add	r3, sl
 800fde4:	9309      	str	r3, [sp, #36]	; 0x24
 800fde6:	783b      	ldrb	r3, [r7, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	f000 809d 	beq.w	800ff28 <_svfiprintf_r+0x1b8>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fdf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdf8:	9304      	str	r3, [sp, #16]
 800fdfa:	9307      	str	r3, [sp, #28]
 800fdfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe00:	931a      	str	r3, [sp, #104]	; 0x68
 800fe02:	462f      	mov	r7, r5
 800fe04:	2205      	movs	r2, #5
 800fe06:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fe0a:	4850      	ldr	r0, [pc, #320]	; (800ff4c <_svfiprintf_r+0x1dc>)
 800fe0c:	f7f0 fa20 	bl	8000250 <memchr>
 800fe10:	9b04      	ldr	r3, [sp, #16]
 800fe12:	b9d0      	cbnz	r0, 800fe4a <_svfiprintf_r+0xda>
 800fe14:	06d9      	lsls	r1, r3, #27
 800fe16:	bf44      	itt	mi
 800fe18:	2220      	movmi	r2, #32
 800fe1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe1e:	071a      	lsls	r2, r3, #28
 800fe20:	bf44      	itt	mi
 800fe22:	222b      	movmi	r2, #43	; 0x2b
 800fe24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe28:	782a      	ldrb	r2, [r5, #0]
 800fe2a:	2a2a      	cmp	r2, #42	; 0x2a
 800fe2c:	d015      	beq.n	800fe5a <_svfiprintf_r+0xea>
 800fe2e:	9a07      	ldr	r2, [sp, #28]
 800fe30:	462f      	mov	r7, r5
 800fe32:	2000      	movs	r0, #0
 800fe34:	250a      	movs	r5, #10
 800fe36:	4639      	mov	r1, r7
 800fe38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe3c:	3b30      	subs	r3, #48	; 0x30
 800fe3e:	2b09      	cmp	r3, #9
 800fe40:	d94d      	bls.n	800fede <_svfiprintf_r+0x16e>
 800fe42:	b1b8      	cbz	r0, 800fe74 <_svfiprintf_r+0x104>
 800fe44:	e00f      	b.n	800fe66 <_svfiprintf_r+0xf6>
 800fe46:	462f      	mov	r7, r5
 800fe48:	e7b8      	b.n	800fdbc <_svfiprintf_r+0x4c>
 800fe4a:	4a40      	ldr	r2, [pc, #256]	; (800ff4c <_svfiprintf_r+0x1dc>)
 800fe4c:	1a80      	subs	r0, r0, r2
 800fe4e:	fa0b f000 	lsl.w	r0, fp, r0
 800fe52:	4318      	orrs	r0, r3
 800fe54:	9004      	str	r0, [sp, #16]
 800fe56:	463d      	mov	r5, r7
 800fe58:	e7d3      	b.n	800fe02 <_svfiprintf_r+0x92>
 800fe5a:	9a03      	ldr	r2, [sp, #12]
 800fe5c:	1d11      	adds	r1, r2, #4
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	9103      	str	r1, [sp, #12]
 800fe62:	2a00      	cmp	r2, #0
 800fe64:	db01      	blt.n	800fe6a <_svfiprintf_r+0xfa>
 800fe66:	9207      	str	r2, [sp, #28]
 800fe68:	e004      	b.n	800fe74 <_svfiprintf_r+0x104>
 800fe6a:	4252      	negs	r2, r2
 800fe6c:	f043 0302 	orr.w	r3, r3, #2
 800fe70:	9207      	str	r2, [sp, #28]
 800fe72:	9304      	str	r3, [sp, #16]
 800fe74:	783b      	ldrb	r3, [r7, #0]
 800fe76:	2b2e      	cmp	r3, #46	; 0x2e
 800fe78:	d10c      	bne.n	800fe94 <_svfiprintf_r+0x124>
 800fe7a:	787b      	ldrb	r3, [r7, #1]
 800fe7c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe7e:	d133      	bne.n	800fee8 <_svfiprintf_r+0x178>
 800fe80:	9b03      	ldr	r3, [sp, #12]
 800fe82:	1d1a      	adds	r2, r3, #4
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	9203      	str	r2, [sp, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	bfb8      	it	lt
 800fe8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe90:	3702      	adds	r7, #2
 800fe92:	9305      	str	r3, [sp, #20]
 800fe94:	4d2e      	ldr	r5, [pc, #184]	; (800ff50 <_svfiprintf_r+0x1e0>)
 800fe96:	7839      	ldrb	r1, [r7, #0]
 800fe98:	2203      	movs	r2, #3
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	f7f0 f9d8 	bl	8000250 <memchr>
 800fea0:	b138      	cbz	r0, 800feb2 <_svfiprintf_r+0x142>
 800fea2:	2340      	movs	r3, #64	; 0x40
 800fea4:	1b40      	subs	r0, r0, r5
 800fea6:	fa03 f000 	lsl.w	r0, r3, r0
 800feaa:	9b04      	ldr	r3, [sp, #16]
 800feac:	4303      	orrs	r3, r0
 800feae:	3701      	adds	r7, #1
 800feb0:	9304      	str	r3, [sp, #16]
 800feb2:	7839      	ldrb	r1, [r7, #0]
 800feb4:	4827      	ldr	r0, [pc, #156]	; (800ff54 <_svfiprintf_r+0x1e4>)
 800feb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800feba:	2206      	movs	r2, #6
 800febc:	1c7e      	adds	r6, r7, #1
 800febe:	f7f0 f9c7 	bl	8000250 <memchr>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d038      	beq.n	800ff38 <_svfiprintf_r+0x1c8>
 800fec6:	4b24      	ldr	r3, [pc, #144]	; (800ff58 <_svfiprintf_r+0x1e8>)
 800fec8:	bb13      	cbnz	r3, 800ff10 <_svfiprintf_r+0x1a0>
 800feca:	9b03      	ldr	r3, [sp, #12]
 800fecc:	3307      	adds	r3, #7
 800fece:	f023 0307 	bic.w	r3, r3, #7
 800fed2:	3308      	adds	r3, #8
 800fed4:	9303      	str	r3, [sp, #12]
 800fed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed8:	444b      	add	r3, r9
 800feda:	9309      	str	r3, [sp, #36]	; 0x24
 800fedc:	e76d      	b.n	800fdba <_svfiprintf_r+0x4a>
 800fede:	fb05 3202 	mla	r2, r5, r2, r3
 800fee2:	2001      	movs	r0, #1
 800fee4:	460f      	mov	r7, r1
 800fee6:	e7a6      	b.n	800fe36 <_svfiprintf_r+0xc6>
 800fee8:	2300      	movs	r3, #0
 800feea:	3701      	adds	r7, #1
 800feec:	9305      	str	r3, [sp, #20]
 800feee:	4619      	mov	r1, r3
 800fef0:	250a      	movs	r5, #10
 800fef2:	4638      	mov	r0, r7
 800fef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fef8:	3a30      	subs	r2, #48	; 0x30
 800fefa:	2a09      	cmp	r2, #9
 800fefc:	d903      	bls.n	800ff06 <_svfiprintf_r+0x196>
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d0c8      	beq.n	800fe94 <_svfiprintf_r+0x124>
 800ff02:	9105      	str	r1, [sp, #20]
 800ff04:	e7c6      	b.n	800fe94 <_svfiprintf_r+0x124>
 800ff06:	fb05 2101 	mla	r1, r5, r1, r2
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	e7f0      	b.n	800fef2 <_svfiprintf_r+0x182>
 800ff10:	ab03      	add	r3, sp, #12
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	4622      	mov	r2, r4
 800ff16:	4b11      	ldr	r3, [pc, #68]	; (800ff5c <_svfiprintf_r+0x1ec>)
 800ff18:	a904      	add	r1, sp, #16
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	f7fc fcb8 	bl	800c890 <_printf_float>
 800ff20:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ff24:	4681      	mov	r9, r0
 800ff26:	d1d6      	bne.n	800fed6 <_svfiprintf_r+0x166>
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	065b      	lsls	r3, r3, #25
 800ff2c:	f53f af35 	bmi.w	800fd9a <_svfiprintf_r+0x2a>
 800ff30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff32:	b01d      	add	sp, #116	; 0x74
 800ff34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff38:	ab03      	add	r3, sp, #12
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	4b07      	ldr	r3, [pc, #28]	; (800ff5c <_svfiprintf_r+0x1ec>)
 800ff40:	a904      	add	r1, sp, #16
 800ff42:	4640      	mov	r0, r8
 800ff44:	f7fc ff46 	bl	800cdd4 <_printf_i>
 800ff48:	e7ea      	b.n	800ff20 <_svfiprintf_r+0x1b0>
 800ff4a:	bf00      	nop
 800ff4c:	08010324 	.word	0x08010324
 800ff50:	0801032a 	.word	0x0801032a
 800ff54:	0801032e 	.word	0x0801032e
 800ff58:	0800c891 	.word	0x0800c891
 800ff5c:	0800fcbd 	.word	0x0800fcbd

0800ff60 <_sbrk_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4c06      	ldr	r4, [pc, #24]	; (800ff7c <_sbrk_r+0x1c>)
 800ff64:	2300      	movs	r3, #0
 800ff66:	4605      	mov	r5, r0
 800ff68:	4608      	mov	r0, r1
 800ff6a:	6023      	str	r3, [r4, #0]
 800ff6c:	f7f3 fd4e 	bl	8003a0c <_sbrk>
 800ff70:	1c43      	adds	r3, r0, #1
 800ff72:	d102      	bne.n	800ff7a <_sbrk_r+0x1a>
 800ff74:	6823      	ldr	r3, [r4, #0]
 800ff76:	b103      	cbz	r3, 800ff7a <_sbrk_r+0x1a>
 800ff78:	602b      	str	r3, [r5, #0]
 800ff7a:	bd38      	pop	{r3, r4, r5, pc}
 800ff7c:	20021150 	.word	0x20021150

0800ff80 <strncmp>:
 800ff80:	b510      	push	{r4, lr}
 800ff82:	b16a      	cbz	r2, 800ffa0 <strncmp+0x20>
 800ff84:	3901      	subs	r1, #1
 800ff86:	1884      	adds	r4, r0, r2
 800ff88:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ff8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d103      	bne.n	800ff9c <strncmp+0x1c>
 800ff94:	42a0      	cmp	r0, r4
 800ff96:	d001      	beq.n	800ff9c <strncmp+0x1c>
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d1f5      	bne.n	800ff88 <strncmp+0x8>
 800ff9c:	1a98      	subs	r0, r3, r2
 800ff9e:	bd10      	pop	{r4, pc}
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	e7fc      	b.n	800ff9e <strncmp+0x1e>

0800ffa4 <__ascii_wctomb>:
 800ffa4:	b149      	cbz	r1, 800ffba <__ascii_wctomb+0x16>
 800ffa6:	2aff      	cmp	r2, #255	; 0xff
 800ffa8:	bf85      	ittet	hi
 800ffaa:	238a      	movhi	r3, #138	; 0x8a
 800ffac:	6003      	strhi	r3, [r0, #0]
 800ffae:	700a      	strbls	r2, [r1, #0]
 800ffb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffb4:	bf98      	it	ls
 800ffb6:	2001      	movls	r0, #1
 800ffb8:	4770      	bx	lr
 800ffba:	4608      	mov	r0, r1
 800ffbc:	4770      	bx	lr

0800ffbe <memmove>:
 800ffbe:	4288      	cmp	r0, r1
 800ffc0:	b510      	push	{r4, lr}
 800ffc2:	eb01 0302 	add.w	r3, r1, r2
 800ffc6:	d807      	bhi.n	800ffd8 <memmove+0x1a>
 800ffc8:	1e42      	subs	r2, r0, #1
 800ffca:	4299      	cmp	r1, r3
 800ffcc:	d00a      	beq.n	800ffe4 <memmove+0x26>
 800ffce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffd2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ffd6:	e7f8      	b.n	800ffca <memmove+0xc>
 800ffd8:	4283      	cmp	r3, r0
 800ffda:	d9f5      	bls.n	800ffc8 <memmove+0xa>
 800ffdc:	1881      	adds	r1, r0, r2
 800ffde:	1ad2      	subs	r2, r2, r3
 800ffe0:	42d3      	cmn	r3, r2
 800ffe2:	d100      	bne.n	800ffe6 <memmove+0x28>
 800ffe4:	bd10      	pop	{r4, pc}
 800ffe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ffee:	e7f7      	b.n	800ffe0 <memmove+0x22>

0800fff0 <__malloc_lock>:
 800fff0:	4770      	bx	lr

0800fff2 <__malloc_unlock>:
 800fff2:	4770      	bx	lr

0800fff4 <_realloc_r>:
 800fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff6:	4607      	mov	r7, r0
 800fff8:	4614      	mov	r4, r2
 800fffa:	460e      	mov	r6, r1
 800fffc:	b921      	cbnz	r1, 8010008 <_realloc_r+0x14>
 800fffe:	4611      	mov	r1, r2
 8010000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010004:	f7ff be00 	b.w	800fc08 <_malloc_r>
 8010008:	b922      	cbnz	r2, 8010014 <_realloc_r+0x20>
 801000a:	f7ff fdaf 	bl	800fb6c <_free_r>
 801000e:	4625      	mov	r5, r4
 8010010:	4628      	mov	r0, r5
 8010012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010014:	f000 f814 	bl	8010040 <_malloc_usable_size_r>
 8010018:	42a0      	cmp	r0, r4
 801001a:	d20f      	bcs.n	801003c <_realloc_r+0x48>
 801001c:	4621      	mov	r1, r4
 801001e:	4638      	mov	r0, r7
 8010020:	f7ff fdf2 	bl	800fc08 <_malloc_r>
 8010024:	4605      	mov	r5, r0
 8010026:	2800      	cmp	r0, #0
 8010028:	d0f2      	beq.n	8010010 <_realloc_r+0x1c>
 801002a:	4631      	mov	r1, r6
 801002c:	4622      	mov	r2, r4
 801002e:	f7fc fb97 	bl	800c760 <memcpy>
 8010032:	4631      	mov	r1, r6
 8010034:	4638      	mov	r0, r7
 8010036:	f7ff fd99 	bl	800fb6c <_free_r>
 801003a:	e7e9      	b.n	8010010 <_realloc_r+0x1c>
 801003c:	4635      	mov	r5, r6
 801003e:	e7e7      	b.n	8010010 <_realloc_r+0x1c>

08010040 <_malloc_usable_size_r>:
 8010040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010044:	1f18      	subs	r0, r3, #4
 8010046:	2b00      	cmp	r3, #0
 8010048:	bfbc      	itt	lt
 801004a:	580b      	ldrlt	r3, [r1, r0]
 801004c:	18c0      	addlt	r0, r0, r3
 801004e:	4770      	bx	lr

08010050 <_init>:
 8010050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010052:	bf00      	nop
 8010054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010056:	bc08      	pop	{r3}
 8010058:	469e      	mov	lr, r3
 801005a:	4770      	bx	lr

0801005c <_fini>:
 801005c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005e:	bf00      	nop
 8010060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010062:	bc08      	pop	{r3}
 8010064:	469e      	mov	lr, r3
 8010066:	4770      	bx	lr
