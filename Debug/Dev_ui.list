
Dev_ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017488  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001580  08017688  08017688  00027688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c08  08018c08  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08018c08  08018c08  00028c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c10  08018c10  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c10  08018c10  00028c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018c14  08018c14  00028c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08018c18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030e44  20000378  08018f90  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200311bc  08018f90  000311bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033b41  00000000  00000000  000303a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000563f  00000000  00000000  00063ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b0  00000000  00000000  00069528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002158  00000000  00000000  0006b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000073a3  00000000  00000000  0006da30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e218  00000000  00000000  00074dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011bedb  00000000  00000000  00092feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aeec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a854  00000000  00000000  001aef44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000378 	.word	0x20000378
 800021c:	00000000 	.word	0x00000000
 8000220:	08017670 	.word	0x08017670

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000037c 	.word	0x2000037c
 800023c:	08017670 	.word	0x08017670

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__reverse8bit>:
#define SWAP_VARS(A, B) do { (A) ^= (B); (B) ^= (A); (A) ^= (B); } while (0)


#if (!SMLCD_FLUSH_LUT)
// Reverse bits order in byte
__STATIC_INLINE uint8_t __reverse8bit(uint8_t byte) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
#if 1
	// Using ARM RBIT instruction
	// Since it operates with 32-bit values only, result must be shifted by 24 bits to the right
	return (uint8_t)(__RBIT(byte) >> 24);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	b2db      	uxtb	r3, r3
	byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
	byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;

	return byte;
#endif
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SMLCD_InitGPIO>:
#endif // SMLCD_FLUSH_LUT


// Initialize display control GPIO pins
void SMLCD_InitGPIO(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//RCC->AHB2ENR |= SMLCD_GPIO_PERIPH;

	// Configure DISP pin
	//GPIO_set_mode(SMLCD_DISP_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_DISP_PIN);
	//GPIO_out_cfg(SMLCD_DISP_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_DISP_PIN);
	SMLCD_DISP_L;
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000622:	f00a fe75 	bl	800b310 <HAL_GPIO_WritePin>

	// Configure SCS pin
	//GPIO_set_mode(SMLCD_SCS_PORT, GPIO_Mode_OUT, GPIO_PUPD_PU, SMLCD_SCS_PIN);
	//GPIO_out_cfg(SMLCD_SCS_PORT, GPIO_OT_PP, GPIO_SPD_LOW, SMLCD_SCS_PIN);
	SMLCD_SCS_L;
 8000626:	2200      	movs	r2, #0
 8000628:	2110      	movs	r1, #16
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <SMLCD_InitGPIO+0x38>)
 800062c:	f00a fe70 	bl	800b310 <HAL_GPIO_WritePin>
	LCD_EXCOMM_L;
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <SMLCD_InitGPIO+0x34>)
 8000636:	f00a fe6b 	bl	800b310 <HAL_GPIO_WritePin>
	LCD_FRONTLIGHT_H;
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <SMLCD_InitGPIO+0x3c>)
 8000642:	f00a fe65 	bl	800b310 <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022400 	.word	0x40022400
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00

08000658 <SMLCD_Init>:

// Initialize display
// note: SPI and GPIO must be initialized before calling this function
void SMLCD_Init(SPI_HandleTypeDef hspi) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// Set default drawing mode
	LCD_PixelMode = LCD_PSET;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SMLCD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	SMLCD_SPI_PORT = hspi;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <SMLCD_Init+0x3c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	461a      	mov	r2, r3
 8000678:	f012 fedc 	bl	8013434 <memcpy>

	// Set initial image orientation
	SMLCD_Orientation(LCD_ORIENT_NORMAL);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f9bf 	bl	8000a00 <SMLCD_Orientation>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800068a:	b004      	add	sp, #16
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20028aa4 	.word	0x20028aa4
 8000694:	20028aac 	.word	0x20028aac

08000698 <SMLCD_Clear>:

// Clear display memory (clear screen)
HAL_StatusTypeDef SMLCD_Clear(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	// Send "Clear Screen" command
	uint8_t sendBytes[2];
	HAL_StatusTypeDef Status = HAL_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
	SMLCD_SCS_H;
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <SMLCD_Clear+0x40>)
 80006a8:	f00a fe32 	bl	800b310 <HAL_GPIO_WritePin>
	sendBytes[0]=SMLCD_CMD_CLS;
 80006ac:	2320      	movs	r3, #32
 80006ae:	713b      	strb	r3, [r7, #4]
	sendBytes[1]=SMLCD_CMD_NOP;
 80006b0:	2300      	movs	r3, #0
 80006b2:	717b      	strb	r3, [r7, #5]
	Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, sendBytes, sizeof(sendBytes), 100);
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	2202      	movs	r2, #2
 80006ba:	4808      	ldr	r0, [pc, #32]	; (80006dc <SMLCD_Clear+0x44>)
 80006bc:	f00d f972 	bl	800d9a4 <HAL_SPI_Transmit>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_CLS, 1, 100);
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_CLS);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;
 80006c4:	2200      	movs	r2, #0
 80006c6:	2110      	movs	r1, #16
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <SMLCD_Clear+0x40>)
 80006ca:	f00a fe21 	bl	800b310 <HAL_GPIO_WritePin>
	return Status;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	20028aac 	.word	0x20028aac

080006e0 <SMLCD_Flush>:
	return HAL_OK;
}
#endif // SMLCD_VCOM_SOFT

// Send vRAM buffer into display
HAL_StatusTypeDef SMLCD_Flush(void) {
 80006e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e4:	b08c      	sub	sp, #48	; 0x30
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	466b      	mov	r3, sp
 80006ea:	4698      	mov	r8, r3
	HAL_StatusTypeDef Status = HAL_OK;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	int commandByte=1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
	int lineByte=1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
	int lineAmount=SCR_H;
 80006fa:	23f0      	movs	r3, #240	; 0xf0
 80006fc:	61fb      	str	r3, [r7, #28]
	int nopBytesPerLine= 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
	int dataBytesPerLine=SCR_W/8;
 8000702:	2332      	movs	r3, #50	; 0x32
 8000704:	617b      	str	r3, [r7, #20]
	int finalNOPByte=1;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
	uint8_t transmitBuffer[commandByte + lineByte+nopBytesPerLine+dataBytesPerLine + finalNOPByte];
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	441a      	add	r2, r3
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	441a      	add	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	441a      	add	r2, r3
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	18d6      	adds	r6, r2, r3
 800071c:	1e73      	subs	r3, r6, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4633      	mov	r3, r6
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	f04f 0400 	mov.w	r4, #0
 8000730:	00d4      	lsls	r4, r2, #3
 8000732:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000736:	00cb      	lsls	r3, r1, #3
 8000738:	4633      	mov	r3, r6
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 0200 	mov.w	r2, #0
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	f04f 0400 	mov.w	r4, #0
 8000748:	00d4      	lsls	r4, r2, #3
 800074a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800074e:	00cb      	lsls	r3, r1, #3
 8000750:	4633      	mov	r3, r6
 8000752:	3307      	adds	r3, #7
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	ebad 0d03 	sub.w	sp, sp, r3
 800075c:	466b      	mov	r3, sp
 800075e:	3300      	adds	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
	memset(transmitBuffer,0x0,sizeof(transmitBuffer));
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4632      	mov	r2, r6
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f012 fe6e 	bl	801344a <memset>
	#if 1

	register uint8_t *ptr = vRAM;
 800076e:	4d9f      	ldr	r5, [pc, #636]	; (80009ec <SMLCD_Flush+0x30c>)
	register uint8_t line = 0;
 8000770:	2400      	movs	r4, #0
	register uint32_t idx;
	int bufferCounter=1;
 8000772:	2301      	movs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
	int x=0;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Send "Write Line" command
	transmitBuffer[0]=SMLCD_CMD_WRITE;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	2288      	movs	r2, #136	; 0x88
 800077e:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_WRITE);
	switch (lcd_orientation) {
 8000780:	4b9b      	ldr	r3, [pc, #620]	; (80009f0 <SMLCD_Flush+0x310>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d046      	beq.n	8000816 <SMLCD_Flush+0x136>
 8000788:	2b08      	cmp	r3, #8
 800078a:	f000 8097 	beq.w	80008bc <SMLCD_Flush+0x1dc>
 800078e:	2b02      	cmp	r3, #2
 8000790:	f040 80e3 	bne.w	800095a <SMLCD_Flush+0x27a>
		case LCD_ORIENT_CW:
			line = SCR_H + 1;
 8000794:	24f1      	movs	r4, #241	; 0xf1
			while (--line > 0) {
 8000796:	e039      	b.n	800080c <SMLCD_Flush+0x12c>
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	2288      	movs	r2, #136	; 0x88
 800079c:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	4622      	mov	r2, r4
 80007a6:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007a8:	2302      	movs	r3, #2
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007ac:	e009      	b.n	80007c2 <SMLCD_Flush+0xe2>
					transmitBuffer[x]=*ptr;
 80007ae:	7829      	ldrb	r1, [r5, #0]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	701a      	strb	r2, [r3, #0]
					ptr++;
 80007ba:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 80007bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007be:	3301      	adds	r3, #1
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	2b33      	cmp	r3, #51	; 0x33
 80007c6:	ddf2      	ble.n	80007ae <SMLCD_Flush+0xce>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4885      	ldr	r0, [pc, #532]	; (80009f4 <SMLCD_Flush+0x314>)
 80007de:	f00a fd97 	bl	800b310 <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	b2b2      	uxth	r2, r6
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	4883      	ldr	r0, [pc, #524]	; (80009f8 <SMLCD_Flush+0x318>)
 80007ea:	f00d f8db 	bl	800d9a4 <HAL_SPI_Transmit>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	487e      	ldr	r0, [pc, #504]	; (80009f4 <SMLCD_Flush+0x314>)
 80007fa:	f00a fd89 	bl	800b310 <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 80007fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <SMLCD_Flush+0x12c>
				{
					return Status;
 8000806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800080a:	e0e9      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (--line > 0) {
 800080c:	1e63      	subs	r3, r4, #1
 800080e:	b2dc      	uxtb	r4, r3
 8000810:	2c00      	cmp	r4, #0
 8000812:	d1c1      	bne.n	8000798 <SMLCD_Flush+0xb8>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 8000814:	e0e3      	b.n	80009de <SMLCD_Flush+0x2fe>
		case LCD_ORIENT_CCW:
			line = SCR_H + 1;
 8000816:	24f1      	movs	r4, #241	; 0xf1
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 8000818:	4d78      	ldr	r5, [pc, #480]	; (80009fc <SMLCD_Flush+0x31c>)
			while (--line > 0) {
 800081a:	e04a      	b.n	80008b2 <SMLCD_Flush+0x1d2>

				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 800081c:	4620      	mov	r0, r4
 800081e:	f7ff fee7 	bl	80005f0 <__reverse8bit>
 8000822:	4603      	mov	r3, r0
 8000824:	4619      	mov	r1, r3
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	2201      	movs	r2, #1
 800082a:	4873      	ldr	r0, [pc, #460]	; (80009f8 <SMLCD_Flush+0x318>)
 800082c:	f00d f8ba 	bl	800d9a4 <HAL_SPI_Transmit>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800083a:	2b00      	cmp	r3, #0
 800083c:	d007      	beq.n	800084e <SMLCD_Flush+0x16e>
				{
					SMLCD_SCS_L;
 800083e:	2200      	movs	r2, #0
 8000840:	2110      	movs	r1, #16
 8000842:	486c      	ldr	r0, [pc, #432]	; (80009f4 <SMLCD_Flush+0x314>)
 8000844:	f00a fd64 	bl	800b310 <HAL_GPIO_WritePin>
					return Status;
 8000848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800084c:	e0c8      	b.n	80009e0 <SMLCD_Flush+0x300>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800084e:	2600      	movs	r6, #0
 8000850:	e018      	b.n	8000884 <SMLCD_Flush+0x1a4>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 8000852:	462b      	mov	r3, r5
 8000854:	1e5d      	subs	r5, r3, #1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	2364      	movs	r3, #100	; 0x64
 800085c:	2201      	movs	r2, #1
 800085e:	4866      	ldr	r0, [pc, #408]	; (80009f8 <SMLCD_Flush+0x318>)
 8000860:	f00d f8a0 	bl	800d9a4 <HAL_SPI_Transmit>
 8000864:	4603      	mov	r3, r0
 8000866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 800086a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800086e:	2b00      	cmp	r3, #0
 8000870:	d007      	beq.n	8000882 <SMLCD_Flush+0x1a2>
					{
						SMLCD_SCS_L;
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	485f      	ldr	r0, [pc, #380]	; (80009f4 <SMLCD_Flush+0x314>)
 8000878:	f00a fd4a 	bl	800b310 <HAL_GPIO_WritePin>
						return Status;
 800087c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000880:	e0ae      	b.n	80009e0 <SMLCD_Flush+0x300>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 8000882:	3601      	adds	r6, #1
 8000884:	2e31      	cmp	r6, #49	; 0x31
 8000886:	d9e4      	bls.n	8000852 <SMLCD_Flush+0x172>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	2201      	movs	r2, #1
 800088c:	2100      	movs	r1, #0
 800088e:	485a      	ldr	r0, [pc, #360]	; (80009f8 <SMLCD_Flush+0x318>)
 8000890:	f00d f888 	bl	800d9a4 <HAL_SPI_Transmit>
 8000894:	4603      	mov	r3, r0
 8000896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 800089a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d007      	beq.n	80008b2 <SMLCD_Flush+0x1d2>
				{
					SMLCD_SCS_L;
 80008a2:	2200      	movs	r2, #0
 80008a4:	2110      	movs	r1, #16
 80008a6:	4853      	ldr	r0, [pc, #332]	; (80009f4 <SMLCD_Flush+0x314>)
 80008a8:	f00a fd32 	bl	800b310 <HAL_GPIO_WritePin>
					return Status;
 80008ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008b0:	e096      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (--line > 0) {
 80008b2:	1e63      	subs	r3, r4, #1
 80008b4:	b2dc      	uxtb	r4, r3
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d1b0      	bne.n	800081c <SMLCD_Flush+0x13c>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 80008ba:	e090      	b.n	80009de <SMLCD_Flush+0x2fe>
		case LCD_ORIENT_180:
			line = 0;
 80008bc:	2400      	movs	r4, #0
			ptr = &vRAM[((SCR_W * SCR_H) >> 3) - 1];
 80008be:	4d4f      	ldr	r5, [pc, #316]	; (80009fc <SMLCD_Flush+0x31c>)
			while (line++ < SCR_H + 1) {
 80008c0:	e045      	b.n	800094e <SMLCD_Flush+0x26e>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
 80008c2:	4620      	mov	r0, r4
 80008c4:	f7ff fe94 	bl	80005f0 <__reverse8bit>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4619      	mov	r1, r3
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	2201      	movs	r2, #1
 80008d0:	4849      	ldr	r0, [pc, #292]	; (80009f8 <SMLCD_Flush+0x318>)
 80008d2:	f00d f867 	bl	800d9a4 <HAL_SPI_Transmit>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 80008dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d007      	beq.n	80008f4 <SMLCD_Flush+0x214>
				{
					SMLCD_SCS_L;
 80008e4:	2200      	movs	r2, #0
 80008e6:	2110      	movs	r1, #16
 80008e8:	4842      	ldr	r0, [pc, #264]	; (80009f4 <SMLCD_Flush+0x314>)
 80008ea:	f00a fd11 	bl	800b310 <HAL_GPIO_WritePin>
					return Status;
 80008ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008f2:	e075      	b.n	80009e0 <SMLCD_Flush+0x300>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 80008f4:	2600      	movs	r6, #0
 80008f6:	e013      	b.n	8000920 <SMLCD_Flush+0x240>
					Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, *ptr--, 1, 100);
 80008f8:	462b      	mov	r3, r5
 80008fa:	1e5d      	subs	r5, r3, #1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	2201      	movs	r2, #1
 8000904:	483c      	ldr	r0, [pc, #240]	; (80009f8 <SMLCD_Flush+0x318>)
 8000906:	f00d f84d 	bl	800d9a4 <HAL_SPI_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					if (Status != HAL_OK)
 8000910:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <SMLCD_Flush+0x23e>
					{
						return Status;
 8000918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800091c:	e060      	b.n	80009e0 <SMLCD_Flush+0x300>
				for (idx = 0; idx < SCR_W >> 3; idx++) {
 800091e:	3601      	adds	r6, #1
 8000920:	2e31      	cmp	r6, #49	; 0x31
 8000922:	d9e9      	bls.n	80008f8 <SMLCD_Flush+0x218>
					}
					//SPI_SendRecv(&SMLCD_SPI_PORT, *ptr--);
				}
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	2201      	movs	r2, #1
 8000928:	2100      	movs	r1, #0
 800092a:	4833      	ldr	r0, [pc, #204]	; (80009f8 <SMLCD_Flush+0x318>)
 800092c:	f00d f83a 	bl	800d9a4 <HAL_SPI_Transmit>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (Status != HAL_OK)
 8000936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800093a:	2b00      	cmp	r3, #0
 800093c:	d007      	beq.n	800094e <SMLCD_Flush+0x26e>
				{
					SMLCD_SCS_L;
 800093e:	2200      	movs	r2, #0
 8000940:	2110      	movs	r1, #16
 8000942:	482c      	ldr	r0, [pc, #176]	; (80009f4 <SMLCD_Flush+0x314>)
 8000944:	f00a fce4 	bl	800b310 <HAL_GPIO_WritePin>
					return Status;
 8000948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800094c:	e048      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (line++ < SCR_H + 1) {
 800094e:	4623      	mov	r3, r4
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	b2d4      	uxtb	r4, r2
 8000954:	2bf0      	cmp	r3, #240	; 0xf0
 8000956:	d9b4      	bls.n	80008c2 <SMLCD_Flush+0x1e2>
				}
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
			}
			break;
 8000958:	e041      	b.n	80009de <SMLCD_Flush+0x2fe>
		case LCD_ORIENT_NORMAL:
		default:
			line = 0;
 800095a:	2400      	movs	r4, #0
			while (line++ < SCR_H + 1) {
 800095c:	e039      	b.n	80009d2 <SMLCD_Flush+0x2f2>
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, __reverse8bit(line), 1, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, ptr, SCR_W >> 3, 100);
				//HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
				transmitBuffer[0]=SMLCD_CMD_WRITE;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2288      	movs	r2, #136	; 0x88
 8000962:	701a      	strb	r2, [r3, #0]
				transmitBuffer[bufferCounter]=line;
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4622      	mov	r2, r4
 800096c:	701a      	strb	r2, [r3, #0]
				for(x=2;x<(SCR_W >> 3)+2;x++){
 800096e:	2302      	movs	r3, #2
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000972:	e009      	b.n	8000988 <SMLCD_Flush+0x2a8>
					transmitBuffer[x]=*ptr;
 8000974:	7829      	ldrb	r1, [r5, #0]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097a:	4413      	add	r3, r2
 800097c:	460a      	mov	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
					ptr++;
 8000980:	3501      	adds	r5, #1
				for(x=2;x<(SCR_W >> 3)+2;x++){
 8000982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000984:	3301      	adds	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098a:	2b33      	cmp	r3, #51	; 0x33
 800098c:	ddf2      	ble.n	8000974 <SMLCD_Flush+0x294>
				}
				transmitBuffer[52]=SMLCD_CMD_NOP;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				transmitBuffer[53] = SMLCD_CMD_NOP;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				SMLCD_SCS_H;
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <SMLCD_Flush+0x314>)
 80009a4:	f00a fcb4 	bl	800b310 <HAL_GPIO_WritePin>
				Status = HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)transmitBuffer, sizeof(transmitBuffer), 100);
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	b2b2      	uxth	r2, r6
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <SMLCD_Flush+0x318>)
 80009b0:	f00c fff8 	bl	800d9a4 <HAL_SPI_Transmit>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				SMLCD_SCS_L;
 80009ba:	2200      	movs	r2, #0
 80009bc:	2110      	movs	r1, #16
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <SMLCD_Flush+0x314>)
 80009c0:	f00a fca6 	bl	800b310 <HAL_GPIO_WritePin>
				if (Status != HAL_OK)
 80009c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <SMLCD_Flush+0x2f2>
				{
					return Status;
 80009cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80009d0:	e006      	b.n	80009e0 <SMLCD_Flush+0x300>
			while (line++ < SCR_H + 1) {
 80009d2:	4623      	mov	r3, r4
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	b2d4      	uxtb	r4, r2
 80009d8:	2bf0      	cmp	r3, #240	; 0xf0
 80009da:	d9c0      	bls.n	800095e <SMLCD_Flush+0x27e>
				//SPI_SendRecv(&SMLCD_SPI_PORT, __reverse8bit(line));
				//SPI_SendBuf(&SMLCD_SPI_PORT, ptr, SCR_W >> 3);
				//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
				//ptr += SCR_W >> 3;
			}
			break;
 80009dc:	bf00      	nop
	}
	return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	46c5      	mov	sp, r8
	HAL_SPI_Transmit(&SMLCD_SPI_PORT, SMLCD_CMD_NOP, 1, 100);
	//SPI_SendRecv(&SMLCD_SPI_PORT, SMLCD_CMD_NOP);
	SMLCD_SCS_L;

#endif
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009ec:	20000394 	.word	0x20000394
 80009f0:	20000000 	.word	0x20000000
 80009f4:	40021000 	.word	0x40021000
 80009f8:	20028aac 	.word	0x20028aac
 80009fc:	20003273 	.word	0x20003273

08000a00 <SMLCD_Orientation>:

// Set screen orientation
// input:
//   orientation - one of LCD_ORIENT_xx values
void SMLCD_Orientation(uint8_t orientation) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	if (orientation & (LCD_ORIENT_CW | LCD_ORIENT_CCW)) {
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 0306 	and.w	r3, r3, #6
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d007      	beq.n	8000a24 <SMLCD_Orientation+0x24>
		scr_width  = SCR_H;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <SMLCD_Orientation+0x44>)
 8000a16:	22f0      	movs	r2, #240	; 0xf0
 8000a18:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_W;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <SMLCD_Orientation+0x48>)
 8000a1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a20:	801a      	strh	r2, [r3, #0]
 8000a22:	e006      	b.n	8000a32 <SMLCD_Orientation+0x32>
	} else {
		scr_width  = SCR_W;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <SMLCD_Orientation+0x44>)
 8000a26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a2a:	801a      	strh	r2, [r3, #0]
		scr_height = SCR_H;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SMLCD_Orientation+0x48>)
 8000a2e:	22f0      	movs	r2, #240	; 0xf0
 8000a30:	801a      	strh	r2, [r3, #0]
	}
	lcd_orientation = orientation;
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <SMLCD_Orientation+0x4c>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	7013      	strb	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20028aa6 	.word	0x20028aa6
 8000a48:	20028aa8 	.word	0x20028aa8
 8000a4c:	20000000 	.word	0x20000000

08000a50 <LCD_Clear>:

// Clear the vRAM memory
// note: size of video buffer must be a multiple of 4
void LCD_Clear(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
#if 1
	// This variant can be faster, speed depends on libraries used
	// But also needs include of "string.h"
	//memset(vRAM, 0x0, (sizeof(vRAM) >> 2));
	memset(vRAM, 0xFFFFFFFF, sizeof(vRAM));
 8000a54:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <LCD_Clear+0x18>)
 8000a5e:	f012 fcf4 	bl	801344a <memset>

	while (i--) {
		*ptr++ = 0xFFFFFFFF;
	}
#endif
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000394 	.word	0x20000394

08000a6c <LCD_Pixel>:
// input:
//   X, Y - coordinates of pixel
// note: value of LCD_PixelMode will be used as a drawing mode of a pixel
// note: X and Y coordinates are declared as "register uint32_t" for performance
//       for other compilers/CPUs this can/or should be changed to other type (16-bit)
void LCD_Pixel(register uint32_t X, register uint32_t Y) {
 8000a6c:	b4b0      	push	{r4, r5, r7}
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	460a      	mov	r2, r1
	register uint32_t offset;
	register uint8_t bpos;

#if (SMLCD_PIXEL_METHOD)
	switch (lcd_orientation) {
 8000a74:	4928      	ldr	r1, [pc, #160]	; (8000b18 <LCD_Pixel+0xac>)
 8000a76:	7809      	ldrb	r1, [r1, #0]
 8000a78:	2904      	cmp	r1, #4
 8000a7a:	d009      	beq.n	8000a90 <LCD_Pixel+0x24>
 8000a7c:	2908      	cmp	r1, #8
 8000a7e:	d002      	beq.n	8000a86 <LCD_Pixel+0x1a>
 8000a80:	2902      	cmp	r1, #2
 8000a82:	d00d      	beq.n	8000aa0 <LCD_Pixel+0x34>
		case LCD_ORIENT_CW:
			SWAP_VARS(X, Y);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000a84:	e010      	b.n	8000aa8 <LCD_Pixel+0x3c>
			X = SCR_W - 1 - X;
 8000a86:	f240 118f 	movw	r1, #399	; 0x18f
 8000a8a:	1ac9      	subs	r1, r1, r3
 8000a8c:	460b      	mov	r3, r1
			break;
 8000a8e:	e00b      	b.n	8000aa8 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 8000a90:	4053      	eors	r3, r2
 8000a92:	405a      	eors	r2, r3
 8000a94:	4053      	eors	r3, r2
			X = SCR_W - 1 - X;
 8000a96:	f240 118f 	movw	r1, #399	; 0x18f
 8000a9a:	1ac9      	subs	r1, r1, r3
 8000a9c:	460b      	mov	r3, r1
			break;
 8000a9e:	e003      	b.n	8000aa8 <LCD_Pixel+0x3c>
			SWAP_VARS(X, Y);
 8000aa0:	4053      	eors	r3, r2
 8000aa2:	405a      	eors	r2, r3
 8000aa4:	4053      	eors	r3, r2
			break;
 8000aa6:	bf00      	nop
		X = SCR_W - 1 - X;
	}
#endif

	// Offset in video buffer
	offset = ((Y * SCR_W) + X) >> 3;
 8000aa8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000aac:	fb01 f202 	mul.w	r2, r1, r2
 8000ab0:	441a      	add	r2, r3
 8000ab2:	08d4      	lsrs	r4, r2, #3

#if (SMLCD_PIXEL_SAFE)
	// Ensure offset is inside of video buffer
	if (offset > ((SCR_W * SCR_H) >> 3) - 1) {
 8000ab4:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000ab8:	4294      	cmp	r4, r2
 8000aba:	d829      	bhi.n	8000b10 <LCD_Pixel+0xa4>
		return;
	}
#endif // SMLCD_PIXEL_SAFE

	// Bit position in byte
	bpos = X & 0x07;
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	b2dd      	uxtb	r5, r3
			break;
	}
#else // SMLCD_USE_BITBAND
	// Using access via array

	switch (LCD_PixelMode) {
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <LCD_Pixel+0xb0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d002      	beq.n	8000ad2 <LCD_Pixel+0x66>
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d00a      	beq.n	8000ae6 <LCD_Pixel+0x7a>
 8000ad0:	e013      	b.n	8000afa <LCD_Pixel+0x8e>
		case LCD_PRES:
			vRAM[offset] |= LUT_PRST[bpos];
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <LCD_Pixel+0xb4>)
 8000ad4:	5d1a      	ldrb	r2, [r3, r4]
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <LCD_Pixel+0xb8>)
 8000ada:	5c5b      	ldrb	r3, [r3, r1]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <LCD_Pixel+0xb4>)
 8000ae2:	551a      	strb	r2, [r3, r4]
			break;
 8000ae4:	e015      	b.n	8000b12 <LCD_Pixel+0xa6>
		case LCD_PINV:
			vRAM[offset] ^= LUT_PRST[bpos];
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <LCD_Pixel+0xb4>)
 8000ae8:	5d1a      	ldrb	r2, [r3, r4]
 8000aea:	4629      	mov	r1, r5
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <LCD_Pixel+0xb8>)
 8000aee:	5c5b      	ldrb	r3, [r3, r1]
 8000af0:	4053      	eors	r3, r2
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <LCD_Pixel+0xb4>)
 8000af6:	551a      	strb	r2, [r3, r4]
			break;
 8000af8:	e00b      	b.n	8000b12 <LCD_Pixel+0xa6>
		case LCD_PSET:
		default:
			vRAM[offset] &= LUT_PSET[bpos];
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <LCD_Pixel+0xb4>)
 8000afc:	5d1a      	ldrb	r2, [r3, r4]
 8000afe:	4629      	mov	r1, r5
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <LCD_Pixel+0xbc>)
 8000b02:	5c5b      	ldrb	r3, [r3, r1]
 8000b04:	4013      	ands	r3, r2
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LCD_Pixel+0xb4>)
 8000b0a:	551a      	strb	r2, [r3, r4]
			break;
 8000b0c:	bf00      	nop
 8000b0e:	e000      	b.n	8000b12 <LCD_Pixel+0xa6>
		return;
 8000b10:	bf00      	nop
	}
#endif // SMLCD_USE_BITBAND
}
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bcb0      	pop	{r4, r5, r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20028aa4 	.word	0x20028aa4
 8000b20:	20000394 	.word	0x20000394
 8000b24:	080180b4 	.word	0x080180b4
 8000b28:	080180ac 	.word	0x080180ac

08000b2c <LCD_VLineInt>:
// Optimized vertical line drawing (without regard of screen rotation)
// input:
//   X - horizontal coordinate
//   Y - vertical coordinate
//   H - line height
static void LCD_VLineInt(uint16_t X, uint16_t Y, uint16_t H) {
 8000b2c:	b4b0      	push	{r4, r5, r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
 8000b36:	460b      	mov	r3, r1
 8000b38:	80bb      	strh	r3, [r7, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b44:	fb02 f203 	mul.w	r2, r2, r3
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	10db      	asrs	r3, r3, #3
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <LCD_VLineInt+0xa0>)
 8000b50:	189c      	adds	r4, r3, r2
	register uint8_t mask;

	// Draw line
	X &= 0x07;
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	80fb      	strh	r3, [r7, #6]
	switch (LCD_PixelMode) {
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <LCD_VLineInt+0xa4>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d002      	beq.n	8000b68 <LCD_VLineInt+0x3c>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d00f      	beq.n	8000b86 <LCD_VLineInt+0x5a>
 8000b66:	e01d      	b.n	8000ba4 <LCD_VLineInt+0x78>
		case LCD_PRES:
			mask = LUT_PRST[X];
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <LCD_VLineInt+0xa8>)
 8000b6c:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000b6e:	e004      	b.n	8000b7a <LCD_VLineInt+0x4e>
				*ptr |= mask;
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	432b      	orrs	r3, r5
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000b78:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	1e5a      	subs	r2, r3, #1
 8000b7e:	807a      	strh	r2, [r7, #2]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f5      	bne.n	8000b70 <LCD_VLineInt+0x44>
			}
			break;
 8000b84:	e01d      	b.n	8000bc2 <LCD_VLineInt+0x96>
		case LCD_PINV:
			mask = LUT_PRST[X];
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <LCD_VLineInt+0xa8>)
 8000b8a:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000b8c:	e004      	b.n	8000b98 <LCD_VLineInt+0x6c>
				*ptr ^= mask;
 8000b8e:	7823      	ldrb	r3, [r4, #0]
 8000b90:	406b      	eors	r3, r5
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000b96:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	1e5a      	subs	r2, r3, #1
 8000b9c:	807a      	strh	r2, [r7, #2]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f5      	bne.n	8000b8e <LCD_VLineInt+0x62>
			}
			break;
 8000ba2:	e00e      	b.n	8000bc2 <LCD_VLineInt+0x96>
		case LCD_PSET:
		default:
			mask = LUT_PSET[X];
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <LCD_VLineInt+0xac>)
 8000ba8:	5cd5      	ldrb	r5, [r2, r3]
			while (H--) {
 8000baa:	e004      	b.n	8000bb6 <LCD_VLineInt+0x8a>
				*ptr &= mask;
 8000bac:	7823      	ldrb	r3, [r4, #0]
 8000bae:	402b      	ands	r3, r5
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	7023      	strb	r3, [r4, #0]
				ptr += SCR_W >> 3;
 8000bb4:	3432      	adds	r4, #50	; 0x32
			while (H--) {
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	807a      	strh	r2, [r7, #2]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f5      	bne.n	8000bac <LCD_VLineInt+0x80>
			}
			break;
 8000bc0:	bf00      	nop
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bcb0      	pop	{r4, r5, r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000394 	.word	0x20000394
 8000bd0:	20028aa4 	.word	0x20028aa4
 8000bd4:	080180b4 	.word	0x080180b4
 8000bd8:	080180ac 	.word	0x080180ac

08000bdc <LCD_HLineInt>:
// Optimized draw horizontal line (without regard of screen rotation)
// input:
//   X - horizontal coordinate of line start
//   Y - vertical coordinate
//   W - line width
static void LCD_HLineInt(uint16_t X, uint16_t Y, uint16_t W) {
 8000bdc:	b4f0      	push	{r4, r5, r6, r7}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
 8000be6:	460b      	mov	r3, r1
 8000be8:	80bb      	strh	r3, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	807b      	strh	r3, [r7, #2]
	register uint8_t *ptr = &vRAM[((Y * SCR_W) + X) >> 3];
 8000bee:	88bb      	ldrh	r3, [r7, #4]
 8000bf0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bf4:	fb02 f203 	mul.w	r2, r2, r3
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	10db      	asrs	r3, r3, #3
 8000bfe:	4a69      	ldr	r2, [pc, #420]	; (8000da4 <LCD_HLineInt+0x1c8>)
 8000c00:	189c      	adds	r4, r3, r2
	register uint8_t modulo = X & 0x07;
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	b2de      	uxtb	r6, r3
	// Look-up tables
	static const uint8_t LUT_B1[] = { 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80 };
	static const uint8_t LUT_B2[] = { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };

	// First partial byte
	if (modulo) {
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d03a      	beq.n	8000c86 <LCD_HLineInt+0xaa>
		// Get bit mask for first partial byte
		modulo = 8 - modulo;
 8000c10:	f1c6 0308 	rsb	r3, r6, #8
 8000c14:	b2de      	uxtb	r6, r3
		mask = LUT_B1[modulo];
 8000c16:	4632      	mov	r2, r6
 8000c18:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <LCD_HLineInt+0x1cc>)
 8000c1a:	5c9d      	ldrb	r5, [r3, r2]

		if (modulo > W) {
 8000c1c:	b2b3      	uxth	r3, r6
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d206      	bcs.n	8000c32 <LCD_HLineInt+0x56>
			// Trim bit mask if line will not go out from a current byte
			mask |= LUT_B2[modulo - W];
 8000c24:	4632      	mov	r2, r6
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	4a60      	ldr	r2, [pc, #384]	; (8000dac <LCD_HLineInt+0x1d0>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	432b      	orrs	r3, r5
 8000c30:	b2dd      	uxtb	r5, r3
		}

		// Update first partial byte
		switch (LCD_PixelMode) {
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d002      	beq.n	8000c40 <LCD_HLineInt+0x64>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d00a      	beq.n	8000c54 <LCD_HLineInt+0x78>
 8000c3e:	e013      	b.n	8000c68 <LCD_HLineInt+0x8c>
			case LCD_PRES:
				*ptr |= ~mask;
 8000c40:	7823      	ldrb	r3, [r4, #0]
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	b26b      	sxtb	r3, r5
 8000c46:	43db      	mvns	r3, r3
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	7023      	strb	r3, [r4, #0]
				break;
 8000c52:	e00e      	b.n	8000c72 <LCD_HLineInt+0x96>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000c54:	7823      	ldrb	r3, [r4, #0]
 8000c56:	b25a      	sxtb	r2, r3
 8000c58:	b26b      	sxtb	r3, r5
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	4053      	eors	r3, r2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	7023      	strb	r3, [r4, #0]
				break;
 8000c66:	e004      	b.n	8000c72 <LCD_HLineInt+0x96>
			case LCD_PSET:
			default:
				*ptr &=  mask;
 8000c68:	7823      	ldrb	r3, [r4, #0]
 8000c6a:	402b      	ands	r3, r5
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	7023      	strb	r3, [r4, #0]
				break;
 8000c70:	bf00      	nop
		}

		// Line is over?
		if (modulo > W) {
 8000c72:	b2b3      	uxth	r3, r6
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f0c0 808f 	bcc.w	8000d9a <LCD_HLineInt+0x1be>
			return;
		}

		// Shift pointer to the next byte in line and decrease line height counter
		ptr++;
 8000c7c:	3401      	adds	r4, #1
		W -= modulo;
 8000c7e:	b2b3      	uxth	r3, r6
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	807b      	strh	r3, [r7, #2]
	}

	// Fill solid bytes
	if (W > 32) {
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d92c      	bls.n	8000ce6 <LCD_HLineInt+0x10a>
		// Modify 32 pixels at once
		register uint32_t *ptr32 = (uint32_t *)ptr;
		switch (LCD_PixelMode) {
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d003      	beq.n	8000c9c <LCD_HLineInt+0xc0>
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d00e      	beq.n	8000cb6 <LCD_HLineInt+0xda>
 8000c98:	e01a      	b.n	8000cd0 <LCD_HLineInt+0xf4>
			case LCD_PRES:
 8000c9a:	bf00      	nop
				do {
					*ptr32++ = 0xFFFFFFFF;
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	1d1c      	adds	r4, r3, #4
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	3b20      	subs	r3, #32
 8000caa:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	2b1f      	cmp	r3, #31
 8000cb0:	d8f3      	bhi.n	8000c9a <LCD_HLineInt+0xbe>
				break;
 8000cb2:	e018      	b.n	8000ce6 <LCD_HLineInt+0x10a>
			case LCD_PINV:
 8000cb4:	bf00      	nop
				do {
					*ptr32++ ^= 0xFFFFFFFF;
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	1d1c      	adds	r4, r3, #4
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	3b20      	subs	r3, #32
 8000cc4:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	2b1f      	cmp	r3, #31
 8000cca:	d8f3      	bhi.n	8000cb4 <LCD_HLineInt+0xd8>
				break;
 8000ccc:	e00b      	b.n	8000ce6 <LCD_HLineInt+0x10a>
			case LCD_PSET:
 8000cce:	bf00      	nop
			default:
				do {
					*ptr32++ = 0x00000000;
 8000cd0:	4623      	mov	r3, r4
 8000cd2:	1d1c      	adds	r4, r3, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
					W -= 32;
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	3b20      	subs	r3, #32
 8000cdc:	807b      	strh	r3, [r7, #2]
				} while (W > 31);
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	2b1f      	cmp	r3, #31
 8000ce2:	d8f4      	bhi.n	8000cce <LCD_HLineInt+0xf2>
				break;
 8000ce4:	bf00      	nop
		}
		ptr = (uint8_t *)ptr32;
	}
	if (W > 7) {
 8000ce6:	887b      	ldrh	r3, [r7, #2]
 8000ce8:	2b07      	cmp	r3, #7
 8000cea:	d92c      	bls.n	8000d46 <LCD_HLineInt+0x16a>
		// Modify full bytes (8 pixels at once)
		switch (LCD_PixelMode) {
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d003      	beq.n	8000cfc <LCD_HLineInt+0x120>
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d00d      	beq.n	8000d14 <LCD_HLineInt+0x138>
 8000cf8:	e01a      	b.n	8000d30 <LCD_HLineInt+0x154>
			case LCD_PRES:
 8000cfa:	bf00      	nop
				do {
					*ptr++ = 0xFF;
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	1c5c      	adds	r4, r3, #1
 8000d00:	22ff      	movs	r2, #255	; 0xff
 8000d02:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	3b08      	subs	r3, #8
 8000d08:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	d8f4      	bhi.n	8000cfa <LCD_HLineInt+0x11e>
				break;
 8000d10:	e01a      	b.n	8000d48 <LCD_HLineInt+0x16c>
			case LCD_PINV:
 8000d12:	bf00      	nop
				do {
					*ptr++ ^= 0xFF;
 8000d14:	4623      	mov	r3, r4
 8000d16:	1c5c      	adds	r4, r3, #1
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	43d2      	mvns	r2, r2
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000d20:	887b      	ldrh	r3, [r7, #2]
 8000d22:	3b08      	subs	r3, #8
 8000d24:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	2b07      	cmp	r3, #7
 8000d2a:	d8f2      	bhi.n	8000d12 <LCD_HLineInt+0x136>
				break;
 8000d2c:	e00c      	b.n	8000d48 <LCD_HLineInt+0x16c>
			case LCD_PSET:
 8000d2e:	bf00      	nop
			default:
				do {
					*ptr++ = 0x00;
 8000d30:	4623      	mov	r3, r4
 8000d32:	1c5c      	adds	r4, r3, #1
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
					W -= 8;
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	3b08      	subs	r3, #8
 8000d3c:	807b      	strh	r3, [r7, #2]
				} while (W > 7);
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	2b07      	cmp	r3, #7
 8000d42:	d8f4      	bhi.n	8000d2e <LCD_HLineInt+0x152>
				break;
 8000d44:	e000      	b.n	8000d48 <LCD_HLineInt+0x16c>
		}
	}
 8000d46:	bf00      	nop

	// Last partial byte?
	if (W) {
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d026      	beq.n	8000d9c <LCD_HLineInt+0x1c0>
		mask = LUT_B2[8 - W];
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	f1c3 0308 	rsb	r3, r3, #8
 8000d54:	4a15      	ldr	r2, [pc, #84]	; (8000dac <LCD_HLineInt+0x1d0>)
 8000d56:	5cd5      	ldrb	r5, [r2, r3]
		switch (LCD_PixelMode) {
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <LCD_HLineInt+0x1d4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d002      	beq.n	8000d66 <LCD_HLineInt+0x18a>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d00a      	beq.n	8000d7a <LCD_HLineInt+0x19e>
 8000d64:	e013      	b.n	8000d8e <LCD_HLineInt+0x1b2>
			case LCD_PRES:
				*ptr |= ~mask;
 8000d66:	7823      	ldrb	r3, [r4, #0]
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	b26b      	sxtb	r3, r5
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	7023      	strb	r3, [r4, #0]
				break;
 8000d78:	e010      	b.n	8000d9c <LCD_HLineInt+0x1c0>
			case LCD_PINV:
				*ptr ^= ~mask;
 8000d7a:	7823      	ldrb	r3, [r4, #0]
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	b26b      	sxtb	r3, r5
 8000d80:	43db      	mvns	r3, r3
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	4053      	eors	r3, r2
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	7023      	strb	r3, [r4, #0]
				break;
 8000d8c:	e006      	b.n	8000d9c <LCD_HLineInt+0x1c0>
			case LCD_PSET:
			default:
				*ptr &= mask;
 8000d8e:	7823      	ldrb	r3, [r4, #0]
 8000d90:	402b      	ands	r3, r5
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	7023      	strb	r3, [r4, #0]
				break;
 8000d96:	bf00      	nop
 8000d98:	e000      	b.n	8000d9c <LCD_HLineInt+0x1c0>
			return;
 8000d9a:	bf00      	nop
		}
	}
}
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bcf0      	pop	{r4, r5, r6, r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000394 	.word	0x20000394
 8000da8:	080180bc 	.word	0x080180bc
 8000dac:	080180c4 	.word	0x080180c4
 8000db0:	20028aa4 	.word	0x20028aa4

08000db4 <LCD_HLine>:

// Draw horizontal line
// input:
//   X1, X2 - left and right horizontal coordinates
//   Y - vertical coordinate
void LCD_HLine(uint16_t X1, uint16_t X2, uint16_t Y) {
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	80bb      	strh	r3, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	807b      	strh	r3, [r7, #2]
	register uint16_t X;
	register uint16_t L;

	if (X1 > X2) {
 8000dc6:	88fa      	ldrh	r2, [r7, #6]
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d905      	bls.n	8000dda <LCD_HLine+0x26>
		X = X2; L = X1 - X2;
 8000dce:	88bd      	ldrh	r5, [r7, #4]
 8000dd0:	88fa      	ldrh	r2, [r7, #6]
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	b29c      	uxth	r4, r3
 8000dd8:	e004      	b.n	8000de4 <LCD_HLine+0x30>
	} else {
		X = X1; L = X2 - X1;
 8000dda:	88fd      	ldrh	r5, [r7, #6]
 8000ddc:	88ba      	ldrh	r2, [r7, #4]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	b29c      	uxth	r4, r3
	}
	L++;
 8000de4:	4623      	mov	r3, r4
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <LCD_HLine+0x9c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d00a      	beq.n	8000e08 <LCD_HLine+0x54>
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d013      	beq.n	8000e1e <LCD_HLine+0x6a>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d11f      	bne.n	8000e3a <LCD_HLine+0x86>
		case LCD_ORIENT_CW:
			LCD_VLineInt(Y, X, L);
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	4629      	mov	r1, r5
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe93 	bl	8000b2c <LCD_VLineInt>
			break;
 8000e06:	e01f      	b.n	8000e48 <LCD_HLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_VLineInt(SCR_W - 1 - Y, X, L);
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4622      	mov	r2, r4
 8000e14:	4629      	mov	r1, r5
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe88 	bl	8000b2c <LCD_VLineInt>
			break;
 8000e1c:	e014      	b.n	8000e48 <LCD_HLine+0x94>
		case LCD_ORIENT_180:
			LCD_HLineInt(SCR_W - X - L, Y, L);
 8000e1e:	462b      	mov	r3, r5
 8000e20:	425b      	negs	r3, r3
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	1b1b      	subs	r3, r3, r4
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	8879      	ldrh	r1, [r7, #2]
 8000e30:	4622      	mov	r2, r4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fed2 	bl	8000bdc <LCD_HLineInt>
			break;
 8000e38:	e006      	b.n	8000e48 <LCD_HLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_HLineInt(X, Y, L);
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	4622      	mov	r2, r4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4628      	mov	r0, r5
 8000e42:	f7ff fecb 	bl	8000bdc <LCD_HLineInt>
			break;
 8000e46:	bf00      	nop
	}
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e50:	20000000 	.word	0x20000000

08000e54 <LCD_VLine>:

// Draw vertical line
// input:
//   X - horizontal coordinate
//   Y1,Y2 - top and bottom vertical coordinates
void LCD_VLine(uint16_t X, uint16_t Y1, uint16_t Y2) {
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	807b      	strh	r3, [r7, #2]
	register uint16_t Y;
	register uint16_t L;

	if (Y1 > Y2) {
 8000e66:	88ba      	ldrh	r2, [r7, #4]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d905      	bls.n	8000e7a <LCD_VLine+0x26>
		Y = Y2; L = Y1 - Y2;
 8000e6e:	887d      	ldrh	r5, [r7, #2]
 8000e70:	88ba      	ldrh	r2, [r7, #4]
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	b29c      	uxth	r4, r3
 8000e78:	e004      	b.n	8000e84 <LCD_VLine+0x30>
	} else {
		Y = Y1; L = Y2 - Y1;
 8000e7a:	88bd      	ldrh	r5, [r7, #4]
 8000e7c:	887a      	ldrh	r2, [r7, #2]
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b29c      	uxth	r4, r3
	}
	L++;
 8000e84:	4623      	mov	r3, r4
 8000e86:	3301      	adds	r3, #1
 8000e88:	b29c      	uxth	r4, r3

	switch (lcd_orientation) {
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <LCD_VLine+0x9c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d00a      	beq.n	8000ea8 <LCD_VLine+0x54>
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d016      	beq.n	8000ec4 <LCD_VLine+0x70>
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d11f      	bne.n	8000eda <LCD_VLine+0x86>
		case LCD_ORIENT_CW:
			LCD_HLineInt(Y, X, L);
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff fe9b 	bl	8000bdc <LCD_HLineInt>
			break;
 8000ea6:	e01f      	b.n	8000ee8 <LCD_VLine+0x94>
		case LCD_ORIENT_CCW:
			LCD_HLineInt(SCR_W - Y - L, X, L);
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	425b      	negs	r3, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	1b1b      	subs	r3, r3, r4
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	88f9      	ldrh	r1, [r7, #6]
 8000eba:	4622      	mov	r2, r4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe8d 	bl	8000bdc <LCD_HLineInt>
			break;
 8000ec2:	e011      	b.n	8000ee8 <LCD_VLine+0x94>
		case LCD_ORIENT_180:
			LCD_VLineInt(SCR_W - 1 - X, Y, L);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe2a 	bl	8000b2c <LCD_VLineInt>
			break;
 8000ed8:	e006      	b.n	8000ee8 <LCD_VLine+0x94>
		case LCD_ORIENT_NORMAL:
		default:
			LCD_VLineInt(X, Y, L);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4622      	mov	r2, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fe23 	bl	8000b2c <LCD_VLineInt>
			break;
 8000ee6:	bf00      	nop
	}
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <LCD_Rect>:

// Draw rectangle
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Rect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	80fb      	strh	r3, [r7, #6]
 8000f06:	4603      	mov	r3, r0
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	803b      	strh	r3, [r7, #0]
	LCD_HLine(X1, X2, Y1);
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	8879      	ldrh	r1, [r7, #2]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff4b 	bl	8000db4 <LCD_HLine>
	LCD_HLine(X1, X2, Y2);
 8000f1e:	883a      	ldrh	r2, [r7, #0]
 8000f20:	8879      	ldrh	r1, [r7, #2]
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff45 	bl	8000db4 <LCD_HLine>
	if (Y1 > Y2) {
 8000f2a:	88ba      	ldrh	r2, [r7, #4]
 8000f2c:	883b      	ldrh	r3, [r7, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d90b      	bls.n	8000f4a <LCD_Rect+0x56>
		SWAP_VARS(Y1, Y2);
 8000f32:	88ba      	ldrh	r2, [r7, #4]
 8000f34:	883b      	ldrh	r3, [r7, #0]
 8000f36:	4053      	eors	r3, r2
 8000f38:	80bb      	strh	r3, [r7, #4]
 8000f3a:	883a      	ldrh	r2, [r7, #0]
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	4053      	eors	r3, r2
 8000f40:	803b      	strh	r3, [r7, #0]
 8000f42:	88ba      	ldrh	r2, [r7, #4]
 8000f44:	883b      	ldrh	r3, [r7, #0]
 8000f46:	4053      	eors	r3, r2
 8000f48:	80bb      	strh	r3, [r7, #4]
	}
	Y1++;
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	80bb      	strh	r3, [r7, #4]
	Y2--;
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	803b      	strh	r3, [r7, #0]
	LCD_VLine(X1, Y1, Y2);
 8000f56:	883a      	ldrh	r2, [r7, #0]
 8000f58:	88b9      	ldrh	r1, [r7, #4]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff79 	bl	8000e54 <LCD_VLine>
	LCD_VLine(X2, Y1, Y2);
 8000f62:	883a      	ldrh	r2, [r7, #0]
 8000f64:	88b9      	ldrh	r1, [r7, #4]
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff73 	bl	8000e54 <LCD_VLine>
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
	...

08000f78 <LCD_FillRect>:
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
// note: doesn't check vRAM boundaries, so caller must respect
//       screen width and height while specifying X and Y coordinates
void LCD_FillRect(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8000f78:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4604      	mov	r4, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	80fb      	strh	r3, [r7, #6]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	803b      	strh	r3, [r7, #0]
	static const uint8_t LUT_B1[] = { 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01 };
	static const uint8_t LUT_B2[] = { 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF };

	if (X1 > X2) {
 8000f98:	88fa      	ldrh	r2, [r7, #6]
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d90b      	bls.n	8000fb8 <LCD_FillRect+0x40>
		SWAP_VARS(X1, X2);
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	4053      	eors	r3, r2
 8000fa6:	80fb      	strh	r3, [r7, #6]
 8000fa8:	887a      	ldrh	r2, [r7, #2]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4053      	eors	r3, r2
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	80fb      	strh	r3, [r7, #6]
	}

	if (Y1 > Y2) {
 8000fb8:	88ba      	ldrh	r2, [r7, #4]
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d90b      	bls.n	8000fd8 <LCD_FillRect+0x60>
		SWAP_VARS(Y1, Y2);
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	883b      	ldrh	r3, [r7, #0]
 8000fc4:	4053      	eors	r3, r2
 8000fc6:	80bb      	strh	r3, [r7, #4]
 8000fc8:	883a      	ldrh	r2, [r7, #0]
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	4053      	eors	r3, r2
 8000fce:	803b      	strh	r3, [r7, #0]
 8000fd0:	88ba      	ldrh	r2, [r7, #4]
 8000fd2:	883b      	ldrh	r3, [r7, #0]
 8000fd4:	4053      	eors	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
	}

	uint16_t dW;

	switch (lcd_orientation) {
 8000fd8:	4b95      	ldr	r3, [pc, #596]	; (8001230 <LCD_FillRect+0x2b8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d011      	beq.n	8001004 <LCD_FillRect+0x8c>
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d002      	beq.n	8000fea <LCD_FillRect+0x72>
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d032      	beq.n	800104e <LCD_FillRect+0xd6>
			SWAP_VARS(X1, Y1);
			SWAP_VARS(X2, Y2);
			break;
		case LCD_ORIENT_NORMAL:
		default:
			break;
 8000fe8:	e04a      	b.n	8001080 <LCD_FillRect+0x108>
			dW = SCR_W - 1 - X2;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8000ffe:	897b      	ldrh	r3, [r7, #10]
 8001000:	80fb      	strh	r3, [r7, #6]
			break;
 8001002:	e03d      	b.n	8001080 <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 8001004:	88fa      	ldrh	r2, [r7, #6]
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	4053      	eors	r3, r2
 800100a:	80fb      	strh	r3, [r7, #6]
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4053      	eors	r3, r2
 8001012:	80bb      	strh	r3, [r7, #4]
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	4053      	eors	r3, r2
 800101a:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 800101c:	887a      	ldrh	r2, [r7, #2]
 800101e:	883b      	ldrh	r3, [r7, #0]
 8001020:	4053      	eors	r3, r2
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	883a      	ldrh	r2, [r7, #0]
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	4053      	eors	r3, r2
 800102a:	803b      	strh	r3, [r7, #0]
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	883b      	ldrh	r3, [r7, #0]
 8001030:	4053      	eors	r3, r2
 8001032:	807b      	strh	r3, [r7, #2]
			dW = SCR_W - 1 - X2;
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 800103a:	3301      	adds	r3, #1
 800103c:	817b      	strh	r3, [r7, #10]
			X2 = SCR_W - 1 - X1;
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f5c3 73c7 	rsb	r3, r3, #398	; 0x18e
 8001044:	3301      	adds	r3, #1
 8001046:	807b      	strh	r3, [r7, #2]
			X1 = dW;
 8001048:	897b      	ldrh	r3, [r7, #10]
 800104a:	80fb      	strh	r3, [r7, #6]
			break;
 800104c:	e018      	b.n	8001080 <LCD_FillRect+0x108>
			SWAP_VARS(X1, Y1);
 800104e:	88fa      	ldrh	r2, [r7, #6]
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	4053      	eors	r3, r2
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	88ba      	ldrh	r2, [r7, #4]
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	4053      	eors	r3, r2
 800105c:	80bb      	strh	r3, [r7, #4]
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	4053      	eors	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
			SWAP_VARS(X2, Y2);
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	883b      	ldrh	r3, [r7, #0]
 800106a:	4053      	eors	r3, r2
 800106c:	807b      	strh	r3, [r7, #2]
 800106e:	883a      	ldrh	r2, [r7, #0]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4053      	eors	r3, r2
 8001074:	803b      	strh	r3, [r7, #0]
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	883b      	ldrh	r3, [r7, #0]
 800107a:	4053      	eors	r3, r2
 800107c:	807b      	strh	r3, [r7, #2]
			break;
 800107e:	bf00      	nop
	}

	// Mask for first and last byte
	register uint8_t mask_fb = LUT_B1[X1 & 0x07];
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	4a6b      	ldr	r2, [pc, #428]	; (8001234 <LCD_FillRect+0x2bc>)
 8001088:	5cd5      	ldrb	r5, [r2, r3]
	register uint8_t mask_lb = LUT_B2[X2 & 0x07];
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	4a69      	ldr	r2, [pc, #420]	; (8001238 <LCD_FillRect+0x2c0>)
 8001092:	f812 8003 	ldrb.w	r8, [r2, r3]

	// Offset in vRAM
	uint8_t *ptr_base = &vRAM[(((Y1 * SCR_W) + X1) >> 3)];
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800109c:	fb02 f203 	mul.w	r2, r2, r3
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4413      	add	r3, r2
 80010a4:	10db      	asrs	r3, r3, #3
 80010a6:	4a65      	ldr	r2, [pc, #404]	; (800123c <LCD_FillRect+0x2c4>)
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

	// Line width in bytes
	dW = (X2 >> 3) - (X1 >> 3);
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	08db      	lsrs	r3, r3, #3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	817b      	strh	r3, [r7, #10]

	if (dW) {
 80010bc:	897b      	ldrh	r3, [r7, #10]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d071      	beq.n	80011a6 <LCD_FillRect+0x22e>
		// Multiple bytes
		register uint16_t cntr;
		register uint8_t *ptr;

		switch (LCD_PixelMode) {
 80010c2:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <LCD_FillRect+0x2c8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d003      	beq.n	80010d2 <LCD_FillRect+0x15a>
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d022      	beq.n	8001114 <LCD_FillRect+0x19c>
 80010ce:	e043      	b.n	8001158 <LCD_FillRect+0x1e0>
			case LCD_PRES:
 80010d0:	bf00      	nop
				do {
					cntr = dW;
 80010d2:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 80010d4:	68fc      	ldr	r4, [r7, #12]
					*ptr++ |= mask_fb;
 80010d6:	4623      	mov	r3, r4
 80010d8:	1c5c      	adds	r4, r3, #1
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	432a      	orrs	r2, r5
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80010e2:	e003      	b.n	80010ec <LCD_FillRect+0x174>
						*ptr++ = 0xFF;
 80010e4:	4623      	mov	r3, r4
 80010e6:	1c5c      	adds	r4, r3, #1
 80010e8:	22ff      	movs	r2, #255	; 0xff
 80010ea:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 80010ec:	1e73      	subs	r3, r6, #1
 80010ee:	b29e      	uxth	r6, r3
 80010f0:	2e00      	cmp	r6, #0
 80010f2:	d1f7      	bne.n	80010e4 <LCD_FillRect+0x16c>
					};
					*ptr |= mask_lb;
 80010f4:	7823      	ldrb	r3, [r4, #0]
 80010f6:	ea48 0303 	orr.w	r3, r8, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3332      	adds	r3, #50	; 0x32
 8001102:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	80ba      	strh	r2, [r7, #4]
 800110a:	883a      	ldrh	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8df      	bhi.n	80010d0 <LCD_FillRect+0x158>
				break;
 8001110:	e087      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PINV:
 8001112:	bf00      	nop
				do {
					cntr = dW;
 8001114:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001116:	68fc      	ldr	r4, [r7, #12]
					*ptr++ ^= mask_fb;
 8001118:	4623      	mov	r3, r4
 800111a:	1c5c      	adds	r4, r3, #1
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	406a      	eors	r2, r5
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001124:	e005      	b.n	8001132 <LCD_FillRect+0x1ba>
						*ptr++ ^= 0xFF;
 8001126:	4623      	mov	r3, r4
 8001128:	1c5c      	adds	r4, r3, #1
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	43d2      	mvns	r2, r2
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001132:	1e73      	subs	r3, r6, #1
 8001134:	b29e      	uxth	r6, r3
 8001136:	2e00      	cmp	r6, #0
 8001138:	d1f5      	bne.n	8001126 <LCD_FillRect+0x1ae>
					};
					*ptr ^= mask_lb;
 800113a:	7823      	ldrb	r3, [r4, #0]
 800113c:	ea88 0303 	eor.w	r3, r8, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3332      	adds	r3, #50	; 0x32
 8001148:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	80ba      	strh	r2, [r7, #4]
 8001150:	883a      	ldrh	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d8dd      	bhi.n	8001112 <LCD_FillRect+0x19a>
				break;
 8001156:	e064      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 8001158:	43eb      	mvns	r3, r5
 800115a:	b2dd      	uxtb	r5, r3
				mask_lb = ~mask_lb;
 800115c:	ea6f 0308 	mvn.w	r3, r8
 8001160:	fa5f f883 	uxtb.w	r8, r3
				do {
					cntr = dW;
 8001164:	897e      	ldrh	r6, [r7, #10]
					ptr = ptr_base;
 8001166:	68fc      	ldr	r4, [r7, #12]
					*ptr++ &= mask_fb;
 8001168:	4623      	mov	r3, r4
 800116a:	1c5c      	adds	r4, r3, #1
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	402a      	ands	r2, r5
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 8001174:	e003      	b.n	800117e <LCD_FillRect+0x206>
						*ptr++ = 0x00;
 8001176:	4623      	mov	r3, r4
 8001178:	1c5c      	adds	r4, r3, #1
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
					while (--cntr) {
 800117e:	1e73      	subs	r3, r6, #1
 8001180:	b29e      	uxth	r6, r3
 8001182:	2e00      	cmp	r6, #0
 8001184:	d1f7      	bne.n	8001176 <LCD_FillRect+0x1fe>
					};
					*ptr &= mask_lb;
 8001186:	7823      	ldrb	r3, [r4, #0]
 8001188:	ea08 0303 	and.w	r3, r8, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	7023      	strb	r3, [r4, #0]
					ptr_base += SCR_W >> 3;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3332      	adds	r3, #50	; 0x32
 8001194:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	80ba      	strh	r2, [r7, #4]
 800119c:	883a      	ldrh	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d8e0      	bhi.n	8001164 <LCD_FillRect+0x1ec>
				break;
 80011a2:	bf00      	nop
 80011a4:	e03d      	b.n	8001222 <LCD_FillRect+0x2aa>
		}
	} else {
		// Single byte
		mask_fb &= mask_lb;
 80011a6:	ea05 0308 	and.w	r3, r5, r8
 80011aa:	b2dd      	uxtb	r5, r3

		switch (LCD_PixelMode) {
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <LCD_FillRect+0x2c8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d003      	beq.n	80011bc <LCD_FillRect+0x244>
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d012      	beq.n	80011de <LCD_FillRect+0x266>
 80011b8:	e021      	b.n	80011fe <LCD_FillRect+0x286>
			case LCD_PRES:
 80011ba:	bf00      	nop
				do {
					*ptr_base |= mask_fb;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	432b      	orrs	r3, r5
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3332      	adds	r3, #50	; 0x32
 80011cc:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	80ba      	strh	r2, [r7, #4]
 80011d4:	883a      	ldrh	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d8ef      	bhi.n	80011ba <LCD_FillRect+0x242>
				break;
 80011da:	e022      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PINV:
 80011dc:	bf00      	nop
				do {
					*ptr_base ^= mask_fb;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	406b      	eors	r3, r5
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3332      	adds	r3, #50	; 0x32
 80011ee:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	80ba      	strh	r2, [r7, #4]
 80011f6:	883a      	ldrh	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8ef      	bhi.n	80011dc <LCD_FillRect+0x264>
				break;
 80011fc:	e011      	b.n	8001222 <LCD_FillRect+0x2aa>
			case LCD_PSET:
			default:
				mask_fb = ~mask_fb;
 80011fe:	43eb      	mvns	r3, r5
 8001200:	b2dd      	uxtb	r5, r3
				do {
					*ptr_base &= mask_fb;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	402b      	ands	r3, r5
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	701a      	strb	r2, [r3, #0]
					ptr_base += SCR_W >> 3;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3332      	adds	r3, #50	; 0x32
 8001212:	60fb      	str	r3, [r7, #12]
				} while (Y1++ < Y2);
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	80ba      	strh	r2, [r7, #4]
 800121a:	883a      	ldrh	r2, [r7, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f0      	bhi.n	8001202 <LCD_FillRect+0x28a>
				break;
 8001220:	bf00      	nop
		}
	}
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000
 8001234:	080180cc 	.word	0x080180cc
 8001238:	080180d4 	.word	0x080180d4
 800123c:	20000394 	.word	0x20000394
 8001240:	20028aa4 	.word	0x20028aa4

08001244 <LCD_Line>:

// Draw line
// input:
//   X1,Y1 - top left coordinates
//   X2,Y2 - bottom right coordinates
void LCD_Line(int16_t X1, int16_t Y1, int16_t X2, int16_t Y2) {
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	4604      	mov	r4, r0
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	4603      	mov	r3, r0
 8001258:	80bb      	strh	r3, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	807b      	strh	r3, [r7, #2]
 800125e:	4613      	mov	r3, r2
 8001260:	803b      	strh	r3, [r7, #0]
	int16_t dX = X2 - X1;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	82bb      	strh	r3, [r7, #20]
	int16_t dY = Y2 - Y1;
 800126c:	883a      	ldrh	r2, [r7, #0]
 800126e:	88bb      	ldrh	r3, [r7, #4]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	b29b      	uxth	r3, r3
 8001274:	827b      	strh	r3, [r7, #18]
	int16_t dXsym = (dX > 0) ? 1 : -1;
 8001276:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	dd01      	ble.n	8001282 <LCD_Line+0x3e>
 800127e:	2301      	movs	r3, #1
 8001280:	e001      	b.n	8001286 <LCD_Line+0x42>
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	823b      	strh	r3, [r7, #16]
	int16_t dYsym = (dY > 0) ? 1 : -1;
 8001288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd01      	ble.n	8001294 <LCD_Line+0x50>
 8001290:	2301      	movs	r3, #1
 8001292:	e001      	b.n	8001298 <LCD_Line+0x54>
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	81fb      	strh	r3, [r7, #14]

	if (dX == 0) {
 800129a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <LCD_Line+0x6c>
		LCD_VLine(X1, Y1, Y2);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	88b9      	ldrh	r1, [r7, #4]
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fdd3 	bl	8000e54 <LCD_VLine>
		return;
 80012ae:	e08d      	b.n	80013cc <LCD_Line+0x188>
	}
	if (dY == 0) {
 80012b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <LCD_Line+0x82>
		LCD_HLine(X1, X2, Y1);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	8879      	ldrh	r1, [r7, #2]
 80012bc:	88ba      	ldrh	r2, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd78 	bl	8000db4 <LCD_HLine>
		return;
 80012c4:	e082      	b.n	80013cc <LCD_Line+0x188>
	}

	dX *= dXsym;
 80012c6:	8aba      	ldrh	r2, [r7, #20]
 80012c8:	8a3b      	ldrh	r3, [r7, #16]
 80012ca:	fb12 f303 	smulbb	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	82bb      	strh	r3, [r7, #20]
	dY *= dYsym;
 80012d2:	8a7a      	ldrh	r2, [r7, #18]
 80012d4:	89fb      	ldrh	r3, [r7, #14]
 80012d6:	fb12 f303 	smulbb	r3, r2, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	827b      	strh	r3, [r7, #18]
	int16_t dX2 = dX << 1;
 80012de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	81bb      	strh	r3, [r7, #12]
	int16_t dY2 = dY << 1;
 80012e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dX >= dY) {
 80012ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	db30      	blt.n	800135c <LCD_Line+0x118>
		di = dY2 - dX;
 80012fa:	897a      	ldrh	r2, [r7, #10]
 80012fc:	8abb      	ldrh	r3, [r7, #20]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b29b      	uxth	r3, r3
 8001302:	82fb      	strh	r3, [r7, #22]
		while (X1 != X2) {
 8001304:	e023      	b.n	800134e <LCD_Line+0x10a>
			LCD_Pixel(X1, Y1);
 8001306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fbab 	bl	8000a6c <LCD_Pixel>
			X1 += dXsym;
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	8a3b      	ldrh	r3, [r7, #16]
 800131a:	4413      	add	r3, r2
 800131c:	b29b      	uxth	r3, r3
 800131e:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 8001320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001324:	2b00      	cmp	r3, #0
 8001326:	da05      	bge.n	8001334 <LCD_Line+0xf0>
				di += dY2;
 8001328:	8afa      	ldrh	r2, [r7, #22]
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	4413      	add	r3, r2
 800132e:	b29b      	uxth	r3, r3
 8001330:	82fb      	strh	r3, [r7, #22]
 8001332:	e00c      	b.n	800134e <LCD_Line+0x10a>
			} else {
				di += dY2 - dX2;
 8001334:	897a      	ldrh	r2, [r7, #10]
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	82fb      	strh	r3, [r7, #22]
				Y1 += dYsym;
 8001344:	88ba      	ldrh	r2, [r7, #4]
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	80bb      	strh	r3, [r7, #4]
		while (X1 != X2) {
 800134e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001352:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001356:	429a      	cmp	r2, r3
 8001358:	d1d5      	bne.n	8001306 <LCD_Line+0xc2>
 800135a:	e02f      	b.n	80013bc <LCD_Line+0x178>
			}
		}
	} else {
		di = dX2 - dY;
 800135c:	89ba      	ldrh	r2, [r7, #12]
 800135e:	8a7b      	ldrh	r3, [r7, #18]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	82fb      	strh	r3, [r7, #22]
		while (Y1 != Y2) {
 8001366:	e023      	b.n	80013b0 <LCD_Line+0x16c>
			LCD_Pixel(X1, Y1);
 8001368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fb7a 	bl	8000a6c <LCD_Pixel>
			Y1 += dYsym;
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	4413      	add	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 8001382:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da05      	bge.n	8001396 <LCD_Line+0x152>
				di += dX2;
 800138a:	8afa      	ldrh	r2, [r7, #22]
 800138c:	89bb      	ldrh	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	82fb      	strh	r3, [r7, #22]
 8001394:	e00c      	b.n	80013b0 <LCD_Line+0x16c>
			} else {
				di += dX2 - dY2;
 8001396:	89ba      	ldrh	r2, [r7, #12]
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	82fb      	strh	r3, [r7, #22]
				X1 += dXsym;
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	8a3b      	ldrh	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	80fb      	strh	r3, [r7, #6]
		while (Y1 != Y2) {
 80013b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d1d5      	bne.n	8001368 <LCD_Line+0x124>
			}
		}
	}
	LCD_Pixel(X1, Y1);
 80013bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb50 	bl	8000a6c <LCD_Pixel>
}
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}

080013d2 <LCD_PutChar>:
// input:
//   X,Y - character top left corner coordinates
//   chr - character to be drawn
//   font - pointer to font
// return: character width in pixels
uint8_t LCD_PutChar(uint16_t X, uint16_t Y, uint8_t chr, const Font_TypeDef *font) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b088      	sub	sp, #32
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4603      	mov	r3, r0
 80013dc:	81fb      	strh	r3, [r7, #14]
 80013de:	460b      	mov	r3, r1
 80013e0:	81bb      	strh	r3, [r7, #12]
 80013e2:	4613      	mov	r3, r2
 80013e4:	72fb      	strb	r3, [r7, #11]
	uint8_t tmpCh;
	uint8_t bL;
	const uint8_t *pCh;

	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	7afa      	ldrb	r2, [r7, #11]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d304      	bcc.n	80013fa <LCD_PutChar+0x28>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	795b      	ldrb	r3, [r3, #5]
 80013f4:	7afa      	ldrb	r2, [r7, #11]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d902      	bls.n	8001400 <LCD_PutChar+0x2e>
		chr = font->font_UnknownChar;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	72fb      	strb	r3, [r7, #11]
	}

	// Pointer to the first byte of character in font data array
	pCh = &font->font_Data[(chr - font->font_MinChar) * font->font_BPC];
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	7912      	ldrb	r2, [r2, #4]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	7892      	ldrb	r2, [r2, #2]
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	3307      	adds	r3, #7
 8001416:	617b      	str	r3, [r7, #20]

	// Draw character
	if (font->font_Scan == FONT_V) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d177      	bne.n	8001510 <LCD_PutChar+0x13e>
		// Vertical pixels order
		if (font->font_Height < 9) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d829      	bhi.n	800147c <LCD_PutChar+0xaa>
			// Height is 8 pixels or less (one byte per column)
			pX = X;
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800142c:	e01e      	b.n	800146c <LCD_PutChar+0x9a>
				pY = Y;
 800142e:	89bb      	ldrh	r3, [r7, #12]
 8001430:	83bb      	strh	r3, [r7, #28]
				tmpCh = *pCh++;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	617a      	str	r2, [r7, #20]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 800143c:	e010      	b.n	8001460 <LCD_PutChar+0x8e>
					if (tmpCh & 0x01) {
 800143e:	7efb      	ldrb	r3, [r7, #27]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <LCD_PutChar+0x82>
						LCD_Pixel(pX, pY);
 8001448:	8bfb      	ldrh	r3, [r7, #30]
 800144a:	8bba      	ldrh	r2, [r7, #28]
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb0c 	bl	8000a6c <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001454:	7efb      	ldrb	r3, [r7, #27]
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	76fb      	strb	r3, [r7, #27]
					pY++;
 800145a:	8bbb      	ldrh	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	83bb      	strh	r3, [r7, #28]
				while (tmpCh) {
 8001460:	7efb      	ldrb	r3, [r7, #27]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1eb      	bne.n	800143e <LCD_PutChar+0x6c>
				}
				pX++;
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	3301      	adds	r3, #1
 800146a:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 800146c:	8bfa      	ldrh	r2, [r7, #30]
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	7809      	ldrb	r1, [r1, #0]
 8001474:	440b      	add	r3, r1
 8001476:	429a      	cmp	r2, r3
 8001478:	dbd9      	blt.n	800142e <LCD_PutChar+0x5c>
 800147a:	e0c0      	b.n	80015fe <LCD_PutChar+0x22c>
			}
		} else {
			// Height is more than 8 pixels (several bytes per column)
			pX = X;
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001480:	e03e      	b.n	8001500 <LCD_PutChar+0x12e>
				pY = Y;
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 8001486:	e031      	b.n	80014ec <LCD_PutChar+0x11a>
					bL = 8;
 8001488:	2308      	movs	r3, #8
 800148a:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	617a      	str	r2, [r7, #20]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 8001496:	7efb      	ldrb	r3, [r7, #27]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d022      	beq.n	80014e2 <LCD_PutChar+0x110>
						while (bL) {
 800149c:	e01d      	b.n	80014da <LCD_PutChar+0x108>
							if (tmpCh & 0x01) {
 800149e:	7efb      	ldrb	r3, [r7, #27]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <LCD_PutChar+0xe2>
								LCD_Pixel(pX, pY);
 80014a8:	8bfb      	ldrh	r3, [r7, #30]
 80014aa:	8bba      	ldrh	r2, [r7, #28]
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fadc 	bl	8000a6c <LCD_Pixel>
							}
							tmpCh >>= 1;
 80014b4:	7efb      	ldrb	r3, [r7, #27]
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80014ba:	7efb      	ldrb	r3, [r7, #27]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <LCD_PutChar+0xfc>
								pY++;
 80014c0:	8bbb      	ldrh	r3, [r7, #28]
 80014c2:	3301      	adds	r3, #1
 80014c4:	83bb      	strh	r3, [r7, #28]
								bL--;
 80014c6:	7ebb      	ldrb	r3, [r7, #26]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e005      	b.n	80014da <LCD_PutChar+0x108>
							} else {
								pY += bL;
 80014ce:	7ebb      	ldrb	r3, [r7, #26]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	8bbb      	ldrh	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	83bb      	strh	r3, [r7, #28]
								break;
 80014d8:	e008      	b.n	80014ec <LCD_PutChar+0x11a>
						while (bL) {
 80014da:	7ebb      	ldrb	r3, [r7, #26]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1de      	bne.n	800149e <LCD_PutChar+0xcc>
 80014e0:	e004      	b.n	80014ec <LCD_PutChar+0x11a>
							}
						}
					} else {
						pY += bL;
 80014e2:	7ebb      	ldrb	r3, [r7, #26]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	8bbb      	ldrh	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	83bb      	strh	r3, [r7, #28]
				while (pY < Y + font->font_Height) {
 80014ec:	8bba      	ldrh	r2, [r7, #28]
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	7849      	ldrb	r1, [r1, #1]
 80014f4:	440b      	add	r3, r1
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbc6      	blt.n	8001488 <LCD_PutChar+0xb6>
					}
				}
				pX++;
 80014fa:	8bfb      	ldrh	r3, [r7, #30]
 80014fc:	3301      	adds	r3, #1
 80014fe:	83fb      	strh	r3, [r7, #30]
			while (pX < X + font->font_Width) {
 8001500:	8bfa      	ldrh	r2, [r7, #30]
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	7809      	ldrb	r1, [r1, #0]
 8001508:	440b      	add	r3, r1
 800150a:	429a      	cmp	r2, r3
 800150c:	dbb9      	blt.n	8001482 <LCD_PutChar+0xb0>
 800150e:	e076      	b.n	80015fe <LCD_PutChar+0x22c>
			}
		}
	} else {
		// Horizontal pixels order
		if (font->font_Width < 9) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d829      	bhi.n	800156c <LCD_PutChar+0x19a>
			// Width is 8 pixels or less (one byte per row)
			pY = Y;
 8001518:	89bb      	ldrh	r3, [r7, #12]
 800151a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800151c:	e01e      	b.n	800155c <LCD_PutChar+0x18a>
				pX = X;
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	83fb      	strh	r3, [r7, #30]
				tmpCh = *pCh++;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	617a      	str	r2, [r7, #20]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	76fb      	strb	r3, [r7, #27]
				while (tmpCh) {
 800152c:	e010      	b.n	8001550 <LCD_PutChar+0x17e>
					if (tmpCh & 0x01) {
 800152e:	7efb      	ldrb	r3, [r7, #27]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <LCD_PutChar+0x172>
						LCD_Pixel(pX, pY);
 8001538:	8bfb      	ldrh	r3, [r7, #30]
 800153a:	8bba      	ldrh	r2, [r7, #28]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fa94 	bl	8000a6c <LCD_Pixel>
					}
					tmpCh >>= 1;
 8001544:	7efb      	ldrb	r3, [r7, #27]
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	76fb      	strb	r3, [r7, #27]
					pX++;
 800154a:	8bfb      	ldrh	r3, [r7, #30]
 800154c:	3301      	adds	r3, #1
 800154e:	83fb      	strh	r3, [r7, #30]
				while (tmpCh) {
 8001550:	7efb      	ldrb	r3, [r7, #27]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1eb      	bne.n	800152e <LCD_PutChar+0x15c>
				}
				pY++;
 8001556:	8bbb      	ldrh	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 800155c:	8bba      	ldrh	r2, [r7, #28]
 800155e:	89bb      	ldrh	r3, [r7, #12]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	7849      	ldrb	r1, [r1, #1]
 8001564:	440b      	add	r3, r1
 8001566:	429a      	cmp	r2, r3
 8001568:	dbd9      	blt.n	800151e <LCD_PutChar+0x14c>
 800156a:	e048      	b.n	80015fe <LCD_PutChar+0x22c>
			}
		} else {
			// Width is more than 8 pixels (several bytes per row)
			pY = Y;
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 8001570:	e03e      	b.n	80015f0 <LCD_PutChar+0x21e>
				pX = X;
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 8001576:	e031      	b.n	80015dc <LCD_PutChar+0x20a>
					bL = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	76bb      	strb	r3, [r7, #26]
					tmpCh = *pCh++;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	617a      	str	r2, [r7, #20]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	76fb      	strb	r3, [r7, #27]
					if (tmpCh) {
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <LCD_PutChar+0x200>
						while (bL) {
 800158c:	e01d      	b.n	80015ca <LCD_PutChar+0x1f8>
							if (tmpCh & 0x01) {
 800158e:	7efb      	ldrb	r3, [r7, #27]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <LCD_PutChar+0x1d2>
								LCD_Pixel(pX, pY);
 8001598:	8bfb      	ldrh	r3, [r7, #30]
 800159a:	8bba      	ldrh	r2, [r7, #28]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fa64 	bl	8000a6c <LCD_Pixel>
							}
							tmpCh >>= 1;
 80015a4:	7efb      	ldrb	r3, [r7, #27]
 80015a6:	085b      	lsrs	r3, r3, #1
 80015a8:	76fb      	strb	r3, [r7, #27]
							if (tmpCh) {
 80015aa:	7efb      	ldrb	r3, [r7, #27]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <LCD_PutChar+0x1ec>
								pX++;
 80015b0:	8bfb      	ldrh	r3, [r7, #30]
 80015b2:	3301      	adds	r3, #1
 80015b4:	83fb      	strh	r3, [r7, #30]
								bL--;
 80015b6:	7ebb      	ldrb	r3, [r7, #26]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	76bb      	strb	r3, [r7, #26]
 80015bc:	e005      	b.n	80015ca <LCD_PutChar+0x1f8>
							} else {
								pX += bL;
 80015be:	7ebb      	ldrb	r3, [r7, #26]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	8bfb      	ldrh	r3, [r7, #30]
 80015c4:	4413      	add	r3, r2
 80015c6:	83fb      	strh	r3, [r7, #30]
								break;
 80015c8:	e008      	b.n	80015dc <LCD_PutChar+0x20a>
						while (bL) {
 80015ca:	7ebb      	ldrb	r3, [r7, #26]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1de      	bne.n	800158e <LCD_PutChar+0x1bc>
 80015d0:	e004      	b.n	80015dc <LCD_PutChar+0x20a>
							}
						}
					} else {
						pX += bL;
 80015d2:	7ebb      	ldrb	r3, [r7, #26]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	8bfb      	ldrh	r3, [r7, #30]
 80015d8:	4413      	add	r3, r2
 80015da:	83fb      	strh	r3, [r7, #30]
				while (pX < X + font->font_Width) {
 80015dc:	8bfa      	ldrh	r2, [r7, #30]
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	7809      	ldrb	r1, [r1, #0]
 80015e4:	440b      	add	r3, r1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbc6      	blt.n	8001578 <LCD_PutChar+0x1a6>
					}
				}
				pY++;
 80015ea:	8bbb      	ldrh	r3, [r7, #28]
 80015ec:	3301      	adds	r3, #1
 80015ee:	83bb      	strh	r3, [r7, #28]
			while (pY < Y + font->font_Height) {
 80015f0:	8bba      	ldrh	r2, [r7, #28]
 80015f2:	89bb      	ldrh	r3, [r7, #12]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	7849      	ldrb	r1, [r1, #1]
 80015f8:	440b      	add	r3, r1
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbb9      	blt.n	8001572 <LCD_PutChar+0x1a0>
			}
		}
	}

	return font->font_Width + 1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	b2db      	uxtb	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <LCD_PutStr>:
// input:
//   X,Y - top left coordinates of first character
//   str - pointer to zero-terminated string
//   font - pointer to font
// return: string width in pixels
uint16_t LCD_PutStr(uint16_t X, uint16_t Y, const char *str, const Font_TypeDef *font) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60ba      	str	r2, [r7, #8]
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4603      	mov	r3, r0
 800161c:	81fb      	strh	r3, [r7, #14]
 800161e:	460b      	mov	r3, r1
 8001620:	81bb      	strh	r3, [r7, #12]
	uint16_t pX = X;
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	82fb      	strh	r3, [r7, #22]
	uint16_t eX = scr_width - font->font_Width - 1;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <LCD_PutStr+0x6c>)
 8001628:	881a      	ldrh	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	b29b      	uxth	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	82bb      	strh	r3, [r7, #20]

	while (*str) {
 8001638:	e011      	b.n	800165e <LCD_PutStr+0x4e>
		pX += LCD_PutChar(pX, Y, *str++, font);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	89b9      	ldrh	r1, [r7, #12]
 8001644:	8af8      	ldrh	r0, [r7, #22]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f7ff fec3 	bl	80013d2 <LCD_PutChar>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	4413      	add	r3, r2
 8001654:	82fb      	strh	r3, [r7, #22]
		if (pX > eX) break;
 8001656:	8afa      	ldrh	r2, [r7, #22]
 8001658:	8abb      	ldrh	r3, [r7, #20]
 800165a:	429a      	cmp	r2, r3
 800165c:	d804      	bhi.n	8001668 <LCD_PutStr+0x58>
	while (*str) {
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1e9      	bne.n	800163a <LCD_PutStr+0x2a>
 8001666:	e000      	b.n	800166a <LCD_PutStr+0x5a>
		if (pX > eX) break;
 8001668:	bf00      	nop
	}

	return (pX - X);
 800166a:	8afa      	ldrh	r2, [r7, #22]
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b29b      	uxth	r3, r3
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20028aa6 	.word	0x20028aa6

08001680 <LCD_PutInt>:
// input:
//   X,Y - top left coordinates of first symbol
//   num - signed integer value
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutInt(uint16_t X, uint16_t Y, int32_t num, const Font_TypeDef *font) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4603      	mov	r3, r0
 800168c:	81fb      	strh	r3, [r7, #14]
 800168e:	460b      	mov	r3, r1
 8001690:	81bb      	strh	r3, [r7, #12]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t pX = X;
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	843b      	strh	r3, [r7, #32]

	// String termination character
	*pStr++ = '\0';
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	627a      	str	r2, [r7, #36]	; 0x24
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	if (num < 0) {
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da05      	bge.n	80016be <LCD_PutInt+0x3e>
		neg = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	425b      	negs	r3, r3
 80016bc:	60bb      	str	r3, [r7, #8]
	}
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <LCD_PutInt+0xc8>)
 80016c2:	fb83 1302 	smull	r1, r3, r3, r2
 80016c6:	1099      	asrs	r1, r3, #2
 80016c8:	17d3      	asrs	r3, r2, #31
 80016ca:	1ac9      	subs	r1, r1, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	1ad1      	subs	r1, r2, r3
 80016d6:	b2ca      	uxtb	r2, r1
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1c59      	adds	r1, r3, #1
 80016dc:	6279      	str	r1, [r7, #36]	; 0x24
 80016de:	3230      	adds	r2, #48	; 0x30
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <LCD_PutInt+0xc8>)
 80016e8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ec:	1092      	asrs	r2, r2, #2
 80016ee:	17db      	asrs	r3, r3, #31
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1e1      	bne.n	80016be <LCD_PutInt+0x3e>
	if (neg) {
 80016fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <LCD_PutInt+0xa6>
		*pStr++ = '-';
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	627a      	str	r2, [r7, #36]	; 0x24
 8001708:	222d      	movs	r2, #45	; 0x2d
 800170a:	701a      	strb	r2, [r3, #0]
	}

	// Draw a number
	while (*--pStr) {
 800170c:	e00b      	b.n	8001726 <LCD_PutInt+0xa6>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	89b9      	ldrh	r1, [r7, #12]
 8001714:	8c38      	ldrh	r0, [r7, #32]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f7ff fe5b 	bl	80013d2 <LCD_PutChar>
 800171c:	4603      	mov	r3, r0
 800171e:	b29a      	uxth	r2, r3
 8001720:	8c3b      	ldrh	r3, [r7, #32]
 8001722:	4413      	add	r3, r2
 8001724:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3b01      	subs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ec      	bne.n	800170e <LCD_PutInt+0x8e>
	}

	return (pX - X);
 8001734:	8c3b      	ldrh	r3, [r7, #32]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	66666667 	.word	0x66666667

0800174c <LCD_PutIntF>:
//   X,Y - top left coordinates of first symbol
//   num - unsigned integer value
//   decimals - number of digits after decimal point
//   font - pointer to font
// return: number width in pixels
uint8_t LCD_PutIntF(uint16_t X, uint16_t Y, int32_t num, uint8_t decimals, const Font_TypeDef *font) {
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b08b      	sub	sp, #44	; 0x2c
 8001750:	af00      	add	r7, sp, #0
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	460b      	mov	r3, r1
 800175c:	81bb      	strh	r3, [r7, #12]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]
	uint8_t str[11]; // 10 chars max for INT32_MIN..INT32_MAX (without sign)
	uint8_t *pStr = str;
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t neg = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t strLen = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint16_t pX = X;
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	843b      	strh	r3, [r7, #32]

	// Convert number to characters
	*pStr++ = '\0'; // String termination character
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	627a      	str	r2, [r7, #36]	; 0x24
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
	if (num < 0) {
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	da05      	bge.n	8001794 <LCD_PutIntF+0x48>
		neg = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		num *= -1;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	425b      	negs	r3, r3
 8001792:	60bb      	str	r3, [r7, #8]
	}
	do {
		*pStr++ = (num % 10) + '0';
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <LCD_PutIntF+0x160>)
 8001798:	fb83 1302 	smull	r1, r3, r3, r2
 800179c:	1099      	asrs	r1, r3, #2
 800179e:	17d3      	asrs	r3, r2, #31
 80017a0:	1ac9      	subs	r1, r1, r3
 80017a2:	460b      	mov	r3, r1
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	1ad1      	subs	r1, r2, r3
 80017ac:	b2ca      	uxtb	r2, r1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	1c59      	adds	r1, r3, #1
 80017b2:	6279      	str	r1, [r7, #36]	; 0x24
 80017b4:	3230      	adds	r2, #48	; 0x30
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
		strLen++;
 80017ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017be:	3301      	adds	r3, #1
 80017c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	} while (num /= 10);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4a39      	ldr	r2, [pc, #228]	; (80018ac <LCD_PutIntF+0x160>)
 80017c8:	fb82 1203 	smull	r1, r2, r2, r3
 80017cc:	1092      	asrs	r2, r2, #2
 80017ce:	17db      	asrs	r3, r3, #31
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1dc      	bne.n	8001794 <LCD_PutIntF+0x48>

	// Add leading zeroes
	if (strLen <= decimals) {
 80017da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d80f      	bhi.n	8001804 <LCD_PutIntF+0xb8>
		while (strLen <= decimals) {
 80017e4:	e009      	b.n	80017fa <LCD_PutIntF+0xae>
			*pStr++ = '0';
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	627a      	str	r2, [r7, #36]	; 0x24
 80017ec:	2230      	movs	r2, #48	; 0x30
 80017ee:	701a      	strb	r2, [r3, #0]
			strLen++;
 80017f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017f4:	3301      	adds	r3, #1
 80017f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		while (strLen <= decimals) {
 80017fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	429a      	cmp	r2, r3
 8001802:	d9f0      	bls.n	80017e6 <LCD_PutIntF+0x9a>
		}
	}

	// Minus sign?
	if (neg) {
 8001804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03d      	beq.n	8001888 <LCD_PutIntF+0x13c>
		*pStr++ = '-';
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	627a      	str	r2, [r7, #36]	; 0x24
 8001812:	222d      	movs	r2, #45	; 0x2d
 8001814:	701a      	strb	r2, [r3, #0]
		strLen++;
 8001816:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800181a:	3301      	adds	r3, #1
 800181c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	// Draw a number
	while (*--pStr) {
 8001820:	e032      	b.n	8001888 <LCD_PutIntF+0x13c>
		pX += LCD_PutChar(pX, Y, *pStr, font);
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	89b9      	ldrh	r1, [r7, #12]
 8001828:	8c38      	ldrh	r0, [r7, #32]
 800182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182c:	f7ff fdd1 	bl	80013d2 <LCD_PutChar>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	8c3b      	ldrh	r3, [r7, #32]
 8001836:	4413      	add	r3, r2
 8001838:	843b      	strh	r3, [r7, #32]
		if (decimals && (--strLen == decimals)) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d023      	beq.n	8001888 <LCD_PutIntF+0x13c>
 8001840:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001844:	3b01      	subs	r3, #1
 8001846:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800184a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	429a      	cmp	r2, r3
 8001852:	d119      	bne.n	8001888 <LCD_PutIntF+0x13c>
			// Draw decimal point
			LCD_Rect(pX, Y + font->font_Height - 2, pX + 1, Y + font->font_Height - 1);
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	b29a      	uxth	r2, r3
 800185a:	89bb      	ldrh	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b02      	subs	r3, #2
 8001862:	b299      	uxth	r1, r3
 8001864:	8c3b      	ldrh	r3, [r7, #32]
 8001866:	3301      	adds	r3, #1
 8001868:	b29c      	uxth	r4, r3
 800186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	b29a      	uxth	r2, r3
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	8c38      	ldrh	r0, [r7, #32]
 800187c:	4622      	mov	r2, r4
 800187e:	f7ff fb39 	bl	8000ef4 <LCD_Rect>
			pX += 3;
 8001882:	8c3b      	ldrh	r3, [r7, #32]
 8001884:	3303      	adds	r3, #3
 8001886:	843b      	strh	r3, [r7, #32]
	while (*--pStr) {
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	3b01      	subs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1c5      	bne.n	8001822 <LCD_PutIntF+0xd6>
		}
	}

	return (pX - X);
 8001896:	8c3b      	ldrh	r3, [r7, #32]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b2db      	uxtb	r3, r3
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	372c      	adds	r7, #44	; 0x2c
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	66666667 	.word	0x66666667

080018b0 <drawUpDownArrow>:
		   HAL_SPI_Transmit(&hspi4, (uint8_t *)test, sizeof(test), 100);
	   	   SMLCD_SCS_L;
		   HAL_Delay(5);
	   }
}
void drawUpDownArrow(uint16_t X, uint16_t Y, uint16_t S, uint16_t dir){
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	int i=X;
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	61bb      	str	r3, [r7, #24]
	int j=Y;
 80018d2:	88bb      	ldrh	r3, [r7, #4]
 80018d4:	617b      	str	r3, [r7, #20]
	int size=S;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	613b      	str	r3, [r7, #16]
	int direction = dir;
 80018da:	883b      	ldrh	r3, [r7, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
	int lineCounter;
	if((direction==0)||(direction==1)){
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <drawUpDownArrow+0x3a>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d11f      	bne.n	800192a <drawUpDownArrow+0x7a>
		LCD_FillRect(i-size, j-(size*2), i+size, j+(size*2));
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b298      	uxth	r0, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	b299      	uxth	r1, r3
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	b29a      	uxth	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b29c      	uxth	r4, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	b29b      	uxth	r3, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	4622      	mov	r2, r4
 8001924:	f7ff fb28 	bl	8000f78 <LCD_FillRect>
 8001928:	e01e      	b.n	8001968 <drawUpDownArrow+0xb8>
	}
	else{
		LCD_FillRect(i-(size*2), j-size, i+(size*2), j+size);
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	b29a      	uxth	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	b29b      	uxth	r3, r3
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	b29b      	uxth	r3, r3
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b298      	uxth	r0, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	b29a      	uxth	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	b29b      	uxth	r3, r3
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b299      	uxth	r1, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29c      	uxth	r4, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	b29a      	uxth	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	4622      	mov	r2, r4
 8001964:	f7ff fb08 	bl	8000f78 <LCD_FillRect>
	}
	switch(direction)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b03      	cmp	r3, #3
 800196c:	f200 8234 	bhi.w	8001dd8 <drawUpDownArrow+0x528>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <drawUpDownArrow+0xc8>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	08001a9f 	.word	0x08001a9f
 8001980:	08001bb5 	.word	0x08001bb5
 8001984:	08001cc7 	.word	0x08001cc7
	{
	case 0: //upwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	e03d      	b.n	8001a0a <drawUpDownArrow+0x15a>
			LCD_Line(i-(size*2)+lineCounter,j-(size*2 +1)-lineCounter, i+(size*2)-lineCounter, j-(size*2 +1)-lineCounter);
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	b29a      	uxth	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	b29b      	uxth	r3, r3
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29a      	uxth	r2, r3
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b218      	sxth	r0, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b219      	sxth	r1, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	b29b      	uxth	r3, r3
 80019de:	b21c      	sxth	r4, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4622      	mov	r2, r4
 8001a00:	f7ff fc20 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbbc      	blt.n	800198e <drawUpDownArrow+0xde>
		}
		LCD_Line(i-(size*2),j-(size*2 +1),i,j-(size*4));
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b218      	sxth	r0, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b219      	sxth	r1, r3
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	b21c      	sxth	r4, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4622      	mov	r2, r4
 8001a54:	f7ff fbf6 	bl	8001244 <LCD_Line>
		LCD_Line(i+(size*2),j-(size*2 +1),i,j-(size*4));
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b218      	sxth	r0, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b219      	sxth	r1, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	b21c      	sxth	r4, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4622      	mov	r2, r4
 8001a98:	f7ff fbd4 	bl	8001244 <LCD_Line>
		break;
 8001a9c:	e19c      	b.n	8001dd8 <drawUpDownArrow+0x528>
	}
	case 1:  //downwards facing arrow
	{
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e03d      	b.n	8001b20 <drawUpDownArrow+0x270>
			LCD_Line(i-(size*2)+lineCounter,j+(size*2 +1)+lineCounter, i+(size*2)-lineCounter, j+(size*2 +1)+lineCounter);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b218      	sxth	r0, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b219      	sxth	r1, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21c      	sxth	r4, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4622      	mov	r2, r4
 8001b16:	f7ff fb95 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbbc      	blt.n	8001aa4 <drawUpDownArrow+0x1f4>
		}
		LCD_Line(i-(size*2),j+(size*2 +1),i,j+(size*4));
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	b218      	sxth	r0, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b219      	sxth	r1, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	b21c      	sxth	r4, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	4622      	mov	r2, r4
 8001b6a:	f7ff fb6b 	bl	8001244 <LCD_Line>
		LCD_Line(i+(size*2),j+(size*2 +1),i,j+(size*4));
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b218      	sxth	r0, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b219      	sxth	r1, r3
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	b21c      	sxth	r4, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4622      	mov	r2, r4
 8001bae:	f7ff fb49 	bl	8001244 <LCD_Line>
		break;
 8001bb2:	e111      	b.n	8001dd8 <drawUpDownArrow+0x528>
	}
	case 2:{   //rightwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	e03d      	b.n	8001c36 <drawUpDownArrow+0x386>
			LCD_Line(i+(size*2+1)+lineCounter,j+(size*2)-lineCounter, i+(size*2+1)+lineCounter, j-(size*2)+lineCounter);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b218      	sxth	r0, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b219      	sxth	r1, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21c      	sxth	r4, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	f7ff fb0a 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	3301      	adds	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbbc      	blt.n	8001bba <drawUpDownArrow+0x30a>
		}
		LCD_Line(i+(size*2+1),j+(size*2),i+(size*4),j);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b218      	sxth	r0, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b219      	sxth	r1, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	f7ff fae1 	bl	8001244 <LCD_Line>
		LCD_Line(i+(size*2+1),j-(size*2),i+(size*4),j);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b218      	sxth	r0, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	b219      	sxth	r1, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	f7ff fac0 	bl	8001244 <LCD_Line>
		break;
 8001cc4:	e088      	b.n	8001dd8 <drawUpDownArrow+0x528>
	}
	case 3:{   //leftwards facing arrow
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e03d      	b.n	8001d48 <drawUpDownArrow+0x498>
			LCD_Line(i-(size*2+1)-lineCounter,j+(size*2)-lineCounter, i-(size*2+1)-lineCounter, j-(size*2)+lineCounter);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b218      	sxth	r0, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	b219      	sxth	r1, r3
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b21c      	sxth	r4, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21b      	sxth	r3, r3
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	f7ff fa81 	bl	8001244 <LCD_Line>
		for(lineCounter=0;lineCounter<(size*2);lineCounter++){
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbbc      	blt.n	8001ccc <drawUpDownArrow+0x41c>
		}
		LCD_Line(i-(size*2+1),j+(size*2),i-(size*4),j);
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b218      	sxth	r0, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b219      	sxth	r1, r3
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	f7ff fa58 	bl	8001244 <LCD_Line>
		LCD_Line(i-(size*2+1),j-(size*2),i-(size*4),j);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b218      	sxth	r0, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b219      	sxth	r1, r3
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	f7ff fa37 	bl	8001244 <LCD_Line>
		break;
 8001dd6:	bf00      	nop
	}
	}

}
 8001dd8:	bf00      	nop
 8001dda:	3724      	adds	r7, #36	; 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}

08001de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 //static _Bool ON = 1;
 //static _Bool OFF = 0;
  HAL_StatusTypeDef Status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dea:	f007 fdea 	bl	80099c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dee:	f000 f9a3 	bl	8002138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df2:	f000 ffe9 	bl	8002dc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001df6:	f000 ff95 	bl	8002d24 <MX_DMA_Init>
  MX_ADC1_Init();
 8001dfa:	f000 fa45 	bl	8002288 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001dfe:	f000 fb21 	bl	8002444 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001e02:	f000 fb9b 	bl	800253c <MX_ADC3_Init>
  MX_I2C1_Init();
 8001e06:	f000 fc31 	bl	800266c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e0a:	f000 fc6f 	bl	80026ec <MX_I2C2_Init>
  MX_I2C3_Init();
 8001e0e:	f000 fcad 	bl	800276c <MX_I2C3_Init>
  MX_I2C4_Init();
 8001e12:	f000 fced 	bl	80027f0 <MX_I2C4_Init>
  MX_RTC_Init();
 8001e16:	f000 fd2b 	bl	8002870 <MX_RTC_Init>
  MX_SPI4_Init();
 8001e1a:	f000 fd4f 	bl	80028bc <MX_SPI4_Init>
  MX_SPI5_Init();
 8001e1e:	f000 fd8b 	bl	8002938 <MX_SPI5_Init>
  MX_TIM4_Init();
 8001e22:	f000 fdc7 	bl	80029b4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e26:	f000 fe3d 	bl	8002aa4 <MX_TIM5_Init>
  MX_UART4_Init();
 8001e2a:	f000 febd 	bl	8002ba8 <MX_UART4_Init>
  MX_UART5_Init();
 8001e2e:	f000 feeb 	bl	8002c08 <MX_UART5_Init>
  MX_UART7_Init();
 8001e32:	f000 ff19 	bl	8002c68 <MX_UART7_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001e36:	f000 ff47 	bl	8002cc8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_ConfigChannel();
  outputGPIOBufInitialization();
 8001e3a:	f001 f99d 	bl	8003178 <outputGPIOBufInitialization>
  memset(errorLEDState,0,sizeof(errorLEDState));
 8001e3e:	220c      	movs	r2, #12
 8001e40:	2100      	movs	r1, #0
 8001e42:	488a      	ldr	r0, [pc, #552]	; (800206c <main+0x28c>)
 8001e44:	f011 fb01 	bl	801344a <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4988      	ldr	r1, [pc, #544]	; (8002070 <main+0x290>)
 8001e4e:	4889      	ldr	r0, [pc, #548]	; (8002074 <main+0x294>)
 8001e50:	f007 ff8c 	bl	8009d6c <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <main+0x8a>
  {
  	  DevUI_Error_Handler("ADC1 Failed to start.", Status, 0, 0, true);
 8001e5a:	78f9      	ldrb	r1, [r7, #3]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	2200      	movs	r2, #0
 8001e64:	4884      	ldr	r0, [pc, #528]	; (8002078 <main+0x298>)
 8001e66:	f001 f94d 	bl	8003104 <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4983      	ldr	r1, [pc, #524]	; (800207c <main+0x29c>)
 8001e70:	4883      	ldr	r0, [pc, #524]	; (8002080 <main+0x2a0>)
 8001e72:	f007 ff7b 	bl	8009d6c <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <main+0xac>
  {
  	  DevUI_Error_Handler("ADC2 Failed to start.", Status, 0, 0, true);
 8001e7c:	78f9      	ldrb	r1, [r7, #3]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	2200      	movs	r2, #0
 8001e86:	487f      	ldr	r0, [pc, #508]	; (8002084 <main+0x2a4>)
 8001e88:	f001 f93c 	bl	8003104 <DevUI_Error_Handler>
  }
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	497d      	ldr	r1, [pc, #500]	; (8002088 <main+0x2a8>)
 8001e92:	487e      	ldr	r0, [pc, #504]	; (800208c <main+0x2ac>)
 8001e94:	f007 ff6a 	bl	8009d6c <HAL_ADC_Start_DMA>
  if (Status != HAL_OK)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <main+0xce>
  {
  	  DevUI_Error_Handler("ADC3 Failed to start.", Status, 0, 0, true);
 8001e9e:	78f9      	ldrb	r1, [r7, #3]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4879      	ldr	r0, [pc, #484]	; (8002090 <main+0x2b0>)
 8001eaa:	f001 f92b 	bl	8003104 <DevUI_Error_Handler>
  }
   int x=1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]

   HAL_UART_Receive_DMA(&SPARE_UART, spare_Uart_RX_Buf, sizeof(spare_Uart_RX_Buf));
 8001eb2:	22c8      	movs	r2, #200	; 0xc8
 8001eb4:	4977      	ldr	r1, [pc, #476]	; (8002094 <main+0x2b4>)
 8001eb6:	4878      	ldr	r0, [pc, #480]	; (8002098 <main+0x2b8>)
 8001eb8:	f00d f9de 	bl	800f278 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&SOC_UART, soc_Uart_RX_Buf, sizeof(soc_Uart_RX_Buf));
 8001ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec0:	4976      	ldr	r1, [pc, #472]	; (800209c <main+0x2bc>)
 8001ec2:	4877      	ldr	r0, [pc, #476]	; (80020a0 <main+0x2c0>)
 8001ec4:	f00d f9d8 	bl	800f278 <HAL_UART_Receive_DMA>
   HAL_UART_Receive_DMA(&DEBUG_UART, debug_Uart_RX_Buf, sizeof(debug_Uart_RX_Buf));
 8001ec8:	22c8      	movs	r2, #200	; 0xc8
 8001eca:	4976      	ldr	r1, [pc, #472]	; (80020a4 <main+0x2c4>)
 8001ecc:	4876      	ldr	r0, [pc, #472]	; (80020a8 <main+0x2c8>)
 8001ece:	f00d f9d3 	bl	800f278 <HAL_UART_Receive_DMA>
//  winbondSPIDeviceIDRead(hspi5,(uint8_t*)spiDataRead);
//  //char buf[30];
//  spareUartTransmitRead("Lets see what comes out!");
//  x=0;

  configureLEDDriver();
 8001ed2:	f001 fc53 	bl	800377c <configureLEDDriver>
  
    setErrorLED(0,ON);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f001 fd01 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee2:	f007 fd9b 	bl	8009a1c <HAL_Delay>
    setErrorLED(1,OFF);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f001 fcf9 	bl	80038e0 <setErrorLED>
    setErrorLED(8,ON);
 8001eee:	2101      	movs	r1, #1
 8001ef0:	2008      	movs	r0, #8
 8001ef2:	f001 fcf5 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efa:	f007 fd8f 	bl	8009a1c <HAL_Delay>
    setErrorLED(8,OFF);
 8001efe:	2100      	movs	r1, #0
 8001f00:	2008      	movs	r0, #8
 8001f02:	f001 fced 	bl	80038e0 <setErrorLED>
    setErrorLED(9,ON);
 8001f06:	2101      	movs	r1, #1
 8001f08:	2009      	movs	r0, #9
 8001f0a:	f001 fce9 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f12:	f007 fd83 	bl	8009a1c <HAL_Delay>
    setErrorLED(8,ON);
 8001f16:	2101      	movs	r1, #1
 8001f18:	2008      	movs	r0, #8
 8001f1a:	f001 fce1 	bl	80038e0 <setErrorLED>
    setErrorLED(9,ON);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2009      	movs	r0, #9
 8001f22:	f001 fcdd 	bl	80038e0 <setErrorLED>
    HAL_Delay(1000);
 8001f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2a:	f007 fd77 	bl	8009a1c <HAL_Delay>
    setErrorLED(9,OFF);
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2009      	movs	r0, #9
 8001f32:	f001 fcd5 	bl	80038e0 <setErrorLED>
//    EX_SW_OFF;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f36:	f00e f9b7 	bl	80102a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Heartbeat */
  HeartbeatHandle = osThreadNew(startHeartbeat, NULL, &Heartbeat_attributes);
 8001f3a:	4a5c      	ldr	r2, [pc, #368]	; (80020ac <main+0x2cc>)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	485c      	ldr	r0, [pc, #368]	; (80020b0 <main+0x2d0>)
 8001f40:	f00e fa1c 	bl	801037c <osThreadNew>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <main+0x2d4>)
 8001f48:	601a      	str	r2, [r3, #0]

  /* creation of adcRead */
  adcReadHandle = osThreadNew(startADCRead, NULL, &adcRead_attributes);
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	; (80020b8 <main+0x2d8>)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	485b      	ldr	r0, [pc, #364]	; (80020bc <main+0x2dc>)
 8001f50:	f00e fa14 	bl	801037c <osThreadNew>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <main+0x2e0>)
 8001f58:	601a      	str	r2, [r3, #0]

  /* creation of DatScreenBlink */
  DatScreenBlinkHandle = osThreadNew(GetDaScreenBlink, NULL, &DatScreenBlink_attributes);
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	; (80020c4 <main+0x2e4>)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	485a      	ldr	r0, [pc, #360]	; (80020c8 <main+0x2e8>)
 8001f60:	f00e fa0c 	bl	801037c <osThreadNew>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b59      	ldr	r3, [pc, #356]	; (80020cc <main+0x2ec>)
 8001f68:	601a      	str	r2, [r3, #0]

  /* creation of gpioInputRead */
  gpioInputReadHandle = osThreadNew(startGpioInputRead, NULL, &gpioInputRead_attributes);
 8001f6a:	4a59      	ldr	r2, [pc, #356]	; (80020d0 <main+0x2f0>)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4859      	ldr	r0, [pc, #356]	; (80020d4 <main+0x2f4>)
 8001f70:	f00e fa04 	bl	801037c <osThreadNew>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <main+0x2f8>)
 8001f78:	601a      	str	r2, [r3, #0]

  /* creation of navigationTask */
  navigationTaskHandle = osThreadNew(startNavigationTask, NULL, &navigationTask_attributes);
 8001f7a:	4a58      	ldr	r2, [pc, #352]	; (80020dc <main+0x2fc>)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4858      	ldr	r0, [pc, #352]	; (80020e0 <main+0x300>)
 8001f80:	f00e f9fc 	bl	801037c <osThreadNew>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <main+0x304>)
 8001f88:	601a      	str	r2, [r3, #0]

  /* creation of errorLEDs */
  errorLEDsHandle = osThreadNew(startErrorLEDs, NULL, &errorLEDs_attributes);
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <main+0x308>)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4857      	ldr	r0, [pc, #348]	; (80020ec <main+0x30c>)
 8001f90:	f00e f9f4 	bl	801037c <osThreadNew>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <main+0x310>)
 8001f98:	601a      	str	r2, [r3, #0]

  /* creation of zionRead */
  zionReadHandle = osThreadNew(startZionRead, NULL, &zionRead_attributes);
 8001f9a:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <main+0x314>)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4856      	ldr	r0, [pc, #344]	; (80020f8 <main+0x318>)
 8001fa0:	f00e f9ec 	bl	801037c <osThreadNew>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b55      	ldr	r3, [pc, #340]	; (80020fc <main+0x31c>)
 8001fa8:	601a      	str	r2, [r3, #0]

  /* creation of bootButtons */
  bootButtonsHandle = osThreadNew(startBootButtons, NULL, &bootButtons_attributes);
 8001faa:	4a55      	ldr	r2, [pc, #340]	; (8002100 <main+0x320>)
 8001fac:	2100      	movs	r1, #0
 8001fae:	4855      	ldr	r0, [pc, #340]	; (8002104 <main+0x324>)
 8001fb0:	f00e f9e4 	bl	801037c <osThreadNew>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b54      	ldr	r3, [pc, #336]	; (8002108 <main+0x328>)
 8001fb8:	601a      	str	r2, [r3, #0]

  /* creation of socUart */
  socUartHandle = osThreadNew(startSocUart, NULL, &socUart_attributes);
 8001fba:	4a54      	ldr	r2, [pc, #336]	; (800210c <main+0x32c>)
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4854      	ldr	r0, [pc, #336]	; (8002110 <main+0x330>)
 8001fc0:	f00e f9dc 	bl	801037c <osThreadNew>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b53      	ldr	r3, [pc, #332]	; (8002114 <main+0x334>)
 8001fc8:	601a      	str	r2, [r3, #0]

  /* creation of debugUart */
  debugUartHandle = osThreadNew(startDebugUart, NULL, &debugUart_attributes);
 8001fca:	4a53      	ldr	r2, [pc, #332]	; (8002118 <main+0x338>)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4853      	ldr	r0, [pc, #332]	; (800211c <main+0x33c>)
 8001fd0:	f00e f9d4 	bl	801037c <osThreadNew>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b52      	ldr	r3, [pc, #328]	; (8002120 <main+0x340>)
 8001fd8:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Fault_Events */
  Fault_EventsHandle = osEventFlagsNew(&Fault_Events_attributes);
 8001fda:	4852      	ldr	r0, [pc, #328]	; (8002124 <main+0x344>)
 8001fdc:	f00e faa8 	bl	8010530 <osEventFlagsNew>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b51      	ldr	r3, [pc, #324]	; (8002128 <main+0x348>)
 8001fe4:	601a      	str	r2, [r3, #0]
	   bit 8: fault 9
	   bit 9: standard boot
	   bit 10: edl boot
	   bit 11: uefi boot
   */
  if (Fault_EventsHandle == NULL)
 8001fe6:	4b50      	ldr	r3, [pc, #320]	; (8002128 <main+0x348>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <main+0x220>
  {
	  // Event flags object not created, handle failure.
	  DevUI_Error_Handler("Faults Event Flag could not be created.\r\n",HAL_ERROR,0,0,true);
 8001fee:	2301      	movs	r3, #1
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	484c      	ldr	r0, [pc, #304]	; (800212c <main+0x34c>)
 8001ffa:	f001 f883 	bl	8003104 <DevUI_Error_Handler>
 8001ffe:	e006      	b.n	800200e <main+0x22e>
  }
  else
  {
	  // clear all event flags
	  osEventFlagsClear(Fault_EventsHandle, 0xFFFF);
 8002000:	4b49      	ldr	r3, [pc, #292]	; (8002128 <main+0x348>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002008:	4618      	mov	r0, r3
 800200a:	f00e fae3 	bl	80105d4 <osEventFlagsClear>
  }
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800200e:	f00e f97f 	bl	8010310 <osKernelStart>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  HAL_Delay(1000);
 8002012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002016:	f007 fd01 	bl	8009a1c <HAL_Delay>
	  if (!x) {
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d112      	bne.n	8002046 <main+0x266>
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_SET);
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002026:	4842      	ldr	r0, [pc, #264]	; (8002130 <main+0x350>)
 8002028:	f009 f972 	bl	800b310 <HAL_GPIO_WritePin>
		  x=1;
 800202c:	2301      	movs	r3, #1
 800202e:	607b      	str	r3, [r7, #4]

		  //uartTransmitChar("hello\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	2110      	movs	r1, #16
 8002034:	483f      	ldr	r0, [pc, #252]	; (8002134 <main+0x354>)
 8002036:	f009 f96b 	bl	800b310 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_White, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	2110      	movs	r1, #16
 800203e:	483d      	ldr	r0, [pc, #244]	; (8002134 <main+0x354>)
 8002040:	f009 f966 	bl	800b310 <HAL_GPIO_WritePin>
 8002044:	e7e5      	b.n	8002012 <main+0x232>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOI,MCU_HEARTBEAT_Pin,GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204c:	4838      	ldr	r0, [pc, #224]	; (8002130 <main+0x350>)
 800204e:	f009 f95f 	bl	800b310 <HAL_GPIO_WritePin>
		  x=0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
		  //uartTransmitChar("here\r\n",7);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	2110      	movs	r1, #16
 800205a:	4836      	ldr	r0, [pc, #216]	; (8002134 <main+0x354>)
 800205c:	f009 f958 	bl	800b310 <HAL_GPIO_WritePin>
		  //HAL_SPI_Transmit(&hspi4, (uint16_t *)&LCD_Blink_Black, 1, 100);
		  HAL_GPIO_WritePin(LCD_SS_GPIO_Port,LCD_SS_Pin,GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	4833      	ldr	r0, [pc, #204]	; (8002134 <main+0x354>)
 8002066:	f009 f953 	bl	800b310 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800206a:	e7d2      	b.n	8002012 <main+0x232>
 800206c:	2002e870 	.word	0x2002e870
 8002070:	200296b0 	.word	0x200296b0
 8002074:	2002be44 	.word	0x2002be44
 8002078:	08017714 	.word	0x08017714
 800207c:	2002e908 	.word	0x2002e908
 8002080:	20028d40 	.word	0x20028d40
 8002084:	0801772c 	.word	0x0801772c
 8002088:	2002c160 	.word	0x2002c160
 800208c:	2002bef0 	.word	0x2002bef0
 8002090:	08017744 	.word	0x08017744
 8002094:	2002bf38 	.word	0x2002bf38
 8002098:	2002e884 	.word	0x2002e884
 800209c:	200292c8 	.word	0x200292c8
 80020a0:	2002bdc4 	.word	0x2002bdc4
 80020a4:	2002c098 	.word	0x2002c098
 80020a8:	20028c08 	.word	0x20028c08
 80020ac:	080180dc 	.word	0x080180dc
 80020b0:	08004581 	.word	0x08004581
 80020b4:	2002e904 	.word	0x2002e904
 80020b8:	08018100 	.word	0x08018100
 80020bc:	080045a1 	.word	0x080045a1
 80020c0:	200310dc 	.word	0x200310dc
 80020c4:	08018124 	.word	0x08018124
 80020c8:	0800467d 	.word	0x0800467d
 80020cc:	200310d8 	.word	0x200310d8
 80020d0:	08018148 	.word	0x08018148
 80020d4:	0800471d 	.word	0x0800471d
 80020d8:	2002beec 	.word	0x2002beec
 80020dc:	0801816c 	.word	0x0801816c
 80020e0:	08004849 	.word	0x08004849
 80020e4:	2002c094 	.word	0x2002c094
 80020e8:	08018190 	.word	0x08018190
 80020ec:	080049c9 	.word	0x080049c9
 80020f0:	20028d30 	.word	0x20028d30
 80020f4:	080181b4 	.word	0x080181b4
 80020f8:	08004c81 	.word	0x08004c81
 80020fc:	2002e87c 	.word	0x2002e87c
 8002100:	080181d8 	.word	0x080181d8
 8002104:	08004e91 	.word	0x08004e91
 8002108:	2002bdc0 	.word	0x2002bdc0
 800210c:	080181fc 	.word	0x080181fc
 8002110:	080052a5 	.word	0x080052a5
 8002114:	2002e880 	.word	0x2002e880
 8002118:	08018220 	.word	0x08018220
 800211c:	080052f1 	.word	0x080052f1
 8002120:	2002c000 	.word	0x2002c000
 8002124:	08018244 	.word	0x08018244
 8002128:	20028c88 	.word	0x20028c88
 800212c:	0801775c 	.word	0x0801775c
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000

08002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0b8      	sub	sp, #224	; 0xe0
 800213c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002142:	2234      	movs	r2, #52	; 0x34
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f011 f97f 	bl	801344a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	2290      	movs	r2, #144	; 0x90
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f011 f970 	bl	801344a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800216a:	f00a f9f9 	bl	800c560 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800216e:	4b43      	ldr	r3, [pc, #268]	; (800227c <SystemClock_Config+0x144>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a42      	ldr	r2, [pc, #264]	; (800227c <SystemClock_Config+0x144>)
 8002174:	f023 0318 	bic.w	r3, r3, #24
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <SystemClock_Config+0x144>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a3f      	ldr	r2, [pc, #252]	; (800227c <SystemClock_Config+0x144>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <SystemClock_Config+0x144>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <SystemClock_Config+0x148>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800219a:	4a39      	ldr	r2, [pc, #228]	; (8002280 <SystemClock_Config+0x148>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <SystemClock_Config+0x148>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80021ae:	2305      	movs	r3, #5
 80021b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 15;
 80021d0:	230f      	movs	r3, #15
 80021d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80021d6:	2390      	movs	r3, #144	; 0x90
 80021d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80021e2:	2305      	movs	r3, #5
 80021e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00a f9c7 	bl	800c580 <HAL_RCC_OscConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021f8:	f003 f970 	bl	80054dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021fc:	230f      	movs	r3, #15
 80021fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002202:	2302      	movs	r3, #2
 8002204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800220e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800221e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002222:	2103      	movs	r1, #3
 8002224:	4618      	mov	r0, r3
 8002226:	f00a fc59 	bl	800cadc <HAL_RCC_ClockConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002230:	f003 f954 	bl	80054dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <SystemClock_Config+0x14c>)
 8002236:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800223e:	2300      	movs	r3, #0
 8002240:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002242:	2300      	movs	r3, #0
 8002244:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002246:	2300      	movs	r3, #0
 8002248:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800224a:	2300      	movs	r3, #0
 800224c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800224e:	2300      	movs	r3, #0
 8002250:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002252:	2300      	movs	r3, #0
 8002254:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002256:	2300      	movs	r3, #0
 8002258:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4618      	mov	r0, r3
 8002266:	f00a fe3d 	bl	800cee4 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8002270:	f003 f934 	bl	80054dc <Error_Handler>
  }
}
 8002274:	bf00      	nop
 8002276:	37e0      	adds	r7, #224	; 0xe0
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	0023d620 	.word	0x0023d620

08002288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800228e:	463b      	mov	r3, r7
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800229c:	4a67      	ldr	r2, [pc, #412]	; (800243c <MX_ADC1_Init+0x1b4>)
 800229e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022ae:	4b62      	ldr	r3, [pc, #392]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ba:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c8:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022ca:	4a5d      	ldr	r2, [pc, #372]	; (8002440 <MX_ADC1_Init+0x1b8>)
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ce:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 11;
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022d6:	220b      	movs	r2, #11
 80022d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e2:	4b55      	ldr	r3, [pc, #340]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e8:	4853      	ldr	r0, [pc, #332]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80022ea:	f007 fbb9 	bl	8009a60 <HAL_ADC_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022f4:	f003 f8f2 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022f8:	2303      	movs	r3, #3
 80022fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002300:	2307      	movs	r3, #7
 8002302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	484b      	ldr	r0, [pc, #300]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800230a:	f007 fe85 	bl	800a018 <HAL_ADC_ConfigChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002314:	f003 f8e2 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002318:	2304      	movs	r3, #4
 800231a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800231c:	2302      	movs	r3, #2
 800231e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4844      	ldr	r0, [pc, #272]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002326:	f007 fe77 	bl	800a018 <HAL_ADC_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002330:	f003 f8d4 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002334:	2305      	movs	r3, #5
 8002336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002338:	2303      	movs	r3, #3
 800233a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	4619      	mov	r1, r3
 8002340:	483d      	ldr	r0, [pc, #244]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002342:	f007 fe69 	bl	800a018 <HAL_ADC_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800234c:	f003 f8c6 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002350:	2306      	movs	r3, #6
 8002352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002354:	2304      	movs	r3, #4
 8002356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002358:	463b      	mov	r3, r7
 800235a:	4619      	mov	r1, r3
 800235c:	4836      	ldr	r0, [pc, #216]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800235e:	f007 fe5b 	bl	800a018 <HAL_ADC_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002368:	f003 f8b8 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800236c:	2307      	movs	r3, #7
 800236e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002370:	2305      	movs	r3, #5
 8002372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	482f      	ldr	r0, [pc, #188]	; (8002438 <MX_ADC1_Init+0x1b0>)
 800237a:	f007 fe4d 	bl	800a018 <HAL_ADC_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002384:	f003 f8aa 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002388:	2308      	movs	r3, #8
 800238a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800238c:	2306      	movs	r3, #6
 800238e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	4828      	ldr	r0, [pc, #160]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002396:	f007 fe3f 	bl	800a018 <HAL_ADC_ConfigChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80023a0:	f003 f89c 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80023a4:	2309      	movs	r3, #9
 80023a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80023a8:	2307      	movs	r3, #7
 80023aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	4821      	ldr	r0, [pc, #132]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80023b2:	f007 fe31 	bl	800a018 <HAL_ADC_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80023bc:	f003 f88e 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80023c0:	230a      	movs	r3, #10
 80023c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80023c4:	2308      	movs	r3, #8
 80023c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	4619      	mov	r1, r3
 80023cc:	481a      	ldr	r0, [pc, #104]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80023ce:	f007 fe23 	bl	800a018 <HAL_ADC_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80023d8:	f003 f880 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80023dc:	230b      	movs	r3, #11
 80023de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80023e0:	2309      	movs	r3, #9
 80023e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4813      	ldr	r0, [pc, #76]	; (8002438 <MX_ADC1_Init+0x1b0>)
 80023ea:	f007 fe15 	bl	800a018 <HAL_ADC_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80023f4:	f003 f872 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80023f8:	230c      	movs	r3, #12
 80023fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80023fc:	230a      	movs	r3, #10
 80023fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002406:	f007 fe07 	bl	800a018 <HAL_ADC_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002410:	f003 f864 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002414:	230d      	movs	r3, #13
 8002416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002418:	230b      	movs	r3, #11
 800241a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_ADC1_Init+0x1b0>)
 8002422:	f007 fdf9 	bl	800a018 <HAL_ADC_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800242c:	f003 f856 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2002be44 	.word	0x2002be44
 800243c:	40012000 	.word	0x40012000
 8002440:	0f000001 	.word	0x0f000001

08002444 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800244a:	463b      	mov	r3, r7
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002456:	4b36      	ldr	r3, [pc, #216]	; (8002530 <MX_ADC2_Init+0xec>)
 8002458:	4a36      	ldr	r2, [pc, #216]	; (8002534 <MX_ADC2_Init+0xf0>)
 800245a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <MX_ADC2_Init+0xec>)
 800245e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002462:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <MX_ADC2_Init+0xec>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <MX_ADC2_Init+0xec>)
 800246c:	2201      	movs	r2, #1
 800246e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <MX_ADC2_Init+0xec>)
 8002472:	2201      	movs	r2, #1
 8002474:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <MX_ADC2_Init+0xec>)
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <MX_ADC2_Init+0xec>)
 8002480:	2200      	movs	r2, #0
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <MX_ADC2_Init+0xec>)
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <MX_ADC2_Init+0xf4>)
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <MX_ADC2_Init+0xec>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <MX_ADC2_Init+0xec>)
 8002492:	2204      	movs	r2, #4
 8002494:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <MX_ADC2_Init+0xec>)
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <MX_ADC2_Init+0xec>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80024a4:	4822      	ldr	r0, [pc, #136]	; (8002530 <MX_ADC2_Init+0xec>)
 80024a6:	f007 fadb 	bl	8009a60 <HAL_ADC_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80024b0:	f003 f814 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024bc:	2307      	movs	r3, #7
 80024be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	4619      	mov	r1, r3
 80024c4:	481a      	ldr	r0, [pc, #104]	; (8002530 <MX_ADC2_Init+0xec>)
 80024c6:	f007 fda7 	bl	800a018 <HAL_ADC_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80024d0:	f003 f804 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024d8:	2302      	movs	r3, #2
 80024da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4813      	ldr	r0, [pc, #76]	; (8002530 <MX_ADC2_Init+0xec>)
 80024e2:	f007 fd99 	bl	800a018 <HAL_ADC_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80024ec:	f002 fff6 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80024f0:	230e      	movs	r3, #14
 80024f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80024f4:	2303      	movs	r3, #3
 80024f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024f8:	463b      	mov	r3, r7
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_ADC2_Init+0xec>)
 80024fe:	f007 fd8b 	bl	800a018 <HAL_ADC_ConfigChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002508:	f002 ffe8 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800250c:	230f      	movs	r3, #15
 800250e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002510:	2304      	movs	r3, #4
 8002512:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	4619      	mov	r1, r3
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_ADC2_Init+0xec>)
 800251a:	f007 fd7d 	bl	800a018 <HAL_ADC_ConfigChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002524:	f002 ffda 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20028d40 	.word	0x20028d40
 8002534:	40012100 	.word	0x40012100
 8002538:	0f000001 	.word	0x0f000001

0800253c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002542:	463b      	mov	r3, r7
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <MX_ADC3_Init+0x124>)
 8002550:	4a44      	ldr	r2, [pc, #272]	; (8002664 <MX_ADC3_Init+0x128>)
 8002552:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002554:	4b42      	ldr	r3, [pc, #264]	; (8002660 <MX_ADC3_Init+0x124>)
 8002556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800255a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800255c:	4b40      	ldr	r3, [pc, #256]	; (8002660 <MX_ADC3_Init+0x124>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002562:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <MX_ADC3_Init+0x124>)
 8002564:	2201      	movs	r2, #1
 8002566:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <MX_ADC3_Init+0x124>)
 800256a:	2201      	movs	r2, #1
 800256c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <MX_ADC3_Init+0x124>)
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002576:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <MX_ADC3_Init+0x124>)
 8002578:	2200      	movs	r2, #0
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <MX_ADC3_Init+0x124>)
 800257e:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <MX_ADC3_Init+0x12c>)
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <MX_ADC3_Init+0x124>)
 8002584:	2200      	movs	r2, #0
 8002586:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <MX_ADC3_Init+0x124>)
 800258a:	2206      	movs	r2, #6
 800258c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <MX_ADC3_Init+0x124>)
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002596:	4b32      	ldr	r3, [pc, #200]	; (8002660 <MX_ADC3_Init+0x124>)
 8002598:	2201      	movs	r2, #1
 800259a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800259c:	4830      	ldr	r0, [pc, #192]	; (8002660 <MX_ADC3_Init+0x124>)
 800259e:	f007 fa5f 	bl	8009a60 <HAL_ADC_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80025a8:	f002 ff98 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80025ac:	2302      	movs	r3, #2
 80025ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80025b4:	2307      	movs	r3, #7
 80025b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025b8:	463b      	mov	r3, r7
 80025ba:	4619      	mov	r1, r3
 80025bc:	4828      	ldr	r0, [pc, #160]	; (8002660 <MX_ADC3_Init+0x124>)
 80025be:	f007 fd2b 	bl	800a018 <HAL_ADC_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80025c8:	f002 ff88 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80025cc:	2304      	movs	r3, #4
 80025ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025d0:	2302      	movs	r3, #2
 80025d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025d4:	463b      	mov	r3, r7
 80025d6:	4619      	mov	r1, r3
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <MX_ADC3_Init+0x124>)
 80025da:	f007 fd1d 	bl	800a018 <HAL_ADC_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80025e4:	f002 ff7a 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025e8:	2305      	movs	r3, #5
 80025ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025ec:	2303      	movs	r3, #3
 80025ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025f0:	463b      	mov	r3, r7
 80025f2:	4619      	mov	r1, r3
 80025f4:	481a      	ldr	r0, [pc, #104]	; (8002660 <MX_ADC3_Init+0x124>)
 80025f6:	f007 fd0f 	bl	800a018 <HAL_ADC_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8002600:	f002 ff6c 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002604:	2306      	movs	r3, #6
 8002606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002608:	2304      	movs	r3, #4
 800260a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800260c:	463b      	mov	r3, r7
 800260e:	4619      	mov	r1, r3
 8002610:	4813      	ldr	r0, [pc, #76]	; (8002660 <MX_ADC3_Init+0x124>)
 8002612:	f007 fd01 	bl	800a018 <HAL_ADC_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800261c:	f002 ff5e 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002620:	2307      	movs	r3, #7
 8002622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002624:	2305      	movs	r3, #5
 8002626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <MX_ADC3_Init+0x124>)
 800262e:	f007 fcf3 	bl	800a018 <HAL_ADC_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8002638:	f002 ff50 	bl	80054dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800263c:	2308      	movs	r3, #8
 800263e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002640:	2306      	movs	r3, #6
 8002642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002644:	463b      	mov	r3, r7
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_ADC3_Init+0x124>)
 800264a:	f007 fce5 	bl	800a018 <HAL_ADC_ConfigChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8002654:	f002 ff42 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  /* USER CODE END ADC3_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2002bef0 	.word	0x2002bef0
 8002664:	40012200 	.word	0x40012200
 8002668:	0f000001 	.word	0x0f000001

0800266c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <MX_I2C1_Init+0x78>)
 8002674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002678:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <MX_I2C1_Init+0x7c>)
 800267a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <MX_I2C1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002684:	2201      	movs	r2, #1
 8002686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <MX_I2C1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <MX_I2C1_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_I2C1_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026a6:	480e      	ldr	r0, [pc, #56]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026a8:	f008 fe8a 	bl	800b3c0 <HAL_I2C_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026b2:	f002 ff13 	bl	80054dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4809      	ldr	r0, [pc, #36]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026ba:	f009 fd51 	bl	800c160 <HAL_I2CEx_ConfigAnalogFilter>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026c4:	f002 ff0a 	bl	80054dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026c8:	2100      	movs	r1, #0
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_I2C1_Init+0x74>)
 80026cc:	f009 fd93 	bl	800c1f6 <HAL_I2CEx_ConfigDigitalFilter>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026d6:	f002 ff01 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20028d88 	.word	0x20028d88
 80026e4:	40005400 	.word	0x40005400
 80026e8:	007074af 	.word	0x007074af

080026ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MX_I2C2_Init+0x74>)
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <MX_I2C2_Init+0x78>)
 80026f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_I2C2_Init+0x74>)
 80026f8:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <MX_I2C2_Init+0x7c>)
 80026fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <MX_I2C2_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <MX_I2C2_Init+0x74>)
 8002704:	2201      	movs	r2, #1
 8002706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <MX_I2C2_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <MX_I2C2_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <MX_I2C2_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <MX_I2C2_Init+0x74>)
 800271c:	2200      	movs	r2, #0
 800271e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <MX_I2C2_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002726:	480e      	ldr	r0, [pc, #56]	; (8002760 <MX_I2C2_Init+0x74>)
 8002728:	f008 fe4a 	bl	800b3c0 <HAL_I2C_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002732:	f002 fed3 	bl	80054dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002736:	2100      	movs	r1, #0
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <MX_I2C2_Init+0x74>)
 800273a:	f009 fd11 	bl	800c160 <HAL_I2CEx_ConfigAnalogFilter>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002744:	f002 feca 	bl	80054dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002748:	2100      	movs	r1, #0
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_I2C2_Init+0x74>)
 800274c:	f009 fd53 	bl	800c1f6 <HAL_I2CEx_ConfigDigitalFilter>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002756:	f002 fec1 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200291d8 	.word	0x200291d8
 8002764:	40005800 	.word	0x40005800
 8002768:	007074af 	.word	0x007074af

0800276c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <MX_I2C3_Init+0x7c>)
 8002774:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x100029FE;
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <MX_I2C3_Init+0x80>)
 800277a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 152;
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <MX_I2C3_Init+0x78>)
 800277e:	2298      	movs	r2, #152	; 0x98
 8002780:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002784:	2201      	movs	r2, #1
 8002786:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <MX_I2C3_Init+0x78>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <MX_I2C3_Init+0x78>)
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <MX_I2C3_Init+0x78>)
 800279c:	2200      	movs	r2, #0
 800279e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027a6:	480f      	ldr	r0, [pc, #60]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027a8:	f008 fe0a 	bl	800b3c0 <HAL_I2C_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80027b2:	f002 fe93 	bl	80054dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027b6:	2100      	movs	r1, #0
 80027b8:	480a      	ldr	r0, [pc, #40]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027ba:	f009 fcd1 	bl	800c160 <HAL_I2CEx_ConfigAnalogFilter>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80027c4:	f002 fe8a 	bl	80054dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_I2C3_Init+0x78>)
 80027cc:	f009 fd13 	bl	800c1f6 <HAL_I2CEx_ConfigDigitalFilter>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80027d6:	f002 fe81 	bl	80054dc <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80027da:	2004      	movs	r0, #4
 80027dc:	f009 fd58 	bl	800c290 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20028b70 	.word	0x20028b70
 80027e8:	40005c00 	.word	0x40005c00
 80027ec:	100029fe 	.word	0x100029fe

080027f0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_I2C4_Init+0x74>)
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <MX_I2C4_Init+0x78>)
 80027f8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x007074AF;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <MX_I2C4_Init+0x74>)
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <MX_I2C4_Init+0x7c>)
 80027fe:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_I2C4_Init+0x74>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <MX_I2C4_Init+0x74>)
 8002808:	2201      	movs	r2, #1
 800280a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_I2C4_Init+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_I2C4_Init+0x74>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <MX_I2C4_Init+0x74>)
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_I2C4_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_I2C4_Init+0x74>)
 8002826:	2200      	movs	r2, #0
 8002828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800282a:	480e      	ldr	r0, [pc, #56]	; (8002864 <MX_I2C4_Init+0x74>)
 800282c:	f008 fdc8 	bl	800b3c0 <HAL_I2C_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002836:	f002 fe51 	bl	80054dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800283a:	2100      	movs	r1, #0
 800283c:	4809      	ldr	r0, [pc, #36]	; (8002864 <MX_I2C4_Init+0x74>)
 800283e:	f009 fc8f 	bl	800c160 <HAL_I2CEx_ConfigAnalogFilter>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002848:	f002 fe48 	bl	80054dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800284c:	2100      	movs	r1, #0
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_I2C4_Init+0x74>)
 8002850:	f009 fcd1 	bl	800c1f6 <HAL_I2CEx_ConfigDigitalFilter>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800285a:	f002 fe3f 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20028bbc 	.word	0x20028bbc
 8002868:	40006000 	.word	0x40006000
 800286c:	007074af 	.word	0x007074af

08002870 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <MX_RTC_Init+0x44>)
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <MX_RTC_Init+0x48>)
 8002878:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_RTC_Init+0x44>)
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <MX_RTC_Init+0x44>)
 8002882:	227f      	movs	r2, #127	; 0x7f
 8002884:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MX_RTC_Init+0x44>)
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MX_RTC_Init+0x44>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MX_RTC_Init+0x44>)
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_RTC_Init+0x44>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_RTC_Init+0x44>)
 80028a0:	f00a ff46 	bl	800d730 <HAL_RTC_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80028aa:	f002 fe17 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2002c074 	.word	0x2002c074
 80028b8:	40002800 	.word	0x40002800

080028bc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <MX_SPI4_Init+0x74>)
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <MX_SPI4_Init+0x78>)
 80028c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <MX_SPI4_Init+0x74>)
 80028c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028cc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <MX_SPI4_Init+0x74>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <MX_SPI4_Init+0x74>)
 80028d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028da:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <MX_SPI4_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_SPI4_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_SPI4_Init+0x74>)
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <MX_SPI4_Init+0x74>)
 80028f2:	2210      	movs	r2, #16
 80028f4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_SPI4_Init+0x74>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_SPI4_Init+0x74>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_SPI4_Init+0x74>)
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_SPI4_Init+0x74>)
 800290a:	2207      	movs	r2, #7
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_SPI4_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_SPI4_Init+0x74>)
 8002916:	2200      	movs	r2, #0
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_SPI4_Init+0x74>)
 800291c:	f00a ffb0 	bl	800d880 <HAL_SPI_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002926:	f002 fdd9 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20028aac 	.word	0x20028aac
 8002934:	40013400 	.word	0x40013400

08002938 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <MX_SPI5_Init+0x74>)
 800293e:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <MX_SPI5_Init+0x78>)
 8002940:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_SPI5_Init+0x74>)
 8002944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002948:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_SPI5_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_SPI5_Init+0x74>)
 8002952:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002956:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_SPI5_Init+0x74>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_SPI5_Init+0x74>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_SPI5_Init+0x74>)
 8002966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800296a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <MX_SPI5_Init+0x74>)
 800296e:	2218      	movs	r2, #24
 8002970:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_SPI5_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_SPI5_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <MX_SPI5_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_SPI5_Init+0x74>)
 8002986:	2207      	movs	r2, #7
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <MX_SPI5_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_SPI5_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_SPI5_Init+0x74>)
 8002998:	f00a ff72 	bl	800d880 <HAL_SPI_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80029a2:	f002 fd9b 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20028c8c 	.word	0x20028c8c
 80029b0:	40015000 	.word	0x40015000

080029b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08e      	sub	sp, #56	; 0x38
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d4:	463b      	mov	r3, r7
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	611a      	str	r2, [r3, #16]
 80029e2:	615a      	str	r2, [r3, #20]
 80029e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029e8:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <MX_TIM4_Init+0xec>)
 80029ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <MX_TIM4_Init+0xe8>)
 80029fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a0c:	4823      	ldr	r0, [pc, #140]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a0e:	f00b fb6b 	bl	800e0e8 <HAL_TIM_Base_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002a18:	f002 fd60 	bl	80054dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a26:	4619      	mov	r1, r3
 8002a28:	481c      	ldr	r0, [pc, #112]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a2a:	f00b fe1f 	bl	800e66c <HAL_TIM_ConfigClockSource>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002a34:	f002 fd52 	bl	80054dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a38:	4818      	ldr	r0, [pc, #96]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a3a:	f00b fbab 	bl	800e194 <HAL_TIM_PWM_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002a44:	f002 fd4a 	bl	80054dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	4619      	mov	r1, r3
 8002a56:	4811      	ldr	r0, [pc, #68]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a58:	f00c fa82 	bl	800ef60 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002a62:	f002 fd3b 	bl	80054dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a66:	2360      	movs	r3, #96	; 0x60
 8002a68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a76:	463b      	mov	r3, r7
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a7e:	f00b fcdd 	bl	800e43c <HAL_TIM_PWM_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002a88:	f002 fd28 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <MX_TIM4_Init+0xe8>)
 8002a8e:	f006 f855 	bl	8008b3c <HAL_TIM_MspPostInit>

}
 8002a92:	bf00      	nop
 8002a94:	3738      	adds	r7, #56	; 0x38
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20028cf0 	.word	0x20028cf0
 8002aa0:	40000800 	.word	0x40000800

08002aa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac4:	463b      	mov	r3, r7
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	615a      	str	r2, [r3, #20]
 8002ad4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ad6:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002ad8:	4a32      	ldr	r2, [pc, #200]	; (8002ba4 <MX_TIM5_Init+0x100>)
 8002ada:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ae8:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002aea:	f04f 32ff 	mov.w	r2, #4294967295
 8002aee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002afc:	4828      	ldr	r0, [pc, #160]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002afe:	f00b faf3 	bl	800e0e8 <HAL_TIM_Base_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002b08:	f002 fce8 	bl	80054dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	4619      	mov	r1, r3
 8002b18:	4821      	ldr	r0, [pc, #132]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b1a:	f00b fda7 	bl	800e66c <HAL_TIM_ConfigClockSource>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002b24:	f002 fcda 	bl	80054dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002b28:	481d      	ldr	r0, [pc, #116]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b2a:	f00b fb33 	bl	800e194 <HAL_TIM_PWM_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002b34:	f002 fcd2 	bl	80054dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	4619      	mov	r1, r3
 8002b46:	4816      	ldr	r0, [pc, #88]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b48:	f00c fa0a 	bl	800ef60 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002b52:	f002 fcc3 	bl	80054dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b56:	2360      	movs	r3, #96	; 0x60
 8002b58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b66:	463b      	mov	r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b6e:	f00b fc65 	bl	800e43c <HAL_TIM_PWM_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002b78:	f002 fcb0 	bl	80054dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	2204      	movs	r2, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b84:	f00b fc5a 	bl	800e43c <HAL_TIM_PWM_ConfigChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002b8e:	f002 fca5 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b92:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <MX_TIM5_Init+0xfc>)
 8002b94:	f005 ffd2 	bl	8008b3c <HAL_TIM_MspPostInit>

}
 8002b98:	bf00      	nop
 8002b9a:	3738      	adds	r7, #56	; 0x38
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20029288 	.word	0x20029288
 8002ba4:	40000c00 	.word	0x40000c00

08002ba8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <MX_UART4_Init+0x5c>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002bb2:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <MX_UART4_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <MX_UART4_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <MX_UART4_Init+0x58>)
 8002bec:	f00c fa64 	bl	800f0b8 <HAL_UART_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002bf6:	f002 fc71 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2002e884 	.word	0x2002e884
 8002c04:	40004c00 	.word	0x40004c00

08002c08 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c0e:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <MX_UART5_Init+0x5c>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c18:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	; (8002c60 <MX_UART5_Init+0x58>)
 8002c4c:	f00c fa34 	bl	800f0b8 <HAL_UART_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002c56:	f002 fc41 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2002bdc4 	.word	0x2002bdc4
 8002c64:	40005000 	.word	0x40005000

08002c68 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <MX_UART7_Init+0x5c>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002c72:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c98:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_UART7_Init+0x58>)
 8002cae:	f00c fa03 	bl	800f0b8 <HAL_UART_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8002cb8:	f002 fc10 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20028c08 	.word	0x20028c08
 8002cc4:	40007800 	.word	0x40007800

08002cc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002cd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cd6:	2206      	movs	r2, #6
 8002cd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cdc:	2202      	movs	r2, #2
 8002cde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ce8:	2202      	movs	r2, #2
 8002cea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d0c:	f009 fae0 	bl	800c2d0 <HAL_PCD_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002d16:	f002 fbe1 	bl	80054dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20028dd4 	.word	0x20028dd4

08002d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_DMA_Init+0xa0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	200b      	movs	r0, #11
 8002d60:	f007 fce2 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d64:	200b      	movs	r0, #11
 8002d66:	f007 fcfb 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2105      	movs	r1, #5
 8002d6e:	200d      	movs	r0, #13
 8002d70:	f007 fcda 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d74:	200d      	movs	r0, #13
 8002d76:	f007 fcf3 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2105      	movs	r1, #5
 8002d7e:	200e      	movs	r0, #14
 8002d80:	f007 fcd2 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d84:	200e      	movs	r0, #14
 8002d86:	f007 fceb 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2105      	movs	r1, #5
 8002d8e:	2038      	movs	r0, #56	; 0x38
 8002d90:	f007 fcca 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d94:	2038      	movs	r0, #56	; 0x38
 8002d96:	f007 fce3 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2105      	movs	r1, #5
 8002d9e:	2039      	movs	r0, #57	; 0x39
 8002da0:	f007 fcc2 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002da4:	2039      	movs	r0, #57	; 0x39
 8002da6:	f007 fcdb 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2105      	movs	r1, #5
 8002dae:	203a      	movs	r0, #58	; 0x3a
 8002db0:	f007 fcba 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002db4:	203a      	movs	r0, #58	; 0x3a
 8002db6:	f007 fcd3 	bl	800a760 <HAL_NVIC_EnableIRQ>

}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b090      	sub	sp, #64	; 0x40
 8002dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dde:	4bb0      	ldr	r3, [pc, #704]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4aaf      	ldr	r2, [pc, #700]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4bad      	ldr	r3, [pc, #692]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002df6:	4baa      	ldr	r3, [pc, #680]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4aa9      	ldr	r2, [pc, #676]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4ba7      	ldr	r3, [pc, #668]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	4ba4      	ldr	r3, [pc, #656]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4aa3      	ldr	r2, [pc, #652]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4ba1      	ldr	r3, [pc, #644]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e26:	4b9e      	ldr	r3, [pc, #632]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a9d      	ldr	r2, [pc, #628]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b9b      	ldr	r3, [pc, #620]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	4b98      	ldr	r3, [pc, #608]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a97      	ldr	r2, [pc, #604]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b95      	ldr	r3, [pc, #596]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e56:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a91      	ldr	r2, [pc, #580]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e6e:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a8b      	ldr	r2, [pc, #556]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e86:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a85      	ldr	r2, [pc, #532]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e8c:	f043 0320 	orr.w	r3, r3, #32
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b83      	ldr	r3, [pc, #524]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9e:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a7f      	ldr	r2, [pc, #508]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b7d      	ldr	r3, [pc, #500]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a79      	ldr	r2, [pc, #484]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b77      	ldr	r3, [pc, #476]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ece:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a73      	ldr	r2, [pc, #460]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <MX_GPIO_Init+0x2d8>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SS_GPIO_Port, LCD_SS_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2110      	movs	r1, #16
 8002eea:	486e      	ldr	r0, [pc, #440]	; (80030a4 <MX_GPIO_Init+0x2dc>)
 8002eec:	f008 fa10 	bl	800b310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f244 012f 	movw	r1, #16431	; 0x402f
 8002ef6:	486c      	ldr	r0, [pc, #432]	; (80030a8 <MX_GPIO_Init+0x2e0>)
 8002ef8:	f008 fa0a 	bl	800b310 <HAL_GPIO_WritePin>
                          |OUT0_1V8_Pin|OUT2_1V8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002efc:	2200      	movs	r2, #0
 8002efe:	f241 1150 	movw	r1, #4432	; 0x1150
 8002f02:	486a      	ldr	r0, [pc, #424]	; (80030ac <MX_GPIO_Init+0x2e4>)
 8002f04:	f008 fa04 	bl	800b310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MCU_CTRL2_Pin|MCU_CTRL1_Pin, GPIO_PIN_RESET);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	4868      	ldr	r0, [pc, #416]	; (80030b0 <MX_GPIO_Init+0x2e8>)
 8002f0e:	f008 f9ff 	bl	800b310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8002f12:	2200      	movs	r2, #0
 8002f14:	f243 013c 	movw	r1, #12348	; 0x303c
 8002f18:	4866      	ldr	r0, [pc, #408]	; (80030b4 <MX_GPIO_Init+0x2ec>)
 8002f1a:	f008 f9f9 	bl	800b310 <HAL_GPIO_WritePin>
                          |BTN4_Pin|BTN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin, GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f241 0104 	movw	r1, #4100	; 0x1004
 8002f24:	4864      	ldr	r0, [pc, #400]	; (80030b8 <MX_GPIO_Init+0x2f0>)
 8002f26:	f008 f9f3 	bl	800b310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin, GPIO_PIN_RESET);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002f30:	4862      	ldr	r0, [pc, #392]	; (80030bc <MX_GPIO_Init+0x2f4>)
 8002f32:	f008 f9ed 	bl	800b310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	211b      	movs	r1, #27
 8002f3a:	4861      	ldr	r0, [pc, #388]	; (80030c0 <MX_GPIO_Init+0x2f8>)
 8002f3c:	f008 f9e8 	bl	800b310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_SS_Pin */
  GPIO_InitStruct.Pin = LCD_SS_Pin;
 8002f40:	2310      	movs	r3, #16
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_SS_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f54:	4619      	mov	r1, r3
 8002f56:	4853      	ldr	r0, [pc, #332]	; (80030a4 <MX_GPIO_Init+0x2dc>)
 8002f58:	f008 f818 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT11_Pin */
  GPIO_InitStruct.Pin = UI_INPUT11_Pin;
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f60:	2300      	movs	r3, #0
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT11_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	484d      	ldr	r0, [pc, #308]	; (80030a4 <MX_GPIO_Init+0x2dc>)
 8002f70:	f008 f80c 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_1V8_Pin OUT1_1V8_Pin OUT1_OD_Pin OUT0_OD_Pin
                           OUT0_1V8_Pin OUT2_1V8_Pin */
  GPIO_InitStruct.Pin = OUT3_1V8_Pin|OUT1_1V8_Pin|OUT1_OD_Pin|OUT0_OD_Pin
 8002f74:	f244 032f 	movw	r3, #16431	; 0x402f
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |OUT0_1V8_Pin|OUT2_1V8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4846      	ldr	r0, [pc, #280]	; (80030a8 <MX_GPIO_Init+0x2e0>)
 8002f8e:	f007 fffd 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT0_Pin */
  GPIO_InitStruct.Pin = UI_INPUT0_Pin;
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f96:	2300      	movs	r3, #0
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT0_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4845      	ldr	r0, [pc, #276]	; (80030bc <MX_GPIO_Init+0x2f4>)
 8002fa6:	f007 fff1 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT3_CONFIG_Pin OUT1_CONFIG_Pin OUT2_CONFIG_Pin MCU_HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = OUT3_CONFIG_Pin|OUT1_CONFIG_Pin|OUT2_CONFIG_Pin|MCU_HEARTBEAT_Pin;
 8002faa:	f241 1350 	movw	r3, #4432	; 0x1150
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	483a      	ldr	r0, [pc, #232]	; (80030ac <MX_GPIO_Init+0x2e4>)
 8002fc4:	f007 ffe2 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin BACK_BTN_Pin */
  GPIO_InitStruct.Pin = DWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin|BACK_BTN_Pin;
 8002fc8:	23f0      	movs	r3, #240	; 0xf0
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <MX_GPIO_Init+0x2fc>)
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4835      	ldr	r0, [pc, #212]	; (80030b0 <MX_GPIO_Init+0x2e8>)
 8002fdc:	f007 ffd6 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pin : UI_INPUT1_Pin */
  GPIO_InitStruct.Pin = UI_INPUT1_Pin;
 8002fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(UI_INPUT1_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4834      	ldr	r0, [pc, #208]	; (80030c8 <MX_GPIO_Init+0x300>)
 8002ff6:	f007 ffc9 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : UI_INPUT2_Pin UI_INPUT10_Pin UI_INPUT5_Pin UI_INPUT9_Pin
                           UI_INPUT4_Pin UI_INPUT3_Pin UI_INPUT7_Pin UI_INPUT8_Pin
                           UI_INPUT6_Pin */
  GPIO_InitStruct.Pin = UI_INPUT2_Pin|UI_INPUT10_Pin|UI_INPUT5_Pin|UI_INPUT9_Pin
 8002ffa:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |UI_INPUT4_Pin|UI_INPUT3_Pin|UI_INPUT7_Pin|UI_INPUT8_Pin
                          |UI_INPUT6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300c:	4619      	mov	r1, r3
 800300e:	482f      	ldr	r0, [pc, #188]	; (80030cc <MX_GPIO_Init+0x304>)
 8003010:	f007 ffbc 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL2_Pin MCU_CTRL1_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL2_Pin|MCU_CTRL1_Pin;
 8003014:	2303      	movs	r3, #3
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003018:	2301      	movs	r3, #1
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003028:	4619      	mov	r1, r3
 800302a:	4821      	ldr	r0, [pc, #132]	; (80030b0 <MX_GPIO_Init+0x2e8>)
 800302c:	f007 ffae 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin
                           BTN4_Pin BTN5_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin
 8003030:	f243 033c 	movw	r3, #12348	; 0x303c
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |BTN4_Pin|BTN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003036:	2301      	movs	r3, #1
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003046:	4619      	mov	r1, r3
 8003048:	481a      	ldr	r0, [pc, #104]	; (80030b4 <MX_GPIO_Init+0x2ec>)
 800304a:	f007 ff9f 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_CONFIG_Pin FRONT_LED_CTRL_Pin */
  GPIO_InitStruct.Pin = OUT0_CONFIG_Pin|FRONT_LED_CTRL_Pin;
 800304e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003054:	2301      	movs	r3, #1
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003064:	4619      	mov	r1, r3
 8003066:	4814      	ldr	r0, [pc, #80]	; (80030b8 <MX_GPIO_Init+0x2f0>)
 8003068:	f007 ff90 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ZION_PWR_EN_Pin EDL_EN_Pin SPARE_SW_EN_Pin */
  GPIO_InitStruct.Pin = ZION_PWR_EN_Pin|EDL_EN_Pin|SPARE_SW_EN_Pin;
 800306c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003072:	2301      	movs	r3, #1
 8003074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	2300      	movs	r3, #0
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	480d      	ldr	r0, [pc, #52]	; (80030bc <MX_GPIO_Init+0x2f4>)
 8003086:	f007 ff81 	bl	800af8c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CTRL0_Pin UART_MUX_CTRL_Pin LCD_EXTMODE_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = MCU_CTRL0_Pin|UART_MUX_CTRL_Pin|LCD_EXTMODE_Pin|LCD_DISP_Pin;
 800308a:	231b      	movs	r3, #27
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308e:	2301      	movs	r3, #1
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800309a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800309e:	e017      	b.n	80030d0 <MX_GPIO_Init+0x308>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40021800 	.word	0x40021800
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022800 	.word	0x40022800
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40021c00 	.word	0x40021c00
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40022400 	.word	0x40022400
 80030c4:	10210000 	.word	0x10210000
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	4619      	mov	r1, r3
 80030d2:	480b      	ldr	r0, [pc, #44]	; (8003100 <MX_GPIO_Init+0x338>)
 80030d4:	f007 ff5a 	bl	800af8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2105      	movs	r1, #5
 80030dc:	200a      	movs	r0, #10
 80030de:	f007 fb23 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80030e2:	200a      	movs	r0, #10
 80030e4:	f007 fb3c 	bl	800a760 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2105      	movs	r1, #5
 80030ec:	2017      	movs	r0, #23
 80030ee:	f007 fb1b 	bl	800a728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030f2:	2017      	movs	r0, #23
 80030f4:	f007 fb34 	bl	800a760 <HAL_NVIC_EnableIRQ>

}
 80030f8:	bf00      	nop
 80030fa:	3740      	adds	r7, #64	; 0x40
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40022400 	.word	0x40022400

08003104 <DevUI_Error_Handler>:
// Generic Error Handler for DevUI HAL hardware.
// char *msg is an error message that can be sent to the handler from the caller.
// err_param1 & err_param2 are additional error parameters that can be printed.
// For I2C errors, I2C device address in param1 and register address in param2.
void DevUI_Error_Handler(char *msg, HAL_StatusTypeDef ErrorCode, uint8_t err_param1, uint8_t err_param2, uint8_t critical_fault)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af02      	add	r7, sp, #8
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	70fb      	strb	r3, [r7, #3]
 8003116:	460b      	mov	r3, r1
 8003118:	70bb      	strb	r3, [r7, #2]
 800311a:	4613      	mov	r3, r2
 800311c:	707b      	strb	r3, [r7, #1]
  __ASM volatile ("cpsid i" : : : "memory");
 800311e:	b672      	cpsid	i
	__disable_irq();
	printf("ERROR: %s" " Code: %d Param1: 0x%x Param2: 0x%x\r\n", msg, ErrorCode, err_param1, err_param2);
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	78b9      	ldrb	r1, [r7, #2]
 8003124:	787b      	ldrb	r3, [r7, #1]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	460b      	mov	r3, r1
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4807      	ldr	r0, [pc, #28]	; (800314c <DevUI_Error_Handler+0x48>)
 800312e:	f010 ffa7 	bl	8014080 <iprintf>

	// Set error LED
	//setErrorLED(FAULT9, true);
	errorLED.fault9 = true;
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <DevUI_Error_Handler+0x4c>)
 8003134:	2201      	movs	r2, #1
 8003136:	731a      	strb	r2, [r3, #12]
	// Use event group flag to indicate an error for the startErrorLED task.

	// If the fault is labeled as "critical" stay here.  Else keep running RTOS.
	if (critical_fault == true)
 8003138:	7c3b      	ldrb	r3, [r7, #16]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d100      	bne.n	8003140 <DevUI_Error_Handler+0x3c>
	{
	  while (1)
 800313e:	e7fe      	b.n	800313e <DevUI_Error_Handler+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8003140:	b662      	cpsie	i
	  }
	}
	else
	{
		__enable_irq();
		return;
 8003142:	bf00      	nop
	}
}
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	08017788 	.word	0x08017788
 8003150:	200032d8 	.word	0x200032d8

08003154 <__io_putchar>:

int __io_putchar(int ch)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 800315c:	1d39      	adds	r1, r7, #4
 800315e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003162:	2201      	movs	r2, #1
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <__io_putchar+0x20>)
 8003166:	f00b fff5 	bl	800f154 <HAL_UART_Transmit>

	return ch;
 800316a:	687b      	ldr	r3, [r7, #4]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20028c08 	.word	0x20028c08

08003178 <outputGPIOBufInitialization>:

void outputGPIOBufInitialization(){
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
	memset(gpioOutputState,0,sizeof(gpioOutputState));
 800317c:	220e      	movs	r2, #14
 800317e:	2100      	movs	r1, #0
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <outputGPIOBufInitialization+0x40>)
 8003182:	f010 f962 	bl	801344a <memset>
	setOutputGPIOState(outputGPIOs.odOut_0, ON); //set OD to high impediance
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <outputGPIOBufInitialization+0x44>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f817 	bl	80031c0 <setOutputGPIOState>
	setOutputGPIOState(outputGPIOs.odOut_1, ON); //set OD to high impediance
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <outputGPIOBufInitialization+0x44>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f811 	bl	80031c0 <setOutputGPIOState>
	gpioOutputState[outputGPIOs.odOut_0]=1;
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <outputGPIOBufInitialization+0x44>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <outputGPIOBufInitialization+0x40>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	54d1      	strb	r1, [r2, r3]
	gpioOutputState[outputGPIOs.odOut_1]=1;
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <outputGPIOBufInitialization+0x44>)
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <outputGPIOBufInitialization+0x40>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	54d1      	strb	r1, [r2, r3]
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2002c064 	.word	0x2002c064
 80031bc:	20000044 	.word	0x20000044

080031c0 <setOutputGPIOState>:

void setOutputGPIOState(int gpio, int state){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]

	if(gpio == outputGPIOs.configOut_0){
 80031ca:	4b87      	ldr	r3, [pc, #540]	; (80033e8 <setOutputGPIOState+0x228>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d10d      	bne.n	80031f0 <setOutputGPIOState+0x30>
		HAL_GPIO_WritePin(GPIOH,OUT0_CONFIG_Pin,state);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	2104      	movs	r1, #4
 80031dc:	4883      	ldr	r0, [pc, #524]	; (80033ec <setOutputGPIOState+0x22c>)
 80031de:	f008 f897 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_0] = state;
 80031e2:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <setOutputGPIOState+0x228>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	b2d1      	uxtb	r1, r2
 80031ea:	4a81      	ldr	r2, [pc, #516]	; (80033f0 <setOutputGPIOState+0x230>)
 80031ec:	54d1      	strb	r1, [r2, r3]

	else if(gpio == outputGPIOs.odOut_1){
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
		gpioOutputState[outputGPIOs.odOut_1] = state;
	}
}
 80031ee:	e0f7      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_1){
 80031f0:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <setOutputGPIOState+0x228>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d10d      	bne.n	8003216 <setOutputGPIOState+0x56>
		HAL_GPIO_WritePin(GPIOI,OUT1_CONFIG_Pin,state);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	2110      	movs	r1, #16
 8003202:	487c      	ldr	r0, [pc, #496]	; (80033f4 <setOutputGPIOState+0x234>)
 8003204:	f008 f884 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_1] = state;
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <setOutputGPIOState+0x228>)
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	b2d1      	uxtb	r1, r2
 8003210:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <setOutputGPIOState+0x230>)
 8003212:	54d1      	strb	r1, [r2, r3]
}
 8003214:	e0e4      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_2){
 8003216:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <setOutputGPIOState+0x228>)
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d10d      	bne.n	800323c <setOutputGPIOState+0x7c>
		HAL_GPIO_WritePin(GPIOI,OUT2_CONFIG_Pin,state);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	2140      	movs	r1, #64	; 0x40
 8003228:	4872      	ldr	r0, [pc, #456]	; (80033f4 <setOutputGPIOState+0x234>)
 800322a:	f008 f871 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_2] = state;
 800322e:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <setOutputGPIOState+0x228>)
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	b2d1      	uxtb	r1, r2
 8003236:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <setOutputGPIOState+0x230>)
 8003238:	54d1      	strb	r1, [r2, r3]
}
 800323a:	e0d1      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.configOut_3){
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <setOutputGPIOState+0x228>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	d10e      	bne.n	8003264 <setOutputGPIOState+0xa4>
		HAL_GPIO_WritePin(GPIOI,OUT3_CONFIG_Pin,state);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003250:	4868      	ldr	r0, [pc, #416]	; (80033f4 <setOutputGPIOState+0x234>)
 8003252:	f008 f85d 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.configOut_3] = state;
 8003256:	4b64      	ldr	r3, [pc, #400]	; (80033e8 <setOutputGPIOState+0x228>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	b2d1      	uxtb	r1, r2
 800325e:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <setOutputGPIOState+0x230>)
 8003260:	54d1      	strb	r1, [r2, r3]
}
 8003262:	e0bd      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_0){
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <setOutputGPIOState+0x228>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d10d      	bne.n	800328a <setOutputGPIOState+0xca>
		HAL_GPIO_WritePin(GPIOJ,MCU_CTRL0_Pin,state);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	2110      	movs	r1, #16
 8003276:	4860      	ldr	r0, [pc, #384]	; (80033f8 <setOutputGPIOState+0x238>)
 8003278:	f008 f84a 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_0] = state;
 800327c:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <setOutputGPIOState+0x228>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d1      	uxtb	r1, r2
 8003284:	4a5a      	ldr	r2, [pc, #360]	; (80033f0 <setOutputGPIOState+0x230>)
 8003286:	54d1      	strb	r1, [r2, r3]
}
 8003288:	e0aa      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_1){
 800328a:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <setOutputGPIOState+0x228>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d10d      	bne.n	80032b0 <setOutputGPIOState+0xf0>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL1_Pin,state);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	2101      	movs	r1, #1
 800329c:	4857      	ldr	r0, [pc, #348]	; (80033fc <setOutputGPIOState+0x23c>)
 800329e:	f008 f837 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_1] = state;
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <setOutputGPIOState+0x228>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	b2d1      	uxtb	r1, r2
 80032aa:	4a51      	ldr	r2, [pc, #324]	; (80033f0 <setOutputGPIOState+0x230>)
 80032ac:	54d1      	strb	r1, [r2, r3]
}
 80032ae:	e097      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_2){
 80032b0:	4b4d      	ldr	r3, [pc, #308]	; (80033e8 <setOutputGPIOState+0x228>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10d      	bne.n	80032d6 <setOutputGPIOState+0x116>
		HAL_GPIO_WritePin(GPIOK,MCU_CTRL2_Pin,state);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	2102      	movs	r1, #2
 80032c2:	484e      	ldr	r0, [pc, #312]	; (80033fc <setOutputGPIOState+0x23c>)
 80032c4:	f008 f824 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_2] = state;
 80032c8:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <setOutputGPIOState+0x228>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d1      	uxtb	r1, r2
 80032d0:	4a47      	ldr	r2, [pc, #284]	; (80033f0 <setOutputGPIOState+0x230>)
 80032d2:	54d1      	strb	r1, [r2, r3]
}
 80032d4:	e084      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.mcu3V3_3){
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <setOutputGPIOState+0x228>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d10d      	bne.n	80032fc <setOutputGPIOState+0x13c>
		HAL_GPIO_WritePin(GPIOJ,UART_MUX_CTRL_Pin,state);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	2108      	movs	r1, #8
 80032e8:	4843      	ldr	r0, [pc, #268]	; (80033f8 <setOutputGPIOState+0x238>)
 80032ea:	f008 f811 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.mcu3V3_3] = state;
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <setOutputGPIOState+0x228>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	b2d1      	uxtb	r1, r2
 80032f6:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <setOutputGPIOState+0x230>)
 80032f8:	54d1      	strb	r1, [r2, r3]
}
 80032fa:	e071      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_0){
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <setOutputGPIOState+0x228>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d10d      	bne.n	8003322 <setOutputGPIOState+0x162>
		HAL_GPIO_WritePin(GPIOG,OUT0_1V8_Pin,state);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	2101      	movs	r1, #1
 800330e:	483c      	ldr	r0, [pc, #240]	; (8003400 <setOutputGPIOState+0x240>)
 8003310:	f007 fffe 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_0] = state;
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <setOutputGPIOState+0x228>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d1      	uxtb	r1, r2
 800331c:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <setOutputGPIOState+0x230>)
 800331e:	54d1      	strb	r1, [r2, r3]
}
 8003320:	e05e      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_1){
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <setOutputGPIOState+0x228>)
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d10d      	bne.n	8003348 <setOutputGPIOState+0x188>
		HAL_GPIO_WritePin(GPIOG,OUT1_1V8_Pin,state);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	2102      	movs	r1, #2
 8003334:	4832      	ldr	r0, [pc, #200]	; (8003400 <setOutputGPIOState+0x240>)
 8003336:	f007 ffeb 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_1] = state;
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <setOutputGPIOState+0x228>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	b2d1      	uxtb	r1, r2
 8003342:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <setOutputGPIOState+0x230>)
 8003344:	54d1      	strb	r1, [r2, r3]
}
 8003346:	e04b      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_2){
 8003348:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <setOutputGPIOState+0x228>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d10d      	bne.n	800336e <setOutputGPIOState+0x1ae>
		HAL_GPIO_WritePin(GPIOG,OUT2_1V8_Pin,state);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	2120      	movs	r1, #32
 800335a:	4829      	ldr	r0, [pc, #164]	; (8003400 <setOutputGPIOState+0x240>)
 800335c:	f007 ffd8 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_2] = state;
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <setOutputGPIOState+0x228>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d1      	uxtb	r1, r2
 8003368:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <setOutputGPIOState+0x230>)
 800336a:	54d1      	strb	r1, [r2, r3]
}
 800336c:	e038      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.out1V8_3){
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <setOutputGPIOState+0x228>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d10e      	bne.n	8003396 <setOutputGPIOState+0x1d6>
		HAL_GPIO_WritePin(GPIOG,OUT3_1V8_Pin,state);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003382:	481f      	ldr	r0, [pc, #124]	; (8003400 <setOutputGPIOState+0x240>)
 8003384:	f007 ffc4 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.out1V8_3] = state;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <setOutputGPIOState+0x228>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d1      	uxtb	r1, r2
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <setOutputGPIOState+0x230>)
 8003392:	54d1      	strb	r1, [r2, r3]
}
 8003394:	e024      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_0){
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <setOutputGPIOState+0x228>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d10d      	bne.n	80033bc <setOutputGPIOState+0x1fc>
		HAL_GPIO_WritePin(GPIOG,OUT0_OD_Pin,state);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	2104      	movs	r1, #4
 80033a8:	4815      	ldr	r0, [pc, #84]	; (8003400 <setOutputGPIOState+0x240>)
 80033aa:	f007 ffb1 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_0] = state;
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <setOutputGPIOState+0x228>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	b2d1      	uxtb	r1, r2
 80033b6:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <setOutputGPIOState+0x230>)
 80033b8:	54d1      	strb	r1, [r2, r3]
}
 80033ba:	e011      	b.n	80033e0 <setOutputGPIOState+0x220>
	else if(gpio == outputGPIOs.odOut_1){
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <setOutputGPIOState+0x228>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d10c      	bne.n	80033e0 <setOutputGPIOState+0x220>
		HAL_GPIO_WritePin(GPIOG,OUT1_OD_Pin,state);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	2108      	movs	r1, #8
 80033ce:	480c      	ldr	r0, [pc, #48]	; (8003400 <setOutputGPIOState+0x240>)
 80033d0:	f007 ff9e 	bl	800b310 <HAL_GPIO_WritePin>
		gpioOutputState[outputGPIOs.odOut_1] = state;
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <setOutputGPIOState+0x228>)
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	b2d1      	uxtb	r1, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <setOutputGPIOState+0x230>)
 80033de:	54d1      	strb	r1, [r2, r3]
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000044 	.word	0x20000044
 80033ec:	40021c00 	.word	0x40021c00
 80033f0:	2002c064 	.word	0x2002c064
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40022400 	.word	0x40022400
 80033fc:	40022800 	.word	0x40022800
 8003400:	40021800 	.word	0x40021800

08003404 <debugUartTransmitChar>:

void debugUartTransmitChar(char *message){
 8003404:	b580      	push	{r7, lr}
 8003406:	b0b6      	sub	sp, #216	; 0xd8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4618      	mov	r0, r3
 8003414:	f010 fe52 	bl	80140bc <siprintf>
 8003418:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, uart_buf_len,100);
 800341c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003420:	b29a      	uxth	r2, r3
 8003422:	f107 010c 	add.w	r1, r7, #12
 8003426:	2364      	movs	r3, #100	; 0x64
 8003428:	4803      	ldr	r0, [pc, #12]	; (8003438 <debugUartTransmitChar+0x34>)
 800342a:	f00b fe93 	bl	800f154 <HAL_UART_Transmit>
}
 800342e:	bf00      	nop
 8003430:	37d8      	adds	r7, #216	; 0xd8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20028c08 	.word	0x20028c08

0800343c <debugUartTransmitStuff>:
void debugUartTransmitStuff(char *message, int size){
 800343c:	b580      	push	{r7, lr}
 800343e:	b0b6      	sub	sp, #216	; 0xd8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	char uart_buf[200];
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, message);
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	f010 fe35 	bl	80140bc <siprintf>
 8003452:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)uart_buf, size,100);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b29a      	uxth	r2, r3
 800345a:	f107 010c 	add.w	r1, r7, #12
 800345e:	2364      	movs	r3, #100	; 0x64
 8003460:	4803      	ldr	r0, [pc, #12]	; (8003470 <debugUartTransmitStuff+0x34>)
 8003462:	f00b fe77 	bl	800f154 <HAL_UART_Transmit>
}
 8003466:	bf00      	nop
 8003468:	37d8      	adds	r7, #216	; 0xd8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20028c08 	.word	0x20028c08

08003474 <readI2CRegister>:
		HAL_UART_Transmit(&huart7, (uint8_t *)uart_buf, uart_buf_len,100);
	}

}

uint8_t * readI2CRegister(uint8_t address, uint8_t reg, int bytes, int i2CBank){
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af02      	add	r7, sp, #8
 800347a:	60ba      	str	r2, [r7, #8]
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	460b      	mov	r3, r1
 8003484:	73bb      	strb	r3, [r7, #14]
	static uint8_t buf[20];
	HAL_StatusTypeDef ret;
	buf[0]=reg;
 8003486:	4a5d      	ldr	r2, [pc, #372]	; (80035fc <readI2CRegister+0x188>)
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	7013      	strb	r3, [r2, #0]
	char *err_msg;
  	if(i2CBank == 1){
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10e      	bne.n	80034b0 <readI2CRegister+0x3c>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, 1, HAL_MAX_DELAY);
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	b299      	uxth	r1, r3
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	4a57      	ldr	r2, [pc, #348]	; (80035fc <readI2CRegister+0x188>)
 80034a0:	4857      	ldr	r0, [pc, #348]	; (8003600 <readI2CRegister+0x18c>)
 80034a2:	f008 f81d 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 1.";
 80034aa:	4b56      	ldr	r3, [pc, #344]	; (8003604 <readI2CRegister+0x190>)
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e034      	b.n	800351a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 2){
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d10e      	bne.n	80034d4 <readI2CRegister+0x60>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, 1, HAL_MAX_DELAY);
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	b299      	uxth	r1, r3
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <readI2CRegister+0x188>)
 80034c4:	4850      	ldr	r0, [pc, #320]	; (8003608 <readI2CRegister+0x194>)
 80034c6:	f008 f80b 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 2.";
 80034ce:	4b4f      	ldr	r3, [pc, #316]	; (800360c <readI2CRegister+0x198>)
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e022      	b.n	800351a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 3){
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d10e      	bne.n	80034f8 <readI2CRegister+0x84>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, 1, HAL_MAX_DELAY);
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	b299      	uxth	r1, r3
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	4a45      	ldr	r2, [pc, #276]	; (80035fc <readI2CRegister+0x188>)
 80034e8:	4849      	ldr	r0, [pc, #292]	; (8003610 <readI2CRegister+0x19c>)
 80034ea:	f007 fff9 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 3.";
 80034f2:	4b48      	ldr	r3, [pc, #288]	; (8003614 <readI2CRegister+0x1a0>)
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	e010      	b.n	800351a <readI2CRegister+0xa6>
  	}
  	else if(i2CBank == 4){
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d10d      	bne.n	800351a <readI2CRegister+0xa6>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, 1, HAL_MAX_DELAY);
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	b299      	uxth	r1, r3
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <readI2CRegister+0x188>)
 800350c:	4842      	ldr	r0, [pc, #264]	; (8003618 <readI2CRegister+0x1a4>)
 800350e:	f007 ffe7 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]
  		err_msg = "Failed I2C Read (Transmit) bank 4.";
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <readI2CRegister+0x1a8>)
 8003518:	613b      	str	r3, [r7, #16]
  	}
	  if ( ret != HAL_OK ) {
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <readI2CRegister+0xc2>
		  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 8003520:	7bb8      	ldrb	r0, [r7, #14]
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	7df9      	ldrb	r1, [r7, #23]
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	6938      	ldr	r0, [r7, #16]
 800352e:	f7ff fde9 	bl	8003104 <DevUI_Error_Handler>
	          return (uint8_t*)0xfe;
 8003532:	23fe      	movs	r3, #254	; 0xfe
 8003534:	e05d      	b.n	80035f2 <readI2CRegister+0x17e>
	        }
	  else {
		  if(i2CBank == 1){
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d110      	bne.n	800355e <readI2CRegister+0xea>
				ret = HAL_I2C_Master_Receive(&hi2c1, address, buf, bytes, HAL_MAX_DELAY);
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	b299      	uxth	r1, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	b29a      	uxth	r2, r3
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <readI2CRegister+0x188>)
 800354e:	482c      	ldr	r0, [pc, #176]	; (8003600 <readI2CRegister+0x18c>)
 8003550:	f008 f8ba 	bl	800b6c8 <HAL_I2C_Master_Receive>
 8003554:	4603      	mov	r3, r0
 8003556:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 1.";
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <readI2CRegister+0x1ac>)
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	e03a      	b.n	80035d4 <readI2CRegister+0x160>
			}
			else if(i2CBank == 2){
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d110      	bne.n	8003586 <readI2CRegister+0x112>
				ret = HAL_I2C_Master_Receive(&hi2c2, address, buf, bytes, HAL_MAX_DELAY);
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	b299      	uxth	r1, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	b29a      	uxth	r2, r3
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <readI2CRegister+0x188>)
 8003576:	4824      	ldr	r0, [pc, #144]	; (8003608 <readI2CRegister+0x194>)
 8003578:	f008 f8a6 	bl	800b6c8 <HAL_I2C_Master_Receive>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 2.";
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <readI2CRegister+0x1b0>)
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	e026      	b.n	80035d4 <readI2CRegister+0x160>
			}
			else if(i2CBank == 3){
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d110      	bne.n	80035ae <readI2CRegister+0x13a>
				ret = HAL_I2C_Master_Receive(&hi2c3, address, buf, bytes, HAL_MAX_DELAY);
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	b299      	uxth	r1, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	b29a      	uxth	r2, r3
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <readI2CRegister+0x188>)
 800359e:	481c      	ldr	r0, [pc, #112]	; (8003610 <readI2CRegister+0x19c>)
 80035a0:	f008 f892 	bl	800b6c8 <HAL_I2C_Master_Receive>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 3.";
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <readI2CRegister+0x1b4>)
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e012      	b.n	80035d4 <readI2CRegister+0x160>
			}
			else if(i2CBank == 4){
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d10f      	bne.n	80035d4 <readI2CRegister+0x160>
				ret = HAL_I2C_Master_Receive(&hi2c4, address, buf, bytes, HAL_MAX_DELAY);
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	b299      	uxth	r1, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <readI2CRegister+0x188>)
 80035c6:	4814      	ldr	r0, [pc, #80]	; (8003618 <readI2CRegister+0x1a4>)
 80035c8:	f008 f87e 	bl	800b6c8 <HAL_I2C_Master_Receive>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]
				err_msg = "Failed I2C Read (Receive) bank 4.";
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <readI2CRegister+0x1b8>)
 80035d2:	613b      	str	r3, [r7, #16]
			}
		  if ( ret != HAL_OK ) {
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <readI2CRegister+0x17c>
			  	  DevUI_Error_Handler(err_msg, ret, address, reg, false);
 80035da:	7bb8      	ldrb	r0, [r7, #14]
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	7df9      	ldrb	r1, [r7, #23]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	6938      	ldr	r0, [r7, #16]
 80035e8:	f7ff fd8c 	bl	8003104 <DevUI_Error_Handler>
		          return (uint8_t*)0xfe;
 80035ec:	23fe      	movs	r3, #254	; 0xfe
 80035ee:	e000      	b.n	80035f2 <readI2CRegister+0x17e>
		        }
		  else{
			  //uartTransmitInt(buf[0],7);
			  return buf;
 80035f0:	4b02      	ldr	r3, [pc, #8]	; (80035fc <readI2CRegister+0x188>)
		  }
}
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200032e8 	.word	0x200032e8
 8003600:	20028d88 	.word	0x20028d88
 8003604:	080177c8 	.word	0x080177c8
 8003608:	200291d8 	.word	0x200291d8
 800360c:	080177ec 	.word	0x080177ec
 8003610:	20028b70 	.word	0x20028b70
 8003614:	08017810 	.word	0x08017810
 8003618:	20028bbc 	.word	0x20028bbc
 800361c:	08017834 	.word	0x08017834
 8003620:	08017858 	.word	0x08017858
 8003624:	0801787c 	.word	0x0801787c
 8003628:	080178a0 	.word	0x080178a0
 800362c:	080178c4 	.word	0x080178c4

08003630 <writeI2CRegister>:
int writeI2CRegister(uint8_t address, uint8_t reg, uint8_t * bytes, int numBytes, int i2CBank){
 8003630:	b580      	push	{r7, lr}
 8003632:	b08e      	sub	sp, #56	; 0x38
 8003634:	af02      	add	r7, sp, #8
 8003636:	60ba      	str	r2, [r7, #8]
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	460b      	mov	r3, r1
 8003640:	73bb      	strb	r3, [r7, #14]
  	uint8_t buf[20];
  	HAL_StatusTypeDef ret;
  	buf[0]=reg;
 8003642:	7bbb      	ldrb	r3, [r7, #14]
 8003644:	743b      	strb	r3, [r7, #16]
  	int x = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
  	char *err_msg;
  	for (x=0;x<(sizeof(bytes)-1);x++){
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
 800364e:	e00d      	b.n	800366c <writeI2CRegister+0x3c>
  		buf[1+x] = bytes[x];
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	441a      	add	r2, r3
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	3301      	adds	r3, #1
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003660:	440b      	add	r3, r1
 8003662:	f803 2c20 	strb.w	r2, [r3, #-32]
  	for (x=0;x<(sizeof(bytes)-1);x++){
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	3301      	adds	r3, #1
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	2b02      	cmp	r3, #2
 8003670:	d9ee      	bls.n	8003650 <writeI2CRegister+0x20>
  	}
  	if(i2CBank == 1){
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b01      	cmp	r3, #1
 8003676:	d114      	bne.n	80036a2 <writeI2CRegister+0x72>
  		ret = HAL_I2C_Master_Transmit(&hi2c1, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	b29b      	uxth	r3, r3
 8003680:	3301      	adds	r3, #1
 8003682:	b298      	uxth	r0, r3
 8003684:	f107 0210 	add.w	r2, r7, #16
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4603      	mov	r3, r0
 8003690:	4832      	ldr	r0, [pc, #200]	; (800375c <writeI2CRegister+0x12c>)
 8003692:	f007 ff25 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 8003696:	4603      	mov	r3, r0
 8003698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 1.";
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <writeI2CRegister+0x130>)
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
 80036a0:	e046      	b.n	8003730 <writeI2CRegister+0x100>
  	}
  	else if(i2CBank == 2){
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d114      	bne.n	80036d2 <writeI2CRegister+0xa2>
  		ret = HAL_I2C_Master_Transmit(&hi2c2, address, buf, numBytes+1, HAL_MAX_DELAY);
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	b299      	uxth	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	b298      	uxth	r0, r3
 80036b4:	f107 0210 	add.w	r2, r7, #16
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	4603      	mov	r3, r0
 80036c0:	4828      	ldr	r0, [pc, #160]	; (8003764 <writeI2CRegister+0x134>)
 80036c2:	f007 ff0d 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 2.";
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <writeI2CRegister+0x138>)
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	e02e      	b.n	8003730 <writeI2CRegister+0x100>
  	}
  	else if(i2CBank == 3){
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d114      	bne.n	8003702 <writeI2CRegister+0xd2>
  		ret = HAL_I2C_Master_Transmit(&hi2c3, address, buf, numBytes+1, HAL_MAX_DELAY);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	b299      	uxth	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	b298      	uxth	r0, r3
 80036e4:	f107 0210 	add.w	r2, r7, #16
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4603      	mov	r3, r0
 80036f0:	481e      	ldr	r0, [pc, #120]	; (800376c <writeI2CRegister+0x13c>)
 80036f2:	f007 fef5 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 3.";
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <writeI2CRegister+0x140>)
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003700:	e016      	b.n	8003730 <writeI2CRegister+0x100>
  	}
  	else if(i2CBank == 4){
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b04      	cmp	r3, #4
 8003706:	d113      	bne.n	8003730 <writeI2CRegister+0x100>
  		ret = HAL_I2C_Master_Transmit(&hi2c4, address, buf, numBytes+1, HAL_MAX_DELAY);
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	b299      	uxth	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	b29b      	uxth	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	b298      	uxth	r0, r3
 8003714:	f107 0210 	add.w	r2, r7, #16
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	4603      	mov	r3, r0
 8003720:	4814      	ldr	r0, [pc, #80]	; (8003774 <writeI2CRegister+0x144>)
 8003722:	f007 fedd 	bl	800b4e0 <HAL_I2C_Master_Transmit>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  		err_msg = "Failed I2C write bank 4.";
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <writeI2CRegister+0x148>)
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  	}
  	if (ret != HAL_OK)
 8003730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <writeI2CRegister+0x122>
  	{
  		DevUI_Error_Handler(err_msg, ret, address, reg, false);
 8003738:	7bb8      	ldrb	r0, [r7, #14]
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4603      	mov	r3, r0
 8003746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003748:	f7ff fcdc 	bl	8003104 <DevUI_Error_Handler>
  		return ret;
 800374c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003750:	e000      	b.n	8003754 <writeI2CRegister+0x124>
  	}
  	else
  	{
  		return HAL_OK;
 8003752:	2300      	movs	r3, #0
  	}
}
 8003754:	4618      	mov	r0, r3
 8003756:	3730      	adds	r7, #48	; 0x30
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20028d88 	.word	0x20028d88
 8003760:	080178e8 	.word	0x080178e8
 8003764:	200291d8 	.word	0x200291d8
 8003768:	08017904 	.word	0x08017904
 800376c:	20028b70 	.word	0x20028b70
 8003770:	08017920 	.word	0x08017920
 8003774:	20028bbc 	.word	0x20028bbc
 8003778:	0801793c 	.word	0x0801793c

0800377c <configureLEDDriver>:
void configureLEDDriver(){
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af02      	add	r7, sp, #8
	uint8_t currentMultiplier = 0b00000001;
 8003782:	2301      	movs	r3, #1
 8003784:	71fb      	strb	r3, [r7, #7]
	static uint8_t* clear[1];
	clear[0]=0x0;
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <configureLEDDriver+0x104>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
	uint8_t * buf;
	//reduce the current multiplier to set brightness lower. See if this works. If not, we can work with PWM.
	writeI2CRegister(LED.address, LED.iref_reg, (uint8_t*)currentMultiplier,1,LED.i2cBank);
 800378c:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <configureLEDDriver+0x108>)
 800378e:	7818      	ldrb	r0, [r3, #0]
 8003790:	4b3c      	ldr	r3, [pc, #240]	; (8003884 <configureLEDDriver+0x108>)
 8003792:	7999      	ldrb	r1, [r3, #6]
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	461a      	mov	r2, r3
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <configureLEDDriver+0x108>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2301      	movs	r3, #1
 80037a0:	f7ff ff46 	bl	8003630 <writeI2CRegister>
	buf = readI2CRegister(LED.address,LED.iref_reg,1,LED.i2cBank);
 80037a4:	4b37      	ldr	r3, [pc, #220]	; (8003884 <configureLEDDriver+0x108>)
 80037a6:	7818      	ldrb	r0, [r3, #0]
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <configureLEDDriver+0x108>)
 80037aa:	7999      	ldrb	r1, [r3, #6]
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <configureLEDDriver+0x108>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f7ff fe5f 	bl	8003474 <readI2CRegister>
 80037b6:	6038      	str	r0, [r7, #0]
	//uartTransmitInt(buf[0],7);
	//Turn on oscillator. Must be turned on before LED driver functions
	writeI2CRegister(LED.address,LED.mode0_reg,(uint8_t*)LED.mode0_oscon_value,1,LED.i2cBank);
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <configureLEDDriver+0x108>)
 80037ba:	7818      	ldrb	r0, [r3, #0]
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <configureLEDDriver+0x108>)
 80037be:	7859      	ldrb	r1, [r3, #1]
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <configureLEDDriver+0x108>)
 80037c2:	79db      	ldrb	r3, [r3, #7]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <configureLEDDriver+0x108>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2301      	movs	r3, #1
 80037ce:	f7ff ff2f 	bl	8003630 <writeI2CRegister>
	//clear the default state of the led register.
	writeI2CRegister(LED.address,LED.led0_reg,(uint8_t*)clear,1,LED.i2cBank);
 80037d2:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <configureLEDDriver+0x108>)
 80037d4:	7818      	ldrb	r0, [r3, #0]
 80037d6:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <configureLEDDriver+0x108>)
 80037d8:	7899      	ldrb	r1, [r3, #2]
 80037da:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <configureLEDDriver+0x108>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	2301      	movs	r3, #1
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <configureLEDDriver+0x104>)
 80037e4:	f7ff ff24 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led1_reg,(uint8_t*)clear,1,LED.i2cBank);
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <configureLEDDriver+0x108>)
 80037ea:	7818      	ldrb	r0, [r3, #0]
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <configureLEDDriver+0x108>)
 80037ee:	78d9      	ldrb	r1, [r3, #3]
 80037f0:	4b24      	ldr	r3, [pc, #144]	; (8003884 <configureLEDDriver+0x108>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2301      	movs	r3, #1
 80037f8:	4a21      	ldr	r2, [pc, #132]	; (8003880 <configureLEDDriver+0x104>)
 80037fa:	f7ff ff19 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led2_reg,(uint8_t*)clear,1,LED.i2cBank);
 80037fe:	4b21      	ldr	r3, [pc, #132]	; (8003884 <configureLEDDriver+0x108>)
 8003800:	7818      	ldrb	r0, [r3, #0]
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <configureLEDDriver+0x108>)
 8003804:	7919      	ldrb	r1, [r3, #4]
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <configureLEDDriver+0x108>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2301      	movs	r3, #1
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <configureLEDDriver+0x104>)
 8003810:	f7ff ff0e 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led3_reg,(uint8_t*)clear,1,LED.i2cBank);
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <configureLEDDriver+0x108>)
 8003816:	7818      	ldrb	r0, [r3, #0]
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <configureLEDDriver+0x108>)
 800381a:	7959      	ldrb	r1, [r3, #5]
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <configureLEDDriver+0x108>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2301      	movs	r3, #1
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <configureLEDDriver+0x104>)
 8003826:	f7ff ff03 	bl	8003630 <writeI2CRegister>
	//set the PWM for the tri-color led. Thing is bright so PWM is very low.
	writeI2CRegister(LED.address,LED.led7_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <configureLEDDriver+0x108>)
 800382c:	7818      	ldrb	r0, [r3, #0]
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <configureLEDDriver+0x108>)
 8003830:	7a19      	ldrb	r1, [r3, #8]
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <configureLEDDriver+0x108>)
 8003834:	7adb      	ldrb	r3, [r3, #11]
 8003836:	461a      	mov	r2, r3
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <configureLEDDriver+0x108>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2301      	movs	r3, #1
 8003840:	f7ff fef6 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led8_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <configureLEDDriver+0x108>)
 8003846:	7818      	ldrb	r0, [r3, #0]
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <configureLEDDriver+0x108>)
 800384a:	7a59      	ldrb	r1, [r3, #9]
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <configureLEDDriver+0x108>)
 800384e:	7adb      	ldrb	r3, [r3, #11]
 8003850:	461a      	mov	r2, r3
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <configureLEDDriver+0x108>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	f7ff fee9 	bl	8003630 <writeI2CRegister>
	writeI2CRegister(LED.address,LED.led9_pwm,(uint8_t*)LED.pwm,1,LED.i2cBank);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <configureLEDDriver+0x108>)
 8003860:	7818      	ldrb	r0, [r3, #0]
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <configureLEDDriver+0x108>)
 8003864:	7a99      	ldrb	r1, [r3, #10]
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <configureLEDDriver+0x108>)
 8003868:	7adb      	ldrb	r3, [r3, #11]
 800386a:	461a      	mov	r2, r3
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <configureLEDDriver+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2301      	movs	r3, #1
 8003874:	f7ff fedc 	bl	8003630 <writeI2CRegister>
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200032fc 	.word	0x200032fc
 8003884:	20000004 	.word	0x20000004

08003888 <setRGBLED>:

//Configure & set RGB LED
void setRGBLED(uint8_t R, uint8_t G, uint8_t B)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
 8003892:	460b      	mov	r3, r1
 8003894:	71bb      	strb	r3, [r7, #6]
 8003896:	4613      	mov	r3, r2
 8003898:	717b      	strb	r3, [r7, #5]
	setErrorLED(RED, R);
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4619      	mov	r1, r3
 80038a8:	2007      	movs	r0, #7
 80038aa:	f000 f819 	bl	80038e0 <setErrorLED>
	setErrorLED(GREEN, G);
 80038ae:	79bb      	ldrb	r3, [r7, #6]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	2008      	movs	r0, #8
 80038be:	f000 f80f 	bl	80038e0 <setErrorLED>
	setErrorLED(BLUE, B);
 80038c2:	797b      	ldrb	r3, [r7, #5]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	4619      	mov	r1, r3
 80038d0:	2009      	movs	r0, #9
 80038d2:	f000 f805 	bl	80038e0 <setErrorLED>

	return;
 80038d6:	bf00      	nop
}
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <setErrorLED>:

//Configures specified LED to either fully on or off.
void setErrorLED(int led,_Bool change){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
	const uint8_t led0 = 0b00000001;
 80038ec:	2301      	movs	r3, #1
 80038ee:	76bb      	strb	r3, [r7, #26]
	const uint8_t led1 = 0b00000100;
 80038f0:	2304      	movs	r3, #4
 80038f2:	767b      	strb	r3, [r7, #25]
	const uint8_t led2 = 0b00010000;
 80038f4:	2310      	movs	r3, #16
 80038f6:	763b      	strb	r3, [r7, #24]
	const uint8_t led3 = 0b01000000;
 80038f8:	2340      	movs	r3, #64	; 0x40
 80038fa:	75fb      	strb	r3, [r7, #23]
	const uint8_t led0_pwm = 0b00000010;
 80038fc:	2302      	movs	r3, #2
 80038fe:	75bb      	strb	r3, [r7, #22]
	const uint8_t led1_pwm = 0b00001000;
 8003900:	2308      	movs	r3, #8
 8003902:	757b      	strb	r3, [r7, #21]
	const uint8_t led2_pwm = 0b00100000;
 8003904:	2320      	movs	r3, #32
 8003906:	753b      	strb	r3, [r7, #20]
	const uint8_t led3_pwm = 0b10000000;
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	74fb      	strb	r3, [r7, #19]
  	uint8_t* ledRegisterContents;
  	int ledBitNumber;
  	uint8_t ledRegister;
	if(led <4){
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b03      	cmp	r3, #3
 8003910:	dc05      	bgt.n	800391e <setErrorLED+0x3e>
		ledRegister = LED.led0_reg;
 8003912:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <setErrorLED+0x234>)
 8003914:	789b      	ldrb	r3, [r3, #2]
 8003916:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	e019      	b.n	8003952 <setErrorLED+0x72>
	}
	else if(led <8){
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b07      	cmp	r3, #7
 8003922:	dc06      	bgt.n	8003932 <setErrorLED+0x52>
		ledRegister = LED.led1_reg;
 8003924:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <setErrorLED+0x234>)
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-4;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3b04      	subs	r3, #4
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e00f      	b.n	8003952 <setErrorLED+0x72>
	}
	else if(led <12){
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0b      	cmp	r3, #11
 8003936:	dc06      	bgt.n	8003946 <setErrorLED+0x66>
		ledRegister = LED.led2_reg;
 8003938:	4b76      	ldr	r3, [pc, #472]	; (8003b14 <setErrorLED+0x234>)
 800393a:	791b      	ldrb	r3, [r3, #4]
 800393c:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-8;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3b08      	subs	r3, #8
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	e005      	b.n	8003952 <setErrorLED+0x72>
	}
	else{ //put this in to humor those who want to try using unconnected LEDs
		ledRegister = LED.led3_reg;
 8003946:	4b73      	ldr	r3, [pc, #460]	; (8003b14 <setErrorLED+0x234>)
 8003948:	795b      	ldrb	r3, [r3, #5]
 800394a:	76fb      	strb	r3, [r7, #27]
		ledBitNumber=led-12;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b0c      	subs	r3, #12
 8003950:	61fb      	str	r3, [r7, #28]
	}
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003952:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <setErrorLED+0x234>)
 8003954:	7818      	ldrb	r0, [r3, #0]
 8003956:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <setErrorLED+0x234>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	7ef9      	ldrb	r1, [r7, #27]
 800395c:	2201      	movs	r2, #1
 800395e:	f7ff fd89 	bl	8003474 <readI2CRegister>
 8003962:	60f8      	str	r0, [r7, #12]
	switch(ledBitNumber){
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b03      	cmp	r3, #3
 8003968:	f200 80bd 	bhi.w	8003ae6 <setErrorLED+0x206>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <setErrorLED+0x94>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003985 	.word	0x08003985
 8003978:	080039eb 	.word	0x080039eb
 800397c:	08003a51 	.word	0x08003a51
 8003980:	08003a81 	.word	0x08003a81

	case 0:
		if(change){
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <setErrorLED+0xd0>
			if(led == 8){
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d107      	bne.n	80039a0 <setErrorLED+0xc0>
				ledRegisterContents[0] |= led0_pwm;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	7dbb      	ldrb	r3, [r7, #22]
 8003996:	4313      	orrs	r3, r2
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led0;
			}
		}
		break;
 800399e:	e0a2      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] |= led0;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	7ebb      	ldrb	r3, [r7, #26]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	701a      	strb	r2, [r3, #0]
		break;
 80039ae:	e09a      	b.n	8003ae6 <setErrorLED+0x206>
			if(led == 8){
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d10c      	bne.n	80039d0 <setErrorLED+0xf0>
				ledRegisterContents[0] &= ~led0_pwm;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b25a      	sxtb	r2, r3
 80039bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	b25b      	sxtb	r3, r3
 80039c4:	4013      	ands	r3, r2
 80039c6:	b25b      	sxtb	r3, r3
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
		break;
 80039ce:	e08a      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led0;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b25a      	sxtb	r2, r3
 80039d6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80039da:	43db      	mvns	r3, r3
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	4013      	ands	r3, r2
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	701a      	strb	r2, [r3, #0]
		break;
 80039e8:	e07d      	b.n	8003ae6 <setErrorLED+0x206>

	case 1:
		if(change){
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <setErrorLED+0x136>
			if(led == 9){
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b09      	cmp	r3, #9
 80039f4:	d107      	bne.n	8003a06 <setErrorLED+0x126>
				ledRegisterContents[0] |= led1_pwm;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	7d7b      	ldrb	r3, [r7, #21]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led1;
			}
		}
		break;
 8003a04:	e06f      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] |= led1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	7e7b      	ldrb	r3, [r7, #25]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	701a      	strb	r2, [r3, #0]
		break;
 8003a14:	e067      	b.n	8003ae6 <setErrorLED+0x206>
			if(led == 9){
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d10c      	bne.n	8003a36 <setErrorLED+0x156>
				ledRegisterContents[0] &= ~led1_pwm;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b25a      	sxtb	r2, r3
 8003a22:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	b25b      	sxtb	r3, r3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	701a      	strb	r2, [r3, #0]
		break;
 8003a34:	e057      	b.n	8003ae6 <setErrorLED+0x206>
				ledRegisterContents[0] &= ~led1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b25a      	sxtb	r2, r3
 8003a3c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	b25b      	sxtb	r3, r3
 8003a44:	4013      	ands	r3, r2
 8003a46:	b25b      	sxtb	r3, r3
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	701a      	strb	r2, [r3, #0]
		break;
 8003a4e:	e04a      	b.n	8003ae6 <setErrorLED+0x206>

	case 2:
		if(change){
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <setErrorLED+0x186>
				ledRegisterContents[0] |= led2;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	7e3b      	ldrb	r3, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	701a      	strb	r2, [r3, #0]
		}
		else{

			ledRegisterContents[0] &= ~led2;
		}
		break;
 8003a64:	e03f      	b.n	8003ae6 <setErrorLED+0x206>
			ledRegisterContents[0] &= ~led2;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b25a      	sxtb	r2, r3
 8003a6c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	4013      	ands	r3, r2
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]
		break;
 8003a7e:	e032      	b.n	8003ae6 <setErrorLED+0x206>

	case 3:
		if(change){
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <setErrorLED+0x1cc>
			if(led == 7){
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b07      	cmp	r3, #7
 8003a8a:	d107      	bne.n	8003a9c <setErrorLED+0x1bc>
				ledRegisterContents[0] |= led3_pwm;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	701a      	strb	r2, [r3, #0]
			}
			else{
				ledRegisterContents[0] &= ~led3;
			}
		}
		break;
 8003a9a:	e023      	b.n	8003ae4 <setErrorLED+0x204>
				ledRegisterContents[0] |= led3;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	701a      	strb	r2, [r3, #0]
		break;
 8003aaa:	e01b      	b.n	8003ae4 <setErrorLED+0x204>
			if(led == 7){
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d10c      	bne.n	8003acc <setErrorLED+0x1ec>
				ledRegisterContents[0] &= ~led3_pwm;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b25a      	sxtb	r2, r3
 8003ab8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	b25b      	sxtb	r3, r3
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	701a      	strb	r2, [r3, #0]
		break;
 8003aca:	e00b      	b.n	8003ae4 <setErrorLED+0x204>
				ledRegisterContents[0] &= ~led3;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b25a      	sxtb	r2, r3
 8003ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	4013      	ands	r3, r2
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	701a      	strb	r2, [r3, #0]
		break;
 8003ae4:	bf00      	nop
	}
	writeI2CRegister(LED.address,ledRegister,ledRegisterContents,1,LED.i2cBank);
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <setErrorLED+0x234>)
 8003ae8:	7818      	ldrb	r0, [r3, #0]
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <setErrorLED+0x234>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	7ef9      	ldrb	r1, [r7, #27]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2301      	movs	r3, #1
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	f7ff fd9b 	bl	8003630 <writeI2CRegister>
	ledRegisterContents = readI2CRegister(LED.address,ledRegister, 1, LED.i2cBank);
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <setErrorLED+0x234>)
 8003afc:	7818      	ldrb	r0, [r3, #0]
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <setErrorLED+0x234>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	7ef9      	ldrb	r1, [r7, #27]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f7ff fcb5 	bl	8003474 <readI2CRegister>
 8003b0a:	60f8      	str	r0, [r7, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000004 	.word	0x20000004

08003b18 <getADCValues>:


float* getADCValues(){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b09e      	sub	sp, #120	; 0x78
 8003b1c:	af00      	add	r7, sp, #0
	//intialize a static float array to return from the method. Make static to avoid the data changing on return
	static float adcValues[21];
	//make an integer array to store the adc counts. ADC counts are out of 4096
	int avgADCCounterValues[21];
	//empty the integer array
	memset(avgADCCounterValues, 0, sizeof(avgADCCounterValues));
 8003b1e:	463b      	mov	r3, r7
 8003b20:	2254      	movs	r2, #84	; 0x54
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f00f fc90 	bl	801344a <memset>
	int adcChannelCounter,avgCounter,adcIndex;
	//variables to denote what interval the data in the adc buffers repeats. ADC format is [data0, 0x00, data1, 0x00...]
	//the interval is (#ofchannels activated on bank) * 2
	int adc1DataRepeat=22;
 8003b2a:	2316      	movs	r3, #22
 8003b2c:	66bb      	str	r3, [r7, #104]	; 0x68
	int adc2DataRepeat=8;
 8003b2e:	2308      	movs	r3, #8
 8003b30:	667b      	str	r3, [r7, #100]	; 0x64
	int adc3DataRepeat=12;
 8003b32:	230c      	movs	r3, #12
 8003b34:	663b      	str	r3, [r7, #96]	; 0x60
	//iterate through all 21 adc channels...
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003b36:	2300      	movs	r3, #0
 8003b38:	677b      	str	r3, [r7, #116]	; 0x74
 8003b3a:	e171      	b.n	8003e20 <getADCValues+0x308>
		//for the first channels of the adc banks (ADC Bank 1's first channel is ADC3, ADC bank 2's first channel is ADC0, ADC bank 3's first channel is adc2
		if((adcChannelCounter==Adc.adc0) || (adcChannelCounter==Adc.adc2) || (adcChannelCounter==Adc.adc3)){
 8003b3c:	4b97      	ldr	r3, [pc, #604]	; (8003d9c <getADCValues+0x284>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d009      	beq.n	8003b5a <getADCValues+0x42>
 8003b46:	4b95      	ldr	r3, [pc, #596]	; (8003d9c <getADCValues+0x284>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d004      	beq.n	8003b5a <getADCValues+0x42>
 8003b50:	4b92      	ldr	r3, [pc, #584]	; (8003d9c <getADCValues+0x284>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d102      	bne.n	8003b60 <getADCValues+0x48>
			//first data entry for each buffer will be the data for these adcs
			adcIndex=0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5e:	e071      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the second channels of the adc banks (ADC Bank 1's second channel is ADC4, ADC bank 2's second channel is ADC1, ADC bank 3's second channel is adc14
		else if((adcChannelCounter==Adc.adc1) || (adcChannelCounter==Adc.adc14) || (adcChannelCounter==Adc.adc4)){
 8003b60:	4b8e      	ldr	r3, [pc, #568]	; (8003d9c <getADCValues+0x284>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d009      	beq.n	8003b7e <getADCValues+0x66>
 8003b6a:	4b8c      	ldr	r3, [pc, #560]	; (8003d9c <getADCValues+0x284>)
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d004      	beq.n	8003b7e <getADCValues+0x66>
 8003b74:	4b89      	ldr	r3, [pc, #548]	; (8003d9c <getADCValues+0x284>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d102      	bne.n	8003b84 <getADCValues+0x6c>
			adcIndex=2;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b82:	e05f      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the third channels of the adc banks (ADC Bank 1's third channel is ADC5, ADC bank 2's third channel is spareSpiADC, ADC bank 3's third channel is adc15
		else if((adcChannelCounter==Adc.spareSpiADC) || (adcChannelCounter==Adc.adc15) || (adcChannelCounter==Adc.adc5)){
 8003b84:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <getADCValues+0x284>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d009      	beq.n	8003ba2 <getADCValues+0x8a>
 8003b8e:	4b83      	ldr	r3, [pc, #524]	; (8003d9c <getADCValues+0x284>)
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d004      	beq.n	8003ba2 <getADCValues+0x8a>
 8003b98:	4b80      	ldr	r3, [pc, #512]	; (8003d9c <getADCValues+0x284>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d102      	bne.n	8003ba8 <getADCValues+0x90>
			adcIndex=4;
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba6:	e04d      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the fourth channels of the adc banks (ADC Bank 1's fourth channel is adc6, ADC bank 2's fourth channel is spareUARTADC, ADC bank 3's fourth channel is configADC
		else if((adcChannelCounter == Adc.spareUartADC) || (adcChannelCounter==Adc.configADC) || (adcChannelCounter==Adc.adc6)){
 8003ba8:	4b7c      	ldr	r3, [pc, #496]	; (8003d9c <getADCValues+0x284>)
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d009      	beq.n	8003bc6 <getADCValues+0xae>
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	; (8003d9c <getADCValues+0x284>)
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d004      	beq.n	8003bc6 <getADCValues+0xae>
 8003bbc:	4b77      	ldr	r3, [pc, #476]	; (8003d9c <getADCValues+0x284>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d102      	bne.n	8003bcc <getADCValues+0xb4>
			adcIndex=6;
 8003bc6:	2306      	movs	r3, #6
 8003bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bca:	e03b      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the fifth channels of the adc banks (ADC Bank 1's fifth channel is ADC7, ADC bank 3's fifth channel is zionADC
		else if((adcChannelCounter==Adc.zionADC) || (adcChannelCounter==Adc.adc7)){
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <getADCValues+0x284>)
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d004      	beq.n	8003be0 <getADCValues+0xc8>
 8003bd6:	4b71      	ldr	r3, [pc, #452]	; (8003d9c <getADCValues+0x284>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d102      	bne.n	8003be6 <getADCValues+0xce>
			adcIndex=8;
 8003be0:	2308      	movs	r3, #8
 8003be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be4:	e02e      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the sixth channels of the adc banks (ADC Bank 1's sixth channel is ADC8, ADC bank 3's sixth channel is spareI2cADC
		else if((adcChannelCounter == Adc.spareI2cADC) || (adcChannelCounter==Adc.adc8)){
 8003be6:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <getADCValues+0x284>)
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d004      	beq.n	8003bfa <getADCValues+0xe2>
 8003bf0:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <getADCValues+0x284>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d102      	bne.n	8003c00 <getADCValues+0xe8>
			adcIndex=10;
 8003bfa:	230a      	movs	r3, #10
 8003bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bfe:	e021      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the seventh channels of the adc banks (ADC Bank 1's seventh channel is ADC9)
		else if(adcChannelCounter==Adc.adc9){
 8003c00:	4b66      	ldr	r3, [pc, #408]	; (8003d9c <getADCValues+0x284>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d102      	bne.n	8003c10 <getADCValues+0xf8>
			adcIndex=12;
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c0e:	e019      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the eighth channels of the adc banks (ADC Bank 1's eighth channel is ADC10)
		else if(adcChannelCounter==Adc.adc10){
 8003c10:	4b62      	ldr	r3, [pc, #392]	; (8003d9c <getADCValues+0x284>)
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d102      	bne.n	8003c20 <getADCValues+0x108>
			adcIndex=14;
 8003c1a:	230e      	movs	r3, #14
 8003c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1e:	e011      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the nineth channels of the adc banks (ADC Bank 1's nineth channel is ADC11)
		else if(adcChannelCounter==Adc.adc11){
 8003c20:	4b5e      	ldr	r3, [pc, #376]	; (8003d9c <getADCValues+0x284>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d102      	bne.n	8003c30 <getADCValues+0x118>
			adcIndex=16;
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c2e:	e009      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the tenth channels of the adc banks (ADC Bank 1's tenth channel is ADC12)
		else if(adcChannelCounter==Adc.adc12){
 8003c30:	4b5a      	ldr	r3, [pc, #360]	; (8003d9c <getADCValues+0x284>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d102      	bne.n	8003c40 <getADCValues+0x128>
			adcIndex=18;
 8003c3a:	2312      	movs	r3, #18
 8003c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c3e:	e001      	b.n	8003c44 <getADCValues+0x12c>
		}
		//for the eleventh channels of the adc banks (ADC Bank 1's eleventh channel is ADC13)
		else{
			adcIndex=20;
 8003c40:	2314      	movs	r3, #20
 8003c42:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		//for the channels that belong to the second ADC bank
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003c44:	4b55      	ldr	r3, [pc, #340]	; (8003d9c <getADCValues+0x284>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d00e      	beq.n	8003c6c <getADCValues+0x154>
 8003c4e:	4b53      	ldr	r3, [pc, #332]	; (8003d9c <getADCValues+0x284>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d009      	beq.n	8003c6c <getADCValues+0x154>
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <getADCValues+0x284>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d004      	beq.n	8003c6c <getADCValues+0x154>
 8003c62:	4b4e      	ldr	r3, [pc, #312]	; (8003d9c <getADCValues+0x284>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d13a      	bne.n	8003ce2 <getADCValues+0x1ca>
			//parse through the buffers to grab enough values to make the asked for average amount
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c70:	e033      	b.n	8003cda <getADCValues+0x1c2>
				//adjust the index to match the next data point in the buffer
				int shiftedIndex = adcIndex + (adc2DataRepeat*avgCounter);
 8003c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c7c:	4413      	add	r3, r2
 8003c7e:	657b      	str	r3, [r7, #84]	; 0x54
				//add it to the rolling average count
				avgADCCounterValues[adcChannelCounter]+=adc2_buf[shiftedIndex];
 8003c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003c88:	4413      	add	r3, r2
 8003c8a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003c8e:	4944      	ldr	r1, [pc, #272]	; (8003da0 <getADCValues+0x288>)
 8003c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c92:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c96:	441a      	add	r2, r3
 8003c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003ca0:	440b      	add	r3, r1
 8003ca2:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca8:	2b13      	cmp	r3, #19
 8003caa:	d113      	bne.n	8003cd4 <getADCValues+0x1bc>
					//at the end, divide the total amount to get our averaged Value
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003cba:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <getADCValues+0x28c>)
 8003cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8003cc0:	10d2      	asrs	r2, r2, #3
 8003cc2:	17db      	asrs	r3, r3, #31
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003cce:	440b      	add	r3, r1
 8003cd0:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8003cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cdc:	2b13      	cmp	r3, #19
 8003cde:	ddc8      	ble.n	8003c72 <getADCValues+0x15a>
		if((adcChannelCounter == Adc.adc0) || (adcChannelCounter == Adc.adc1) || (adcChannelCounter == Adc.spareSpiADC) || (adcChannelCounter == Adc.spareUartADC)){
 8003ce0:	e09b      	b.n	8003e1a <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the third ADC bank
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <getADCValues+0x284>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d018      	beq.n	8003d1e <getADCValues+0x206>
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <getADCValues+0x284>)
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d013      	beq.n	8003d1e <getADCValues+0x206>
 8003cf6:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <getADCValues+0x284>)
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d00e      	beq.n	8003d1e <getADCValues+0x206>
 8003d00:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <getADCValues+0x284>)
 8003d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d009      	beq.n	8003d1e <getADCValues+0x206>
 8003d0a:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <getADCValues+0x284>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d004      	beq.n	8003d1e <getADCValues+0x206>
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <getADCValues+0x284>)
 8003d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d13a      	bne.n	8003d94 <getADCValues+0x27c>
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003d1e:	2300      	movs	r3, #0
 8003d20:	673b      	str	r3, [r7, #112]	; 0x70
 8003d22:	e033      	b.n	8003d8c <getADCValues+0x274>
				int shiftedIndex = adcIndex + (adc3DataRepeat*avgCounter);
 8003d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d2e:	4413      	add	r3, r2
 8003d30:	65bb      	str	r3, [r7, #88]	; 0x58
				avgADCCounterValues[adcChannelCounter]+=adc3_buf[shiftedIndex];
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d40:	4919      	ldr	r1, [pc, #100]	; (8003da8 <getADCValues+0x290>)
 8003d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d44:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003d48:	441a      	add	r2, r3
 8003d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003d52:	440b      	add	r3, r1
 8003d54:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5a:	2b13      	cmp	r3, #19
 8003d5c:	d113      	bne.n	8003d86 <getADCValues+0x26e>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d66:	4413      	add	r3, r2
 8003d68:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003d6c:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <getADCValues+0x28c>)
 8003d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d72:	10d2      	asrs	r2, r2, #3
 8003d74:	17db      	asrs	r3, r3, #31
 8003d76:	1ad2      	subs	r2, r2, r3
 8003d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003d80:	440b      	add	r3, r1
 8003d82:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d88:	3301      	adds	r3, #1
 8003d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d8e:	2b13      	cmp	r3, #19
 8003d90:	ddc8      	ble.n	8003d24 <getADCValues+0x20c>
		else if((adcChannelCounter == Adc.adc2) || (adcChannelCounter == Adc.adc14) || (adcChannelCounter == Adc.adc15) || (adcChannelCounter == Adc.configADC) || (adcChannelCounter == Adc.zionADC) || (adcChannelCounter == Adc.spareI2cADC)){
 8003d92:	e042      	b.n	8003e1a <getADCValues+0x302>
				}
			}
		}
		//for the channels that belong to the first ADC bank
		else{
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003d94:	2300      	movs	r3, #0
 8003d96:	673b      	str	r3, [r7, #112]	; 0x70
 8003d98:	e03c      	b.n	8003e14 <getADCValues+0x2fc>
 8003d9a:	bf00      	nop
 8003d9c:	2000007c 	.word	0x2000007c
 8003da0:	2002e908 	.word	0x2002e908
 8003da4:	66666667 	.word	0x66666667
 8003da8:	2002c160 	.word	0x2002c160
				int shiftedIndex = adcIndex + (adc1DataRepeat*avgCounter);
 8003dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003db6:	4413      	add	r3, r2
 8003db8:	65fb      	str	r3, [r7, #92]	; 0x5c
				avgADCCounterValues[adcChannelCounter]+=adc1_buf[shiftedIndex];
 8003dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003dc8:	49c9      	ldr	r1, [pc, #804]	; (80040f0 <getADCValues+0x5d8>)
 8003dca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dcc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003dda:	440b      	add	r3, r1
 8003ddc:	f843 2c78 	str.w	r2, [r3, #-120]
				if (avgCounter == (ADC_AVG_COUNT-1)){
 8003de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de2:	2b13      	cmp	r3, #19
 8003de4:	d113      	bne.n	8003e0e <getADCValues+0x2f6>
					avgADCCounterValues[adcChannelCounter] = avgADCCounterValues[adcChannelCounter]/ADC_AVG_COUNT;
 8003de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003dee:	4413      	add	r3, r2
 8003df0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003df4:	4abf      	ldr	r2, [pc, #764]	; (80040f4 <getADCValues+0x5dc>)
 8003df6:	fb82 1203 	smull	r1, r2, r2, r3
 8003dfa:	10d2      	asrs	r2, r2, #3
 8003dfc:	17db      	asrs	r3, r3, #31
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003e08:	440b      	add	r3, r1
 8003e0a:	f843 2c78 	str.w	r2, [r3, #-120]
			for(avgCounter=0;avgCounter<ADC_AVG_COUNT;avgCounter++){
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	3301      	adds	r3, #1
 8003e12:	673b      	str	r3, [r7, #112]	; 0x70
 8003e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e16:	2b13      	cmp	r3, #19
 8003e18:	ddc8      	ble.n	8003dac <getADCValues+0x294>
	for(adcChannelCounter=0;adcChannelCounter<21;adcChannelCounter++){
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	677b      	str	r3, [r7, #116]	; 0x74
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	2b14      	cmp	r3, #20
 8003e24:	f77f ae8a 	ble.w	8003b3c <getADCValues+0x24>
				}
			}
		}
	}
	//for adc inputs with names ADC#, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (3)
	adcValues[Adc.adc0] = (avgADCCounterValues[Adc.adc0] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e28:	4bb3      	ldr	r3, [pc, #716]	; (80040f8 <getADCValues+0x5e0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e32:	4413      	add	r3, r2
 8003e34:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e40:	4bad      	ldr	r3, [pc, #692]	; (80040f8 <getADCValues+0x5e0>)
 8003e42:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e4a:	4bab      	ldr	r3, [pc, #684]	; (80040f8 <getADCValues+0x5e0>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e56:	4ba8      	ldr	r3, [pc, #672]	; (80040f8 <getADCValues+0x5e0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5e:	4aa7      	ldr	r2, [pc, #668]	; (80040fc <getADCValues+0x5e4>)
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc1] = (avgADCCounterValues[Adc.adc1] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003e68:	4ba3      	ldr	r3, [pc, #652]	; (80040f8 <getADCValues+0x5e0>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e72:	4413      	add	r3, r2
 8003e74:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e80:	4b9d      	ldr	r3, [pc, #628]	; (80040f8 <getADCValues+0x5e0>)
 8003e82:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e8a:	4b9b      	ldr	r3, [pc, #620]	; (80040f8 <getADCValues+0x5e0>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e96:	4b98      	ldr	r3, [pc, #608]	; (80040f8 <getADCValues+0x5e0>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	4a97      	ldr	r2, [pc, #604]	; (80040fc <getADCValues+0x5e4>)
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc2] = (avgADCCounterValues[Adc.adc2] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ea8:	4b93      	ldr	r3, [pc, #588]	; (80040f8 <getADCValues+0x5e0>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003eb8:	ee07 3a90 	vmov	s15, r3
 8003ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec0:	4b8d      	ldr	r3, [pc, #564]	; (80040f8 <getADCValues+0x5e0>)
 8003ec2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <getADCValues+0x5e0>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <getADCValues+0x5e0>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	4a87      	ldr	r2, [pc, #540]	; (80040fc <getADCValues+0x5e4>)
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc3] = (avgADCCounterValues[Adc.adc3] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003ee8:	4b83      	ldr	r3, [pc, #524]	; (80040f8 <getADCValues+0x5e0>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f00:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <getADCValues+0x5e0>)
 8003f02:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f0a:	4b7b      	ldr	r3, [pc, #492]	; (80040f8 <getADCValues+0x5e0>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f16:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <getADCValues+0x5e0>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	4a77      	ldr	r2, [pc, #476]	; (80040fc <getADCValues+0x5e4>)
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc4] = (avgADCCounterValues[Adc.adc4] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f28:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <getADCValues+0x5e0>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f32:	4413      	add	r3, r2
 8003f34:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f40:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <getADCValues+0x5e0>)
 8003f42:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <getADCValues+0x5e0>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f56:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <getADCValues+0x5e0>)
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	4a67      	ldr	r2, [pc, #412]	; (80040fc <getADCValues+0x5e4>)
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc5] = (avgADCCounterValues[Adc.adc5] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003f68:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <getADCValues+0x5e0>)
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f72:	4413      	add	r3, r2
 8003f74:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f80:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <getADCValues+0x5e0>)
 8003f82:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <getADCValues+0x5e0>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <getADCValues+0x5e0>)
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	4a57      	ldr	r2, [pc, #348]	; (80040fc <getADCValues+0x5e4>)
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc6] = (avgADCCounterValues[Adc.adc6] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <getADCValues+0x5e0>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc0:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <getADCValues+0x5e0>)
 8003fc2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fca:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <getADCValues+0x5e0>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <getADCValues+0x5e0>)
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	4a47      	ldr	r2, [pc, #284]	; (80040fc <getADCValues+0x5e4>)
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc7] = (avgADCCounterValues[Adc.adc7] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8003fe8:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <getADCValues+0x5e0>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004000:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <getADCValues+0x5e0>)
 8004002:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400a:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <getADCValues+0x5e0>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004016:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <getADCValues+0x5e0>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	4a37      	ldr	r2, [pc, #220]	; (80040fc <getADCValues+0x5e4>)
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc8] = (avgADCCounterValues[Adc.adc8] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004028:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <getADCValues+0x5e0>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004032:	4413      	add	r3, r2
 8004034:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <getADCValues+0x5e0>)
 8004042:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <getADCValues+0x5e0>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <getADCValues+0x5e0>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	4a27      	ldr	r2, [pc, #156]	; (80040fc <getADCValues+0x5e4>)
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc9] = (avgADCCounterValues[Adc.adc9] * Adc.adcDivisor) * Adc.adcResistorDivider;
 8004068:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <getADCValues+0x5e0>)
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004072:	4413      	add	r3, r2
 8004074:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <getADCValues+0x5e0>)
 8004082:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <getADCValues+0x5e0>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004096:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <getADCValues+0x5e0>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <getADCValues+0x5e4>)
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc10] = (avgADCCounterValues[Adc.adc10] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <getADCValues+0x5e0>)
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80040b2:	4413      	add	r3, r2
 80040b4:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c0:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <getADCValues+0x5e0>)
 80040c2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80040c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <getADCValues+0x5e0>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <getADCValues+0x5e0>)
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <getADCValues+0x5e4>)
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc11] = (avgADCCounterValues[Adc.adc11] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <getADCValues+0x5e0>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	e007      	b.n	8004100 <getADCValues+0x5e8>
 80040f0:	200296b0 	.word	0x200296b0
 80040f4:	66666667 	.word	0x66666667
 80040f8:	2000007c 	.word	0x2000007c
 80040fc:	20003300 	.word	0x20003300
 8004100:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004104:	4413      	add	r3, r2
 8004106:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004112:	4b9c      	ldr	r3, [pc, #624]	; (8004384 <getADCValues+0x86c>)
 8004114:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800411c:	4b99      	ldr	r3, [pc, #612]	; (8004384 <getADCValues+0x86c>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004128:	4b96      	ldr	r3, [pc, #600]	; (8004384 <getADCValues+0x86c>)
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004130:	4a95      	ldr	r2, [pc, #596]	; (8004388 <getADCValues+0x870>)
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc12] = (avgADCCounterValues[Adc.adc12] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800413a:	4b92      	ldr	r3, [pc, #584]	; (8004384 <getADCValues+0x86c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004144:	4413      	add	r3, r2
 8004146:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004152:	4b8c      	ldr	r3, [pc, #560]	; (8004384 <getADCValues+0x86c>)
 8004154:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800415c:	4b89      	ldr	r3, [pc, #548]	; (8004384 <getADCValues+0x86c>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004168:	4b86      	ldr	r3, [pc, #536]	; (8004384 <getADCValues+0x86c>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004170:	4a85      	ldr	r2, [pc, #532]	; (8004388 <getADCValues+0x870>)
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc13] = (avgADCCounterValues[Adc.adc13] * Adc.adcDivisor) * Adc.adcResistorDivider;
 800417a:	4b82      	ldr	r3, [pc, #520]	; (8004384 <getADCValues+0x86c>)
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004184:	4413      	add	r3, r2
 8004186:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004192:	4b7c      	ldr	r3, [pc, #496]	; (8004384 <getADCValues+0x86c>)
 8004194:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800419c:	4b79      	ldr	r3, [pc, #484]	; (8004384 <getADCValues+0x86c>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a8:	4b76      	ldr	r3, [pc, #472]	; (8004384 <getADCValues+0x86c>)
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b0:	4a75      	ldr	r2, [pc, #468]	; (8004388 <getADCValues+0x870>)
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc14] = (avgADCCounterValues[Adc.adc14] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80041ba:	4b72      	ldr	r3, [pc, #456]	; (8004384 <getADCValues+0x86c>)
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041c4:	4413      	add	r3, r2
 80041c6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041d2:	4b6c      	ldr	r3, [pc, #432]	; (8004384 <getADCValues+0x86c>)
 80041d4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80041d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041dc:	4b69      	ldr	r3, [pc, #420]	; (8004384 <getADCValues+0x86c>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e8:	4b66      	ldr	r3, [pc, #408]	; (8004384 <getADCValues+0x86c>)
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f0:	4a65      	ldr	r2, [pc, #404]	; (8004388 <getADCValues+0x870>)
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.adc15] = (avgADCCounterValues[Adc.adc15] * Adc.adcDivisor) * Adc.adcResistorDivider;
 80041fa:	4b62      	ldr	r3, [pc, #392]	; (8004384 <getADCValues+0x86c>)
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004204:	4413      	add	r3, r2
 8004206:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004212:	4b5c      	ldr	r3, [pc, #368]	; (8004384 <getADCValues+0x86c>)
 8004214:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800421c:	4b59      	ldr	r3, [pc, #356]	; (8004384 <getADCValues+0x86c>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <getADCValues+0x86c>)
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004230:	4a55      	ldr	r2, [pc, #340]	; (8004388 <getADCValues+0x870>)
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	edc3 7a00 	vstr	s15, [r3]
	//for other adc inputs, true value is found by taking the average, multiplying it by the divisor(3.3/4096), and then multiplying by the resistor divider (2)
	adcValues[Adc.spareSpiADC] = (avgADCCounterValues[Adc.spareSpiADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800423a:	4b52      	ldr	r3, [pc, #328]	; (8004384 <getADCValues+0x86c>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004244:	4413      	add	r3, r2
 8004246:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004252:	4b4c      	ldr	r3, [pc, #304]	; (8004384 <getADCValues+0x86c>)
 8004254:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004258:	ee27 7a27 	vmul.f32	s14, s14, s15
 800425c:	4b49      	ldr	r3, [pc, #292]	; (8004384 <getADCValues+0x86c>)
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <getADCValues+0x86c>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004270:	4a45      	ldr	r2, [pc, #276]	; (8004388 <getADCValues+0x870>)
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareUartADC] = (avgADCCounterValues[Adc.spareUartADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800427a:	4b42      	ldr	r3, [pc, #264]	; (8004384 <getADCValues+0x86c>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004284:	4413      	add	r3, r2
 8004286:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004292:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <getADCValues+0x86c>)
 8004294:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800429c:	4b39      	ldr	r3, [pc, #228]	; (8004384 <getADCValues+0x86c>)
 800429e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <getADCValues+0x86c>)
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b0:	4a35      	ldr	r2, [pc, #212]	; (8004388 <getADCValues+0x870>)
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.configADC] = (avgADCCounterValues[Adc.configADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80042ba:	4b32      	ldr	r3, [pc, #200]	; (8004384 <getADCValues+0x86c>)
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80042c4:	4413      	add	r3, r2
 80042c6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <getADCValues+0x86c>)
 80042d4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80042d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <getADCValues+0x86c>)
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	ee07 3a90 	vmov	s15, r3
 80042e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e8:	4b26      	ldr	r3, [pc, #152]	; (8004384 <getADCValues+0x86c>)
 80042ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f0:	4a25      	ldr	r2, [pc, #148]	; (8004388 <getADCValues+0x870>)
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.zionADC] = (avgADCCounterValues[Adc.zionADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <getADCValues+0x86c>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004304:	4413      	add	r3, r2
 8004306:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <getADCValues+0x86c>)
 8004314:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <getADCValues+0x86c>)
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <getADCValues+0x86c>)
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004330:	4a15      	ldr	r2, [pc, #84]	; (8004388 <getADCValues+0x870>)
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	edc3 7a00 	vstr	s15, [r3]
	adcValues[Adc.spareI2cADC] = (avgADCCounterValues[Adc.spareI2cADC] * Adc.adcDivisor) * Adc.systemResistorDivider;
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <getADCValues+0x86c>)
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004344:	4413      	add	r3, r2
 8004346:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <getADCValues+0x86c>)
 8004354:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <getADCValues+0x86c>)
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <getADCValues+0x86c>)
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004370:	4a05      	ldr	r2, [pc, #20]	; (8004388 <getADCValues+0x870>)
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	edc3 7a00 	vstr	s15, [r3]
	return adcValues;
 800437a:	4b03      	ldr	r3, [pc, #12]	; (8004388 <getADCValues+0x870>)
}
 800437c:	4618      	mov	r0, r3
 800437e:	3778      	adds	r7, #120	; 0x78
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	2000007c 	.word	0x2000007c
 8004388:	20003300 	.word	0x20003300

0800438c <HAL_ADC_ConvCpltCallback>:
//// Called when first half of buffer is filled
//void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
//}
//
//// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <debugUartParser>:
	HAL_UART_Transmit(&SPARE_UART,(uint8_t *)uart_buf, uart_buf_len,100);
	//HAL_UART_Receive(&SPARE_UART,(uint8_t*)uart_receive_buf, sizeof(uart_receive_buf),1000);
	int x;
}

uint8_t debugUartParser(){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
	int x;
	uint8_t  key_uint8[4];
	uint8_t var_Seen[4];
	key_uint8[0] = (uint8_t)'G';
 80043a6:	2347      	movs	r3, #71	; 0x47
 80043a8:	723b      	strb	r3, [r7, #8]
	key_uint8[1] = (uint8_t)'I';
 80043aa:	2349      	movs	r3, #73	; 0x49
 80043ac:	727b      	strb	r3, [r7, #9]
	key_uint8[2] = (uint8_t)'V';
 80043ae:	2356      	movs	r3, #86	; 0x56
 80043b0:	72bb      	strb	r3, [r7, #10]
	key_uint8[3] = (uint8_t)'E';
 80043b2:	2345      	movs	r3, #69	; 0x45
 80043b4:	72fb      	strb	r3, [r7, #11]
	//memcpy(key_uint8,(const uint8_t*)key, 4);
	x=5;
 80043b6:	2305      	movs	r3, #5
 80043b8:	60fb      	str	r3, [r7, #12]

	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e039      	b.n	8004434 <debugUartParser+0x94>
		if(debug_Uart_RX_Buf[x]==key_uint8[0]){
 80043c0:	4a25      	ldr	r2, [pc, #148]	; (8004458 <debugUartParser+0xb8>)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	7a3b      	ldrb	r3, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d102      	bne.n	80043d4 <debugUartParser+0x34>
			var_Seen[0] = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	713b      	strb	r3, [r7, #4]
 80043d2:	e02c      	b.n	800442e <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[1] && var_Seen[0]){
 80043d4:	4a20      	ldr	r2, [pc, #128]	; (8004458 <debugUartParser+0xb8>)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	7a7b      	ldrb	r3, [r7, #9]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d105      	bne.n	80043ee <debugUartParser+0x4e>
 80043e2:	793b      	ldrb	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <debugUartParser+0x4e>
			var_Seen[1] = 1;
 80043e8:	2301      	movs	r3, #1
 80043ea:	717b      	strb	r3, [r7, #5]
 80043ec:	e01f      	b.n	800442e <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[2] && var_Seen[1]){
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <debugUartParser+0xb8>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	7abb      	ldrb	r3, [r7, #10]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d105      	bne.n	8004408 <debugUartParser+0x68>
 80043fc:	797b      	ldrb	r3, [r7, #5]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <debugUartParser+0x68>
			var_Seen[2] = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	71bb      	strb	r3, [r7, #6]
 8004406:	e012      	b.n	800442e <debugUartParser+0x8e>
		}
		else if(debug_Uart_RX_Buf[x]==key_uint8[3] && var_Seen[2]){
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <debugUartParser+0xb8>)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	7afb      	ldrb	r3, [r7, #11]
 8004412:	429a      	cmp	r2, r3
 8004414:	d105      	bne.n	8004422 <debugUartParser+0x82>
 8004416:	79bb      	ldrb	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <debugUartParser+0x82>
			var_Seen[3] = 1;
 800441c:	2301      	movs	r3, #1
 800441e:	71fb      	strb	r3, [r7, #7]
			break;
 8004420:	e00b      	b.n	800443a <debugUartParser+0x9a>
		}
		else{
			memset(var_Seen,0x00,sizeof(var_Seen));
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	2204      	movs	r2, #4
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f00f f80e 	bl	801344a <memset>
	for(x=0;x<sizeof(debug_Uart_RX_Buf);x++){
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2bc7      	cmp	r3, #199	; 0xc7
 8004438:	d9c2      	bls.n	80043c0 <debugUartParser+0x20>
		}
	}
	if(var_Seen[3]){
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <debugUartParser+0xae>
		memset(debug_Uart_RX_Buf,0x00,sizeof(debug_Uart_RX_Buf));
 8004440:	22c8      	movs	r2, #200	; 0xc8
 8004442:	2100      	movs	r1, #0
 8004444:	4804      	ldr	r0, [pc, #16]	; (8004458 <debugUartParser+0xb8>)
 8004446:	f00f f800 	bl	801344a <memset>
		return true;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <debugUartParser+0xb0>
	}
	else{
		return false;
 800444e:	2300      	movs	r3, #0
	}
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	2002c098 	.word	0x2002c098

0800445c <socUartParser>:

uint8_t * socUartParser(){
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
	int x;
	uint8_t  key_uint8[4];
	static uint8_t var_Seen[15];
	memset(var_Seen,0x00,sizeof(var_Seen));
 8004462:	220f      	movs	r2, #15
 8004464:	2100      	movs	r1, #0
 8004466:	4843      	ldr	r0, [pc, #268]	; (8004574 <socUartParser+0x118>)
 8004468:	f00e ffef 	bl	801344a <memset>
	static uint8_t failure[15];
	memset(failure, 0xff,sizeof(failure));
 800446c:	220f      	movs	r2, #15
 800446e:	21ff      	movs	r1, #255	; 0xff
 8004470:	4841      	ldr	r0, [pc, #260]	; (8004578 <socUartParser+0x11c>)
 8004472:	f00e ffea 	bl	801344a <memset>
	key_uint8[0] = (uint8_t)'F';
 8004476:	2346      	movs	r3, #70	; 0x46
 8004478:	713b      	strb	r3, [r7, #4]
	key_uint8[1] = (uint8_t)'F';
 800447a:	2346      	movs	r3, #70	; 0x46
 800447c:	717b      	strb	r3, [r7, #5]
	key_uint8[2] = (uint8_t)'U';
 800447e:	2355      	movs	r3, #85	; 0x55
 8004480:	71bb      	strb	r3, [r7, #6]
	key_uint8[3] = (uint8_t)':';
 8004482:	233a      	movs	r3, #58	; 0x3a
 8004484:	71fb      	strb	r3, [r7, #7]
	//memcpy(key_uint8,(const uint8_t*)key, 4);
	x=5;
 8004486:	2305      	movs	r3, #5
 8004488:	60fb      	str	r3, [r7, #12]
	int ffuBytes=4;
 800448a:	2304      	movs	r3, #4
 800448c:	60bb      	str	r3, [r7, #8]
	for(x=0;x<sizeof(soc_Uart_RX_Buf);x++){
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e057      	b.n	8004544 <socUartParser+0xe8>
		if(soc_Uart_RX_Buf[x]==key_uint8[0] && var_Seen[0]==0){
 8004494:	4a39      	ldr	r2, [pc, #228]	; (800457c <socUartParser+0x120>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	793b      	ldrb	r3, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d107      	bne.n	80044b2 <socUartParser+0x56>
 80044a2:	4b34      	ldr	r3, [pc, #208]	; (8004574 <socUartParser+0x118>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <socUartParser+0x56>
			var_Seen[0] = 1;
 80044aa:	4b32      	ldr	r3, [pc, #200]	; (8004574 <socUartParser+0x118>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e045      	b.n	800453e <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[1] && var_Seen[0]){
 80044b2:	4a32      	ldr	r2, [pc, #200]	; (800457c <socUartParser+0x120>)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	797b      	ldrb	r3, [r7, #5]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <socUartParser+0x74>
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <socUartParser+0x118>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <socUartParser+0x74>
			var_Seen[1] = 1;
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <socUartParser+0x118>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	705a      	strb	r2, [r3, #1]
 80044ce:	e036      	b.n	800453e <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[2] && var_Seen[1]){
 80044d0:	4a2a      	ldr	r2, [pc, #168]	; (800457c <socUartParser+0x120>)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	781a      	ldrb	r2, [r3, #0]
 80044d8:	79bb      	ldrb	r3, [r7, #6]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d107      	bne.n	80044ee <socUartParser+0x92>
 80044de:	4b25      	ldr	r3, [pc, #148]	; (8004574 <socUartParser+0x118>)
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <socUartParser+0x92>
			var_Seen[2] = 1;
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <socUartParser+0x118>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	709a      	strb	r2, [r3, #2]
 80044ec:	e027      	b.n	800453e <socUartParser+0xe2>
		}
		else if(soc_Uart_RX_Buf[x]==key_uint8[3] && var_Seen[2]){
 80044ee:	4a23      	ldr	r2, [pc, #140]	; (800457c <socUartParser+0x120>)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d107      	bne.n	800450c <socUartParser+0xb0>
 80044fc:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <socUartParser+0x118>)
 80044fe:	789b      	ldrb	r3, [r3, #2]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <socUartParser+0xb0>
			var_Seen[3] = 1;
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <socUartParser+0x118>)
 8004506:	2201      	movs	r2, #1
 8004508:	70da      	strb	r2, [r3, #3]
 800450a:	e018      	b.n	800453e <socUartParser+0xe2>
			//break;
		}
		else if(var_Seen[3]){
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <socUartParser+0x118>)
 800450e:	78db      	ldrb	r3, [r3, #3]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00f      	beq.n	8004534 <socUartParser+0xd8>
			if(ffuBytes<sizeof(var_Seen)){
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b0e      	cmp	r3, #14
 8004518:	d819      	bhi.n	800454e <socUartParser+0xf2>
				var_Seen[ffuBytes] = soc_Uart_RX_Buf[x];
 800451a:	4a18      	ldr	r2, [pc, #96]	; (800457c <socUartParser+0x120>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	7819      	ldrb	r1, [r3, #0]
 8004522:	4a14      	ldr	r2, [pc, #80]	; (8004574 <socUartParser+0x118>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4413      	add	r3, r2
 8004528:	460a      	mov	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]
				ffuBytes++;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3301      	adds	r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	e004      	b.n	800453e <socUartParser+0xe2>
			else{
				break;
			}
		}
		else{
			memset(var_Seen,0x00,sizeof(var_Seen));
 8004534:	220f      	movs	r2, #15
 8004536:	2100      	movs	r1, #0
 8004538:	480e      	ldr	r0, [pc, #56]	; (8004574 <socUartParser+0x118>)
 800453a:	f00e ff86 	bl	801344a <memset>
	for(x=0;x<sizeof(soc_Uart_RX_Buf);x++){
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3301      	adds	r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800454a:	d3a3      	bcc.n	8004494 <socUartParser+0x38>
 800454c:	e000      	b.n	8004550 <socUartParser+0xf4>
				break;
 800454e:	bf00      	nop
		}
	}
	if(var_Seen[3]){
 8004550:	4b08      	ldr	r3, [pc, #32]	; (8004574 <socUartParser+0x118>)
 8004552:	78db      	ldrb	r3, [r3, #3]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <socUartParser+0x10c>

		memset(soc_Uart_RX_Buf,0x00,sizeof(soc_Uart_RX_Buf));
 8004558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800455c:	2100      	movs	r1, #0
 800455e:	4807      	ldr	r0, [pc, #28]	; (800457c <socUartParser+0x120>)
 8004560:	f00e ff73 	bl	801344a <memset>
		return var_Seen;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <socUartParser+0x118>)
 8004566:	e000      	b.n	800456a <socUartParser+0x10e>
	}
	else{
		return failure;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <socUartParser+0x11c>)
	}
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20003354 	.word	0x20003354
 8004578:	20003364 	.word	0x20003364
 800457c:	200292c8 	.word	0x200292c8

08004580 <startHeartbeat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startHeartbeat */
void startHeartbeat(void *argument)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 8004588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800458c:	4803      	ldr	r0, [pc, #12]	; (800459c <startHeartbeat+0x1c>)
 800458e:	f006 fed8 	bl	800b342 <HAL_GPIO_TogglePin>
	  //spareUartTransmitRead("YOYOYO!\r\n");
	  osDelay(500);
 8004592:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004596:	f00b ff9d 	bl	80104d4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOI,MCU_HEARTBEAT_Pin);
 800459a:	e7f5      	b.n	8004588 <startHeartbeat+0x8>
 800459c:	40022000 	.word	0x40022000

080045a0 <startADCRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startADCRead */
void startADCRead(void *argument)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startADCRead */
  HAL_StatusTypeDef Status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  // Clear HAL fault LED
	  errorLED.fault9 = false;
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <startADCRead+0xb0>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	731a      	strb	r2, [r3, #12]
	  //empty out the data ready variables and the adc3_bufs
	memset(adcRestart,0,sizeof(adcRestart));
 80045b2:	2203      	movs	r2, #3
 80045b4:	2100      	movs	r1, #0
 80045b6:	4827      	ldr	r0, [pc, #156]	; (8004654 <startADCRead+0xb4>)
 80045b8:	f00e ff47 	bl	801344a <memset>
	memset(adc1_buf, 0, sizeof(adc1_buf));
 80045bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80045c0:	2100      	movs	r1, #0
 80045c2:	4825      	ldr	r0, [pc, #148]	; (8004658 <startADCRead+0xb8>)
 80045c4:	f00e ff41 	bl	801344a <memset>
	memset(adc2_buf, 0, sizeof(adc2_buf));
 80045c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80045cc:	2100      	movs	r1, #0
 80045ce:	4823      	ldr	r0, [pc, #140]	; (800465c <startADCRead+0xbc>)
 80045d0:	f00e ff3b 	bl	801344a <memset>
	memset(adc3_buf, 0, sizeof(adc3_buf));
 80045d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80045d8:	2100      	movs	r1, #0
 80045da:	4821      	ldr	r0, [pc, #132]	; (8004660 <startADCRead+0xc0>)
 80045dc:	f00e ff35 	bl	801344a <memset>
	//restart the DMAs.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC_BUF_LEN);
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	491c      	ldr	r1, [pc, #112]	; (8004658 <startADCRead+0xb8>)
 80045e6:	481f      	ldr	r0, [pc, #124]	; (8004664 <startADCRead+0xc4>)
 80045e8:	f005 fbc0 	bl	8009d6c <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <startADCRead+0x62>
	{
		DevUI_Error_Handler("ADC1 Failed read.", Status, 0, 0, true);
 80045f2:	7bf9      	ldrb	r1, [r7, #15]
 80045f4:	2301      	movs	r3, #1
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	2200      	movs	r2, #0
 80045fc:	481a      	ldr	r0, [pc, #104]	; (8004668 <startADCRead+0xc8>)
 80045fe:	f7fe fd81 	bl	8003104 <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC_BUF_LEN);
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4915      	ldr	r1, [pc, #84]	; (800465c <startADCRead+0xbc>)
 8004608:	4818      	ldr	r0, [pc, #96]	; (800466c <startADCRead+0xcc>)
 800460a:	f005 fbaf 	bl	8009d6c <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <startADCRead+0x84>
	{
		DevUI_Error_Handler("ADC2 Failed read.", Status, 0, 0, true);
 8004614:	7bf9      	ldrb	r1, [r7, #15]
 8004616:	2301      	movs	r3, #1
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2300      	movs	r3, #0
 800461c:	2200      	movs	r2, #0
 800461e:	4814      	ldr	r0, [pc, #80]	; (8004670 <startADCRead+0xd0>)
 8004620:	f7fe fd70 	bl	8003104 <DevUI_Error_Handler>
	}
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC_BUF_LEN);
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	490d      	ldr	r1, [pc, #52]	; (8004660 <startADCRead+0xc0>)
 800462a:	4812      	ldr	r0, [pc, #72]	; (8004674 <startADCRead+0xd4>)
 800462c:	f005 fb9e 	bl	8009d6c <HAL_ADC_Start_DMA>
	if (Status != HAL_OK)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <startADCRead+0xa6>
	{
		DevUI_Error_Handler("ADC3 Failed read.", Status, 0, 0, true);
 8004636:	7bf9      	ldrb	r1, [r7, #15]
 8004638:	2301      	movs	r3, #1
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	2200      	movs	r2, #0
 8004640:	480d      	ldr	r0, [pc, #52]	; (8004678 <startADCRead+0xd8>)
 8004642:	f7fe fd5f 	bl	8003104 <DevUI_Error_Handler>
	}
    osDelay(600);
 8004646:	f44f 7016 	mov.w	r0, #600	; 0x258
 800464a:	f00b ff43 	bl	80104d4 <osDelay>
	  errorLED.fault9 = false;
 800464e:	e7ad      	b.n	80045ac <startADCRead+0xc>
 8004650:	200032d8 	.word	0x200032d8
 8004654:	20029284 	.word	0x20029284
 8004658:	200296b0 	.word	0x200296b0
 800465c:	2002e908 	.word	0x2002e908
 8004660:	2002c160 	.word	0x2002c160
 8004664:	2002be44 	.word	0x2002be44
 8004668:	08017958 	.word	0x08017958
 800466c:	20028d40 	.word	0x20028d40
 8004670:	0801796c 	.word	0x0801796c
 8004674:	2002bef0 	.word	0x2002bef0
 8004678:	08017980 	.word	0x08017980

0800467c <GetDaScreenBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetDaScreenBlink */
void GetDaScreenBlink(void *argument)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDaScreenBlink */
  /* Infinite loop */
//	 int x = 0;
//	 float *adcValues;
//	 HAL_StatusTypeDef ret;
	 initializeDisplay();
 8004684:	f000 ff3a 	bl	80054fc <initializeDisplay>
	 uint32_t ulNotifiedValue;
	 uint8_t button_val = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
	 uint8_t menu_val = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	73bb      	strb	r3, [r7, #14]
	 uint8_t running_menu = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	737b      	strb	r3, [r7, #13]
//	 int *readI2c;
//	 int zionCleared=0;
	   for(;;)
	   {
	 	  ulNotifiedValue = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	60bb      	str	r3, [r7, #8]
	 	  xTaskNotifyWait(NOTIFY_NOCLEAR, NOTIFY_CLEARALL, &ulNotifiedValue, portMAX_DELAY);
 8004698:	f107 0208 	add.w	r2, r7, #8
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	21ff      	movs	r1, #255	; 0xff
 80046a2:	2000      	movs	r0, #0
 80046a4:	f00d fdb6 	bl	8012214 <xTaskNotifyWait>
	 	  // button press decode
	 	  button_val = (ulNotifiedValue & NOTIFY_BTN_MASK);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	73fb      	strb	r3, [r7, #15]
	 	  menu_val = ((ulNotifiedValue & NOTIFY_MENU_MASK) >> NOTIFY_MENU_BIT);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	73bb      	strb	r3, [r7, #14]
	 	  running_menu = ((ulNotifiedValue & NOTIFY_RUN_MENU_MASK) >> NOTIFY_MENU_RUN_BIT);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	737b      	strb	r3, [r7, #13]
	 //	  printf("highlighed menu: %d\n\r", menu_val);
	 //	  printf("button_press: %d\r\n", button_val);

	 	  // If the BACK button was pressed, just run the SEL button case with the previous menu

		  switch(running_menu)
 80046ca:	7b7b      	ldrb	r3, [r7, #13]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d820      	bhi.n	8004714 <GetDaScreenBlink+0x98>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <GetDaScreenBlink+0x5c>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046f7 	.word	0x080046f7
 80046dc:	080046e9 	.word	0x080046e9
 80046e0:	08004701 	.word	0x08004701
 80046e4:	0800470b 	.word	0x0800470b
		  {
		  case BOOT_MENU:
		  {
			  //printf("BOOT_MENU\r\n");
			  drawBootMenu(menu_val, button_val, running_menu);
 80046e8:	7bbb      	ldrb	r3, [r7, #14]
 80046ea:	7b7a      	ldrb	r2, [r7, #13]
 80046ec:	7bf9      	ldrb	r1, [r7, #15]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f003 f82e 	bl	8007750 <drawBootMenu>
			  //uartTransmitChar("switch BOOT_MENU\r\n",7);
			  break;
 80046f4:	e00e      	b.n	8004714 <GetDaScreenBlink+0x98>
		  }
		  case MAIN_MENU:
		  {
			  //printf("MAIN_MENU\r\n");
			  drawMainMenu(menu_val);
 80046f6:	7bbb      	ldrb	r3, [r7, #14]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 ff39 	bl	8005570 <drawMainMenu>
			  //uartTransmitChar("switch MAIN_MENU\r\n",7);
			  break;
 80046fe:	e009      	b.n	8004714 <GetDaScreenBlink+0x98>
		  }
		  case STATUS_MENU:
		  {
			  //printf("STATUS_MENU\r\n");
			  drawStatusMenu(menu_val);
 8004700:	7bbb      	ldrb	r3, [r7, #14]
 8004702:	4618      	mov	r0, r3
 8004704:	f001 fa36 	bl	8005b74 <drawStatusMenu>
			  //uartTransmitChar("switch STATUS_MENU\r\n",7);
			  break;
 8004708:	e004      	b.n	8004714 <GetDaScreenBlink+0x98>
		  }
		  case SYSTEM_INFO_MENU:
		  {
			  //printf("SYSTEM INFO MENU\r\n");
			  //uartTransmitChar("switch SYSTEM INFO_MENU\r\n",7);
			  drawSystemInfoMenu(menu_val);
 800470a:	7bbb      	ldrb	r3, [r7, #14]
 800470c:	4618      	mov	r0, r3
 800470e:	f002 fbcf 	bl	8006eb0 <drawSystemInfoMenu>
			  break;
 8004712:	bf00      	nop
		  }
		  }
	 	  osDelay(100);
 8004714:	2064      	movs	r0, #100	; 0x64
 8004716:	f00b fedd 	bl	80104d4 <osDelay>
	 	  ulNotifiedValue = 0;
 800471a:	e7bb      	b.n	8004694 <GetDaScreenBlink+0x18>

0800471c <startGpioInputRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGpioInputRead */
void startGpioInputRead(void *argument)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGpioInputRead */
  /* Infinite loop */
  for(;;)
  {
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 8004724:	4b42      	ldr	r3, [pc, #264]	; (8004830 <startGpioInputRead+0x114>)
 8004726:	681c      	ldr	r4, [r3, #0]
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	4842      	ldr	r0, [pc, #264]	; (8004834 <startGpioInputRead+0x118>)
 800472c:	f006 fdd8 	bl	800b2e0 <HAL_GPIO_ReadPin>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	4b40      	ldr	r3, [pc, #256]	; (8004838 <startGpioInputRead+0x11c>)
 8004736:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input1] = HAL_GPIO_ReadPin(UI_INPUT1_GPIO_Port,UI_INPUT1_Pin);
 8004738:	4b3d      	ldr	r3, [pc, #244]	; (8004830 <startGpioInputRead+0x114>)
 800473a:	685c      	ldr	r4, [r3, #4]
 800473c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004740:	483e      	ldr	r0, [pc, #248]	; (800483c <startGpioInputRead+0x120>)
 8004742:	f006 fdcd 	bl	800b2e0 <HAL_GPIO_ReadPin>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <startGpioInputRead+0x11c>)
 800474c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input2] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT2_Pin);
 800474e:	4b38      	ldr	r3, [pc, #224]	; (8004830 <startGpioInputRead+0x114>)
 8004750:	689c      	ldr	r4, [r3, #8]
 8004752:	2110      	movs	r1, #16
 8004754:	483a      	ldr	r0, [pc, #232]	; (8004840 <startGpioInputRead+0x124>)
 8004756:	f006 fdc3 	bl	800b2e0 <HAL_GPIO_ReadPin>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <startGpioInputRead+0x11c>)
 8004760:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input3] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT3_Pin);
 8004762:	4b33      	ldr	r3, [pc, #204]	; (8004830 <startGpioInputRead+0x114>)
 8004764:	68dc      	ldr	r4, [r3, #12]
 8004766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800476a:	4835      	ldr	r0, [pc, #212]	; (8004840 <startGpioInputRead+0x124>)
 800476c:	f006 fdb8 	bl	800b2e0 <HAL_GPIO_ReadPin>
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	4b30      	ldr	r3, [pc, #192]	; (8004838 <startGpioInputRead+0x11c>)
 8004776:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input4] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT4_Pin);
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <startGpioInputRead+0x114>)
 800477a:	691c      	ldr	r4, [r3, #16]
 800477c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004780:	482f      	ldr	r0, [pc, #188]	; (8004840 <startGpioInputRead+0x124>)
 8004782:	f006 fdad 	bl	800b2e0 <HAL_GPIO_ReadPin>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <startGpioInputRead+0x11c>)
 800478c:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input5] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT5_Pin);
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <startGpioInputRead+0x114>)
 8004790:	695c      	ldr	r4, [r3, #20]
 8004792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004796:	482a      	ldr	r0, [pc, #168]	; (8004840 <startGpioInputRead+0x124>)
 8004798:	f006 fda2 	bl	800b2e0 <HAL_GPIO_ReadPin>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	4b25      	ldr	r3, [pc, #148]	; (8004838 <startGpioInputRead+0x11c>)
 80047a2:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input6] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT6_Pin);
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <startGpioInputRead+0x114>)
 80047a6:	699c      	ldr	r4, [r3, #24]
 80047a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047ac:	4824      	ldr	r0, [pc, #144]	; (8004840 <startGpioInputRead+0x124>)
 80047ae:	f006 fd97 	bl	800b2e0 <HAL_GPIO_ReadPin>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b20      	ldr	r3, [pc, #128]	; (8004838 <startGpioInputRead+0x11c>)
 80047b8:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input7] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT7_Pin);
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <startGpioInputRead+0x114>)
 80047bc:	69dc      	ldr	r4, [r3, #28]
 80047be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047c2:	481f      	ldr	r0, [pc, #124]	; (8004840 <startGpioInputRead+0x124>)
 80047c4:	f006 fd8c 	bl	800b2e0 <HAL_GPIO_ReadPin>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <startGpioInputRead+0x11c>)
 80047ce:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input8] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT8_Pin);
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <startGpioInputRead+0x114>)
 80047d2:	6a1c      	ldr	r4, [r3, #32]
 80047d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047d8:	4819      	ldr	r0, [pc, #100]	; (8004840 <startGpioInputRead+0x124>)
 80047da:	f006 fd81 	bl	800b2e0 <HAL_GPIO_ReadPin>
 80047de:	4603      	mov	r3, r0
 80047e0:	461a      	mov	r2, r3
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <startGpioInputRead+0x11c>)
 80047e4:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input9] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT9_Pin);
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <startGpioInputRead+0x114>)
 80047e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80047ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047ee:	4814      	ldr	r0, [pc, #80]	; (8004840 <startGpioInputRead+0x124>)
 80047f0:	f006 fd76 	bl	800b2e0 <HAL_GPIO_ReadPin>
 80047f4:	4603      	mov	r3, r0
 80047f6:	461a      	mov	r2, r3
 80047f8:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <startGpioInputRead+0x11c>)
 80047fa:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input10] = HAL_GPIO_ReadPin(GPIOD,UI_INPUT10_Pin);
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <startGpioInputRead+0x114>)
 80047fe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004804:	480e      	ldr	r0, [pc, #56]	; (8004840 <startGpioInputRead+0x124>)
 8004806:	f006 fd6b 	bl	800b2e0 <HAL_GPIO_ReadPin>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <startGpioInputRead+0x11c>)
 8004810:	551a      	strb	r2, [r3, r4]
	  gpioInputBuf[inputGPIOs.input11] = HAL_GPIO_ReadPin(UI_INPUT11_GPIO_Port,UI_INPUT11_Pin);
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <startGpioInputRead+0x114>)
 8004814:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004816:	2108      	movs	r1, #8
 8004818:	480a      	ldr	r0, [pc, #40]	; (8004844 <startGpioInputRead+0x128>)
 800481a:	f006 fd61 	bl	800b2e0 <HAL_GPIO_ReadPin>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <startGpioInputRead+0x11c>)
 8004824:	551a      	strb	r2, [r3, r4]
	  osDelay(950);
 8004826:	f240 30b6 	movw	r0, #950	; 0x3b6
 800482a:	f00b fe53 	bl	80104d4 <osDelay>
	  gpioInputBuf[inputGPIOs.input0] = HAL_GPIO_ReadPin(UI_INPUT0_GPIO_Port,UI_INPUT0_Pin);
 800482e:	e779      	b.n	8004724 <startGpioInputRead+0x8>
 8004830:	20000014 	.word	0x20000014
 8004834:	40020400 	.word	0x40020400
 8004838:	20028d34 	.word	0x20028d34
 800483c:	40020800 	.word	0x40020800
 8004840:	40020c00 	.word	0x40020c00
 8004844:	40021000 	.word	0x40021000

08004848 <startNavigationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNavigationTask */
void startNavigationTask(void *argument)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNavigationTask */
	uint8_t menu_highlight = MENU_TOP;	// variable indicates what menu item is currently being highlighted
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
	uint8_t	menu_run = MAIN_MENU;		// variable to track what menu is currently running
 8004854:	2301      	movs	r3, #1
 8004856:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_menu = menu_run;		// variable to track what the previous menu running was, this is used for the BACK button
 8004858:	7bbb      	ldrb	r3, [r7, #14]
 800485a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 800485c:	2303      	movs	r3, #3
 800485e:	733b      	strb	r3, [r7, #12]
	uint8_t prev_menu_highlight = menu_highlight; //variable to track previous menu highlight
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	72fb      	strb	r3, [r7, #11]
	// Clear button flags here

  /* Infinite loop */
  for(;;)
  {
	switch(inputButtonSet)
 8004864:	4b55      	ldr	r3, [pc, #340]	; (80049bc <startNavigationTask+0x174>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	3b01      	subs	r3, #1
 800486a:	2b03      	cmp	r3, #3
 800486c:	d86f      	bhi.n	800494e <startNavigationTask+0x106>
 800486e:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <startNavigationTask+0x2c>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	08004885 	.word	0x08004885
 8004878:	080048b7 	.word	0x080048b7
 800487c:	080048eb 	.word	0x080048eb
 8004880:	08004919 	.word	0x08004919
	{
	case UP:
	{
		if ((menu_highlight == MENU_TOP) || bootButtons.bootModeSet)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d070      	beq.n	800496c <startNavigationTask+0x124>
 800488a:	4b4d      	ldr	r3, [pc, #308]	; (80049c0 <startNavigationTask+0x178>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d16c      	bne.n	800496c <startNavigationTask+0x124>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight - 1;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	3b01      	subs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
			// task notify the display task with UP and current highlighted item
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu indicator highlight flags
			// [8:11]: currently running menu flags
			xTaskNotify(DatScreenBlinkHandle, (UP | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004898:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <startNavigationTask+0x17c>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	4313      	orrs	r3, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	2204      	movs	r2, #4
 80048b0:	f00d fd0a 	bl	80122c8 <xTaskGenericNotify>
		}
		break;
 80048b4:	e05a      	b.n	800496c <startNavigationTask+0x124>
	}
	case DWN:
	{
		if ((menu_highlight >= menu_Max_Items) || (bootButtons.bootModeSet))
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	7b3b      	ldrb	r3, [r7, #12]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d258      	bcs.n	8004970 <startNavigationTask+0x128>
 80048be:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <startNavigationTask+0x178>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d154      	bne.n	8004970 <startNavigationTask+0x128>
		{
			//do nothing
		}
		else
		{
			menu_highlight = menu_highlight + 1;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	3301      	adds	r3, #1
 80048ca:	73fb      	strb	r3, [r7, #15]
			// task notification U32 bits defined as:
			// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
			// [4:7]: menu selection flags
			// [8:11]: currently running menu flags
			// [12:15]: previously running menu flags
			xTaskNotify(DatScreenBlinkHandle, (DWN | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80048cc:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <startNavigationTask+0x17c>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	f043 0202 	orr.w	r2, r3, #2
 80048d8:	7bbb      	ldrb	r3, [r7, #14]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	4313      	orrs	r3, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	2204      	movs	r2, #4
 80048e4:	f00d fcf0 	bl	80122c8 <xTaskGenericNotify>
		}
		break;
 80048e8:	e042      	b.n	8004970 <startNavigationTask+0x128>
	}
	case BACK:
	{
		if(!(bootButtons.bootModeSet)){
 80048ea:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <startNavigationTask+0x178>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <startNavigationTask+0xb2>
			menu_run = prev_menu;
 80048f2:	7b7b      	ldrb	r3, [r7, #13]
 80048f4:	73bb      	strb	r3, [r7, #14]
			menu_highlight = prev_menu_highlight; //set the highlight back to where it was for the previous menu.
 80048f6:	7afb      	ldrb	r3, [r7, #11]
 80048f8:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (BACK | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 80048fa:	4b32      	ldr	r3, [pc, #200]	; (80049c4 <startNavigationTask+0x17c>)
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	f043 0203 	orr.w	r2, r3, #3
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	4313      	orrs	r3, r2
 800490c:	4619      	mov	r1, r3
 800490e:	2300      	movs	r3, #0
 8004910:	2204      	movs	r2, #4
 8004912:	f00d fcd9 	bl	80122c8 <xTaskGenericNotify>
		break;
 8004916:	e02c      	b.n	8004972 <startNavigationTask+0x12a>
	}
	case SEL:
	{
		if(menu_run==MAIN_MENU){
 8004918:	7bbb      	ldrb	r3, [r7, #14]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d108      	bne.n	8004930 <startNavigationTask+0xe8>
			prev_menu = menu_run;		// save currently running menu for BACK button
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	737b      	strb	r3, [r7, #13]
			menu_run = menu_highlight+1;	// update the currently running menu to what the user SELECTED. Requires +1 to match with menu values
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	3301      	adds	r3, #1
 8004926:	73bb      	strb	r3, [r7, #14]
			prev_menu_highlight = menu_highlight; //keep track of the previous menu's highlight for when back is pressed
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	72fb      	strb	r3, [r7, #11]
			menu_highlight=MENU_TOP; //reset the menu highlight for the next menu
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
		// task notification U32 bits defined as:
		// [0:3]: menu button flags [0]:UP, [1]:DWN, [2]:SEL, [3]:Reserved
		// [4:7]: menu selection flags
		// [8:11]: currently running menu flags
		// [12:15]: previously running menu flags
		xTaskNotify(DatScreenBlinkHandle, (SEL | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 8004930:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <startNavigationTask+0x17c>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	f043 0204 	orr.w	r2, r3, #4
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	4313      	orrs	r3, r2
 8004942:	4619      	mov	r1, r3
 8004944:	2300      	movs	r3, #0
 8004946:	2204      	movs	r2, #4
 8004948:	f00d fcbe 	bl	80122c8 <xTaskGenericNotify>
		break;
 800494c:	e011      	b.n	8004972 <startNavigationTask+0x12a>
	}
	default:
		// task notify the display task with no button press.  Just refresh the current running menu.
		xTaskNotify(DatScreenBlinkHandle, (NO_BTN_PRESS | (menu_highlight << NOTIFY_MENU_BIT) | (menu_run << NOTIFY_MENU_RUN_BIT)), eSetValueWithoutOverwrite);
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <startNavigationTask+0x17c>)
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	f043 0205 	orr.w	r2, r3, #5
 800495a:	7bbb      	ldrb	r3, [r7, #14]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	4313      	orrs	r3, r2
 8004960:	4619      	mov	r1, r3
 8004962:	2300      	movs	r3, #0
 8004964:	2204      	movs	r2, #4
 8004966:	f00d fcaf 	bl	80122c8 <xTaskGenericNotify>
		break;
 800496a:	e002      	b.n	8004972 <startNavigationTask+0x12a>
		break;
 800496c:	bf00      	nop
 800496e:	e000      	b.n	8004972 <startNavigationTask+0x12a>
		break;
 8004970:	bf00      	nop
	}
	//initialize the max indicator for each menu
	switch(menu_run){
 8004972:	7bbb      	ldrb	r3, [r7, #14]
 8004974:	3b01      	subs	r3, #1
 8004976:	2b03      	cmp	r3, #3
 8004978:	d816      	bhi.n	80049a8 <startNavigationTask+0x160>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <startNavigationTask+0x138>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	08004997 	.word	0x08004997
 8004984:	08004991 	.word	0x08004991
 8004988:	0800499d 	.word	0x0800499d
 800498c:	080049a3 	.word	0x080049a3

	case BOOT_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 8004990:	2305      	movs	r3, #5
 8004992:	733b      	strb	r3, [r7, #12]
		break;
 8004994:	e00b      	b.n	80049ae <startNavigationTask+0x166>
	}
	case MAIN_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_MAIN_MENU;
 8004996:	2303      	movs	r3, #3
 8004998:	733b      	strb	r3, [r7, #12]
		break;
 800499a:	e008      	b.n	80049ae <startNavigationTask+0x166>
	}
	case STATUS_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_STATUS_MENU;
 800499c:	2303      	movs	r3, #3
 800499e:	733b      	strb	r3, [r7, #12]
		break;
 80049a0:	e005      	b.n	80049ae <startNavigationTask+0x166>
	}
	case SYSTEM_INFO_MENU:{
		menu_Max_Items = MAX_MENU_ITEMS_SYSTEM_INFO_MENU;
 80049a2:	2302      	movs	r3, #2
 80049a4:	733b      	strb	r3, [r7, #12]
		break;
 80049a6:	e002      	b.n	80049ae <startNavigationTask+0x166>
	}
	default:
		menu_Max_Items = MAX_MENU_ITEMS_BOOT_MENU;
 80049a8:	2305      	movs	r3, #5
 80049aa:	733b      	strb	r3, [r7, #12]
		break;
 80049ac:	bf00      	nop
	}
	inputButtonSet = NO_BTN_PRESS;
 80049ae:	4b03      	ldr	r3, [pc, #12]	; (80049bc <startNavigationTask+0x174>)
 80049b0:	2205      	movs	r2, #5
 80049b2:	701a      	strb	r2, [r3, #0]
    osDelay(200);
 80049b4:	20c8      	movs	r0, #200	; 0xc8
 80049b6:	f00b fd8d 	bl	80104d4 <osDelay>
	switch(inputButtonSet)
 80049ba:	e753      	b.n	8004864 <startNavigationTask+0x1c>
 80049bc:	200000dc 	.word	0x200000dc
 80049c0:	200032ac 	.word	0x200032ac
 80049c4:	200310d8 	.word	0x200310d8

080049c8 <startErrorLEDs>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startErrorLEDs */
void startErrorLEDs(void *argument)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
	uint8_t G;
	uint8_t B;
	float * presentADCValues;
  for(;;)
  {
	  R = false;
 80049d0:	2300      	movs	r3, #0
 80049d2:	75fb      	strb	r3, [r7, #23]
	  G = false;
 80049d4:	2300      	movs	r3, #0
 80049d6:	75bb      	strb	r3, [r7, #22]
	  B = false;
 80049d8:	2300      	movs	r3, #0
 80049da:	757b      	strb	r3, [r7, #21]
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 80049dc:	4ba2      	ldr	r3, [pc, #648]	; (8004c68 <startErrorLEDs+0x2a0>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <startErrorLEDs+0x32>
 80049e4:	4ba0      	ldr	r3, [pc, #640]	; (8004c68 <startErrorLEDs+0x2a0>)
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <startErrorLEDs+0x32>
 80049ec:	4b9e      	ldr	r3, [pc, #632]	; (8004c68 <startErrorLEDs+0x2a0>)
 80049ee:	789b      	ldrb	r3, [r3, #2]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <startErrorLEDs+0x32>
		  presentADCValues = getADCValues();
 80049f4:	f7ff f890 	bl	8003b18 <getADCValues>
 80049f8:	6138      	str	r0, [r7, #16]
	  }
	  if(*(presentADCValues+Adc.adc0) > VSYS_FLT){
 80049fa:	4b9c      	ldr	r3, [pc, #624]	; (8004c6c <startErrorLEDs+0x2a4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4413      	add	r3, r2
 8004a04:	edd3 7a00 	vldr	s15, [r3]
 8004a08:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8004a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	dd03      	ble.n	8004a1e <startErrorLEDs+0x56>
		  errorLED.vsysPMIFault=false;
 8004a16:	4b96      	ldr	r3, [pc, #600]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	705a      	strb	r2, [r3, #1]
 8004a1c:	e002      	b.n	8004a24 <startErrorLEDs+0x5c>
	  }
	  else{
		  errorLED.vsysPMIFault=true;
 8004a1e:	4b94      	ldr	r3, [pc, #592]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	705a      	strb	r2, [r3, #1]
	  }
	  if((!ZION.SOC_EEPROM_Detected && ZION.zionFinished) || (ZION.SOC_BoardFab <0)){
 8004a24:	4b93      	ldr	r3, [pc, #588]	; (8004c74 <startErrorLEDs+0x2ac>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <startErrorLEDs+0x6c>
 8004a2c:	4b91      	ldr	r3, [pc, #580]	; (8004c74 <startErrorLEDs+0x2ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <startErrorLEDs+0x74>
 8004a34:	4b8f      	ldr	r3, [pc, #572]	; (8004c74 <startErrorLEDs+0x2ac>)
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	da03      	bge.n	8004a44 <startErrorLEDs+0x7c>
		  errorLED.zionFault=true;
 8004a3c:	4b8c      	ldr	r3, [pc, #560]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e002      	b.n	8004a4a <startErrorLEDs+0x82>
	  }
	  else{
		  errorLED.zionFault=false;
 8004a44:	4b8a      	ldr	r3, [pc, #552]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
	  }
	  i2cCheck=writeI2CRegister(LED.address, 0xf0, 0x00,1,LED.i2cBank);
 8004a4a:	4b8b      	ldr	r3, [pc, #556]	; (8004c78 <startErrorLEDs+0x2b0>)
 8004a4c:	7818      	ldrb	r0, [r3, #0]
 8004a4e:	4b8a      	ldr	r3, [pc, #552]	; (8004c78 <startErrorLEDs+0x2b0>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2301      	movs	r3, #1
 8004a56:	2200      	movs	r2, #0
 8004a58:	21f0      	movs	r1, #240	; 0xf0
 8004a5a:	f7fe fde9 	bl	8003630 <writeI2CRegister>
 8004a5e:	60f8      	str	r0, [r7, #12]

	  //only allow the error led write commands if the led driver responds.
	  if(i2cCheck == HAL_OK)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 80f8 	bne.w	8004c58 <startErrorLEDs+0x290>
	  {
		  errorLED.ledDriver=false;
 8004a68:	4b81      	ldr	r3, [pc, #516]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	735a      	strb	r2, [r3, #13]

		  switch(bootButtons.bootMode)
 8004a6e:	4b83      	ldr	r3, [pc, #524]	; (8004c7c <startErrorLEDs+0x2b4>)
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d86e      	bhi.n	8004b54 <startErrorLEDs+0x18c>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <startErrorLEDs+0xb4>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a95 	.word	0x08004a95
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ad1 	.word	0x08004ad1
 8004a88:	08004af3 	.word	0x08004af3
 8004a8c:	08004b33 	.word	0x08004b33
 8004a90:	08004b11 	.word	0x08004b11
		  {
			case UNINITIALIZED:
				errorLED.standard_boot=false;
 8004a94:	4b76      	ldr	r3, [pc, #472]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 8004a9a:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=false;
 8004aa0:	4b73      	ldr	r3, [pc, #460]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004aa6:	4b72      	ldr	r3, [pc, #456]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	71da      	strb	r2, [r3, #7]
				R = false;
 8004aac:	2300      	movs	r3, #0
 8004aae:	75fb      	strb	r3, [r7, #23]
				break;
 8004ab0:	e050      	b.n	8004b54 <startErrorLEDs+0x18c>
			case STANDARD:
				errorLED.standard_boot=true;
 8004ab2:	4b6f      	ldr	r3, [pc, #444]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 8004ab8:	4b6d      	ldr	r3, [pc, #436]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=false;
 8004abe:	4b6c      	ldr	r3, [pc, #432]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004ac4:	4b6a      	ldr	r3, [pc, #424]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	71da      	strb	r2, [r3, #7]
				G = true;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75bb      	strb	r3, [r7, #22]
				break;
 8004ace:	e041      	b.n	8004b54 <startErrorLEDs+0x18c>
			case UEFI:
				errorLED.standard_boot=false;
 8004ad0:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=true;
 8004ad6:	4b66      	ldr	r3, [pc, #408]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=false;
 8004adc:	4b64      	ldr	r3, [pc, #400]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004ae2:	4b63      	ldr	r3, [pc, #396]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	71da      	strb	r2, [r3, #7]
				G = true;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	75bb      	strb	r3, [r7, #22]
				B = true;
 8004aec:	2301      	movs	r3, #1
 8004aee:	757b      	strb	r3, [r7, #21]
				break;
 8004af0:	e030      	b.n	8004b54 <startErrorLEDs+0x18c>
			case EDL:
				errorLED.standard_boot=false;
 8004af2:	4b5f      	ldr	r3, [pc, #380]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 8004af8:	4b5d      	ldr	r3, [pc, #372]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=true;
 8004afe:	4b5c      	ldr	r3, [pc, #368]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004b04:	4b5a      	ldr	r3, [pc, #360]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	71da      	strb	r2, [r3, #7]
				B = true;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	757b      	strb	r3, [r7, #21]
				break;
 8004b0e:	e021      	b.n	8004b54 <startErrorLEDs+0x18c>
			case MASS_STORAGE:
				errorLED.standard_boot=true;
 8004b10:	4b57      	ldr	r3, [pc, #348]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=false;
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=true;
 8004b1c:	4b54      	ldr	r3, [pc, #336]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004b22:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	71da      	strb	r2, [r3, #7]
				R = true;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
				B = true;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	757b      	strb	r3, [r7, #21]
				break;
 8004b30:	e010      	b.n	8004b54 <startErrorLEDs+0x18c>
			case RECOVERY:
				errorLED.standard_boot=false;
 8004b32:	4b4f      	ldr	r3, [pc, #316]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	721a      	strb	r2, [r3, #8]
				errorLED.uefi_boot=true;
 8004b38:	4b4d      	ldr	r3, [pc, #308]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	725a      	strb	r2, [r3, #9]
				errorLED.edl_boot=true;
 8004b3e:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	729a      	strb	r2, [r3, #10]
				errorLED.boot_fault=false;
 8004b44:	4b4a      	ldr	r3, [pc, #296]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	71da      	strb	r2, [r3, #7]
				R = true;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
				G = true;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75bb      	strb	r3, [r7, #22]
				break;
 8004b52:	bf00      	nop
		  }
		  setRGBLED(R,G,B);
 8004b54:	7d7a      	ldrb	r2, [r7, #21]
 8004b56:	7db9      	ldrb	r1, [r7, #22]
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fe94 	bl	8003888 <setRGBLED>
		  setErrorLED(ZION_FAULT,errorLED.zionFault);
 8004b60:	4b43      	ldr	r3, [pc, #268]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	4619      	mov	r1, r3
 8004b70:	2000      	movs	r0, #0
 8004b72:	f7fe feb5 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004b76:	2014      	movs	r0, #20
 8004b78:	f00b fcac 	bl	80104d4 <osDelay>
		  setErrorLED(VSYSPMI_FAULT, errorLED.vsysPMIFault);
 8004b7c:	4b3c      	ldr	r3, [pc, #240]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f7fe fea7 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004b92:	2014      	movs	r0, #20
 8004b94:	f00b fc9e 	bl	80104d4 <osDelay>
		  setErrorLED(FAULT3,errorLED.fault3);
 8004b98:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004b9a:	789b      	ldrb	r3, [r3, #2]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	2002      	movs	r0, #2
 8004baa:	f7fe fe99 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004bae:	2014      	movs	r0, #20
 8004bb0:	f00b fc90 	bl	80104d4 <osDelay>
		  setErrorLED(FAULT4,errorLED.fault4);
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	2003      	movs	r0, #3
 8004bc6:	f7fe fe8b 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004bca:	2014      	movs	r0, #20
 8004bcc:	f00b fc82 	bl	80104d4 <osDelay>
		  setErrorLED(FAULT5,errorLED.fault5);
 8004bd0:	4b27      	ldr	r3, [pc, #156]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	4619      	mov	r1, r3
 8004be0:	2004      	movs	r0, #4
 8004be2:	f7fe fe7d 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004be6:	2014      	movs	r0, #20
 8004be8:	f00b fc74 	bl	80104d4 <osDelay>
		  setErrorLED(FAULT6,errorLED.fault6);
 8004bec:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004bee:	795b      	ldrb	r3, [r3, #5]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	2005      	movs	r0, #5
 8004bfe:	f7fe fe6f 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004c02:	2014      	movs	r0, #20
 8004c04:	f00b fc66 	bl	80104d4 <osDelay>
		  setErrorLED(FAULT7,errorLED.fault7);
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004c0a:	799b      	ldrb	r3, [r3, #6]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	2006      	movs	r0, #6
 8004c1a:	f7fe fe61 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004c1e:	2014      	movs	r0, #20
 8004c20:	f00b fc58 	bl	80104d4 <osDelay>
		  setErrorLED(FAULT8,errorLED.fault8);
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004c26:	7adb      	ldrb	r3, [r3, #11]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	4619      	mov	r1, r3
 8004c34:	200a      	movs	r0, #10
 8004c36:	f7fe fe53 	bl	80038e0 <setErrorLED>
		  osDelay(20);
 8004c3a:	2014      	movs	r0, #20
 8004c3c:	f00b fc4a 	bl	80104d4 <osDelay>
		  setErrorLED(FAULT9,errorLED.fault9);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004c42:	7b1b      	ldrb	r3, [r3, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	4619      	mov	r1, r3
 8004c50:	200b      	movs	r0, #11
 8004c52:	f7fe fe45 	bl	80038e0 <setErrorLED>
 8004c56:	e002      	b.n	8004c5e <startErrorLEDs+0x296>
	  }
	  else
		  errorLED.ledDriver = true;
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <startErrorLEDs+0x2a8>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	735a      	strb	r2, [r3, #13]

    osDelay(500);
 8004c5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c62:	f00b fc37 	bl	80104d4 <osDelay>
	  R = false;
 8004c66:	e6b3      	b.n	80049d0 <startErrorLEDs+0x8>
 8004c68:	20029284 	.word	0x20029284
 8004c6c:	2000007c 	.word	0x2000007c
 8004c70:	200032d8 	.word	0x200032d8
 8004c74:	20003274 	.word	0x20003274
 8004c78:	20000004 	.word	0x20000004
 8004c7c:	200032ac 	.word	0x200032ac

08004c80 <startZionRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startZionRead */
void startZionRead(void *argument)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startZionRead */
  /* Infinite loop */
	float * adcValuePointer;
	int * zionEEPROMPresent;
	int * zionHeaderData;
	int switchOn=0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
	float zionVoltage=77;
 8004c8c:	4b79      	ldr	r3, [pc, #484]	; (8004e74 <startZionRead+0x1f4>)
 8004c8e:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	  if(!ZION.zionFinished){
 8004c90:	4b79      	ldr	r3, [pc, #484]	; (8004e78 <startZionRead+0x1f8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 80e5 	bne.w	8004e64 <startZionRead+0x1e4>
		  if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8004c9a:	4b78      	ldr	r3, [pc, #480]	; (8004e7c <startZionRead+0x1fc>)
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	4b77      	ldr	r3, [pc, #476]	; (8004e7c <startZionRead+0x1fc>)
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	4b75      	ldr	r3, [pc, #468]	; (8004e7c <startZionRead+0x1fc>)
 8004ca8:	789b      	ldrb	r3, [r3, #2]
 8004caa:	4013      	ands	r3, r2
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <startZionRead+0x46>
			  adcValuePointer = getADCValues();
 8004cb2:	f7fe ff31 	bl	8003b18 <getADCValues>
 8004cb6:	6178      	str	r0, [r7, #20]
			  zionVoltage = *(adcValuePointer + Adc.zionADC);
 8004cb8:	4b71      	ldr	r3, [pc, #452]	; (8004e80 <startZionRead+0x200>)
 8004cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	61bb      	str	r3, [r7, #24]
		  }
		  if(zionVoltage != 77){
 8004cc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cca:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004e84 <startZionRead+0x204>
 8004cce:	eef4 7a47 	vcmp.f32	s15, s14
 8004cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd6:	f000 80c8 	beq.w	8004e6a <startZionRead+0x1ea>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004cda:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cde:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cea:	dd5d      	ble.n	8004da8 <startZionRead+0x128>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d15a      	bne.n	8004da8 <startZionRead+0x128>
				  int runtime = (HAL_GetTick()/1000);
 8004cf2:	f004 fe87 	bl	8009a04 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <startZionRead+0x208>)
 8004cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfe:	099b      	lsrs	r3, r3, #6
 8004d00:	613b      	str	r3, [r7, #16]
				  if(runtime > 15){
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b0f      	cmp	r3, #15
 8004d06:	f340 80af 	ble.w	8004e68 <startZionRead+0x1e8>
					  zionEEPROMPresent= zionEEPROMPresence();
 8004d0a:	f004 fb7b 	bl	8009404 <zionEEPROMPresence>
 8004d0e:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d012      	beq.n	8004d3e <startZionRead+0xbe>
						  ZION.SOC_EEPROM_Detected = 1;
 8004d18:	4b57      	ldr	r3, [pc, #348]	; (8004e78 <startZionRead+0x1f8>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004d1e:	20a6      	movs	r0, #166	; 0xa6
 8004d20:	f004 fbc0 	bl	80094a4 <parseZionEEPROM>
 8004d24:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a53      	ldr	r2, [pc, #332]	; (8004e78 <startZionRead+0x1f8>)
 8004d2c:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4a51      	ldr	r2, [pc, #324]	; (8004e78 <startZionRead+0x1f8>)
 8004d34:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	4a4f      	ldr	r2, [pc, #316]	; (8004e78 <startZionRead+0x1f8>)
 8004d3c:	61d3      	str	r3, [r2, #28]
					  }

					  if(*(zionEEPROMPresent+1)){
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3304      	adds	r3, #4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d012      	beq.n	8004d6e <startZionRead+0xee>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <startZionRead+0x1f8>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004d4e:	20a8      	movs	r0, #168	; 0xa8
 8004d50:	f004 fba8 	bl	80094a4 <parseZionEEPROM>
 8004d54:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a47      	ldr	r2, [pc, #284]	; (8004e78 <startZionRead+0x1f8>)
 8004d5c:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4a45      	ldr	r2, [pc, #276]	; (8004e78 <startZionRead+0x1f8>)
 8004d64:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a43      	ldr	r2, [pc, #268]	; (8004e78 <startZionRead+0x1f8>)
 8004d6c:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3308      	adds	r3, #8
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d012      	beq.n	8004d9e <startZionRead+0x11e>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004d78:	4b3f      	ldr	r3, [pc, #252]	; (8004e78 <startZionRead+0x1f8>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004d7e:	20aa      	movs	r0, #170	; 0xaa
 8004d80:	f004 fb90 	bl	80094a4 <parseZionEEPROM>
 8004d84:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a3b      	ldr	r2, [pc, #236]	; (8004e78 <startZionRead+0x1f8>)
 8004d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4a39      	ldr	r2, [pc, #228]	; (8004e78 <startZionRead+0x1f8>)
 8004d94:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <startZionRead+0x1f8>)
 8004d9c:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <startZionRead+0x1f8>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004da4:	f00b fb90 	bl	80104c8 <osThreadExit>
				  }
			  }
			  else{
				  if(!switchOn){
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <startZionRead+0x146>
					  HAL_GPIO_WritePin(ZION_PWR_EN_GPIO_Port,ZION_PWR_EN_Pin,1);
 8004dae:	2201      	movs	r2, #1
 8004db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004db4:	4835      	ldr	r0, [pc, #212]	; (8004e8c <startZionRead+0x20c>)
 8004db6:	f006 faab 	bl	800b310 <HAL_GPIO_WritePin>
					  ZION.zionSwitch = 1;
 8004dba:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <startZionRead+0x1f8>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	605a      	str	r2, [r3, #4]
					  switchOn=1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e051      	b.n	8004e6a <startZionRead+0x1ea>
				  }
				  else{
					  zionEEPROMPresent= zionEEPROMPresence();
 8004dc6:	f004 fb1d 	bl	8009404 <zionEEPROMPresence>
 8004dca:	60f8      	str	r0, [r7, #12]
					  if(*zionEEPROMPresent){
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d012      	beq.n	8004dfa <startZionRead+0x17a>
						  ZION.SOC_EEPROM_Detected = 1;
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <startZionRead+0x1f8>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	609a      	str	r2, [r3, #8]
						  zionHeaderData = parseZionEEPROM(SOC_ADDRESS);
 8004dda:	20a6      	movs	r0, #166	; 0xa6
 8004ddc:	f004 fb62 	bl	80094a4 <parseZionEEPROM>
 8004de0:	60b8      	str	r0, [r7, #8]
						  ZION.SOC_BoardID = *(zionHeaderData);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <startZionRead+0x1f8>)
 8004de8:	6153      	str	r3, [r2, #20]
						  ZION.SOC_BoardFab = *(zionHeaderData+2);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <startZionRead+0x1f8>)
 8004df0:	6193      	str	r3, [r2, #24]
						  ZION.SOC_Config = *(zionHeaderData+3);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <startZionRead+0x1f8>)
 8004df8:	61d3      	str	r3, [r2, #28]
					  }
					  if(*(zionEEPROMPresent+1)){
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d012      	beq.n	8004e2a <startZionRead+0x1aa>
						  ZION.ASIC_EEPROM_Detected = 1;
 8004e04:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <startZionRead+0x1f8>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	60da      	str	r2, [r3, #12]
						  zionHeaderData = parseZionEEPROM(ASIC_ADDRESS);
 8004e0a:	20a8      	movs	r0, #168	; 0xa8
 8004e0c:	f004 fb4a 	bl	80094a4 <parseZionEEPROM>
 8004e10:	60b8      	str	r0, [r7, #8]
						  ZION.ASIC_BoardID = *(zionHeaderData);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <startZionRead+0x1f8>)
 8004e18:	6213      	str	r3, [r2, #32]
						  ZION.ASIC_BoardFab = *(zionHeaderData+2);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <startZionRead+0x1f8>)
 8004e20:	6253      	str	r3, [r2, #36]	; 0x24
						  ZION.ASIC_Config = *(zionHeaderData+3);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <startZionRead+0x1f8>)
 8004e28:	6293      	str	r3, [r2, #40]	; 0x28

					  }
					  if(*(zionEEPROMPresent+2)){
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d012      	beq.n	8004e5a <startZionRead+0x1da>
						  ZION.DISPLAY_EEPROM_Detected = 1;
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <startZionRead+0x1f8>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	611a      	str	r2, [r3, #16]
						  zionHeaderData = parseZionEEPROM(DISPLAY_ADDRESS);
 8004e3a:	20aa      	movs	r0, #170	; 0xaa
 8004e3c:	f004 fb32 	bl	80094a4 <parseZionEEPROM>
 8004e40:	60b8      	str	r0, [r7, #8]
						  ZION.DISPLAY_BoardID = *(zionHeaderData);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <startZionRead+0x1f8>)
 8004e48:	62d3      	str	r3, [r2, #44]	; 0x2c
						  ZION.DISPLAY_BoardFab = *(zionHeaderData+2);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <startZionRead+0x1f8>)
 8004e50:	6313      	str	r3, [r2, #48]	; 0x30
						  ZION.DISPLAY_Config = *(zionHeaderData+3);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <startZionRead+0x1f8>)
 8004e58:	6353      	str	r3, [r2, #52]	; 0x34
					  }
					  ZION.zionFinished=1;
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <startZionRead+0x1f8>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
					  osThreadExit();
 8004e60:	f00b fb32 	bl	80104c8 <osThreadExit>
			  }
		  }
	  }
	  else{
		  //should never get here but added for completeness
		  osThreadExit();
 8004e64:	f00b fb30 	bl	80104c8 <osThreadExit>
			  if(zionVoltage > 3.0 && (!switchOn)){
 8004e68:	bf00      	nop
	  }
    osDelay(400);
 8004e6a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004e6e:	f00b fb31 	bl	80104d4 <osDelay>
	  if(!ZION.zionFinished){
 8004e72:	e70d      	b.n	8004c90 <startZionRead+0x10>
 8004e74:	429a0000 	.word	0x429a0000
 8004e78:	20003274 	.word	0x20003274
 8004e7c:	20029284 	.word	0x20029284
 8004e80:	2000007c 	.word	0x2000007c
 8004e84:	429a0000 	.word	0x429a0000
 8004e88:	10624dd3 	.word	0x10624dd3
 8004e8c:	40020400 	.word	0x40020400

08004e90 <startBootButtons>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBootButtons */
void startBootButtons(void *argument)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBootButtons */
  /* Infinite loop */
	int pwrBtnReady=0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
	int timeTurnedOn=0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
	int pwrOn=0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
	int presentTime=0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  if(bootButtons.bootModeSet){
 8004ea8:	4b92      	ldr	r3, [pc, #584]	; (80050f4 <startBootButtons+0x264>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 81ed 	beq.w	800528c <startBootButtons+0x3fc>
		  presentTime = (HAL_GetTick());
 8004eb2:	f004 fda7 	bl	8009a04 <HAL_GetTick>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	60bb      	str	r3, [r7, #8]
		  if(timeTurnedOn==0){
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <startBootButtons+0x34>
			  timeTurnedOn=presentTime;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	613b      	str	r3, [r7, #16]
		  }
		  if(bootButtons.bootMode !=0){
 8004ec4:	4b8b      	ldr	r3, [pc, #556]	; (80050f4 <startBootButtons+0x264>)
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80ce 	beq.w	800506a <startBootButtons+0x1da>
			  if(bootButtons.btn1){ //DPAD UP
 8004ece:	4b89      	ldr	r3, [pc, #548]	; (80050f4 <startBootButtons+0x264>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d006      	beq.n	8004ee4 <startBootButtons+0x54>
				  BTN1_ON;
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2108      	movs	r1, #8
 8004eda:	4887      	ldr	r0, [pc, #540]	; (80050f8 <startBootButtons+0x268>)
 8004edc:	f006 fa18 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8004ee4:	4b83      	ldr	r3, [pc, #524]	; (80050f4 <startBootButtons+0x264>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <startBootButtons+0x6a>
				  BTN2_ON;
 8004eec:	2201      	movs	r2, #1
 8004eee:	2110      	movs	r1, #16
 8004ef0:	4881      	ldr	r0, [pc, #516]	; (80050f8 <startBootButtons+0x268>)
 8004ef2:	f006 fa0d 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 8004efa:	4b7e      	ldr	r3, [pc, #504]	; (80050f4 <startBootButtons+0x264>)
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <startBootButtons+0x80>
				  BTN3_ON;
 8004f02:	2201      	movs	r2, #1
 8004f04:	2120      	movs	r1, #32
 8004f06:	487c      	ldr	r0, [pc, #496]	; (80050f8 <startBootButtons+0x268>)
 8004f08:	f006 fa02 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn4){
 8004f10:	4b78      	ldr	r3, [pc, #480]	; (80050f4 <startBootButtons+0x264>)
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <startBootButtons+0x98>
				  BTN4_ON;
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f1e:	4876      	ldr	r0, [pc, #472]	; (80050f8 <startBootButtons+0x268>)
 8004f20:	f006 f9f6 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f24:	2301      	movs	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.btn5){
 8004f28:	4b72      	ldr	r3, [pc, #456]	; (80050f4 <startBootButtons+0x264>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <startBootButtons+0xb0>
				  BTN5_ON;
 8004f30:	2201      	movs	r2, #1
 8004f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f36:	4870      	ldr	r0, [pc, #448]	; (80050f8 <startBootButtons+0x268>)
 8004f38:	f006 f9ea 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.edl_sw){
 8004f40:	4b6c      	ldr	r3, [pc, #432]	; (80050f4 <startBootButtons+0x264>)
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <startBootButtons+0xc8>
				  EDL_SW_ON;
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f4e:	486b      	ldr	r0, [pc, #428]	; (80050fc <startBootButtons+0x26c>)
 8004f50:	f006 f9de 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f54:	2301      	movs	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
			  }
			  if(bootButtons.ex_sw){
 8004f58:	4b66      	ldr	r3, [pc, #408]	; (80050f4 <startBootButtons+0x264>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <startBootButtons+0xe0>
				  EX_SW_ON;
 8004f60:	2201      	movs	r2, #1
 8004f62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f66:	4865      	ldr	r0, [pc, #404]	; (80050fc <startBootButtons+0x26c>)
 8004f68:	f006 f9d2 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
			  }
			  setOutputGPIOState(outputGPIOs.odOut_0, OFF); //set the reset GPIO.
 8004f70:	4b63      	ldr	r3, [pc, #396]	; (8005100 <startBootButtons+0x270>)
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fe f922 	bl	80031c0 <setOutputGPIOState>
			  osDelay(500);
 8004f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f80:	f00b faa8 	bl	80104d4 <osDelay>
			  setOutputGPIOState(outputGPIOs.odOut_0, ON); //turn off the reset GPIO
 8004f84:	4b5e      	ldr	r3, [pc, #376]	; (8005100 <startBootButtons+0x270>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe f918 	bl	80031c0 <setOutputGPIOState>
			  osDelay(500);
 8004f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f94:	f00b fa9e 	bl	80104d4 <osDelay>
			  BTN1_OFF;
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2108      	movs	r1, #8
 8004f9c:	4856      	ldr	r0, [pc, #344]	; (80050f8 <startBootButtons+0x268>)
 8004f9e:	f006 f9b7 	bl	800b310 <HAL_GPIO_WritePin>
			  BTN2_OFF;
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2110      	movs	r1, #16
 8004fa6:	4854      	ldr	r0, [pc, #336]	; (80050f8 <startBootButtons+0x268>)
 8004fa8:	f006 f9b2 	bl	800b310 <HAL_GPIO_WritePin>
			  BTN3_OFF;
 8004fac:	2200      	movs	r2, #0
 8004fae:	2120      	movs	r1, #32
 8004fb0:	4851      	ldr	r0, [pc, #324]	; (80050f8 <startBootButtons+0x268>)
 8004fb2:	f006 f9ad 	bl	800b310 <HAL_GPIO_WritePin>
			  BTN4_OFF;
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fbc:	484e      	ldr	r0, [pc, #312]	; (80050f8 <startBootButtons+0x268>)
 8004fbe:	f006 f9a7 	bl	800b310 <HAL_GPIO_WritePin>
			  BTN5_OFF;
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fc8:	484b      	ldr	r0, [pc, #300]	; (80050f8 <startBootButtons+0x268>)
 8004fca:	f006 f9a1 	bl	800b310 <HAL_GPIO_WritePin>
			  EDL_SW_OFF;
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fd4:	4849      	ldr	r0, [pc, #292]	; (80050fc <startBootButtons+0x26c>)
 8004fd6:	f006 f99b 	bl	800b310 <HAL_GPIO_WritePin>
			  EX_SW_OFF;
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fe0:	4846      	ldr	r0, [pc, #280]	; (80050fc <startBootButtons+0x26c>)
 8004fe2:	f006 f995 	bl	800b310 <HAL_GPIO_WritePin>
			  if(bootButtons.btn1){
 8004fe6:	4b43      	ldr	r3, [pc, #268]	; (80050f4 <startBootButtons+0x264>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <startBootButtons+0x166>
				  bootButtons.bootMode= RECOVERY;
 8004fee:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <startBootButtons+0x264>)
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff4:	e01a      	b.n	800502c <startBootButtons+0x19c>
				  //errorLEDState[RECOVERY_LED]=1;
			  }
			  else if(bootButtons.btn2){
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <startBootButtons+0x264>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <startBootButtons+0x176>
				  bootButtons.bootMode= MASS_STORAGE;
 8004ffe:	4b3d      	ldr	r3, [pc, #244]	; (80050f4 <startBootButtons+0x264>)
 8005000:	2205      	movs	r2, #5
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
 8005004:	e012      	b.n	800502c <startBootButtons+0x19c>
				 // errorLEDState[MASS_STORAGE_LED]=1;
			  }
			  else if(bootButtons.btn3){
 8005006:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <startBootButtons+0x264>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <startBootButtons+0x186>
				  bootButtons.bootMode= UEFI;
 800500e:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <startBootButtons+0x264>)
 8005010:	2202      	movs	r2, #2
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
 8005014:	e00a      	b.n	800502c <startBootButtons+0x19c>
				  //errorLEDState[UEFI_LED]=1;
			  }
			  else if(bootButtons.edl_sw){
 8005016:	4b37      	ldr	r3, [pc, #220]	; (80050f4 <startBootButtons+0x264>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <startBootButtons+0x196>
				  bootButtons.bootMode= EDL;
 800501e:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <startBootButtons+0x264>)
 8005020:	2203      	movs	r2, #3
 8005022:	629a      	str	r2, [r3, #40]	; 0x28
 8005024:	e002      	b.n	800502c <startBootButtons+0x19c>
				  //errorLEDState[EDL_LED]=1;
			  }
			  else{
				  bootButtons.bootMode=STANDARD;
 8005026:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <startBootButtons+0x264>)
 8005028:	2201      	movs	r2, #1
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
				  //errorLEDState[STANDARD_LED]=1;
			  }
			  bootButtons.btn0=0;
 800502c:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <startBootButtons+0x264>)
 800502e:	2200      	movs	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
			  bootButtons.btn1=0;
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <startBootButtons+0x264>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
			  bootButtons.btn2=0;
 8005038:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <startBootButtons+0x264>)
 800503a:	2200      	movs	r2, #0
 800503c:	60da      	str	r2, [r3, #12]
			  bootButtons.btn3=0;
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <startBootButtons+0x264>)
 8005040:	2200      	movs	r2, #0
 8005042:	611a      	str	r2, [r3, #16]
			  bootButtons.btn4=0;
 8005044:	4b2b      	ldr	r3, [pc, #172]	; (80050f4 <startBootButtons+0x264>)
 8005046:	2200      	movs	r2, #0
 8005048:	615a      	str	r2, [r3, #20]
			  bootButtons.btn5=0;
 800504a:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <startBootButtons+0x264>)
 800504c:	2200      	movs	r2, #0
 800504e:	619a      	str	r2, [r3, #24]
			  bootButtons.edl_sw=0;
 8005050:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <startBootButtons+0x264>)
 8005052:	2200      	movs	r2, #0
 8005054:	61da      	str	r2, [r3, #28]
			  bootButtons.ex_sw=0;
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <startBootButtons+0x264>)
 8005058:	2200      	movs	r2, #0
 800505a:	621a      	str	r2, [r3, #32]
			  bootButtons.modeClear=1;
 800505c:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <startBootButtons+0x264>)
 800505e:	2201      	movs	r2, #1
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
			  bootButtons.bootModeSet=0;
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <startBootButtons+0x264>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e110      	b.n	800528c <startBootButtons+0x3fc>

		  }
		  else{
			  if((bootButtons.btn0) || pwrBtnReady){ //power button
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <startBootButtons+0x264>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <startBootButtons+0x1e8>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d06a      	beq.n	800514e <startBootButtons+0x2be>
				  BTN0_ON;
 8005078:	2201      	movs	r2, #1
 800507a:	2104      	movs	r1, #4
 800507c:	481e      	ldr	r0, [pc, #120]	; (80050f8 <startBootButtons+0x268>)
 800507e:	f006 f947 	bl	800b310 <HAL_GPIO_WritePin>
				  timeTurnedOn = (HAL_GetTick());
 8005082:	f004 fcbf 	bl	8009a04 <HAL_GetTick>
 8005086:	4603      	mov	r3, r0
 8005088:	613b      	str	r3, [r7, #16]
				  pwrBtnReady=0;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
				  pwrOn = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
				  osDelay(500);
 8005092:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005096:	f00b fa1d 	bl	80104d4 <osDelay>
				  BTN0_OFF;
 800509a:	2200      	movs	r2, #0
 800509c:	2104      	movs	r1, #4
 800509e:	4816      	ldr	r0, [pc, #88]	; (80050f8 <startBootButtons+0x268>)
 80050a0:	f006 f936 	bl	800b310 <HAL_GPIO_WritePin>
				  osDelay(500);
 80050a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050a8:	f00b fa14 	bl	80104d4 <osDelay>
				  pwrOn=0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
				  timeTurnedOn=0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
				  if(bootButtons.btn0){
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <startBootButtons+0x264>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <startBootButtons+0x234>
					  bootButtons.bootMode= STANDARD;
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <startBootButtons+0x264>)
 80050be:	2201      	movs	r2, #1
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28
 80050c2:	e026      	b.n	8005112 <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn1){
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <startBootButtons+0x264>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <startBootButtons+0x244>
					  bootButtons.bootMode= RECOVERY;
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <startBootButtons+0x264>)
 80050ce:	2204      	movs	r2, #4
 80050d0:	629a      	str	r2, [r3, #40]	; 0x28
 80050d2:	e01e      	b.n	8005112 <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn2){
 80050d4:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <startBootButtons+0x264>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <startBootButtons+0x254>
					  bootButtons.bootMode= MASS_STORAGE;
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <startBootButtons+0x264>)
 80050de:	2205      	movs	r2, #5
 80050e0:	629a      	str	r2, [r3, #40]	; 0x28
 80050e2:	e016      	b.n	8005112 <startBootButtons+0x282>
				  }
				  else if(bootButtons.btn3){
 80050e4:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <startBootButtons+0x264>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <startBootButtons+0x274>
					  bootButtons.bootMode= UEFI;
 80050ec:	4b01      	ldr	r3, [pc, #4]	; (80050f4 <startBootButtons+0x264>)
 80050ee:	2202      	movs	r2, #2
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
 80050f2:	e00e      	b.n	8005112 <startBootButtons+0x282>
 80050f4:	200032ac 	.word	0x200032ac
 80050f8:	40021400 	.word	0x40021400
 80050fc:	40020400 	.word	0x40020400
 8005100:	20000044 	.word	0x20000044
				  }
				  else if(bootButtons.edl_sw){
 8005104:	4b64      	ldr	r3, [pc, #400]	; (8005298 <startBootButtons+0x408>)
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <startBootButtons+0x282>
					  bootButtons.bootMode= EDL;
 800510c:	4b62      	ldr	r3, [pc, #392]	; (8005298 <startBootButtons+0x408>)
 800510e:	2203      	movs	r2, #3
 8005110:	629a      	str	r2, [r3, #40]	; 0x28
				  }
				  bootButtons.btn0=0;
 8005112:	4b61      	ldr	r3, [pc, #388]	; (8005298 <startBootButtons+0x408>)
 8005114:	2200      	movs	r2, #0
 8005116:	605a      	str	r2, [r3, #4]
				  bootButtons.btn1=0;
 8005118:	4b5f      	ldr	r3, [pc, #380]	; (8005298 <startBootButtons+0x408>)
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
				  bootButtons.btn2=0;
 800511e:	4b5e      	ldr	r3, [pc, #376]	; (8005298 <startBootButtons+0x408>)
 8005120:	2200      	movs	r2, #0
 8005122:	60da      	str	r2, [r3, #12]
				  bootButtons.btn3=0;
 8005124:	4b5c      	ldr	r3, [pc, #368]	; (8005298 <startBootButtons+0x408>)
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]
				  bootButtons.btn4=0;
 800512a:	4b5b      	ldr	r3, [pc, #364]	; (8005298 <startBootButtons+0x408>)
 800512c:	2200      	movs	r2, #0
 800512e:	615a      	str	r2, [r3, #20]
				  bootButtons.btn5=0;
 8005130:	4b59      	ldr	r3, [pc, #356]	; (8005298 <startBootButtons+0x408>)
 8005132:	2200      	movs	r2, #0
 8005134:	619a      	str	r2, [r3, #24]
				  bootButtons.edl_sw=0;
 8005136:	4b58      	ldr	r3, [pc, #352]	; (8005298 <startBootButtons+0x408>)
 8005138:	2200      	movs	r2, #0
 800513a:	61da      	str	r2, [r3, #28]
				  bootButtons.ex_sw=0;
 800513c:	4b56      	ldr	r3, [pc, #344]	; (8005298 <startBootButtons+0x408>)
 800513e:	2200      	movs	r2, #0
 8005140:	621a      	str	r2, [r3, #32]
				  bootButtons.modeClear=1;
 8005142:	4b55      	ldr	r3, [pc, #340]	; (8005298 <startBootButtons+0x408>)
 8005144:	2201      	movs	r2, #1
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
				  bootButtons.bootModeSet=0;
 8005148:	4b53      	ldr	r3, [pc, #332]	; (8005298 <startBootButtons+0x408>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
				  //osDelay(300);
			  }
			  if(bootButtons.btn1){ //DPAD UP
 800514e:	4b52      	ldr	r3, [pc, #328]	; (8005298 <startBootButtons+0x408>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <startBootButtons+0x2d6>
				  BTN1_ON;
 8005156:	2201      	movs	r2, #1
 8005158:	2108      	movs	r1, #8
 800515a:	4850      	ldr	r0, [pc, #320]	; (800529c <startBootButtons+0x40c>)
 800515c:	f006 f8d8 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8005160:	2301      	movs	r3, #1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e008      	b.n	8005178 <startBootButtons+0x2e8>
			  }
			  else if(!(bootButtons.btn1)){ //DPAD UP
 8005166:	4b4c      	ldr	r3, [pc, #304]	; (8005298 <startBootButtons+0x408>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <startBootButtons+0x2e8>
				  BTN1_OFF;
 800516e:	2200      	movs	r2, #0
 8005170:	2108      	movs	r1, #8
 8005172:	484a      	ldr	r0, [pc, #296]	; (800529c <startBootButtons+0x40c>)
 8005174:	f006 f8cc 	bl	800b310 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn2){ //DPAD RIGHT
 8005178:	4b47      	ldr	r3, [pc, #284]	; (8005298 <startBootButtons+0x408>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <startBootButtons+0x300>
				  BTN2_ON;
 8005180:	2201      	movs	r2, #1
 8005182:	2110      	movs	r1, #16
 8005184:	4845      	ldr	r0, [pc, #276]	; (800529c <startBootButtons+0x40c>)
 8005186:	f006 f8c3 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 800518a:	2301      	movs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e008      	b.n	80051a2 <startBootButtons+0x312>
			  }
			  else if(!(bootButtons.btn2)){ //DPAD RIGHT
 8005190:	4b41      	ldr	r3, [pc, #260]	; (8005298 <startBootButtons+0x408>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <startBootButtons+0x312>
				  BTN2_OFF;
 8005198:	2200      	movs	r2, #0
 800519a:	2110      	movs	r1, #16
 800519c:	483f      	ldr	r0, [pc, #252]	; (800529c <startBootButtons+0x40c>)
 800519e:	f006 f8b7 	bl	800b310 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn3){ //DPAD LEFT
 80051a2:	4b3d      	ldr	r3, [pc, #244]	; (8005298 <startBootButtons+0x408>)
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <startBootButtons+0x32a>
				  BTN3_ON;
 80051aa:	2201      	movs	r2, #1
 80051ac:	2120      	movs	r1, #32
 80051ae:	483b      	ldr	r0, [pc, #236]	; (800529c <startBootButtons+0x40c>)
 80051b0:	f006 f8ae 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	e008      	b.n	80051cc <startBootButtons+0x33c>
			  }
			  else if(!(bootButtons.btn3)){ //DPAD LEFT
 80051ba:	4b37      	ldr	r3, [pc, #220]	; (8005298 <startBootButtons+0x408>)
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <startBootButtons+0x33c>
				  BTN3_OFF;
 80051c2:	2200      	movs	r2, #0
 80051c4:	2120      	movs	r1, #32
 80051c6:	4835      	ldr	r0, [pc, #212]	; (800529c <startBootButtons+0x40c>)
 80051c8:	f006 f8a2 	bl	800b310 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.btn4){
 80051cc:	4b32      	ldr	r3, [pc, #200]	; (8005298 <startBootButtons+0x408>)
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <startBootButtons+0x356>
				  BTN4_ON;
 80051d4:	2201      	movs	r2, #1
 80051d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051da:	4830      	ldr	r0, [pc, #192]	; (800529c <startBootButtons+0x40c>)
 80051dc:	f006 f898 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 80051e0:	2301      	movs	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e00d      	b.n	8005202 <startBootButtons+0x372>
			  }
			  else if(!(bootButtons.btn4)){
 80051e6:	4b2c      	ldr	r3, [pc, #176]	; (8005298 <startBootButtons+0x408>)
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <startBootButtons+0x372>
				  BTN4_OFF;
 80051ee:	2200      	movs	r2, #0
 80051f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051f4:	4829      	ldr	r0, [pc, #164]	; (800529c <startBootButtons+0x40c>)
 80051f6:	f006 f88b 	bl	800b310 <HAL_GPIO_WritePin>
				  osDelay(300);
 80051fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80051fe:	f00b f969 	bl	80104d4 <osDelay>
			  }
			  if(bootButtons.btn5){
 8005202:	4b25      	ldr	r3, [pc, #148]	; (8005298 <startBootButtons+0x408>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <startBootButtons+0x38c>
				  BTN5_ON;
 800520a:	2201      	movs	r2, #1
 800520c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005210:	4822      	ldr	r0, [pc, #136]	; (800529c <startBootButtons+0x40c>)
 8005212:	f006 f87d 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8005216:	2301      	movs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e009      	b.n	8005230 <startBootButtons+0x3a0>
			  }
			  else if(!(bootButtons.btn5)){
 800521c:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <startBootButtons+0x408>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <startBootButtons+0x3a0>
				  BTN5_OFF;
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522a:	481c      	ldr	r0, [pc, #112]	; (800529c <startBootButtons+0x40c>)
 800522c:	f006 f870 	bl	800b310 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.edl_sw){
 8005230:	4b19      	ldr	r3, [pc, #100]	; (8005298 <startBootButtons+0x408>)
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <startBootButtons+0x3ba>
				  EDL_SW_ON;
 8005238:	2201      	movs	r2, #1
 800523a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800523e:	4818      	ldr	r0, [pc, #96]	; (80052a0 <startBootButtons+0x410>)
 8005240:	f006 f866 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8005244:	2301      	movs	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e009      	b.n	800525e <startBootButtons+0x3ce>
			  }
			  else if(!(bootButtons.edl_sw)){
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <startBootButtons+0x408>)
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <startBootButtons+0x3ce>
				  EDL_SW_OFF;
 8005252:	2200      	movs	r2, #0
 8005254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005258:	4811      	ldr	r0, [pc, #68]	; (80052a0 <startBootButtons+0x410>)
 800525a:	f006 f859 	bl	800b310 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
			  if(bootButtons.ex_sw){
 800525e:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <startBootButtons+0x408>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <startBootButtons+0x3e8>
				  EX_SW_ON;
 8005266:	2201      	movs	r2, #1
 8005268:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800526c:	480c      	ldr	r0, [pc, #48]	; (80052a0 <startBootButtons+0x410>)
 800526e:	f006 f84f 	bl	800b310 <HAL_GPIO_WritePin>
				  pwrBtnReady=1;
 8005272:	2301      	movs	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e009      	b.n	800528c <startBootButtons+0x3fc>
			  }
			  else if(!(bootButtons.ex_sw)){
 8005278:	4b07      	ldr	r3, [pc, #28]	; (8005298 <startBootButtons+0x408>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <startBootButtons+0x3fc>
				  EX_SW_OFF;
 8005280:	2200      	movs	r2, #0
 8005282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005286:	4806      	ldr	r0, [pc, #24]	; (80052a0 <startBootButtons+0x410>)
 8005288:	f006 f842 	bl	800b310 <HAL_GPIO_WritePin>
				  //osDelay(300);
			  }
		  }
	  }
    osDelay(800);
 800528c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8005290:	f00b f920 	bl	80104d4 <osDelay>
	  if(bootButtons.bootModeSet){
 8005294:	e608      	b.n	8004ea8 <startBootButtons+0x18>
 8005296:	bf00      	nop
 8005298:	200032ac 	.word	0x200032ac
 800529c:	40021400 	.word	0x40021400
 80052a0:	40020400 	.word	0x40020400

080052a4 <startSocUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSocUart */
void startSocUart(void *argument)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	uint8_t * receivedBytes;
	uint8_t values[11];
  /* Infinite loop */
  for(;;)
  {
	  receivedBytes = socUartParser();
 80052ac:	f7ff f8d6 	bl	800445c <socUartParser>
 80052b0:	61b8      	str	r0, [r7, #24]
	  if((*receivedBytes) != 0xff){
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2bff      	cmp	r3, #255	; 0xff
 80052b8:	d015      	beq.n	80052e6 <startSocUart+0x42>
		  for(int x=4;x<15;x++){
 80052ba:	2304      	movs	r3, #4
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e00d      	b.n	80052dc <startSocUart+0x38>
			  values[x-4] = *(receivedBytes+x);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	441a      	add	r2, r3
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	f107 0120 	add.w	r1, r7, #32
 80052d0:	440b      	add	r3, r1
 80052d2:	f803 2c18 	strb.w	r2, [r3, #-24]
		  for(int x=4;x<15;x++){
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3301      	adds	r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b0e      	cmp	r3, #14
 80052e0:	ddee      	ble.n	80052c0 <startSocUart+0x1c>
		  }
		  int x=0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
	  }
	  //int x = 0;
    osDelay(400);
 80052e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80052ea:	f00b f8f3 	bl	80104d4 <osDelay>
	  receivedBytes = socUartParser();
 80052ee:	e7dd      	b.n	80052ac <startSocUart+0x8>

080052f0 <startDebugUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDebugUart */
void startDebugUart(void *argument)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	float * presentADCValues;


  for(;;)
  {
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 80052f8:	4b62      	ldr	r3, [pc, #392]	; (8005484 <startDebugUart+0x194>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <startDebugUart+0x26>
 8005300:	4b60      	ldr	r3, [pc, #384]	; (8005484 <startDebugUart+0x194>)
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d006      	beq.n	8005316 <startDebugUart+0x26>
 8005308:	4b5e      	ldr	r3, [pc, #376]	; (8005484 <startDebugUart+0x194>)
 800530a:	789b      	ldrb	r3, [r3, #2]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <startDebugUart+0x26>
		  presentADCValues = getADCValues();
 8005310:	f7fe fc02 	bl	8003b18 <getADCValues>
 8005314:	6238      	str	r0, [r7, #32]

	  }
	  commandSent = debugUartParser();
 8005316:	f7ff f843 	bl	80043a0 <debugUartParser>
 800531a:	4603      	mov	r3, r0
 800531c:	77fb      	strb	r3, [r7, #31]
	  if(commandSent == true){
 800531e:	7ffb      	ldrb	r3, [r7, #31]
 8005320:	2b01      	cmp	r3, #1
 8005322:	f040 80a9 	bne.w	8005478 <startDebugUart+0x188>
		  char buf[5];
		  debugUartTransmitChar("ADCValues:");
 8005326:	4858      	ldr	r0, [pc, #352]	; (8005488 <startDebugUart+0x198>)
 8005328:	f7fe f86c 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 800532c:	2300      	movs	r3, #0
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	e01d      	b.n	800536e <startDebugUart+0x7e>
			  sprintf(buf, "%f", *(presentADCValues+x));
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	6a3a      	ldr	r2, [r7, #32]
 8005338:	4413      	add	r3, r2
 800533a:	edd3 7a00 	vldr	s15, [r3]
 800533e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005342:	f107 0018 	add.w	r0, r7, #24
 8005346:	ec53 2b17 	vmov	r2, r3, d7
 800534a:	4950      	ldr	r1, [pc, #320]	; (800548c <startDebugUart+0x19c>)
 800534c:	f00e feb6 	bl	80140bc <siprintf>
			  //snprintf(buf, 5, "%f", *(presentADCValues+x));
			  debugUartTransmitStuff(buf,5);
 8005350:	f107 0318 	add.w	r3, r7, #24
 8005354:	2105      	movs	r1, #5
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe f870 	bl	800343c <debugUartTransmitStuff>
			  if(x<20){
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	2b13      	cmp	r3, #19
 8005360:	dc02      	bgt.n	8005368 <startDebugUart+0x78>
				  debugUartTransmitChar(",");
 8005362:	484b      	ldr	r0, [pc, #300]	; (8005490 <startDebugUart+0x1a0>)
 8005364:	f7fe f84e 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<21;x++){
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	3301      	adds	r3, #1
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b14      	cmp	r3, #20
 8005372:	ddde      	ble.n	8005332 <startDebugUart+0x42>
			  }

		  }
		  debugUartTransmitChar("\r\n");
 8005374:	4847      	ldr	r0, [pc, #284]	; (8005494 <startDebugUart+0x1a4>)
 8005376:	f7fe f845 	bl	8003404 <debugUartTransmitChar>
		  debugUartTransmitChar("INPUT GPIOs:");
 800537a:	4847      	ldr	r0, [pc, #284]	; (8005498 <startDebugUart+0x1a8>)
 800537c:	f7fe f842 	bl	8003404 <debugUartTransmitChar>
		  //uint8_t gpioInputs[12];
		  //memcpy(gpioInputs,gpioInputBuf,sizeof(gpioInputBuf));
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	e018      	b.n	80053b8 <startDebugUart+0xc8>
			  sprintf(buf,"%x",gpioInputBuf[x]);
 8005386:	4a45      	ldr	r2, [pc, #276]	; (800549c <startDebugUart+0x1ac>)
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	4413      	add	r3, r2
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f107 0318 	add.w	r3, r7, #24
 8005394:	4942      	ldr	r1, [pc, #264]	; (80054a0 <startDebugUart+0x1b0>)
 8005396:	4618      	mov	r0, r3
 8005398:	f00e fe90 	bl	80140bc <siprintf>
			  debugUartTransmitChar(buf);
 800539c:	f107 0318 	add.w	r3, r7, #24
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe f82f 	bl	8003404 <debugUartTransmitChar>
			  if(x<(sizeof(gpioInputBuf))-1){
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	2b0a      	cmp	r3, #10
 80053aa:	d802      	bhi.n	80053b2 <startDebugUart+0xc2>
				  debugUartTransmitChar(",");
 80053ac:	4838      	ldr	r0, [pc, #224]	; (8005490 <startDebugUart+0x1a0>)
 80053ae:	f7fe f829 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<sizeof(gpioInputBuf);x++){
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	3301      	adds	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2b0b      	cmp	r3, #11
 80053bc:	d9e3      	bls.n	8005386 <startDebugUart+0x96>
			  }
		  }
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)gpioInputs, sizeof(gpioInputs),100);
		  debugUartTransmitChar("\r\n");
 80053be:	4835      	ldr	r0, [pc, #212]	; (8005494 <startDebugUart+0x1a4>)
 80053c0:	f7fe f820 	bl	8003404 <debugUartTransmitChar>
		  debugUartTransmitChar("Errors:");
 80053c4:	4837      	ldr	r0, [pc, #220]	; (80054a4 <startDebugUart+0x1b4>)
 80053c6:	f7fe f81d 	bl	8003404 <debugUartTransmitChar>
		  uint8_t errors[11];
		  errors[0] = errorLED.zionFault;
 80053ca:	4b37      	ldr	r3, [pc, #220]	; (80054a8 <startDebugUart+0x1b8>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	733b      	strb	r3, [r7, #12]
		  errors[1] = errorLED.vsysPMIFault;
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <startDebugUart+0x1b8>)
 80053d2:	785b      	ldrb	r3, [r3, #1]
 80053d4:	737b      	strb	r3, [r7, #13]
		  errors[2] = errorLED.fault3;
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <startDebugUart+0x1b8>)
 80053d8:	789b      	ldrb	r3, [r3, #2]
 80053da:	73bb      	strb	r3, [r7, #14]
		  errors[3] = errorLED.fault4;
 80053dc:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <startDebugUart+0x1b8>)
 80053de:	78db      	ldrb	r3, [r3, #3]
 80053e0:	73fb      	strb	r3, [r7, #15]
		  errors[4] = errorLED.fault5;
 80053e2:	4b31      	ldr	r3, [pc, #196]	; (80054a8 <startDebugUart+0x1b8>)
 80053e4:	791b      	ldrb	r3, [r3, #4]
 80053e6:	743b      	strb	r3, [r7, #16]
		  errors[5] = errorLED.fault6;
 80053e8:	4b2f      	ldr	r3, [pc, #188]	; (80054a8 <startDebugUart+0x1b8>)
 80053ea:	795b      	ldrb	r3, [r3, #5]
 80053ec:	747b      	strb	r3, [r7, #17]
		  errors[6] = errorLED.fault7;
 80053ee:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <startDebugUart+0x1b8>)
 80053f0:	799b      	ldrb	r3, [r3, #6]
 80053f2:	74bb      	strb	r3, [r7, #18]
		  errors[7] = errorLED.fault8;
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <startDebugUart+0x1b8>)
 80053f6:	7adb      	ldrb	r3, [r3, #11]
 80053f8:	74fb      	strb	r3, [r7, #19]
		  errors[8] = errorLED.fault9;
 80053fa:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <startDebugUart+0x1b8>)
 80053fc:	7b1b      	ldrb	r3, [r3, #12]
 80053fe:	753b      	strb	r3, [r7, #20]
		  errors[9] = errorLED.boot_fault;
 8005400:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <startDebugUart+0x1b8>)
 8005402:	79db      	ldrb	r3, [r3, #7]
 8005404:	757b      	strb	r3, [r7, #21]
		  errors[10] = errorLED.ledDriver;
 8005406:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <startDebugUart+0x1b8>)
 8005408:	7b5b      	ldrb	r3, [r3, #13]
 800540a:	75bb      	strb	r3, [r7, #22]
		  for(x=0;x<sizeof(errors);x++){
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	e019      	b.n	8005446 <startDebugUart+0x156>
			  sprintf(buf,"%x",errors[x]);
 8005412:	f107 020c 	add.w	r2, r7, #12
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	4413      	add	r3, r2
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	f107 0318 	add.w	r3, r7, #24
 8005422:	491f      	ldr	r1, [pc, #124]	; (80054a0 <startDebugUart+0x1b0>)
 8005424:	4618      	mov	r0, r3
 8005426:	f00e fe49 	bl	80140bc <siprintf>
			  debugUartTransmitChar(buf);
 800542a:	f107 0318 	add.w	r3, r7, #24
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd ffe8 	bl	8003404 <debugUartTransmitChar>
			  if(x<(sizeof(errors))-1){
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	2b09      	cmp	r3, #9
 8005438:	d802      	bhi.n	8005440 <startDebugUart+0x150>
				  debugUartTransmitChar(",");
 800543a:	4815      	ldr	r0, [pc, #84]	; (8005490 <startDebugUart+0x1a0>)
 800543c:	f7fd ffe2 	bl	8003404 <debugUartTransmitChar>
		  for(x=0;x<sizeof(errors);x++){
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	3301      	adds	r3, #1
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	2b0a      	cmp	r3, #10
 800544a:	d9e2      	bls.n	8005412 <startDebugUart+0x122>
			  }
		  }
		  debugUartTransmitChar("\r\n");
 800544c:	4811      	ldr	r0, [pc, #68]	; (8005494 <startDebugUart+0x1a4>)
 800544e:	f7fd ffd9 	bl	8003404 <debugUartTransmitChar>
		  debugUartTransmitChar("Boot Mode:");
 8005452:	4816      	ldr	r0, [pc, #88]	; (80054ac <startDebugUart+0x1bc>)
 8005454:	f7fd ffd6 	bl	8003404 <debugUartTransmitChar>
		  sprintf(buf,"%d",bootButtons.bootMode);
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <startDebugUart+0x1c0>)
 800545a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545c:	f107 0318 	add.w	r3, r7, #24
 8005460:	4914      	ldr	r1, [pc, #80]	; (80054b4 <startDebugUart+0x1c4>)
 8005462:	4618      	mov	r0, r3
 8005464:	f00e fe2a 	bl	80140bc <siprintf>
		  debugUartTransmitChar(buf);
 8005468:	f107 0318 	add.w	r3, r7, #24
 800546c:	4618      	mov	r0, r3
 800546e:	f7fd ffc9 	bl	8003404 <debugUartTransmitChar>
		  //HAL_UART_Transmit(&DEBUG_UART,(uint8_t *)bootButtons.bootMode, 1,100);
		  debugUartTransmitChar("\r\n");
 8005472:	4808      	ldr	r0, [pc, #32]	; (8005494 <startDebugUart+0x1a4>)
 8005474:	f7fd ffc6 	bl	8003404 <debugUartTransmitChar>
	  }
    osDelay(500);
 8005478:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800547c:	f00b f82a 	bl	80104d4 <osDelay>
	  if(adcRestart[0] && adcRestart[1] && adcRestart[2]){
 8005480:	e73a      	b.n	80052f8 <startDebugUart+0x8>
 8005482:	bf00      	nop
 8005484:	20029284 	.word	0x20029284
 8005488:	08017994 	.word	0x08017994
 800548c:	080179a0 	.word	0x080179a0
 8005490:	080179a4 	.word	0x080179a4
 8005494:	080179a8 	.word	0x080179a8
 8005498:	080179ac 	.word	0x080179ac
 800549c:	20028d34 	.word	0x20028d34
 80054a0:	080179bc 	.word	0x080179bc
 80054a4:	080179c0 	.word	0x080179c0
 80054a8:	200032d8 	.word	0x200032d8
 80054ac:	080179c8 	.word	0x080179c8
 80054b0:	200032ac 	.word	0x200032ac
 80054b4:	080179d4 	.word	0x080179d4

080054b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80054ca:	f004 fa87 	bl	80099dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40001000 	.word	0x40001000

080054dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80054e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054e2:	e7fe      	b.n	80054e2 <Error_Handler+0x6>

080054e4 <SMLCD_Enable>:

#define SMLCD_SPI_PORT             hspi4
// Public macros and functions

// Enable the display (using DISP pin)
__STATIC_INLINE void SMLCD_Enable(void) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
	SMLCD_DISP_H;
 80054e8:	2201      	movs	r2, #1
 80054ea:	2102      	movs	r1, #2
 80054ec:	4802      	ldr	r0, [pc, #8]	; (80054f8 <SMLCD_Enable+0x14>)
 80054ee:	f005 ff0f 	bl	800b310 <HAL_GPIO_WritePin>
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40022400 	.word	0x40022400

080054fc <initializeDisplay>:

int previousMenu = 0;
float displayAdcValues[21];
int setIndicator=0;

void initializeDisplay(){
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b099      	sub	sp, #100	; 0x64
 8005500:	af16      	add	r7, sp, #88	; 0x58
	HAL_StatusTypeDef Status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	71fb      	strb	r3, [r7, #7]
	SMLCD_InitGPIO();
 8005506:	f7fb f887 	bl	8000618 <SMLCD_InitGPIO>
	SMLCD_Init(hspi4);
 800550a:	4c16      	ldr	r4, [pc, #88]	; (8005564 <initializeDisplay+0x68>)
 800550c:	4668      	mov	r0, sp
 800550e:	f104 0310 	add.w	r3, r4, #16
 8005512:	2254      	movs	r2, #84	; 0x54
 8005514:	4619      	mov	r1, r3
 8005516:	f00d ff8d 	bl	8013434 <memcpy>
 800551a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800551e:	f7fb f89b 	bl	8000658 <SMLCD_Init>
	SMLCD_Enable();
 8005522:	f7ff ffdf 	bl	80054e4 <SMLCD_Enable>
	SMLCD_Clear();
 8005526:	f7fb f8b7 	bl	8000698 <SMLCD_Clear>
	if (Status != HAL_OK)
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <initializeDisplay+0x44>
	{
		DevUI_Error_Handler("SPI LCD Clear Command Failed.", Status, 0, 0, true);
 8005530:	79f9      	ldrb	r1, [r7, #7]
 8005532:	2301      	movs	r3, #1
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	2300      	movs	r3, #0
 8005538:	2200      	movs	r2, #0
 800553a:	480b      	ldr	r0, [pc, #44]	; (8005568 <initializeDisplay+0x6c>)
 800553c:	f7fd fde2 	bl	8003104 <DevUI_Error_Handler>
	}
#define ORI 0
	uint8_t ori;
	if (ORI == 0){
		ori = LCD_ORIENT_NORMAL;
 8005540:	2301      	movs	r3, #1
 8005542:	71bb      	strb	r3, [r7, #6]
	}
	SMLCD_Orientation(ori);
 8005544:	79bb      	ldrb	r3, [r7, #6]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fb fa5a 	bl	8000a00 <SMLCD_Orientation>
	LCD_Clear();
 800554c:	f7fb fa80 	bl	8000a50 <LCD_Clear>
	memset(displayAdcValues,0,sizeof(displayAdcValues));
 8005550:	2254      	movs	r2, #84	; 0x54
 8005552:	2100      	movs	r1, #0
 8005554:	4805      	ldr	r0, [pc, #20]	; (800556c <initializeDisplay+0x70>)
 8005556:	f00d ff78 	bl	801344a <memset>
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bd90      	pop	{r4, r7, pc}
 8005562:	bf00      	nop
 8005564:	20028aac 	.word	0x20028aac
 8005568:	080179d8 	.word	0x080179d8
 800556c:	200310e0 	.word	0x200310e0

08005570 <drawMainMenu>:

void drawMainMenu(int indicator){
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	int i,j;
	previousMenu=0;
 8005578:	4b48      	ldr	r3, [pc, #288]	; (800569c <drawMainMenu+0x12c>)
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
	getLatestADC();
 800557e:	f002 fdbf 	bl	8008100 <getLatestADC>
	LCD_Clear();
 8005582:	f7fb fa65 	bl	8000a50 <LCD_Clear>
	LCD_PixelMode = LCD_PSET;
 8005586:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <drawMainMenu+0x130>)
 8005588:	2200      	movs	r2, #0
 800558a:	701a      	strb	r2, [r3, #0]
	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 800558c:	4b45      	ldr	r3, [pc, #276]	; (80056a4 <drawMainMenu+0x134>)
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	4b44      	ldr	r3, [pc, #272]	; (80056a8 <drawMainMenu+0x138>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	3b01      	subs	r3, #1
 800559a:	b29b      	uxth	r3, r3
 800559c:	2100      	movs	r1, #0
 800559e:	2000      	movs	r0, #0
 80055a0:	f7fb fca8 	bl	8000ef4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 80055a4:	4b3f      	ldr	r3, [pc, #252]	; (80056a4 <drawMainMenu+0x134>)
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	3b03      	subs	r3, #3
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <drawMainMenu+0x138>)
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	3b03      	subs	r3, #3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2102      	movs	r1, #2
 80055b6:	2002      	movs	r0, #2
 80055b8:	f7fb fc9c 	bl	8000ef4 <LCD_Rect>

	// RTC :)
	i  = 10;
 80055bc:	230a      	movs	r3, #10
 80055be:	60bb      	str	r3, [r7, #8]
	j  = 10;
 80055c0:	230a      	movs	r3, #10
 80055c2:	60fb      	str	r3, [r7, #12]
	printFaults(i,j);
 80055c4:	68f9      	ldr	r1, [r7, #12]
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f002 fdc8 	bl	800815c <printFaults>
	//i += LCD_PutStr(i, j, "FAULTS:", fnt7x10);
	//i += LCD_PutStr(i, j, "So many!", fnt7x10);
	i=150;
 80055cc:	2396      	movs	r3, #150	; 0x96
 80055ce:	60bb      	str	r3, [r7, #8]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	b298      	uxth	r0, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	b299      	uxth	r1, r3
 80055d8:	4b34      	ldr	r3, [pc, #208]	; (80056ac <drawMainMenu+0x13c>)
 80055da:	4a35      	ldr	r2, [pc, #212]	; (80056b0 <drawMainMenu+0x140>)
 80055dc:	f7fc f818 	bl	8001610 <LCD_PutStr>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4413      	add	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]
	if(displayAdcValues[Adc.adc0] >VSYS_FLT){
 80055ea:	4b32      	ldr	r3, [pc, #200]	; (80056b4 <drawMainMenu+0x144>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a32      	ldr	r2, [pc, #200]	; (80056b8 <drawMainMenu+0x148>)
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	edd3 7a00 	vldr	s15, [r3]
 80055f8:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80055fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005604:	dd68      	ble.n	80056d8 <drawMainMenu+0x168>
		//errorLED.vsysPMIFault=0;
		switch(bootButtons.bootMode){
 8005606:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <drawMainMenu+0x14c>)
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	2b05      	cmp	r3, #5
 800560c:	d86f      	bhi.n	80056ee <drawMainMenu+0x17e>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <drawMainMenu+0xa4>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	0800562d 	.word	0x0800562d
 8005618:	0800563f 	.word	0x0800563f
 800561c:	08005651 	.word	0x08005651
 8005620:	08005663 	.word	0x08005663
 8005624:	08005687 	.word	0x08005687
 8005628:	08005675 	.word	0x08005675
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	b298      	uxth	r0, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	b299      	uxth	r1, r3
 8005634:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <drawMainMenu+0x13c>)
 8005636:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <drawMainMenu+0x150>)
 8005638:	f7fb ffea 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 800563c:	e057      	b.n	80056ee <drawMainMenu+0x17e>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	b298      	uxth	r0, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	b299      	uxth	r1, r3
 8005646:	4b19      	ldr	r3, [pc, #100]	; (80056ac <drawMainMenu+0x13c>)
 8005648:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <drawMainMenu+0x154>)
 800564a:	f7fb ffe1 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 0;
			break;
 800564e:	e04e      	b.n	80056ee <drawMainMenu+0x17e>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	b298      	uxth	r0, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	b299      	uxth	r1, r3
 8005658:	4b14      	ldr	r3, [pc, #80]	; (80056ac <drawMainMenu+0x13c>)
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <drawMainMenu+0x158>)
 800565c:	f7fb ffd8 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8005660:	e045      	b.n	80056ee <drawMainMenu+0x17e>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	b298      	uxth	r0, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	b299      	uxth	r1, r3
 800566a:	4b10      	ldr	r3, [pc, #64]	; (80056ac <drawMainMenu+0x13c>)
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <drawMainMenu+0x15c>)
 800566e:	f7fb ffcf 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 0;
			//errorLED.edl_boot  = 1;
			break;
 8005672:	e03c      	b.n	80056ee <drawMainMenu+0x17e>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	b298      	uxth	r0, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	b299      	uxth	r1, r3
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <drawMainMenu+0x13c>)
 800567e:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <drawMainMenu+0x160>)
 8005680:	f7fb ffc6 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 1;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 0;
			break;
 8005684:	e033      	b.n	80056ee <drawMainMenu+0x17e>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	b298      	uxth	r0, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	b299      	uxth	r1, r3
 800568e:	4b07      	ldr	r3, [pc, #28]	; (80056ac <drawMainMenu+0x13c>)
 8005690:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <drawMainMenu+0x164>)
 8005692:	f7fb ffbd 	bl	8001610 <LCD_PutStr>
			//errorLED.standard_boot = 0;
			//errorLED.uefi_boot  = 1;
			//errorLED.edl_boot  = 1;
			break;
 8005696:	bf00      	nop
 8005698:	e029      	b.n	80056ee <drawMainMenu+0x17e>
 800569a:	bf00      	nop
 800569c:	20003374 	.word	0x20003374
 80056a0:	20028aa4 	.word	0x20028aa4
 80056a4:	20028aa6 	.word	0x20028aa6
 80056a8:	20028aa8 	.word	0x20028aa8
 80056ac:	08018254 	.word	0x08018254
 80056b0:	080179f8 	.word	0x080179f8
 80056b4:	20000128 	.word	0x20000128
 80056b8:	200310e0 	.word	0x200310e0
 80056bc:	200032ac 	.word	0x200032ac
 80056c0:	08017a00 	.word	0x08017a00
 80056c4:	08017a04 	.word	0x08017a04
 80056c8:	08017a08 	.word	0x08017a08
 80056cc:	08017a10 	.word	0x08017a10
 80056d0:	08017a14 	.word	0x08017a14
 80056d4:	08017a1c 	.word	0x08017a1c
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	b298      	uxth	r0, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	b299      	uxth	r1, r3
 80056e0:	4b96      	ldr	r3, [pc, #600]	; (800593c <drawMainMenu+0x3cc>)
 80056e2:	4a97      	ldr	r2, [pc, #604]	; (8005940 <drawMainMenu+0x3d0>)
 80056e4:	f7fb ff94 	bl	8001610 <LCD_PutStr>
		bootButtons.bootMode=0;
 80056e8:	4b96      	ldr	r3, [pc, #600]	; (8005944 <drawMainMenu+0x3d4>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28
		//errorLED.standard_boot = 0;
		//errorLED.uefi_boot  = 0;
		//errorLED.edl_boot  = 0;

	}
	i  = 135;
 80056ee:	2387      	movs	r3, #135	; 0x87
 80056f0:	60bb      	str	r3, [r7, #8]
	j += 14;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	330e      	adds	r3, #14
 80056f6:	60fb      	str	r3, [r7, #12]

	// Horizontal divider
	LCD_FillRect(2, j, scr_width - 94, j + 3);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	b299      	uxth	r1, r3
 80056fc:	4b92      	ldr	r3, [pc, #584]	; (8005948 <drawMainMenu+0x3d8>)
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	3b5e      	subs	r3, #94	; 0x5e
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	b29b      	uxth	r3, r3
 8005708:	3303      	adds	r3, #3
 800570a:	b29b      	uxth	r3, r3
 800570c:	2002      	movs	r0, #2
 800570e:	f7fb fc33 	bl	8000f78 <LCD_FillRect>

	// Vertical divider
	LCD_FillRect(i + 5, 2, i + 8, j);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	b29b      	uxth	r3, r3
 8005716:	3305      	adds	r3, #5
 8005718:	b298      	uxth	r0, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	b29b      	uxth	r3, r3
 800571e:	3308      	adds	r3, #8
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	b29b      	uxth	r3, r3
 8005726:	2102      	movs	r1, #2
 8005728:	f7fb fc26 	bl	8000f78 <LCD_FillRect>
	LCD_FillRect(scr_width-97, 2, scr_width-94,scr_height-1);
 800572c:	4b86      	ldr	r3, [pc, #536]	; (8005948 <drawMainMenu+0x3d8>)
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	3b61      	subs	r3, #97	; 0x61
 8005732:	b298      	uxth	r0, r3
 8005734:	4b84      	ldr	r3, [pc, #528]	; (8005948 <drawMainMenu+0x3d8>)
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	3b5e      	subs	r3, #94	; 0x5e
 800573a:	b29a      	uxth	r2, r3
 800573c:	4b83      	ldr	r3, [pc, #524]	; (800594c <drawMainMenu+0x3dc>)
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	3b01      	subs	r3, #1
 8005742:	b29b      	uxth	r3, r3
 8005744:	2102      	movs	r1, #2
 8005746:	f7fb fc17 	bl	8000f78 <LCD_FillRect>
	i  = scr_width-90;
 800574a:	4b7f      	ldr	r3, [pc, #508]	; (8005948 <drawMainMenu+0x3d8>)
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	3b5a      	subs	r3, #90	; 0x5a
 8005750:	60bb      	str	r3, [r7, #8]
	j  = 3;
 8005752:	2303      	movs	r3, #3
 8005754:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	b298      	uxth	r0, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b02      	subs	r3, #2
 8005760:	b299      	uxth	r1, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	b29b      	uxth	r3, r3
 8005766:	330c      	adds	r3, #12
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	b29b      	uxth	r3, r3
 800576e:	3308      	adds	r3, #8
 8005770:	b29b      	uxth	r3, r3
 8005772:	f7fb fc01 	bl	8000f78 <LCD_FillRect>
	i+=20;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3314      	adds	r3, #20
 800577a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "ZION FLT", fnt7x10);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	b298      	uxth	r0, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	b299      	uxth	r1, r3
 8005784:	4b6d      	ldr	r3, [pc, #436]	; (800593c <drawMainMenu+0x3cc>)
 8005786:	4a72      	ldr	r2, [pc, #456]	; (8005950 <drawMainMenu+0x3e0>)
 8005788:	f7fb ff42 	bl	8001610 <LCD_PutStr>
	j+=22;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3316      	adds	r3, #22
 8005790:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 8005792:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <drawMainMenu+0x3d8>)
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	3b5a      	subs	r3, #90	; 0x5a
 8005798:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	b298      	uxth	r0, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b02      	subs	r3, #2
 80057a4:	b299      	uxth	r1, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	330c      	adds	r3, #12
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3308      	adds	r3, #8
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f7fb fbdf 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	3314      	adds	r3, #20
 80057be:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "VSYS FLT", fnt7x10);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	b298      	uxth	r0, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	b299      	uxth	r1, r3
 80057c8:	4b5c      	ldr	r3, [pc, #368]	; (800593c <drawMainMenu+0x3cc>)
 80057ca:	4a62      	ldr	r2, [pc, #392]	; (8005954 <drawMainMenu+0x3e4>)
 80057cc:	f7fb ff20 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 80057d0:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <drawMainMenu+0x3d8>)
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	3b5a      	subs	r3, #90	; 0x5a
 80057d6:	60bb      	str	r3, [r7, #8]
	j  += 22;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3316      	adds	r3, #22
 80057dc:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	b298      	uxth	r0, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b02      	subs	r3, #2
 80057e8:	b299      	uxth	r1, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	330c      	adds	r3, #12
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3308      	adds	r3, #8
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f7fb fbbd 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3314      	adds	r3, #20
 8005802:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT3", fnt7x10);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	b298      	uxth	r0, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	b299      	uxth	r1, r3
 800580c:	4b4b      	ldr	r3, [pc, #300]	; (800593c <drawMainMenu+0x3cc>)
 800580e:	4a52      	ldr	r2, [pc, #328]	; (8005958 <drawMainMenu+0x3e8>)
 8005810:	f7fb fefe 	bl	8001610 <LCD_PutStr>
	j+=22;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3316      	adds	r3, #22
 8005818:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 800581a:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <drawMainMenu+0x3d8>)
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	3b5a      	subs	r3, #90	; 0x5a
 8005820:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	b298      	uxth	r0, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b02      	subs	r3, #2
 800582c:	b299      	uxth	r1, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	b29b      	uxth	r3, r3
 8005832:	330c      	adds	r3, #12
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	b29b      	uxth	r3, r3
 800583a:	3308      	adds	r3, #8
 800583c:	b29b      	uxth	r3, r3
 800583e:	f7fb fb9b 	bl	8000f78 <LCD_FillRect>
	i+=20;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3314      	adds	r3, #20
 8005846:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT4", fnt7x10);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	b298      	uxth	r0, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	b299      	uxth	r1, r3
 8005850:	4b3a      	ldr	r3, [pc, #232]	; (800593c <drawMainMenu+0x3cc>)
 8005852:	4a42      	ldr	r2, [pc, #264]	; (800595c <drawMainMenu+0x3ec>)
 8005854:	f7fb fedc 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 8005858:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <drawMainMenu+0x3d8>)
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	3b5a      	subs	r3, #90	; 0x5a
 800585e:	60bb      	str	r3, [r7, #8]
	j  += 22;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3316      	adds	r3, #22
 8005864:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	b298      	uxth	r0, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b02      	subs	r3, #2
 8005870:	b299      	uxth	r1, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	b29b      	uxth	r3, r3
 8005876:	330c      	adds	r3, #12
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	b29b      	uxth	r3, r3
 800587e:	3308      	adds	r3, #8
 8005880:	b29b      	uxth	r3, r3
 8005882:	f7fb fb79 	bl	8000f78 <LCD_FillRect>
	i+=20;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	3314      	adds	r3, #20
 800588a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT5", fnt7x10);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	b298      	uxth	r0, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	b299      	uxth	r1, r3
 8005894:	4b29      	ldr	r3, [pc, #164]	; (800593c <drawMainMenu+0x3cc>)
 8005896:	4a32      	ldr	r2, [pc, #200]	; (8005960 <drawMainMenu+0x3f0>)
 8005898:	f7fb feba 	bl	8001610 <LCD_PutStr>
	j+=22;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3316      	adds	r3, #22
 80058a0:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80058a2:	4b29      	ldr	r3, [pc, #164]	; (8005948 <drawMainMenu+0x3d8>)
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	3b5a      	subs	r3, #90	; 0x5a
 80058a8:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	b298      	uxth	r0, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b02      	subs	r3, #2
 80058b4:	b299      	uxth	r1, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	330c      	adds	r3, #12
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3308      	adds	r3, #8
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f7fb fb57 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3314      	adds	r3, #20
 80058ce:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT6", fnt7x10);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	b298      	uxth	r0, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	b299      	uxth	r1, r3
 80058d8:	4b18      	ldr	r3, [pc, #96]	; (800593c <drawMainMenu+0x3cc>)
 80058da:	4a22      	ldr	r2, [pc, #136]	; (8005964 <drawMainMenu+0x3f4>)
 80058dc:	f7fb fe98 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 80058e0:	4b19      	ldr	r3, [pc, #100]	; (8005948 <drawMainMenu+0x3d8>)
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	3b5a      	subs	r3, #90	; 0x5a
 80058e6:	60bb      	str	r3, [r7, #8]
	j  +=22;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3316      	adds	r3, #22
 80058ec:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	b298      	uxth	r0, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b02      	subs	r3, #2
 80058f8:	b299      	uxth	r1, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	330c      	adds	r3, #12
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	b29b      	uxth	r3, r3
 8005906:	3308      	adds	r3, #8
 8005908:	b29b      	uxth	r3, r3
 800590a:	f7fb fb35 	bl	8000f78 <LCD_FillRect>
	i+=20;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	3314      	adds	r3, #20
 8005912:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT7", fnt7x10);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	b298      	uxth	r0, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	b299      	uxth	r1, r3
 800591c:	4b07      	ldr	r3, [pc, #28]	; (800593c <drawMainMenu+0x3cc>)
 800591e:	4a12      	ldr	r2, [pc, #72]	; (8005968 <drawMainMenu+0x3f8>)
 8005920:	f7fb fe76 	bl	8001610 <LCD_PutStr>
	j+=22;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3316      	adds	r3, #22
 8005928:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <drawMainMenu+0x3d8>)
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	3b5a      	subs	r3, #90	; 0x5a
 8005930:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	b298      	uxth	r0, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	e018      	b.n	800596c <drawMainMenu+0x3fc>
 800593a:	bf00      	nop
 800593c:	08018254 	.word	0x08018254
 8005940:	08017a00 	.word	0x08017a00
 8005944:	200032ac 	.word	0x200032ac
 8005948:	20028aa6 	.word	0x20028aa6
 800594c:	20028aa8 	.word	0x20028aa8
 8005950:	08017a20 	.word	0x08017a20
 8005954:	08017a2c 	.word	0x08017a2c
 8005958:	08017a38 	.word	0x08017a38
 800595c:	08017a40 	.word	0x08017a40
 8005960:	08017a48 	.word	0x08017a48
 8005964:	08017a50 	.word	0x08017a50
 8005968:	08017a58 	.word	0x08017a58
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b02      	subs	r3, #2
 8005970:	b299      	uxth	r1, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	b29b      	uxth	r3, r3
 8005976:	330c      	adds	r3, #12
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	b29b      	uxth	r3, r3
 800597e:	3308      	adds	r3, #8
 8005980:	b29b      	uxth	r3, r3
 8005982:	f7fb faf9 	bl	8000f78 <LCD_FillRect>
	i+=20;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3314      	adds	r3, #20
 800598a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT8", fnt7x10);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	b298      	uxth	r0, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	b299      	uxth	r1, r3
 8005994:	4b6e      	ldr	r3, [pc, #440]	; (8005b50 <drawMainMenu+0x5e0>)
 8005996:	4a6f      	ldr	r2, [pc, #444]	; (8005b54 <drawMainMenu+0x5e4>)
 8005998:	f7fb fe3a 	bl	8001610 <LCD_PutStr>
	i  = scr_width-90;
 800599c:	4b6e      	ldr	r3, [pc, #440]	; (8005b58 <drawMainMenu+0x5e8>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	3b5a      	subs	r3, #90	; 0x5a
 80059a2:	60bb      	str	r3, [r7, #8]
	j  +=22;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3316      	adds	r3, #22
 80059a8:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	b298      	uxth	r0, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b02      	subs	r3, #2
 80059b4:	b299      	uxth	r1, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	330c      	adds	r3, #12
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3308      	adds	r3, #8
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f7fb fad7 	bl	8000f78 <LCD_FillRect>
	i+=20;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3314      	adds	r3, #20
 80059ce:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "FAULT9", fnt7x10);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	b298      	uxth	r0, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	b299      	uxth	r1, r3
 80059d8:	4b5d      	ldr	r3, [pc, #372]	; (8005b50 <drawMainMenu+0x5e0>)
 80059da:	4a60      	ldr	r2, [pc, #384]	; (8005b5c <drawMainMenu+0x5ec>)
 80059dc:	f7fb fe18 	bl	8001610 <LCD_PutStr>
	j = scr_height-20;
 80059e0:	4b5f      	ldr	r3, [pc, #380]	; (8005b60 <drawMainMenu+0x5f0>)
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	3b14      	subs	r3, #20
 80059e6:	60fb      	str	r3, [r7, #12]
	i  = scr_width-90;
 80059e8:	4b5b      	ldr	r3, [pc, #364]	; (8005b58 <drawMainMenu+0x5e8>)
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	3b5a      	subs	r3, #90	; 0x5a
 80059ee:	60bb      	str	r3, [r7, #8]
	LCD_FillRect(i, j - 2, i + 12, j + 8);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	b298      	uxth	r0, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b02      	subs	r3, #2
 80059fa:	b299      	uxth	r1, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	330c      	adds	r3, #12
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3308      	adds	r3, #8
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f7fb fab4 	bl	8000f78 <LCD_FillRect>
	i+=20;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	3314      	adds	r3, #20
 8005a14:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "MODE", fnt7x10);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	b298      	uxth	r0, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	b299      	uxth	r1, r3
 8005a1e:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <drawMainMenu+0x5e0>)
 8005a20:	4a50      	ldr	r2, [pc, #320]	; (8005b64 <drawMainMenu+0x5f4>)
 8005a22:	f7fb fdf5 	bl	8001610 <LCD_PutStr>

	i=100;
 8005a26:	2364      	movs	r3, #100	; 0x64
 8005a28:	60bb      	str	r3, [r7, #8]
	j=75;
 8005a2a:	234b      	movs	r3, #75	; 0x4b
 8005a2c:	60fb      	str	r3, [r7, #12]
	i+=20;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3314      	adds	r3, #20
 8005a32:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "BOOT MODE", fnt7x10);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	b298      	uxth	r0, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	b299      	uxth	r1, r3
 8005a3c:	4b44      	ldr	r3, [pc, #272]	; (8005b50 <drawMainMenu+0x5e0>)
 8005a3e:	4a4a      	ldr	r2, [pc, #296]	; (8005b68 <drawMainMenu+0x5f8>)
 8005a40:	f7fb fde6 	bl	8001610 <LCD_PutStr>
	j+=15;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	330f      	adds	r3, #15
 8005a48:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 71, j + 2);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b03      	subs	r3, #3
 8005a50:	b298      	uxth	r0, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b02      	subs	r3, #2
 8005a58:	b299      	uxth	r1, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3347      	adds	r3, #71	; 0x47
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3302      	adds	r3, #2
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f7fb fa85 	bl	8000f78 <LCD_FillRect>

	i=100;
 8005a6e:	2364      	movs	r3, #100	; 0x64
 8005a70:	60bb      	str	r3, [r7, #8]
	j=110;
 8005a72:	236e      	movs	r3, #110	; 0x6e
 8005a74:	60fb      	str	r3, [r7, #12]
	i+=20;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "STATUS", fnt7x10);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	b298      	uxth	r0, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	b299      	uxth	r1, r3
 8005a84:	4b32      	ldr	r3, [pc, #200]	; (8005b50 <drawMainMenu+0x5e0>)
 8005a86:	4a39      	ldr	r2, [pc, #228]	; (8005b6c <drawMainMenu+0x5fc>)
 8005a88:	f7fb fdc2 	bl	8001610 <LCD_PutStr>
	j+=15;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	330f      	adds	r3, #15
 8005a90:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 50, j + 2);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b03      	subs	r3, #3
 8005a98:	b298      	uxth	r0, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b02      	subs	r3, #2
 8005aa0:	b299      	uxth	r1, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3332      	adds	r3, #50	; 0x32
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3302      	adds	r3, #2
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f7fb fa61 	bl	8000f78 <LCD_FillRect>

	i=100;
 8005ab6:	2364      	movs	r3, #100	; 0x64
 8005ab8:	60bb      	str	r3, [r7, #8]
	j=145;
 8005aba:	2391      	movs	r3, #145	; 0x91
 8005abc:	60fb      	str	r3, [r7, #12]
	i+=20;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	60bb      	str	r3, [r7, #8]
	LCD_PutStr(i, j, "SYSTEM INFO", fnt7x10);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	b298      	uxth	r0, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	b299      	uxth	r1, r3
 8005acc:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <drawMainMenu+0x5e0>)
 8005ace:	4a28      	ldr	r2, [pc, #160]	; (8005b70 <drawMainMenu+0x600>)
 8005ad0:	f7fb fd9e 	bl	8001610 <LCD_PutStr>
	j+=15;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	330f      	adds	r3, #15
 8005ad8:	60fb      	str	r3, [r7, #12]
	LCD_FillRect(i-3, j - 2, i + 85, j + 2);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b03      	subs	r3, #3
 8005ae0:	b298      	uxth	r0, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b02      	subs	r3, #2
 8005ae8:	b299      	uxth	r1, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3355      	adds	r3, #85	; 0x55
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3302      	adds	r3, #2
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f7fb fa3d 	bl	8000f78 <LCD_FillRect>
	i=100;
 8005afe:	2364      	movs	r3, #100	; 0x64
 8005b00:	60bb      	str	r3, [r7, #8]
	switch(indicator){
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d006      	beq.n	8005b16 <drawMainMenu+0x5a6>
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d007      	beq.n	8005b1c <drawMainMenu+0x5ac>
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d108      	bne.n	8005b22 <drawMainMenu+0x5b2>
	case FIRST:
	{
		j=75;
 8005b10:	234b      	movs	r3, #75	; 0x4b
 8005b12:	60fb      	str	r3, [r7, #12]
		break;
 8005b14:	e008      	b.n	8005b28 <drawMainMenu+0x5b8>
	}
	case SECOND:
	{
		j=110;
 8005b16:	236e      	movs	r3, #110	; 0x6e
 8005b18:	60fb      	str	r3, [r7, #12]
		break;
 8005b1a:	e005      	b.n	8005b28 <drawMainMenu+0x5b8>
	}
	case THIRD:
	{
		j=145;
 8005b1c:	2391      	movs	r3, #145	; 0x91
 8005b1e:	60fb      	str	r3, [r7, #12]
		break;
 8005b20:	e002      	b.n	8005b28 <drawMainMenu+0x5b8>
	}
	default:
	{
		j=75;
 8005b22:	234b      	movs	r3, #75	; 0x4b
 8005b24:	60fb      	str	r3, [r7, #12]
		break;
 8005b26:	bf00      	nop
	}
	}
	LCD_FillRect(i, j, i + 12, j + 10);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	b298      	uxth	r0, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	b299      	uxth	r1, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	330c      	adds	r3, #12
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	330a      	adds	r3, #10
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f7fb fa1a 	bl	8000f78 <LCD_FillRect>
	SMLCD_Flush();
 8005b44:	f7fa fdcc 	bl	80006e0 <SMLCD_Flush>
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	08018254 	.word	0x08018254
 8005b54:	08017a60 	.word	0x08017a60
 8005b58:	20028aa6 	.word	0x20028aa6
 8005b5c:	08017a68 	.word	0x08017a68
 8005b60:	20028aa8 	.word	0x20028aa8
 8005b64:	08017a70 	.word	0x08017a70
 8005b68:	08017a78 	.word	0x08017a78
 8005b6c:	08017a84 	.word	0x08017a84
 8005b70:	08017a8c 	.word	0x08017a8c

08005b74 <drawStatusMenu>:

void drawStatusMenu(int indicator){
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b090      	sub	sp, #64	; 0x40
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8005b7c:	2314      	movs	r3, #20
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
	int inputGpioAlignment=245;
 8005b80:	23f5      	movs	r3, #245	; 0xf5
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
	int daughterCardAlignment=240;
 8005b84:	23f0      	movs	r3, #240	; 0xf0
 8005b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i2cCheck;
	int arrowUp = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowDown=1;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowSize=3;
 8005b90:	2303      	movs	r3, #3
 8005b92:	623b      	str	r3, [r7, #32]
	previousMenu=0;
 8005b94:	4b95      	ldr	r3, [pc, #596]	; (8005dec <drawStatusMenu+0x278>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8005b9a:	f7fa ff59 	bl	8000a50 <LCD_Clear>
	getLatestADC();
 8005b9e:	f002 faaf 	bl	8008100 <getLatestADC>
	drawMenuHeader();
 8005ba2:	f002 f9f1 	bl	8007f88 <drawMenuHeader>
	i  = 135;
 8005ba6:	2387      	movs	r3, #135	; 0x87
 8005ba8:	61fb      	str	r3, [r7, #28]
	j = 24;
 8005baa:	2318      	movs	r3, #24
 8005bac:	61bb      	str	r3, [r7, #24]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	b299      	uxth	r1, r3
 8005bb2:	4b8f      	ldr	r3, [pc, #572]	; (8005df0 <drawStatusMenu+0x27c>)
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	3b02      	subs	r3, #2
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2002      	movs	r0, #2
 8005bc4:	f7fb f9d8 	bl	8000f78 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);
	switch(indicator){
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	f000 829a 	beq.w	8006104 <drawStatusMenu+0x590>
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	f001 8037 	beq.w	8006c44 <drawStatusMenu+0x10d0>
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f041 8141 	bne.w	8006e5e <drawStatusMenu+0x12ea>
	case 1:{
		i=35;
 8005bdc:	2323      	movs	r3, #35	; 0x23
 8005bde:	61fb      	str	r3, [r7, #28]
		j=90;
 8005be0:	235a      	movs	r3, #90	; 0x5a
 8005be2:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b02      	subs	r3, #2
 8005bea:	b299      	uxth	r1, r3
 8005bec:	4b80      	ldr	r3, [pc, #512]	; (8005df0 <drawStatusMenu+0x27c>)
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	3b02      	subs	r3, #2
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2002      	movs	r0, #2
 8005bfe:	f7fb f9bb 	bl	8000f78 <LCD_FillRect>
		j=75;
 8005c02:	234b      	movs	r3, #75	; 0x4b
 8005c04:	61bb      	str	r3, [r7, #24]
		i=62;
 8005c06:	233e      	movs	r3, #62	; 0x3e
 8005c08:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "FAULTS:", fnt7x10);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	b298      	uxth	r0, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	b299      	uxth	r1, r3
 8005c12:	4b78      	ldr	r3, [pc, #480]	; (8005df4 <drawStatusMenu+0x280>)
 8005c14:	4a78      	ldr	r2, [pc, #480]	; (8005df8 <drawStatusMenu+0x284>)
 8005c16:	f7fb fcfb 	bl	8001610 <LCD_PutStr>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	61fb      	str	r3, [r7, #28]
		i+=145;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3391      	adds	r3, #145	; 0x91
 8005c28:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "DAUGHTER CARDS:", fnt7x10);
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	b298      	uxth	r0, r3
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	b299      	uxth	r1, r3
 8005c32:	4b70      	ldr	r3, [pc, #448]	; (8005df4 <drawStatusMenu+0x280>)
 8005c34:	4a71      	ldr	r2, [pc, #452]	; (8005dfc <drawStatusMenu+0x288>)
 8005c36:	f7fb fceb 	bl	8001610 <LCD_PutStr>

		i=10;
 8005c3a:	230a      	movs	r3, #10
 8005c3c:	61fb      	str	r3, [r7, #28]
		j=95;
 8005c3e:	235f      	movs	r3, #95	; 0x5f
 8005c40:	61bb      	str	r3, [r7, #24]

		i+= LCD_PutStr(i, j, "ZION FLT: ", fnt7x10);
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	b298      	uxth	r0, r3
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	b299      	uxth	r1, r3
 8005c4a:	4b6a      	ldr	r3, [pc, #424]	; (8005df4 <drawStatusMenu+0x280>)
 8005c4c:	4a6c      	ldr	r2, [pc, #432]	; (8005e00 <drawStatusMenu+0x28c>)
 8005c4e:	f7fb fcdf 	bl	8001610 <LCD_PutStr>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	61fb      	str	r3, [r7, #28]
		if(errorLED.zionFault){
 8005c5c:	4b69      	ldr	r3, [pc, #420]	; (8005e04 <drawStatusMenu+0x290>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <drawStatusMenu+0x102>
			LCD_PutStr(i, j, "SOC ZION ERROR", fnt7x10);
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	b298      	uxth	r0, r3
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	b299      	uxth	r1, r3
 8005c6c:	4b61      	ldr	r3, [pc, #388]	; (8005df4 <drawStatusMenu+0x280>)
 8005c6e:	4a66      	ldr	r2, [pc, #408]	; (8005e08 <drawStatusMenu+0x294>)
 8005c70:	f7fb fcce 	bl	8001610 <LCD_PutStr>
 8005c74:	e007      	b.n	8005c86 <drawStatusMenu+0x112>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	b298      	uxth	r0, r3
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	b299      	uxth	r1, r3
 8005c7e:	4b5d      	ldr	r3, [pc, #372]	; (8005df4 <drawStatusMenu+0x280>)
 8005c80:	4a62      	ldr	r2, [pc, #392]	; (8005e0c <drawStatusMenu+0x298>)
 8005c82:	f7fb fcc5 	bl	8001610 <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	b298      	uxth	r0, r3
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	b299      	uxth	r1, r3
 8005c92:	4b58      	ldr	r3, [pc, #352]	; (8005df4 <drawStatusMenu+0x280>)
 8005c94:	4a5e      	ldr	r2, [pc, #376]	; (8005e10 <drawStatusMenu+0x29c>)
 8005c96:	f7fb fcbb 	bl	8001610 <LCD_PutStr>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	61fb      	str	r3, [r7, #28]
		if(ZION.SOC_EEPROM_Detected){
 8005ca4:	4b5b      	ldr	r3, [pc, #364]	; (8005e14 <drawStatusMenu+0x2a0>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <drawStatusMenu+0x14a>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	b298      	uxth	r0, r3
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	b299      	uxth	r1, r3
 8005cb4:	4b4f      	ldr	r3, [pc, #316]	; (8005df4 <drawStatusMenu+0x280>)
 8005cb6:	4a58      	ldr	r2, [pc, #352]	; (8005e18 <drawStatusMenu+0x2a4>)
 8005cb8:	f7fb fcaa 	bl	8001610 <LCD_PutStr>
 8005cbc:	e007      	b.n	8005cce <drawStatusMenu+0x15a>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	b298      	uxth	r0, r3
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	b299      	uxth	r1, r3
 8005cc6:	4b4b      	ldr	r3, [pc, #300]	; (8005df4 <drawStatusMenu+0x280>)
 8005cc8:	4a54      	ldr	r2, [pc, #336]	; (8005e1c <drawStatusMenu+0x2a8>)
 8005cca:	f7fb fca1 	bl	8001610 <LCD_PutStr>
		}
		i=10;
 8005cce:	230a      	movs	r3, #10
 8005cd0:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	330f      	adds	r3, #15
 8005cd6:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "VSYS_PMI: ", fnt7x10);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	b298      	uxth	r0, r3
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	b299      	uxth	r1, r3
 8005ce0:	4b44      	ldr	r3, [pc, #272]	; (8005df4 <drawStatusMenu+0x280>)
 8005ce2:	4a4f      	ldr	r2, [pc, #316]	; (8005e20 <drawStatusMenu+0x2ac>)
 8005ce4:	f7fb fc94 	bl	8001610 <LCD_PutStr>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	61fb      	str	r3, [r7, #28]
		if(errorLED.vsysPMIFault){
 8005cf2:	4b44      	ldr	r3, [pc, #272]	; (8005e04 <drawStatusMenu+0x290>)
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <drawStatusMenu+0x198>
			LCD_PutStr(i, j, "VSYS PMI LOW", fnt7x10);
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	b298      	uxth	r0, r3
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	b299      	uxth	r1, r3
 8005d02:	4b3c      	ldr	r3, [pc, #240]	; (8005df4 <drawStatusMenu+0x280>)
 8005d04:	4a47      	ldr	r2, [pc, #284]	; (8005e24 <drawStatusMenu+0x2b0>)
 8005d06:	f7fb fc83 	bl	8001610 <LCD_PutStr>
 8005d0a:	e007      	b.n	8005d1c <drawStatusMenu+0x1a8>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	b298      	uxth	r0, r3
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	b299      	uxth	r1, r3
 8005d14:	4b37      	ldr	r3, [pc, #220]	; (8005df4 <drawStatusMenu+0x280>)
 8005d16:	4a3d      	ldr	r2, [pc, #244]	; (8005e0c <drawStatusMenu+0x298>)
 8005d18:	f7fb fc7a 	bl	8001610 <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	b298      	uxth	r0, r3
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	b299      	uxth	r1, r3
 8005d28:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <drawStatusMenu+0x280>)
 8005d2a:	4a3f      	ldr	r2, [pc, #252]	; (8005e28 <drawStatusMenu+0x2b4>)
 8005d2c:	f7fb fc70 	bl	8001610 <LCD_PutStr>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461a      	mov	r2, r3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	4413      	add	r3, r2
 8005d38:	61fb      	str	r3, [r7, #28]
		if(ZION.ASIC_EEPROM_Detected){
 8005d3a:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <drawStatusMenu+0x2a0>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <drawStatusMenu+0x1e0>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	b298      	uxth	r0, r3
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	b299      	uxth	r1, r3
 8005d4a:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <drawStatusMenu+0x280>)
 8005d4c:	4a32      	ldr	r2, [pc, #200]	; (8005e18 <drawStatusMenu+0x2a4>)
 8005d4e:	f7fb fc5f 	bl	8001610 <LCD_PutStr>
 8005d52:	e007      	b.n	8005d64 <drawStatusMenu+0x1f0>
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	b298      	uxth	r0, r3
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	b299      	uxth	r1, r3
 8005d5c:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <drawStatusMenu+0x280>)
 8005d5e:	4a2f      	ldr	r2, [pc, #188]	; (8005e1c <drawStatusMenu+0x2a8>)
 8005d60:	f7fb fc56 	bl	8001610 <LCD_PutStr>
		}
		i=10;
 8005d64:	230a      	movs	r3, #10
 8005d66:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	330f      	adds	r3, #15
 8005d6c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault3: ", fnt7x10);
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	b298      	uxth	r0, r3
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	b299      	uxth	r1, r3
 8005d76:	4b1f      	ldr	r3, [pc, #124]	; (8005df4 <drawStatusMenu+0x280>)
 8005d78:	4a2c      	ldr	r2, [pc, #176]	; (8005e2c <drawStatusMenu+0x2b8>)
 8005d7a:	f7fb fc49 	bl	8001610 <LCD_PutStr>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault3){
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <drawStatusMenu+0x290>)
 8005d8a:	789b      	ldrb	r3, [r3, #2]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <drawStatusMenu+0x22e>
			LCD_PutStr(i, j, "FAULT 3 Triggered", fnt7x10);
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	b298      	uxth	r0, r3
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	b299      	uxth	r1, r3
 8005d98:	4b16      	ldr	r3, [pc, #88]	; (8005df4 <drawStatusMenu+0x280>)
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <drawStatusMenu+0x2bc>)
 8005d9c:	f7fb fc38 	bl	8001610 <LCD_PutStr>
 8005da0:	e007      	b.n	8005db2 <drawStatusMenu+0x23e>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	b298      	uxth	r0, r3
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	b299      	uxth	r1, r3
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <drawStatusMenu+0x280>)
 8005dac:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <drawStatusMenu+0x298>)
 8005dae:	f7fb fc2f 	bl	8001610 <LCD_PutStr>
		}
		i=daughterCardAlignment;
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "Display: ", fnt7x10);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	b298      	uxth	r0, r3
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	b299      	uxth	r1, r3
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <drawStatusMenu+0x280>)
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <drawStatusMenu+0x2c0>)
 8005dc2:	f7fb fc25 	bl	8001610 <LCD_PutStr>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	61fb      	str	r3, [r7, #28]
		if(ZION.DISPLAY_EEPROM_Detected){
 8005dd0:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <drawStatusMenu+0x2a0>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d02f      	beq.n	8005e38 <drawStatusMenu+0x2c4>
			LCD_PutStr(i,j,"Detected", fnt7x10);
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	b298      	uxth	r0, r3
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	b299      	uxth	r1, r3
 8005de0:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <drawStatusMenu+0x280>)
 8005de2:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <drawStatusMenu+0x2a4>)
 8005de4:	f7fb fc14 	bl	8001610 <LCD_PutStr>
 8005de8:	e02e      	b.n	8005e48 <drawStatusMenu+0x2d4>
 8005dea:	bf00      	nop
 8005dec:	20003374 	.word	0x20003374
 8005df0:	20028aa6 	.word	0x20028aa6
 8005df4:	08018254 	.word	0x08018254
 8005df8:	08017a98 	.word	0x08017a98
 8005dfc:	08017aa0 	.word	0x08017aa0
 8005e00:	08017ab0 	.word	0x08017ab0
 8005e04:	200032d8 	.word	0x200032d8
 8005e08:	08017abc 	.word	0x08017abc
 8005e0c:	08017acc 	.word	0x08017acc
 8005e10:	08017ad4 	.word	0x08017ad4
 8005e14:	20003274 	.word	0x20003274
 8005e18:	08017adc 	.word	0x08017adc
 8005e1c:	08017ae8 	.word	0x08017ae8
 8005e20:	08017af4 	.word	0x08017af4
 8005e24:	08017b00 	.word	0x08017b00
 8005e28:	08017b10 	.word	0x08017b10
 8005e2c:	08017b18 	.word	0x08017b18
 8005e30:	08017b24 	.word	0x08017b24
 8005e34:	08017b38 	.word	0x08017b38
		}
		else{
			LCD_PutStr(i,j,"Undetected", fnt7x10);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	b298      	uxth	r0, r3
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	b299      	uxth	r1, r3
 8005e40:	4b72      	ldr	r3, [pc, #456]	; (800600c <drawStatusMenu+0x498>)
 8005e42:	4a73      	ldr	r2, [pc, #460]	; (8006010 <drawStatusMenu+0x49c>)
 8005e44:	f7fb fbe4 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005e48:	230a      	movs	r3, #10
 8005e4a:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	330f      	adds	r3, #15
 8005e50:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault4: ", fnt7x10);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	b298      	uxth	r0, r3
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	b299      	uxth	r1, r3
 8005e5a:	4b6c      	ldr	r3, [pc, #432]	; (800600c <drawStatusMenu+0x498>)
 8005e5c:	4a6d      	ldr	r2, [pc, #436]	; (8006014 <drawStatusMenu+0x4a0>)
 8005e5e:	f7fb fbd7 	bl	8001610 <LCD_PutStr>
 8005e62:	4603      	mov	r3, r0
 8005e64:	461a      	mov	r2, r3
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault4){
 8005e6c:	4b6a      	ldr	r3, [pc, #424]	; (8006018 <drawStatusMenu+0x4a4>)
 8005e6e:	78db      	ldrb	r3, [r3, #3]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <drawStatusMenu+0x312>
			LCD_PutStr(i, j, "FAULT 4 Triggered", fnt7x10);
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	b298      	uxth	r0, r3
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	b299      	uxth	r1, r3
 8005e7c:	4b63      	ldr	r3, [pc, #396]	; (800600c <drawStatusMenu+0x498>)
 8005e7e:	4a67      	ldr	r2, [pc, #412]	; (800601c <drawStatusMenu+0x4a8>)
 8005e80:	f7fb fbc6 	bl	8001610 <LCD_PutStr>
 8005e84:	e007      	b.n	8005e96 <drawStatusMenu+0x322>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	b298      	uxth	r0, r3
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	b299      	uxth	r1, r3
 8005e8e:	4b5f      	ldr	r3, [pc, #380]	; (800600c <drawStatusMenu+0x498>)
 8005e90:	4a63      	ldr	r2, [pc, #396]	; (8006020 <drawStatusMenu+0x4ac>)
 8005e92:	f7fb fbbd 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005e96:	230a      	movs	r3, #10
 8005e98:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	330f      	adds	r3, #15
 8005e9e:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault5: ", fnt7x10);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	b298      	uxth	r0, r3
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	b299      	uxth	r1, r3
 8005ea8:	4b58      	ldr	r3, [pc, #352]	; (800600c <drawStatusMenu+0x498>)
 8005eaa:	4a5e      	ldr	r2, [pc, #376]	; (8006024 <drawStatusMenu+0x4b0>)
 8005eac:	f7fb fbb0 	bl	8001610 <LCD_PutStr>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault5){
 8005eba:	4b57      	ldr	r3, [pc, #348]	; (8006018 <drawStatusMenu+0x4a4>)
 8005ebc:	791b      	ldrb	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <drawStatusMenu+0x360>
			LCD_PutStr(i, j, "FAULT 5 Triggered", fnt7x10);
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	b298      	uxth	r0, r3
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	b299      	uxth	r1, r3
 8005eca:	4b50      	ldr	r3, [pc, #320]	; (800600c <drawStatusMenu+0x498>)
 8005ecc:	4a56      	ldr	r2, [pc, #344]	; (8006028 <drawStatusMenu+0x4b4>)
 8005ece:	f7fb fb9f 	bl	8001610 <LCD_PutStr>
 8005ed2:	e007      	b.n	8005ee4 <drawStatusMenu+0x370>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	b298      	uxth	r0, r3
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	b299      	uxth	r1, r3
 8005edc:	4b4b      	ldr	r3, [pc, #300]	; (800600c <drawStatusMenu+0x498>)
 8005ede:	4a50      	ldr	r2, [pc, #320]	; (8006020 <drawStatusMenu+0x4ac>)
 8005ee0:	f7fb fb96 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005ee4:	230a      	movs	r3, #10
 8005ee6:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	330f      	adds	r3, #15
 8005eec:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault6: ", fnt7x10);
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	b298      	uxth	r0, r3
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	b299      	uxth	r1, r3
 8005ef6:	4b45      	ldr	r3, [pc, #276]	; (800600c <drawStatusMenu+0x498>)
 8005ef8:	4a4c      	ldr	r2, [pc, #304]	; (800602c <drawStatusMenu+0x4b8>)
 8005efa:	f7fb fb89 	bl	8001610 <LCD_PutStr>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault6){
 8005f08:	4b43      	ldr	r3, [pc, #268]	; (8006018 <drawStatusMenu+0x4a4>)
 8005f0a:	795b      	ldrb	r3, [r3, #5]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <drawStatusMenu+0x3ae>
			LCD_PutStr(i, j, "FAULT 6 Triggered", fnt7x10);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	b298      	uxth	r0, r3
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	b299      	uxth	r1, r3
 8005f18:	4b3c      	ldr	r3, [pc, #240]	; (800600c <drawStatusMenu+0x498>)
 8005f1a:	4a45      	ldr	r2, [pc, #276]	; (8006030 <drawStatusMenu+0x4bc>)
 8005f1c:	f7fb fb78 	bl	8001610 <LCD_PutStr>
 8005f20:	e007      	b.n	8005f32 <drawStatusMenu+0x3be>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	b298      	uxth	r0, r3
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	4b38      	ldr	r3, [pc, #224]	; (800600c <drawStatusMenu+0x498>)
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	; (8006020 <drawStatusMenu+0x4ac>)
 8005f2e:	f7fb fb6f 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005f32:	230a      	movs	r3, #10
 8005f34:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	330f      	adds	r3, #15
 8005f3a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault7: ", fnt7x10);
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	b299      	uxth	r1, r3
 8005f44:	4b31      	ldr	r3, [pc, #196]	; (800600c <drawStatusMenu+0x498>)
 8005f46:	4a3b      	ldr	r2, [pc, #236]	; (8006034 <drawStatusMenu+0x4c0>)
 8005f48:	f7fb fb62 	bl	8001610 <LCD_PutStr>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault7){
 8005f56:	4b30      	ldr	r3, [pc, #192]	; (8006018 <drawStatusMenu+0x4a4>)
 8005f58:	799b      	ldrb	r3, [r3, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <drawStatusMenu+0x3fc>
			LCD_PutStr(i, j, "FAULT 7 Triggered", fnt7x10);
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	b298      	uxth	r0, r3
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	b299      	uxth	r1, r3
 8005f66:	4b29      	ldr	r3, [pc, #164]	; (800600c <drawStatusMenu+0x498>)
 8005f68:	4a33      	ldr	r2, [pc, #204]	; (8006038 <drawStatusMenu+0x4c4>)
 8005f6a:	f7fb fb51 	bl	8001610 <LCD_PutStr>
 8005f6e:	e007      	b.n	8005f80 <drawStatusMenu+0x40c>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	b298      	uxth	r0, r3
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	b299      	uxth	r1, r3
 8005f78:	4b24      	ldr	r3, [pc, #144]	; (800600c <drawStatusMenu+0x498>)
 8005f7a:	4a29      	ldr	r2, [pc, #164]	; (8006020 <drawStatusMenu+0x4ac>)
 8005f7c:	f7fb fb48 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005f80:	230a      	movs	r3, #10
 8005f82:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	330f      	adds	r3, #15
 8005f88:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault8: ", fnt7x10);
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	b298      	uxth	r0, r3
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	b299      	uxth	r1, r3
 8005f92:	4b1e      	ldr	r3, [pc, #120]	; (800600c <drawStatusMenu+0x498>)
 8005f94:	4a29      	ldr	r2, [pc, #164]	; (800603c <drawStatusMenu+0x4c8>)
 8005f96:	f7fb fb3b 	bl	8001610 <LCD_PutStr>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault8){
 8005fa4:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <drawStatusMenu+0x4a4>)
 8005fa6:	7adb      	ldrb	r3, [r3, #11]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <drawStatusMenu+0x44a>
			LCD_PutStr(i, j, "FAULT 8 Triggered", fnt7x10);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	b298      	uxth	r0, r3
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	b299      	uxth	r1, r3
 8005fb4:	4b15      	ldr	r3, [pc, #84]	; (800600c <drawStatusMenu+0x498>)
 8005fb6:	4a22      	ldr	r2, [pc, #136]	; (8006040 <drawStatusMenu+0x4cc>)
 8005fb8:	f7fb fb2a 	bl	8001610 <LCD_PutStr>
 8005fbc:	e007      	b.n	8005fce <drawStatusMenu+0x45a>
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	b298      	uxth	r0, r3
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	b299      	uxth	r1, r3
 8005fc6:	4b11      	ldr	r3, [pc, #68]	; (800600c <drawStatusMenu+0x498>)
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <drawStatusMenu+0x4ac>)
 8005fca:	f7fb fb21 	bl	8001610 <LCD_PutStr>
		}

		i=10;
 8005fce:	230a      	movs	r3, #10
 8005fd0:	61fb      	str	r3, [r7, #28]
		j+=15;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	330f      	adds	r3, #15
 8005fd6:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Fault9: ", fnt7x10);
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	b298      	uxth	r0, r3
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	b299      	uxth	r1, r3
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <drawStatusMenu+0x498>)
 8005fe2:	4a18      	ldr	r2, [pc, #96]	; (8006044 <drawStatusMenu+0x4d0>)
 8005fe4:	f7fb fb14 	bl	8001610 <LCD_PutStr>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	61fb      	str	r3, [r7, #28]
		if(errorLED.fault9){
 8005ff2:	4b09      	ldr	r3, [pc, #36]	; (8006018 <drawStatusMenu+0x4a4>)
 8005ff4:	7b1b      	ldrb	r3, [r3, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d028      	beq.n	800604c <drawStatusMenu+0x4d8>
			LCD_PutStr(i, j, "FAULT 9 Triggered", fnt7x10);
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	b298      	uxth	r0, r3
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	b299      	uxth	r1, r3
 8006002:	4b02      	ldr	r3, [pc, #8]	; (800600c <drawStatusMenu+0x498>)
 8006004:	4a10      	ldr	r2, [pc, #64]	; (8006048 <drawStatusMenu+0x4d4>)
 8006006:	f7fb fb03 	bl	8001610 <LCD_PutStr>
 800600a:	e027      	b.n	800605c <drawStatusMenu+0x4e8>
 800600c:	08018254 	.word	0x08018254
 8006010:	08017ae8 	.word	0x08017ae8
 8006014:	08017b44 	.word	0x08017b44
 8006018:	200032d8 	.word	0x200032d8
 800601c:	08017b50 	.word	0x08017b50
 8006020:	08017acc 	.word	0x08017acc
 8006024:	08017b64 	.word	0x08017b64
 8006028:	08017b70 	.word	0x08017b70
 800602c:	08017b84 	.word	0x08017b84
 8006030:	08017b90 	.word	0x08017b90
 8006034:	08017ba4 	.word	0x08017ba4
 8006038:	08017bb0 	.word	0x08017bb0
 800603c:	08017bc4 	.word	0x08017bc4
 8006040:	08017bd0 	.word	0x08017bd0
 8006044:	08017be4 	.word	0x08017be4
 8006048:	08017bf0 	.word	0x08017bf0
		}
		else{
			LCD_PutStr(i, j, "Clear", fnt7x10);
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	b298      	uxth	r0, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	b299      	uxth	r1, r3
 8006054:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <drawStatusMenu+0x580>)
 8006056:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <drawStatusMenu+0x584>)
 8006058:	f7fb fada 	bl	8001610 <LCD_PutStr>
		}


		//horizontal divider
		j=65;
 800605c:	2341      	movs	r3, #65	; 0x41
 800605e:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b299      	uxth	r1, r3
 8006068:	4b24      	ldr	r3, [pc, #144]	; (80060fc <drawStatusMenu+0x588>)
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	3b02      	subs	r3, #2
 800606e:	b29a      	uxth	r2, r3
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	b29b      	uxth	r3, r3
 8006074:	3301      	adds	r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	2002      	movs	r0, #2
 800607a:	f7fa ff7d 	bl	8000f78 <LCD_FillRect>
		//vertical divider
		i=230;
 800607e:	23e6      	movs	r3, #230	; 0xe6
 8006080:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b03      	subs	r3, #3
 8006088:	b298      	uxth	r0, r3
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	b299      	uxth	r1, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	b29b      	uxth	r3, r3
 8006092:	3303      	adds	r3, #3
 8006094:	b29a      	uxth	r2, r3
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <drawStatusMenu+0x58c>)
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	3b02      	subs	r3, #2
 800609c:	b29b      	uxth	r3, r3
 800609e:	f7fa ff6b 	bl	8000f78 <LCD_FillRect>

		i=200;
 80060a2:	23c8      	movs	r3, #200	; 0xc8
 80060a4:	61fb      	str	r3, [r7, #28]
		j=220;
 80060a6:	23dc      	movs	r3, #220	; 0xdc
 80060a8:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	b298      	uxth	r0, r3
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	b299      	uxth	r1, r3
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f7fb fbf9 	bl	80018b0 <drawUpDownArrow>
		i=180;
 80060be:	23b4      	movs	r3, #180	; 0xb4
 80060c0:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	b298      	uxth	r0, r3
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	b299      	uxth	r1, r3
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f7fb fbed 	bl	80018b0 <drawUpDownArrow>
		i=220;
 80060d6:	23dc      	movs	r3, #220	; 0xdc
 80060d8:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	b298      	uxth	r0, r3
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	b299      	uxth	r1, r3
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f7fb fbe1 	bl	80018b0 <drawUpDownArrow>
		break;
 80060ee:	f000 beb6 	b.w	8006e5e <drawStatusMenu+0x12ea>
 80060f2:	bf00      	nop
 80060f4:	08018254 	.word	0x08018254
 80060f8:	08017acc 	.word	0x08017acc
 80060fc:	20028aa6 	.word	0x20028aa6
 8006100:	20028aa8 	.word	0x20028aa8
	}
	case 2:{
		i=35;
 8006104:	2323      	movs	r3, #35	; 0x23
 8006106:	61fb      	str	r3, [r7, #28]
		j=90;
 8006108:	235a      	movs	r3, #90	; 0x5a
 800610a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b02      	subs	r3, #2
 8006112:	b299      	uxth	r1, r3
 8006114:	4ba4      	ldr	r3, [pc, #656]	; (80063a8 <drawStatusMenu+0x834>)
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	3b02      	subs	r3, #2
 800611a:	b29a      	uxth	r2, r3
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	b29b      	uxth	r3, r3
 8006120:	3302      	adds	r3, #2
 8006122:	b29b      	uxth	r3, r3
 8006124:	2002      	movs	r0, #2
 8006126:	f7fa ff27 	bl	8000f78 <LCD_FillRect>
		j=75;
 800612a:	234b      	movs	r3, #75	; 0x4b
 800612c:	61bb      	str	r3, [r7, #24]
		i=42;
 800612e:	232a      	movs	r3, #42	; 0x2a
 8006130:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "AI VOLTAGES:", fnt7x10);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	b298      	uxth	r0, r3
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	b299      	uxth	r1, r3
 800613a:	4b9c      	ldr	r3, [pc, #624]	; (80063ac <drawStatusMenu+0x838>)
 800613c:	4a9c      	ldr	r2, [pc, #624]	; (80063b0 <drawStatusMenu+0x83c>)
 800613e:	f7fb fa67 	bl	8001610 <LCD_PutStr>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	61fb      	str	r3, [r7, #28]
		i+=125;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	337d      	adds	r3, #125	; 0x7d
 8006150:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "GPIO INPUTS:", fnt7x10);
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	b298      	uxth	r0, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	b299      	uxth	r1, r3
 800615a:	4b94      	ldr	r3, [pc, #592]	; (80063ac <drawStatusMenu+0x838>)
 800615c:	4a95      	ldr	r2, [pc, #596]	; (80063b4 <drawStatusMenu+0x840>)
 800615e:	f7fb fa57 	bl	8001610 <LCD_PutStr>

		i=10;
 8006162:	230a      	movs	r3, #10
 8006164:	61fb      	str	r3, [r7, #28]
		j=95;
 8006166:	235f      	movs	r3, #95	; 0x5f
 8006168:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI0: ", fnt7x10);
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	b298      	uxth	r0, r3
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	b299      	uxth	r1, r3
 8006172:	4b8e      	ldr	r3, [pc, #568]	; (80063ac <drawStatusMenu+0x838>)
 8006174:	4a90      	ldr	r2, [pc, #576]	; (80063b8 <drawStatusMenu+0x844>)
 8006176:	f7fb fa4b 	bl	8001610 <LCD_PutStr>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc0];
 8006184:	4b8d      	ldr	r3, [pc, #564]	; (80063bc <drawStatusMenu+0x848>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a8d      	ldr	r2, [pc, #564]	; (80063c0 <drawStatusMenu+0x84c>)
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	edd3 7a00 	vldr	s15, [r3]
 8006192:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80063c4 <drawStatusMenu+0x850>
 8006196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800619a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619e:	ee17 3a90 	vmov	r3, s15
 80061a2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	b298      	uxth	r0, r3
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b299      	uxth	r1, r3
 80061ac:	4b7f      	ldr	r3, [pc, #508]	; (80063ac <drawStatusMenu+0x838>)
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	2303      	movs	r3, #3
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	f7fb faca 	bl	800174c <LCD_PutIntF>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	4413      	add	r3, r2
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI9: ", fnt7x10);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	b298      	uxth	r0, r3
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	b299      	uxth	r1, r3
 80061ce:	4b77      	ldr	r3, [pc, #476]	; (80063ac <drawStatusMenu+0x838>)
 80061d0:	4a7d      	ldr	r2, [pc, #500]	; (80063c8 <drawStatusMenu+0x854>)
 80061d2:	f7fb fa1d 	bl	8001610 <LCD_PutStr>
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc9];
 80061e0:	4b76      	ldr	r3, [pc, #472]	; (80063bc <drawStatusMenu+0x848>)
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	4a76      	ldr	r2, [pc, #472]	; (80063c0 <drawStatusMenu+0x84c>)
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	edd3 7a00 	vldr	s15, [r3]
 80061ee:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80063c4 <drawStatusMenu+0x850>
 80061f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061fa:	ee17 3a90 	vmov	r3, s15
 80061fe:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	b298      	uxth	r0, r3
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	b299      	uxth	r1, r3
 8006208:	4b68      	ldr	r3, [pc, #416]	; (80063ac <drawStatusMenu+0x838>)
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2303      	movs	r3, #3
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f7fb fa9c 	bl	800174c <LCD_PutIntF>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In0: ", fnt7x10);
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	b298      	uxth	r0, r3
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	b299      	uxth	r1, r3
 800622a:	4b60      	ldr	r3, [pc, #384]	; (80063ac <drawStatusMenu+0x838>)
 800622c:	4a67      	ldr	r2, [pc, #412]	; (80063cc <drawStatusMenu+0x858>)
 800622e:	f7fb f9ef 	bl	8001610 <LCD_PutStr>
 8006232:	4603      	mov	r3, r0
 8006234:	461a      	mov	r2, r3
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input0], fnt7x10)+adjacentSpacing;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	b298      	uxth	r0, r3
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b299      	uxth	r1, r3
 8006244:	4b62      	ldr	r3, [pc, #392]	; (80063d0 <drawStatusMenu+0x85c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a62      	ldr	r2, [pc, #392]	; (80063d4 <drawStatusMenu+0x860>)
 800624a:	5cd3      	ldrb	r3, [r2, r3]
 800624c:	461a      	mov	r2, r3
 800624e:	4b57      	ldr	r3, [pc, #348]	; (80063ac <drawStatusMenu+0x838>)
 8006250:	f7fb fa16 	bl	8001680 <LCD_PutInt>
 8006254:	4603      	mov	r3, r0
 8006256:	461a      	mov	r2, r3
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	4413      	add	r3, r2
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	4413      	add	r3, r2
 8006260:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In9: ", fnt7x10);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	b298      	uxth	r0, r3
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	b299      	uxth	r1, r3
 800626a:	4b50      	ldr	r3, [pc, #320]	; (80063ac <drawStatusMenu+0x838>)
 800626c:	4a5a      	ldr	r2, [pc, #360]	; (80063d8 <drawStatusMenu+0x864>)
 800626e:	f7fb f9cf 	bl	8001610 <LCD_PutStr>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input9], fnt7x10);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	b298      	uxth	r0, r3
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	b299      	uxth	r1, r3
 8006284:	4b52      	ldr	r3, [pc, #328]	; (80063d0 <drawStatusMenu+0x85c>)
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	4a52      	ldr	r2, [pc, #328]	; (80063d4 <drawStatusMenu+0x860>)
 800628a:	5cd3      	ldrb	r3, [r2, r3]
 800628c:	461a      	mov	r2, r3
 800628e:	4b47      	ldr	r3, [pc, #284]	; (80063ac <drawStatusMenu+0x838>)
 8006290:	f7fb f9f6 	bl	8001680 <LCD_PutInt>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	61fb      	str	r3, [r7, #28]


		i=10;
 800629e:	230a      	movs	r3, #10
 80062a0:	61fb      	str	r3, [r7, #28]
		j+=15;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	330f      	adds	r3, #15
 80062a6:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI1: ", fnt7x10);
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	b298      	uxth	r0, r3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	b299      	uxth	r1, r3
 80062b0:	4b3e      	ldr	r3, [pc, #248]	; (80063ac <drawStatusMenu+0x838>)
 80062b2:	4a4a      	ldr	r2, [pc, #296]	; (80063dc <drawStatusMenu+0x868>)
 80062b4:	f7fb f9ac 	bl	8001610 <LCD_PutStr>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc1];
 80062c2:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <drawStatusMenu+0x848>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4a3e      	ldr	r2, [pc, #248]	; (80063c0 <drawStatusMenu+0x84c>)
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	edd3 7a00 	vldr	s15, [r3]
 80062d0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80063c4 <drawStatusMenu+0x850>
 80062d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062dc:	ee17 3a90 	vmov	r3, s15
 80062e0:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	b298      	uxth	r0, r3
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	b299      	uxth	r1, r3
 80062ea:	4b30      	ldr	r3, [pc, #192]	; (80063ac <drawStatusMenu+0x838>)
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	2303      	movs	r3, #3
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	f7fb fa2b 	bl	800174c <LCD_PutIntF>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	4413      	add	r3, r2
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI10: ", fnt7x10);
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	b298      	uxth	r0, r3
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	b299      	uxth	r1, r3
 800630c:	4b27      	ldr	r3, [pc, #156]	; (80063ac <drawStatusMenu+0x838>)
 800630e:	4a34      	ldr	r2, [pc, #208]	; (80063e0 <drawStatusMenu+0x86c>)
 8006310:	f7fb f97e 	bl	8001610 <LCD_PutStr>
 8006314:	4603      	mov	r3, r0
 8006316:	461a      	mov	r2, r3
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc10];
 800631e:	4b27      	ldr	r3, [pc, #156]	; (80063bc <drawStatusMenu+0x848>)
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	4a27      	ldr	r2, [pc, #156]	; (80063c0 <drawStatusMenu+0x84c>)
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	edd3 7a00 	vldr	s15, [r3]
 800632c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80063c4 <drawStatusMenu+0x850>
 8006330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006338:	ee17 3a90 	vmov	r3, s15
 800633c:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	b298      	uxth	r0, r3
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	b299      	uxth	r1, r3
 8006346:	4b19      	ldr	r3, [pc, #100]	; (80063ac <drawStatusMenu+0x838>)
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	2303      	movs	r3, #3
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	f7fb f9fd 	bl	800174c <LCD_PutIntF>
 8006352:	4603      	mov	r3, r0
 8006354:	461a      	mov	r2, r3
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In1: ", fnt7x10);
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	b298      	uxth	r0, r3
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	b299      	uxth	r1, r3
 8006368:	4b10      	ldr	r3, [pc, #64]	; (80063ac <drawStatusMenu+0x838>)
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <drawStatusMenu+0x870>)
 800636c:	f7fb f950 	bl	8001610 <LCD_PutStr>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input1], fnt7x10)+adjacentSpacing;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	b298      	uxth	r0, r3
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	b299      	uxth	r1, r3
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <drawStatusMenu+0x85c>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <drawStatusMenu+0x860>)
 8006388:	5cd3      	ldrb	r3, [r2, r3]
 800638a:	461a      	mov	r2, r3
 800638c:	4b07      	ldr	r3, [pc, #28]	; (80063ac <drawStatusMenu+0x838>)
 800638e:	f7fb f977 	bl	8001680 <LCD_PutInt>
 8006392:	4603      	mov	r3, r0
 8006394:	461a      	mov	r2, r3
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	4413      	add	r3, r2
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In10: ", fnt7x10);
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	b298      	uxth	r0, r3
 80063a4:	e020      	b.n	80063e8 <drawStatusMenu+0x874>
 80063a6:	bf00      	nop
 80063a8:	20028aa6 	.word	0x20028aa6
 80063ac:	08018254 	.word	0x08018254
 80063b0:	08017c04 	.word	0x08017c04
 80063b4:	08017c14 	.word	0x08017c14
 80063b8:	08017c24 	.word	0x08017c24
 80063bc:	20000128 	.word	0x20000128
 80063c0:	200310e0 	.word	0x200310e0
 80063c4:	447a0000 	.word	0x447a0000
 80063c8:	08017c2c 	.word	0x08017c2c
 80063cc:	08017c34 	.word	0x08017c34
 80063d0:	200000f8 	.word	0x200000f8
 80063d4:	20028d34 	.word	0x20028d34
 80063d8:	08017c3c 	.word	0x08017c3c
 80063dc:	08017c44 	.word	0x08017c44
 80063e0:	08017c4c 	.word	0x08017c4c
 80063e4:	08017c54 	.word	0x08017c54
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	b299      	uxth	r1, r3
 80063ec:	4ba3      	ldr	r3, [pc, #652]	; (800667c <drawStatusMenu+0xb08>)
 80063ee:	4aa4      	ldr	r2, [pc, #656]	; (8006680 <drawStatusMenu+0xb0c>)
 80063f0:	f7fb f90e 	bl	8001610 <LCD_PutStr>
 80063f4:	4603      	mov	r3, r0
 80063f6:	461a      	mov	r2, r3
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input10], fnt7x10);
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	b298      	uxth	r0, r3
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	b299      	uxth	r1, r3
 8006406:	4b9f      	ldr	r3, [pc, #636]	; (8006684 <drawStatusMenu+0xb10>)
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	4a9f      	ldr	r2, [pc, #636]	; (8006688 <drawStatusMenu+0xb14>)
 800640c:	5cd3      	ldrb	r3, [r2, r3]
 800640e:	461a      	mov	r2, r3
 8006410:	4b9a      	ldr	r3, [pc, #616]	; (800667c <drawStatusMenu+0xb08>)
 8006412:	f7fb f935 	bl	8001680 <LCD_PutInt>
 8006416:	4603      	mov	r3, r0
 8006418:	461a      	mov	r2, r3
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]

		i=10;
 8006420:	230a      	movs	r3, #10
 8006422:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	330f      	adds	r3, #15
 8006428:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI2: ", fnt7x10);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	b298      	uxth	r0, r3
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	b299      	uxth	r1, r3
 8006432:	4b92      	ldr	r3, [pc, #584]	; (800667c <drawStatusMenu+0xb08>)
 8006434:	4a95      	ldr	r2, [pc, #596]	; (800668c <drawStatusMenu+0xb18>)
 8006436:	f7fb f8eb 	bl	8001610 <LCD_PutStr>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc2];
 8006444:	4b92      	ldr	r3, [pc, #584]	; (8006690 <drawStatusMenu+0xb1c>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4a92      	ldr	r2, [pc, #584]	; (8006694 <drawStatusMenu+0xb20>)
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	edd3 7a00 	vldr	s15, [r3]
 8006452:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006698 <drawStatusMenu+0xb24>
 8006456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800645a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800645e:	ee17 3a90 	vmov	r3, s15
 8006462:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	b298      	uxth	r0, r3
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	b299      	uxth	r1, r3
 800646c:	4b83      	ldr	r3, [pc, #524]	; (800667c <drawStatusMenu+0xb08>)
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	2303      	movs	r3, #3
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f7fb f96a 	bl	800174c <LCD_PutIntF>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647e:	4413      	add	r3, r2
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI11: ", fnt7x10);
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	b298      	uxth	r0, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	b299      	uxth	r1, r3
 800648e:	4b7b      	ldr	r3, [pc, #492]	; (800667c <drawStatusMenu+0xb08>)
 8006490:	4a82      	ldr	r2, [pc, #520]	; (800669c <drawStatusMenu+0xb28>)
 8006492:	f7fb f8bd 	bl	8001610 <LCD_PutStr>
 8006496:	4603      	mov	r3, r0
 8006498:	461a      	mov	r2, r3
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc11];
 80064a0:	4b7b      	ldr	r3, [pc, #492]	; (8006690 <drawStatusMenu+0xb1c>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	4a7b      	ldr	r2, [pc, #492]	; (8006694 <drawStatusMenu+0xb20>)
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	edd3 7a00 	vldr	s15, [r3]
 80064ae:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006698 <drawStatusMenu+0xb24>
 80064b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ba:	ee17 3a90 	vmov	r3, s15
 80064be:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	b298      	uxth	r0, r3
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	b299      	uxth	r1, r3
 80064c8:	4b6c      	ldr	r3, [pc, #432]	; (800667c <drawStatusMenu+0xb08>)
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2303      	movs	r3, #3
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f7fb f93c 	bl	800174c <LCD_PutIntF>
 80064d4:	4603      	mov	r3, r0
 80064d6:	461a      	mov	r2, r3
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In2: ", fnt7x10);
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	b298      	uxth	r0, r3
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	b299      	uxth	r1, r3
 80064ea:	4b64      	ldr	r3, [pc, #400]	; (800667c <drawStatusMenu+0xb08>)
 80064ec:	4a6c      	ldr	r2, [pc, #432]	; (80066a0 <drawStatusMenu+0xb2c>)
 80064ee:	f7fb f88f 	bl	8001610 <LCD_PutStr>
 80064f2:	4603      	mov	r3, r0
 80064f4:	461a      	mov	r2, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4413      	add	r3, r2
 80064fa:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input2], fnt7x10)+adjacentSpacing;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	b298      	uxth	r0, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	b299      	uxth	r1, r3
 8006504:	4b5f      	ldr	r3, [pc, #380]	; (8006684 <drawStatusMenu+0xb10>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a5f      	ldr	r2, [pc, #380]	; (8006688 <drawStatusMenu+0xb14>)
 800650a:	5cd3      	ldrb	r3, [r2, r3]
 800650c:	461a      	mov	r2, r3
 800650e:	4b5b      	ldr	r3, [pc, #364]	; (800667c <drawStatusMenu+0xb08>)
 8006510:	f7fb f8b6 	bl	8001680 <LCD_PutInt>
 8006514:	4603      	mov	r3, r0
 8006516:	461a      	mov	r2, r3
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	4413      	add	r3, r2
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In11: ", fnt7x10);
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	b298      	uxth	r0, r3
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	b299      	uxth	r1, r3
 800652a:	4b54      	ldr	r3, [pc, #336]	; (800667c <drawStatusMenu+0xb08>)
 800652c:	4a5d      	ldr	r2, [pc, #372]	; (80066a4 <drawStatusMenu+0xb30>)
 800652e:	f7fb f86f 	bl	8001610 <LCD_PutStr>
 8006532:	4603      	mov	r3, r0
 8006534:	461a      	mov	r2, r3
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input11], fnt7x10);
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	b298      	uxth	r0, r3
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	b299      	uxth	r1, r3
 8006544:	4b4f      	ldr	r3, [pc, #316]	; (8006684 <drawStatusMenu+0xb10>)
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	4a4f      	ldr	r2, [pc, #316]	; (8006688 <drawStatusMenu+0xb14>)
 800654a:	5cd3      	ldrb	r3, [r2, r3]
 800654c:	461a      	mov	r2, r3
 800654e:	4b4b      	ldr	r3, [pc, #300]	; (800667c <drawStatusMenu+0xb08>)
 8006550:	f7fb f896 	bl	8001680 <LCD_PutInt>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	61fb      	str	r3, [r7, #28]

		i=10;
 800655e:	230a      	movs	r3, #10
 8006560:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	330f      	adds	r3, #15
 8006566:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI3: ", fnt7x10);
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	b298      	uxth	r0, r3
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	b299      	uxth	r1, r3
 8006570:	4b42      	ldr	r3, [pc, #264]	; (800667c <drawStatusMenu+0xb08>)
 8006572:	4a4d      	ldr	r2, [pc, #308]	; (80066a8 <drawStatusMenu+0xb34>)
 8006574:	f7fb f84c 	bl	8001610 <LCD_PutStr>
 8006578:	4603      	mov	r3, r0
 800657a:	461a      	mov	r2, r3
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc3];
 8006582:	4b43      	ldr	r3, [pc, #268]	; (8006690 <drawStatusMenu+0xb1c>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	4a43      	ldr	r2, [pc, #268]	; (8006694 <drawStatusMenu+0xb20>)
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	edd3 7a00 	vldr	s15, [r3]
 8006590:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006698 <drawStatusMenu+0xb24>
 8006594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800659c:	ee17 3a90 	vmov	r3, s15
 80065a0:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	b298      	uxth	r0, r3
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	b299      	uxth	r1, r3
 80065aa:	4b34      	ldr	r3, [pc, #208]	; (800667c <drawStatusMenu+0xb08>)
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	2303      	movs	r3, #3
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	f7fb f8cb 	bl	800174c <LCD_PutIntF>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	4413      	add	r3, r2
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI12: ", fnt7x10);
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	b298      	uxth	r0, r3
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	b299      	uxth	r1, r3
 80065cc:	4b2b      	ldr	r3, [pc, #172]	; (800667c <drawStatusMenu+0xb08>)
 80065ce:	4a37      	ldr	r2, [pc, #220]	; (80066ac <drawStatusMenu+0xb38>)
 80065d0:	f7fb f81e 	bl	8001610 <LCD_PutStr>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc12];
 80065de:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <drawStatusMenu+0xb1c>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <drawStatusMenu+0xb20>)
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	edd3 7a00 	vldr	s15, [r3]
 80065ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006698 <drawStatusMenu+0xb24>
 80065f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065f8:	ee17 3a90 	vmov	r3, s15
 80065fc:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	b298      	uxth	r0, r3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	b299      	uxth	r1, r3
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <drawStatusMenu+0xb08>)
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	2303      	movs	r3, #3
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f7fb f89d 	bl	800174c <LCD_PutIntF>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4413      	add	r3, r2
 800661a:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In3: ", fnt7x10);
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	b298      	uxth	r0, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	b299      	uxth	r1, r3
 8006628:	4b14      	ldr	r3, [pc, #80]	; (800667c <drawStatusMenu+0xb08>)
 800662a:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <drawStatusMenu+0xb3c>)
 800662c:	f7fa fff0 	bl	8001610 <LCD_PutStr>
 8006630:	4603      	mov	r3, r0
 8006632:	461a      	mov	r2, r3
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input3], fnt7x10);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	b298      	uxth	r0, r3
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	b299      	uxth	r1, r3
 8006642:	4b10      	ldr	r3, [pc, #64]	; (8006684 <drawStatusMenu+0xb10>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	4a10      	ldr	r2, [pc, #64]	; (8006688 <drawStatusMenu+0xb14>)
 8006648:	5cd3      	ldrb	r3, [r2, r3]
 800664a:	461a      	mov	r2, r3
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <drawStatusMenu+0xb08>)
 800664e:	f7fb f817 	bl	8001680 <LCD_PutInt>


		i=10;
 8006652:	230a      	movs	r3, #10
 8006654:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	330f      	adds	r3, #15
 800665a:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI4: ", fnt7x10);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	b298      	uxth	r0, r3
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	b299      	uxth	r1, r3
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <drawStatusMenu+0xb08>)
 8006666:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <drawStatusMenu+0xb40>)
 8006668:	f7fa ffd2 	bl	8001610 <LCD_PutStr>
 800666c:	4603      	mov	r3, r0
 800666e:	461a      	mov	r2, r3
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc4];
 8006676:	4b06      	ldr	r3, [pc, #24]	; (8006690 <drawStatusMenu+0xb1c>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	e01d      	b.n	80066b8 <drawStatusMenu+0xb44>
 800667c:	08018254 	.word	0x08018254
 8006680:	08017c5c 	.word	0x08017c5c
 8006684:	200000f8 	.word	0x200000f8
 8006688:	20028d34 	.word	0x20028d34
 800668c:	08017c64 	.word	0x08017c64
 8006690:	20000128 	.word	0x20000128
 8006694:	200310e0 	.word	0x200310e0
 8006698:	447a0000 	.word	0x447a0000
 800669c:	08017c6c 	.word	0x08017c6c
 80066a0:	08017c74 	.word	0x08017c74
 80066a4:	08017c7c 	.word	0x08017c7c
 80066a8:	08017c84 	.word	0x08017c84
 80066ac:	08017c8c 	.word	0x08017c8c
 80066b0:	08017c94 	.word	0x08017c94
 80066b4:	08017c9c 	.word	0x08017c9c
 80066b8:	4aa7      	ldr	r2, [pc, #668]	; (8006958 <drawStatusMenu+0xde4>)
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	edd3 7a00 	vldr	s15, [r3]
 80066c2:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800695c <drawStatusMenu+0xde8>
 80066c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ce:	ee17 3a90 	vmov	r3, s15
 80066d2:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	b298      	uxth	r0, r3
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	b299      	uxth	r1, r3
 80066dc:	4ba0      	ldr	r3, [pc, #640]	; (8006960 <drawStatusMenu+0xdec>)
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2303      	movs	r3, #3
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f7fb f832 	bl	800174c <LCD_PutIntF>
 80066e8:	4603      	mov	r3, r0
 80066ea:	461a      	mov	r2, r3
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	4413      	add	r3, r2
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI13: ", fnt7x10);
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	b298      	uxth	r0, r3
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	b299      	uxth	r1, r3
 80066fe:	4b98      	ldr	r3, [pc, #608]	; (8006960 <drawStatusMenu+0xdec>)
 8006700:	4a98      	ldr	r2, [pc, #608]	; (8006964 <drawStatusMenu+0xdf0>)
 8006702:	f7fa ff85 	bl	8001610 <LCD_PutStr>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc13];
 8006710:	4b95      	ldr	r3, [pc, #596]	; (8006968 <drawStatusMenu+0xdf4>)
 8006712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006714:	4a90      	ldr	r2, [pc, #576]	; (8006958 <drawStatusMenu+0xde4>)
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	edd3 7a00 	vldr	s15, [r3]
 800671e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800695c <drawStatusMenu+0xde8>
 8006722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800672a:	ee17 3a90 	vmov	r3, s15
 800672e:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	b298      	uxth	r0, r3
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	b299      	uxth	r1, r3
 8006738:	4b89      	ldr	r3, [pc, #548]	; (8006960 <drawStatusMenu+0xdec>)
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2303      	movs	r3, #3
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f7fb f804 	bl	800174c <LCD_PutIntF>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In4: ", fnt7x10);
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	b298      	uxth	r0, r3
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	b299      	uxth	r1, r3
 800675a:	4b81      	ldr	r3, [pc, #516]	; (8006960 <drawStatusMenu+0xdec>)
 800675c:	4a83      	ldr	r2, [pc, #524]	; (800696c <drawStatusMenu+0xdf8>)
 800675e:	f7fa ff57 	bl	8001610 <LCD_PutStr>
 8006762:	4603      	mov	r3, r0
 8006764:	461a      	mov	r2, r3
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input4], fnt7x10);
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	b298      	uxth	r0, r3
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	b299      	uxth	r1, r3
 8006774:	4b7e      	ldr	r3, [pc, #504]	; (8006970 <drawStatusMenu+0xdfc>)
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	4a7e      	ldr	r2, [pc, #504]	; (8006974 <drawStatusMenu+0xe00>)
 800677a:	5cd3      	ldrb	r3, [r2, r3]
 800677c:	461a      	mov	r2, r3
 800677e:	4b78      	ldr	r3, [pc, #480]	; (8006960 <drawStatusMenu+0xdec>)
 8006780:	f7fa ff7e 	bl	8001680 <LCD_PutInt>

		i=10;
 8006784:	230a      	movs	r3, #10
 8006786:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	330f      	adds	r3, #15
 800678c:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI5: ", fnt7x10);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	b298      	uxth	r0, r3
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	b299      	uxth	r1, r3
 8006796:	4b72      	ldr	r3, [pc, #456]	; (8006960 <drawStatusMenu+0xdec>)
 8006798:	4a77      	ldr	r2, [pc, #476]	; (8006978 <drawStatusMenu+0xe04>)
 800679a:	f7fa ff39 	bl	8001610 <LCD_PutStr>
 800679e:	4603      	mov	r3, r0
 80067a0:	461a      	mov	r2, r3
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc5];
 80067a8:	4b6f      	ldr	r3, [pc, #444]	; (8006968 <drawStatusMenu+0xdf4>)
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	4a6a      	ldr	r2, [pc, #424]	; (8006958 <drawStatusMenu+0xde4>)
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	edd3 7a00 	vldr	s15, [r3]
 80067b6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800695c <drawStatusMenu+0xde8>
 80067ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067c2:	ee17 3a90 	vmov	r3, s15
 80067c6:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	b298      	uxth	r0, r3
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	b299      	uxth	r1, r3
 80067d0:	4b63      	ldr	r3, [pc, #396]	; (8006960 <drawStatusMenu+0xdec>)
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2303      	movs	r3, #3
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f7fa ffb8 	bl	800174c <LCD_PutIntF>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e2:	4413      	add	r3, r2
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI14: ", fnt7x10);
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	b298      	uxth	r0, r3
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	b299      	uxth	r1, r3
 80067f2:	4b5b      	ldr	r3, [pc, #364]	; (8006960 <drawStatusMenu+0xdec>)
 80067f4:	4a61      	ldr	r2, [pc, #388]	; (800697c <drawStatusMenu+0xe08>)
 80067f6:	f7fa ff0b 	bl	8001610 <LCD_PutStr>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc14];
 8006804:	4b58      	ldr	r3, [pc, #352]	; (8006968 <drawStatusMenu+0xdf4>)
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	4a53      	ldr	r2, [pc, #332]	; (8006958 <drawStatusMenu+0xde4>)
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	edd3 7a00 	vldr	s15, [r3]
 8006812:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800695c <drawStatusMenu+0xde8>
 8006816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800681a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800681e:	ee17 3a90 	vmov	r3, s15
 8006822:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	b298      	uxth	r0, r3
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	b299      	uxth	r1, r3
 800682c:	4b4c      	ldr	r3, [pc, #304]	; (8006960 <drawStatusMenu+0xdec>)
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	2303      	movs	r3, #3
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f7fa ff8a 	bl	800174c <LCD_PutIntF>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In5: ", fnt7x10);
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	b298      	uxth	r0, r3
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	b299      	uxth	r1, r3
 800684e:	4b44      	ldr	r3, [pc, #272]	; (8006960 <drawStatusMenu+0xdec>)
 8006850:	4a4b      	ldr	r2, [pc, #300]	; (8006980 <drawStatusMenu+0xe0c>)
 8006852:	f7fa fedd 	bl	8001610 <LCD_PutStr>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input5], fnt7x10);
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	b298      	uxth	r0, r3
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	b299      	uxth	r1, r3
 8006868:	4b41      	ldr	r3, [pc, #260]	; (8006970 <drawStatusMenu+0xdfc>)
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	4a41      	ldr	r2, [pc, #260]	; (8006974 <drawStatusMenu+0xe00>)
 800686e:	5cd3      	ldrb	r3, [r2, r3]
 8006870:	461a      	mov	r2, r3
 8006872:	4b3b      	ldr	r3, [pc, #236]	; (8006960 <drawStatusMenu+0xdec>)
 8006874:	f7fa ff04 	bl	8001680 <LCD_PutInt>

		i=10;
 8006878:	230a      	movs	r3, #10
 800687a:	61fb      	str	r3, [r7, #28]
		j+=15;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	330f      	adds	r3, #15
 8006880:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI6: ", fnt7x10);
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	b298      	uxth	r0, r3
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	b299      	uxth	r1, r3
 800688a:	4b35      	ldr	r3, [pc, #212]	; (8006960 <drawStatusMenu+0xdec>)
 800688c:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <drawStatusMenu+0xe10>)
 800688e:	f7fa febf 	bl	8001610 <LCD_PutStr>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc6];
 800689c:	4b32      	ldr	r3, [pc, #200]	; (8006968 <drawStatusMenu+0xdf4>)
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	4a2d      	ldr	r2, [pc, #180]	; (8006958 <drawStatusMenu+0xde4>)
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	edd3 7a00 	vldr	s15, [r3]
 80068aa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800695c <drawStatusMenu+0xde8>
 80068ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b6:	ee17 3a90 	vmov	r3, s15
 80068ba:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10)+adjacentSpacing;
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	b298      	uxth	r0, r3
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	b299      	uxth	r1, r3
 80068c4:	4b26      	ldr	r3, [pc, #152]	; (8006960 <drawStatusMenu+0xdec>)
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	2303      	movs	r3, #3
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	f7fa ff3e 	bl	800174c <LCD_PutIntF>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d6:	4413      	add	r3, r2
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "AI15: ", fnt7x10);
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	b298      	uxth	r0, r3
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	b299      	uxth	r1, r3
 80068e6:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <drawStatusMenu+0xdec>)
 80068e8:	4a27      	ldr	r2, [pc, #156]	; (8006988 <drawStatusMenu+0xe14>)
 80068ea:	f7fa fe91 	bl	8001610 <LCD_PutStr>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc15];
 80068f8:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <drawStatusMenu+0xdf4>)
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <drawStatusMenu+0xde4>)
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	edd3 7a00 	vldr	s15, [r3]
 8006906:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800695c <drawStatusMenu+0xde8>
 800690a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800690e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006912:	ee17 3a90 	vmov	r3, s15
 8006916:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	b298      	uxth	r0, r3
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	b299      	uxth	r1, r3
 8006920:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <drawStatusMenu+0xdec>)
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	2303      	movs	r3, #3
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	f7fa ff10 	bl	800174c <LCD_PutIntF>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In6: ", fnt7x10);
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	b298      	uxth	r0, r3
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	b299      	uxth	r1, r3
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <drawStatusMenu+0xdec>)
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <drawStatusMenu+0xe18>)
 8006946:	f7fa fe63 	bl	8001610 <LCD_PutStr>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	e01c      	b.n	8006990 <drawStatusMenu+0xe1c>
 8006956:	bf00      	nop
 8006958:	200310e0 	.word	0x200310e0
 800695c:	447a0000 	.word	0x447a0000
 8006960:	08018254 	.word	0x08018254
 8006964:	08017ca4 	.word	0x08017ca4
 8006968:	20000128 	.word	0x20000128
 800696c:	08017cac 	.word	0x08017cac
 8006970:	200000f8 	.word	0x200000f8
 8006974:	20028d34 	.word	0x20028d34
 8006978:	08017cb4 	.word	0x08017cb4
 800697c:	08017cbc 	.word	0x08017cbc
 8006980:	08017cc4 	.word	0x08017cc4
 8006984:	08017ccc 	.word	0x08017ccc
 8006988:	08017cd4 	.word	0x08017cd4
 800698c:	08017cdc 	.word	0x08017cdc
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input6], fnt7x10);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	b298      	uxth	r0, r3
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	b299      	uxth	r1, r3
 8006998:	4b9b      	ldr	r3, [pc, #620]	; (8006c08 <drawStatusMenu+0x1094>)
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	4a9b      	ldr	r2, [pc, #620]	; (8006c0c <drawStatusMenu+0x1098>)
 800699e:	5cd3      	ldrb	r3, [r2, r3]
 80069a0:	461a      	mov	r2, r3
 80069a2:	4b9b      	ldr	r3, [pc, #620]	; (8006c10 <drawStatusMenu+0x109c>)
 80069a4:	f7fa fe6c 	bl	8001680 <LCD_PutInt>

		i=10;
 80069a8:	230a      	movs	r3, #10
 80069aa:	61fb      	str	r3, [r7, #28]
		j+=15;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	330f      	adds	r3, #15
 80069b0:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI7: ", fnt7x10);
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	b298      	uxth	r0, r3
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	b299      	uxth	r1, r3
 80069ba:	4b95      	ldr	r3, [pc, #596]	; (8006c10 <drawStatusMenu+0x109c>)
 80069bc:	4a95      	ldr	r2, [pc, #596]	; (8006c14 <drawStatusMenu+0x10a0>)
 80069be:	f7fa fe27 	bl	8001610 <LCD_PutStr>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc7];
 80069cc:	4b92      	ldr	r3, [pc, #584]	; (8006c18 <drawStatusMenu+0x10a4>)
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	4a92      	ldr	r2, [pc, #584]	; (8006c1c <drawStatusMenu+0x10a8>)
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	edd3 7a00 	vldr	s15, [r3]
 80069da:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006c20 <drawStatusMenu+0x10ac>
 80069de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069e6:	ee17 3a90 	vmov	r3, s15
 80069ea:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	b298      	uxth	r0, r3
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	b299      	uxth	r1, r3
 80069f4:	4b86      	ldr	r3, [pc, #536]	; (8006c10 <drawStatusMenu+0x109c>)
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2303      	movs	r3, #3
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	f7fa fea6 	bl	800174c <LCD_PutIntF>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	4413      	add	r3, r2
 8006a08:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In7: ", fnt7x10);
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	b298      	uxth	r0, r3
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	b299      	uxth	r1, r3
 8006a16:	4b7e      	ldr	r3, [pc, #504]	; (8006c10 <drawStatusMenu+0x109c>)
 8006a18:	4a82      	ldr	r2, [pc, #520]	; (8006c24 <drawStatusMenu+0x10b0>)
 8006a1a:	f7fa fdf9 	bl	8001610 <LCD_PutStr>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	461a      	mov	r2, r3
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input7], fnt7x10);
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	b298      	uxth	r0, r3
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	b299      	uxth	r1, r3
 8006a30:	4b75      	ldr	r3, [pc, #468]	; (8006c08 <drawStatusMenu+0x1094>)
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	4a75      	ldr	r2, [pc, #468]	; (8006c0c <drawStatusMenu+0x1098>)
 8006a36:	5cd3      	ldrb	r3, [r2, r3]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4b75      	ldr	r3, [pc, #468]	; (8006c10 <drawStatusMenu+0x109c>)
 8006a3c:	f7fa fe20 	bl	8001680 <LCD_PutInt>

		i=10;
 8006a40:	230a      	movs	r3, #10
 8006a42:	61fb      	str	r3, [r7, #28]
		j+=15;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	330f      	adds	r3, #15
 8006a48:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "AI8: ", fnt7x10);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	b298      	uxth	r0, r3
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	b299      	uxth	r1, r3
 8006a52:	4b6f      	ldr	r3, [pc, #444]	; (8006c10 <drawStatusMenu+0x109c>)
 8006a54:	4a74      	ldr	r2, [pc, #464]	; (8006c28 <drawStatusMenu+0x10b4>)
 8006a56:	f7fa fddb 	bl	8001610 <LCD_PutStr>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	61fb      	str	r3, [r7, #28]
		convertedFloat = 1000 * displayAdcValues[Adc.adc8];
 8006a64:	4b6c      	ldr	r3, [pc, #432]	; (8006c18 <drawStatusMenu+0x10a4>)
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	4a6c      	ldr	r2, [pc, #432]	; (8006c1c <drawStatusMenu+0x10a8>)
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	edd3 7a00 	vldr	s15, [r3]
 8006a72:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8006c20 <drawStatusMenu+0x10ac>
 8006a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a7e:	ee17 3a90 	vmov	r3, s15
 8006a82:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 3, fnt7x10);
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	b298      	uxth	r0, r3
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	b299      	uxth	r1, r3
 8006a8c:	4b60      	ldr	r3, [pc, #384]	; (8006c10 <drawStatusMenu+0x109c>)
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	2303      	movs	r3, #3
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f7fa fe5a 	bl	800174c <LCD_PutIntF>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	61fb      	str	r3, [r7, #28]
		i=inputGpioAlignment;
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, "In8: ", fnt7x10);
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	b298      	uxth	r0, r3
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	b299      	uxth	r1, r3
 8006aae:	4b58      	ldr	r3, [pc, #352]	; (8006c10 <drawStatusMenu+0x109c>)
 8006ab0:	4a5e      	ldr	r2, [pc, #376]	; (8006c2c <drawStatusMenu+0x10b8>)
 8006ab2:	f7fa fdad 	bl	8001610 <LCD_PutStr>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	61fb      	str	r3, [r7, #28]
		LCD_PutInt(i,j,gpioInputBuf[inputGPIOs.input8], fnt7x10);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	b298      	uxth	r0, r3
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	b299      	uxth	r1, r3
 8006ac8:	4b4f      	ldr	r3, [pc, #316]	; (8006c08 <drawStatusMenu+0x1094>)
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	4a4f      	ldr	r2, [pc, #316]	; (8006c0c <drawStatusMenu+0x1098>)
 8006ace:	5cd3      	ldrb	r3, [r2, r3]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b4f      	ldr	r3, [pc, #316]	; (8006c10 <drawStatusMenu+0x109c>)
 8006ad4:	f7fa fdd4 	bl	8001680 <LCD_PutInt>
		//horizontal divider
		j=65;
 8006ad8:	2341      	movs	r3, #65	; 0x41
 8006ada:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j-1, scr_width-2, j+1);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b299      	uxth	r1, r3
 8006ae4:	4b52      	ldr	r3, [pc, #328]	; (8006c30 <drawStatusMenu+0x10bc>)
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	3b02      	subs	r3, #2
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3301      	adds	r3, #1
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2002      	movs	r0, #2
 8006af6:	f7fa fa3f 	bl	8000f78 <LCD_FillRect>
		//vertical divider
		i=230;
 8006afa:	23e6      	movs	r3, #230	; 0xe6
 8006afc:	61fb      	str	r3, [r7, #28]
		LCD_FillRect(i-3, j, i+3, scr_height-2);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b03      	subs	r3, #3
 8006b04:	b298      	uxth	r0, r3
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	b299      	uxth	r1, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3303      	adds	r3, #3
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	4b48      	ldr	r3, [pc, #288]	; (8006c34 <drawStatusMenu+0x10c0>)
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	3b02      	subs	r3, #2
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f7fa fa2d 	bl	8000f78 <LCD_FillRect>

		i=155;
 8006b1e:	239b      	movs	r3, #155	; 0x9b
 8006b20:	61fb      	str	r3, [r7, #28]
		j=35;
 8006b22:	2323      	movs	r3, #35	; 0x23
 8006b24:	61bb      	str	r3, [r7, #24]
		LCD_PutStr(i,j,"YOUR AD HERE!",fnt7x10);
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	b298      	uxth	r0, r3
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	b299      	uxth	r1, r3
 8006b2e:	4b38      	ldr	r3, [pc, #224]	; (8006c10 <drawStatusMenu+0x109c>)
 8006b30:	4a41      	ldr	r2, [pc, #260]	; (8006c38 <drawStatusMenu+0x10c4>)
 8006b32:	f7fa fd6d 	bl	8001610 <LCD_PutStr>
		i=155;
 8006b36:	239b      	movs	r3, #155	; 0x9b
 8006b38:	61fb      	str	r3, [r7, #28]
		j=50;
 8006b3a:	2332      	movs	r3, #50	; 0x32
 8006b3c:	61bb      	str	r3, [r7, #24]
		i+=LCD_PutStr(i,j,"Monthly fee: $",fnt7x10)+8;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	b298      	uxth	r0, r3
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	b299      	uxth	r1, r3
 8006b46:	4b32      	ldr	r3, [pc, #200]	; (8006c10 <drawStatusMenu+0x109c>)
 8006b48:	4a3c      	ldr	r2, [pc, #240]	; (8006c3c <drawStatusMenu+0x10c8>)
 8006b4a:	f7fa fd61 	bl	8001610 <LCD_PutStr>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	3308      	adds	r3, #8
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	61fb      	str	r3, [r7, #28]
		j=28;
 8006b58:	231c      	movs	r3, #28
 8006b5a:	61bb      	str	r3, [r7, #24]
		LCD_PutIntF(i,j,3999, 2,fnt_dig_big);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	b298      	uxth	r0, r3
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	b299      	uxth	r1, r3
 8006b64:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <drawStatusMenu+0x10cc>)
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006b6e:	f7fa fded 	bl	800174c <LCD_PutIntF>

		//draw the additional pages available indicators
		i=200;
 8006b72:	23c8      	movs	r3, #200	; 0xc8
 8006b74:	61fb      	str	r3, [r7, #28]
		j=220;
 8006b76:	23dc      	movs	r3, #220	; 0xdc
 8006b78:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	b298      	uxth	r0, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	b299      	uxth	r1, r3
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f7fa fe91 	bl	80018b0 <drawUpDownArrow>
		j=15;
 8006b8e:	230f      	movs	r3, #15
 8006b90:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	b298      	uxth	r0, r3
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f7fa fe85 	bl	80018b0 <drawUpDownArrow>
		i=180;
 8006ba6:	23b4      	movs	r3, #180	; 0xb4
 8006ba8:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	b298      	uxth	r0, r3
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	b299      	uxth	r1, r3
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f7fa fe79 	bl	80018b0 <drawUpDownArrow>
		j=220;
 8006bbe:	23dc      	movs	r3, #220	; 0xdc
 8006bc0:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	b298      	uxth	r0, r3
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	b299      	uxth	r1, r3
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f7fa fe6d 	bl	80018b0 <drawUpDownArrow>
		i=220;
 8006bd6:	23dc      	movs	r3, #220	; 0xdc
 8006bd8:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	b298      	uxth	r0, r3
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	b299      	uxth	r1, r3
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	f7fa fe61 	bl	80018b0 <drawUpDownArrow>
		j=15;
 8006bee:	230f      	movs	r3, #15
 8006bf0:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	b298      	uxth	r0, r3
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	b299      	uxth	r1, r3
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f7fa fe55 	bl	80018b0 <drawUpDownArrow>
		break;
 8006c06:	e12a      	b.n	8006e5e <drawStatusMenu+0x12ea>
 8006c08:	200000f8 	.word	0x200000f8
 8006c0c:	20028d34 	.word	0x20028d34
 8006c10:	08018254 	.word	0x08018254
 8006c14:	08017ce4 	.word	0x08017ce4
 8006c18:	20000128 	.word	0x20000128
 8006c1c:	200310e0 	.word	0x200310e0
 8006c20:	447a0000 	.word	0x447a0000
 8006c24:	08017cec 	.word	0x08017cec
 8006c28:	08017cf4 	.word	0x08017cf4
 8006c2c:	08017cfc 	.word	0x08017cfc
 8006c30:	20028aa6 	.word	0x20028aa6
 8006c34:	20028aa8 	.word	0x20028aa8
 8006c38:	08017d04 	.word	0x08017d04
 8006c3c:	08017d14 	.word	0x08017d14
 8006c40:	08018614 	.word	0x08018614
	}
	case 3:{
		i=35;
 8006c44:	2323      	movs	r3, #35	; 0x23
 8006c46:	61fb      	str	r3, [r7, #28]
		j=75;
 8006c48:	234b      	movs	r3, #75	; 0x4b
 8006c4a:	61bb      	str	r3, [r7, #24]
		LCD_FillRect(2, j - 2, scr_width-2, j + 2);
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b02      	subs	r3, #2
 8006c52:	b299      	uxth	r1, r3
 8006c54:	4b85      	ldr	r3, [pc, #532]	; (8006e6c <drawStatusMenu+0x12f8>)
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	3b02      	subs	r3, #2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3302      	adds	r3, #2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2002      	movs	r0, #2
 8006c66:	f7fa f987 	bl	8000f78 <LCD_FillRect>
		j=55;
 8006c6a:	2337      	movs	r3, #55	; 0x37
 8006c6c:	61bb      	str	r3, [r7, #24]
		i=150;
 8006c6e:	2396      	movs	r3, #150	; 0x96
 8006c70:	61fb      	str	r3, [r7, #28]
		i+=LCD_PutStr(i, j, "DEV UI HEALTH:", fnt7x10);
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	b298      	uxth	r0, r3
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	b299      	uxth	r1, r3
 8006c7a:	4b7d      	ldr	r3, [pc, #500]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006c7c:	4a7d      	ldr	r2, [pc, #500]	; (8006e74 <drawStatusMenu+0x1300>)
 8006c7e:	f7fa fcc7 	bl	8001610 <LCD_PutStr>
 8006c82:	4603      	mov	r3, r0
 8006c84:	461a      	mov	r2, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	61fb      	str	r3, [r7, #28]

		i=40;
 8006c8c:	2328      	movs	r3, #40	; 0x28
 8006c8e:	61fb      	str	r3, [r7, #28]
		j=85;
 8006c90:	2355      	movs	r3, #85	; 0x55
 8006c92:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LCD: ", fnt7x10);
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	b298      	uxth	r0, r3
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	b299      	uxth	r1, r3
 8006c9c:	4b74      	ldr	r3, [pc, #464]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006c9e:	4a76      	ldr	r2, [pc, #472]	; (8006e78 <drawStatusMenu+0x1304>)
 8006ca0:	f7fa fcb6 	bl	8001610 <LCD_PutStr>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Do you see me? Must be working!", fnt7x10);
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	b298      	uxth	r0, r3
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	b299      	uxth	r1, r3
 8006cb6:	4b6e      	ldr	r3, [pc, #440]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006cb8:	4a70      	ldr	r2, [pc, #448]	; (8006e7c <drawStatusMenu+0x1308>)
 8006cba:	f7fa fca9 	bl	8001610 <LCD_PutStr>

		i=40;
 8006cbe:	2328      	movs	r3, #40	; 0x28
 8006cc0:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	3319      	adds	r3, #25
 8006cc6:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "LED Driver: ", fnt7x10);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	b298      	uxth	r0, r3
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	b299      	uxth	r1, r3
 8006cd0:	4b67      	ldr	r3, [pc, #412]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006cd2:	4a6b      	ldr	r2, [pc, #428]	; (8006e80 <drawStatusMenu+0x130c>)
 8006cd4:	f7fa fc9c 	bl	8001610 <LCD_PutStr>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	61fb      	str	r3, [r7, #28]
		if(!(errorLED.ledDriver)){
 8006ce2:	4b68      	ldr	r3, [pc, #416]	; (8006e84 <drawStatusMenu+0x1310>)
 8006ce4:	7b5b      	ldrb	r3, [r3, #13]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d108      	bne.n	8006cfc <drawStatusMenu+0x1188>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	b298      	uxth	r0, r3
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	b299      	uxth	r1, r3
 8006cf2:	4b5f      	ldr	r3, [pc, #380]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006cf4:	4a64      	ldr	r2, [pc, #400]	; (8006e88 <drawStatusMenu+0x1314>)
 8006cf6:	f7fa fc8b 	bl	8001610 <LCD_PutStr>
 8006cfa:	e007      	b.n	8006d0c <drawStatusMenu+0x1198>
		}
		else{
			LCD_PutStr(i, j, "Unresponsive", fnt7x10);
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	b298      	uxth	r0, r3
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	b299      	uxth	r1, r3
 8006d04:	4b5a      	ldr	r3, [pc, #360]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006d06:	4a61      	ldr	r2, [pc, #388]	; (8006e8c <drawStatusMenu+0x1318>)
 8006d08:	f7fa fc82 	bl	8001610 <LCD_PutStr>
		}

		i=40;
 8006d0c:	2328      	movs	r3, #40	; 0x28
 8006d0e:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	3319      	adds	r3, #25
 8006d14:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC UART: ", fnt7x10);
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	b298      	uxth	r0, r3
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	b299      	uxth	r1, r3
 8006d1e:	4b54      	ldr	r3, [pc, #336]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006d20:	4a5b      	ldr	r2, [pc, #364]	; (8006e90 <drawStatusMenu+0x131c>)
 8006d22:	f7fa fc75 	bl	8001610 <LCD_PutStr>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	61fb      	str	r3, [r7, #28]
		LCD_PutStr(i, j, "Am I reading this now?", fnt7x10);
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	b298      	uxth	r0, r3
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	b299      	uxth	r1, r3
 8006d38:	4b4d      	ldr	r3, [pc, #308]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006d3a:	4a56      	ldr	r2, [pc, #344]	; (8006e94 <drawStatusMenu+0x1320>)
 8006d3c:	f7fa fc68 	bl	8001610 <LCD_PutStr>

		i=40;
 8006d40:	2328      	movs	r3, #40	; 0x28
 8006d42:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	3319      	adds	r3, #25
 8006d48:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "SOC I2C: ", fnt7x10);
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	b298      	uxth	r0, r3
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	b299      	uxth	r1, r3
 8006d52:	4b47      	ldr	r3, [pc, #284]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006d54:	4a50      	ldr	r2, [pc, #320]	; (8006e98 <drawStatusMenu+0x1324>)
 8006d56:	f7fa fc5b 	bl	8001610 <LCD_PutStr>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	61fb      	str	r3, [r7, #28]
		i2cCheck=writeI2CRegister(socI2cVoltageMux.address, 0x11, 0x00,1,socI2cVoltageMux.i2cBank);
 8006d64:	4b4d      	ldr	r3, [pc, #308]	; (8006e9c <drawStatusMenu+0x1328>)
 8006d66:	7818      	ldrb	r0, [r3, #0]
 8006d68:	4b4c      	ldr	r3, [pc, #304]	; (8006e9c <drawStatusMenu+0x1328>)
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	2301      	movs	r3, #1
 8006d70:	2200      	movs	r2, #0
 8006d72:	2111      	movs	r1, #17
 8006d74:	f7fc fc5c 	bl	8003630 <writeI2CRegister>
 8006d78:	6178      	str	r0, [r7, #20]
		if(i2cCheck == HAL_OK){
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <drawStatusMenu+0x1224>
			LCD_PutStr(i, j, "Present", fnt7x10);
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	b298      	uxth	r0, r3
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	b299      	uxth	r1, r3
 8006d88:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006d8a:	4a3f      	ldr	r2, [pc, #252]	; (8006e88 <drawStatusMenu+0x1314>)
 8006d8c:	f7fa fc40 	bl	8001610 <LCD_PutStr>
			// Clear the HAL fault LED.
			errorLED.fault9 = false;
 8006d90:	4b3c      	ldr	r3, [pc, #240]	; (8006e84 <drawStatusMenu+0x1310>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	731a      	strb	r2, [r3, #12]
 8006d96:	e007      	b.n	8006da8 <drawStatusMenu+0x1234>
		}
		else{
			LCD_PutStr(i, j, "Undetected", fnt7x10);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	b298      	uxth	r0, r3
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	b299      	uxth	r1, r3
 8006da0:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006da2:	4a3f      	ldr	r2, [pc, #252]	; (8006ea0 <drawStatusMenu+0x132c>)
 8006da4:	f7fa fc34 	bl	8001610 <LCD_PutStr>
		}


		i=40;
 8006da8:	2328      	movs	r3, #40	; 0x28
 8006daa:	61fb      	str	r3, [r7, #28]
		j+=25;
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	3319      	adds	r3, #25
 8006db0:	61bb      	str	r3, [r7, #24]
		i+= LCD_PutStr(i, j, "Dev UI Runtime: ", fnt7x10);
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	b298      	uxth	r0, r3
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	b299      	uxth	r1, r3
 8006dba:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006dbc:	4a39      	ldr	r2, [pc, #228]	; (8006ea4 <drawStatusMenu+0x1330>)
 8006dbe:	f7fa fc27 	bl	8001610 <LCD_PutStr>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	61fb      	str	r3, [r7, #28]
		//GetTick provides runtime in milliseconds
		int runtime = (HAL_GetTick()/1000);
 8006dcc:	f002 fe1a 	bl	8009a04 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	4b35      	ldr	r3, [pc, #212]	; (8006ea8 <drawStatusMenu+0x1334>)
 8006dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd8:	099b      	lsrs	r3, r3, #6
 8006dda:	613b      	str	r3, [r7, #16]
		i+= LCD_PutInt(i, j, runtime, fnt7x10);
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	b298      	uxth	r0, r3
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	b299      	uxth	r1, r3
 8006de4:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	f7fa fc4a 	bl	8001680 <LCD_PutInt>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	61fb      	str	r3, [r7, #28]
		i+= LCD_PutStr(i, j, " seconds", fnt7x10);
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	b298      	uxth	r0, r3
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	b299      	uxth	r1, r3
 8006dfe:	4b1c      	ldr	r3, [pc, #112]	; (8006e70 <drawStatusMenu+0x12fc>)
 8006e00:	4a2a      	ldr	r2, [pc, #168]	; (8006eac <drawStatusMenu+0x1338>)
 8006e02:	f7fa fc05 	bl	8001610 <LCD_PutStr>
 8006e06:	4603      	mov	r3, r0
 8006e08:	461a      	mov	r2, r3
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	61fb      	str	r3, [r7, #28]

		i=200;
 8006e10:	23c8      	movs	r3, #200	; 0xc8
 8006e12:	61fb      	str	r3, [r7, #28]
		j=15;
 8006e14:	230f      	movs	r3, #15
 8006e16:	61bb      	str	r3, [r7, #24]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	b298      	uxth	r0, r3
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	b299      	uxth	r1, r3
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f7fa fd42 	bl	80018b0 <drawUpDownArrow>
		i=180;
 8006e2c:	23b4      	movs	r3, #180	; 0xb4
 8006e2e:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	b298      	uxth	r0, r3
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	b299      	uxth	r1, r3
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f7fa fd36 	bl	80018b0 <drawUpDownArrow>
		i=220;
 8006e44:	23dc      	movs	r3, #220	; 0xdc
 8006e46:	61fb      	str	r3, [r7, #28]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	b298      	uxth	r0, r3
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	b299      	uxth	r1, r3
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f7fa fd2a 	bl	80018b0 <drawUpDownArrow>

		break;
 8006e5c:	bf00      	nop
	}
	}

	SMLCD_Flush();
 8006e5e:	f7f9 fc3f 	bl	80006e0 <SMLCD_Flush>



}
 8006e62:	bf00      	nop
 8006e64:	3738      	adds	r7, #56	; 0x38
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20028aa6 	.word	0x20028aa6
 8006e70:	08018254 	.word	0x08018254
 8006e74:	08017d24 	.word	0x08017d24
 8006e78:	08017d34 	.word	0x08017d34
 8006e7c:	08017d3c 	.word	0x08017d3c
 8006e80:	08017d5c 	.word	0x08017d5c
 8006e84:	200032d8 	.word	0x200032d8
 8006e88:	08017d6c 	.word	0x08017d6c
 8006e8c:	08017d74 	.word	0x08017d74
 8006e90:	08017d84 	.word	0x08017d84
 8006e94:	08017d90 	.word	0x08017d90
 8006e98:	08017da8 	.word	0x08017da8
 8006e9c:	200000e0 	.word	0x200000e0
 8006ea0:	08017ae8 	.word	0x08017ae8
 8006ea4:	08017db4 	.word	0x08017db4
 8006ea8:	10624dd3 	.word	0x10624dd3
 8006eac:	08017dc8 	.word	0x08017dc8

08006eb0 <drawSystemInfoMenu>:

void drawSystemInfoMenu(int indicator){
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	6078      	str	r0, [r7, #4]
	int i,j;
	//float *adcValuePointer;
	int convertedFloat;
	int adjacentSpacing = 20;
 8006eb8:	2314      	movs	r3, #20
 8006eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	int indentAlignment=20;
 8006ebc:	2314      	movs	r3, #20
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	int arrowUp = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
	int arrowDown=1;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	623b      	str	r3, [r7, #32]
	int arrowSize=3;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	61fb      	str	r3, [r7, #28]
	int otherBoardAlignment = 230;
 8006ecc:	23e6      	movs	r3, #230	; 0xe6
 8006ece:	61bb      	str	r3, [r7, #24]
	previousMenu=0;
 8006ed0:	4b8f      	ldr	r3, [pc, #572]	; (8007110 <drawSystemInfoMenu+0x260>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8006ed6:	f7f9 fdbb 	bl	8000a50 <LCD_Clear>
	getLatestADC();
 8006eda:	f001 f911 	bl	8008100 <getLatestADC>
	drawMenuHeader();
 8006ede:	f001 f853 	bl	8007f88 <drawMenuHeader>
	i  = 135;
 8006ee2:	2387      	movs	r3, #135	; 0x87
 8006ee4:	617b      	str	r3, [r7, #20]
	j = 24;
 8006ee6:	2318      	movs	r3, #24
 8006ee8:	613b      	str	r3, [r7, #16]
	//horizontal divider
	LCD_FillRect(2, j, scr_width - 2, j + 3);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	b299      	uxth	r1, r3
 8006eee:	4b89      	ldr	r3, [pc, #548]	; (8007114 <drawSystemInfoMenu+0x264>)
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	3b02      	subs	r3, #2
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3303      	adds	r3, #3
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2002      	movs	r0, #2
 8006f00:	f7fa f83a 	bl	8000f78 <LCD_FillRect>
//	i  = 135;
//	j += 12;
//	//horizontal divider
//	LCD_FillRect(2, j, scr_width - 2, j + 3);

	switch(indicator){
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d003      	beq.n	8006f12 <drawSystemInfoMenu+0x62>
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	f000 82be 	beq.w	800748c <drawSystemInfoMenu+0x5dc>
 8006f10:	e3fe      	b.n	8007710 <drawSystemInfoMenu+0x860>
	case 1:{
		//i=35;
		//j=90;
		//LCD_FillRect(2, j - 2, scr_width-2, j + 2);

		j=45;
 8006f12:	232d      	movs	r3, #45	; 0x2d
 8006f14:	613b      	str	r3, [r7, #16]
		i=42;
 8006f16:	232a      	movs	r3, #42	; 0x2a
 8006f18:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "FFU Version:", fnt7x10);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	b298      	uxth	r0, r3
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	b299      	uxth	r1, r3
 8006f22:	4b7d      	ldr	r3, [pc, #500]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006f24:	4a7d      	ldr	r2, [pc, #500]	; (800711c <drawSystemInfoMenu+0x26c>)
 8006f26:	f7fa fb73 	bl	8001610 <LCD_PutStr>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	b298      	uxth	r0, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	b299      	uxth	r1, r3
 8006f3c:	4b76      	ldr	r3, [pc, #472]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006f3e:	4a78      	ldr	r2, [pc, #480]	; (8007120 <drawSystemInfoMenu+0x270>)
 8006f40:	f7fa fb66 	bl	8001610 <LCD_PutStr>

		j+=15;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	330f      	adds	r3, #15
 8006f48:	613b      	str	r3, [r7, #16]
		i=42;
 8006f4a:	232a      	movs	r3, #42	; 0x2a
 8006f4c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "UI Firmware Version: ", fnt7x10);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	b298      	uxth	r0, r3
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	b299      	uxth	r1, r3
 8006f56:	4b70      	ldr	r3, [pc, #448]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006f58:	4a72      	ldr	r2, [pc, #456]	; (8007124 <drawSystemInfoMenu+0x274>)
 8006f5a:	f7fa fb59 	bl	8001610 <LCD_PutStr>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	461a      	mov	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "V0.0.1", fnt7x10);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	b298      	uxth	r0, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	b299      	uxth	r1, r3
 8006f70:	4b69      	ldr	r3, [pc, #420]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006f72:	4a6d      	ldr	r2, [pc, #436]	; (8007128 <drawSystemInfoMenu+0x278>)
 8006f74:	f7fa fb4c 	bl	8001610 <LCD_PutStr>

		j+=30;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	331e      	adds	r3, #30
 8006f7c:	613b      	str	r3, [r7, #16]
		i=10;
 8006f7e:	230a      	movs	r3, #10
 8006f80:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Project:", fnt7x10);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	b298      	uxth	r0, r3
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	b299      	uxth	r1, r3
 8006f8a:	4b63      	ldr	r3, [pc, #396]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006f8c:	4a67      	ldr	r2, [pc, #412]	; (800712c <drawSystemInfoMenu+0x27c>)
 8006f8e:	f7fa fb3f 	bl	8001610 <LCD_PutStr>

		j+=15;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	330f      	adds	r3, #15
 8006f96:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	617b      	str	r3, [r7, #20]
		if((ZION.SOC_BoardID==1) || (ZION.ASIC_BoardID==1) || (ZION.DISPLAY_BoardID==1)){
 8006f9c:	4b64      	ldr	r3, [pc, #400]	; (8007130 <drawSystemInfoMenu+0x280>)
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d007      	beq.n	8006fb4 <drawSystemInfoMenu+0x104>
 8006fa4:	4b62      	ldr	r3, [pc, #392]	; (8007130 <drawSystemInfoMenu+0x280>)
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d003      	beq.n	8006fb4 <drawSystemInfoMenu+0x104>
 8006fac:	4b60      	ldr	r3, [pc, #384]	; (8007130 <drawSystemInfoMenu+0x280>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d108      	bne.n	8006fc6 <drawSystemInfoMenu+0x116>
			LCD_PutStr(i, j, "Atlas", fnt7x10);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	b298      	uxth	r0, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	b299      	uxth	r1, r3
 8006fbc:	4b56      	ldr	r3, [pc, #344]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006fbe:	4a5d      	ldr	r2, [pc, #372]	; (8007134 <drawSystemInfoMenu+0x284>)
 8006fc0:	f7fa fb26 	bl	8001610 <LCD_PutStr>
 8006fc4:	e007      	b.n	8006fd6 <drawSystemInfoMenu+0x126>
		}
		else{
			LCD_PutStr(i, j, "Unknown", fnt7x10);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	b298      	uxth	r0, r3
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	b299      	uxth	r1, r3
 8006fce:	4b52      	ldr	r3, [pc, #328]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006fd0:	4a53      	ldr	r2, [pc, #332]	; (8007120 <drawSystemInfoMenu+0x270>)
 8006fd2:	f7fa fb1d 	bl	8001610 <LCD_PutStr>
		}

		j+=15;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	330f      	adds	r3, #15
 8006fda:	613b      	str	r3, [r7, #16]
		i=10;
 8006fdc:	230a      	movs	r3, #10
 8006fde:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Board Versions: ", fnt7x10);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	b298      	uxth	r0, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	b299      	uxth	r1, r3
 8006fe8:	4b4b      	ldr	r3, [pc, #300]	; (8007118 <drawSystemInfoMenu+0x268>)
 8006fea:	4a53      	ldr	r2, [pc, #332]	; (8007138 <drawSystemInfoMenu+0x288>)
 8006fec:	f7fa fb10 	bl	8001610 <LCD_PutStr>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
		i=otherBoardAlignment;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "Other Boards: ", fnt7x10);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	b298      	uxth	r0, r3
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	b299      	uxth	r1, r3
 8007006:	4b44      	ldr	r3, [pc, #272]	; (8007118 <drawSystemInfoMenu+0x268>)
 8007008:	4a4c      	ldr	r2, [pc, #304]	; (800713c <drawSystemInfoMenu+0x28c>)
 800700a:	f7fa fb01 	bl	8001610 <LCD_PutStr>

		j+=15;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	330f      	adds	r3, #15
 8007012:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SOC: ", fnt7x10);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	b298      	uxth	r0, r3
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	b299      	uxth	r1, r3
 8007020:	4b3d      	ldr	r3, [pc, #244]	; (8007118 <drawSystemInfoMenu+0x268>)
 8007022:	4a47      	ldr	r2, [pc, #284]	; (8007140 <drawSystemInfoMenu+0x290>)
 8007024:	f7fa faf4 	bl	8001610 <LCD_PutStr>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	4413      	add	r3, r2
 8007030:	617b      	str	r3, [r7, #20]
		if(ZION.SOC_BoardID==1){
 8007032:	4b3f      	ldr	r3, [pc, #252]	; (8007130 <drawSystemInfoMenu+0x280>)
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d14a      	bne.n	80070d0 <drawSystemInfoMenu+0x220>
			i+=LCD_PutStr(i, j, "TRIDENT ", fnt7x10);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	b298      	uxth	r0, r3
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	b299      	uxth	r1, r3
 8007042:	4b35      	ldr	r3, [pc, #212]	; (8007118 <drawSystemInfoMenu+0x268>)
 8007044:	4a3f      	ldr	r2, [pc, #252]	; (8007144 <drawSystemInfoMenu+0x294>)
 8007046:	f7fa fae3 	bl	8001610 <LCD_PutStr>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	4413      	add	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
			switch(ZION.SOC_BoardFab){
 8007054:	4b36      	ldr	r3, [pc, #216]	; (8007130 <drawSystemInfoMenu+0x280>)
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	3b01      	subs	r3, #1
 800705a:	2b03      	cmp	r3, #3
 800705c:	d82e      	bhi.n	80070bc <drawSystemInfoMenu+0x20c>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <drawSystemInfoMenu+0x1b4>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007075 	.word	0x08007075
 8007068:	08007087 	.word	0x08007087
 800706c:	08007099 	.word	0x08007099
 8007070:	080070ab 	.word	0x080070ab
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	b298      	uxth	r0, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	b299      	uxth	r1, r3
 800707c:	4b26      	ldr	r3, [pc, #152]	; (8007118 <drawSystemInfoMenu+0x268>)
 800707e:	4a32      	ldr	r2, [pc, #200]	; (8007148 <drawSystemInfoMenu+0x298>)
 8007080:	f7fa fac6 	bl	8001610 <LCD_PutStr>
				break;
 8007084:	e076      	b.n	8007174 <drawSystemInfoMenu+0x2c4>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	b298      	uxth	r0, r3
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	b299      	uxth	r1, r3
 800708e:	4b22      	ldr	r3, [pc, #136]	; (8007118 <drawSystemInfoMenu+0x268>)
 8007090:	4a2e      	ldr	r2, [pc, #184]	; (800714c <drawSystemInfoMenu+0x29c>)
 8007092:	f7fa fabd 	bl	8001610 <LCD_PutStr>
				break;
 8007096:	e06d      	b.n	8007174 <drawSystemInfoMenu+0x2c4>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	b298      	uxth	r0, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	b299      	uxth	r1, r3
 80070a0:	4b1d      	ldr	r3, [pc, #116]	; (8007118 <drawSystemInfoMenu+0x268>)
 80070a2:	4a2b      	ldr	r2, [pc, #172]	; (8007150 <drawSystemInfoMenu+0x2a0>)
 80070a4:	f7fa fab4 	bl	8001610 <LCD_PutStr>
				break;
 80070a8:	e064      	b.n	8007174 <drawSystemInfoMenu+0x2c4>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	b298      	uxth	r0, r3
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	b299      	uxth	r1, r3
 80070b2:	4b19      	ldr	r3, [pc, #100]	; (8007118 <drawSystemInfoMenu+0x268>)
 80070b4:	4a27      	ldr	r2, [pc, #156]	; (8007154 <drawSystemInfoMenu+0x2a4>)
 80070b6:	f7fa faab 	bl	8001610 <LCD_PutStr>
				break;
 80070ba:	e05b      	b.n	8007174 <drawSystemInfoMenu+0x2c4>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	b298      	uxth	r0, r3
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	b299      	uxth	r1, r3
 80070c4:	4b14      	ldr	r3, [pc, #80]	; (8007118 <drawSystemInfoMenu+0x268>)
 80070c6:	4a24      	ldr	r2, [pc, #144]	; (8007158 <drawSystemInfoMenu+0x2a8>)
 80070c8:	f7fa faa2 	bl	8001610 <LCD_PutStr>
				break;
 80070cc:	bf00      	nop
 80070ce:	e051      	b.n	8007174 <drawSystemInfoMenu+0x2c4>
			}
			}
		}
		else{
			if(ZION.SOC_EEPROM_Detected){
 80070d0:	4b17      	ldr	r3, [pc, #92]	; (8007130 <drawSystemInfoMenu+0x280>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d045      	beq.n	8007164 <drawSystemInfoMenu+0x2b4>
				if(ZION.SOC_BoardFab == -2){
 80070d8:	4b15      	ldr	r3, [pc, #84]	; (8007130 <drawSystemInfoMenu+0x280>)
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f113 0f02 	cmn.w	r3, #2
 80070e0:	d108      	bne.n	80070f4 <drawSystemInfoMenu+0x244>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	b298      	uxth	r0, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	b299      	uxth	r1, r3
 80070ea:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <drawSystemInfoMenu+0x268>)
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <drawSystemInfoMenu+0x2ac>)
 80070ee:	f7fa fa8f 	bl	8001610 <LCD_PutStr>
 80070f2:	e03f      	b.n	8007174 <drawSystemInfoMenu+0x2c4>
				}
				else if(ZION.SOC_BoardFab ==-1){
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <drawSystemInfoMenu+0x280>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d13a      	bne.n	8007174 <drawSystemInfoMenu+0x2c4>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	b298      	uxth	r0, r3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	b299      	uxth	r1, r3
 8007106:	4b04      	ldr	r3, [pc, #16]	; (8007118 <drawSystemInfoMenu+0x268>)
 8007108:	4a15      	ldr	r2, [pc, #84]	; (8007160 <drawSystemInfoMenu+0x2b0>)
 800710a:	f7fa fa81 	bl	8001610 <LCD_PutStr>
 800710e:	e031      	b.n	8007174 <drawSystemInfoMenu+0x2c4>
 8007110:	20003374 	.word	0x20003374
 8007114:	20028aa6 	.word	0x20028aa6
 8007118:	08018254 	.word	0x08018254
 800711c:	08017dd4 	.word	0x08017dd4
 8007120:	08017de4 	.word	0x08017de4
 8007124:	08017dec 	.word	0x08017dec
 8007128:	08017e04 	.word	0x08017e04
 800712c:	08017e0c 	.word	0x08017e0c
 8007130:	20003274 	.word	0x20003274
 8007134:	08017e18 	.word	0x08017e18
 8007138:	08017e20 	.word	0x08017e20
 800713c:	08017e34 	.word	0x08017e34
 8007140:	08017ad4 	.word	0x08017ad4
 8007144:	08017e44 	.word	0x08017e44
 8007148:	08017e50 	.word	0x08017e50
 800714c:	08017e58 	.word	0x08017e58
 8007150:	08017e60 	.word	0x08017e60
 8007154:	08017e68 	.word	0x08017e68
 8007158:	08017e70 	.word	0x08017e70
 800715c:	08017e78 	.word	0x08017e78
 8007160:	08017e90 	.word	0x08017e90
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	b298      	uxth	r0, r3
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	b299      	uxth	r1, r3
 800716c:	4b93      	ldr	r3, [pc, #588]	; (80073bc <drawSystemInfoMenu+0x50c>)
 800716e:	4a94      	ldr	r2, [pc, #592]	; (80073c0 <drawSystemInfoMenu+0x510>)
 8007170:	f7fa fa4e 	bl	8001610 <LCD_PutStr>
			}
		}
		i=otherBoardAlignment+indentAlignment;
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	4413      	add	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	b298      	uxth	r0, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	b299      	uxth	r1, r3
 8007184:	4b8d      	ldr	r3, [pc, #564]	; (80073bc <drawSystemInfoMenu+0x50c>)
 8007186:	4a8f      	ldr	r2, [pc, #572]	; (80073c4 <drawSystemInfoMenu+0x514>)
 8007188:	f7fa fa42 	bl	8001610 <LCD_PutStr>
 800718c:	4603      	mov	r3, r0
 800718e:	461a      	mov	r2, r3
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch){
 8007196:	4b8c      	ldr	r3, [pc, #560]	; (80073c8 <drawSystemInfoMenu+0x518>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d008      	beq.n	80071b0 <drawSystemInfoMenu+0x300>
			LCD_PutStr(i, j, "Not detected", fnt7x10);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	b298      	uxth	r0, r3
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	b299      	uxth	r1, r3
 80071a6:	4b85      	ldr	r3, [pc, #532]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80071a8:	4a88      	ldr	r2, [pc, #544]	; (80073cc <drawSystemInfoMenu+0x51c>)
 80071aa:	f7fa fa31 	bl	8001610 <LCD_PutStr>
 80071ae:	e007      	b.n	80071c0 <drawSystemInfoMenu+0x310>
		}
		else{
			LCD_PutStr(i, j, "Detected", fnt7x10);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	b298      	uxth	r0, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	b299      	uxth	r1, r3
 80071b8:	4b80      	ldr	r3, [pc, #512]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80071ba:	4a85      	ldr	r2, [pc, #532]	; (80073d0 <drawSystemInfoMenu+0x520>)
 80071bc:	f7fa fa28 	bl	8001610 <LCD_PutStr>
		}

		j+=15;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	330f      	adds	r3, #15
 80071c4:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ASIC: ", fnt7x10);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	b298      	uxth	r0, r3
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	b299      	uxth	r1, r3
 80071d2:	4b7a      	ldr	r3, [pc, #488]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80071d4:	4a7f      	ldr	r2, [pc, #508]	; (80073d4 <drawSystemInfoMenu+0x524>)
 80071d6:	f7fa fa1b 	bl	8001610 <LCD_PutStr>
 80071da:	4603      	mov	r3, r0
 80071dc:	461a      	mov	r2, r3
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	4413      	add	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]
		if(ZION.ASIC_BoardID==1){
 80071e4:	4b78      	ldr	r3, [pc, #480]	; (80073c8 <drawSystemInfoMenu+0x518>)
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d14b      	bne.n	8007284 <drawSystemInfoMenu+0x3d4>
			i+=LCD_PutStr(i, j, "TOGA ", fnt7x10);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	b298      	uxth	r0, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	b299      	uxth	r1, r3
 80071f4:	4b71      	ldr	r3, [pc, #452]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80071f6:	4a78      	ldr	r2, [pc, #480]	; (80073d8 <drawSystemInfoMenu+0x528>)
 80071f8:	f7fa fa0a 	bl	8001610 <LCD_PutStr>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
			switch(ZION.ASIC_BoardFab){
 8007206:	4b70      	ldr	r3, [pc, #448]	; (80073c8 <drawSystemInfoMenu+0x518>)
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	3b01      	subs	r3, #1
 800720c:	2b03      	cmp	r3, #3
 800720e:	d82f      	bhi.n	8007270 <drawSystemInfoMenu+0x3c0>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <drawSystemInfoMenu+0x368>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	08007229 	.word	0x08007229
 800721c:	0800723b 	.word	0x0800723b
 8007220:	0800724d 	.word	0x0800724d
 8007224:	0800725f 	.word	0x0800725f
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	b298      	uxth	r0, r3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	b299      	uxth	r1, r3
 8007230:	4b62      	ldr	r3, [pc, #392]	; (80073bc <drawSystemInfoMenu+0x50c>)
 8007232:	4a6a      	ldr	r2, [pc, #424]	; (80073dc <drawSystemInfoMenu+0x52c>)
 8007234:	f7fa f9ec 	bl	8001610 <LCD_PutStr>
				break;
 8007238:	e04c      	b.n	80072d4 <drawSystemInfoMenu+0x424>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	b298      	uxth	r0, r3
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	b299      	uxth	r1, r3
 8007242:	4b5e      	ldr	r3, [pc, #376]	; (80073bc <drawSystemInfoMenu+0x50c>)
 8007244:	4a66      	ldr	r2, [pc, #408]	; (80073e0 <drawSystemInfoMenu+0x530>)
 8007246:	f7fa f9e3 	bl	8001610 <LCD_PutStr>
				break;
 800724a:	e043      	b.n	80072d4 <drawSystemInfoMenu+0x424>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	b298      	uxth	r0, r3
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	b299      	uxth	r1, r3
 8007254:	4b59      	ldr	r3, [pc, #356]	; (80073bc <drawSystemInfoMenu+0x50c>)
 8007256:	4a63      	ldr	r2, [pc, #396]	; (80073e4 <drawSystemInfoMenu+0x534>)
 8007258:	f7fa f9da 	bl	8001610 <LCD_PutStr>
				break;
 800725c:	e03a      	b.n	80072d4 <drawSystemInfoMenu+0x424>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	b298      	uxth	r0, r3
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	b299      	uxth	r1, r3
 8007266:	4b55      	ldr	r3, [pc, #340]	; (80073bc <drawSystemInfoMenu+0x50c>)
 8007268:	4a5f      	ldr	r2, [pc, #380]	; (80073e8 <drawSystemInfoMenu+0x538>)
 800726a:	f7fa f9d1 	bl	8001610 <LCD_PutStr>
				break;
 800726e:	e031      	b.n	80072d4 <drawSystemInfoMenu+0x424>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	b298      	uxth	r0, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	b299      	uxth	r1, r3
 8007278:	4b50      	ldr	r3, [pc, #320]	; (80073bc <drawSystemInfoMenu+0x50c>)
 800727a:	4a5c      	ldr	r2, [pc, #368]	; (80073ec <drawSystemInfoMenu+0x53c>)
 800727c:	f7fa f9c8 	bl	8001610 <LCD_PutStr>
				break;
 8007280:	bf00      	nop
 8007282:	e027      	b.n	80072d4 <drawSystemInfoMenu+0x424>
			}
			}
		}
		else{
			if(ZION.ASIC_EEPROM_Detected){
 8007284:	4b50      	ldr	r3, [pc, #320]	; (80073c8 <drawSystemInfoMenu+0x518>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01b      	beq.n	80072c4 <drawSystemInfoMenu+0x414>
				if(ZION.ASIC_BoardFab == -2){
 800728c:	4b4e      	ldr	r3, [pc, #312]	; (80073c8 <drawSystemInfoMenu+0x518>)
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	f113 0f02 	cmn.w	r3, #2
 8007294:	d108      	bne.n	80072a8 <drawSystemInfoMenu+0x3f8>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	b298      	uxth	r0, r3
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	b299      	uxth	r1, r3
 800729e:	4b47      	ldr	r3, [pc, #284]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80072a0:	4a53      	ldr	r2, [pc, #332]	; (80073f0 <drawSystemInfoMenu+0x540>)
 80072a2:	f7fa f9b5 	bl	8001610 <LCD_PutStr>
 80072a6:	e015      	b.n	80072d4 <drawSystemInfoMenu+0x424>
				}
				else if(ZION.ASIC_BoardFab ==-1){
 80072a8:	4b47      	ldr	r3, [pc, #284]	; (80073c8 <drawSystemInfoMenu+0x518>)
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b0:	d110      	bne.n	80072d4 <drawSystemInfoMenu+0x424>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	b298      	uxth	r0, r3
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	b299      	uxth	r1, r3
 80072ba:	4b40      	ldr	r3, [pc, #256]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80072bc:	4a4d      	ldr	r2, [pc, #308]	; (80073f4 <drawSystemInfoMenu+0x544>)
 80072be:	f7fa f9a7 	bl	8001610 <LCD_PutStr>
 80072c2:	e007      	b.n	80072d4 <drawSystemInfoMenu+0x424>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	b298      	uxth	r0, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	b299      	uxth	r1, r3
 80072cc:	4b3b      	ldr	r3, [pc, #236]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80072ce:	4a3c      	ldr	r2, [pc, #240]	; (80073c0 <drawSystemInfoMenu+0x510>)
 80072d0:	f7fa f99e 	bl	8001610 <LCD_PutStr>
			}
		}

		j+=15;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	330f      	adds	r3, #15
 80072d8:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "DISPLAY: ", fnt7x10);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	b298      	uxth	r0, r3
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	b299      	uxth	r1, r3
 80072e6:	4b35      	ldr	r3, [pc, #212]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80072e8:	4a43      	ldr	r2, [pc, #268]	; (80073f8 <drawSystemInfoMenu+0x548>)
 80072ea:	f7fa f991 	bl	8001610 <LCD_PutStr>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4413      	add	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
		if(ZION.DISPLAY_BoardID==1){
 80072f8:	4b33      	ldr	r3, [pc, #204]	; (80073c8 <drawSystemInfoMenu+0x518>)
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d14b      	bne.n	8007398 <drawSystemInfoMenu+0x4e8>
			i+=LCD_PutStr(i, j, "KANU ", fnt7x10);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	b298      	uxth	r0, r3
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	b299      	uxth	r1, r3
 8007308:	4b2c      	ldr	r3, [pc, #176]	; (80073bc <drawSystemInfoMenu+0x50c>)
 800730a:	4a3c      	ldr	r2, [pc, #240]	; (80073fc <drawSystemInfoMenu+0x54c>)
 800730c:	f7fa f980 	bl	8001610 <LCD_PutStr>
 8007310:	4603      	mov	r3, r0
 8007312:	461a      	mov	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	4413      	add	r3, r2
 8007318:	617b      	str	r3, [r7, #20]
			switch(ZION.DISPLAY_BoardFab){
 800731a:	4b2b      	ldr	r3, [pc, #172]	; (80073c8 <drawSystemInfoMenu+0x518>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	3b01      	subs	r3, #1
 8007320:	2b03      	cmp	r3, #3
 8007322:	d82f      	bhi.n	8007384 <drawSystemInfoMenu+0x4d4>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <drawSystemInfoMenu+0x47c>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800734f 	.word	0x0800734f
 8007334:	08007361 	.word	0x08007361
 8007338:	08007373 	.word	0x08007373
			case 1:{
				LCD_PutStr(i, j, "FAB A", fnt7x10);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	b298      	uxth	r0, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	b299      	uxth	r1, r3
 8007344:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <drawSystemInfoMenu+0x50c>)
 8007346:	4a25      	ldr	r2, [pc, #148]	; (80073dc <drawSystemInfoMenu+0x52c>)
 8007348:	f7fa f962 	bl	8001610 <LCD_PutStr>
				break;
 800734c:	e06e      	b.n	800742c <drawSystemInfoMenu+0x57c>
			}
			case 2:{
				LCD_PutStr(i, j, "FAB B", fnt7x10);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	b298      	uxth	r0, r3
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	b299      	uxth	r1, r3
 8007356:	4b19      	ldr	r3, [pc, #100]	; (80073bc <drawSystemInfoMenu+0x50c>)
 8007358:	4a21      	ldr	r2, [pc, #132]	; (80073e0 <drawSystemInfoMenu+0x530>)
 800735a:	f7fa f959 	bl	8001610 <LCD_PutStr>
				break;
 800735e:	e065      	b.n	800742c <drawSystemInfoMenu+0x57c>
			}
			case 3:{
				LCD_PutStr(i, j, "FAB C", fnt7x10);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	b298      	uxth	r0, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	b299      	uxth	r1, r3
 8007368:	4b14      	ldr	r3, [pc, #80]	; (80073bc <drawSystemInfoMenu+0x50c>)
 800736a:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <drawSystemInfoMenu+0x534>)
 800736c:	f7fa f950 	bl	8001610 <LCD_PutStr>
				break;
 8007370:	e05c      	b.n	800742c <drawSystemInfoMenu+0x57c>
			}
			case 4:{
				LCD_PutStr(i, j, "FAB D", fnt7x10);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	b298      	uxth	r0, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	b299      	uxth	r1, r3
 800737a:	4b10      	ldr	r3, [pc, #64]	; (80073bc <drawSystemInfoMenu+0x50c>)
 800737c:	4a1a      	ldr	r2, [pc, #104]	; (80073e8 <drawSystemInfoMenu+0x538>)
 800737e:	f7fa f947 	bl	8001610 <LCD_PutStr>
				break;
 8007382:	e053      	b.n	800742c <drawSystemInfoMenu+0x57c>
			}
			default:{
				LCD_PutStr(i, j, "FAB NA", fnt7x10);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	b298      	uxth	r0, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	b299      	uxth	r1, r3
 800738c:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <drawSystemInfoMenu+0x50c>)
 800738e:	4a17      	ldr	r2, [pc, #92]	; (80073ec <drawSystemInfoMenu+0x53c>)
 8007390:	f7fa f93e 	bl	8001610 <LCD_PutStr>
				break;
 8007394:	bf00      	nop
 8007396:	e049      	b.n	800742c <drawSystemInfoMenu+0x57c>
			}
			}
		}
		else{
			if(ZION.DISPLAY_EEPROM_Detected){
 8007398:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <drawSystemInfoMenu+0x518>)
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d03d      	beq.n	800741c <drawSystemInfoMenu+0x56c>
				if(ZION.DISPLAY_BoardFab == -2){
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <drawSystemInfoMenu+0x518>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	f113 0f02 	cmn.w	r3, #2
 80073a8:	d12a      	bne.n	8007400 <drawSystemInfoMenu+0x550>
					LCD_PutStr(i, j, "EEPROM-NO DEVICE DATA", fnt7x10);
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	b298      	uxth	r0, r3
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	b299      	uxth	r1, r3
 80073b2:	4b02      	ldr	r3, [pc, #8]	; (80073bc <drawSystemInfoMenu+0x50c>)
 80073b4:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <drawSystemInfoMenu+0x540>)
 80073b6:	f7fa f92b 	bl	8001610 <LCD_PutStr>
 80073ba:	e037      	b.n	800742c <drawSystemInfoMenu+0x57c>
 80073bc:	08018254 	.word	0x08018254
 80073c0:	08017ea8 	.word	0x08017ea8
 80073c4:	08017ebc 	.word	0x08017ebc
 80073c8:	20003274 	.word	0x20003274
 80073cc:	08017ec4 	.word	0x08017ec4
 80073d0:	08017adc 	.word	0x08017adc
 80073d4:	08017b10 	.word	0x08017b10
 80073d8:	08017ed4 	.word	0x08017ed4
 80073dc:	08017e50 	.word	0x08017e50
 80073e0:	08017e58 	.word	0x08017e58
 80073e4:	08017e60 	.word	0x08017e60
 80073e8:	08017e68 	.word	0x08017e68
 80073ec:	08017e70 	.word	0x08017e70
 80073f0:	08017e78 	.word	0x08017e78
 80073f4:	08017e90 	.word	0x08017e90
 80073f8:	08017edc 	.word	0x08017edc
 80073fc:	08017ee8 	.word	0x08017ee8
				}
				else if(ZION.DISPLAY_BoardFab ==-1){
 8007400:	4b1e      	ldr	r3, [pc, #120]	; (800747c <drawSystemInfoMenu+0x5cc>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007408:	d110      	bne.n	800742c <drawSystemInfoMenu+0x57c>
					LCD_PutStr(i, j, "EEPROM-UNINITIALIZED", fnt7x10);
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	b298      	uxth	r0, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	b299      	uxth	r1, r3
 8007412:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <drawSystemInfoMenu+0x5d0>)
 8007414:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <drawSystemInfoMenu+0x5d4>)
 8007416:	f7fa f8fb 	bl	8001610 <LCD_PutStr>
 800741a:	e007      	b.n	800742c <drawSystemInfoMenu+0x57c>
				}
			}
			else{
				LCD_PutStr(i, j, "EEPROM not detected", fnt7x10);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	b298      	uxth	r0, r3
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	b299      	uxth	r1, r3
 8007424:	4b16      	ldr	r3, [pc, #88]	; (8007480 <drawSystemInfoMenu+0x5d0>)
 8007426:	4a18      	ldr	r2, [pc, #96]	; (8007488 <drawSystemInfoMenu+0x5d8>)
 8007428:	f7fa f8f2 	bl	8001610 <LCD_PutStr>
			}
		}

		i=200;
 800742c:	23c8      	movs	r3, #200	; 0xc8
 800742e:	617b      	str	r3, [r7, #20]
		j=220;
 8007430:	23dc      	movs	r3, #220	; 0xdc
 8007432:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	b298      	uxth	r0, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	b299      	uxth	r1, r3
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	b29a      	uxth	r2, r3
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f7fa fa34 	bl	80018b0 <drawUpDownArrow>
		i=180;
 8007448:	23b4      	movs	r3, #180	; 0xb4
 800744a:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	b298      	uxth	r0, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	b299      	uxth	r1, r3
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	b29a      	uxth	r2, r3
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	b29b      	uxth	r3, r3
 800745c:	f7fa fa28 	bl	80018b0 <drawUpDownArrow>
		i=220;
 8007460:	23dc      	movs	r3, #220	; 0xdc
 8007462:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowDown);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	b298      	uxth	r0, r3
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	b299      	uxth	r1, r3
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	b29a      	uxth	r2, r3
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f7fa fa1c 	bl	80018b0 <drawUpDownArrow>
		break;
 8007478:	e14a      	b.n	8007710 <drawSystemInfoMenu+0x860>
 800747a:	bf00      	nop
 800747c:	20003274 	.word	0x20003274
 8007480:	08018254 	.word	0x08018254
 8007484:	08017e90 	.word	0x08017e90
 8007488:	08017ea8 	.word	0x08017ea8
	}
	case 2:{
		j=45;
 800748c:	232d      	movs	r3, #45	; 0x2d
 800748e:	613b      	str	r3, [r7, #16]
		i=10;
 8007490:	230a      	movs	r3, #10
 8007492:	617b      	str	r3, [r7, #20]
		LCD_PutStr(i, j, "DEV UI BANK VOLTAGES:", fnt7x10);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	b298      	uxth	r0, r3
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	b299      	uxth	r1, r3
 800749c:	4b9f      	ldr	r3, [pc, #636]	; (800771c <drawSystemInfoMenu+0x86c>)
 800749e:	4aa0      	ldr	r2, [pc, #640]	; (8007720 <drawSystemInfoMenu+0x870>)
 80074a0:	f7fa f8b6 	bl	8001610 <LCD_PutStr>

		j+=25;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	3319      	adds	r3, #25
 80074a8:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE UART: ", fnt7x10);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	b298      	uxth	r0, r3
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	b299      	uxth	r1, r3
 80074b6:	4b99      	ldr	r3, [pc, #612]	; (800771c <drawSystemInfoMenu+0x86c>)
 80074b8:	4a9a      	ldr	r2, [pc, #616]	; (8007724 <drawSystemInfoMenu+0x874>)
 80074ba:	f7fa f8a9 	bl	8001610 <LCD_PutStr>
 80074be:	4603      	mov	r3, r0
 80074c0:	461a      	mov	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	4413      	add	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareUartADC];
 80074c8:	4b97      	ldr	r3, [pc, #604]	; (8007728 <drawSystemInfoMenu+0x878>)
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	4a97      	ldr	r2, [pc, #604]	; (800772c <drawSystemInfoMenu+0x87c>)
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	edd3 7a00 	vldr	s15, [r3]
 80074d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80074da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80074de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80074e6:	ee17 3a90 	vmov	r3, s15
 80074ea:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	b298      	uxth	r0, r3
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	b299      	uxth	r1, r3
 80074f4:	4b89      	ldr	r3, [pc, #548]	; (800771c <drawSystemInfoMenu+0x86c>)
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	2301      	movs	r3, #1
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	f7fa f926 	bl	800174c <LCD_PutIntF>

		j+=25;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	3319      	adds	r3, #25
 8007504:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE I2C: ", fnt7x10);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	b298      	uxth	r0, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	b299      	uxth	r1, r3
 8007512:	4b82      	ldr	r3, [pc, #520]	; (800771c <drawSystemInfoMenu+0x86c>)
 8007514:	4a86      	ldr	r2, [pc, #536]	; (8007730 <drawSystemInfoMenu+0x880>)
 8007516:	f7fa f87b 	bl	8001610 <LCD_PutStr>
 800751a:	4603      	mov	r3, r0
 800751c:	461a      	mov	r2, r3
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	4413      	add	r3, r2
 8007522:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareI2cADC];
 8007524:	4b80      	ldr	r3, [pc, #512]	; (8007728 <drawSystemInfoMenu+0x878>)
 8007526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007528:	4a80      	ldr	r2, [pc, #512]	; (800772c <drawSystemInfoMenu+0x87c>)
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	edd3 7a00 	vldr	s15, [r3]
 8007532:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007536:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800753a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800753e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007542:	ee17 3a90 	vmov	r3, s15
 8007546:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	b298      	uxth	r0, r3
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	b299      	uxth	r1, r3
 8007550:	4b72      	ldr	r3, [pc, #456]	; (800771c <drawSystemInfoMenu+0x86c>)
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	2301      	movs	r3, #1
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	f7fa f8f8 	bl	800174c <LCD_PutIntF>

		j+=25;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	3319      	adds	r3, #25
 8007560:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "SPARE SPI: ", fnt7x10);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	b298      	uxth	r0, r3
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	b299      	uxth	r1, r3
 800756e:	4b6b      	ldr	r3, [pc, #428]	; (800771c <drawSystemInfoMenu+0x86c>)
 8007570:	4a70      	ldr	r2, [pc, #448]	; (8007734 <drawSystemInfoMenu+0x884>)
 8007572:	f7fa f84d 	bl	8001610 <LCD_PutStr>
 8007576:	4603      	mov	r3, r0
 8007578:	461a      	mov	r2, r3
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.spareSpiADC];
 8007580:	4b69      	ldr	r3, [pc, #420]	; (8007728 <drawSystemInfoMenu+0x878>)
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	4a69      	ldr	r2, [pc, #420]	; (800772c <drawSystemInfoMenu+0x87c>)
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	edd3 7a00 	vldr	s15, [r3]
 800758e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007592:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800759a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800759e:	ee17 3a90 	vmov	r3, s15
 80075a2:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	b298      	uxth	r0, r3
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	b299      	uxth	r1, r3
 80075ac:	4b5b      	ldr	r3, [pc, #364]	; (800771c <drawSystemInfoMenu+0x86c>)
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2301      	movs	r3, #1
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	f7fa f8ca 	bl	800174c <LCD_PutIntF>

		j+=25;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3319      	adds	r3, #25
 80075bc:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "CONFIG: ", fnt7x10);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	b298      	uxth	r0, r3
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	b299      	uxth	r1, r3
 80075ca:	4b54      	ldr	r3, [pc, #336]	; (800771c <drawSystemInfoMenu+0x86c>)
 80075cc:	4a5a      	ldr	r2, [pc, #360]	; (8007738 <drawSystemInfoMenu+0x888>)
 80075ce:	f7fa f81f 	bl	8001610 <LCD_PutStr>
 80075d2:	4603      	mov	r3, r0
 80075d4:	461a      	mov	r2, r3
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	4413      	add	r3, r2
 80075da:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.configADC];
 80075dc:	4b52      	ldr	r3, [pc, #328]	; (8007728 <drawSystemInfoMenu+0x878>)
 80075de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e0:	4a52      	ldr	r2, [pc, #328]	; (800772c <drawSystemInfoMenu+0x87c>)
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	edd3 7a00 	vldr	s15, [r3]
 80075ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80075f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80075fa:	ee17 3a90 	vmov	r3, s15
 80075fe:	60fb      	str	r3, [r7, #12]
		LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	b298      	uxth	r0, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	b299      	uxth	r1, r3
 8007608:	4b44      	ldr	r3, [pc, #272]	; (800771c <drawSystemInfoMenu+0x86c>)
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2301      	movs	r3, #1
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	f7fa f89c 	bl	800174c <LCD_PutIntF>

		j+=25;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3319      	adds	r3, #25
 8007618:	613b      	str	r3, [r7, #16]
		i=indentAlignment;
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "ZION: ", fnt7x10);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	b298      	uxth	r0, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	b299      	uxth	r1, r3
 8007626:	4b3d      	ldr	r3, [pc, #244]	; (800771c <drawSystemInfoMenu+0x86c>)
 8007628:	4a44      	ldr	r2, [pc, #272]	; (800773c <drawSystemInfoMenu+0x88c>)
 800762a:	f7f9 fff1 	bl	8001610 <LCD_PutStr>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
		convertedFloat = 10.0 * displayAdcValues[Adc.zionADC];
 8007638:	4b3b      	ldr	r3, [pc, #236]	; (8007728 <drawSystemInfoMenu+0x878>)
 800763a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763c:	4a3b      	ldr	r2, [pc, #236]	; (800772c <drawSystemInfoMenu+0x87c>)
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	edd3 7a00 	vldr	s15, [r3]
 8007646:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800764a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800764e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007652:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007656:	ee17 3a90 	vmov	r3, s15
 800765a:	60fb      	str	r3, [r7, #12]
		i+=LCD_PutIntF(i, j, convertedFloat, 1, fnt7x10) + adjacentSpacing;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	b298      	uxth	r0, r3
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	b299      	uxth	r1, r3
 8007664:	4b2d      	ldr	r3, [pc, #180]	; (800771c <drawSystemInfoMenu+0x86c>)
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2301      	movs	r3, #1
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	f7fa f86e 	bl	800174c <LCD_PutIntF>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	4413      	add	r3, r2
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4413      	add	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
		i+=LCD_PutStr(i, j, "Zion Switch: ", fnt7x10);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	b298      	uxth	r0, r3
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	b299      	uxth	r1, r3
 8007686:	4b25      	ldr	r3, [pc, #148]	; (800771c <drawSystemInfoMenu+0x86c>)
 8007688:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <drawSystemInfoMenu+0x890>)
 800768a:	f7f9 ffc1 	bl	8001610 <LCD_PutStr>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	4413      	add	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
		if(ZION.zionSwitch ==1){
 8007698:	4b2a      	ldr	r3, [pc, #168]	; (8007744 <drawSystemInfoMenu+0x894>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d108      	bne.n	80076b2 <drawSystemInfoMenu+0x802>
			LCD_PutStr(i, j, "ACTIVE", fnt7x10);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	b298      	uxth	r0, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	b299      	uxth	r1, r3
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <drawSystemInfoMenu+0x86c>)
 80076aa:	4a27      	ldr	r2, [pc, #156]	; (8007748 <drawSystemInfoMenu+0x898>)
 80076ac:	f7f9 ffb0 	bl	8001610 <LCD_PutStr>
 80076b0:	e007      	b.n	80076c2 <drawSystemInfoMenu+0x812>
		}
		else{
			LCD_PutStr(i, j, "INACTIVE", fnt7x10);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	b298      	uxth	r0, r3
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	b299      	uxth	r1, r3
 80076ba:	4b18      	ldr	r3, [pc, #96]	; (800771c <drawSystemInfoMenu+0x86c>)
 80076bc:	4a23      	ldr	r2, [pc, #140]	; (800774c <drawSystemInfoMenu+0x89c>)
 80076be:	f7f9 ffa7 	bl	8001610 <LCD_PutStr>
		}



		i=200;
 80076c2:	23c8      	movs	r3, #200	; 0xc8
 80076c4:	617b      	str	r3, [r7, #20]
		j=15;
 80076c6:	230f      	movs	r3, #15
 80076c8:	613b      	str	r3, [r7, #16]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	b298      	uxth	r0, r3
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	b299      	uxth	r1, r3
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f7fa f8e9 	bl	80018b0 <drawUpDownArrow>
		i=180;
 80076de:	23b4      	movs	r3, #180	; 0xb4
 80076e0:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	b298      	uxth	r0, r3
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	b299      	uxth	r1, r3
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f7fa f8dd 	bl	80018b0 <drawUpDownArrow>
		i=220;
 80076f6:	23dc      	movs	r3, #220	; 0xdc
 80076f8:	617b      	str	r3, [r7, #20]
		drawUpDownArrow(i, j, arrowSize, arrowUp);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	b298      	uxth	r0, r3
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	b299      	uxth	r1, r3
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	b29a      	uxth	r2, r3
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	b29b      	uxth	r3, r3
 800770a:	f7fa f8d1 	bl	80018b0 <drawUpDownArrow>

		break;
 800770e:	bf00      	nop
	}
	}
	SMLCD_Flush();
 8007710:	f7f8 ffe6 	bl	80006e0 <SMLCD_Flush>
}
 8007714:	bf00      	nop
 8007716:	3730      	adds	r7, #48	; 0x30
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	08018254 	.word	0x08018254
 8007720:	08017ef0 	.word	0x08017ef0
 8007724:	08017f08 	.word	0x08017f08
 8007728:	20000128 	.word	0x20000128
 800772c:	200310e0 	.word	0x200310e0
 8007730:	08017f18 	.word	0x08017f18
 8007734:	08017f24 	.word	0x08017f24
 8007738:	08017f30 	.word	0x08017f30
 800773c:	08017ebc 	.word	0x08017ebc
 8007740:	08017f3c 	.word	0x08017f3c
 8007744:	20003274 	.word	0x20003274
 8007748:	08017f4c 	.word	0x08017f4c
 800774c:	08017f54 	.word	0x08017f54

08007750 <drawBootMenu>:

void drawBootMenu(int indicator, uint8_t button, int menu){
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	460b      	mov	r3, r1
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	72fb      	strb	r3, [r7, #11]
	int i,j;
		int adjacentSpacing = 20;
 800775e:	2314      	movs	r3, #20
 8007760:	61bb      	str	r3, [r7, #24]
		int indentAlignment=50;
 8007762:	2332      	movs	r3, #50	; 0x32
 8007764:	617b      	str	r3, [r7, #20]


		LCD_Clear();
 8007766:	f7f9 f973 	bl	8000a50 <LCD_Clear>
		getLatestADC();
 800776a:	f000 fcc9 	bl	8008100 <getLatestADC>
		drawMenuHeader();
 800776e:	f000 fc0b 	bl	8007f88 <drawMenuHeader>
		i  = 135;
 8007772:	2387      	movs	r3, #135	; 0x87
 8007774:	613b      	str	r3, [r7, #16]
		j = 24;
 8007776:	2318      	movs	r3, #24
 8007778:	61fb      	str	r3, [r7, #28]
		//horizontal divider
		LCD_FillRect(2, j, scr_width - 2, j + 3);
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	b299      	uxth	r1, r3
 800777e:	4b8d      	ldr	r3, [pc, #564]	; (80079b4 <drawBootMenu+0x264>)
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	3b02      	subs	r3, #2
 8007784:	b29a      	uxth	r2, r3
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	b29b      	uxth	r3, r3
 800778a:	3303      	adds	r3, #3
 800778c:	b29b      	uxth	r3, r3
 800778e:	2002      	movs	r0, #2
 8007790:	f7f9 fbf2 	bl	8000f78 <LCD_FillRect>
		if(displayAdcValues[Adc.adc0] >3.5){
 8007794:	4b88      	ldr	r3, [pc, #544]	; (80079b8 <drawBootMenu+0x268>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a88      	ldr	r2, [pc, #544]	; (80079bc <drawBootMenu+0x26c>)
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	edd3 7a00 	vldr	s15, [r3]
 80077a2:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80077a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ae:	f340 839a 	ble.w	8007ee6 <drawBootMenu+0x796>
			if(ZION.zionFinished){
 80077b2:	4b83      	ldr	r3, [pc, #524]	; (80079c0 <drawBootMenu+0x270>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 82d1 	beq.w	8007d5e <drawBootMenu+0x60e>
				if((ZION.SOC_BoardFab == ATLAS) || (ZION.ASIC_BoardFab == ATLAS) || (ZION.DISPLAY_BoardFab == ATLAS)){
 80077bc:	4b80      	ldr	r3, [pc, #512]	; (80079c0 <drawBootMenu+0x270>)
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d008      	beq.n	80077d6 <drawBootMenu+0x86>
 80077c4:	4b7e      	ldr	r3, [pc, #504]	; (80079c0 <drawBootMenu+0x270>)
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d004      	beq.n	80077d6 <drawBootMenu+0x86>
 80077cc:	4b7c      	ldr	r3, [pc, #496]	; (80079c0 <drawBootMenu+0x270>)
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	f040 820d 	bne.w	8007bf0 <drawBootMenu+0x4a0>
					j=45;
 80077d6:	232d      	movs	r3, #45	; 0x2d
 80077d8:	61fb      	str	r3, [r7, #28]
					i=5;
 80077da:	2305      	movs	r3, #5
 80077dc:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "ATLAS RECOGNIZED. PROVIDING ATLAS BOOT MODES:", fnt7x10);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	b298      	uxth	r0, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	b299      	uxth	r1, r3
 80077e6:	4b77      	ldr	r3, [pc, #476]	; (80079c4 <drawBootMenu+0x274>)
 80077e8:	4a77      	ldr	r2, [pc, #476]	; (80079c8 <drawBootMenu+0x278>)
 80077ea:	f7f9 ff11 	bl	8001610 <LCD_PutStr>
					j+=30;
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	331e      	adds	r3, #30
 80077f2:	61fb      	str	r3, [r7, #28]
					i=42;
 80077f4:	232a      	movs	r3, #42	; 0x2a
 80077f6:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	b298      	uxth	r0, r3
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	b299      	uxth	r1, r3
 8007800:	4b70      	ldr	r3, [pc, #448]	; (80079c4 <drawBootMenu+0x274>)
 8007802:	4a72      	ldr	r2, [pc, #456]	; (80079cc <drawBootMenu+0x27c>)
 8007804:	f7f9 ff04 	bl	8001610 <LCD_PutStr>
					i=indentAlignment;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	613b      	str	r3, [r7, #16]
					j+=20;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	3314      	adds	r3, #20
 8007810:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	b298      	uxth	r0, r3
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	b299      	uxth	r1, r3
 800781a:	4b6a      	ldr	r3, [pc, #424]	; (80079c4 <drawBootMenu+0x274>)
 800781c:	4a6c      	ldr	r2, [pc, #432]	; (80079d0 <drawBootMenu+0x280>)
 800781e:	f7f9 fef7 	bl	8001610 <LCD_PutStr>
					j+=20;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	3314      	adds	r3, #20
 8007826:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "EMERGENCY DOWNLOAD", fnt7x10);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	b298      	uxth	r0, r3
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	b299      	uxth	r1, r3
 8007830:	4b64      	ldr	r3, [pc, #400]	; (80079c4 <drawBootMenu+0x274>)
 8007832:	4a68      	ldr	r2, [pc, #416]	; (80079d4 <drawBootMenu+0x284>)
 8007834:	f7f9 feec 	bl	8001610 <LCD_PutStr>
					j+=20;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	3314      	adds	r3, #20
 800783c:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "RECOVERY", fnt7x10);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	b298      	uxth	r0, r3
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	b299      	uxth	r1, r3
 8007846:	4b5f      	ldr	r3, [pc, #380]	; (80079c4 <drawBootMenu+0x274>)
 8007848:	4a63      	ldr	r2, [pc, #396]	; (80079d8 <drawBootMenu+0x288>)
 800784a:	f7f9 fee1 	bl	8001610 <LCD_PutStr>
					j+=20;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	3314      	adds	r3, #20
 8007852:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "MASS STORAGE", fnt7x10);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	b298      	uxth	r0, r3
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	b299      	uxth	r1, r3
 800785c:	4b59      	ldr	r3, [pc, #356]	; (80079c4 <drawBootMenu+0x274>)
 800785e:	4a5f      	ldr	r2, [pc, #380]	; (80079dc <drawBootMenu+0x28c>)
 8007860:	f7f9 fed6 	bl	8001610 <LCD_PutStr>
					j+=20;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	3314      	adds	r3, #20
 8007868:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "UEFI", fnt7x10);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	b298      	uxth	r0, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	b299      	uxth	r1, r3
 8007872:	4b54      	ldr	r3, [pc, #336]	; (80079c4 <drawBootMenu+0x274>)
 8007874:	4a5a      	ldr	r2, [pc, #360]	; (80079e0 <drawBootMenu+0x290>)
 8007876:	f7f9 fecb 	bl	8001610 <LCD_PutStr>
					i-= 17;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3b11      	subs	r3, #17
 800787e:	613b      	str	r3, [r7, #16]
					if(setIndicator==0){
 8007880:	4b58      	ldr	r3, [pc, #352]	; (80079e4 <drawBootMenu+0x294>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 810d 	bne.w	8007aa4 <drawBootMenu+0x354>
						switch(indicator){
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3b01      	subs	r3, #1
 800788e:	2b04      	cmp	r3, #4
 8007890:	f200 8104 	bhi.w	8007a9c <drawBootMenu+0x34c>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <drawBootMenu+0x14c>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078b1 	.word	0x080078b1
 80078a0:	08007907 	.word	0x08007907
 80078a4:	0800795d 	.word	0x0800795d
 80078a8:	080079f1 	.word	0x080079f1
 80078ac:	08007a47 	.word	0x08007a47
						case FIRST:
						{
							j=95;
 80078b0:	235f      	movs	r3, #95	; 0x5f
 80078b2:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	4b49      	ldr	r3, [pc, #292]	; (80079e8 <drawBootMenu+0x298>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4299      	cmp	r1, r3
 80078c8:	bf0c      	ite	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	2300      	movne	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	4013      	ands	r3, r2
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8170 	beq.w	8007bba <drawBootMenu+0x46a>
								i=140;
 80078da:	238c      	movs	r3, #140	; 0x8c
 80078dc:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	b298      	uxth	r0, r3
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	3305      	adds	r3, #5
 80078e8:	b299      	uxth	r1, r3
 80078ea:	2303      	movs	r3, #3
 80078ec:	2203      	movs	r2, #3
 80078ee:	f7f9 ffdf 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn0=1;
 80078f2:	4b3e      	ldr	r3, [pc, #248]	; (80079ec <drawBootMenu+0x29c>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 80078f8:	4b3c      	ldr	r3, [pc, #240]	; (80079ec <drawBootMenu+0x29c>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 80078fe:	4b39      	ldr	r3, [pc, #228]	; (80079e4 <drawBootMenu+0x294>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]
							}

							break;
 8007904:	e159      	b.n	8007bba <drawBootMenu+0x46a>
						}
						case SECOND:
						{
							j=115;
 8007906:	2373      	movs	r3, #115	; 0x73
 8007908:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	2b04      	cmp	r3, #4
 800790e:	bf0c      	ite	eq
 8007910:	2301      	moveq	r3, #1
 8007912:	2300      	movne	r3, #0
 8007914:	b2da      	uxtb	r2, r3
 8007916:	4b34      	ldr	r3, [pc, #208]	; (80079e8 <drawBootMenu+0x298>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4299      	cmp	r1, r3
 800791e:	bf0c      	ite	eq
 8007920:	2301      	moveq	r3, #1
 8007922:	2300      	movne	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	4013      	ands	r3, r2
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8147 	beq.w	8007bbe <drawBootMenu+0x46e>
								i=220;
 8007930:	23dc      	movs	r3, #220	; 0xdc
 8007932:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	b298      	uxth	r0, r3
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	b29b      	uxth	r3, r3
 800793c:	3305      	adds	r3, #5
 800793e:	b299      	uxth	r1, r3
 8007940:	2303      	movs	r3, #3
 8007942:	2203      	movs	r2, #3
 8007944:	f7f9 ffb4 	bl	80018b0 <drawUpDownArrow>
								bootButtons.edl_sw=1;
 8007948:	4b28      	ldr	r3, [pc, #160]	; (80079ec <drawBootMenu+0x29c>)
 800794a:	2201      	movs	r2, #1
 800794c:	61da      	str	r2, [r3, #28]
								bootButtons.bootModeSet=1;
 800794e:	4b27      	ldr	r3, [pc, #156]	; (80079ec <drawBootMenu+0x29c>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
								setIndicator=2;
 8007954:	4b23      	ldr	r3, [pc, #140]	; (80079e4 <drawBootMenu+0x294>)
 8007956:	2202      	movs	r2, #2
 8007958:	601a      	str	r2, [r3, #0]
							}

							break;
 800795a:	e130      	b.n	8007bbe <drawBootMenu+0x46e>
						}
						case THIRD:
						{
							j=135;
 800795c:	2387      	movs	r3, #135	; 0x87
 800795e:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	2b04      	cmp	r3, #4
 8007964:	bf0c      	ite	eq
 8007966:	2301      	moveq	r3, #1
 8007968:	2300      	movne	r3, #0
 800796a:	b2da      	uxtb	r2, r3
 800796c:	4b1e      	ldr	r3, [pc, #120]	; (80079e8 <drawBootMenu+0x298>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	4299      	cmp	r1, r3
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	4013      	ands	r3, r2
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 811e 	beq.w	8007bc2 <drawBootMenu+0x472>
								i=130;
 8007986:	2382      	movs	r3, #130	; 0x82
 8007988:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	b298      	uxth	r0, r3
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	b29b      	uxth	r3, r3
 8007992:	3305      	adds	r3, #5
 8007994:	b299      	uxth	r1, r3
 8007996:	2303      	movs	r3, #3
 8007998:	2203      	movs	r2, #3
 800799a:	f7f9 ff89 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn1=1;
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <drawBootMenu+0x29c>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	609a      	str	r2, [r3, #8]
								bootButtons.bootModeSet=1;
 80079a4:	4b11      	ldr	r3, [pc, #68]	; (80079ec <drawBootMenu+0x29c>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
								setIndicator=3;
 80079aa:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <drawBootMenu+0x294>)
 80079ac:	2203      	movs	r2, #3
 80079ae:	601a      	str	r2, [r3, #0]
							}

							break;
 80079b0:	e107      	b.n	8007bc2 <drawBootMenu+0x472>
 80079b2:	bf00      	nop
 80079b4:	20028aa6 	.word	0x20028aa6
 80079b8:	20000128 	.word	0x20000128
 80079bc:	200310e0 	.word	0x200310e0
 80079c0:	20003274 	.word	0x20003274
 80079c4:	08018254 	.word	0x08018254
 80079c8:	08017f60 	.word	0x08017f60
 80079cc:	08017f90 	.word	0x08017f90
 80079d0:	08017fac 	.word	0x08017fac
 80079d4:	08017fb8 	.word	0x08017fb8
 80079d8:	08017fcc 	.word	0x08017fcc
 80079dc:	08017fd8 	.word	0x08017fd8
 80079e0:	08017a08 	.word	0x08017a08
 80079e4:	20003378 	.word	0x20003378
 80079e8:	20003374 	.word	0x20003374
 80079ec:	200032ac 	.word	0x200032ac
						}
						case FOURTH:
						{
							j=155;
 80079f0:	239b      	movs	r3, #155	; 0x9b
 80079f2:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf0c      	ite	eq
 80079fa:	2301      	moveq	r3, #1
 80079fc:	2300      	movne	r3, #0
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	4b78      	ldr	r3, [pc, #480]	; (8007be4 <drawBootMenu+0x494>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4299      	cmp	r1, r3
 8007a08:	bf0c      	ite	eq
 8007a0a:	2301      	moveq	r3, #1
 8007a0c:	2300      	movne	r3, #0
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	4013      	ands	r3, r2
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80d6 	beq.w	8007bc6 <drawBootMenu+0x476>
								i=160;
 8007a1a:	23a0      	movs	r3, #160	; 0xa0
 8007a1c:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	b298      	uxth	r0, r3
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3305      	adds	r3, #5
 8007a28:	b299      	uxth	r1, r3
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	f7f9 ff3f 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn2=1;
 8007a32:	4b6d      	ldr	r3, [pc, #436]	; (8007be8 <drawBootMenu+0x498>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	60da      	str	r2, [r3, #12]
								bootButtons.bootModeSet=1;
 8007a38:	4b6b      	ldr	r3, [pc, #428]	; (8007be8 <drawBootMenu+0x498>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
								setIndicator=4;
 8007a3e:	4b6b      	ldr	r3, [pc, #428]	; (8007bec <drawBootMenu+0x49c>)
 8007a40:	2204      	movs	r2, #4
 8007a42:	601a      	str	r2, [r3, #0]
							}

							break;
 8007a44:	e0bf      	b.n	8007bc6 <drawBootMenu+0x476>
						}
						case FIFTH:
						{
							j=175;
 8007a46:	23af      	movs	r3, #175	; 0xaf
 8007a48:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	bf0c      	ite	eq
 8007a50:	2301      	moveq	r3, #1
 8007a52:	2300      	movne	r3, #0
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	4b63      	ldr	r3, [pc, #396]	; (8007be4 <drawBootMenu+0x494>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	bf0c      	ite	eq
 8007a60:	2301      	moveq	r3, #1
 8007a62:	2300      	movne	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	4013      	ands	r3, r2
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80ad 	beq.w	8007bca <drawBootMenu+0x47a>
								i=100;
 8007a70:	2364      	movs	r3, #100	; 0x64
 8007a72:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	b298      	uxth	r0, r3
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3305      	adds	r3, #5
 8007a7e:	b299      	uxth	r1, r3
 8007a80:	2303      	movs	r3, #3
 8007a82:	2203      	movs	r2, #3
 8007a84:	f7f9 ff14 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn3=1;
 8007a88:	4b57      	ldr	r3, [pc, #348]	; (8007be8 <drawBootMenu+0x498>)
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	611a      	str	r2, [r3, #16]
								bootButtons.bootModeSet=1;
 8007a8e:	4b56      	ldr	r3, [pc, #344]	; (8007be8 <drawBootMenu+0x498>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
								setIndicator=5;
 8007a94:	4b55      	ldr	r3, [pc, #340]	; (8007bec <drawBootMenu+0x49c>)
 8007a96:	2205      	movs	r2, #5
 8007a98:	601a      	str	r2, [r3, #0]
							}

							break;
 8007a9a:	e096      	b.n	8007bca <drawBootMenu+0x47a>
						}
						default:
						{
							j=95;
 8007a9c:	235f      	movs	r3, #95	; 0x5f
 8007a9e:	61fb      	str	r3, [r7, #28]
							break;
 8007aa0:	bf00      	nop
 8007aa2:	e09d      	b.n	8007be0 <drawBootMenu+0x490>
						}
						}
					}
					else{
						switch(setIndicator){
 8007aa4:	4b51      	ldr	r3, [pc, #324]	; (8007bec <drawBootMenu+0x49c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d87a      	bhi.n	8007ba4 <drawBootMenu+0x454>
 8007aae:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <drawBootMenu+0x364>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007ac9 	.word	0x08007ac9
 8007ab8:	08007af5 	.word	0x08007af5
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007b4d 	.word	0x08007b4d
 8007ac4:	08007b79 	.word	0x08007b79
						case FIRST:
						{
							j=95;
 8007ac8:	235f      	movs	r3, #95	; 0x5f
 8007aca:	61fb      	str	r3, [r7, #28]
							i=140;
 8007acc:	238c      	movs	r3, #140	; 0x8c
 8007ace:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	b298      	uxth	r0, r3
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3305      	adds	r3, #5
 8007ada:	b299      	uxth	r1, r3
 8007adc:	2303      	movs	r3, #3
 8007ade:	2203      	movs	r2, #3
 8007ae0:	f7f9 fee6 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007ae4:	4b40      	ldr	r3, [pc, #256]	; (8007be8 <drawBootMenu+0x498>)
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d070      	beq.n	8007bce <drawBootMenu+0x47e>
								setIndicator=0;
 8007aec:	4b3f      	ldr	r3, [pc, #252]	; (8007bec <drawBootMenu+0x49c>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
							}
							break;
 8007af2:	e06c      	b.n	8007bce <drawBootMenu+0x47e>
						}
						case SECOND:
						{
							j=115;
 8007af4:	2373      	movs	r3, #115	; 0x73
 8007af6:	61fb      	str	r3, [r7, #28]
							i=220;
 8007af8:	23dc      	movs	r3, #220	; 0xdc
 8007afa:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	b298      	uxth	r0, r3
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3305      	adds	r3, #5
 8007b06:	b299      	uxth	r1, r3
 8007b08:	2303      	movs	r3, #3
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	f7f9 fed0 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007b10:	4b35      	ldr	r3, [pc, #212]	; (8007be8 <drawBootMenu+0x498>)
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d05c      	beq.n	8007bd2 <drawBootMenu+0x482>
								setIndicator=0;
 8007b18:	4b34      	ldr	r3, [pc, #208]	; (8007bec <drawBootMenu+0x49c>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
							}
							break;
 8007b1e:	e058      	b.n	8007bd2 <drawBootMenu+0x482>
						}
						case THIRD:
						{
							j=135;
 8007b20:	2387      	movs	r3, #135	; 0x87
 8007b22:	61fb      	str	r3, [r7, #28]
							i=130;
 8007b24:	2382      	movs	r3, #130	; 0x82
 8007b26:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	b298      	uxth	r0, r3
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3305      	adds	r3, #5
 8007b32:	b299      	uxth	r1, r3
 8007b34:	2303      	movs	r3, #3
 8007b36:	2203      	movs	r2, #3
 8007b38:	f7f9 feba 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007b3c:	4b2a      	ldr	r3, [pc, #168]	; (8007be8 <drawBootMenu+0x498>)
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d048      	beq.n	8007bd6 <drawBootMenu+0x486>
								setIndicator=0;
 8007b44:	4b29      	ldr	r3, [pc, #164]	; (8007bec <drawBootMenu+0x49c>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
							}
							break;
 8007b4a:	e044      	b.n	8007bd6 <drawBootMenu+0x486>
						}
						case FOURTH:
						{
							j=155;
 8007b4c:	239b      	movs	r3, #155	; 0x9b
 8007b4e:	61fb      	str	r3, [r7, #28]
							i=160;
 8007b50:	23a0      	movs	r3, #160	; 0xa0
 8007b52:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	b298      	uxth	r0, r3
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3305      	adds	r3, #5
 8007b5e:	b299      	uxth	r1, r3
 8007b60:	2303      	movs	r3, #3
 8007b62:	2203      	movs	r2, #3
 8007b64:	f7f9 fea4 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007b68:	4b1f      	ldr	r3, [pc, #124]	; (8007be8 <drawBootMenu+0x498>)
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d034      	beq.n	8007bda <drawBootMenu+0x48a>
								setIndicator=0;
 8007b70:	4b1e      	ldr	r3, [pc, #120]	; (8007bec <drawBootMenu+0x49c>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
							}
							break;
 8007b76:	e030      	b.n	8007bda <drawBootMenu+0x48a>
						}
						case FIFTH:
						{
							j=175;
 8007b78:	23af      	movs	r3, #175	; 0xaf
 8007b7a:	61fb      	str	r3, [r7, #28]
							i=100;
 8007b7c:	2364      	movs	r3, #100	; 0x64
 8007b7e:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	b298      	uxth	r0, r3
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3305      	adds	r3, #5
 8007b8a:	b299      	uxth	r1, r3
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	2203      	movs	r2, #3
 8007b90:	f7f9 fe8e 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <drawBootMenu+0x498>)
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d020      	beq.n	8007bde <drawBootMenu+0x48e>
								setIndicator=0;
 8007b9c:	4b13      	ldr	r3, [pc, #76]	; (8007bec <drawBootMenu+0x49c>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
							}
							break;
 8007ba2:	e01c      	b.n	8007bde <drawBootMenu+0x48e>
						}
						default:
						{
							drawUpDownArrow(i, j+5, 3, 3);
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	b298      	uxth	r0, r3
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3305      	adds	r3, #5
 8007bae:	b299      	uxth	r1, r3
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	f7f9 fe7c 	bl	80018b0 <drawUpDownArrow>
							break;
 8007bb8:	e012      	b.n	8007be0 <drawBootMenu+0x490>
							break;
 8007bba:	bf00      	nop
 8007bbc:	e1bf      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bbe:	bf00      	nop
 8007bc0:	e1bd      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bc2:	bf00      	nop
 8007bc4:	e1bb      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bc6:	bf00      	nop
 8007bc8:	e1b9      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bca:	bf00      	nop
 8007bcc:	e1b7      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bce:	bf00      	nop
 8007bd0:	e1b5      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bd2:	bf00      	nop
 8007bd4:	e1b3      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bd6:	bf00      	nop
 8007bd8:	e1b1      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bda:	bf00      	nop
 8007bdc:	e1af      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007bde:	bf00      	nop
					if(setIndicator==0){
 8007be0:	e1ad      	b.n	8007f3e <drawBootMenu+0x7ee>
 8007be2:	bf00      	nop
 8007be4:	20003374 	.word	0x20003374
 8007be8:	200032ac 	.word	0x200032ac
 8007bec:	20003378 	.word	0x20003378
						}
						}
					}
				}
				else{
					j=45;
 8007bf0:	232d      	movs	r3, #45	; 0x2d
 8007bf2:	61fb      	str	r3, [r7, #28]
					i=5;
 8007bf4:	2305      	movs	r3, #5
 8007bf6:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i,j, "UNKNOWN SYSTEM. STANDARD MODE ONLY:", fnt7x10);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	b298      	uxth	r0, r3
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	b299      	uxth	r1, r3
 8007c00:	4b98      	ldr	r3, [pc, #608]	; (8007e64 <drawBootMenu+0x714>)
 8007c02:	4a99      	ldr	r2, [pc, #612]	; (8007e68 <drawBootMenu+0x718>)
 8007c04:	f7f9 fd04 	bl	8001610 <LCD_PutStr>
					j+=30;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	331e      	adds	r3, #30
 8007c0c:	61fb      	str	r3, [r7, #28]
					i=42;
 8007c0e:	232a      	movs	r3, #42	; 0x2a
 8007c10:	613b      	str	r3, [r7, #16]
					LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	b298      	uxth	r0, r3
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	b299      	uxth	r1, r3
 8007c1a:	4b92      	ldr	r3, [pc, #584]	; (8007e64 <drawBootMenu+0x714>)
 8007c1c:	4a93      	ldr	r2, [pc, #588]	; (8007e6c <drawBootMenu+0x71c>)
 8007c1e:	f7f9 fcf7 	bl	8001610 <LCD_PutStr>
					i=indentAlignment;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	613b      	str	r3, [r7, #16]
					j+=20;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	3314      	adds	r3, #20
 8007c2a:	61fb      	str	r3, [r7, #28]
					LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	b298      	uxth	r0, r3
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	b299      	uxth	r1, r3
 8007c34:	4b8b      	ldr	r3, [pc, #556]	; (8007e64 <drawBootMenu+0x714>)
 8007c36:	4a8e      	ldr	r2, [pc, #568]	; (8007e70 <drawBootMenu+0x720>)
 8007c38:	f7f9 fcea 	bl	8001610 <LCD_PutStr>
					if(setIndicator==0){
 8007c3c:	4b8d      	ldr	r3, [pc, #564]	; (8007e74 <drawBootMenu+0x724>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d159      	bne.n	8007cf8 <drawBootMenu+0x5a8>
						switch(indicator){
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d12a      	bne.n	8007ca0 <drawBootMenu+0x550>
						case FIRST:
						{
							j=95;
 8007c4a:	235f      	movs	r3, #95	; 0x5f
 8007c4c:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	bf0c      	ite	eq
 8007c54:	2301      	moveq	r3, #1
 8007c56:	2300      	movne	r3, #0
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b87      	ldr	r3, [pc, #540]	; (8007e78 <drawBootMenu+0x728>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4299      	cmp	r1, r3
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8156 	beq.w	8007f20 <drawBootMenu+0x7d0>
								i=140;
 8007c74:	238c      	movs	r3, #140	; 0x8c
 8007c76:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	b298      	uxth	r0, r3
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3305      	adds	r3, #5
 8007c82:	b299      	uxth	r1, r3
 8007c84:	2303      	movs	r3, #3
 8007c86:	2203      	movs	r2, #3
 8007c88:	f7f9 fe12 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn0=1;
 8007c8c:	4b7b      	ldr	r3, [pc, #492]	; (8007e7c <drawBootMenu+0x72c>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8007c92:	4b7a      	ldr	r3, [pc, #488]	; (8007e7c <drawBootMenu+0x72c>)
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8007c98:	4b76      	ldr	r3, [pc, #472]	; (8007e74 <drawBootMenu+0x724>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
							}
							break;
 8007c9e:	e13f      	b.n	8007f20 <drawBootMenu+0x7d0>
						}
						default:
						{
							j=95;
 8007ca0:	235f      	movs	r3, #95	; 0x5f
 8007ca2:	61fb      	str	r3, [r7, #28]
							if((button == SEL) & (previousMenu == menu)){
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	4b71      	ldr	r3, [pc, #452]	; (8007e78 <drawBootMenu+0x728>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	4299      	cmp	r1, r3
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 812d 	beq.w	8007f24 <drawBootMenu+0x7d4>
								i=140;
 8007cca:	238c      	movs	r3, #140	; 0x8c
 8007ccc:	613b      	str	r3, [r7, #16]
								drawUpDownArrow(i, j+5, 3, 3);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	b298      	uxth	r0, r3
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3305      	adds	r3, #5
 8007cd8:	b299      	uxth	r1, r3
 8007cda:	2303      	movs	r3, #3
 8007cdc:	2203      	movs	r2, #3
 8007cde:	f7f9 fde7 	bl	80018b0 <drawUpDownArrow>
								bootButtons.btn0=1;
 8007ce2:	4b66      	ldr	r3, [pc, #408]	; (8007e7c <drawBootMenu+0x72c>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	605a      	str	r2, [r3, #4]
								bootButtons.bootModeSet=1;
 8007ce8:	4b64      	ldr	r3, [pc, #400]	; (8007e7c <drawBootMenu+0x72c>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
								setIndicator=1;
 8007cee:	4b61      	ldr	r3, [pc, #388]	; (8007e74 <drawBootMenu+0x724>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
							}
							break;
 8007cf4:	bf00      	nop
 8007cf6:	e115      	b.n	8007f24 <drawBootMenu+0x7d4>
						}
						}
					}
					else{
						switch(setIndicator){
 8007cf8:	4b5e      	ldr	r3, [pc, #376]	; (8007e74 <drawBootMenu+0x724>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d116      	bne.n	8007d2e <drawBootMenu+0x5de>
						case FIRST:
						{
							j=95;
 8007d00:	235f      	movs	r3, #95	; 0x5f
 8007d02:	61fb      	str	r3, [r7, #28]
							i=140;
 8007d04:	238c      	movs	r3, #140	; 0x8c
 8007d06:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	b298      	uxth	r0, r3
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3305      	adds	r3, #5
 8007d12:	b299      	uxth	r1, r3
 8007d14:	2303      	movs	r3, #3
 8007d16:	2203      	movs	r2, #3
 8007d18:	f7f9 fdca 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007d1c:	4b57      	ldr	r3, [pc, #348]	; (8007e7c <drawBootMenu+0x72c>)
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8101 	beq.w	8007f28 <drawBootMenu+0x7d8>
								setIndicator=0;
 8007d26:	4b53      	ldr	r3, [pc, #332]	; (8007e74 <drawBootMenu+0x724>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
							}
							break;
 8007d2c:	e0fc      	b.n	8007f28 <drawBootMenu+0x7d8>
						}
						default:
						{
							j=95;
 8007d2e:	235f      	movs	r3, #95	; 0x5f
 8007d30:	61fb      	str	r3, [r7, #28]
							i=140;
 8007d32:	238c      	movs	r3, #140	; 0x8c
 8007d34:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	b298      	uxth	r0, r3
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3305      	adds	r3, #5
 8007d40:	b299      	uxth	r1, r3
 8007d42:	2303      	movs	r3, #3
 8007d44:	2203      	movs	r2, #3
 8007d46:	f7f9 fdb3 	bl	80018b0 <drawUpDownArrow>
							if(bootButtons.modeClear){
 8007d4a:	4b4c      	ldr	r3, [pc, #304]	; (8007e7c <drawBootMenu+0x72c>)
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 80ec 	beq.w	8007f2c <drawBootMenu+0x7dc>
								setIndicator=0;
 8007d54:	4b47      	ldr	r3, [pc, #284]	; (8007e74 <drawBootMenu+0x724>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
							}
							break;
 8007d5a:	bf00      	nop
 8007d5c:	e0e6      	b.n	8007f2c <drawBootMenu+0x7dc>
						}
					}
				}
			}
			else{
				j=45;
 8007d5e:	232d      	movs	r3, #45	; 0x2d
 8007d60:	61fb      	str	r3, [r7, #28]
				i=15;
 8007d62:	230f      	movs	r3, #15
 8007d64:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i,j, "WAITING ON ZION INFO. STANDARD MODE ONLY:", fnt7x10);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	b298      	uxth	r0, r3
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	b299      	uxth	r1, r3
 8007d6e:	4b3d      	ldr	r3, [pc, #244]	; (8007e64 <drawBootMenu+0x714>)
 8007d70:	4a43      	ldr	r2, [pc, #268]	; (8007e80 <drawBootMenu+0x730>)
 8007d72:	f7f9 fc4d 	bl	8001610 <LCD_PutStr>
				j+=30;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	331e      	adds	r3, #30
 8007d7a:	61fb      	str	r3, [r7, #28]
				i=42;
 8007d7c:	232a      	movs	r3, #42	; 0x2a
 8007d7e:	613b      	str	r3, [r7, #16]
				LCD_PutStr(i, j, "Please Select Boot Mode:", fnt7x10);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	b298      	uxth	r0, r3
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	b299      	uxth	r1, r3
 8007d88:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <drawBootMenu+0x714>)
 8007d8a:	4a38      	ldr	r2, [pc, #224]	; (8007e6c <drawBootMenu+0x71c>)
 8007d8c:	f7f9 fc40 	bl	8001610 <LCD_PutStr>
				i=indentAlignment;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	613b      	str	r3, [r7, #16]
				j+=20;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	3314      	adds	r3, #20
 8007d98:	61fb      	str	r3, [r7, #28]
				LCD_PutStr(i, j, "STANDARD", fnt7x10);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	b298      	uxth	r0, r3
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	b299      	uxth	r1, r3
 8007da2:	4b30      	ldr	r3, [pc, #192]	; (8007e64 <drawBootMenu+0x714>)
 8007da4:	4a32      	ldr	r2, [pc, #200]	; (8007e70 <drawBootMenu+0x720>)
 8007da6:	f7f9 fc33 	bl	8001610 <LCD_PutStr>
				if(setIndicator==0){
 8007daa:	4b32      	ldr	r3, [pc, #200]	; (8007e74 <drawBootMenu+0x724>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d168      	bne.n	8007e84 <drawBootMenu+0x734>
					switch(indicator){
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d12a      	bne.n	8007e0e <drawBootMenu+0x6be>
					case FIRST:
					{
						j=95;
 8007db8:	235f      	movs	r3, #95	; 0x5f
 8007dba:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	bf0c      	ite	eq
 8007dc2:	2301      	moveq	r3, #1
 8007dc4:	2300      	movne	r3, #0
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	4b2b      	ldr	r3, [pc, #172]	; (8007e78 <drawBootMenu+0x728>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	4299      	cmp	r1, r3
 8007dd0:	bf0c      	ite	eq
 8007dd2:	2301      	moveq	r3, #1
 8007dd4:	2300      	movne	r3, #0
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4013      	ands	r3, r2
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80a7 	beq.w	8007f30 <drawBootMenu+0x7e0>
							i=140;
 8007de2:	238c      	movs	r3, #140	; 0x8c
 8007de4:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	b298      	uxth	r0, r3
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3305      	adds	r3, #5
 8007df0:	b299      	uxth	r1, r3
 8007df2:	2303      	movs	r3, #3
 8007df4:	2203      	movs	r2, #3
 8007df6:	f7f9 fd5b 	bl	80018b0 <drawUpDownArrow>
							bootButtons.btn0=1;
 8007dfa:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <drawBootMenu+0x72c>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 8007e00:	4b1e      	ldr	r3, [pc, #120]	; (8007e7c <drawBootMenu+0x72c>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007e06:	4b1b      	ldr	r3, [pc, #108]	; (8007e74 <drawBootMenu+0x724>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
						}
						break;
 8007e0c:	e090      	b.n	8007f30 <drawBootMenu+0x7e0>
					}
					default:
					{
						j=95;
 8007e0e:	235f      	movs	r3, #95	; 0x5f
 8007e10:	61fb      	str	r3, [r7, #28]
						if((button == SEL) & (previousMenu == menu)){
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	bf0c      	ite	eq
 8007e18:	2301      	moveq	r3, #1
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	4b16      	ldr	r3, [pc, #88]	; (8007e78 <drawBootMenu+0x728>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4299      	cmp	r1, r3
 8007e26:	bf0c      	ite	eq
 8007e28:	2301      	moveq	r3, #1
 8007e2a:	2300      	movne	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	4013      	ands	r3, r2
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d07e      	beq.n	8007f34 <drawBootMenu+0x7e4>
							i=140;
 8007e36:	238c      	movs	r3, #140	; 0x8c
 8007e38:	613b      	str	r3, [r7, #16]
							drawUpDownArrow(i, j+5, 3, 3);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	b298      	uxth	r0, r3
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3305      	adds	r3, #5
 8007e44:	b299      	uxth	r1, r3
 8007e46:	2303      	movs	r3, #3
 8007e48:	2203      	movs	r2, #3
 8007e4a:	f7f9 fd31 	bl	80018b0 <drawUpDownArrow>
							bootButtons.btn0=1;
 8007e4e:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <drawBootMenu+0x72c>)
 8007e50:	2201      	movs	r2, #1
 8007e52:	605a      	str	r2, [r3, #4]
							bootButtons.bootModeSet=1;
 8007e54:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <drawBootMenu+0x72c>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
							setIndicator=1;
 8007e5a:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <drawBootMenu+0x724>)
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]
						}
						break;
 8007e60:	bf00      	nop
 8007e62:	e067      	b.n	8007f34 <drawBootMenu+0x7e4>
 8007e64:	08018254 	.word	0x08018254
 8007e68:	08017fe8 	.word	0x08017fe8
 8007e6c:	08017f90 	.word	0x08017f90
 8007e70:	08017fac 	.word	0x08017fac
 8007e74:	20003378 	.word	0x20003378
 8007e78:	20003374 	.word	0x20003374
 8007e7c:	200032ac 	.word	0x200032ac
 8007e80:	0801800c 	.word	0x0801800c
					}
					}
				}
				else{
					switch(setIndicator){
 8007e84:	4b3a      	ldr	r3, [pc, #232]	; (8007f70 <drawBootMenu+0x820>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d115      	bne.n	8007eb8 <drawBootMenu+0x768>
					case FIRST:
					{
						j=95;
 8007e8c:	235f      	movs	r3, #95	; 0x5f
 8007e8e:	61fb      	str	r3, [r7, #28]
						i=140;
 8007e90:	238c      	movs	r3, #140	; 0x8c
 8007e92:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	b298      	uxth	r0, r3
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3305      	adds	r3, #5
 8007e9e:	b299      	uxth	r1, r3
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	f7f9 fd04 	bl	80018b0 <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007ea8:	4b32      	ldr	r3, [pc, #200]	; (8007f74 <drawBootMenu+0x824>)
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d043      	beq.n	8007f38 <drawBootMenu+0x7e8>
							setIndicator=0;
 8007eb0:	4b2f      	ldr	r3, [pc, #188]	; (8007f70 <drawBootMenu+0x820>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
						}
						break;
 8007eb6:	e03f      	b.n	8007f38 <drawBootMenu+0x7e8>
					}
					default:
					{
						j=95;
 8007eb8:	235f      	movs	r3, #95	; 0x5f
 8007eba:	61fb      	str	r3, [r7, #28]
						i=140;
 8007ebc:	238c      	movs	r3, #140	; 0x8c
 8007ebe:	613b      	str	r3, [r7, #16]
						drawUpDownArrow(i, j+5, 3, 3);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	b298      	uxth	r0, r3
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3305      	adds	r3, #5
 8007eca:	b299      	uxth	r1, r3
 8007ecc:	2303      	movs	r3, #3
 8007ece:	2203      	movs	r2, #3
 8007ed0:	f7f9 fcee 	bl	80018b0 <drawUpDownArrow>
						if(bootButtons.modeClear){
 8007ed4:	4b27      	ldr	r3, [pc, #156]	; (8007f74 <drawBootMenu+0x824>)
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d02f      	beq.n	8007f3c <drawBootMenu+0x7ec>
							setIndicator=0;
 8007edc:	4b24      	ldr	r3, [pc, #144]	; (8007f70 <drawBootMenu+0x820>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
						}
						break;
 8007ee2:	bf00      	nop
 8007ee4:	e02a      	b.n	8007f3c <drawBootMenu+0x7ec>
					}
				}
			}
		}
		else{
			j=110;
 8007ee6:	236e      	movs	r3, #110	; 0x6e
 8007ee8:	61fb      	str	r3, [r7, #28]
			i=120;
 8007eea:	2378      	movs	r3, #120	; 0x78
 8007eec:	613b      	str	r3, [r7, #16]
			bootButtons.bootMode=0;
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <drawBootMenu+0x824>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	629a      	str	r2, [r3, #40]	; 0x28
			LCD_PutStr(i,j, "POWER SWITCH DISABLED!", fnt7x10);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	b298      	uxth	r0, r3
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	b299      	uxth	r1, r3
 8007efc:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <drawBootMenu+0x828>)
 8007efe:	4a1f      	ldr	r2, [pc, #124]	; (8007f7c <drawBootMenu+0x82c>)
 8007f00:	f7f9 fb86 	bl	8001610 <LCD_PutStr>
			j+=14;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	330e      	adds	r3, #14
 8007f08:	61fb      	str	r3, [r7, #28]
			i=75;
 8007f0a:	234b      	movs	r3, #75	; 0x4b
 8007f0c:	613b      	str	r3, [r7, #16]
			LCD_PutStr(i,j, "Flip Switch to enable Boot Options!", fnt7x10);
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	b298      	uxth	r0, r3
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	b299      	uxth	r1, r3
 8007f16:	4b18      	ldr	r3, [pc, #96]	; (8007f78 <drawBootMenu+0x828>)
 8007f18:	4a19      	ldr	r2, [pc, #100]	; (8007f80 <drawBootMenu+0x830>)
 8007f1a:	f7f9 fb79 	bl	8001610 <LCD_PutStr>
 8007f1e:	e00e      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007f20:	bf00      	nop
 8007f22:	e00c      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007f24:	bf00      	nop
 8007f26:	e00a      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007f28:	bf00      	nop
 8007f2a:	e008      	b.n	8007f3e <drawBootMenu+0x7ee>
							break;
 8007f2c:	bf00      	nop
 8007f2e:	e006      	b.n	8007f3e <drawBootMenu+0x7ee>
						break;
 8007f30:	bf00      	nop
 8007f32:	e004      	b.n	8007f3e <drawBootMenu+0x7ee>
						break;
 8007f34:	bf00      	nop
 8007f36:	e002      	b.n	8007f3e <drawBootMenu+0x7ee>
						break;
 8007f38:	bf00      	nop
 8007f3a:	e000      	b.n	8007f3e <drawBootMenu+0x7ee>
						break;
 8007f3c:	bf00      	nop
		}
		previousMenu=menu;
 8007f3e:	4a11      	ldr	r2, [pc, #68]	; (8007f84 <drawBootMenu+0x834>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6013      	str	r3, [r2, #0]
		i=25;
 8007f44:	2319      	movs	r3, #25
 8007f46:	613b      	str	r3, [r7, #16]
		LCD_FillRect(i, j, i + 12, j + 10);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	b298      	uxth	r0, r3
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	b299      	uxth	r1, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	330c      	adds	r3, #12
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	330a      	adds	r3, #10
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f7f9 f80a 	bl	8000f78 <LCD_FillRect>
		SMLCD_Flush();
 8007f64:	f7f8 fbbc 	bl	80006e0 <SMLCD_Flush>
}
 8007f68:	bf00      	nop
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20003378 	.word	0x20003378
 8007f74:	200032ac 	.word	0x200032ac
 8007f78:	08018254 	.word	0x08018254
 8007f7c:	08018038 	.word	0x08018038
 8007f80:	08018050 	.word	0x08018050
 8007f84:	20003374 	.word	0x20003374

08007f88 <drawMenuHeader>:

void drawMenuHeader(){
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
	int i, j;
	LCD_PixelMode = LCD_PSET;
 8007f8e:	4b4e      	ldr	r3, [pc, #312]	; (80080c8 <drawMenuHeader+0x140>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	701a      	strb	r2, [r3, #0]

	LCD_Rect(0, 0, scr_width - 1, scr_height - 1);
 8007f94:	4b4d      	ldr	r3, [pc, #308]	; (80080cc <drawMenuHeader+0x144>)
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	4b4c      	ldr	r3, [pc, #304]	; (80080d0 <drawMenuHeader+0x148>)
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	f7f8 ffa4 	bl	8000ef4 <LCD_Rect>
	LCD_Rect(2, 2, scr_width - 3, scr_height - 3);
 8007fac:	4b47      	ldr	r3, [pc, #284]	; (80080cc <drawMenuHeader+0x144>)
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	3b03      	subs	r3, #3
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	4b46      	ldr	r3, [pc, #280]	; (80080d0 <drawMenuHeader+0x148>)
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	3b03      	subs	r3, #3
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	2002      	movs	r0, #2
 8007fc0:	f7f8 ff98 	bl	8000ef4 <LCD_Rect>

	// RTC :)
	i  = 10;
 8007fc4:	230a      	movs	r3, #10
 8007fc6:	607b      	str	r3, [r7, #4]
	j  = 10;
 8007fc8:	230a      	movs	r3, #10
 8007fca:	603b      	str	r3, [r7, #0]
	printFaults(i,j);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f8c4 	bl	800815c <printFaults>
	i=275;
 8007fd4:	f240 1313 	movw	r3, #275	; 0x113
 8007fd8:	607b      	str	r3, [r7, #4]
	i += LCD_PutStr(i, j, "MODE:", fnt7x10);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	b298      	uxth	r0, r3
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	b299      	uxth	r1, r3
 8007fe2:	4b3c      	ldr	r3, [pc, #240]	; (80080d4 <drawMenuHeader+0x14c>)
 8007fe4:	4a3c      	ldr	r2, [pc, #240]	; (80080d8 <drawMenuHeader+0x150>)
 8007fe6:	f7f9 fb13 	bl	8001610 <LCD_PutStr>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	607b      	str	r3, [r7, #4]
	if(displayAdcValues[Adc.adc0] >VSYS_FLT){
 8007ff4:	4b39      	ldr	r3, [pc, #228]	; (80080dc <drawMenuHeader+0x154>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a39      	ldr	r2, [pc, #228]	; (80080e0 <drawMenuHeader+0x158>)
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	edd3 7a00 	vldr	s15, [r3]
 8008002:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8008006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800e:	dd4a      	ble.n	80080a6 <drawMenuHeader+0x11e>
		switch(bootButtons.bootMode){
 8008010:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <drawMenuHeader+0x15c>)
 8008012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008014:	2b05      	cmp	r3, #5
 8008016:	d84e      	bhi.n	80080b6 <drawMenuHeader+0x12e>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <drawMenuHeader+0x98>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008039 	.word	0x08008039
 8008024:	0800804b 	.word	0x0800804b
 8008028:	0800805d 	.word	0x0800805d
 800802c:	0800806f 	.word	0x0800806f
 8008030:	08008093 	.word	0x08008093
 8008034:	08008081 	.word	0x08008081
		case UNINITIALIZED:
			LCD_PutStr(i, j, "OFF", fnt7x10);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	b298      	uxth	r0, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	b299      	uxth	r1, r3
 8008040:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <drawMenuHeader+0x14c>)
 8008042:	4a29      	ldr	r2, [pc, #164]	; (80080e8 <drawMenuHeader+0x160>)
 8008044:	f7f9 fae4 	bl	8001610 <LCD_PutStr>
			break;
 8008048:	e035      	b.n	80080b6 <drawMenuHeader+0x12e>
		case STANDARD:
			LCD_PutStr(i, j, "OS", fnt7x10);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	b298      	uxth	r0, r3
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	b299      	uxth	r1, r3
 8008052:	4b20      	ldr	r3, [pc, #128]	; (80080d4 <drawMenuHeader+0x14c>)
 8008054:	4a25      	ldr	r2, [pc, #148]	; (80080ec <drawMenuHeader+0x164>)
 8008056:	f7f9 fadb 	bl	8001610 <LCD_PutStr>
			break;
 800805a:	e02c      	b.n	80080b6 <drawMenuHeader+0x12e>
		case UEFI:
			LCD_PutStr(i, j, "UEFI", fnt7x10);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	b298      	uxth	r0, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	b299      	uxth	r1, r3
 8008064:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <drawMenuHeader+0x14c>)
 8008066:	4a22      	ldr	r2, [pc, #136]	; (80080f0 <drawMenuHeader+0x168>)
 8008068:	f7f9 fad2 	bl	8001610 <LCD_PutStr>
			break;
 800806c:	e023      	b.n	80080b6 <drawMenuHeader+0x12e>
		case EDL:
			LCD_PutStr(i, j, "EDL", fnt7x10);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	b298      	uxth	r0, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	b299      	uxth	r1, r3
 8008076:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <drawMenuHeader+0x14c>)
 8008078:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <drawMenuHeader+0x16c>)
 800807a:	f7f9 fac9 	bl	8001610 <LCD_PutStr>
			break;
 800807e:	e01a      	b.n	80080b6 <drawMenuHeader+0x12e>
		case MASS_STORAGE:
			LCD_PutStr(i, j, "MASS", fnt7x10);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	b298      	uxth	r0, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	b299      	uxth	r1, r3
 8008088:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <drawMenuHeader+0x14c>)
 800808a:	4a1b      	ldr	r2, [pc, #108]	; (80080f8 <drawMenuHeader+0x170>)
 800808c:	f7f9 fac0 	bl	8001610 <LCD_PutStr>
			break;
 8008090:	e011      	b.n	80080b6 <drawMenuHeader+0x12e>
		case RECOVERY:
			LCD_PutStr(i, j, "FFU", fnt7x10);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	b298      	uxth	r0, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	b299      	uxth	r1, r3
 800809a:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <drawMenuHeader+0x14c>)
 800809c:	4a17      	ldr	r2, [pc, #92]	; (80080fc <drawMenuHeader+0x174>)
 800809e:	f7f9 fab7 	bl	8001610 <LCD_PutStr>
			break;
 80080a2:	bf00      	nop
 80080a4:	e007      	b.n	80080b6 <drawMenuHeader+0x12e>
		}
	}
	else{
		LCD_PutStr(i, j, "OFF", fnt7x10);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	b298      	uxth	r0, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	b299      	uxth	r1, r3
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <drawMenuHeader+0x14c>)
 80080b0:	4a0d      	ldr	r2, [pc, #52]	; (80080e8 <drawMenuHeader+0x160>)
 80080b2:	f7f9 faad 	bl	8001610 <LCD_PutStr>
	}

	i  = 135;
 80080b6:	2387      	movs	r3, #135	; 0x87
 80080b8:	607b      	str	r3, [r7, #4]
	j += 14;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	330e      	adds	r3, #14
 80080be:	603b      	str	r3, [r7, #0]


}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20028aa4 	.word	0x20028aa4
 80080cc:	20028aa6 	.word	0x20028aa6
 80080d0:	20028aa8 	.word	0x20028aa8
 80080d4:	08018254 	.word	0x08018254
 80080d8:	080179f8 	.word	0x080179f8
 80080dc:	20000128 	.word	0x20000128
 80080e0:	200310e0 	.word	0x200310e0
 80080e4:	200032ac 	.word	0x200032ac
 80080e8:	08017a00 	.word	0x08017a00
 80080ec:	08017a04 	.word	0x08017a04
 80080f0:	08017a08 	.word	0x08017a08
 80080f4:	08017a10 	.word	0x08017a10
 80080f8:	08017a14 	.word	0x08017a14
 80080fc:	08017a1c 	.word	0x08017a1c

08008100 <getLatestADC>:

void getLatestADC(){
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
	int i;
	float * adcValuePointer;
	 if (adcRestart[0] & adcRestart[1] & adcRestart[2]){
 8008106:	4b13      	ldr	r3, [pc, #76]	; (8008154 <getLatestADC+0x54>)
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <getLatestADC+0x54>)
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	4013      	ands	r3, r2
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4b10      	ldr	r3, [pc, #64]	; (8008154 <getLatestADC+0x54>)
 8008114:	789b      	ldrb	r3, [r3, #2]
 8008116:	4013      	ands	r3, r2
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d016      	beq.n	800814c <getLatestADC+0x4c>
		  adcValuePointer = getADCValues();
 800811e:	f7fb fcfb 	bl	8003b18 <getADCValues>
 8008122:	4603      	mov	r3, r0
 8008124:	603b      	str	r3, [r7, #0]
		  for(i=0;i<21;i++){
 8008126:	2300      	movs	r3, #0
 8008128:	607b      	str	r3, [r7, #4]
 800812a:	e00c      	b.n	8008146 <getLatestADC+0x46>
	  		  displayAdcValues[i]=*(adcValuePointer+i);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	4413      	add	r3, r2
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4908      	ldr	r1, [pc, #32]	; (8008158 <getLatestADC+0x58>)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	601a      	str	r2, [r3, #0]
		  for(i=0;i<21;i++){
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3301      	adds	r3, #1
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b14      	cmp	r3, #20
 800814a:	ddef      	ble.n	800812c <getLatestADC+0x2c>
		  }
	 }
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20029284 	.word	0x20029284
 8008158:	200310e0 	.word	0x200310e0

0800815c <printFaults>:
//print only the critical faults. Order is VSYS_PMI, ZION, FAULT3-9
int printFaults(int i, int j){
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	int x = i;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60fb      	str	r3, [r7, #12]
	int y = j;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	60bb      	str	r3, [r7, #8]
	x += LCD_PutStr(x, y, "FAULTS:", fnt7x10);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	b298      	uxth	r0, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	b299      	uxth	r1, r3
 8008176:	4b67      	ldr	r3, [pc, #412]	; (8008314 <printFaults+0x1b8>)
 8008178:	4a67      	ldr	r2, [pc, #412]	; (8008318 <printFaults+0x1bc>)
 800817a:	f7f9 fa49 	bl	8001610 <LCD_PutStr>
 800817e:	4603      	mov	r3, r0
 8008180:	461a      	mov	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4413      	add	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
	if(errorLED.vsysPMIFault){
 8008188:	4b64      	ldr	r3, [pc, #400]	; (800831c <printFaults+0x1c0>)
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00d      	beq.n	80081ac <printFaults+0x50>
		x += LCD_PutStr(x, y, "VSYS", fnt7x10);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	b298      	uxth	r0, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	b299      	uxth	r1, r3
 8008198:	4b5e      	ldr	r3, [pc, #376]	; (8008314 <printFaults+0x1b8>)
 800819a:	4a61      	ldr	r2, [pc, #388]	; (8008320 <printFaults+0x1c4>)
 800819c:	f7f9 fa38 	bl	8001610 <LCD_PutStr>
 80081a0:	4603      	mov	r3, r0
 80081a2:	461a      	mov	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e0ae      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.zionFault){
 80081ac:	4b5b      	ldr	r3, [pc, #364]	; (800831c <printFaults+0x1c0>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00d      	beq.n	80081d0 <printFaults+0x74>
		x += LCD_PutStr(x, y, "ZION", fnt7x10);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	b298      	uxth	r0, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	b299      	uxth	r1, r3
 80081bc:	4b55      	ldr	r3, [pc, #340]	; (8008314 <printFaults+0x1b8>)
 80081be:	4a59      	ldr	r2, [pc, #356]	; (8008324 <printFaults+0x1c8>)
 80081c0:	f7f9 fa26 	bl	8001610 <LCD_PutStr>
 80081c4:	4603      	mov	r3, r0
 80081c6:	461a      	mov	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e09c      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.fault3){
 80081d0:	4b52      	ldr	r3, [pc, #328]	; (800831c <printFaults+0x1c0>)
 80081d2:	789b      	ldrb	r3, [r3, #2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00d      	beq.n	80081f4 <printFaults+0x98>
		x += LCD_PutStr(x, y, "FAULT3", fnt7x10);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	b298      	uxth	r0, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	b299      	uxth	r1, r3
 80081e0:	4b4c      	ldr	r3, [pc, #304]	; (8008314 <printFaults+0x1b8>)
 80081e2:	4a51      	ldr	r2, [pc, #324]	; (8008328 <printFaults+0x1cc>)
 80081e4:	f7f9 fa14 	bl	8001610 <LCD_PutStr>
 80081e8:	4603      	mov	r3, r0
 80081ea:	461a      	mov	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e08a      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.fault4){
 80081f4:	4b49      	ldr	r3, [pc, #292]	; (800831c <printFaults+0x1c0>)
 80081f6:	78db      	ldrb	r3, [r3, #3]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00d      	beq.n	8008218 <printFaults+0xbc>
		x += LCD_PutStr(x, y, "FAULT4", fnt7x10);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	b298      	uxth	r0, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	b299      	uxth	r1, r3
 8008204:	4b43      	ldr	r3, [pc, #268]	; (8008314 <printFaults+0x1b8>)
 8008206:	4a49      	ldr	r2, [pc, #292]	; (800832c <printFaults+0x1d0>)
 8008208:	f7f9 fa02 	bl	8001610 <LCD_PutStr>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	e078      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.fault5){
 8008218:	4b40      	ldr	r3, [pc, #256]	; (800831c <printFaults+0x1c0>)
 800821a:	791b      	ldrb	r3, [r3, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00d      	beq.n	800823c <printFaults+0xe0>
		x += LCD_PutStr(x, y, "FAULT5", fnt7x10);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	b298      	uxth	r0, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	b299      	uxth	r1, r3
 8008228:	4b3a      	ldr	r3, [pc, #232]	; (8008314 <printFaults+0x1b8>)
 800822a:	4a41      	ldr	r2, [pc, #260]	; (8008330 <printFaults+0x1d4>)
 800822c:	f7f9 f9f0 	bl	8001610 <LCD_PutStr>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	e066      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.fault6){
 800823c:	4b37      	ldr	r3, [pc, #220]	; (800831c <printFaults+0x1c0>)
 800823e:	795b      	ldrb	r3, [r3, #5]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <printFaults+0x104>
		x += LCD_PutStr(x, y, "FAULT6", fnt7x10);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	b298      	uxth	r0, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	b299      	uxth	r1, r3
 800824c:	4b31      	ldr	r3, [pc, #196]	; (8008314 <printFaults+0x1b8>)
 800824e:	4a39      	ldr	r2, [pc, #228]	; (8008334 <printFaults+0x1d8>)
 8008250:	f7f9 f9de 	bl	8001610 <LCD_PutStr>
 8008254:	4603      	mov	r3, r0
 8008256:	461a      	mov	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	e054      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.fault7){
 8008260:	4b2e      	ldr	r3, [pc, #184]	; (800831c <printFaults+0x1c0>)
 8008262:	799b      	ldrb	r3, [r3, #6]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00d      	beq.n	8008284 <printFaults+0x128>
		x += LCD_PutStr(x, y, "FAULT7", fnt7x10);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	b298      	uxth	r0, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	b299      	uxth	r1, r3
 8008270:	4b28      	ldr	r3, [pc, #160]	; (8008314 <printFaults+0x1b8>)
 8008272:	4a31      	ldr	r2, [pc, #196]	; (8008338 <printFaults+0x1dc>)
 8008274:	f7f9 f9cc 	bl	8001610 <LCD_PutStr>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	e042      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.fault8){
 8008284:	4b25      	ldr	r3, [pc, #148]	; (800831c <printFaults+0x1c0>)
 8008286:	7adb      	ldrb	r3, [r3, #11]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00d      	beq.n	80082a8 <printFaults+0x14c>
		x += LCD_PutStr(x, y, "FAULT8", fnt7x10);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	b298      	uxth	r0, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	b299      	uxth	r1, r3
 8008294:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <printFaults+0x1b8>)
 8008296:	4a29      	ldr	r2, [pc, #164]	; (800833c <printFaults+0x1e0>)
 8008298:	f7f9 f9ba 	bl	8001610 <LCD_PutStr>
 800829c:	4603      	mov	r3, r0
 800829e:	461a      	mov	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	e030      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.fault9){
 80082a8:	4b1c      	ldr	r3, [pc, #112]	; (800831c <printFaults+0x1c0>)
 80082aa:	7b1b      	ldrb	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00d      	beq.n	80082cc <printFaults+0x170>
		x += LCD_PutStr(x, y, "FAULT9", fnt7x10);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	b298      	uxth	r0, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	b299      	uxth	r1, r3
 80082b8:	4b16      	ldr	r3, [pc, #88]	; (8008314 <printFaults+0x1b8>)
 80082ba:	4a21      	ldr	r2, [pc, #132]	; (8008340 <printFaults+0x1e4>)
 80082bc:	f7f9 f9a8 	bl	8001610 <LCD_PutStr>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4413      	add	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	e01e      	b.n	800830a <printFaults+0x1ae>
	}
	else if(errorLED.ledDriver){
 80082cc:	4b13      	ldr	r3, [pc, #76]	; (800831c <printFaults+0x1c0>)
 80082ce:	7b5b      	ldrb	r3, [r3, #13]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00d      	beq.n	80082f0 <printFaults+0x194>
		x += LCD_PutStr(x, y, "LED DVR", fnt7x10);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	b298      	uxth	r0, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	b299      	uxth	r1, r3
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <printFaults+0x1b8>)
 80082de:	4a19      	ldr	r2, [pc, #100]	; (8008344 <printFaults+0x1e8>)
 80082e0:	f7f9 f996 	bl	8001610 <LCD_PutStr>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e00c      	b.n	800830a <printFaults+0x1ae>
	}
	else{
		x += LCD_PutStr(x, y, "NONE!", fnt7x10);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	b298      	uxth	r0, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	b299      	uxth	r1, r3
 80082f8:	4b06      	ldr	r3, [pc, #24]	; (8008314 <printFaults+0x1b8>)
 80082fa:	4a13      	ldr	r2, [pc, #76]	; (8008348 <printFaults+0x1ec>)
 80082fc:	f7f9 f988 	bl	8001610 <LCD_PutStr>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4413      	add	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
	}
	return x;
 800830a:	68fb      	ldr	r3, [r7, #12]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	08018254 	.word	0x08018254
 8008318:	08017a98 	.word	0x08017a98
 800831c:	200032d8 	.word	0x200032d8
 8008320:	08018074 	.word	0x08018074
 8008324:	0801807c 	.word	0x0801807c
 8008328:	08017a38 	.word	0x08017a38
 800832c:	08017a40 	.word	0x08017a40
 8008330:	08017a48 	.word	0x08017a48
 8008334:	08017a50 	.word	0x08017a50
 8008338:	08017a58 	.word	0x08017a58
 800833c:	08017a60 	.word	0x08017a60
 8008340:	08017a68 	.word	0x08017a68
 8008344:	08018084 	.word	0x08018084
 8008348:	0801808c 	.word	0x0801808c

0800834c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008352:	4b11      	ldr	r3, [pc, #68]	; (8008398 <HAL_MspInit+0x4c>)
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	4a10      	ldr	r2, [pc, #64]	; (8008398 <HAL_MspInit+0x4c>)
 8008358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800835c:	6413      	str	r3, [r2, #64]	; 0x40
 800835e:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <HAL_MspInit+0x4c>)
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800836a:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <HAL_MspInit+0x4c>)
 800836c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800836e:	4a0a      	ldr	r2, [pc, #40]	; (8008398 <HAL_MspInit+0x4c>)
 8008370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008374:	6453      	str	r3, [r2, #68]	; 0x44
 8008376:	4b08      	ldr	r3, [pc, #32]	; (8008398 <HAL_MspInit+0x4c>)
 8008378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008382:	2200      	movs	r2, #0
 8008384:	210f      	movs	r1, #15
 8008386:	f06f 0001 	mvn.w	r0, #1
 800838a:	f002 f9cd 	bl	800a728 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40023800 	.word	0x40023800

0800839c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b094      	sub	sp, #80	; 0x50
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	605a      	str	r2, [r3, #4]
 80083ae:	609a      	str	r2, [r3, #8]
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a91      	ldr	r2, [pc, #580]	; (8008600 <HAL_ADC_MspInit+0x264>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	f040 808c 	bne.w	80084d8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80083c0:	4b90      	ldr	r3, [pc, #576]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c4:	4a8f      	ldr	r2, [pc, #572]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ca:	6453      	str	r3, [r2, #68]	; 0x44
 80083cc:	4b8d      	ldr	r3, [pc, #564]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083d8:	4b8a      	ldr	r3, [pc, #552]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	4a89      	ldr	r2, [pc, #548]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083de:	f043 0304 	orr.w	r3, r3, #4
 80083e2:	6313      	str	r3, [r2, #48]	; 0x30
 80083e4:	4b87      	ldr	r3, [pc, #540]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083f0:	4b84      	ldr	r3, [pc, #528]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	4a83      	ldr	r2, [pc, #524]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	6313      	str	r3, [r2, #48]	; 0x30
 80083fc:	4b81      	ldr	r3, [pc, #516]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	633b      	str	r3, [r7, #48]	; 0x30
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008408:	4b7e      	ldr	r3, [pc, #504]	; (8008604 <HAL_ADC_MspInit+0x268>)
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	4a7d      	ldr	r2, [pc, #500]	; (8008604 <HAL_ADC_MspInit+0x268>)
 800840e:	f043 0302 	orr.w	r3, r3, #2
 8008412:	6313      	str	r3, [r2, #48]	; 0x30
 8008414:	4b7b      	ldr	r3, [pc, #492]	; (8008604 <HAL_ADC_MspInit+0x268>)
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 8008420:	230f      	movs	r3, #15
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008424:	2303      	movs	r3, #3
 8008426:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008428:	2300      	movs	r3, #0
 800842a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800842c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008430:	4619      	mov	r1, r3
 8008432:	4875      	ldr	r0, [pc, #468]	; (8008608 <HAL_ADC_MspInit+0x26c>)
 8008434:	f002 fdaa 	bl	800af8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC6_Pin|ADC5_Pin|ADC3_Pin
 8008438:	23f8      	movs	r3, #248	; 0xf8
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
                          |ADC7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800843c:	2303      	movs	r3, #3
 800843e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008440:	2300      	movs	r3, #0
 8008442:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008444:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008448:	4619      	mov	r1, r3
 800844a:	4870      	ldr	r0, [pc, #448]	; (800860c <HAL_ADC_MspInit+0x270>)
 800844c:	f002 fd9e 	bl	800af8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC9_Pin|ADC8_Pin;
 8008450:	2303      	movs	r3, #3
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008454:	2303      	movs	r3, #3
 8008456:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008458:	2300      	movs	r3, #0
 800845a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800845c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008460:	4619      	mov	r1, r3
 8008462:	486b      	ldr	r0, [pc, #428]	; (8008610 <HAL_ADC_MspInit+0x274>)
 8008464:	f002 fd92 	bl	800af8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008468:	4b6a      	ldr	r3, [pc, #424]	; (8008614 <HAL_ADC_MspInit+0x278>)
 800846a:	4a6b      	ldr	r2, [pc, #428]	; (8008618 <HAL_ADC_MspInit+0x27c>)
 800846c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800846e:	4b69      	ldr	r3, [pc, #420]	; (8008614 <HAL_ADC_MspInit+0x278>)
 8008470:	2200      	movs	r2, #0
 8008472:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008474:	4b67      	ldr	r3, [pc, #412]	; (8008614 <HAL_ADC_MspInit+0x278>)
 8008476:	2200      	movs	r2, #0
 8008478:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800847a:	4b66      	ldr	r3, [pc, #408]	; (8008614 <HAL_ADC_MspInit+0x278>)
 800847c:	2200      	movs	r2, #0
 800847e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008480:	4b64      	ldr	r3, [pc, #400]	; (8008614 <HAL_ADC_MspInit+0x278>)
 8008482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008486:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008488:	4b62      	ldr	r3, [pc, #392]	; (8008614 <HAL_ADC_MspInit+0x278>)
 800848a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800848e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008490:	4b60      	ldr	r3, [pc, #384]	; (8008614 <HAL_ADC_MspInit+0x278>)
 8008492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008496:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8008498:	4b5e      	ldr	r3, [pc, #376]	; (8008614 <HAL_ADC_MspInit+0x278>)
 800849a:	2200      	movs	r2, #0
 800849c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800849e:	4b5d      	ldr	r3, [pc, #372]	; (8008614 <HAL_ADC_MspInit+0x278>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80084a4:	4b5b      	ldr	r3, [pc, #364]	; (8008614 <HAL_ADC_MspInit+0x278>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80084aa:	485a      	ldr	r0, [pc, #360]	; (8008614 <HAL_ADC_MspInit+0x278>)
 80084ac:	f002 f966 	bl	800a77c <HAL_DMA_Init>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 80084b6:	f7fd f811 	bl	80054dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a55      	ldr	r2, [pc, #340]	; (8008614 <HAL_ADC_MspInit+0x278>)
 80084be:	639a      	str	r2, [r3, #56]	; 0x38
 80084c0:	4a54      	ldr	r2, [pc, #336]	; (8008614 <HAL_ADC_MspInit+0x278>)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80084c6:	2200      	movs	r2, #0
 80084c8:	2105      	movs	r1, #5
 80084ca:	2012      	movs	r0, #18
 80084cc:	f002 f92c 	bl	800a728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80084d0:	2012      	movs	r0, #18
 80084d2:	f002 f945 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80084d6:	e13a      	b.n	800874e <HAL_ADC_MspInit+0x3b2>
  else if(hadc->Instance==ADC2)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a4f      	ldr	r2, [pc, #316]	; (800861c <HAL_ADC_MspInit+0x280>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	f040 80a2 	bne.w	8008628 <HAL_ADC_MspInit+0x28c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80084e4:	4b47      	ldr	r3, [pc, #284]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80084e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e8:	4a46      	ldr	r2, [pc, #280]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80084ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084ee:	6453      	str	r3, [r2, #68]	; 0x44
 80084f0:	4b44      	ldr	r3, [pc, #272]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084fc:	4b41      	ldr	r3, [pc, #260]	; (8008604 <HAL_ADC_MspInit+0x268>)
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	4a40      	ldr	r2, [pc, #256]	; (8008604 <HAL_ADC_MspInit+0x268>)
 8008502:	f043 0304 	orr.w	r3, r3, #4
 8008506:	6313      	str	r3, [r2, #48]	; 0x30
 8008508:	4b3e      	ldr	r3, [pc, #248]	; (8008604 <HAL_ADC_MspInit+0x268>)
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008514:	4b3b      	ldr	r3, [pc, #236]	; (8008604 <HAL_ADC_MspInit+0x268>)
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008518:	4a3a      	ldr	r2, [pc, #232]	; (8008604 <HAL_ADC_MspInit+0x268>)
 800851a:	f043 0301 	orr.w	r3, r3, #1
 800851e:	6313      	str	r3, [r2, #48]	; 0x30
 8008520:	4b38      	ldr	r3, [pc, #224]	; (8008604 <HAL_ADC_MspInit+0x268>)
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	623b      	str	r3, [r7, #32]
 800852a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800852c:	4b35      	ldr	r3, [pc, #212]	; (8008604 <HAL_ADC_MspInit+0x268>)
 800852e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008530:	4a34      	ldr	r2, [pc, #208]	; (8008604 <HAL_ADC_MspInit+0x268>)
 8008532:	f043 0302 	orr.w	r3, r3, #2
 8008536:	6313      	str	r3, [r2, #48]	; 0x30
 8008538:	4b32      	ldr	r3, [pc, #200]	; (8008604 <HAL_ADC_MspInit+0x268>)
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin
 8008544:	233f      	movs	r3, #63	; 0x3f
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008548:	2303      	movs	r3, #3
 800854a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854c:	2300      	movs	r3, #0
 800854e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008554:	4619      	mov	r1, r3
 8008556:	482c      	ldr	r0, [pc, #176]	; (8008608 <HAL_ADC_MspInit+0x26c>)
 8008558:	f002 fd18 	bl	800af8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC1_Pin|ADC0_Pin|ADC4_Pin|ADC6_Pin
 800855c:	237b      	movs	r3, #123	; 0x7b
 800855e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008560:	2303      	movs	r3, #3
 8008562:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008564:	2300      	movs	r3, #0
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800856c:	4619      	mov	r1, r3
 800856e:	4827      	ldr	r0, [pc, #156]	; (800860c <HAL_ADC_MspInit+0x270>)
 8008570:	f002 fd0c 	bl	800af8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC9_Pin;
 8008574:	2302      	movs	r3, #2
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008578:	2303      	movs	r3, #3
 800857a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857c:	2300      	movs	r3, #0
 800857e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ADC9_GPIO_Port, &GPIO_InitStruct);
 8008580:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008584:	4619      	mov	r1, r3
 8008586:	4822      	ldr	r0, [pc, #136]	; (8008610 <HAL_ADC_MspInit+0x274>)
 8008588:	f002 fd00 	bl	800af8c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800858c:	4b24      	ldr	r3, [pc, #144]	; (8008620 <HAL_ADC_MspInit+0x284>)
 800858e:	4a25      	ldr	r2, [pc, #148]	; (8008624 <HAL_ADC_MspInit+0x288>)
 8008590:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8008592:	4b23      	ldr	r3, [pc, #140]	; (8008620 <HAL_ADC_MspInit+0x284>)
 8008594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008598:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800859a:	4b21      	ldr	r3, [pc, #132]	; (8008620 <HAL_ADC_MspInit+0x284>)
 800859c:	2200      	movs	r2, #0
 800859e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80085a0:	4b1f      	ldr	r3, [pc, #124]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80085a6:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085ac:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80085ae:	4b1c      	ldr	r3, [pc, #112]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80085b4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80085b6:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085bc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80085be:	4b18      	ldr	r3, [pc, #96]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80085c4:	4b16      	ldr	r3, [pc, #88]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085ca:	4b15      	ldr	r3, [pc, #84]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80085d0:	4813      	ldr	r0, [pc, #76]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085d2:	f002 f8d3 	bl	800a77c <HAL_DMA_Init>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <HAL_ADC_MspInit+0x244>
      Error_Handler();
 80085dc:	f7fc ff7e 	bl	80054dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a0f      	ldr	r2, [pc, #60]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
 80085e6:	4a0e      	ldr	r2, [pc, #56]	; (8008620 <HAL_ADC_MspInit+0x284>)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80085ec:	2200      	movs	r2, #0
 80085ee:	2105      	movs	r1, #5
 80085f0:	2012      	movs	r0, #18
 80085f2:	f002 f899 	bl	800a728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80085f6:	2012      	movs	r0, #18
 80085f8:	f002 f8b2 	bl	800a760 <HAL_NVIC_EnableIRQ>
}
 80085fc:	e0a7      	b.n	800874e <HAL_ADC_MspInit+0x3b2>
 80085fe:	bf00      	nop
 8008600:	40012000 	.word	0x40012000
 8008604:	40023800 	.word	0x40023800
 8008608:	40020800 	.word	0x40020800
 800860c:	40020000 	.word	0x40020000
 8008610:	40020400 	.word	0x40020400
 8008614:	2002c004 	.word	0x2002c004
 8008618:	40026410 	.word	0x40026410
 800861c:	40012100 	.word	0x40012100
 8008620:	20031018 	.word	0x20031018
 8008624:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a4a      	ldr	r2, [pc, #296]	; (8008758 <HAL_ADC_MspInit+0x3bc>)
 800862e:	4293      	cmp	r3, r2
 8008630:	f040 808d 	bne.w	800874e <HAL_ADC_MspInit+0x3b2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008634:	4b49      	ldr	r3, [pc, #292]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 8008636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008638:	4a48      	ldr	r2, [pc, #288]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 800863a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800863e:	6453      	str	r3, [r2, #68]	; 0x44
 8008640:	4b46      	ldr	r3, [pc, #280]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 8008642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800864c:	4b43      	ldr	r3, [pc, #268]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	4a42      	ldr	r2, [pc, #264]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 8008652:	f043 0320 	orr.w	r3, r3, #32
 8008656:	6313      	str	r3, [r2, #48]	; 0x30
 8008658:	4b40      	ldr	r3, [pc, #256]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 800865a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008664:	4b3d      	ldr	r3, [pc, #244]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	4a3c      	ldr	r2, [pc, #240]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 800866a:	f043 0304 	orr.w	r3, r3, #4
 800866e:	6313      	str	r3, [r2, #48]	; 0x30
 8008670:	4b3a      	ldr	r3, [pc, #232]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867c:	4b37      	ldr	r3, [pc, #220]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	4a36      	ldr	r2, [pc, #216]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	6313      	str	r3, [r2, #48]	; 0x30
 8008688:	4b34      	ldr	r3, [pc, #208]	; (800875c <HAL_ADC_MspInit+0x3c0>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC15_Pin|ADC14_Pin|PP_SPARE_I2C_ADC_Pin|ZION_SENSE_Pin
 8008694:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800869a:	2303      	movs	r3, #3
 800869c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80086a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086a6:	4619      	mov	r1, r3
 80086a8:	482d      	ldr	r0, [pc, #180]	; (8008760 <HAL_ADC_MspInit+0x3c4>)
 80086aa:	f002 fc6f 	bl	800af8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC13_Pin|ADC10_Pin|ADC11_Pin|ADC12_Pin;
 80086ae:	230f      	movs	r3, #15
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086b2:	2303      	movs	r3, #3
 80086b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086be:	4619      	mov	r1, r3
 80086c0:	4828      	ldr	r0, [pc, #160]	; (8008764 <HAL_ADC_MspInit+0x3c8>)
 80086c2:	f002 fc63 	bl	800af8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_Pin|ADC3_Pin;
 80086c6:	230c      	movs	r3, #12
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086ca:	2303      	movs	r3, #3
 80086cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086d6:	4619      	mov	r1, r3
 80086d8:	4823      	ldr	r0, [pc, #140]	; (8008768 <HAL_ADC_MspInit+0x3cc>)
 80086da:	f002 fc57 	bl	800af8c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80086de:	4b23      	ldr	r3, [pc, #140]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 80086e0:	4a23      	ldr	r2, [pc, #140]	; (8008770 <HAL_ADC_MspInit+0x3d4>)
 80086e2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80086e4:	4b21      	ldr	r3, [pc, #132]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 80086e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80086ea:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086ec:	4b1f      	ldr	r3, [pc, #124]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80086f2:	4b1e      	ldr	r3, [pc, #120]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80086f8:	4b1c      	ldr	r3, [pc, #112]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 80086fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086fe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008700:	4b1a      	ldr	r3, [pc, #104]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 8008702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008706:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008708:	4b18      	ldr	r3, [pc, #96]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 800870a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800870e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8008710:	4b16      	ldr	r3, [pc, #88]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 8008712:	2200      	movs	r2, #0
 8008714:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8008716:	4b15      	ldr	r3, [pc, #84]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 8008718:	2200      	movs	r2, #0
 800871a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800871c:	4b13      	ldr	r3, [pc, #76]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 800871e:	2200      	movs	r2, #0
 8008720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8008722:	4812      	ldr	r0, [pc, #72]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 8008724:	f002 f82a 	bl	800a77c <HAL_DMA_Init>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <HAL_ADC_MspInit+0x396>
      Error_Handler();
 800872e:	f7fc fed5 	bl	80054dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a0d      	ldr	r2, [pc, #52]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 8008736:	639a      	str	r2, [r3, #56]	; 0x38
 8008738:	4a0c      	ldr	r2, [pc, #48]	; (800876c <HAL_ADC_MspInit+0x3d0>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800873e:	2200      	movs	r2, #0
 8008740:	2105      	movs	r1, #5
 8008742:	2012      	movs	r0, #18
 8008744:	f001 fff0 	bl	800a728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8008748:	2012      	movs	r0, #18
 800874a:	f002 f809 	bl	800a760 <HAL_NVIC_EnableIRQ>
}
 800874e:	bf00      	nop
 8008750:	3750      	adds	r7, #80	; 0x50
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40012200 	.word	0x40012200
 800875c:	40023800 	.word	0x40023800
 8008760:	40021400 	.word	0x40021400
 8008764:	40020800 	.word	0x40020800
 8008768:	40020000 	.word	0x40020000
 800876c:	20029224 	.word	0x20029224
 8008770:	40026428 	.word	0x40026428

08008774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b090      	sub	sp, #64	; 0x40
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800877c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a6c      	ldr	r2, [pc, #432]	; (8008944 <HAL_I2C_MspInit+0x1d0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d129      	bne.n	80087ea <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008796:	4b6c      	ldr	r3, [pc, #432]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	4a6b      	ldr	r2, [pc, #428]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 800879c:	f043 0302 	orr.w	r3, r3, #2
 80087a0:	6313      	str	r3, [r2, #48]	; 0x30
 80087a2:	4b69      	ldr	r3, [pc, #420]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LED_I2C_SCL_Pin|LED_I2C_SDA_Pin;
 80087ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80087b4:	2312      	movs	r3, #18
 80087b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087b8:	2301      	movs	r3, #1
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087bc:	2303      	movs	r3, #3
 80087be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80087c0:	2304      	movs	r3, #4
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087c8:	4619      	mov	r1, r3
 80087ca:	4860      	ldr	r0, [pc, #384]	; (800894c <HAL_I2C_MspInit+0x1d8>)
 80087cc:	f002 fbde 	bl	800af8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80087d0:	4b5d      	ldr	r3, [pc, #372]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	4a5c      	ldr	r2, [pc, #368]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80087d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087da:	6413      	str	r3, [r2, #64]	; 0x40
 80087dc:	4b5a      	ldr	r3, [pc, #360]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80087e8:	e0a7      	b.n	800893a <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C2)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a58      	ldr	r2, [pc, #352]	; (8008950 <HAL_I2C_MspInit+0x1dc>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d128      	bne.n	8008846 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80087f4:	4b54      	ldr	r3, [pc, #336]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	4a53      	ldr	r2, [pc, #332]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80087fa:	f043 0320 	orr.w	r3, r3, #32
 80087fe:	6313      	str	r3, [r2, #48]	; 0x30
 8008800:	4b51      	ldr	r3, [pc, #324]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	f003 0320 	and.w	r3, r3, #32
 8008808:	623b      	str	r3, [r7, #32]
 800880a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = SPARE_I2C_SDA_3V3_Pin|SPARE_I2C_SCL_3V3_Pin;
 800880c:	2303      	movs	r3, #3
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008810:	2312      	movs	r3, #18
 8008812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008814:	2301      	movs	r3, #1
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008818:	2303      	movs	r3, #3
 800881a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800881c:	2304      	movs	r3, #4
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008824:	4619      	mov	r1, r3
 8008826:	484b      	ldr	r0, [pc, #300]	; (8008954 <HAL_I2C_MspInit+0x1e0>)
 8008828:	f002 fbb0 	bl	800af8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800882c:	4b46      	ldr	r3, [pc, #280]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	4a45      	ldr	r2, [pc, #276]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008832:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008836:	6413      	str	r3, [r2, #64]	; 0x40
 8008838:	4b43      	ldr	r3, [pc, #268]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008840:	61fb      	str	r3, [r7, #28]
 8008842:	69fb      	ldr	r3, [r7, #28]
}
 8008844:	e079      	b.n	800893a <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C3)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a43      	ldr	r2, [pc, #268]	; (8008958 <HAL_I2C_MspInit+0x1e4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d146      	bne.n	80088de <HAL_I2C_MspInit+0x16a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008850:	4b3d      	ldr	r3, [pc, #244]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	4a3c      	ldr	r2, [pc, #240]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008856:	f043 0304 	orr.w	r3, r3, #4
 800885a:	6313      	str	r3, [r2, #48]	; 0x30
 800885c:	4b3a      	ldr	r3, [pc, #232]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008868:	4b37      	ldr	r3, [pc, #220]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	4a36      	ldr	r2, [pc, #216]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	6313      	str	r3, [r2, #48]	; 0x30
 8008874:	4b34      	ldr	r3, [pc, #208]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SOC_I2C_SDA_3V3_Pin;
 8008880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008886:	2312      	movs	r3, #18
 8008888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800888a:	2301      	movs	r3, #1
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800888e:	2303      	movs	r3, #3
 8008890:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008892:	2304      	movs	r3, #4
 8008894:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SDA_3V3_GPIO_Port, &GPIO_InitStruct);
 8008896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800889a:	4619      	mov	r1, r3
 800889c:	482f      	ldr	r0, [pc, #188]	; (800895c <HAL_I2C_MspInit+0x1e8>)
 800889e:	f002 fb75 	bl	800af8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_I2C_SCL_3V3_Pin;
 80088a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088a8:	2312      	movs	r3, #18
 80088aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088ac:	2301      	movs	r3, #1
 80088ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088b0:	2303      	movs	r3, #3
 80088b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80088b4:	2304      	movs	r3, #4
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SOC_I2C_SCL_3V3_GPIO_Port, &GPIO_InitStruct);
 80088b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088bc:	4619      	mov	r1, r3
 80088be:	4828      	ldr	r0, [pc, #160]	; (8008960 <HAL_I2C_MspInit+0x1ec>)
 80088c0:	f002 fb64 	bl	800af8c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80088c4:	4b20      	ldr	r3, [pc, #128]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80088c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c8:	4a1f      	ldr	r2, [pc, #124]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80088ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088ce:	6413      	str	r3, [r2, #64]	; 0x40
 80088d0:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80088d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d8:	613b      	str	r3, [r7, #16]
 80088da:	693b      	ldr	r3, [r7, #16]
}
 80088dc:	e02d      	b.n	800893a <HAL_I2C_MspInit+0x1c6>
  else if(hi2c->Instance==I2C4)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a20      	ldr	r2, [pc, #128]	; (8008964 <HAL_I2C_MspInit+0x1f0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d128      	bne.n	800893a <HAL_I2C_MspInit+0x1c6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80088e8:	4b17      	ldr	r3, [pc, #92]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80088ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ec:	4a16      	ldr	r2, [pc, #88]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80088ee:	f043 0320 	orr.w	r3, r3, #32
 80088f2:	6313      	str	r3, [r2, #48]	; 0x30
 80088f4:	4b14      	ldr	r3, [pc, #80]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 80088f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STM_ZION_I2C_SDA_Pin|STM_ZION_I2C_SCL_Pin;
 8008900:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008906:	2312      	movs	r3, #18
 8008908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800890a:	2301      	movs	r3, #1
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800890e:	2303      	movs	r3, #3
 8008910:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8008912:	2304      	movs	r3, #4
 8008914:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800891a:	4619      	mov	r1, r3
 800891c:	480d      	ldr	r0, [pc, #52]	; (8008954 <HAL_I2C_MspInit+0x1e0>)
 800891e:	f002 fb35 	bl	800af8c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	4a08      	ldr	r2, [pc, #32]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800892c:	6413      	str	r3, [r2, #64]	; 0x40
 800892e:	4b06      	ldr	r3, [pc, #24]	; (8008948 <HAL_I2C_MspInit+0x1d4>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]
}
 800893a:	bf00      	nop
 800893c:	3740      	adds	r7, #64	; 0x40
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	40005400 	.word	0x40005400
 8008948:	40023800 	.word	0x40023800
 800894c:	40020400 	.word	0x40020400
 8008950:	40005800 	.word	0x40005800
 8008954:	40021400 	.word	0x40021400
 8008958:	40005c00 	.word	0x40005c00
 800895c:	40020800 	.word	0x40020800
 8008960:	40020000 	.word	0x40020000
 8008964:	40006000 	.word	0x40006000

08008968 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a07      	ldr	r2, [pc, #28]	; (8008994 <HAL_RTC_MspInit+0x2c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d105      	bne.n	8008986 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800897a:	4b07      	ldr	r3, [pc, #28]	; (8008998 <HAL_RTC_MspInit+0x30>)
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	4a06      	ldr	r2, [pc, #24]	; (8008998 <HAL_RTC_MspInit+0x30>)
 8008980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008984:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40002800 	.word	0x40002800
 8008998:	40023800 	.word	0x40023800

0800899c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08c      	sub	sp, #48	; 0x30
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089a4:	f107 031c 	add.w	r3, r7, #28
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	609a      	str	r2, [r3, #8]
 80089b0:	60da      	str	r2, [r3, #12]
 80089b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a40      	ldr	r2, [pc, #256]	; (8008abc <HAL_SPI_MspInit+0x120>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d130      	bne.n	8008a20 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80089be:	4b40      	ldr	r3, [pc, #256]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	4a3f      	ldr	r2, [pc, #252]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 80089c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089c8:	6453      	str	r3, [r2, #68]	; 0x44
 80089ca:	4b3d      	ldr	r3, [pc, #244]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 80089cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80089d6:	4b3a      	ldr	r3, [pc, #232]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	4a39      	ldr	r2, [pc, #228]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 80089dc:	f043 0310 	orr.w	r3, r3, #16
 80089e0:	6313      	str	r3, [r2, #48]	; 0x30
 80089e2:	4b37      	ldr	r3, [pc, #220]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	f003 0310 	and.w	r3, r3, #16
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCLK_Pin|LCD_MISO_Pin|LCD_MOSI_Pin;
 80089ee:	2364      	movs	r3, #100	; 0x64
 80089f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f2:	2302      	movs	r3, #2
 80089f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089fa:	2303      	movs	r3, #3
 80089fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80089fe:	2305      	movs	r3, #5
 8008a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a02:	f107 031c 	add.w	r3, r7, #28
 8008a06:	4619      	mov	r1, r3
 8008a08:	482e      	ldr	r0, [pc, #184]	; (8008ac4 <HAL_SPI_MspInit+0x128>)
 8008a0a:	f002 fabf 	bl	800af8c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2105      	movs	r1, #5
 8008a12:	2054      	movs	r0, #84	; 0x54
 8008a14:	f001 fe88 	bl	800a728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8008a18:	2054      	movs	r0, #84	; 0x54
 8008a1a:	f001 fea1 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8008a1e:	e049      	b.n	8008ab4 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI5)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a28      	ldr	r2, [pc, #160]	; (8008ac8 <HAL_SPI_MspInit+0x12c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d144      	bne.n	8008ab4 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008a2a:	4b25      	ldr	r3, [pc, #148]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2e:	4a24      	ldr	r2, [pc, #144]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a34:	6453      	str	r3, [r2, #68]	; 0x44
 8008a36:	4b22      	ldr	r3, [pc, #136]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a3e:	613b      	str	r3, [r7, #16]
 8008a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8008a42:	4b1f      	ldr	r3, [pc, #124]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	4a1e      	ldr	r2, [pc, #120]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008a5a:	4b19      	ldr	r3, [pc, #100]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	4a18      	ldr	r2, [pc, #96]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a60:	f043 0320 	orr.w	r3, r3, #32
 8008a64:	6313      	str	r3, [r2, #48]	; 0x30
 8008a66:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <HAL_SPI_MspInit+0x124>)
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	60bb      	str	r3, [r7, #8]
 8008a70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPARE_SS_L_3V3_Pin|SPARE_MISO_3V3_Pin|SPARE_SCLK_3V3_Pin;
 8008a72:	23e0      	movs	r3, #224	; 0xe0
 8008a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a76:	2302      	movs	r3, #2
 8008a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008a82:	2305      	movs	r3, #5
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008a86:	f107 031c 	add.w	r3, r7, #28
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	480f      	ldr	r0, [pc, #60]	; (8008acc <HAL_SPI_MspInit+0x130>)
 8008a8e:	f002 fa7d 	bl	800af8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPARE_MOSI_3V3_Pin;
 8008a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008aa4:	2305      	movs	r3, #5
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPARE_MOSI_3V3_GPIO_Port, &GPIO_InitStruct);
 8008aa8:	f107 031c 	add.w	r3, r7, #28
 8008aac:	4619      	mov	r1, r3
 8008aae:	4808      	ldr	r0, [pc, #32]	; (8008ad0 <HAL_SPI_MspInit+0x134>)
 8008ab0:	f002 fa6c 	bl	800af8c <HAL_GPIO_Init>
}
 8008ab4:	bf00      	nop
 8008ab6:	3730      	adds	r7, #48	; 0x30
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40013400 	.word	0x40013400
 8008ac0:	40023800 	.word	0x40023800
 8008ac4:	40021000 	.word	0x40021000
 8008ac8:	40015000 	.word	0x40015000
 8008acc:	40021c00 	.word	0x40021c00
 8008ad0:	40021400 	.word	0x40021400

08008ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a13      	ldr	r2, [pc, #76]	; (8008b30 <HAL_TIM_Base_MspInit+0x5c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d10c      	bne.n	8008b00 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008ae6:	4b13      	ldr	r3, [pc, #76]	; (8008b34 <HAL_TIM_Base_MspInit+0x60>)
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	4a12      	ldr	r2, [pc, #72]	; (8008b34 <HAL_TIM_Base_MspInit+0x60>)
 8008aec:	f043 0304 	orr.w	r3, r3, #4
 8008af0:	6413      	str	r3, [r2, #64]	; 0x40
 8008af2:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <HAL_TIM_Base_MspInit+0x60>)
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008afe:	e010      	b.n	8008b22 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a0c      	ldr	r2, [pc, #48]	; (8008b38 <HAL_TIM_Base_MspInit+0x64>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d10b      	bne.n	8008b22 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008b0a:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <HAL_TIM_Base_MspInit+0x60>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <HAL_TIM_Base_MspInit+0x60>)
 8008b10:	f043 0308 	orr.w	r3, r3, #8
 8008b14:	6413      	str	r3, [r2, #64]	; 0x40
 8008b16:	4b07      	ldr	r3, [pc, #28]	; (8008b34 <HAL_TIM_Base_MspInit+0x60>)
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	f003 0308 	and.w	r3, r3, #8
 8008b1e:	60bb      	str	r3, [r7, #8]
 8008b20:	68bb      	ldr	r3, [r7, #8]
}
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40023800 	.word	0x40023800
 8008b38:	40000c00 	.word	0x40000c00

08008b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	; 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b44:	f107 0314 	add.w	r3, r7, #20
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	609a      	str	r2, [r3, #8]
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a22      	ldr	r2, [pc, #136]	; (8008be4 <HAL_TIM_MspPostInit+0xa8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d11c      	bne.n	8008b98 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b5e:	4b22      	ldr	r3, [pc, #136]	; (8008be8 <HAL_TIM_MspPostInit+0xac>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	4a21      	ldr	r2, [pc, #132]	; (8008be8 <HAL_TIM_MspPostInit+0xac>)
 8008b64:	f043 0302 	orr.w	r3, r3, #2
 8008b68:	6313      	str	r3, [r2, #48]	; 0x30
 8008b6a:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <HAL_TIM_MspPostInit+0xac>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = SPARE_TIM_Pin;
 8008b76:	2340      	movs	r3, #64	; 0x40
 8008b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b82:	2300      	movs	r3, #0
 8008b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008b86:	2302      	movs	r3, #2
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPARE_TIM_GPIO_Port, &GPIO_InitStruct);
 8008b8a:	f107 0314 	add.w	r3, r7, #20
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4816      	ldr	r0, [pc, #88]	; (8008bec <HAL_TIM_MspPostInit+0xb0>)
 8008b92:	f002 f9fb 	bl	800af8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8008b96:	e021      	b.n	8008bdc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a14      	ldr	r2, [pc, #80]	; (8008bf0 <HAL_TIM_MspPostInit+0xb4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d11c      	bne.n	8008bdc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ba2:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <HAL_TIM_MspPostInit+0xac>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	4a10      	ldr	r2, [pc, #64]	; (8008be8 <HAL_TIM_MspPostInit+0xac>)
 8008ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bac:	6313      	str	r3, [r2, #48]	; 0x30
 8008bae:	4b0e      	ldr	r3, [pc, #56]	; (8008be8 <HAL_TIM_MspPostInit+0xac>)
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|LCD_EXTCOMM_Pin;
 8008bba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008bd0:	f107 0314 	add.w	r3, r7, #20
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4807      	ldr	r0, [pc, #28]	; (8008bf4 <HAL_TIM_MspPostInit+0xb8>)
 8008bd8:	f002 f9d8 	bl	800af8c <HAL_GPIO_Init>
}
 8008bdc:	bf00      	nop
 8008bde:	3728      	adds	r7, #40	; 0x28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	40000800 	.word	0x40000800
 8008be8:	40023800 	.word	0x40023800
 8008bec:	40020400 	.word	0x40020400
 8008bf0:	40000c00 	.word	0x40000c00
 8008bf4:	40021c00 	.word	0x40021c00

08008bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	; 0x38
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	609a      	str	r2, [r3, #8]
 8008c0c:	60da      	str	r2, [r3, #12]
 8008c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a9b      	ldr	r2, [pc, #620]	; (8008e84 <HAL_UART_MspInit+0x28c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d158      	bne.n	8008ccc <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008c1a:	4b9b      	ldr	r3, [pc, #620]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	4a9a      	ldr	r2, [pc, #616]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008c20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c24:	6413      	str	r3, [r2, #64]	; 0x40
 8008c26:	4b98      	ldr	r3, [pc, #608]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c2e:	623b      	str	r3, [r7, #32]
 8008c30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c32:	4b95      	ldr	r3, [pc, #596]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	4a94      	ldr	r2, [pc, #592]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008c38:	f043 0304 	orr.w	r3, r3, #4
 8008c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c3e:	4b92      	ldr	r3, [pc, #584]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = SPARE_UART_RX_3V3_Pin|SPARE_UART_TX_3V3_Pin;
 8008c4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c50:	2302      	movs	r3, #2
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008c5c:	2308      	movs	r3, #8
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c64:	4619      	mov	r1, r3
 8008c66:	4889      	ldr	r0, [pc, #548]	; (8008e8c <HAL_UART_MspInit+0x294>)
 8008c68:	f002 f990 	bl	800af8c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8008c6c:	4b88      	ldr	r3, [pc, #544]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c6e:	4a89      	ldr	r2, [pc, #548]	; (8008e94 <HAL_UART_MspInit+0x29c>)
 8008c70:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8008c72:	4b87      	ldr	r3, [pc, #540]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008c78:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c7a:	4b85      	ldr	r3, [pc, #532]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c80:	4b83      	ldr	r3, [pc, #524]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008c86:	4b82      	ldr	r3, [pc, #520]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c8c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008c8e:	4b80      	ldr	r3, [pc, #512]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c94:	4b7e      	ldr	r3, [pc, #504]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8008c9a:	4b7d      	ldr	r3, [pc, #500]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ca0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008ca2:	4b7b      	ldr	r3, [pc, #492]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ca8:	4b79      	ldr	r3, [pc, #484]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8008cae:	4878      	ldr	r0, [pc, #480]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008cb0:	f001 fd64 	bl	800a77c <HAL_DMA_Init>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8008cba:	f7fc fc0f 	bl	80054dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a73      	ldr	r2, [pc, #460]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008cc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8008cc4:	4a72      	ldr	r2, [pc, #456]	; (8008e90 <HAL_UART_MspInit+0x298>)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8008cca:	e0d6      	b.n	8008e7a <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART5)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a71      	ldr	r2, [pc, #452]	; (8008e98 <HAL_UART_MspInit+0x2a0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d174      	bne.n	8008dc0 <HAL_UART_MspInit+0x1c8>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008cd6:	4b6c      	ldr	r3, [pc, #432]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	4a6b      	ldr	r2, [pc, #428]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ce2:	4b69      	ldr	r3, [pc, #420]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cee:	4b66      	ldr	r3, [pc, #408]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf2:	4a65      	ldr	r2, [pc, #404]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008cf4:	f043 0304 	orr.w	r3, r3, #4
 8008cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8008cfa:	4b63      	ldr	r3, [pc, #396]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	f003 0304 	and.w	r3, r3, #4
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d06:	4b60      	ldr	r3, [pc, #384]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	4a5f      	ldr	r2, [pc, #380]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008d0c:	f043 0308 	orr.w	r3, r3, #8
 8008d10:	6313      	str	r3, [r2, #48]	; 0x30
 8008d12:	4b5d      	ldr	r3, [pc, #372]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SOC_UART_TX_3V3_Pin;
 8008d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d24:	2302      	movs	r3, #2
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008d30:	2308      	movs	r3, #8
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_TX_3V3_GPIO_Port, &GPIO_InitStruct);
 8008d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4854      	ldr	r0, [pc, #336]	; (8008e8c <HAL_UART_MspInit+0x294>)
 8008d3c:	f002 f926 	bl	800af8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SOC_UART_RX_3V3_Pin;
 8008d40:	2304      	movs	r3, #4
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d44:	2302      	movs	r3, #2
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8008d50:	2308      	movs	r3, #8
 8008d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SOC_UART_RX_3V3_GPIO_Port, &GPIO_InitStruct);
 8008d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4850      	ldr	r0, [pc, #320]	; (8008e9c <HAL_UART_MspInit+0x2a4>)
 8008d5c:	f002 f916 	bl	800af8c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8008d60:	4b4f      	ldr	r3, [pc, #316]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d62:	4a50      	ldr	r2, [pc, #320]	; (8008ea4 <HAL_UART_MspInit+0x2ac>)
 8008d64:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8008d66:	4b4e      	ldr	r3, [pc, #312]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008d6c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d6e:	4b4c      	ldr	r3, [pc, #304]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d74:	4b4a      	ldr	r3, [pc, #296]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008d7a:	4b49      	ldr	r3, [pc, #292]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d80:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d82:	4b47      	ldr	r3, [pc, #284]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d88:	4b45      	ldr	r3, [pc, #276]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8008d8e:	4b44      	ldr	r3, [pc, #272]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d94:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008d96:	4b42      	ldr	r3, [pc, #264]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008d9c:	4b40      	ldr	r3, [pc, #256]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8008da2:	483f      	ldr	r0, [pc, #252]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008da4:	f001 fcea 	bl	800a77c <HAL_DMA_Init>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8008dae:	f7fc fb95 	bl	80054dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a3a      	ldr	r2, [pc, #232]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008db6:	66da      	str	r2, [r3, #108]	; 0x6c
 8008db8:	4a39      	ldr	r2, [pc, #228]	; (8008ea0 <HAL_UART_MspInit+0x2a8>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008dbe:	e05c      	b.n	8008e7a <HAL_UART_MspInit+0x282>
  else if(huart->Instance==UART7)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a38      	ldr	r2, [pc, #224]	; (8008ea8 <HAL_UART_MspInit+0x2b0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d157      	bne.n	8008e7a <HAL_UART_MspInit+0x282>
    __HAL_RCC_UART7_CLK_ENABLE();
 8008dca:	4b2f      	ldr	r3, [pc, #188]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	4a2e      	ldr	r2, [pc, #184]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8008dd6:	4b2c      	ldr	r3, [pc, #176]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008de2:	4b29      	ldr	r3, [pc, #164]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	4a28      	ldr	r2, [pc, #160]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008de8:	f043 0310 	orr.w	r3, r3, #16
 8008dec:	6313      	str	r3, [r2, #48]	; 0x30
 8008dee:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <HAL_UART_MspInit+0x290>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	f003 0310 	and.w	r3, r3, #16
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FTDI_UART_RX_Pin|FTDI_UART_CTS_L_Pin|FTDI_UART_TX_Pin|FTDI_UART_RTS_L_Pin;
 8008dfa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e00:	2302      	movs	r3, #2
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e14:	4619      	mov	r1, r3
 8008e16:	4825      	ldr	r0, [pc, #148]	; (8008eac <HAL_UART_MspInit+0x2b4>)
 8008e18:	f002 f8b8 	bl	800af8c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8008e1c:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e1e:	4a25      	ldr	r2, [pc, #148]	; (8008eb4 <HAL_UART_MspInit+0x2bc>)
 8008e20:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8008e22:	4b23      	ldr	r3, [pc, #140]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e24:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008e28:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e2a:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e30:	4b1f      	ldr	r3, [pc, #124]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008e36:	4b1e      	ldr	r3, [pc, #120]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e3c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008e3e:	4b1c      	ldr	r3, [pc, #112]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008e44:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8008e4a:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e50:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008e52:	4b17      	ldr	r3, [pc, #92]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8008e5e:	4814      	ldr	r0, [pc, #80]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e60:	f001 fc8c 	bl	800a77c <HAL_DMA_Init>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <HAL_UART_MspInit+0x276>
      Error_Handler();
 8008e6a:	f7fc fb37 	bl	80054dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a0f      	ldr	r2, [pc, #60]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e72:	66da      	str	r2, [r3, #108]	; 0x6c
 8008e74:	4a0e      	ldr	r2, [pc, #56]	; (8008eb0 <HAL_UART_MspInit+0x2b8>)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008e7a:	bf00      	nop
 8008e7c:	3738      	adds	r7, #56	; 0x38
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40004c00 	.word	0x40004c00
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40020800 	.word	0x40020800
 8008e90:	20028b10 	.word	0x20028b10
 8008e94:	40026040 	.word	0x40026040
 8008e98:	40005000 	.word	0x40005000
 8008e9c:	40020c00 	.word	0x40020c00
 8008ea0:	20031078 	.word	0x20031078
 8008ea4:	40026010 	.word	0x40026010
 8008ea8:	40007800 	.word	0x40007800
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	2002be8c 	.word	0x2002be8c
 8008eb4:	40026058 	.word	0x40026058

08008eb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ec0:	f107 0314 	add.w	r3, r7, #20
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	605a      	str	r2, [r3, #4]
 8008eca:	609a      	str	r2, [r3, #8]
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed8:	d134      	bne.n	8008f44 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eda:	4b1c      	ldr	r3, [pc, #112]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	4a1b      	ldr	r2, [pc, #108]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008ee0:	f043 0301 	orr.w	r3, r3, #1
 8008ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ee6:	4b19      	ldr	r3, [pc, #100]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8008ef2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f00:	2303      	movs	r3, #3
 8008f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f04:	230a      	movs	r3, #10
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f08:	f107 0314 	add.w	r3, r7, #20
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4810      	ldr	r0, [pc, #64]	; (8008f50 <HAL_PCD_MspInit+0x98>)
 8008f10:	f002 f83c 	bl	800af8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f14:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f18:	4a0c      	ldr	r2, [pc, #48]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1e:	6353      	str	r3, [r2, #52]	; 0x34
 8008f20:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f28:	60fb      	str	r3, [r7, #12]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f36:	6453      	str	r3, [r2, #68]	; 0x44
 8008f38:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <HAL_PCD_MspInit+0x94>)
 8008f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008f44:	bf00      	nop
 8008f46:	3728      	adds	r7, #40	; 0x28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	40023800 	.word	0x40023800
 8008f50:	40020000 	.word	0x40020000

08008f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08c      	sub	sp, #48	; 0x30
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8008f64:	2200      	movs	r2, #0
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	2036      	movs	r0, #54	; 0x36
 8008f6a:	f001 fbdd 	bl	800a728 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008f6e:	2036      	movs	r0, #54	; 0x36
 8008f70:	f001 fbf6 	bl	800a760 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008f74:	4b1f      	ldr	r3, [pc, #124]	; (8008ff4 <HAL_InitTick+0xa0>)
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	4a1e      	ldr	r2, [pc, #120]	; (8008ff4 <HAL_InitTick+0xa0>)
 8008f7a:	f043 0310 	orr.w	r3, r3, #16
 8008f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8008f80:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <HAL_InitTick+0xa0>)
 8008f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008f8c:	f107 0210 	add.w	r2, r7, #16
 8008f90:	f107 0314 	add.w	r3, r7, #20
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f003 ff72 	bl	800ce80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008f9c:	f003 ff48 	bl	800ce30 <HAL_RCC_GetPCLK1Freq>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	4a13      	ldr	r2, [pc, #76]	; (8008ff8 <HAL_InitTick+0xa4>)
 8008faa:	fba2 2303 	umull	r2, r3, r2, r3
 8008fae:	0c9b      	lsrs	r3, r3, #18
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <HAL_InitTick+0xa8>)
 8008fb6:	4a12      	ldr	r2, [pc, #72]	; (8009000 <HAL_InitTick+0xac>)
 8008fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008fba:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <HAL_InitTick+0xa8>)
 8008fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008fc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008fc2:	4a0e      	ldr	r2, [pc, #56]	; (8008ffc <HAL_InitTick+0xa8>)
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <HAL_InitTick+0xa8>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <HAL_InitTick+0xa8>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008fd4:	4809      	ldr	r0, [pc, #36]	; (8008ffc <HAL_InitTick+0xa8>)
 8008fd6:	f005 f887 	bl	800e0e8 <HAL_TIM_Base_Init>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d104      	bne.n	8008fea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8008fe0:	4806      	ldr	r0, [pc, #24]	; (8008ffc <HAL_InitTick+0xa8>)
 8008fe2:	f005 f8ad 	bl	800e140 <HAL_TIM_Base_Start_IT>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	e000      	b.n	8008fec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3730      	adds	r7, #48	; 0x30
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	40023800 	.word	0x40023800
 8008ff8:	431bde83 	.word	0x431bde83
 8008ffc:	20031134 	.word	0x20031134
 8009000:	40001000 	.word	0x40001000

08009004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009008:	e7fe      	b.n	8009008 <NMI_Handler+0x4>

0800900a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800900a:	b480      	push	{r7}
 800900c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800900e:	e7fe      	b.n	800900e <HardFault_Handler+0x4>

08009010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009014:	e7fe      	b.n	8009014 <MemManage_Handler+0x4>

08009016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009016:	b480      	push	{r7}
 8009018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800901a:	e7fe      	b.n	800901a <BusFault_Handler+0x4>

0800901c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009020:	e7fe      	b.n	8009020 <UsageFault_Handler+0x4>

08009022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009022:	b480      	push	{r7}
 8009024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009026:	bf00      	nop
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	int currentTicks = HAL_GetTick();
 8009036:	f000 fce5 	bl	8009a04 <HAL_GetTick>
 800903a:	4603      	mov	r3, r0
 800903c:	607b      	str	r3, [r7, #4]
	int currentDiff = currentTicks-timestamp;
 800903e:	4b10      	ldr	r3, [pc, #64]	; (8009080 <EXTI4_IRQHandler+0x50>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	603b      	str	r3, [r7, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009048:	2010      	movs	r0, #16
 800904a:	f002 f995 	bl	800b378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if((inputButtonSet>buttonPriority.back) && (currentDiff>150)){
 800904e:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <EXTI4_IRQHandler+0x54>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <EXTI4_IRQHandler+0x58>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	429a      	cmp	r2, r3
 800905a:	dd07      	ble.n	800906c <EXTI4_IRQHandler+0x3c>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b96      	cmp	r3, #150	; 0x96
 8009060:	dd04      	ble.n	800906c <EXTI4_IRQHandler+0x3c>
	  inputButtonSet = buttonPriority.back;
 8009062:	4b09      	ldr	r3, [pc, #36]	; (8009088 <EXTI4_IRQHandler+0x58>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	b2da      	uxtb	r2, r3
 8009068:	4b06      	ldr	r3, [pc, #24]	; (8009084 <EXTI4_IRQHandler+0x54>)
 800906a:	701a      	strb	r2, [r3, #0]
  }
  timestamp = HAL_GetTick();
 800906c:	f000 fcca 	bl	8009a04 <HAL_GetTick>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <EXTI4_IRQHandler+0x50>)
 8009076:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	2000337c 	.word	0x2000337c
 8009084:	200000dc 	.word	0x200000dc
 8009088:	20000188 	.word	0x20000188

0800908c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8009092:	4804      	ldr	r0, [pc, #16]	; (80090a4 <DMA1_Stream0_IRQHandler+0x18>)
 8009094:	f001 fd12 	bl	800aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  int x=0;
 8009098:	2300      	movs	r3, #0
 800909a:	607b      	str	r3, [r7, #4]
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20031078 	.word	0x20031078

080090a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80090ac:	4802      	ldr	r0, [pc, #8]	; (80090b8 <DMA1_Stream2_IRQHandler+0x10>)
 80090ae:	f001 fd05 	bl	800aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80090b2:	bf00      	nop
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20028b10 	.word	0x20028b10

080090bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80090c0:	4802      	ldr	r0, [pc, #8]	; (80090cc <DMA1_Stream3_IRQHandler+0x10>)
 80090c2:	f001 fcfb 	bl	800aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80090c6:	bf00      	nop
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	2002be8c 	.word	0x2002be8c

080090d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80090d4:	4805      	ldr	r0, [pc, #20]	; (80090ec <ADC_IRQHandler+0x1c>)
 80090d6:	f000 fd07 	bl	8009ae8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80090da:	4805      	ldr	r0, [pc, #20]	; (80090f0 <ADC_IRQHandler+0x20>)
 80090dc:	f000 fd04 	bl	8009ae8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80090e0:	4804      	ldr	r0, [pc, #16]	; (80090f4 <ADC_IRQHandler+0x24>)
 80090e2:	f000 fd01 	bl	8009ae8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80090e6:	bf00      	nop
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	2002be44 	.word	0x2002be44
 80090f0:	20028d40 	.word	0x20028d40
 80090f4:	2002bef0 	.word	0x2002bef0

080090f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	uint8_t buttonStates[3];
	int currentTicks = HAL_GetTick();
 80090fe:	f000 fc81 	bl	8009a04 <HAL_GetTick>
 8009102:	4603      	mov	r3, r0
 8009104:	60fb      	str	r3, [r7, #12]
	int currentDiff = currentTicks-timestamp;
 8009106:	4b35      	ldr	r3, [pc, #212]	; (80091dc <EXTI9_5_IRQHandler+0xe4>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	60bb      	str	r3, [r7, #8]
	buttonStates[0] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_5);
 8009110:	2120      	movs	r1, #32
 8009112:	4833      	ldr	r0, [pc, #204]	; (80091e0 <EXTI9_5_IRQHandler+0xe8>)
 8009114:	f002 f8e4 	bl	800b2e0 <HAL_GPIO_ReadPin>
 8009118:	4603      	mov	r3, r0
 800911a:	713b      	strb	r3, [r7, #4]
	buttonStates[1] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_6);
 800911c:	2140      	movs	r1, #64	; 0x40
 800911e:	4830      	ldr	r0, [pc, #192]	; (80091e0 <EXTI9_5_IRQHandler+0xe8>)
 8009120:	f002 f8de 	bl	800b2e0 <HAL_GPIO_ReadPin>
 8009124:	4603      	mov	r3, r0
 8009126:	717b      	strb	r3, [r7, #5]
	buttonStates[2] = HAL_GPIO_ReadPin(GPIOK,GPIO_PIN_7);
 8009128:	2180      	movs	r1, #128	; 0x80
 800912a:	482d      	ldr	r0, [pc, #180]	; (80091e0 <EXTI9_5_IRQHandler+0xe8>)
 800912c:	f002 f8d8 	bl	800b2e0 <HAL_GPIO_ReadPin>
 8009130:	4603      	mov	r3, r0
 8009132:	71bb      	strb	r3, [r7, #6]
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_5) && (currentDiff>150)){ //up button
 8009134:	4b2b      	ldr	r3, [pc, #172]	; (80091e4 <EXTI9_5_IRQHandler+0xec>)
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00f      	beq.n	8009160 <EXTI9_5_IRQHandler+0x68>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b96      	cmp	r3, #150	; 0x96
 8009144:	dd0c      	ble.n	8009160 <EXTI9_5_IRQHandler+0x68>
		if(inputButtonSet > buttonPriority.up){
 8009146:	4b28      	ldr	r3, [pc, #160]	; (80091e8 <EXTI9_5_IRQHandler+0xf0>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	4b27      	ldr	r3, [pc, #156]	; (80091ec <EXTI9_5_IRQHandler+0xf4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	dd30      	ble.n	80091b6 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.up;
 8009154:	4b25      	ldr	r3, [pc, #148]	; (80091ec <EXTI9_5_IRQHandler+0xf4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	b2da      	uxtb	r2, r3
 800915a:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <EXTI9_5_IRQHandler+0xf0>)
 800915c:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.up){
 800915e:	e02a      	b.n	80091b6 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_6) && (currentDiff>150)){ //sel button
 8009160:	4b20      	ldr	r3, [pc, #128]	; (80091e4 <EXTI9_5_IRQHandler+0xec>)
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00f      	beq.n	800918c <EXTI9_5_IRQHandler+0x94>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b96      	cmp	r3, #150	; 0x96
 8009170:	dd0c      	ble.n	800918c <EXTI9_5_IRQHandler+0x94>
		if(inputButtonSet > buttonPriority.sel){
 8009172:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <EXTI9_5_IRQHandler+0xf0>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	4b1c      	ldr	r3, [pc, #112]	; (80091ec <EXTI9_5_IRQHandler+0xf4>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	429a      	cmp	r2, r3
 800917e:	dd1a      	ble.n	80091b6 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.sel;
 8009180:	4b1a      	ldr	r3, [pc, #104]	; (80091ec <EXTI9_5_IRQHandler+0xf4>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	b2da      	uxtb	r2, r3
 8009186:	4b18      	ldr	r3, [pc, #96]	; (80091e8 <EXTI9_5_IRQHandler+0xf0>)
 8009188:	701a      	strb	r2, [r3, #0]
		if(inputButtonSet > buttonPriority.sel){
 800918a:	e014      	b.n	80091b6 <EXTI9_5_IRQHandler+0xbe>
		}
	}
	else if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7) && (currentDiff>150)){ //down button
 800918c:	4b15      	ldr	r3, [pc, #84]	; (80091e4 <EXTI9_5_IRQHandler+0xec>)
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00e      	beq.n	80091b6 <EXTI9_5_IRQHandler+0xbe>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b96      	cmp	r3, #150	; 0x96
 800919c:	dd0b      	ble.n	80091b6 <EXTI9_5_IRQHandler+0xbe>
		if(inputButtonSet > buttonPriority.down){
 800919e:	4b12      	ldr	r3, [pc, #72]	; (80091e8 <EXTI9_5_IRQHandler+0xf0>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	4b11      	ldr	r3, [pc, #68]	; (80091ec <EXTI9_5_IRQHandler+0xf4>)
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	dd04      	ble.n	80091b6 <EXTI9_5_IRQHandler+0xbe>
			inputButtonSet = buttonPriority.down;
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <EXTI9_5_IRQHandler+0xf4>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	4b0d      	ldr	r3, [pc, #52]	; (80091e8 <EXTI9_5_IRQHandler+0xf0>)
 80091b4:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80091b6:	2020      	movs	r0, #32
 80091b8:	f002 f8de 	bl	800b378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80091bc:	2040      	movs	r0, #64	; 0x40
 80091be:	f002 f8db 	bl	800b378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80091c2:	2080      	movs	r0, #128	; 0x80
 80091c4:	f002 f8d8 	bl	800b378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  timestamp = HAL_GetTick();
 80091c8:	f000 fc1c 	bl	8009a04 <HAL_GetTick>
 80091cc:	4603      	mov	r3, r0
 80091ce:	461a      	mov	r2, r3
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <EXTI9_5_IRQHandler+0xe4>)
 80091d2:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	2000337c 	.word	0x2000337c
 80091e0:	40022800 	.word	0x40022800
 80091e4:	40013c00 	.word	0x40013c00
 80091e8:	200000dc 	.word	0x200000dc
 80091ec:	20000188 	.word	0x20000188

080091f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80091f4:	4802      	ldr	r0, [pc, #8]	; (8009200 <TIM6_DAC_IRQHandler+0x10>)
 80091f6:	f005 f802 	bl	800e1fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20031134 	.word	0x20031134

08009204 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009208:	4805      	ldr	r0, [pc, #20]	; (8009220 <DMA2_Stream0_IRQHandler+0x1c>)
 800920a:	f001 fc57 	bl	800aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc1);
 800920e:	4805      	ldr	r0, [pc, #20]	; (8009224 <DMA2_Stream0_IRQHandler+0x20>)
 8009210:	f000 fe9a 	bl	8009f48 <HAL_ADC_Stop_DMA>
  adcRestart[0]=1;
 8009214:	4b04      	ldr	r3, [pc, #16]	; (8009228 <DMA2_Stream0_IRQHandler+0x24>)
 8009216:	2201      	movs	r2, #1
 8009218:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	2002c004 	.word	0x2002c004
 8009224:	2002be44 	.word	0x2002be44
 8009228:	20029284 	.word	0x20029284

0800922c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8009230:	4805      	ldr	r0, [pc, #20]	; (8009248 <DMA2_Stream1_IRQHandler+0x1c>)
 8009232:	f001 fc43 	bl	800aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc3);
 8009236:	4805      	ldr	r0, [pc, #20]	; (800924c <DMA2_Stream1_IRQHandler+0x20>)
 8009238:	f000 fe86 	bl	8009f48 <HAL_ADC_Stop_DMA>
  adcRestart[2]=1;
 800923c:	4b04      	ldr	r3, [pc, #16]	; (8009250 <DMA2_Stream1_IRQHandler+0x24>)
 800923e:	2201      	movs	r2, #1
 8009240:	709a      	strb	r2, [r3, #2]
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009242:	bf00      	nop
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20029224 	.word	0x20029224
 800924c:	2002bef0 	.word	0x2002bef0
 8009250:	20029284 	.word	0x20029284

08009254 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <DMA2_Stream2_IRQHandler+0x1c>)
 800925a:	f001 fc2f 	bl	800aabc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_ADC_Stop_DMA(&hadc2);
 800925e:	4805      	ldr	r0, [pc, #20]	; (8009274 <DMA2_Stream2_IRQHandler+0x20>)
 8009260:	f000 fe72 	bl	8009f48 <HAL_ADC_Stop_DMA>
  adcRestart[1]=1;
 8009264:	4b04      	ldr	r3, [pc, #16]	; (8009278 <DMA2_Stream2_IRQHandler+0x24>)
 8009266:	2201      	movs	r2, #1
 8009268:	705a      	strb	r2, [r3, #1]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800926a:	bf00      	nop
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20031018 	.word	0x20031018
 8009274:	20028d40 	.word	0x20028d40
 8009278:	20029284 	.word	0x20029284

0800927c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8009280:	4802      	ldr	r0, [pc, #8]	; (800928c <SPI4_IRQHandler+0x10>)
 8009282:	f004 fcf5 	bl	800dc70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8009286:	bf00      	nop
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20028aac 	.word	0x20028aac

08009290 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e00a      	b.n	80092b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80092a2:	f3af 8000 	nop.w
 80092a6:	4601      	mov	r1, r0
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	60ba      	str	r2, [r7, #8]
 80092ae:	b2ca      	uxtb	r2, r1
 80092b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	3301      	adds	r3, #1
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	429a      	cmp	r2, r3
 80092be:	dbf0      	blt.n	80092a2 <_read+0x12>
	}

return len;
 80092c0:	687b      	ldr	r3, [r7, #4]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e009      	b.n	80092f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	60ba      	str	r2, [r7, #8]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7f9 ff35 	bl	8003154 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	3301      	adds	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	dbf1      	blt.n	80092dc <_write+0x12>
	}
	return len;
 80092f8:	687b      	ldr	r3, [r7, #4]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <_close>:

int _close(int file)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
	return -1;
 800930a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800932a:	605a      	str	r2, [r3, #4]
	return 0;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <_isatty>:

int _isatty(int file)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
	return 1;
 8009342:	2301      	movs	r3, #1
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
	return 0;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009374:	4a14      	ldr	r2, [pc, #80]	; (80093c8 <_sbrk+0x5c>)
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <_sbrk+0x60>)
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009380:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <_sbrk+0x64>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009388:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <_sbrk+0x64>)
 800938a:	4a12      	ldr	r2, [pc, #72]	; (80093d4 <_sbrk+0x68>)
 800938c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800938e:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <_sbrk+0x64>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4413      	add	r3, r2
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	429a      	cmp	r2, r3
 800939a:	d207      	bcs.n	80093ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800939c:	f00a f820 	bl	80133e0 <__errno>
 80093a0:	4602      	mov	r2, r0
 80093a2:	230c      	movs	r3, #12
 80093a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80093a6:	f04f 33ff 	mov.w	r3, #4294967295
 80093aa:	e009      	b.n	80093c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80093ac:	4b08      	ldr	r3, [pc, #32]	; (80093d0 <_sbrk+0x64>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <_sbrk+0x64>)
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4413      	add	r3, r2
 80093ba:	4a05      	ldr	r2, [pc, #20]	; (80093d0 <_sbrk+0x64>)
 80093bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20080000 	.word	0x20080000
 80093cc:	00000400 	.word	0x00000400
 80093d0:	20003380 	.word	0x20003380
 80093d4:	200311c0 	.word	0x200311c0

080093d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80093dc:	4b08      	ldr	r3, [pc, #32]	; (8009400 <SystemInit+0x28>)
 80093de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e2:	4a07      	ldr	r2, [pc, #28]	; (8009400 <SystemInit+0x28>)
 80093e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <SystemInit+0x28>)
 80093ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093f2:	609a      	str	r2, [r3, #8]
#endif
}
 80093f4:	bf00      	nop
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	e000ed00 	.word	0xe000ed00

08009404 <zionEEPROMPresence>:
 *      Author: auphilli
 */

#include "zionEeprom.h"

int * zionEEPROMPresence(){
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
	static int eepromPresent[3];
	memset(eepromPresent, 0x00, sizeof(eepromPresent));
 8009408:	220c      	movs	r2, #12
 800940a:	2100      	movs	r1, #0
 800940c:	4814      	ldr	r0, [pc, #80]	; (8009460 <zionEEPROMPresence+0x5c>)
 800940e:	f00a f81c 	bl	801344a <memset>
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, SOC_ADDRESS, 2, 100)== HAL_OK){
 8009412:	2364      	movs	r3, #100	; 0x64
 8009414:	2202      	movs	r2, #2
 8009416:	21a6      	movs	r1, #166	; 0xa6
 8009418:	4812      	ldr	r0, [pc, #72]	; (8009464 <zionEEPROMPresence+0x60>)
 800941a:	f002 fb65 	bl	800bae8 <HAL_I2C_IsDeviceReady>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d102      	bne.n	800942a <zionEEPROMPresence+0x26>
		eepromPresent[0]=1;
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <zionEEPROMPresence+0x5c>)
 8009426:	2201      	movs	r2, #1
 8009428:	601a      	str	r2, [r3, #0]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, ASIC_ADDRESS, 2, 100)== HAL_OK){
 800942a:	2364      	movs	r3, #100	; 0x64
 800942c:	2202      	movs	r2, #2
 800942e:	21a8      	movs	r1, #168	; 0xa8
 8009430:	480c      	ldr	r0, [pc, #48]	; (8009464 <zionEEPROMPresence+0x60>)
 8009432:	f002 fb59 	bl	800bae8 <HAL_I2C_IsDeviceReady>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <zionEEPROMPresence+0x3e>
		eepromPresent[1]=1;
 800943c:	4b08      	ldr	r3, [pc, #32]	; (8009460 <zionEEPROMPresence+0x5c>)
 800943e:	2201      	movs	r2, #1
 8009440:	605a      	str	r2, [r3, #4]
	}
	if(HAL_I2C_IsDeviceReady(&EEPROM_I2C, DISPLAY_ADDRESS, 2, 100)== HAL_OK){
 8009442:	2364      	movs	r3, #100	; 0x64
 8009444:	2202      	movs	r2, #2
 8009446:	21aa      	movs	r1, #170	; 0xaa
 8009448:	4806      	ldr	r0, [pc, #24]	; (8009464 <zionEEPROMPresence+0x60>)
 800944a:	f002 fb4d 	bl	800bae8 <HAL_I2C_IsDeviceReady>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d102      	bne.n	800945a <zionEEPROMPresence+0x56>
		eepromPresent[2]=1;
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <zionEEPROMPresence+0x5c>)
 8009456:	2201      	movs	r2, #1
 8009458:	609a      	str	r2, [r3, #8]
	}
	return eepromPresent;
 800945a:	4b01      	ldr	r3, [pc, #4]	; (8009460 <zionEEPROMPresence+0x5c>)
}
 800945c:	4618      	mov	r0, r3
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20003384 	.word	0x20003384
 8009464:	20028bbc 	.word	0x20028bbc

08009468 <readDataFromEEPROM>:
		bytes+=32;
	}

}
//reads from the EEPROM can be continuous
void readDataFromEEPROM(uint8_t * data, uint8_t chipAddress, uint16_t memoryAddress, int len,uint16_t timeout){
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af04      	add	r7, sp, #16
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	72fb      	strb	r3, [r7, #11]
 8009476:	4613      	mov	r3, r2
 8009478:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(&EEPROM_I2C,chipAddress,memoryAddress, I2C_MEMADD_SIZE_16BIT,data,len,timeout);
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	b299      	uxth	r1, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	b29b      	uxth	r3, r3
 8009482:	8b3a      	ldrh	r2, [r7, #24]
 8009484:	8938      	ldrh	r0, [r7, #8]
 8009486:	9202      	str	r2, [sp, #8]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	2302      	movs	r3, #2
 8009490:	4602      	mov	r2, r0
 8009492:	4803      	ldr	r0, [pc, #12]	; (80094a0 <readDataFromEEPROM+0x38>)
 8009494:	f002 fa0e 	bl	800b8b4 <HAL_I2C_Mem_Read>
}
 8009498:	bf00      	nop
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20028bbc 	.word	0x20028bbc

080094a4 <parseZionEEPROM>:
		 writeDataToEEPROM((uint8_t*)zionEEPROMKanu,DISPLAY_ADDRESS,0x0,sizeof(zionEEPROMKanu), 500);
		 HAL_Delay(100);
	  }
}

int * parseZionEEPROM(uint8_t chipAddress){
 80094a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a8:	b0a6      	sub	sp, #152	; 0x98
 80094aa:	af02      	add	r7, sp, #8
 80094ac:	4603      	mov	r3, r0
 80094ae:	71fb      	strb	r3, [r7, #7]
 80094b0:	466b      	mov	r3, sp
 80094b2:	4698      	mov	r8, r3
	int foundTheEnd = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int x=0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int size = 100;
 80094c0:	2364      	movs	r3, #100	; 0x64
 80094c2:	673b      	str	r3, [r7, #112]	; 0x70
	int counter=6;
 80094c4:	2306      	movs	r3, #6
 80094c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int zeroWas5A=0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int validHeader=0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	67fb      	str	r3, [r7, #124]	; 0x7c
	int previousByteOfHeader[20];
	int index=0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	67bb      	str	r3, [r7, #120]	; 0x78
	int indexSubtractor = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t letsParseSomeBytes[size];
 80094dc:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 80094de:	1e6b      	subs	r3, r5, #1
 80094e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094e2:	462b      	mov	r3, r5
 80094e4:	4619      	mov	r1, r3
 80094e6:	f04f 0200 	mov.w	r2, #0
 80094ea:	f04f 0300 	mov.w	r3, #0
 80094ee:	f04f 0400 	mov.w	r4, #0
 80094f2:	00d4      	lsls	r4, r2, #3
 80094f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80094f8:	00cb      	lsls	r3, r1, #3
 80094fa:	462b      	mov	r3, r5
 80094fc:	4619      	mov	r1, r3
 80094fe:	f04f 0200 	mov.w	r2, #0
 8009502:	f04f 0300 	mov.w	r3, #0
 8009506:	f04f 0400 	mov.w	r4, #0
 800950a:	00d4      	lsls	r4, r2, #3
 800950c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009510:	00cb      	lsls	r3, r1, #3
 8009512:	462b      	mov	r3, r5
 8009514:	3307      	adds	r3, #7
 8009516:	08db      	lsrs	r3, r3, #3
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	ebad 0d03 	sub.w	sp, sp, r3
 800951e:	ab02      	add	r3, sp, #8
 8009520:	3300      	adds	r3, #0
 8009522:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t pastParsedBytes[size];
 8009524:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8009526:	1e73      	subs	r3, r6, #1
 8009528:	667b      	str	r3, [r7, #100]	; 0x64
 800952a:	4633      	mov	r3, r6
 800952c:	4619      	mov	r1, r3
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	f04f 0400 	mov.w	r4, #0
 800953a:	00d4      	lsls	r4, r2, #3
 800953c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009540:	00cb      	lsls	r3, r1, #3
 8009542:	4633      	mov	r3, r6
 8009544:	4619      	mov	r1, r3
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	f04f 0300 	mov.w	r3, #0
 800954e:	f04f 0400 	mov.w	r4, #0
 8009552:	00d4      	lsls	r4, r2, #3
 8009554:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009558:	00cb      	lsls	r3, r1, #3
 800955a:	4633      	mov	r3, r6
 800955c:	3307      	adds	r3, #7
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	ebad 0d03 	sub.w	sp, sp, r3
 8009566:	ab02      	add	r3, sp, #8
 8009568:	3300      	adds	r3, #0
 800956a:	663b      	str	r3, [r7, #96]	; 0x60
	static int deviceHeaderBytes[5];

	memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 800956c:	f107 0308 	add.w	r3, r7, #8
 8009570:	2250      	movs	r2, #80	; 0x50
 8009572:	2100      	movs	r1, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f009 ff68 	bl	801344a <memset>
	memset(pastParsedBytes,0,sizeof(pastParsedBytes));
 800957a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800957c:	4632      	mov	r2, r6
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f009 ff62 	bl	801344a <memset>
	memset(letsParseSomeBytes,0,sizeof(letsParseSomeBytes));
 8009586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009588:	462a      	mov	r2, r5
 800958a:	2100      	movs	r1, #0
 800958c:	4618      	mov	r0, r3
 800958e:	f009 ff5c 	bl	801344a <memset>
	readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,0x00,sizeof(letsParseSomeBytes),100);
 8009592:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009594:	79f9      	ldrb	r1, [r7, #7]
 8009596:	2364      	movs	r3, #100	; 0x64
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	462b      	mov	r3, r5
 800959c:	2200      	movs	r2, #0
 800959e:	f7ff ff63 	bl	8009468 <readDataFromEEPROM>
	//if the eeprom is uninitialized and/or improperly formated, just end.
	if(letsParseSomeBytes[0] == 0xff){
 80095a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2bff      	cmp	r3, #255	; 0xff
 80095a8:	f040 811b 	bne.w	80097e2 <parseZionEEPROM+0x33e>
		foundTheEnd=1;
 80095ac:	2301      	movs	r3, #1
 80095ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		previousByteOfHeader[0]= -2;
 80095b2:	f06f 0301 	mvn.w	r3, #1
 80095b6:	60bb      	str	r3, [r7, #8]
	}
	while(!foundTheEnd){
 80095b8:	e113      	b.n	80097e2 <parseZionEEPROM+0x33e>
		//every time we reach the end of our data, store it in the past buffer and get more!
		if(!(index%size) & (index>0)){
 80095ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80095be:	fb93 f2f2 	sdiv	r2, r3, r2
 80095c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80095c4:	fb01 f202 	mul.w	r2, r1, r2
 80095c8:	1a9b      	subs	r3, r3, r2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bf0c      	ite	eq
 80095ce:	2301      	moveq	r3, #1
 80095d0:	2300      	movne	r3, #0
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfcc      	ite	gt
 80095da:	2301      	movgt	r3, #1
 80095dc:	2300      	movle	r3, #0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	4013      	ands	r3, r2
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d025      	beq.n	8009634 <parseZionEEPROM+0x190>
			for(x=0;x<size;x++){
 80095e8:	2300      	movs	r3, #0
 80095ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095ee:	e00f      	b.n	8009610 <parseZionEEPROM+0x16c>
				pastParsedBytes[x] = letsParseSomeBytes[x];
 80095f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095f6:	4413      	add	r3, r2
 80095f8:	7819      	ldrb	r1, [r3, #0]
 80095fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009600:	4413      	add	r3, r2
 8009602:	460a      	mov	r2, r1
 8009604:	701a      	strb	r2, [r3, #0]
			for(x=0;x<size;x++){
 8009606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800960a:	3301      	adds	r3, #1
 800960c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009610:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009616:	429a      	cmp	r2, r3
 8009618:	dbea      	blt.n	80095f0 <parseZionEEPROM+0x14c>
			}
			readDataFromEEPROM((uint8_t*)letsParseSomeBytes,chipAddress,index,sizeof(letsParseSomeBytes),100);
 800961a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800961c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800961e:	b29a      	uxth	r2, r3
 8009620:	79f9      	ldrb	r1, [r7, #7]
 8009622:	2364      	movs	r3, #100	; 0x64
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	462b      	mov	r3, r5
 8009628:	f7ff ff1e 	bl	8009468 <readDataFromEEPROM>
			indexSubtractor+=size;
 800962c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800962e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009630:	4413      	add	r3, r2
 8009632:	677b      	str	r3, [r7, #116]	; 0x74
		}
		//if 5 consecutive bits in a read operation are 0xff, time to give up finding the legit header
		if((letsParseSomeBytes[0] == 0xff) && (letsParseSomeBytes[1] == 0xff) && (letsParseSomeBytes[2] == 0xff) && (letsParseSomeBytes[3] == 0xff) && (letsParseSomeBytes[5] == 0xff)){
 8009634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2bff      	cmp	r3, #255	; 0xff
 800963a:	d116      	bne.n	800966a <parseZionEEPROM+0x1c6>
 800963c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800963e:	785b      	ldrb	r3, [r3, #1]
 8009640:	2bff      	cmp	r3, #255	; 0xff
 8009642:	d112      	bne.n	800966a <parseZionEEPROM+0x1c6>
 8009644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009646:	789b      	ldrb	r3, [r3, #2]
 8009648:	2bff      	cmp	r3, #255	; 0xff
 800964a:	d10e      	bne.n	800966a <parseZionEEPROM+0x1c6>
 800964c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800964e:	78db      	ldrb	r3, [r3, #3]
 8009650:	2bff      	cmp	r3, #255	; 0xff
 8009652:	d10a      	bne.n	800966a <parseZionEEPROM+0x1c6>
 8009654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009656:	795b      	ldrb	r3, [r3, #5]
 8009658:	2bff      	cmp	r3, #255	; 0xff
 800965a:	d106      	bne.n	800966a <parseZionEEPROM+0x1c6>
			previousByteOfHeader[0]=-1;
 800965c:	f04f 33ff 	mov.w	r3, #4294967295
 8009660:	60bb      	str	r3, [r7, #8]
			foundTheEnd=1;
 8009662:	2301      	movs	r3, #1
 8009664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009668:	e0b8      	b.n	80097dc <parseZionEEPROM+0x338>
		}
		//if((letsParseSomeBytes[index] == 0xff)){
		else if(((letsParseSomeBytes[index-indexSubtractor] == 0x5a))|| ((letsParseSomeBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20)) || ((pastParsedBytes[previousByteOfHeader[0]%size] == 0x5a) && (index < previousByteOfHeader[0]+20))){
 800966a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800966c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009672:	5cd3      	ldrb	r3, [r2, r3]
 8009674:	2b5a      	cmp	r3, #90	; 0x5a
 8009676:	d023      	beq.n	80096c0 <parseZionEEPROM+0x21c>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800967c:	fb93 f2f2 	sdiv	r2, r3, r2
 8009680:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009682:	fb01 f202 	mul.w	r2, r1, r2
 8009686:	1a9b      	subs	r3, r3, r2
 8009688:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800968a:	5cd3      	ldrb	r3, [r2, r3]
 800968c:	2b5a      	cmp	r3, #90	; 0x5a
 800968e:	d104      	bne.n	800969a <parseZionEEPROM+0x1f6>
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3314      	adds	r3, #20
 8009694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009696:	429a      	cmp	r2, r3
 8009698:	db12      	blt.n	80096c0 <parseZionEEPROM+0x21c>
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800969e:	fb93 f2f2 	sdiv	r2, r3, r2
 80096a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80096a4:	fb01 f202 	mul.w	r2, r1, r2
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096ac:	5cd3      	ldrb	r3, [r2, r3]
 80096ae:	2b5a      	cmp	r3, #90	; 0x5a
 80096b0:	f040 8094 	bne.w	80097dc <parseZionEEPROM+0x338>
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	3314      	adds	r3, #20
 80096b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096ba:	429a      	cmp	r2, r3
 80096bc:	f280 808e 	bge.w	80097dc <parseZionEEPROM+0x338>
			if((previousByteOfHeader[0] == 0) & (!zeroWas5A) & ((letsParseSomeBytes[index-indexSubtractor] == 0x5a))){
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096c6:	4313      	orrs	r3, r2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bf0c      	ite	eq
 80096cc:	2301      	moveq	r3, #1
 80096ce:	2300      	movne	r3, #0
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80096d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096d6:	1acb      	subs	r3, r1, r3
 80096d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096da:	5ccb      	ldrb	r3, [r1, r3]
 80096dc:	2b5a      	cmp	r3, #90	; 0x5a
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	4013      	ands	r3, r2
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d008      	beq.n	8009700 <parseZionEEPROM+0x25c>
				previousByteOfHeader[0] = index;
 80096ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f0:	60bb      	str	r3, [r7, #8]
				if(index==0){
 80096f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d171      	bne.n	80097dc <parseZionEEPROM+0x338>
					zeroWas5A=1;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096fe:	e06d      	b.n	80097dc <parseZionEEPROM+0x338>
				}
			}
			//if validHeader was set, we just need the next 14 bytes of data
			else if(validHeader){
 8009700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d015      	beq.n	8009732 <parseZionEEPROM+0x28e>
				previousByteOfHeader[counter]=index;
 8009706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009710:	4413      	add	r3, r2
 8009712:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009714:	f843 2c88 	str.w	r2, [r3, #-136]
				if(counter==19){
 8009718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800971c:	2b13      	cmp	r3, #19
 800971e:	d102      	bne.n	8009726 <parseZionEEPROM+0x282>
					foundTheEnd=1;
 8009720:	2301      	movs	r3, #1
 8009722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				counter++;
 8009726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800972a:	3301      	adds	r3, #1
 800972c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009730:	e054      	b.n	80097dc <parseZionEEPROM+0x338>
			}
			else{
				if((letsParseSomeBytes[index-indexSubtractor] == 0x45)){
 8009732:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800973a:	5cd3      	ldrb	r3, [r2, r3]
 800973c:	2b45      	cmp	r3, #69	; 0x45
 800973e:	d102      	bne.n	8009746 <parseZionEEPROM+0x2a2>
					previousByteOfHeader[1] = index;
 8009740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	e04a      	b.n	80097dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x46)) && (previousByteOfHeader[1] == index -1)){
 8009746:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800974e:	5cd3      	ldrb	r3, [r2, r3]
 8009750:	2b46      	cmp	r3, #70	; 0x46
 8009752:	d107      	bne.n	8009764 <parseZionEEPROM+0x2c0>
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009758:	3b01      	subs	r3, #1
 800975a:	429a      	cmp	r2, r3
 800975c:	d102      	bne.n	8009764 <parseZionEEPROM+0x2c0>
					previousByteOfHeader[2] = index;
 800975e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009760:	613b      	str	r3, [r7, #16]
 8009762:	e03b      	b.n	80097dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[2] == index -1)){
 8009764:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800976c:	5cd3      	ldrb	r3, [r2, r3]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d107      	bne.n	8009782 <parseZionEEPROM+0x2de>
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009776:	3b01      	subs	r3, #1
 8009778:	429a      	cmp	r2, r3
 800977a:	d102      	bne.n	8009782 <parseZionEEPROM+0x2de>
					previousByteOfHeader[3] = index;
 800977c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	e02c      	b.n	80097dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x01)) && (previousByteOfHeader[3] == index -1)){
 8009782:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800978a:	5cd3      	ldrb	r3, [r2, r3]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d107      	bne.n	80097a0 <parseZionEEPROM+0x2fc>
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009794:	3b01      	subs	r3, #1
 8009796:	429a      	cmp	r2, r3
 8009798:	d102      	bne.n	80097a0 <parseZionEEPROM+0x2fc>
					previousByteOfHeader[4] = index;
 800979a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800979c:	61bb      	str	r3, [r7, #24]
 800979e:	e01d      	b.n	80097dc <parseZionEEPROM+0x338>
				}
				else if (((letsParseSomeBytes[index-indexSubtractor] == 0x04)) && (previousByteOfHeader[4] == index -1)){
 80097a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80097a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097a8:	5cd3      	ldrb	r3, [r2, r3]
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d109      	bne.n	80097c2 <parseZionEEPROM+0x31e>
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097b2:	3b01      	subs	r3, #1
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d104      	bne.n	80097c2 <parseZionEEPROM+0x31e>
					previousByteOfHeader[5] = index;
 80097b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ba:	61fb      	str	r3, [r7, #28]
					validHeader=1;
 80097bc:	2301      	movs	r3, #1
 80097be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097c0:	e00c      	b.n	80097dc <parseZionEEPROM+0x338>
				}
				//if things didn't look good, erase it!
				else if (!validHeader){
 80097c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <parseZionEEPROM+0x338>
					memset(previousByteOfHeader,0,sizeof(previousByteOfHeader));
 80097c8:	f107 0308 	add.w	r3, r7, #8
 80097cc:	2250      	movs	r2, #80	; 0x50
 80097ce:	2100      	movs	r1, #0
 80097d0:	4618      	mov	r0, r3
 80097d2:	f009 fe3a 	bl	801344a <memset>
					zeroWas5A=0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}

			}
		}
		index++;
 80097dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097de:	3301      	adds	r3, #1
 80097e0:	67bb      	str	r3, [r7, #120]	; 0x78
	while(!foundTheEnd){
 80097e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f43f aee7 	beq.w	80095ba <parseZionEEPROM+0x116>
	}
	//if the eemprom is initialized
	if(previousByteOfHeader[0]>=0){
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f2c0 8085 	blt.w	80098fe <parseZionEEPROM+0x45a>
		//figure out on which index our data started
		int remainder = previousByteOfHeader[16]%size;
 80097f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80097fc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80097fe:	fb01 f202 	mul.w	r2, r1, r2
 8009802:	1a9b      	subs	r3, r3, r2
 8009804:	65fb      	str	r3, [r7, #92]	; 0x5c
		//if some of our data is split between past read and present read
		if(remainder >((size-1)-4)){
 8009806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009808:	3b05      	subs	r3, #5
 800980a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800980c:	429a      	cmp	r2, r3
 800980e:	dd50      	ble.n	80098b2 <parseZionEEPROM+0x40e>
			//amount of bytes in the previous read
			int bytesInPreviousRead = (size-1) - remainder;
 8009810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009812:	1e5a      	subs	r2, r3, #1
 8009814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	65bb      	str	r3, [r7, #88]	; 0x58
			//grab those bytes and store them in the buffer
			for(x=0;x<bytesInPreviousRead;x++){
 800981a:	2300      	movs	r3, #0
 800981c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009820:	e01c      	b.n	800985c <parseZionEEPROM+0x3b8>
				//deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfFF[0]-5+x];
				deviceHeaderBytes[x] = pastParsedBytes[previousByteOfHeader[16+x]%size];
 8009822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009826:	3310      	adds	r3, #16
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800982e:	4413      	add	r3, r2
 8009830:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009834:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009836:	fb93 f2f2 	sdiv	r2, r3, r2
 800983a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800983c:	fb01 f202 	mul.w	r2, r1, r2
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009844:	5cd3      	ldrb	r3, [r2, r3]
 8009846:	4619      	mov	r1, r3
 8009848:	4a48      	ldr	r2, [pc, #288]	; (800996c <parseZionEEPROM+0x4c8>)
 800984a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800984e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<bytesInPreviousRead;x++){
 8009852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009856:	3301      	adds	r3, #1
 8009858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800985c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009862:	429a      	cmp	r2, r3
 8009864:	dbdd      	blt.n	8009822 <parseZionEEPROM+0x37e>
			}
			//grab the remaining bytes from the present buffer
			for(x=bytesInPreviousRead;x<4;x++){
 8009866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800986c:	e01c      	b.n	80098a8 <parseZionEEPROM+0x404>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 800986e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009872:	3310      	adds	r3, #16
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800987a:	4413      	add	r3, r2
 800987c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8009880:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009882:	fb93 f2f2 	sdiv	r2, r3, r2
 8009886:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009888:	fb01 f202 	mul.w	r2, r1, r2
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009890:	5cd3      	ldrb	r3, [r2, r3]
 8009892:	4619      	mov	r1, r3
 8009894:	4a35      	ldr	r2, [pc, #212]	; (800996c <parseZionEEPROM+0x4c8>)
 8009896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800989a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=bytesInPreviousRead;x<4;x++){
 800989e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098a2:	3301      	adds	r3, #1
 80098a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	ddde      	ble.n	800986e <parseZionEEPROM+0x3ca>
 80098b0:	e052      	b.n	8009958 <parseZionEEPROM+0x4b4>
			}
		}
		else{
			//easy! all bytes are in the recent array. Grab them and store them.
			for(x=0;x<4;x++){
 80098b2:	2300      	movs	r3, #0
 80098b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098b8:	e01c      	b.n	80098f4 <parseZionEEPROM+0x450>
				deviceHeaderBytes[x] = letsParseSomeBytes[previousByteOfHeader[16+x]%size];
 80098ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098be:	3310      	adds	r3, #16
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80098c6:	4413      	add	r3, r2
 80098c8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80098cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80098ce:	fb93 f2f2 	sdiv	r2, r3, r2
 80098d2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80098d4:	fb01 f202 	mul.w	r2, r1, r2
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098dc:	5cd3      	ldrb	r3, [r2, r3]
 80098de:	4619      	mov	r1, r3
 80098e0:	4a22      	ldr	r2, [pc, #136]	; (800996c <parseZionEEPROM+0x4c8>)
 80098e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 80098ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098ee:	3301      	adds	r3, #1
 80098f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098f8:	2b03      	cmp	r3, #3
 80098fa:	ddde      	ble.n	80098ba <parseZionEEPROM+0x416>
 80098fc:	e02c      	b.n	8009958 <parseZionEEPROM+0x4b4>
			}
		}
	}
	else{
		//send invalid data
		if(previousByteOfHeader[0] == -1){
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d114      	bne.n	8009930 <parseZionEEPROM+0x48c>
			//if eeprom is initialized but no device header data
			for(x=0;x<4;x++){
 8009906:	2300      	movs	r3, #0
 8009908:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800990c:	e00b      	b.n	8009926 <parseZionEEPROM+0x482>
				deviceHeaderBytes[x] = -2;
 800990e:	4a17      	ldr	r2, [pc, #92]	; (800996c <parseZionEEPROM+0x4c8>)
 8009910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009914:	f06f 0101 	mvn.w	r1, #1
 8009918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 800991c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009920:	3301      	adds	r3, #1
 8009922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800992a:	2b03      	cmp	r3, #3
 800992c:	ddef      	ble.n	800990e <parseZionEEPROM+0x46a>
 800992e:	e013      	b.n	8009958 <parseZionEEPROM+0x4b4>
			}
		}
		//if eeprom is uninitialized
		else{
			for(x=0;x<4;x++){
 8009930:	2300      	movs	r3, #0
 8009932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009936:	e00b      	b.n	8009950 <parseZionEEPROM+0x4ac>
				deviceHeaderBytes[x] = -1;
 8009938:	4a0c      	ldr	r2, [pc, #48]	; (800996c <parseZionEEPROM+0x4c8>)
 800993a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800993e:	f04f 31ff 	mov.w	r1, #4294967295
 8009942:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<4;x++){
 8009946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994a:	3301      	adds	r3, #1
 800994c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009954:	2b03      	cmp	r3, #3
 8009956:	ddef      	ble.n	8009938 <parseZionEEPROM+0x494>
			}
		}
	}
	deviceHeaderBytes[4] = previousByteOfHeader[0];
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4a04      	ldr	r2, [pc, #16]	; (800996c <parseZionEEPROM+0x4c8>)
 800995c:	6113      	str	r3, [r2, #16]
	return deviceHeaderBytes;
 800995e:	4b03      	ldr	r3, [pc, #12]	; (800996c <parseZionEEPROM+0x4c8>)
 8009960:	46c5      	mov	sp, r8
}
 8009962:	4618      	mov	r0, r3
 8009964:	3790      	adds	r7, #144	; 0x90
 8009966:	46bd      	mov	sp, r7
 8009968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996c:	20003390 	.word	0x20003390

08009970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80099a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009974:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009976:	e003      	b.n	8009980 <LoopCopyDataInit>

08009978 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009978:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800997a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800997c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800997e:	3104      	adds	r1, #4

08009980 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009980:	480b      	ldr	r0, [pc, #44]	; (80099b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009982:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009984:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009986:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009988:	d3f6      	bcc.n	8009978 <CopyDataInit>
  ldr  r2, =_sbss
 800998a:	4a0b      	ldr	r2, [pc, #44]	; (80099b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800998c:	e002      	b.n	8009994 <LoopFillZerobss>

0800998e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800998e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009990:	f842 3b04 	str.w	r3, [r2], #4

08009994 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009994:	4b09      	ldr	r3, [pc, #36]	; (80099bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009996:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009998:	d3f9      	bcc.n	800998e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800999a:	f7ff fd1d 	bl	80093d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800999e:	f009 fd25 	bl	80133ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80099a2:	f7f8 fa1d 	bl	8001de0 <main>
  bx  lr    
 80099a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80099a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80099ac:	08018c18 	.word	0x08018c18
  ldr  r0, =_sdata
 80099b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80099b4:	20000378 	.word	0x20000378
  ldr  r2, =_sbss
 80099b8:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 80099bc:	200311bc 	.word	0x200311bc

080099c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80099c0:	e7fe      	b.n	80099c0 <CAN1_RX0_IRQHandler>

080099c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80099c6:	2003      	movs	r0, #3
 80099c8:	f000 fea3 	bl	800a712 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80099cc:	2000      	movs	r0, #0
 80099ce:	f7ff fac1 	bl	8008f54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80099d2:	f7fe fcbb 	bl	800834c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <HAL_IncTick+0x20>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	461a      	mov	r2, r3
 80099e6:	4b06      	ldr	r3, [pc, #24]	; (8009a00 <HAL_IncTick+0x24>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4413      	add	r3, r2
 80099ec:	4a04      	ldr	r2, [pc, #16]	; (8009a00 <HAL_IncTick+0x24>)
 80099ee:	6013      	str	r3, [r2, #0]
}
 80099f0:	bf00      	nop
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	200001a0 	.word	0x200001a0
 8009a00:	20031174 	.word	0x20031174

08009a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  return uwTick;
 8009a08:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <HAL_GetTick+0x14>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20031174 	.word	0x20031174

08009a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009a24:	f7ff ffee 	bl	8009a04 <HAL_GetTick>
 8009a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d005      	beq.n	8009a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009a36:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <HAL_Delay+0x40>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009a42:	bf00      	nop
 8009a44:	f7ff ffde 	bl	8009a04 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d8f7      	bhi.n	8009a44 <HAL_Delay+0x28>
  {
  }
}
 8009a54:	bf00      	nop
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	200001a0 	.word	0x200001a0

08009a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e031      	b.n	8009ada <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7fe fc8c 	bl	800839c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d116      	bne.n	8009acc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009aa2:	4b10      	ldr	r3, [pc, #64]	; (8009ae4 <HAL_ADC_Init+0x84>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	f043 0202 	orr.w	r2, r3, #2
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fbfc 	bl	800a2ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	f023 0303 	bic.w	r3, r3, #3
 8009ac2:	f043 0201 	orr.w	r2, r3, #1
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	641a      	str	r2, [r3, #64]	; 0x40
 8009aca:	e001      	b.n	8009ad0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	ffffeefd 	.word	0xffffeefd

08009ae8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	2300      	movs	r3, #0
 8009af6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0302 	and.w	r3, r3, #2
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	bf0c      	ite	eq
 8009b06:	2301      	moveq	r3, #1
 8009b08:	2300      	movne	r3, #0
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f003 0320 	and.w	r3, r3, #32
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2301      	moveq	r3, #1
 8009b1e:	2300      	movne	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d049      	beq.n	8009bbe <HAL_ADC_IRQHandler+0xd6>
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d046      	beq.n	8009bbe <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b34:	f003 0310 	and.w	r3, r3, #16
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d105      	bne.n	8009b48 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d12b      	bne.n	8009bae <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d127      	bne.n	8009bae <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d006      	beq.n	8009b7a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d119      	bne.n	8009bae <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 0220 	bic.w	r2, r2, #32
 8009b88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d105      	bne.n	8009bae <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	f043 0201 	orr.w	r2, r3, #1
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7fa fbec 	bl	800438c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f06f 0212 	mvn.w	r2, #18
 8009bbc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0304 	and.w	r3, r3, #4
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	bf0c      	ite	eq
 8009bcc:	2301      	moveq	r3, #1
 8009bce:	2300      	movne	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bde:	2b80      	cmp	r3, #128	; 0x80
 8009be0:	bf0c      	ite	eq
 8009be2:	2301      	moveq	r3, #1
 8009be4:	2300      	movne	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d057      	beq.n	8009ca0 <HAL_ADC_IRQHandler+0x1b8>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d054      	beq.n	8009ca0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	f003 0310 	and.w	r3, r3, #16
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d139      	bne.n	8009c90 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c22:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d006      	beq.n	8009c38 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d12b      	bne.n	8009c90 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d124      	bne.n	8009c90 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d11d      	bne.n	8009c90 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d119      	bne.n	8009c90 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c88:	f043 0201 	orr.w	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fc87 	bl	800a5a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f06f 020c 	mvn.w	r2, #12
 8009c9e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	bf0c      	ite	eq
 8009cae:	2301      	moveq	r3, #1
 8009cb0:	2300      	movne	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc0:	2b40      	cmp	r3, #64	; 0x40
 8009cc2:	bf0c      	ite	eq
 8009cc4:	2301      	moveq	r3, #1
 8009cc6:	2300      	movne	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d017      	beq.n	8009d02 <HAL_ADC_IRQHandler+0x21a>
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d014      	beq.n	8009d02 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10d      	bne.n	8009d02 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f97c 	bl	8009ff0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0201 	mvn.w	r2, #1
 8009d00:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b20      	cmp	r3, #32
 8009d0e:	bf0c      	ite	eq
 8009d10:	2301      	moveq	r3, #1
 8009d12:	2300      	movne	r3, #0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d26:	bf0c      	ite	eq
 8009d28:	2301      	moveq	r3, #1
 8009d2a:	2300      	movne	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d015      	beq.n	8009d62 <HAL_ADC_IRQHandler+0x27a>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d012      	beq.n	8009d62 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d40:	f043 0202 	orr.w	r2, r3, #2
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f06f 0220 	mvn.w	r2, #32
 8009d50:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f956 	bl	800a004 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0220 	mvn.w	r2, #32
 8009d60:	601a      	str	r2, [r3, #0]
  }
}
 8009d62:	bf00      	nop
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <HAL_ADC_Start_DMA+0x1e>
 8009d86:	2302      	movs	r3, #2
 8009d88:	e0c7      	b.n	8009f1a <HAL_ADC_Start_DMA+0x1ae>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d018      	beq.n	8009dd2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689a      	ldr	r2, [r3, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f042 0201 	orr.w	r2, r2, #1
 8009dae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8009db0:	4b5c      	ldr	r3, [pc, #368]	; (8009f24 <HAL_ADC_Start_DMA+0x1b8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a5c      	ldr	r2, [pc, #368]	; (8009f28 <HAL_ADC_Start_DMA+0x1bc>)
 8009db6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dba:	0c9a      	lsrs	r2, r3, #18
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	4413      	add	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009dc4:	e002      	b.n	8009dcc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1f9      	bne.n	8009dc6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	f040 809b 	bne.w	8009f18 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009de6:	4b51      	ldr	r3, [pc, #324]	; (8009f2c <HAL_ADC_Start_DMA+0x1c0>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d007      	beq.n	8009e10 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1c:	d106      	bne.n	8009e2c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e22:	f023 0206 	bic.w	r2, r3, #6
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	645a      	str	r2, [r3, #68]	; 0x44
 8009e2a:	e002      	b.n	8009e32 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3e:	4a3c      	ldr	r2, [pc, #240]	; (8009f30 <HAL_ADC_Start_DMA+0x1c4>)
 8009e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	4a3b      	ldr	r2, [pc, #236]	; (8009f34 <HAL_ADC_Start_DMA+0x1c8>)
 8009e48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	4a3a      	ldr	r2, [pc, #232]	; (8009f38 <HAL_ADC_Start_DMA+0x1cc>)
 8009e50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009e5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689a      	ldr	r2, [r3, #8]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	334c      	adds	r3, #76	; 0x4c
 8009e86:	4619      	mov	r1, r3
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f000 fd24 	bl	800a8d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8009e90:	4b2a      	ldr	r3, [pc, #168]	; (8009f3c <HAL_ADC_Start_DMA+0x1d0>)
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f003 031f 	and.w	r3, r3, #31
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10f      	bne.n	8009ebc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d136      	bne.n	8009f18 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009eb8:	609a      	str	r2, [r3, #8]
 8009eba:	e02d      	b.n	8009f18 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1f      	ldr	r2, [pc, #124]	; (8009f40 <HAL_ADC_Start_DMA+0x1d4>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d10e      	bne.n	8009ee4 <HAL_ADC_Start_DMA+0x178>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d107      	bne.n	8009ee4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009ee2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8009ee4:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <HAL_ADC_Start_DMA+0x1d0>)
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f003 0310 	and.w	r3, r3, #16
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d113      	bne.n	8009f18 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a13      	ldr	r2, [pc, #76]	; (8009f44 <HAL_ADC_Start_DMA+0x1d8>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d10e      	bne.n	8009f18 <HAL_ADC_Start_DMA+0x1ac>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d107      	bne.n	8009f18 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f16:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000198 	.word	0x20000198
 8009f28:	431bde83 	.word	0x431bde83
 8009f2c:	fffff8fe 	.word	0xfffff8fe
 8009f30:	0800a4a1 	.word	0x0800a4a1
 8009f34:	0800a55b 	.word	0x0800a55b
 8009f38:	0800a577 	.word	0x0800a577
 8009f3c:	40012300 	.word	0x40012300
 8009f40:	40012000 	.word	0x40012000
 8009f44:	40012200 	.word	0x40012200

08009f48 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_ADC_Stop_DMA+0x1a>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e036      	b.n	8009fd0 <HAL_ADC_Stop_DMA+0x88>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11e      	bne.n	8009fc6 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f96:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fcfb 	bl	800a998 <HAL_DMA_Abort>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8009fb4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fba:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <HAL_ADC_Stop_DMA+0x90>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	f043 0201 	orr.w	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	ffffeefe 	.word	0xffffeefe

08009fdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d101      	bne.n	800a034 <HAL_ADC_ConfigChannel+0x1c>
 800a030:	2302      	movs	r3, #2
 800a032:	e12a      	b.n	800a28a <HAL_ADC_ConfigChannel+0x272>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b09      	cmp	r3, #9
 800a042:	d93a      	bls.n	800a0ba <HAL_ADC_ConfigChannel+0xa2>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a04c:	d035      	beq.n	800a0ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68d9      	ldr	r1, [r3, #12]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	4613      	mov	r3, r2
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	4413      	add	r3, r2
 800a062:	3b1e      	subs	r3, #30
 800a064:	2207      	movs	r2, #7
 800a066:	fa02 f303 	lsl.w	r3, r2, r3
 800a06a:	43da      	mvns	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	400a      	ands	r2, r1
 800a072:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a87      	ldr	r2, [pc, #540]	; (800a298 <HAL_ADC_ConfigChannel+0x280>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d10a      	bne.n	800a094 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68d9      	ldr	r1, [r3, #12]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	061a      	lsls	r2, r3, #24
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a092:	e035      	b.n	800a100 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68d9      	ldr	r1, [r3, #12]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689a      	ldr	r2, [r3, #8]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	4403      	add	r3, r0
 800a0ac:	3b1e      	subs	r3, #30
 800a0ae:	409a      	lsls	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a0b8:	e022      	b.n	800a100 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6919      	ldr	r1, [r3, #16]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	4413      	add	r3, r2
 800a0ce:	2207      	movs	r2, #7
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	43da      	mvns	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	400a      	ands	r2, r1
 800a0dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	6919      	ldr	r1, [r3, #16]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	005b      	lsls	r3, r3, #1
 800a0f4:	4403      	add	r3, r0
 800a0f6:	409a      	lsls	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	2b06      	cmp	r3, #6
 800a106:	d824      	bhi.n	800a152 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	3b05      	subs	r3, #5
 800a11a:	221f      	movs	r2, #31
 800a11c:	fa02 f303 	lsl.w	r3, r2, r3
 800a120:	43da      	mvns	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	400a      	ands	r2, r1
 800a128:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	4618      	mov	r0, r3
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	4613      	mov	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	3b05      	subs	r3, #5
 800a144:	fa00 f203 	lsl.w	r2, r0, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	430a      	orrs	r2, r1
 800a14e:	635a      	str	r2, [r3, #52]	; 0x34
 800a150:	e04c      	b.n	800a1ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	2b0c      	cmp	r3, #12
 800a158:	d824      	bhi.n	800a1a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	4613      	mov	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	3b23      	subs	r3, #35	; 0x23
 800a16c:	221f      	movs	r2, #31
 800a16e:	fa02 f303 	lsl.w	r3, r2, r3
 800a172:	43da      	mvns	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	400a      	ands	r2, r1
 800a17a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	4618      	mov	r0, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	4613      	mov	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	3b23      	subs	r3, #35	; 0x23
 800a196:	fa00 f203 	lsl.w	r2, r0, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	631a      	str	r2, [r3, #48]	; 0x30
 800a1a2:	e023      	b.n	800a1ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	3b41      	subs	r3, #65	; 0x41
 800a1b6:	221f      	movs	r2, #31
 800a1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1bc:	43da      	mvns	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	400a      	ands	r2, r1
 800a1c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	3b41      	subs	r3, #65	; 0x41
 800a1e0:	fa00 f203 	lsl.w	r2, r0, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a2a      	ldr	r2, [pc, #168]	; (800a29c <HAL_ADC_ConfigChannel+0x284>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d10a      	bne.n	800a20c <HAL_ADC_ConfigChannel+0x1f4>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1fe:	d105      	bne.n	800a20c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800a200:	4b27      	ldr	r3, [pc, #156]	; (800a2a0 <HAL_ADC_ConfigChannel+0x288>)
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	4a26      	ldr	r2, [pc, #152]	; (800a2a0 <HAL_ADC_ConfigChannel+0x288>)
 800a206:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a20a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a22      	ldr	r2, [pc, #136]	; (800a29c <HAL_ADC_ConfigChannel+0x284>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d109      	bne.n	800a22a <HAL_ADC_ConfigChannel+0x212>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b12      	cmp	r3, #18
 800a21c:	d105      	bne.n	800a22a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800a21e:	4b20      	ldr	r3, [pc, #128]	; (800a2a0 <HAL_ADC_ConfigChannel+0x288>)
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	4a1f      	ldr	r2, [pc, #124]	; (800a2a0 <HAL_ADC_ConfigChannel+0x288>)
 800a224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a228:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a1b      	ldr	r2, [pc, #108]	; (800a29c <HAL_ADC_ConfigChannel+0x284>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d125      	bne.n	800a280 <HAL_ADC_ConfigChannel+0x268>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a17      	ldr	r2, [pc, #92]	; (800a298 <HAL_ADC_ConfigChannel+0x280>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <HAL_ADC_ConfigChannel+0x22e>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b11      	cmp	r3, #17
 800a244:	d11c      	bne.n	800a280 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800a246:	4b16      	ldr	r3, [pc, #88]	; (800a2a0 <HAL_ADC_ConfigChannel+0x288>)
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	4a15      	ldr	r2, [pc, #84]	; (800a2a0 <HAL_ADC_ConfigChannel+0x288>)
 800a24c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a250:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a10      	ldr	r2, [pc, #64]	; (800a298 <HAL_ADC_ConfigChannel+0x280>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d111      	bne.n	800a280 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800a25c:	4b11      	ldr	r3, [pc, #68]	; (800a2a4 <HAL_ADC_ConfigChannel+0x28c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a11      	ldr	r2, [pc, #68]	; (800a2a8 <HAL_ADC_ConfigChannel+0x290>)
 800a262:	fba2 2303 	umull	r2, r3, r2, r3
 800a266:	0c9a      	lsrs	r2, r3, #18
 800a268:	4613      	mov	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a272:	e002      	b.n	800a27a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3b01      	subs	r3, #1
 800a278:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1f9      	bne.n	800a274 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	10000012 	.word	0x10000012
 800a29c:	40012000 	.word	0x40012000
 800a2a0:	40012300 	.word	0x40012300
 800a2a4:	20000198 	.word	0x20000198
 800a2a8:	431bde83 	.word	0x431bde83

0800a2ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800a2b4:	4b78      	ldr	r3, [pc, #480]	; (800a498 <ADC_Init+0x1ec>)
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	4a77      	ldr	r2, [pc, #476]	; (800a498 <ADC_Init+0x1ec>)
 800a2ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a2be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800a2c0:	4b75      	ldr	r3, [pc, #468]	; (800a498 <ADC_Init+0x1ec>)
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4973      	ldr	r1, [pc, #460]	; (800a498 <ADC_Init+0x1ec>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6859      	ldr	r1, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	021a      	lsls	r2, r3, #8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6859      	ldr	r1, [r3, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6899      	ldr	r1, [r3, #8]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33a:	4a58      	ldr	r2, [pc, #352]	; (800a49c <ADC_Init+0x1f0>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d022      	beq.n	800a386 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a34e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6899      	ldr	r1, [r3, #8]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	430a      	orrs	r2, r1
 800a360:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6899      	ldr	r1, [r3, #8]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	609a      	str	r2, [r3, #8]
 800a384:	e00f      	b.n	800a3a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689a      	ldr	r2, [r3, #8]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0202 	bic.w	r2, r2, #2
 800a3b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	6899      	ldr	r1, [r3, #8]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	005a      	lsls	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01b      	beq.n	800a40c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a3f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6859      	ldr	r1, [r3, #4]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	3b01      	subs	r3, #1
 800a400:	035a      	lsls	r2, r3, #13
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	e007      	b.n	800a41c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a41a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a42a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	3b01      	subs	r3, #1
 800a438:	051a      	lsls	r2, r3, #20
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6899      	ldr	r1, [r3, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a45e:	025a      	lsls	r2, r3, #9
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689a      	ldr	r2, [r3, #8]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6899      	ldr	r1, [r3, #8]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	029a      	lsls	r2, r3, #10
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	609a      	str	r2, [r3, #8]
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	40012300 	.word	0x40012300
 800a49c:	0f000001 	.word	0x0f000001

0800a4a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d13c      	bne.n	800a534 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d12b      	bne.n	800a52c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d127      	bne.n	800a52c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d006      	beq.n	800a4f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d119      	bne.n	800a52c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f022 0220 	bic.w	r2, r2, #32
 800a506:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d105      	bne.n	800a52c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a524:	f043 0201 	orr.w	r2, r3, #1
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f7f9 ff2d 	bl	800438c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a532:	e00e      	b.n	800a552 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a538:	f003 0310 	and.w	r3, r3, #16
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f7ff fd5f 	bl	800a004 <HAL_ADC_ErrorCallback>
}
 800a546:	e004      	b.n	800a552 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
}
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a566:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff fd37 	bl	8009fdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a582:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2240      	movs	r2, #64	; 0x40
 800a588:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58e:	f043 0204 	orr.w	r2, r3, #4
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff fd34 	bl	800a004 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5c8:	4b0b      	ldr	r3, [pc, #44]	; (800a5f8 <__NVIC_SetPriorityGrouping+0x40>)
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a5e0:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <__NVIC_SetPriorityGrouping+0x44>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a5e6:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <__NVIC_SetPriorityGrouping+0x40>)
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	60d3      	str	r3, [r2, #12]
}
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	e000ed00 	.word	0xe000ed00
 800a5fc:	05fa0000 	.word	0x05fa0000

0800a600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a604:	4b04      	ldr	r3, [pc, #16]	; (800a618 <__NVIC_GetPriorityGrouping+0x18>)
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	0a1b      	lsrs	r3, r3, #8
 800a60a:	f003 0307 	and.w	r3, r3, #7
}
 800a60e:	4618      	mov	r0, r3
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	e000ed00 	.word	0xe000ed00

0800a61c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	db0b      	blt.n	800a646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	f003 021f 	and.w	r2, r3, #31
 800a634:	4907      	ldr	r1, [pc, #28]	; (800a654 <__NVIC_EnableIRQ+0x38>)
 800a636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	2001      	movs	r0, #1
 800a63e:	fa00 f202 	lsl.w	r2, r0, r2
 800a642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	e000e100 	.word	0xe000e100

0800a658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	6039      	str	r1, [r7, #0]
 800a662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	db0a      	blt.n	800a682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	490c      	ldr	r1, [pc, #48]	; (800a6a4 <__NVIC_SetPriority+0x4c>)
 800a672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a676:	0112      	lsls	r2, r2, #4
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	440b      	add	r3, r1
 800a67c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a680:	e00a      	b.n	800a698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	b2da      	uxtb	r2, r3
 800a686:	4908      	ldr	r1, [pc, #32]	; (800a6a8 <__NVIC_SetPriority+0x50>)
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	f003 030f 	and.w	r3, r3, #15
 800a68e:	3b04      	subs	r3, #4
 800a690:	0112      	lsls	r2, r2, #4
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	440b      	add	r3, r1
 800a696:	761a      	strb	r2, [r3, #24]
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	e000e100 	.word	0xe000e100
 800a6a8:	e000ed00 	.word	0xe000ed00

0800a6ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f1c3 0307 	rsb	r3, r3, #7
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	bf28      	it	cs
 800a6ca:	2304      	movcs	r3, #4
 800a6cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	2b06      	cmp	r3, #6
 800a6d4:	d902      	bls.n	800a6dc <NVIC_EncodePriority+0x30>
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	3b03      	subs	r3, #3
 800a6da:	e000      	b.n	800a6de <NVIC_EncodePriority+0x32>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ea:	43da      	mvns	r2, r3
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	401a      	ands	r2, r3
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fe:	43d9      	mvns	r1, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a704:	4313      	orrs	r3, r2
         );
}
 800a706:	4618      	mov	r0, r3
 800a708:	3724      	adds	r7, #36	; 0x24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b082      	sub	sp, #8
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f7ff ff4c 	bl	800a5b8 <__NVIC_SetPriorityGrouping>
}
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	4603      	mov	r3, r0
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
 800a734:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a736:	2300      	movs	r3, #0
 800a738:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a73a:	f7ff ff61 	bl	800a600 <__NVIC_GetPriorityGrouping>
 800a73e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	68b9      	ldr	r1, [r7, #8]
 800a744:	6978      	ldr	r0, [r7, #20]
 800a746:	f7ff ffb1 	bl	800a6ac <NVIC_EncodePriority>
 800a74a:	4602      	mov	r2, r0
 800a74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a750:	4611      	mov	r1, r2
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff ff80 	bl	800a658 <__NVIC_SetPriority>
}
 800a758:	bf00      	nop
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff ff54 	bl	800a61c <__NVIC_EnableIRQ>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a784:	2300      	movs	r3, #0
 800a786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a788:	f7ff f93c 	bl	8009a04 <HAL_GetTick>
 800a78c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e099      	b.n	800a8cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0201 	bic.w	r2, r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7b8:	e00f      	b.n	800a7da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a7ba:	f7ff f923 	bl	8009a04 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b05      	cmp	r3, #5
 800a7c6:	d908      	bls.n	800a7da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e078      	b.n	800a8cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e8      	bne.n	800a7ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	4b38      	ldr	r3, [pc, #224]	; (800a8d4 <HAL_DMA_Init+0x158>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a81e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b04      	cmp	r3, #4
 800a832:	d107      	bne.n	800a844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83c:	4313      	orrs	r3, r2
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4313      	orrs	r3, r2
 800a842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f023 0307 	bic.w	r3, r3, #7
 800a85a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d117      	bne.n	800a89e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00e      	beq.n	800a89e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fb09 	bl	800ae98 <DMA_CheckFifoParam>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d008      	beq.n	800a89e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2240      	movs	r2, #64	; 0x40
 800a890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a89a:	2301      	movs	r3, #1
 800a89c:	e016      	b.n	800a8cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fac0 	bl	800ae2c <DMA_CalcBaseAndBitshift>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b4:	223f      	movs	r2, #63	; 0x3f
 800a8b6:	409a      	lsls	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	e010803f 	.word	0xe010803f

0800a8d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d101      	bne.n	800a8fe <HAL_DMA_Start_IT+0x26>
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	e048      	b.n	800a990 <HAL_DMA_Start_IT+0xb8>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d137      	bne.n	800a982 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2202      	movs	r2, #2
 800a916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 fa52 	bl	800add0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a930:	223f      	movs	r2, #63	; 0x3f
 800a932:	409a      	lsls	r2, r3
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0216 	orr.w	r2, r2, #22
 800a946:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	695a      	ldr	r2, [r3, #20]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a956:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d007      	beq.n	800a970 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f042 0208 	orr.w	r2, r2, #8
 800a96e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f042 0201 	orr.w	r2, r2, #1
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	e005      	b.n	800a98e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a98a:	2302      	movs	r3, #2
 800a98c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a9a6:	f7ff f82d 	bl	8009a04 <HAL_GetTick>
 800a9aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d008      	beq.n	800a9ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2280      	movs	r2, #128	; 0x80
 800a9bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e052      	b.n	800aa70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 0216 	bic.w	r2, r2, #22
 800a9d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	695a      	ldr	r2, [r3, #20]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d103      	bne.n	800a9fa <HAL_DMA_Abort+0x62>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d007      	beq.n	800aa0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0208 	bic.w	r2, r2, #8
 800aa08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f022 0201 	bic.w	r2, r2, #1
 800aa18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa1a:	e013      	b.n	800aa44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa1c:	f7fe fff2 	bl	8009a04 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b05      	cmp	r3, #5
 800aa28:	d90c      	bls.n	800aa44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e015      	b.n	800aa70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e4      	bne.n	800aa1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa56:	223f      	movs	r2, #63	; 0x3f
 800aa58:	409a      	lsls	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d004      	beq.n	800aa96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2280      	movs	r2, #128	; 0x80
 800aa90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e00c      	b.n	800aab0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2205      	movs	r2, #5
 800aa9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f022 0201 	bic.w	r2, r2, #1
 800aaac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800aac8:	4b92      	ldr	r3, [pc, #584]	; (800ad14 <HAL_DMA_IRQHandler+0x258>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a92      	ldr	r2, [pc, #584]	; (800ad18 <HAL_DMA_IRQHandler+0x25c>)
 800aace:	fba2 2303 	umull	r2, r3, r2, r3
 800aad2:	0a9b      	lsrs	r3, r3, #10
 800aad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aae6:	2208      	movs	r2, #8
 800aae8:	409a      	lsls	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	4013      	ands	r3, r2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d01a      	beq.n	800ab28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0304 	and.w	r3, r3, #4
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d013      	beq.n	800ab28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f022 0204 	bic.w	r2, r2, #4
 800ab0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab14:	2208      	movs	r2, #8
 800ab16:	409a      	lsls	r2, r3
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab20:	f043 0201 	orr.w	r2, r3, #1
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	409a      	lsls	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	4013      	ands	r3, r2
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d012      	beq.n	800ab5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	409a      	lsls	r2, r3
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab56:	f043 0202 	orr.w	r2, r3, #2
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab62:	2204      	movs	r2, #4
 800ab64:	409a      	lsls	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d012      	beq.n	800ab94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab80:	2204      	movs	r2, #4
 800ab82:	409a      	lsls	r2, r3
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8c:	f043 0204 	orr.w	r2, r3, #4
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab98:	2210      	movs	r2, #16
 800ab9a:	409a      	lsls	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d043      	beq.n	800ac2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d03c      	beq.n	800ac2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb6:	2210      	movs	r2, #16
 800abb8:	409a      	lsls	r2, r3
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d018      	beq.n	800abfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d108      	bne.n	800abec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d024      	beq.n	800ac2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	4798      	blx	r3
 800abea:	e01f      	b.n	800ac2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01b      	beq.n	800ac2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
 800abfc:	e016      	b.n	800ac2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d107      	bne.n	800ac1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f022 0208 	bic.w	r2, r2, #8
 800ac1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac30:	2220      	movs	r2, #32
 800ac32:	409a      	lsls	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4013      	ands	r3, r2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 808e 	beq.w	800ad5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0310 	and.w	r3, r3, #16
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 8086 	beq.w	800ad5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac52:	2220      	movs	r2, #32
 800ac54:	409a      	lsls	r2, r3
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	d136      	bne.n	800acd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f022 0216 	bic.w	r2, r2, #22
 800ac74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	695a      	ldr	r2, [r3, #20]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d103      	bne.n	800ac96 <HAL_DMA_IRQHandler+0x1da>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d007      	beq.n	800aca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0208 	bic.w	r2, r2, #8
 800aca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acaa:	223f      	movs	r2, #63	; 0x3f
 800acac:	409a      	lsls	r2, r3
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d07d      	beq.n	800adc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	4798      	blx	r3
        }
        return;
 800acd2:	e078      	b.n	800adc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d01c      	beq.n	800ad1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d108      	bne.n	800ad02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d030      	beq.n	800ad5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	4798      	blx	r3
 800ad00:	e02b      	b.n	800ad5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d027      	beq.n	800ad5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	4798      	blx	r3
 800ad12:	e022      	b.n	800ad5a <HAL_DMA_IRQHandler+0x29e>
 800ad14:	20000198 	.word	0x20000198
 800ad18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10f      	bne.n	800ad4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 0210 	bic.w	r2, r2, #16
 800ad38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d032      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d022      	beq.n	800adb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2205      	movs	r2, #5
 800ad72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f022 0201 	bic.w	r2, r2, #1
 800ad84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	60bb      	str	r3, [r7, #8]
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d307      	bcc.n	800ada2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f2      	bne.n	800ad86 <HAL_DMA_IRQHandler+0x2ca>
 800ada0:	e000      	b.n	800ada4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ada2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	4798      	blx	r3
 800adc4:	e000      	b.n	800adc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800adc6:	bf00      	nop
    }
  }
}
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop

0800add0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
 800addc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800adec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	2b40      	cmp	r3, #64	; 0x40
 800adfc:	d108      	bne.n	800ae10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ae0e:	e007      	b.n	800ae20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	60da      	str	r2, [r3, #12]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	3b10      	subs	r3, #16
 800ae3c:	4a13      	ldr	r2, [pc, #76]	; (800ae8c <DMA_CalcBaseAndBitshift+0x60>)
 800ae3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae42:	091b      	lsrs	r3, r3, #4
 800ae44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ae46:	4a12      	ldr	r2, [pc, #72]	; (800ae90 <DMA_CalcBaseAndBitshift+0x64>)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d908      	bls.n	800ae6c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <DMA_CalcBaseAndBitshift+0x68>)
 800ae62:	4013      	ands	r3, r2
 800ae64:	1d1a      	adds	r2, r3, #4
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	659a      	str	r2, [r3, #88]	; 0x58
 800ae6a:	e006      	b.n	800ae7a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	461a      	mov	r2, r3
 800ae72:	4b08      	ldr	r3, [pc, #32]	; (800ae94 <DMA_CalcBaseAndBitshift+0x68>)
 800ae74:	4013      	ands	r3, r2
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	aaaaaaab 	.word	0xaaaaaaab
 800ae90:	080188dc 	.word	0x080188dc
 800ae94:	fffffc00 	.word	0xfffffc00

0800ae98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d11f      	bne.n	800aef2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d855      	bhi.n	800af64 <DMA_CheckFifoParam+0xcc>
 800aeb8:	a201      	add	r2, pc, #4	; (adr r2, 800aec0 <DMA_CheckFifoParam+0x28>)
 800aeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aebe:	bf00      	nop
 800aec0:	0800aed1 	.word	0x0800aed1
 800aec4:	0800aee3 	.word	0x0800aee3
 800aec8:	0800aed1 	.word	0x0800aed1
 800aecc:	0800af65 	.word	0x0800af65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d045      	beq.n	800af68 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aee0:	e042      	b.n	800af68 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aeea:	d13f      	bne.n	800af6c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aef0:	e03c      	b.n	800af6c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aefa:	d121      	bne.n	800af40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d836      	bhi.n	800af70 <DMA_CheckFifoParam+0xd8>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <DMA_CheckFifoParam+0x70>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af1f 	.word	0x0800af1f
 800af10:	0800af19 	.word	0x0800af19
 800af14:	0800af31 	.word	0x0800af31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
      break;
 800af1c:	e02f      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d024      	beq.n	800af74 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af2e:	e021      	b.n	800af74 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af38:	d11e      	bne.n	800af78 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800af3e:	e01b      	b.n	800af78 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d902      	bls.n	800af4c <DMA_CheckFifoParam+0xb4>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d003      	beq.n	800af52 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800af4a:	e018      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	73fb      	strb	r3, [r7, #15]
      break;
 800af50:	e015      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00e      	beq.n	800af7c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]
      break;
 800af62:	e00b      	b.n	800af7c <DMA_CheckFifoParam+0xe4>
      break;
 800af64:	bf00      	nop
 800af66:	e00a      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      break;
 800af68:	bf00      	nop
 800af6a:	e008      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      break;
 800af6c:	bf00      	nop
 800af6e:	e006      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      break;
 800af70:	bf00      	nop
 800af72:	e004      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      break;
 800af74:	bf00      	nop
 800af76:	e002      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      break;   
 800af78:	bf00      	nop
 800af7a:	e000      	b.n	800af7e <DMA_CheckFifoParam+0xe6>
      break;
 800af7c:	bf00      	nop
    }
  } 
  
  return status; 
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b089      	sub	sp, #36	; 0x24
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800af96:	2300      	movs	r3, #0
 800af98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800af9e:	2300      	movs	r3, #0
 800afa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800afa6:	2300      	movs	r3, #0
 800afa8:	61fb      	str	r3, [r7, #28]
 800afaa:	e175      	b.n	800b298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800afac:	2201      	movs	r2, #1
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	fa02 f303 	lsl.w	r3, r2, r3
 800afb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	4013      	ands	r3, r2
 800afbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	f040 8164 	bne.w	800b292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d00b      	beq.n	800afea <HAL_GPIO_Init+0x5e>
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d007      	beq.n	800afea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800afde:	2b11      	cmp	r3, #17
 800afe0:	d003      	beq.n	800afea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	2b12      	cmp	r3, #18
 800afe8:	d130      	bne.n	800b04c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	2203      	movs	r2, #3
 800aff6:	fa02 f303 	lsl.w	r3, r2, r3
 800affa:	43db      	mvns	r3, r3
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	4013      	ands	r3, r2
 800b000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	fa02 f303 	lsl.w	r3, r2, r3
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	4313      	orrs	r3, r2
 800b012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b020:	2201      	movs	r2, #1
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	fa02 f303 	lsl.w	r3, r2, r3
 800b028:	43db      	mvns	r3, r3
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	4013      	ands	r3, r2
 800b02e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	091b      	lsrs	r3, r3, #4
 800b036:	f003 0201 	and.w	r2, r3, #1
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	fa02 f303 	lsl.w	r3, r2, r3
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	4313      	orrs	r3, r2
 800b044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	2203      	movs	r2, #3
 800b058:	fa02 f303 	lsl.w	r3, r2, r3
 800b05c:	43db      	mvns	r3, r3
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	4013      	ands	r3, r2
 800b062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	689a      	ldr	r2, [r3, #8]
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	fa02 f303 	lsl.w	r3, r2, r3
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	4313      	orrs	r3, r2
 800b074:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69ba      	ldr	r2, [r7, #24]
 800b07a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d003      	beq.n	800b08c <HAL_GPIO_Init+0x100>
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	2b12      	cmp	r3, #18
 800b08a:	d123      	bne.n	800b0d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	08da      	lsrs	r2, r3, #3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3208      	adds	r2, #8
 800b094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	f003 0307 	and.w	r3, r3, #7
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	220f      	movs	r2, #15
 800b0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a8:	43db      	mvns	r3, r3
 800b0aa:	69ba      	ldr	r2, [r7, #24]
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	691a      	ldr	r2, [r3, #16]
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	f003 0307 	and.w	r3, r3, #7
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	08da      	lsrs	r2, r3, #3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3208      	adds	r2, #8
 800b0ce:	69b9      	ldr	r1, [r7, #24]
 800b0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	005b      	lsls	r3, r3, #1
 800b0de:	2203      	movs	r2, #3
 800b0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e4:	43db      	mvns	r3, r3
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	f003 0203 	and.w	r2, r3, #3
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69ba      	ldr	r2, [r7, #24]
 800b106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 80be 	beq.w	800b292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b116:	4b65      	ldr	r3, [pc, #404]	; (800b2ac <HAL_GPIO_Init+0x320>)
 800b118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b11a:	4a64      	ldr	r2, [pc, #400]	; (800b2ac <HAL_GPIO_Init+0x320>)
 800b11c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b120:	6453      	str	r3, [r2, #68]	; 0x44
 800b122:	4b62      	ldr	r3, [pc, #392]	; (800b2ac <HAL_GPIO_Init+0x320>)
 800b124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b12e:	4a60      	ldr	r2, [pc, #384]	; (800b2b0 <HAL_GPIO_Init+0x324>)
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	089b      	lsrs	r3, r3, #2
 800b134:	3302      	adds	r3, #2
 800b136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b13a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	220f      	movs	r2, #15
 800b146:	fa02 f303 	lsl.w	r3, r2, r3
 800b14a:	43db      	mvns	r3, r3
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	4013      	ands	r3, r2
 800b150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a57      	ldr	r2, [pc, #348]	; (800b2b4 <HAL_GPIO_Init+0x328>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d037      	beq.n	800b1ca <HAL_GPIO_Init+0x23e>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a56      	ldr	r2, [pc, #344]	; (800b2b8 <HAL_GPIO_Init+0x32c>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d031      	beq.n	800b1c6 <HAL_GPIO_Init+0x23a>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a55      	ldr	r2, [pc, #340]	; (800b2bc <HAL_GPIO_Init+0x330>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d02b      	beq.n	800b1c2 <HAL_GPIO_Init+0x236>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a54      	ldr	r2, [pc, #336]	; (800b2c0 <HAL_GPIO_Init+0x334>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d025      	beq.n	800b1be <HAL_GPIO_Init+0x232>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a53      	ldr	r2, [pc, #332]	; (800b2c4 <HAL_GPIO_Init+0x338>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d01f      	beq.n	800b1ba <HAL_GPIO_Init+0x22e>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a52      	ldr	r2, [pc, #328]	; (800b2c8 <HAL_GPIO_Init+0x33c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d019      	beq.n	800b1b6 <HAL_GPIO_Init+0x22a>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a51      	ldr	r2, [pc, #324]	; (800b2cc <HAL_GPIO_Init+0x340>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d013      	beq.n	800b1b2 <HAL_GPIO_Init+0x226>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a50      	ldr	r2, [pc, #320]	; (800b2d0 <HAL_GPIO_Init+0x344>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d00d      	beq.n	800b1ae <HAL_GPIO_Init+0x222>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a4f      	ldr	r2, [pc, #316]	; (800b2d4 <HAL_GPIO_Init+0x348>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d007      	beq.n	800b1aa <HAL_GPIO_Init+0x21e>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a4e      	ldr	r2, [pc, #312]	; (800b2d8 <HAL_GPIO_Init+0x34c>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d101      	bne.n	800b1a6 <HAL_GPIO_Init+0x21a>
 800b1a2:	2309      	movs	r3, #9
 800b1a4:	e012      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1a6:	230a      	movs	r3, #10
 800b1a8:	e010      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1aa:	2308      	movs	r3, #8
 800b1ac:	e00e      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1ae:	2307      	movs	r3, #7
 800b1b0:	e00c      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1b2:	2306      	movs	r3, #6
 800b1b4:	e00a      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1b6:	2305      	movs	r3, #5
 800b1b8:	e008      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	e006      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e004      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	e002      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <HAL_GPIO_Init+0x240>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	f002 0203 	and.w	r2, r2, #3
 800b1d2:	0092      	lsls	r2, r2, #2
 800b1d4:	4093      	lsls	r3, r2
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b1dc:	4934      	ldr	r1, [pc, #208]	; (800b2b0 <HAL_GPIO_Init+0x324>)
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	089b      	lsrs	r3, r3, #2
 800b1e2:	3302      	adds	r3, #2
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b1ea:	4b3c      	ldr	r3, [pc, #240]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	43db      	mvns	r3, r3
 800b1f4:	69ba      	ldr	r2, [r7, #24]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b20e:	4a33      	ldr	r2, [pc, #204]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b214:	4b31      	ldr	r3, [pc, #196]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	43db      	mvns	r3, r3
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	4013      	ands	r3, r2
 800b222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	4313      	orrs	r3, r2
 800b236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b238:	4a28      	ldr	r2, [pc, #160]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b23e:	4b27      	ldr	r3, [pc, #156]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	43db      	mvns	r3, r3
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	4013      	ands	r3, r2
 800b24c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	4313      	orrs	r3, r2
 800b260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b262:	4a1e      	ldr	r2, [pc, #120]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b268:	4b1c      	ldr	r3, [pc, #112]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	43db      	mvns	r3, r3
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	4013      	ands	r3, r2
 800b276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	4313      	orrs	r3, r2
 800b28a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b28c:	4a13      	ldr	r2, [pc, #76]	; (800b2dc <HAL_GPIO_Init+0x350>)
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	3301      	adds	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	2b0f      	cmp	r3, #15
 800b29c:	f67f ae86 	bls.w	800afac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b2a0:	bf00      	nop
 800b2a2:	3724      	adds	r7, #36	; 0x24
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	40023800 	.word	0x40023800
 800b2b0:	40013800 	.word	0x40013800
 800b2b4:	40020000 	.word	0x40020000
 800b2b8:	40020400 	.word	0x40020400
 800b2bc:	40020800 	.word	0x40020800
 800b2c0:	40020c00 	.word	0x40020c00
 800b2c4:	40021000 	.word	0x40021000
 800b2c8:	40021400 	.word	0x40021400
 800b2cc:	40021800 	.word	0x40021800
 800b2d0:	40021c00 	.word	0x40021c00
 800b2d4:	40022000 	.word	0x40022000
 800b2d8:	40022400 	.word	0x40022400
 800b2dc:	40013c00 	.word	0x40013c00

0800b2e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691a      	ldr	r2, [r3, #16]
 800b2f0:	887b      	ldrh	r3, [r7, #2]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]
 800b2fc:	e001      	b.n	800b302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b302:	7bfb      	ldrb	r3, [r7, #15]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	807b      	strh	r3, [r7, #2]
 800b31c:	4613      	mov	r3, r2
 800b31e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b320:	787b      	ldrb	r3, [r7, #1]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b326:	887a      	ldrh	r2, [r7, #2]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b32c:	e003      	b.n	800b336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b32e:	887b      	ldrh	r3, [r7, #2]
 800b330:	041a      	lsls	r2, r3, #16
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	619a      	str	r2, [r3, #24]
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	460b      	mov	r3, r1
 800b34c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	695a      	ldr	r2, [r3, #20]
 800b352:	887b      	ldrh	r3, [r7, #2]
 800b354:	4013      	ands	r3, r2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d004      	beq.n	800b364 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b35a:	887b      	ldrh	r3, [r7, #2]
 800b35c:	041a      	lsls	r2, r3, #16
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800b362:	e002      	b.n	800b36a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b364:	887a      	ldrh	r2, [r7, #2]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	619a      	str	r2, [r3, #24]
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
	...

0800b378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4603      	mov	r3, r0
 800b380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b382:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b384:	695a      	ldr	r2, [r3, #20]
 800b386:	88fb      	ldrh	r3, [r7, #6]
 800b388:	4013      	ands	r3, r2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d006      	beq.n	800b39c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b38e:	4a05      	ldr	r2, [pc, #20]	; (800b3a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b390:	88fb      	ldrh	r3, [r7, #6]
 800b392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b394:	88fb      	ldrh	r3, [r7, #6]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f806 	bl	800b3a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800b39c:	bf00      	nop
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	40013c00 	.word	0x40013c00

0800b3a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b3b2:	bf00      	nop
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e07f      	b.n	800b4d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7fd f9c4 	bl	8008774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2224      	movs	r2, #36	; 0x24
 800b3f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0201 	bic.w	r2, r2, #1
 800b402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b410:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b420:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d107      	bne.n	800b43a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689a      	ldr	r2, [r3, #8]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b436:	609a      	str	r2, [r3, #8]
 800b438:	e006      	b.n	800b448 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689a      	ldr	r2, [r3, #8]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b446:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d104      	bne.n	800b45a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6859      	ldr	r1, [r3, #4]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	4b1d      	ldr	r3, [pc, #116]	; (800b4dc <HAL_I2C_Init+0x11c>)
 800b466:	430b      	orrs	r3, r1
 800b468:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68da      	ldr	r2, [r3, #12]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b478:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691a      	ldr	r2, [r3, #16]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	ea42 0103 	orr.w	r1, r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	021a      	lsls	r2, r3, #8
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	69d9      	ldr	r1, [r3, #28]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a1a      	ldr	r2, [r3, #32]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	02008000 	.word	0x02008000

0800b4e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	817b      	strh	r3, [r7, #10]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b20      	cmp	r3, #32
 800b4fe:	f040 80da 	bne.w	800b6b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d101      	bne.n	800b510 <HAL_I2C_Master_Transmit+0x30>
 800b50c:	2302      	movs	r3, #2
 800b50e:	e0d3      	b.n	800b6b8 <HAL_I2C_Master_Transmit+0x1d8>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b518:	f7fe fa74 	bl	8009a04 <HAL_GetTick>
 800b51c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	2319      	movs	r3, #25
 800b524:	2201      	movs	r2, #1
 800b526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 fc5c 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e0be      	b.n	800b6b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2221      	movs	r2, #33	; 0x21
 800b53e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2210      	movs	r2, #16
 800b546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	893a      	ldrh	r2, [r7, #8]
 800b55a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b566:	b29b      	uxth	r3, r3
 800b568:	2bff      	cmp	r3, #255	; 0xff
 800b56a:	d90e      	bls.n	800b58a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	22ff      	movs	r2, #255	; 0xff
 800b570:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b576:	b2da      	uxtb	r2, r3
 800b578:	8979      	ldrh	r1, [r7, #10]
 800b57a:	4b51      	ldr	r3, [pc, #324]	; (800b6c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fdbe 	bl	800c104 <I2C_TransferConfig>
 800b588:	e06c      	b.n	800b664 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b58e:	b29a      	uxth	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	8979      	ldrh	r1, [r7, #10]
 800b59c:	4b48      	ldr	r3, [pc, #288]	; (800b6c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 fdad 	bl	800c104 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b5aa:	e05b      	b.n	800b664 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	6a39      	ldr	r1, [r7, #32]
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 fc59 	bl	800be68 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e07b      	b.n	800b6b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	781a      	ldrb	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d034      	beq.n	800b664 <HAL_I2C_Master_Transmit+0x184>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d130      	bne.n	800b664 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	2200      	movs	r2, #0
 800b60a:	2180      	movs	r1, #128	; 0x80
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fbeb 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e04d      	b.n	800b6b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b620:	b29b      	uxth	r3, r3
 800b622:	2bff      	cmp	r3, #255	; 0xff
 800b624:	d90e      	bls.n	800b644 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	22ff      	movs	r2, #255	; 0xff
 800b62a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b630:	b2da      	uxtb	r2, r3
 800b632:	8979      	ldrh	r1, [r7, #10]
 800b634:	2300      	movs	r3, #0
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 fd61 	bl	800c104 <I2C_TransferConfig>
 800b642:	e00f      	b.n	800b664 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b648:	b29a      	uxth	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b652:	b2da      	uxtb	r2, r3
 800b654:	8979      	ldrh	r1, [r7, #10]
 800b656:	2300      	movs	r3, #0
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 fd50 	bl	800c104 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b668:	b29b      	uxth	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d19e      	bne.n	800b5ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	6a39      	ldr	r1, [r7, #32]
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 fc38 	bl	800bee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e01a      	b.n	800b6b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2220      	movs	r2, #32
 800b688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6859      	ldr	r1, [r3, #4]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <HAL_I2C_Master_Transmit+0x1e4>)
 800b696:	400b      	ands	r3, r1
 800b698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e000      	b.n	800b6b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b6b6:	2302      	movs	r3, #2
  }
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	80002000 	.word	0x80002000
 800b6c4:	fe00e800 	.word	0xfe00e800

0800b6c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	607a      	str	r2, [r7, #4]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	817b      	strh	r3, [r7, #10]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b20      	cmp	r3, #32
 800b6e6:	f040 80db 	bne.w	800b8a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_I2C_Master_Receive+0x30>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e0d4      	b.n	800b8a2 <HAL_I2C_Master_Receive+0x1da>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b700:	f7fe f980 	bl	8009a04 <HAL_GetTick>
 800b704:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	2319      	movs	r3, #25
 800b70c:	2201      	movs	r2, #1
 800b70e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fb68 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e0bf      	b.n	800b8a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2222      	movs	r2, #34	; 0x22
 800b726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2210      	movs	r2, #16
 800b72e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	893a      	ldrh	r2, [r7, #8]
 800b742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b74e:	b29b      	uxth	r3, r3
 800b750:	2bff      	cmp	r3, #255	; 0xff
 800b752:	d90e      	bls.n	800b772 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	22ff      	movs	r2, #255	; 0xff
 800b758:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	8979      	ldrh	r1, [r7, #10]
 800b762:	4b52      	ldr	r3, [pc, #328]	; (800b8ac <HAL_I2C_Master_Receive+0x1e4>)
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f000 fcca 	bl	800c104 <I2C_TransferConfig>
 800b770:	e06d      	b.n	800b84e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b780:	b2da      	uxtb	r2, r3
 800b782:	8979      	ldrh	r1, [r7, #10]
 800b784:	4b49      	ldr	r3, [pc, #292]	; (800b8ac <HAL_I2C_Master_Receive+0x1e4>)
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 fcb9 	bl	800c104 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b792:	e05c      	b.n	800b84e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b794:	697a      	ldr	r2, [r7, #20]
 800b796:	6a39      	ldr	r1, [r7, #32]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 fbe1 	bl	800bf60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e07c      	b.n	800b8a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	b2d2      	uxtb	r2, r2
 800b7b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d034      	beq.n	800b84e <HAL_I2C_Master_Receive+0x186>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d130      	bne.n	800b84e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2180      	movs	r1, #128	; 0x80
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f000 faf6 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e04d      	b.n	800b8a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	2bff      	cmp	r3, #255	; 0xff
 800b80e:	d90e      	bls.n	800b82e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	22ff      	movs	r2, #255	; 0xff
 800b814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	8979      	ldrh	r1, [r7, #10]
 800b81e:	2300      	movs	r3, #0
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f000 fc6c 	bl	800c104 <I2C_TransferConfig>
 800b82c:	e00f      	b.n	800b84e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b832:	b29a      	uxth	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	8979      	ldrh	r1, [r7, #10]
 800b840:	2300      	movs	r3, #0
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 fc5b 	bl	800c104 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b852:	b29b      	uxth	r3, r3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d19d      	bne.n	800b794 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	6a39      	ldr	r1, [r7, #32]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fb43 	bl	800bee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e01a      	b.n	800b8a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2220      	movs	r2, #32
 800b872:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6859      	ldr	r1, [r3, #4]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <HAL_I2C_Master_Receive+0x1e8>)
 800b880:	400b      	ands	r3, r1
 800b882:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2220      	movs	r2, #32
 800b888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	e000      	b.n	800b8a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b8a0:	2302      	movs	r3, #2
  }
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	80002400 	.word	0x80002400
 800b8b0:	fe00e800 	.word	0xfe00e800

0800b8b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af02      	add	r7, sp, #8
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	4608      	mov	r0, r1
 800b8be:	4611      	mov	r1, r2
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	817b      	strh	r3, [r7, #10]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	813b      	strh	r3, [r7, #8]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	f040 80fd 	bne.w	800bad6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <HAL_I2C_Mem_Read+0x34>
 800b8e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d105      	bne.n	800b8f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e0f1      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d101      	bne.n	800b902 <HAL_I2C_Mem_Read+0x4e>
 800b8fe:	2302      	movs	r3, #2
 800b900:	e0ea      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b90a:	f7fe f87b 	bl	8009a04 <HAL_GetTick>
 800b90e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	2319      	movs	r3, #25
 800b916:	2201      	movs	r2, #1
 800b918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 fa63 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	e0d5      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2222      	movs	r2, #34	; 0x22
 800b930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2240      	movs	r2, #64	; 0x40
 800b938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6a3a      	ldr	r2, [r7, #32]
 800b946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b94c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b954:	88f8      	ldrh	r0, [r7, #6]
 800b956:	893a      	ldrh	r2, [r7, #8]
 800b958:	8979      	ldrh	r1, [r7, #10]
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	9301      	str	r3, [sp, #4]
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	4603      	mov	r3, r0
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 f9c7 	bl	800bcf8 <I2C_RequestMemoryRead>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e0ad      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b980:	b29b      	uxth	r3, r3
 800b982:	2bff      	cmp	r3, #255	; 0xff
 800b984:	d90e      	bls.n	800b9a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	22ff      	movs	r2, #255	; 0xff
 800b98a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b990:	b2da      	uxtb	r2, r3
 800b992:	8979      	ldrh	r1, [r7, #10]
 800b994:	4b52      	ldr	r3, [pc, #328]	; (800bae0 <HAL_I2C_Mem_Read+0x22c>)
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 fbb1 	bl	800c104 <I2C_TransferConfig>
 800b9a2:	e00f      	b.n	800b9c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	8979      	ldrh	r1, [r7, #10]
 800b9b6:	4b4a      	ldr	r3, [pc, #296]	; (800bae0 <HAL_I2C_Mem_Read+0x22c>)
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f000 fba0 	bl	800c104 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	2104      	movs	r1, #4
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 fa0a 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e07c      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	b2d2      	uxtb	r2, r2
 800b9ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d034      	beq.n	800ba84 <HAL_I2C_Mem_Read+0x1d0>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d130      	bne.n	800ba84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	2200      	movs	r2, #0
 800ba2a:	2180      	movs	r1, #128	; 0x80
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f000 f9db 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e04d      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	2bff      	cmp	r3, #255	; 0xff
 800ba44:	d90e      	bls.n	800ba64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	22ff      	movs	r2, #255	; 0xff
 800ba4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	8979      	ldrh	r1, [r7, #10]
 800ba54:	2300      	movs	r3, #0
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f000 fb51 	bl	800c104 <I2C_TransferConfig>
 800ba62:	e00f      	b.n	800ba84 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba72:	b2da      	uxtb	r2, r3
 800ba74:	8979      	ldrh	r1, [r7, #10]
 800ba76:	2300      	movs	r3, #0
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f000 fb40 	bl	800c104 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d19a      	bne.n	800b9c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f000 fa28 	bl	800bee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e01a      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2220      	movs	r2, #32
 800baa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6859      	ldr	r1, [r3, #4]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <HAL_I2C_Mem_Read+0x230>)
 800bab6:	400b      	ands	r3, r1
 800bab8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2220      	movs	r2, #32
 800babe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	e000      	b.n	800bad8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bad6:	2302      	movs	r3, #2
  }
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	80002400 	.word	0x80002400
 800bae4:	fe00e800 	.word	0xfe00e800

0800bae8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08a      	sub	sp, #40	; 0x28
 800baec:	af02      	add	r7, sp, #8
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	607a      	str	r2, [r7, #4]
 800baf2:	603b      	str	r3, [r7, #0]
 800baf4:	460b      	mov	r3, r1
 800baf6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	f040 80ef 	bne.w	800bce8 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb18:	d101      	bne.n	800bb1e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	e0e5      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d101      	bne.n	800bb2c <HAL_I2C_IsDeviceReady+0x44>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	e0de      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2224      	movs	r2, #36	; 0x24
 800bb38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d105      	bne.n	800bb56 <HAL_I2C_IsDeviceReady+0x6e>
 800bb4a:	897b      	ldrh	r3, [r7, #10]
 800bb4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bb50:	4b68      	ldr	r3, [pc, #416]	; (800bcf4 <HAL_I2C_IsDeviceReady+0x20c>)
 800bb52:	4313      	orrs	r3, r2
 800bb54:	e004      	b.n	800bb60 <HAL_I2C_IsDeviceReady+0x78>
 800bb56:	897b      	ldrh	r3, [r7, #10]
 800bb58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb5c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	6812      	ldr	r2, [r2, #0]
 800bb64:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800bb66:	f7fd ff4d 	bl	8009a04 <HAL_GetTick>
 800bb6a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	f003 0320 	and.w	r3, r3, #32
 800bb76:	2b20      	cmp	r3, #32
 800bb78:	bf0c      	ite	eq
 800bb7a:	2301      	moveq	r3, #1
 800bb7c:	2300      	movne	r3, #0
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	f003 0310 	and.w	r3, r3, #16
 800bb8c:	2b10      	cmp	r3, #16
 800bb8e:	bf0c      	ite	eq
 800bb90:	2301      	moveq	r3, #1
 800bb92:	2300      	movne	r3, #0
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bb98:	e034      	b.n	800bc04 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba0:	d01a      	beq.n	800bbd8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bba2:	f7fd ff2f 	bl	8009a04 <HAL_GetTick>
 800bba6:	4602      	mov	r2, r0
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d302      	bcc.n	800bbb8 <HAL_I2C_IsDeviceReady+0xd0>
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10f      	bne.n	800bbd8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc4:	f043 0220 	orr.w	r2, r3, #32
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e088      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	f003 0320 	and.w	r3, r3, #32
 800bbe2:	2b20      	cmp	r3, #32
 800bbe4:	bf0c      	ite	eq
 800bbe6:	2301      	moveq	r3, #1
 800bbe8:	2300      	movne	r3, #0
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	f003 0310 	and.w	r3, r3, #16
 800bbf8:	2b10      	cmp	r3, #16
 800bbfa:	bf0c      	ite	eq
 800bbfc:	2301      	moveq	r3, #1
 800bbfe:	2300      	movne	r3, #0
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bc04:	7ffb      	ldrb	r3, [r7, #31]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <HAL_I2C_IsDeviceReady+0x128>
 800bc0a:	7fbb      	ldrb	r3, [r7, #30]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0c4      	beq.n	800bb9a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	f003 0310 	and.w	r3, r3, #16
 800bc1a:	2b10      	cmp	r3, #16
 800bc1c:	d01a      	beq.n	800bc54 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2200      	movs	r2, #0
 800bc26:	2120      	movs	r1, #32
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 f8dd 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e058      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2220      	movs	r2, #32
 800bc44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	e04a      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2120      	movs	r1, #32
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 f8c2 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e03d      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2210      	movs	r2, #16
 800bc74:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2220      	movs	r2, #32
 800bc7c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d118      	bne.n	800bcb8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc94:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2120      	movs	r1, #32
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 f8a1 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d001      	beq.n	800bcb0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e01c      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2220      	movs	r2, #32
 800bcb6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	f63f af3d 	bhi.w	800bb42 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd4:	f043 0220 	orr.w	r2, r3, #32
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e000      	b.n	800bcea <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800bce8:	2302      	movs	r3, #2
  }
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3720      	adds	r7, #32
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	02002000 	.word	0x02002000

0800bcf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af02      	add	r7, sp, #8
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	4608      	mov	r0, r1
 800bd02:	4611      	mov	r1, r2
 800bd04:	461a      	mov	r2, r3
 800bd06:	4603      	mov	r3, r0
 800bd08:	817b      	strh	r3, [r7, #10]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	813b      	strh	r3, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bd12:	88fb      	ldrh	r3, [r7, #6]
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	8979      	ldrh	r1, [r7, #10]
 800bd18:	4b20      	ldr	r3, [pc, #128]	; (800bd9c <I2C_RequestMemoryRead+0xa4>)
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 f9f0 	bl	800c104 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd24:	69fa      	ldr	r2, [r7, #28]
 800bd26:	69b9      	ldr	r1, [r7, #24]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 f89d 	bl	800be68 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e02c      	b.n	800bd92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d105      	bne.n	800bd4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd3e:	893b      	ldrh	r3, [r7, #8]
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	629a      	str	r2, [r3, #40]	; 0x28
 800bd48:	e015      	b.n	800bd76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd4a:	893b      	ldrh	r3, [r7, #8]
 800bd4c:	0a1b      	lsrs	r3, r3, #8
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd58:	69fa      	ldr	r2, [r7, #28]
 800bd5a:	69b9      	ldr	r1, [r7, #24]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 f883 	bl	800be68 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e012      	b.n	800bd92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd6c:	893b      	ldrh	r3, [r7, #8]
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2140      	movs	r1, #64	; 0x40
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 f831 	bl	800bde8 <I2C_WaitOnFlagUntilTimeout>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e000      	b.n	800bd92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	80002000 	.word	0x80002000

0800bda0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	f003 0302 	and.w	r3, r3, #2
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d103      	bne.n	800bdbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d007      	beq.n	800bddc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699a      	ldr	r2, [r3, #24]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f042 0201 	orr.w	r2, r2, #1
 800bdda:	619a      	str	r2, [r3, #24]
  }
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdf8:	e022      	b.n	800be40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be00:	d01e      	beq.n	800be40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be02:	f7fd fdff 	bl	8009a04 <HAL_GetTick>
 800be06:	4602      	mov	r2, r0
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d302      	bcc.n	800be18 <I2C_WaitOnFlagUntilTimeout+0x30>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d113      	bne.n	800be40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1c:	f043 0220 	orr.w	r2, r3, #32
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2220      	movs	r2, #32
 800be28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	e00f      	b.n	800be60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	699a      	ldr	r2, [r3, #24]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	4013      	ands	r3, r2
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	bf0c      	ite	eq
 800be50:	2301      	moveq	r3, #1
 800be52:	2300      	movne	r3, #0
 800be54:	b2db      	uxtb	r3, r3
 800be56:	461a      	mov	r2, r3
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d0cd      	beq.n	800bdfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800be74:	e02c      	b.n	800bed0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 f8dc 	bl	800c038 <I2C_IsAcknowledgeFailed>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e02a      	b.n	800bee0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be90:	d01e      	beq.n	800bed0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be92:	f7fd fdb7 	bl	8009a04 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d302      	bcc.n	800bea8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d113      	bne.n	800bed0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beac:	f043 0220 	orr.w	r2, r3, #32
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2220      	movs	r2, #32
 800beb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e007      	b.n	800bee0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	f003 0302 	and.w	r3, r3, #2
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d1cb      	bne.n	800be76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bef4:	e028      	b.n	800bf48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	68b9      	ldr	r1, [r7, #8]
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 f89c 	bl	800c038 <I2C_IsAcknowledgeFailed>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e026      	b.n	800bf58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf0a:	f7fd fd7b 	bl	8009a04 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d302      	bcc.n	800bf20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d113      	bne.n	800bf48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf24:	f043 0220 	orr.w	r2, r3, #32
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2220      	movs	r2, #32
 800bf30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e007      	b.n	800bf58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	f003 0320 	and.w	r3, r3, #32
 800bf52:	2b20      	cmp	r3, #32
 800bf54:	d1cf      	bne.n	800bef6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bf6c:	e055      	b.n	800c01a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f860 	bl	800c038 <I2C_IsAcknowledgeFailed>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e053      	b.n	800c02a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	f003 0320 	and.w	r3, r3, #32
 800bf8c:	2b20      	cmp	r3, #32
 800bf8e:	d129      	bne.n	800bfe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	f003 0304 	and.w	r3, r3, #4
 800bf9a:	2b04      	cmp	r3, #4
 800bf9c:	d105      	bne.n	800bfaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e03f      	b.n	800c02a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6859      	ldr	r1, [r3, #4]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	4b1d      	ldr	r3, [pc, #116]	; (800c034 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bfbe:	400b      	ands	r3, r1
 800bfc0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2220      	movs	r2, #32
 800bfcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e022      	b.n	800c02a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfe4:	f7fd fd0e 	bl	8009a04 <HAL_GetTick>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d302      	bcc.n	800bffa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10f      	bne.n	800c01a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffe:	f043 0220 	orr.w	r2, r3, #32
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2220      	movs	r2, #32
 800c00a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e007      	b.n	800c02a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	f003 0304 	and.w	r3, r3, #4
 800c024:	2b04      	cmp	r3, #4
 800c026:	d1a2      	bne.n	800bf6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	fe00e800 	.word	0xfe00e800

0800c038 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	f003 0310 	and.w	r3, r3, #16
 800c04e:	2b10      	cmp	r3, #16
 800c050:	d151      	bne.n	800c0f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c052:	e022      	b.n	800c09a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d01e      	beq.n	800c09a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c05c:	f7fd fcd2 	bl	8009a04 <HAL_GetTick>
 800c060:	4602      	mov	r2, r0
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d302      	bcc.n	800c072 <I2C_IsAcknowledgeFailed+0x3a>
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d113      	bne.n	800c09a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c076:	f043 0220 	orr.w	r2, r3, #32
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2220      	movs	r2, #32
 800c082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e02e      	b.n	800c0f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	f003 0320 	and.w	r3, r3, #32
 800c0a4:	2b20      	cmp	r3, #32
 800c0a6:	d1d5      	bne.n	800c054 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2210      	movs	r2, #16
 800c0ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f7ff fe71 	bl	800bda0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6859      	ldr	r1, [r3, #4]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <I2C_IsAcknowledgeFailed+0xc8>)
 800c0ca:	400b      	ands	r3, r1
 800c0cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d2:	f043 0204 	orr.w	r2, r3, #4
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e000      	b.n	800c0f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	fe00e800 	.word	0xfe00e800

0800c104 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	607b      	str	r3, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	817b      	strh	r3, [r7, #10]
 800c112:	4613      	mov	r3, r2
 800c114:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	0d5b      	lsrs	r3, r3, #21
 800c120:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c124:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <I2C_TransferConfig+0x58>)
 800c126:	430b      	orrs	r3, r1
 800c128:	43db      	mvns	r3, r3
 800c12a:	ea02 0103 	and.w	r1, r2, r3
 800c12e:	897b      	ldrh	r3, [r7, #10]
 800c130:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c134:	7a7b      	ldrb	r3, [r7, #9]
 800c136:	041b      	lsls	r3, r3, #16
 800c138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c13c:	431a      	orrs	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	431a      	orrs	r2, r3
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	431a      	orrs	r2, r3
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	430a      	orrs	r2, r1
 800c14c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c14e:	bf00      	nop
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	03ff63ff 	.word	0x03ff63ff

0800c160 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b20      	cmp	r3, #32
 800c174:	d138      	bne.n	800c1e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d101      	bne.n	800c184 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c180:	2302      	movs	r3, #2
 800c182:	e032      	b.n	800c1ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2224      	movs	r2, #36	; 0x24
 800c190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0201 	bic.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c1b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6819      	ldr	r1, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f042 0201 	orr.w	r2, r2, #1
 800c1d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2220      	movs	r2, #32
 800c1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	e000      	b.n	800c1ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c1e8:	2302      	movs	r3, #2
  }
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b085      	sub	sp, #20
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c206:	b2db      	uxtb	r3, r3
 800c208:	2b20      	cmp	r3, #32
 800c20a:	d139      	bne.n	800c280 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c216:	2302      	movs	r3, #2
 800c218:	e033      	b.n	800c282 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2224      	movs	r2, #36	; 0x24
 800c226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f022 0201 	bic.w	r2, r2, #1
 800c238:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c248:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	021b      	lsls	r3, r3, #8
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	4313      	orrs	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f042 0201 	orr.w	r2, r2, #1
 800c26a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2220      	movs	r2, #32
 800c270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	e000      	b.n	800c282 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c280:	2302      	movs	r3, #2
  }
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
	...

0800c290 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c298:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c29c:	4a0a      	ldr	r2, [pc, #40]	; (800c2c8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c29e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2a2:	6453      	str	r3, [r2, #68]	; 0x44
 800c2a4:	4b08      	ldr	r3, [pc, #32]	; (800c2c8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800c2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 800c2b0:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	4905      	ldr	r1, [pc, #20]	; (800c2cc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	604b      	str	r3, [r1, #4]
}
 800c2bc:	bf00      	nop
 800c2be:	3714      	adds	r7, #20
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	40023800 	.word	0x40023800
 800c2cc:	40013800 	.word	0x40013800

0800c2d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d2:	b08f      	sub	sp, #60	; 0x3c
 800c2d4:	af0a      	add	r7, sp, #40	; 0x28
 800c2d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e116      	b.n	800c510 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d106      	bne.n	800c302 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7fc fddb 	bl	8008eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2203      	movs	r2, #3
 800c306:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c312:	2b00      	cmp	r3, #0
 800c314:	d102      	bne.n	800c31c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4618      	mov	r0, r3
 800c322:	f003 fd61 	bl	800fde8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	603b      	str	r3, [r7, #0]
 800c32c:	687e      	ldr	r6, [r7, #4]
 800c32e:	466d      	mov	r5, sp
 800c330:	f106 0410 	add.w	r4, r6, #16
 800c334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c33a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c33c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c340:	e885 0003 	stmia.w	r5, {r0, r1}
 800c344:	1d33      	adds	r3, r6, #4
 800c346:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c348:	6838      	ldr	r0, [r7, #0]
 800c34a:	f003 fcf5 	bl	800fd38 <USB_CoreInit>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2202      	movs	r2, #2
 800c358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e0d7      	b.n	800c510 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2100      	movs	r1, #0
 800c366:	4618      	mov	r0, r3
 800c368:	f003 fd4f 	bl	800fe0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
 800c370:	e04a      	b.n	800c408 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c372:	7bfa      	ldrb	r2, [r7, #15]
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4613      	mov	r3, r2
 800c378:	00db      	lsls	r3, r3, #3
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	333d      	adds	r3, #61	; 0x3d
 800c382:	2201      	movs	r2, #1
 800c384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c386:	7bfa      	ldrb	r2, [r7, #15]
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	4613      	mov	r3, r2
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	1a9b      	subs	r3, r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	440b      	add	r3, r1
 800c394:	333c      	adds	r3, #60	; 0x3c
 800c396:	7bfa      	ldrb	r2, [r7, #15]
 800c398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c39a:	7bfa      	ldrb	r2, [r7, #15]
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	b298      	uxth	r0, r3
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	1a9b      	subs	r3, r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	3342      	adds	r3, #66	; 0x42
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c3b2:	7bfa      	ldrb	r2, [r7, #15]
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	00db      	lsls	r3, r3, #3
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	440b      	add	r3, r1
 800c3c0:	333f      	adds	r3, #63	; 0x3f
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c3c6:	7bfa      	ldrb	r2, [r7, #15]
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	1a9b      	subs	r3, r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	440b      	add	r3, r1
 800c3d4:	3344      	adds	r3, #68	; 0x44
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c3da:	7bfa      	ldrb	r2, [r7, #15]
 800c3dc:	6879      	ldr	r1, [r7, #4]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	440b      	add	r3, r1
 800c3e8:	3348      	adds	r3, #72	; 0x48
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c3ee:	7bfa      	ldrb	r2, [r7, #15]
 800c3f0:	6879      	ldr	r1, [r7, #4]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	00db      	lsls	r3, r3, #3
 800c3f6:	1a9b      	subs	r3, r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	440b      	add	r3, r1
 800c3fc:	3350      	adds	r3, #80	; 0x50
 800c3fe:	2200      	movs	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	3301      	adds	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]
 800c408:	7bfa      	ldrb	r2, [r7, #15]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d3af      	bcc.n	800c372 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
 800c416:	e044      	b.n	800c4a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c418:	7bfa      	ldrb	r2, [r7, #15]
 800c41a:	6879      	ldr	r1, [r7, #4]
 800c41c:	4613      	mov	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	1a9b      	subs	r3, r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	440b      	add	r3, r1
 800c426:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c42a:	2200      	movs	r2, #0
 800c42c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c42e:	7bfa      	ldrb	r2, [r7, #15]
 800c430:	6879      	ldr	r1, [r7, #4]
 800c432:	4613      	mov	r3, r2
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	440b      	add	r3, r1
 800c43c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c440:	7bfa      	ldrb	r2, [r7, #15]
 800c442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c444:	7bfa      	ldrb	r2, [r7, #15]
 800c446:	6879      	ldr	r1, [r7, #4]
 800c448:	4613      	mov	r3, r2
 800c44a:	00db      	lsls	r3, r3, #3
 800c44c:	1a9b      	subs	r3, r3, r2
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	440b      	add	r3, r1
 800c452:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c456:	2200      	movs	r2, #0
 800c458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c45a:	7bfa      	ldrb	r2, [r7, #15]
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	4613      	mov	r3, r2
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	1a9b      	subs	r3, r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	440b      	add	r3, r1
 800c468:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c46c:	2200      	movs	r2, #0
 800c46e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c470:	7bfa      	ldrb	r2, [r7, #15]
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	4613      	mov	r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	1a9b      	subs	r3, r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c486:	7bfa      	ldrb	r2, [r7, #15]
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	4613      	mov	r3, r2
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	1a9b      	subs	r3, r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	440b      	add	r3, r1
 800c494:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	73fb      	strb	r3, [r7, #15]
 800c4a2:	7bfa      	ldrb	r2, [r7, #15]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d3b5      	bcc.n	800c418 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	603b      	str	r3, [r7, #0]
 800c4b2:	687e      	ldr	r6, [r7, #4]
 800c4b4:	466d      	mov	r5, sp
 800c4b6:	f106 0410 	add.w	r4, r6, #16
 800c4ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c4be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c4c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c4c6:	e885 0003 	stmia.w	r5, {r0, r1}
 800c4ca:	1d33      	adds	r3, r6, #4
 800c4cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c4ce:	6838      	ldr	r0, [r7, #0]
 800c4d0:	f003 fcc6 	bl	800fe60 <USB_DevInit>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d005      	beq.n	800c4e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2202      	movs	r2, #2
 800c4de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e014      	b.n	800c510 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d102      	bne.n	800c504 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f80a 	bl	800c518 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4618      	mov	r0, r3
 800c50a:	f003 fe78 	bl	80101fe <USB_DevDisconnect>

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c518:	b480      	push	{r7}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c546:	4b05      	ldr	r3, [pc, #20]	; (800c55c <HAL_PCDEx_ActivateLPM+0x44>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	10000003 	.word	0x10000003

0800c560 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c560:	b480      	push	{r7}
 800c562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c564:	4b05      	ldr	r3, [pc, #20]	; (800c57c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a04      	ldr	r2, [pc, #16]	; (800c57c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c56a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c56e:	6013      	str	r3, [r2, #0]
}
 800c570:	bf00      	nop
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	40007000 	.word	0x40007000

0800c580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c588:	2300      	movs	r3, #0
 800c58a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e29b      	b.n	800cace <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 8087 	beq.w	800c6b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c5a4:	4b96      	ldr	r3, [pc, #600]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f003 030c 	and.w	r3, r3, #12
 800c5ac:	2b04      	cmp	r3, #4
 800c5ae:	d00c      	beq.n	800c5ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c5b0:	4b93      	ldr	r3, [pc, #588]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f003 030c 	and.w	r3, r3, #12
 800c5b8:	2b08      	cmp	r3, #8
 800c5ba:	d112      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x62>
 800c5bc:	4b90      	ldr	r3, [pc, #576]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5c8:	d10b      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5ca:	4b8d      	ldr	r3, [pc, #564]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d06c      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x130>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d168      	bne.n	800c6b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e275      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5ea:	d106      	bne.n	800c5fa <HAL_RCC_OscConfig+0x7a>
 800c5ec:	4b84      	ldr	r3, [pc, #528]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a83      	ldr	r2, [pc, #524]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c5f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	e02e      	b.n	800c658 <HAL_RCC_OscConfig+0xd8>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10c      	bne.n	800c61c <HAL_RCC_OscConfig+0x9c>
 800c602:	4b7f      	ldr	r3, [pc, #508]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a7e      	ldr	r2, [pc, #504]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	4b7c      	ldr	r3, [pc, #496]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a7b      	ldr	r2, [pc, #492]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c618:	6013      	str	r3, [r2, #0]
 800c61a:	e01d      	b.n	800c658 <HAL_RCC_OscConfig+0xd8>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c624:	d10c      	bne.n	800c640 <HAL_RCC_OscConfig+0xc0>
 800c626:	4b76      	ldr	r3, [pc, #472]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a75      	ldr	r2, [pc, #468]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c62c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	4b73      	ldr	r3, [pc, #460]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a72      	ldr	r2, [pc, #456]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c63c:	6013      	str	r3, [r2, #0]
 800c63e:	e00b      	b.n	800c658 <HAL_RCC_OscConfig+0xd8>
 800c640:	4b6f      	ldr	r3, [pc, #444]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a6e      	ldr	r2, [pc, #440]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	4b6c      	ldr	r3, [pc, #432]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a6b      	ldr	r2, [pc, #428]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d013      	beq.n	800c688 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c660:	f7fd f9d0 	bl	8009a04 <HAL_GetTick>
 800c664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c668:	f7fd f9cc 	bl	8009a04 <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b64      	cmp	r3, #100	; 0x64
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e229      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c67a:	4b61      	ldr	r3, [pc, #388]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d0f0      	beq.n	800c668 <HAL_RCC_OscConfig+0xe8>
 800c686:	e014      	b.n	800c6b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c688:	f7fd f9bc 	bl	8009a04 <HAL_GetTick>
 800c68c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c68e:	e008      	b.n	800c6a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c690:	f7fd f9b8 	bl	8009a04 <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	2b64      	cmp	r3, #100	; 0x64
 800c69c:	d901      	bls.n	800c6a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e215      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c6a2:	4b57      	ldr	r3, [pc, #348]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f0      	bne.n	800c690 <HAL_RCC_OscConfig+0x110>
 800c6ae:	e000      	b.n	800c6b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0302 	and.w	r3, r3, #2
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d069      	beq.n	800c792 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c6be:	4b50      	ldr	r3, [pc, #320]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f003 030c 	and.w	r3, r3, #12
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00b      	beq.n	800c6e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c6ca:	4b4d      	ldr	r3, [pc, #308]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f003 030c 	and.w	r3, r3, #12
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d11c      	bne.n	800c710 <HAL_RCC_OscConfig+0x190>
 800c6d6:	4b4a      	ldr	r3, [pc, #296]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d116      	bne.n	800c710 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6e2:	4b47      	ldr	r3, [pc, #284]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0302 	and.w	r3, r3, #2
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d005      	beq.n	800c6fa <HAL_RCC_OscConfig+0x17a>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d001      	beq.n	800c6fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e1e9      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6fa:	4b41      	ldr	r3, [pc, #260]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	493d      	ldr	r1, [pc, #244]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c70a:	4313      	orrs	r3, r2
 800c70c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c70e:	e040      	b.n	800c792 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d023      	beq.n	800c760 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c718:	4b39      	ldr	r3, [pc, #228]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a38      	ldr	r2, [pc, #224]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c71e:	f043 0301 	orr.w	r3, r3, #1
 800c722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c724:	f7fd f96e 	bl	8009a04 <HAL_GetTick>
 800c728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c72a:	e008      	b.n	800c73e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c72c:	f7fd f96a 	bl	8009a04 <HAL_GetTick>
 800c730:	4602      	mov	r2, r0
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	2b02      	cmp	r3, #2
 800c738:	d901      	bls.n	800c73e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e1c7      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c73e:	4b30      	ldr	r3, [pc, #192]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f003 0302 	and.w	r3, r3, #2
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0f0      	beq.n	800c72c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c74a:	4b2d      	ldr	r3, [pc, #180]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	4929      	ldr	r1, [pc, #164]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c75a:	4313      	orrs	r3, r2
 800c75c:	600b      	str	r3, [r1, #0]
 800c75e:	e018      	b.n	800c792 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c760:	4b27      	ldr	r3, [pc, #156]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a26      	ldr	r2, [pc, #152]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c766:	f023 0301 	bic.w	r3, r3, #1
 800c76a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c76c:	f7fd f94a 	bl	8009a04 <HAL_GetTick>
 800c770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c772:	e008      	b.n	800c786 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c774:	f7fd f946 	bl	8009a04 <HAL_GetTick>
 800c778:	4602      	mov	r2, r0
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d901      	bls.n	800c786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c782:	2303      	movs	r3, #3
 800c784:	e1a3      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c786:	4b1e      	ldr	r3, [pc, #120]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 0302 	and.w	r3, r3, #2
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1f0      	bne.n	800c774 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 0308 	and.w	r3, r3, #8
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d038      	beq.n	800c810 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d019      	beq.n	800c7da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c7a6:	4b16      	ldr	r3, [pc, #88]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c7a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7aa:	4a15      	ldr	r2, [pc, #84]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c7ac:	f043 0301 	orr.w	r3, r3, #1
 800c7b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7b2:	f7fd f927 	bl	8009a04 <HAL_GetTick>
 800c7b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7b8:	e008      	b.n	800c7cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7ba:	f7fd f923 	bl	8009a04 <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d901      	bls.n	800c7cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e180      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7cc:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c7ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d0f0      	beq.n	800c7ba <HAL_RCC_OscConfig+0x23a>
 800c7d8:	e01a      	b.n	800c810 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7da:	4b09      	ldr	r3, [pc, #36]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7de:	4a08      	ldr	r2, [pc, #32]	; (800c800 <HAL_RCC_OscConfig+0x280>)
 800c7e0:	f023 0301 	bic.w	r3, r3, #1
 800c7e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7e6:	f7fd f90d 	bl	8009a04 <HAL_GetTick>
 800c7ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7ec:	e00a      	b.n	800c804 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7ee:	f7fd f909 	bl	8009a04 <HAL_GetTick>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d903      	bls.n	800c804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e166      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
 800c800:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c804:	4b92      	ldr	r3, [pc, #584]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c808:	f003 0302 	and.w	r3, r3, #2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1ee      	bne.n	800c7ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0304 	and.w	r3, r3, #4
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 80a4 	beq.w	800c966 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c81e:	4b8c      	ldr	r3, [pc, #560]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10d      	bne.n	800c846 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c82a:	4b89      	ldr	r3, [pc, #548]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82e:	4a88      	ldr	r2, [pc, #544]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c834:	6413      	str	r3, [r2, #64]	; 0x40
 800c836:	4b86      	ldr	r3, [pc, #536]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c83e:	60bb      	str	r3, [r7, #8]
 800c840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c842:	2301      	movs	r3, #1
 800c844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c846:	4b83      	ldr	r3, [pc, #524]	; (800ca54 <HAL_RCC_OscConfig+0x4d4>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d118      	bne.n	800c884 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c852:	4b80      	ldr	r3, [pc, #512]	; (800ca54 <HAL_RCC_OscConfig+0x4d4>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a7f      	ldr	r2, [pc, #508]	; (800ca54 <HAL_RCC_OscConfig+0x4d4>)
 800c858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c85c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c85e:	f7fd f8d1 	bl	8009a04 <HAL_GetTick>
 800c862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c864:	e008      	b.n	800c878 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c866:	f7fd f8cd 	bl	8009a04 <HAL_GetTick>
 800c86a:	4602      	mov	r2, r0
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	2b64      	cmp	r3, #100	; 0x64
 800c872:	d901      	bls.n	800c878 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c874:	2303      	movs	r3, #3
 800c876:	e12a      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c878:	4b76      	ldr	r3, [pc, #472]	; (800ca54 <HAL_RCC_OscConfig+0x4d4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c880:	2b00      	cmp	r3, #0
 800c882:	d0f0      	beq.n	800c866 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d106      	bne.n	800c89a <HAL_RCC_OscConfig+0x31a>
 800c88c:	4b70      	ldr	r3, [pc, #448]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c890:	4a6f      	ldr	r2, [pc, #444]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c892:	f043 0301 	orr.w	r3, r3, #1
 800c896:	6713      	str	r3, [r2, #112]	; 0x70
 800c898:	e02d      	b.n	800c8f6 <HAL_RCC_OscConfig+0x376>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10c      	bne.n	800c8bc <HAL_RCC_OscConfig+0x33c>
 800c8a2:	4b6b      	ldr	r3, [pc, #428]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a6:	4a6a      	ldr	r2, [pc, #424]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8a8:	f023 0301 	bic.w	r3, r3, #1
 800c8ac:	6713      	str	r3, [r2, #112]	; 0x70
 800c8ae:	4b68      	ldr	r3, [pc, #416]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b2:	4a67      	ldr	r2, [pc, #412]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8b4:	f023 0304 	bic.w	r3, r3, #4
 800c8b8:	6713      	str	r3, [r2, #112]	; 0x70
 800c8ba:	e01c      	b.n	800c8f6 <HAL_RCC_OscConfig+0x376>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	2b05      	cmp	r3, #5
 800c8c2:	d10c      	bne.n	800c8de <HAL_RCC_OscConfig+0x35e>
 800c8c4:	4b62      	ldr	r3, [pc, #392]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c8:	4a61      	ldr	r2, [pc, #388]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8ca:	f043 0304 	orr.w	r3, r3, #4
 800c8ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c8d0:	4b5f      	ldr	r3, [pc, #380]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d4:	4a5e      	ldr	r2, [pc, #376]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8d6:	f043 0301 	orr.w	r3, r3, #1
 800c8da:	6713      	str	r3, [r2, #112]	; 0x70
 800c8dc:	e00b      	b.n	800c8f6 <HAL_RCC_OscConfig+0x376>
 800c8de:	4b5c      	ldr	r3, [pc, #368]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e2:	4a5b      	ldr	r2, [pc, #364]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8e4:	f023 0301 	bic.w	r3, r3, #1
 800c8e8:	6713      	str	r3, [r2, #112]	; 0x70
 800c8ea:	4b59      	ldr	r3, [pc, #356]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ee:	4a58      	ldr	r2, [pc, #352]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c8f0:	f023 0304 	bic.w	r3, r3, #4
 800c8f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d015      	beq.n	800c92a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8fe:	f7fd f881 	bl	8009a04 <HAL_GetTick>
 800c902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c904:	e00a      	b.n	800c91c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c906:	f7fd f87d 	bl	8009a04 <HAL_GetTick>
 800c90a:	4602      	mov	r2, r0
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	f241 3288 	movw	r2, #5000	; 0x1388
 800c914:	4293      	cmp	r3, r2
 800c916:	d901      	bls.n	800c91c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c918:	2303      	movs	r3, #3
 800c91a:	e0d8      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c91c:	4b4c      	ldr	r3, [pc, #304]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c920:	f003 0302 	and.w	r3, r3, #2
 800c924:	2b00      	cmp	r3, #0
 800c926:	d0ee      	beq.n	800c906 <HAL_RCC_OscConfig+0x386>
 800c928:	e014      	b.n	800c954 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c92a:	f7fd f86b 	bl	8009a04 <HAL_GetTick>
 800c92e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c930:	e00a      	b.n	800c948 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c932:	f7fd f867 	bl	8009a04 <HAL_GetTick>
 800c936:	4602      	mov	r2, r0
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c940:	4293      	cmp	r3, r2
 800c942:	d901      	bls.n	800c948 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e0c2      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c948:	4b41      	ldr	r3, [pc, #260]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c94c:	f003 0302 	and.w	r3, r3, #2
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1ee      	bne.n	800c932 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d105      	bne.n	800c966 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c95a:	4b3d      	ldr	r3, [pc, #244]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95e:	4a3c      	ldr	r2, [pc, #240]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 80ae 	beq.w	800cacc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c970:	4b37      	ldr	r3, [pc, #220]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	f003 030c 	and.w	r3, r3, #12
 800c978:	2b08      	cmp	r3, #8
 800c97a:	d06d      	beq.n	800ca58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	2b02      	cmp	r3, #2
 800c982:	d14b      	bne.n	800ca1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c984:	4b32      	ldr	r3, [pc, #200]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a31      	ldr	r2, [pc, #196]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c98a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c98e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c990:	f7fd f838 	bl	8009a04 <HAL_GetTick>
 800c994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c996:	e008      	b.n	800c9aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c998:	f7fd f834 	bl	8009a04 <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d901      	bls.n	800c9aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e091      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9aa:	4b29      	ldr	r3, [pc, #164]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1f0      	bne.n	800c998 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	69da      	ldr	r2, [r3, #28]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	431a      	orrs	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c4:	019b      	lsls	r3, r3, #6
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9cc:	085b      	lsrs	r3, r3, #1
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	041b      	lsls	r3, r3, #16
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d8:	061b      	lsls	r3, r3, #24
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e0:	071b      	lsls	r3, r3, #28
 800c9e2:	491b      	ldr	r1, [pc, #108]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c9e8:	4b19      	ldr	r3, [pc, #100]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a18      	ldr	r2, [pc, #96]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800c9ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c9f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9f4:	f7fd f806 	bl	8009a04 <HAL_GetTick>
 800c9f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9fa:	e008      	b.n	800ca0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9fc:	f7fd f802 	bl	8009a04 <HAL_GetTick>
 800ca00:	4602      	mov	r2, r0
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d901      	bls.n	800ca0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	e05f      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca0e:	4b10      	ldr	r3, [pc, #64]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0f0      	beq.n	800c9fc <HAL_RCC_OscConfig+0x47c>
 800ca1a:	e057      	b.n	800cacc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca1c:	4b0c      	ldr	r3, [pc, #48]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a0b      	ldr	r2, [pc, #44]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800ca22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca28:	f7fc ffec 	bl	8009a04 <HAL_GetTick>
 800ca2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca30:	f7fc ffe8 	bl	8009a04 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e045      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca42:	4b03      	ldr	r3, [pc, #12]	; (800ca50 <HAL_RCC_OscConfig+0x4d0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1f0      	bne.n	800ca30 <HAL_RCC_OscConfig+0x4b0>
 800ca4e:	e03d      	b.n	800cacc <HAL_RCC_OscConfig+0x54c>
 800ca50:	40023800 	.word	0x40023800
 800ca54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ca58:	4b1f      	ldr	r3, [pc, #124]	; (800cad8 <HAL_RCC_OscConfig+0x558>)
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d030      	beq.n	800cac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d129      	bne.n	800cac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d122      	bne.n	800cac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ca88:	4013      	ands	r3, r2
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d119      	bne.n	800cac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9e:	085b      	lsrs	r3, r3, #1
 800caa0:	3b01      	subs	r3, #1
 800caa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d10f      	bne.n	800cac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d107      	bne.n	800cac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d001      	beq.n	800cacc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	e000      	b.n	800cace <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3718      	adds	r7, #24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	40023800 	.word	0x40023800

0800cadc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d101      	bne.n	800caf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e0d0      	b.n	800cc96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800caf4:	4b6a      	ldr	r3, [pc, #424]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 030f 	and.w	r3, r3, #15
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d910      	bls.n	800cb24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb02:	4b67      	ldr	r3, [pc, #412]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f023 020f 	bic.w	r2, r3, #15
 800cb0a:	4965      	ldr	r1, [pc, #404]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb12:	4b63      	ldr	r3, [pc, #396]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 030f 	and.w	r3, r3, #15
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d001      	beq.n	800cb24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e0b8      	b.n	800cc96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 0302 	and.w	r3, r3, #2
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d020      	beq.n	800cb72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 0304 	and.w	r3, r3, #4
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb3c:	4b59      	ldr	r3, [pc, #356]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	4a58      	ldr	r2, [pc, #352]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cb42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cb46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0308 	and.w	r3, r3, #8
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb54:	4b53      	ldr	r3, [pc, #332]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	4a52      	ldr	r2, [pc, #328]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cb5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cb5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb60:	4b50      	ldr	r3, [pc, #320]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	494d      	ldr	r1, [pc, #308]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d040      	beq.n	800cc00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d107      	bne.n	800cb96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb86:	4b47      	ldr	r3, [pc, #284]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d115      	bne.n	800cbbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e07f      	b.n	800cc96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d107      	bne.n	800cbae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb9e:	4b41      	ldr	r3, [pc, #260]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d109      	bne.n	800cbbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e073      	b.n	800cc96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbae:	4b3d      	ldr	r3, [pc, #244]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 0302 	and.w	r3, r3, #2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e06b      	b.n	800cc96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cbbe:	4b39      	ldr	r3, [pc, #228]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	f023 0203 	bic.w	r2, r3, #3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	4936      	ldr	r1, [pc, #216]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbd0:	f7fc ff18 	bl	8009a04 <HAL_GetTick>
 800cbd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbd6:	e00a      	b.n	800cbee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbd8:	f7fc ff14 	bl	8009a04 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d901      	bls.n	800cbee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e053      	b.n	800cc96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbee:	4b2d      	ldr	r3, [pc, #180]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f003 020c 	and.w	r2, r3, #12
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d1eb      	bne.n	800cbd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc00:	4b27      	ldr	r3, [pc, #156]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 030f 	and.w	r3, r3, #15
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d210      	bcs.n	800cc30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc0e:	4b24      	ldr	r3, [pc, #144]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f023 020f 	bic.w	r2, r3, #15
 800cc16:	4922      	ldr	r1, [pc, #136]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc1e:	4b20      	ldr	r3, [pc, #128]	; (800cca0 <HAL_RCC_ClockConfig+0x1c4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 030f 	and.w	r3, r3, #15
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d001      	beq.n	800cc30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e032      	b.n	800cc96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d008      	beq.n	800cc4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc3c:	4b19      	ldr	r3, [pc, #100]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	4916      	ldr	r1, [pc, #88]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f003 0308 	and.w	r3, r3, #8
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d009      	beq.n	800cc6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cc5a:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	490e      	ldr	r1, [pc, #56]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cc6e:	f000 f821 	bl	800ccb4 <HAL_RCC_GetSysClockFreq>
 800cc72:	4601      	mov	r1, r0
 800cc74:	4b0b      	ldr	r3, [pc, #44]	; (800cca4 <HAL_RCC_ClockConfig+0x1c8>)
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	091b      	lsrs	r3, r3, #4
 800cc7a:	f003 030f 	and.w	r3, r3, #15
 800cc7e:	4a0a      	ldr	r2, [pc, #40]	; (800cca8 <HAL_RCC_ClockConfig+0x1cc>)
 800cc80:	5cd3      	ldrb	r3, [r2, r3]
 800cc82:	fa21 f303 	lsr.w	r3, r1, r3
 800cc86:	4a09      	ldr	r2, [pc, #36]	; (800ccac <HAL_RCC_ClockConfig+0x1d0>)
 800cc88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cc8a:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <HAL_RCC_ClockConfig+0x1d4>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fc f960 	bl	8008f54 <HAL_InitTick>

  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	40023c00 	.word	0x40023c00
 800cca4:	40023800 	.word	0x40023800
 800cca8:	080188c4 	.word	0x080188c4
 800ccac:	20000198 	.word	0x20000198
 800ccb0:	2000019c 	.word	0x2000019c

0800ccb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	607b      	str	r3, [r7, #4]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ccca:	4b50      	ldr	r3, [pc, #320]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x158>)
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f003 030c 	and.w	r3, r3, #12
 800ccd2:	2b04      	cmp	r3, #4
 800ccd4:	d007      	beq.n	800cce6 <HAL_RCC_GetSysClockFreq+0x32>
 800ccd6:	2b08      	cmp	r3, #8
 800ccd8:	d008      	beq.n	800ccec <HAL_RCC_GetSysClockFreq+0x38>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f040 808d 	bne.w	800cdfa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cce0:	4b4b      	ldr	r3, [pc, #300]	; (800ce10 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cce2:	60bb      	str	r3, [r7, #8]
      break;
 800cce4:	e08c      	b.n	800ce00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cce6:	4b4b      	ldr	r3, [pc, #300]	; (800ce14 <HAL_RCC_GetSysClockFreq+0x160>)
 800cce8:	60bb      	str	r3, [r7, #8]
      break;
 800ccea:	e089      	b.n	800ce00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ccec:	4b47      	ldr	r3, [pc, #284]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x158>)
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccf4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ccf6:	4b45      	ldr	r3, [pc, #276]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x158>)
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d023      	beq.n	800cd4a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd02:	4b42      	ldr	r3, [pc, #264]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x158>)
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	099b      	lsrs	r3, r3, #6
 800cd08:	f04f 0400 	mov.w	r4, #0
 800cd0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	ea03 0501 	and.w	r5, r3, r1
 800cd18:	ea04 0602 	and.w	r6, r4, r2
 800cd1c:	4a3d      	ldr	r2, [pc, #244]	; (800ce14 <HAL_RCC_GetSysClockFreq+0x160>)
 800cd1e:	fb02 f106 	mul.w	r1, r2, r6
 800cd22:	2200      	movs	r2, #0
 800cd24:	fb02 f205 	mul.w	r2, r2, r5
 800cd28:	440a      	add	r2, r1
 800cd2a:	493a      	ldr	r1, [pc, #232]	; (800ce14 <HAL_RCC_GetSysClockFreq+0x160>)
 800cd2c:	fba5 0101 	umull	r0, r1, r5, r1
 800cd30:	1853      	adds	r3, r2, r1
 800cd32:	4619      	mov	r1, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f04f 0400 	mov.w	r4, #0
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	4623      	mov	r3, r4
 800cd3e:	f7f3 fad7 	bl	80002f0 <__aeabi_uldivmod>
 800cd42:	4603      	mov	r3, r0
 800cd44:	460c      	mov	r4, r1
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	e049      	b.n	800cdde <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd4a:	4b30      	ldr	r3, [pc, #192]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x158>)
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	099b      	lsrs	r3, r3, #6
 800cd50:	f04f 0400 	mov.w	r4, #0
 800cd54:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cd58:	f04f 0200 	mov.w	r2, #0
 800cd5c:	ea03 0501 	and.w	r5, r3, r1
 800cd60:	ea04 0602 	and.w	r6, r4, r2
 800cd64:	4629      	mov	r1, r5
 800cd66:	4632      	mov	r2, r6
 800cd68:	f04f 0300 	mov.w	r3, #0
 800cd6c:	f04f 0400 	mov.w	r4, #0
 800cd70:	0154      	lsls	r4, r2, #5
 800cd72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cd76:	014b      	lsls	r3, r1, #5
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4622      	mov	r2, r4
 800cd7c:	1b49      	subs	r1, r1, r5
 800cd7e:	eb62 0206 	sbc.w	r2, r2, r6
 800cd82:	f04f 0300 	mov.w	r3, #0
 800cd86:	f04f 0400 	mov.w	r4, #0
 800cd8a:	0194      	lsls	r4, r2, #6
 800cd8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cd90:	018b      	lsls	r3, r1, #6
 800cd92:	1a5b      	subs	r3, r3, r1
 800cd94:	eb64 0402 	sbc.w	r4, r4, r2
 800cd98:	f04f 0100 	mov.w	r1, #0
 800cd9c:	f04f 0200 	mov.w	r2, #0
 800cda0:	00e2      	lsls	r2, r4, #3
 800cda2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cda6:	00d9      	lsls	r1, r3, #3
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4614      	mov	r4, r2
 800cdac:	195b      	adds	r3, r3, r5
 800cdae:	eb44 0406 	adc.w	r4, r4, r6
 800cdb2:	f04f 0100 	mov.w	r1, #0
 800cdb6:	f04f 0200 	mov.w	r2, #0
 800cdba:	02a2      	lsls	r2, r4, #10
 800cdbc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cdc0:	0299      	lsls	r1, r3, #10
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	4621      	mov	r1, r4
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f04f 0400 	mov.w	r4, #0
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4623      	mov	r3, r4
 800cdd4:	f7f3 fa8c 	bl	80002f0 <__aeabi_uldivmod>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	460c      	mov	r4, r1
 800cddc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cdde:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <HAL_RCC_GetSysClockFreq+0x158>)
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	0c1b      	lsrs	r3, r3, #16
 800cde4:	f003 0303 	and.w	r3, r3, #3
 800cde8:	3301      	adds	r3, #1
 800cdea:	005b      	lsls	r3, r3, #1
 800cdec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdf6:	60bb      	str	r3, [r7, #8]
      break;
 800cdf8:	e002      	b.n	800ce00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cdfa:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cdfc:	60bb      	str	r3, [r7, #8]
      break;
 800cdfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce00:	68bb      	ldr	r3, [r7, #8]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	40023800 	.word	0x40023800
 800ce10:	00f42400 	.word	0x00f42400
 800ce14:	017d7840 	.word	0x017d7840

0800ce18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce1c:	4b03      	ldr	r3, [pc, #12]	; (800ce2c <HAL_RCC_GetHCLKFreq+0x14>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	20000198 	.word	0x20000198

0800ce30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ce34:	f7ff fff0 	bl	800ce18 <HAL_RCC_GetHCLKFreq>
 800ce38:	4601      	mov	r1, r0
 800ce3a:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	0a9b      	lsrs	r3, r3, #10
 800ce40:	f003 0307 	and.w	r3, r3, #7
 800ce44:	4a03      	ldr	r2, [pc, #12]	; (800ce54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce46:	5cd3      	ldrb	r3, [r2, r3]
 800ce48:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	40023800 	.word	0x40023800
 800ce54:	080188d4 	.word	0x080188d4

0800ce58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ce5c:	f7ff ffdc 	bl	800ce18 <HAL_RCC_GetHCLKFreq>
 800ce60:	4601      	mov	r1, r0
 800ce62:	4b05      	ldr	r3, [pc, #20]	; (800ce78 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	0b5b      	lsrs	r3, r3, #13
 800ce68:	f003 0307 	and.w	r3, r3, #7
 800ce6c:	4a03      	ldr	r2, [pc, #12]	; (800ce7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce6e:	5cd3      	ldrb	r3, [r2, r3]
 800ce70:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	40023800 	.word	0x40023800
 800ce7c:	080188d4 	.word	0x080188d4

0800ce80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	220f      	movs	r2, #15
 800ce8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ce90:	4b12      	ldr	r3, [pc, #72]	; (800cedc <HAL_RCC_GetClockConfig+0x5c>)
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	f003 0203 	and.w	r2, r3, #3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ce9c:	4b0f      	ldr	r3, [pc, #60]	; (800cedc <HAL_RCC_GetClockConfig+0x5c>)
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cea8:	4b0c      	ldr	r3, [pc, #48]	; (800cedc <HAL_RCC_GetClockConfig+0x5c>)
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ceb4:	4b09      	ldr	r3, [pc, #36]	; (800cedc <HAL_RCC_GetClockConfig+0x5c>)
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	08db      	lsrs	r3, r3, #3
 800ceba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cec2:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <HAL_RCC_GetClockConfig+0x60>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 020f 	and.w	r2, r3, #15
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	601a      	str	r2, [r3, #0]
}
 800cece:	bf00      	nop
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	40023800 	.word	0x40023800
 800cee0:	40023c00 	.word	0x40023c00

0800cee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0301 	and.w	r3, r3, #1
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d012      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cf0c:	4b69      	ldr	r3, [pc, #420]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	4a68      	ldr	r2, [pc, #416]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf16:	6093      	str	r3, [r2, #8]
 800cf18:	4b66      	ldr	r3, [pc, #408]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf1a:	689a      	ldr	r2, [r3, #8]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf20:	4964      	ldr	r1, [pc, #400]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf22:	4313      	orrs	r3, r2
 800cf24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d017      	beq.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf3e:	4b5d      	ldr	r3, [pc, #372]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4c:	4959      	ldr	r1, [pc, #356]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf5c:	d101      	bne.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d017      	beq.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cf7a:	4b4e      	ldr	r3, [pc, #312]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf88:	494a      	ldr	r1, [pc, #296]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf98:	d101      	bne.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d101      	bne.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0320 	and.w	r3, r3, #32
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 808b 	beq.w	800d0de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cfc8:	4b3a      	ldr	r3, [pc, #232]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfcc:	4a39      	ldr	r2, [pc, #228]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfd2:	6413      	str	r3, [r2, #64]	; 0x40
 800cfd4:	4b37      	ldr	r3, [pc, #220]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfdc:	60bb      	str	r3, [r7, #8]
 800cfde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cfe0:	4b35      	ldr	r3, [pc, #212]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a34      	ldr	r2, [pc, #208]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cfe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfec:	f7fc fd0a 	bl	8009a04 <HAL_GetTick>
 800cff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cff2:	e008      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cff4:	f7fc fd06 	bl	8009a04 <HAL_GetTick>
 800cff8:	4602      	mov	r2, r0
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	2b64      	cmp	r3, #100	; 0x64
 800d000:	d901      	bls.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d002:	2303      	movs	r3, #3
 800d004:	e38d      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d006:	4b2c      	ldr	r3, [pc, #176]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0f0      	beq.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d012:	4b28      	ldr	r3, [pc, #160]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d01a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d035      	beq.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d02e      	beq.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d030:	4b20      	ldr	r3, [pc, #128]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d03a:	4b1e      	ldr	r3, [pc, #120]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d03e:	4a1d      	ldr	r2, [pc, #116]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d044:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d046:	4b1b      	ldr	r3, [pc, #108]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04a:	4a1a      	ldr	r2, [pc, #104]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d04c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d050:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d052:	4a18      	ldr	r2, [pc, #96]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d058:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d05c:	f003 0301 	and.w	r3, r3, #1
 800d060:	2b01      	cmp	r3, #1
 800d062:	d114      	bne.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d064:	f7fc fcce 	bl	8009a04 <HAL_GetTick>
 800d068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d06a:	e00a      	b.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d06c:	f7fc fcca 	bl	8009a04 <HAL_GetTick>
 800d070:	4602      	mov	r2, r0
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	f241 3288 	movw	r2, #5000	; 0x1388
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d901      	bls.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d07e:	2303      	movs	r3, #3
 800d080:	e34f      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d082:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d086:	f003 0302 	and.w	r3, r3, #2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0ee      	beq.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d09a:	d111      	bne.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d09c:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d0a8:	4b04      	ldr	r3, [pc, #16]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d0aa:	400b      	ands	r3, r1
 800d0ac:	4901      	ldr	r1, [pc, #4]	; (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	608b      	str	r3, [r1, #8]
 800d0b2:	e00b      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d0b4:	40023800 	.word	0x40023800
 800d0b8:	40007000 	.word	0x40007000
 800d0bc:	0ffffcff 	.word	0x0ffffcff
 800d0c0:	4bb3      	ldr	r3, [pc, #716]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	4ab2      	ldr	r2, [pc, #712]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d0ca:	6093      	str	r3, [r2, #8]
 800d0cc:	4bb0      	ldr	r3, [pc, #704]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0d8:	49ad      	ldr	r1, [pc, #692]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 0310 	and.w	r3, r3, #16
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d010      	beq.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d0ea:	4ba9      	ldr	r3, [pc, #676]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0f0:	4aa7      	ldr	r2, [pc, #668]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d0f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d0fa:	4ba5      	ldr	r3, [pc, #660]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d0fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d104:	49a2      	ldr	r1, [pc, #648]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d106:	4313      	orrs	r3, r2
 800d108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00a      	beq.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d118:	4b9d      	ldr	r3, [pc, #628]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d11e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d126:	499a      	ldr	r1, [pc, #616]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d128:	4313      	orrs	r3, r2
 800d12a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00a      	beq.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d13a:	4b95      	ldr	r3, [pc, #596]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d148:	4991      	ldr	r1, [pc, #580]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d14a:	4313      	orrs	r3, r2
 800d14c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00a      	beq.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d15c:	4b8c      	ldr	r3, [pc, #560]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d16a:	4989      	ldr	r1, [pc, #548]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d16c:	4313      	orrs	r3, r2
 800d16e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00a      	beq.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d17e:	4b84      	ldr	r3, [pc, #528]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d18c:	4980      	ldr	r1, [pc, #512]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d18e:	4313      	orrs	r3, r2
 800d190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00a      	beq.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d1a0:	4b7b      	ldr	r3, [pc, #492]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1a6:	f023 0203 	bic.w	r2, r3, #3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ae:	4978      	ldr	r1, [pc, #480]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00a      	beq.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d1c2:	4b73      	ldr	r3, [pc, #460]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1c8:	f023 020c 	bic.w	r2, r3, #12
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d0:	496f      	ldr	r1, [pc, #444]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00a      	beq.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d1e4:	4b6a      	ldr	r3, [pc, #424]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1f2:	4967      	ldr	r1, [pc, #412]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00a      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d206:	4b62      	ldr	r3, [pc, #392]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d20c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d214:	495e      	ldr	r1, [pc, #376]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d216:	4313      	orrs	r3, r2
 800d218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00a      	beq.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d228:	4b59      	ldr	r3, [pc, #356]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d22e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d236:	4956      	ldr	r1, [pc, #344]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d238:	4313      	orrs	r3, r2
 800d23a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00a      	beq.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d24a:	4b51      	ldr	r3, [pc, #324]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d250:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d258:	494d      	ldr	r1, [pc, #308]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00a      	beq.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d26c:	4b48      	ldr	r3, [pc, #288]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d27a:	4945      	ldr	r1, [pc, #276]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d27c:	4313      	orrs	r3, r2
 800d27e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00a      	beq.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d28e:	4b40      	ldr	r3, [pc, #256]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d29c:	493c      	ldr	r1, [pc, #240]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00a      	beq.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d2b0:	4b37      	ldr	r3, [pc, #220]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2be:	4934      	ldr	r1, [pc, #208]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d011      	beq.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d2d2:	4b2f      	ldr	r3, [pc, #188]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2e0:	492b      	ldr	r1, [pc, #172]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2f0:	d101      	bne.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 0308 	and.w	r3, r3, #8
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d001      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d302:	2301      	movs	r3, #1
 800d304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d312:	4b1f      	ldr	r3, [pc, #124]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d318:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d320:	491b      	ldr	r1, [pc, #108]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d322:	4313      	orrs	r3, r2
 800d324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d334:	4b16      	ldr	r3, [pc, #88]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d33a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d344:	4912      	ldr	r1, [pc, #72]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d346:	4313      	orrs	r3, r2
 800d348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d358:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d35e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d368:	4909      	ldr	r1, [pc, #36]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d36a:	4313      	orrs	r3, r2
 800d36c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00f      	beq.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d37c:	4b04      	ldr	r3, [pc, #16]	; (800d390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800d37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d382:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d38c:	e002      	b.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800d38e:	bf00      	nop
 800d390:	40023800 	.word	0x40023800
 800d394:	4985      	ldr	r1, [pc, #532]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d396:	4313      	orrs	r3, r2
 800d398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00b      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d3a8:	4b80      	ldr	r3, [pc, #512]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b8:	497c      	ldr	r1, [pc, #496]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d005      	beq.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3ce:	f040 80d6 	bne.w	800d57e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d3d2:	4b76      	ldr	r3, [pc, #472]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a75      	ldr	r2, [pc, #468]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3de:	f7fc fb11 	bl	8009a04 <HAL_GetTick>
 800d3e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3e4:	e008      	b.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d3e6:	f7fc fb0d 	bl	8009a04 <HAL_GetTick>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	2b64      	cmp	r3, #100	; 0x64
 800d3f2:	d901      	bls.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	e194      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d3f8:	4b6c      	ldr	r3, [pc, #432]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1f0      	bne.n	800d3e6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0301 	and.w	r3, r3, #1
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d021      	beq.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d414:	2b00      	cmp	r3, #0
 800d416:	d11d      	bne.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d418:	4b64      	ldr	r3, [pc, #400]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d41a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d41e:	0c1b      	lsrs	r3, r3, #16
 800d420:	f003 0303 	and.w	r3, r3, #3
 800d424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d426:	4b61      	ldr	r3, [pc, #388]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d42c:	0e1b      	lsrs	r3, r3, #24
 800d42e:	f003 030f 	and.w	r3, r3, #15
 800d432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	019a      	lsls	r2, r3, #6
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	041b      	lsls	r3, r3, #16
 800d43e:	431a      	orrs	r2, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	061b      	lsls	r3, r3, #24
 800d444:	431a      	orrs	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	071b      	lsls	r3, r3, #28
 800d44c:	4957      	ldr	r1, [pc, #348]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d44e:	4313      	orrs	r3, r2
 800d450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d468:	d00a      	beq.n	800d480 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d472:	2b00      	cmp	r3, #0
 800d474:	d02e      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d47e:	d129      	bne.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d480:	4b4a      	ldr	r3, [pc, #296]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d486:	0c1b      	lsrs	r3, r3, #16
 800d488:	f003 0303 	and.w	r3, r3, #3
 800d48c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d48e:	4b47      	ldr	r3, [pc, #284]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d494:	0f1b      	lsrs	r3, r3, #28
 800d496:	f003 0307 	and.w	r3, r3, #7
 800d49a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	019a      	lsls	r2, r3, #6
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	041b      	lsls	r3, r3, #16
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	061b      	lsls	r3, r3, #24
 800d4ae:	431a      	orrs	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	071b      	lsls	r3, r3, #28
 800d4b4:	493d      	ldr	r1, [pc, #244]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d4bc:	4b3b      	ldr	r3, [pc, #236]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4c2:	f023 021f 	bic.w	r2, r3, #31
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	4937      	ldr	r1, [pc, #220]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d01d      	beq.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d4e0:	4b32      	ldr	r3, [pc, #200]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4e6:	0e1b      	lsrs	r3, r3, #24
 800d4e8:	f003 030f 	and.w	r3, r3, #15
 800d4ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d4ee:	4b2f      	ldr	r3, [pc, #188]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4f4:	0f1b      	lsrs	r3, r3, #28
 800d4f6:	f003 0307 	and.w	r3, r3, #7
 800d4fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	019a      	lsls	r2, r3, #6
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	041b      	lsls	r3, r3, #16
 800d508:	431a      	orrs	r2, r3
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	061b      	lsls	r3, r3, #24
 800d50e:	431a      	orrs	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	071b      	lsls	r3, r3, #28
 800d514:	4925      	ldr	r1, [pc, #148]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d516:	4313      	orrs	r3, r2
 800d518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d524:	2b00      	cmp	r3, #0
 800d526:	d011      	beq.n	800d54c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	019a      	lsls	r2, r3, #6
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	041b      	lsls	r3, r3, #16
 800d534:	431a      	orrs	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	061b      	lsls	r3, r3, #24
 800d53c:	431a      	orrs	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	071b      	lsls	r3, r3, #28
 800d544:	4919      	ldr	r1, [pc, #100]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d546:	4313      	orrs	r3, r2
 800d548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d54c:	4b17      	ldr	r3, [pc, #92]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a16      	ldr	r2, [pc, #88]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d558:	f7fc fa54 	bl	8009a04 <HAL_GetTick>
 800d55c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d55e:	e008      	b.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d560:	f7fc fa50 	bl	8009a04 <HAL_GetTick>
 800d564:	4602      	mov	r2, r0
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	2b64      	cmp	r3, #100	; 0x64
 800d56c:	d901      	bls.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	e0d7      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d572:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0f0      	beq.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	2b01      	cmp	r3, #1
 800d582:	f040 80cd 	bne.w	800d720 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d586:	4b09      	ldr	r3, [pc, #36]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a08      	ldr	r2, [pc, #32]	; (800d5ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800d58c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d592:	f7fc fa37 	bl	8009a04 <HAL_GetTick>
 800d596:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d598:	e00a      	b.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d59a:	f7fc fa33 	bl	8009a04 <HAL_GetTick>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	2b64      	cmp	r3, #100	; 0x64
 800d5a6:	d903      	bls.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e0ba      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800d5ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d5b0:	4b5e      	ldr	r3, [pc, #376]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5bc:	d0ed      	beq.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d003      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d009      	beq.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d02e      	beq.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d12a      	bne.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d5e6:	4b51      	ldr	r3, [pc, #324]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ec:	0c1b      	lsrs	r3, r3, #16
 800d5ee:	f003 0303 	and.w	r3, r3, #3
 800d5f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d5f4:	4b4d      	ldr	r3, [pc, #308]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5fa:	0f1b      	lsrs	r3, r3, #28
 800d5fc:	f003 0307 	and.w	r3, r3, #7
 800d600:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	019a      	lsls	r2, r3, #6
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	041b      	lsls	r3, r3, #16
 800d60c:	431a      	orrs	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	699b      	ldr	r3, [r3, #24]
 800d612:	061b      	lsls	r3, r3, #24
 800d614:	431a      	orrs	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	071b      	lsls	r3, r3, #28
 800d61a:	4944      	ldr	r1, [pc, #272]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d61c:	4313      	orrs	r3, r2
 800d61e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d622:	4b42      	ldr	r3, [pc, #264]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d628:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d630:	3b01      	subs	r3, #1
 800d632:	021b      	lsls	r3, r3, #8
 800d634:	493d      	ldr	r1, [pc, #244]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d636:	4313      	orrs	r3, r2
 800d638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d644:	2b00      	cmp	r3, #0
 800d646:	d022      	beq.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d650:	d11d      	bne.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d652:	4b36      	ldr	r3, [pc, #216]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d658:	0e1b      	lsrs	r3, r3, #24
 800d65a:	f003 030f 	and.w	r3, r3, #15
 800d65e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d660:	4b32      	ldr	r3, [pc, #200]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d666:	0f1b      	lsrs	r3, r3, #28
 800d668:	f003 0307 	and.w	r3, r3, #7
 800d66c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	019a      	lsls	r2, r3, #6
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	041b      	lsls	r3, r3, #16
 800d67a:	431a      	orrs	r2, r3
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	061b      	lsls	r3, r3, #24
 800d680:	431a      	orrs	r2, r3
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	071b      	lsls	r3, r3, #28
 800d686:	4929      	ldr	r1, [pc, #164]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d688:	4313      	orrs	r3, r2
 800d68a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f003 0308 	and.w	r3, r3, #8
 800d696:	2b00      	cmp	r3, #0
 800d698:	d028      	beq.n	800d6ec <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d69a:	4b24      	ldr	r3, [pc, #144]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6a0:	0e1b      	lsrs	r3, r3, #24
 800d6a2:	f003 030f 	and.w	r3, r3, #15
 800d6a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d6a8:	4b20      	ldr	r3, [pc, #128]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ae:	0c1b      	lsrs	r3, r3, #16
 800d6b0:	f003 0303 	and.w	r3, r3, #3
 800d6b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	019a      	lsls	r2, r3, #6
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	041b      	lsls	r3, r3, #16
 800d6c0:	431a      	orrs	r2, r3
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	061b      	lsls	r3, r3, #24
 800d6c6:	431a      	orrs	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	69db      	ldr	r3, [r3, #28]
 800d6cc:	071b      	lsls	r3, r3, #28
 800d6ce:	4917      	ldr	r1, [pc, #92]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d6d6:	4b15      	ldr	r3, [pc, #84]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e4:	4911      	ldr	r1, [pc, #68]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d6ec:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a0e      	ldr	r2, [pc, #56]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d6f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6f8:	f7fc f984 	bl	8009a04 <HAL_GetTick>
 800d6fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d6fe:	e008      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d700:	f7fc f980 	bl	8009a04 <HAL_GetTick>
 800d704:	4602      	mov	r2, r0
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	2b64      	cmp	r3, #100	; 0x64
 800d70c:	d901      	bls.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	e007      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d712:	4b06      	ldr	r3, [pc, #24]	; (800d72c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d71a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d71e:	d1ef      	bne.n	800d700 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3720      	adds	r7, #32
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	40023800 	.word	0x40023800

0800d730 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d101      	bne.n	800d742 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	e06b      	b.n	800d81a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	7f5b      	ldrb	r3, [r3, #29]
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d105      	bne.n	800d758 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7fb f908 	bl	8008968 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2202      	movs	r2, #2
 800d75c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	22ca      	movs	r2, #202	; 0xca
 800d764:	625a      	str	r2, [r3, #36]	; 0x24
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2253      	movs	r2, #83	; 0x53
 800d76c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 f85a 	bl	800d828 <RTC_EnterInitMode>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d008      	beq.n	800d78c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	22ff      	movs	r2, #255	; 0xff
 800d780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2204      	movs	r2, #4
 800d786:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	e046      	b.n	800d81a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6899      	ldr	r1, [r3, #8]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	4b23      	ldr	r3, [pc, #140]	; (800d824 <HAL_RTC_Init+0xf4>)
 800d798:	400b      	ands	r3, r1
 800d79a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6899      	ldr	r1, [r3, #8]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	431a      	orrs	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	695b      	ldr	r3, [r3, #20]
 800d7b0:	431a      	orrs	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	430a      	orrs	r2, r1
 800d7b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	68d2      	ldr	r2, [r2, #12]
 800d7c2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6919      	ldr	r1, [r3, #16]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	041a      	lsls	r2, r3, #16
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	430a      	orrs	r2, r1
 800d7d6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68da      	ldr	r2, [r3, #12]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d7e6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f022 0208 	bic.w	r2, r2, #8
 800d7f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	699a      	ldr	r2, [r3, #24]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	430a      	orrs	r2, r1
 800d808:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	22ff      	movs	r2, #255	; 0xff
 800d810:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d818:	2300      	movs	r3, #0
  }
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	ff8fffbf 	.word	0xff8fffbf

0800d828 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d830:	2300      	movs	r3, #0
 800d832:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d119      	bne.n	800d876 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f04f 32ff 	mov.w	r2, #4294967295
 800d84a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d84c:	f7fc f8da 	bl	8009a04 <HAL_GetTick>
 800d850:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d852:	e009      	b.n	800d868 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d854:	f7fc f8d6 	bl	8009a04 <HAL_GetTick>
 800d858:	4602      	mov	r2, r0
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d862:	d901      	bls.n	800d868 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e007      	b.n	800d878 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0ee      	beq.n	800d854 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	e084      	b.n	800d99c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d106      	bne.n	800d8b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7fb f875 	bl	800899c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2202      	movs	r2, #2
 800d8b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8d2:	d902      	bls.n	800d8da <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	e002      	b.n	800d8e0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d8da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d8e8:	d007      	beq.n	800d8fa <HAL_SPI_Init+0x7a>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8f2:	d002      	beq.n	800d8fa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10b      	bne.n	800d91a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d90a:	d903      	bls.n	800d914 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2202      	movs	r2, #2
 800d910:	631a      	str	r2, [r3, #48]	; 0x30
 800d912:	e002      	b.n	800d91a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	431a      	orrs	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	691b      	ldr	r3, [r3, #16]
 800d928:	431a      	orrs	r2, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	431a      	orrs	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d938:	431a      	orrs	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	431a      	orrs	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	ea42 0103 	orr.w	r1, r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	430a      	orrs	r2, r1
 800d952:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	0c1b      	lsrs	r3, r3, #16
 800d95a:	f003 0204 	and.w	r2, r3, #4
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d962:	431a      	orrs	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d968:	431a      	orrs	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	ea42 0103 	orr.w	r1, r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68fa      	ldr	r2, [r7, #12]
 800d978:	430a      	orrs	r2, r1
 800d97a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	69da      	ldr	r2, [r3, #28]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d98a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b088      	sub	sp, #32
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	603b      	str	r3, [r7, #0]
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d101      	bne.n	800d9c6 <HAL_SPI_Transmit+0x22>
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	e150      	b.n	800dc68 <HAL_SPI_Transmit+0x2c4>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9ce:	f7fc f819 	bl	8009a04 <HAL_GetTick>
 800d9d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d9d4:	88fb      	ldrh	r3, [r7, #6]
 800d9d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d002      	beq.n	800d9ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d9e8:	e135      	b.n	800dc56 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <HAL_SPI_Transmit+0x52>
 800d9f0:	88fb      	ldrh	r3, [r7, #6]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d102      	bne.n	800d9fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d9fa:	e12c      	b.n	800dc56 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2203      	movs	r2, #3
 800da00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2200      	movs	r2, #0
 800da08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	88fa      	ldrh	r2, [r7, #6]
 800da14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	88fa      	ldrh	r2, [r7, #6]
 800da1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2200      	movs	r2, #0
 800da26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da46:	d107      	bne.n	800da58 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da62:	2b40      	cmp	r3, #64	; 0x40
 800da64:	d007      	beq.n	800da76 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da7e:	d94b      	bls.n	800db18 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d002      	beq.n	800da8e <HAL_SPI_Transmit+0xea>
 800da88:	8afb      	ldrh	r3, [r7, #22]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d13e      	bne.n	800db0c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da92:	881a      	ldrh	r2, [r3, #0]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9e:	1c9a      	adds	r2, r3, #2
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	3b01      	subs	r3, #1
 800daac:	b29a      	uxth	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dab2:	e02b      	b.n	800db0c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	f003 0302 	and.w	r3, r3, #2
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d112      	bne.n	800dae8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac6:	881a      	ldrh	r2, [r3, #0]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad2:	1c9a      	adds	r2, r3, #2
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dadc:	b29b      	uxth	r3, r3
 800dade:	3b01      	subs	r3, #1
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dae6:	e011      	b.n	800db0c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dae8:	f7fb ff8c 	bl	8009a04 <HAL_GetTick>
 800daec:	4602      	mov	r2, r0
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	683a      	ldr	r2, [r7, #0]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d803      	bhi.n	800db00 <HAL_SPI_Transmit+0x15c>
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dafe:	d102      	bne.n	800db06 <HAL_SPI_Transmit+0x162>
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d102      	bne.n	800db0c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800db06:	2303      	movs	r3, #3
 800db08:	77fb      	strb	r3, [r7, #31]
          goto error;
 800db0a:	e0a4      	b.n	800dc56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db10:	b29b      	uxth	r3, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1ce      	bne.n	800dab4 <HAL_SPI_Transmit+0x110>
 800db16:	e07c      	b.n	800dc12 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d002      	beq.n	800db26 <HAL_SPI_Transmit+0x182>
 800db20:	8afb      	ldrh	r3, [r7, #22]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d170      	bne.n	800dc08 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d912      	bls.n	800db56 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db34:	881a      	ldrh	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db40:	1c9a      	adds	r2, r3, #2
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	3b02      	subs	r3, #2
 800db4e:	b29a      	uxth	r2, r3
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db54:	e058      	b.n	800dc08 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	330c      	adds	r3, #12
 800db60:	7812      	ldrb	r2, [r2, #0]
 800db62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db68:	1c5a      	adds	r2, r3, #1
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db72:	b29b      	uxth	r3, r3
 800db74:	3b01      	subs	r3, #1
 800db76:	b29a      	uxth	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800db7c:	e044      	b.n	800dc08 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	f003 0302 	and.w	r3, r3, #2
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d12b      	bne.n	800dbe4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db90:	b29b      	uxth	r3, r3
 800db92:	2b01      	cmp	r3, #1
 800db94:	d912      	bls.n	800dbbc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db9a:	881a      	ldrh	r2, [r3, #0]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba6:	1c9a      	adds	r2, r3, #2
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	3b02      	subs	r3, #2
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dbba:	e025      	b.n	800dc08 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	330c      	adds	r3, #12
 800dbc6:	7812      	ldrb	r2, [r2, #0]
 800dbc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dbe2:	e011      	b.n	800dc08 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbe4:	f7fb ff0e 	bl	8009a04 <HAL_GetTick>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d803      	bhi.n	800dbfc <HAL_SPI_Transmit+0x258>
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfa:	d102      	bne.n	800dc02 <HAL_SPI_Transmit+0x25e>
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800dc02:	2303      	movs	r3, #3
 800dc04:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dc06:	e026      	b.n	800dc56 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1b5      	bne.n	800db7e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dc12:	69ba      	ldr	r2, [r7, #24]
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f000 fa20 	bl	800e05c <SPI_EndRxTxTransaction>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2220      	movs	r2, #32
 800dc26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10a      	bne.n	800dc46 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dc30:	2300      	movs	r3, #0
 800dc32:	613b      	str	r3, [r7, #16]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	613b      	str	r3, [r7, #16]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	613b      	str	r3, [r7, #16]
 800dc44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	77fb      	strb	r3, [r7, #31]
 800dc52:	e000      	b.n	800dc56 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800dc54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dc66:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3720      	adds	r7, #32
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b088      	sub	sp, #32
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	099b      	lsrs	r3, r3, #6
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10f      	bne.n	800dcb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00a      	beq.n	800dcb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	099b      	lsrs	r3, r3, #6
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	4798      	blx	r3
    return;
 800dcb2:	e0d8      	b.n	800de66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	085b      	lsrs	r3, r3, #1
 800dcb8:	f003 0301 	and.w	r3, r3, #1
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00a      	beq.n	800dcd6 <HAL_SPI_IRQHandler+0x66>
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	09db      	lsrs	r3, r3, #7
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d004      	beq.n	800dcd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	4798      	blx	r3
    return;
 800dcd4:	e0c7      	b.n	800de66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	095b      	lsrs	r3, r3, #5
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d10c      	bne.n	800dcfc <HAL_SPI_IRQHandler+0x8c>
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	099b      	lsrs	r3, r3, #6
 800dce6:	f003 0301 	and.w	r3, r3, #1
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d106      	bne.n	800dcfc <HAL_SPI_IRQHandler+0x8c>
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	0a1b      	lsrs	r3, r3, #8
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f000 80b5 	beq.w	800de66 <HAL_SPI_IRQHandler+0x1f6>
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	095b      	lsrs	r3, r3, #5
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	f000 80ae 	beq.w	800de66 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	099b      	lsrs	r3, r3, #6
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d023      	beq.n	800dd5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d011      	beq.n	800dd46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd26:	f043 0204 	orr.w	r2, r3, #4
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	617b      	str	r3, [r7, #20]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	617b      	str	r3, [r7, #20]
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	e00b      	b.n	800dd5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd46:	2300      	movs	r3, #0
 800dd48:	613b      	str	r3, [r7, #16]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	613b      	str	r3, [r7, #16]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	613b      	str	r3, [r7, #16]
 800dd5a:	693b      	ldr	r3, [r7, #16]
        return;
 800dd5c:	e083      	b.n	800de66 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	095b      	lsrs	r3, r3, #5
 800dd62:	f003 0301 	and.w	r3, r3, #1
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d014      	beq.n	800dd94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd6e:	f043 0201 	orr.w	r2, r3, #1
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dd76:	2300      	movs	r3, #0
 800dd78:	60fb      	str	r3, [r7, #12]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	60fb      	str	r3, [r7, #12]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	0a1b      	lsrs	r3, r3, #8
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00c      	beq.n	800ddba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dda4:	f043 0208 	orr.w	r2, r3, #8
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ddac:	2300      	movs	r3, #0
 800ddae:	60bb      	str	r3, [r7, #8]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	60bb      	str	r3, [r7, #8]
 800ddb8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d050      	beq.n	800de64 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	685a      	ldr	r2, [r3, #4]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ddd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	f003 0302 	and.w	r3, r3, #2
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d104      	bne.n	800ddee <HAL_SPI_IRQHandler+0x17e>
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f003 0301 	and.w	r3, r3, #1
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d034      	beq.n	800de58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 0203 	bic.w	r2, r2, #3
 800ddfc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de02:	2b00      	cmp	r3, #0
 800de04:	d011      	beq.n	800de2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de0a:	4a18      	ldr	r2, [pc, #96]	; (800de6c <HAL_SPI_IRQHandler+0x1fc>)
 800de0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de12:	4618      	mov	r0, r3
 800de14:	f7fc fe30 	bl	800aa78 <HAL_DMA_Abort_IT>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d005      	beq.n	800de2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d016      	beq.n	800de60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de36:	4a0d      	ldr	r2, [pc, #52]	; (800de6c <HAL_SPI_IRQHandler+0x1fc>)
 800de38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fc fe1a 	bl	800aa78 <HAL_DMA_Abort_IT>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00a      	beq.n	800de60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800de56:	e003      	b.n	800de60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 f809 	bl	800de70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800de5e:	e000      	b.n	800de62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800de60:	bf00      	nop
    return;
 800de62:	bf00      	nop
 800de64:	bf00      	nop
  }
}
 800de66:	3720      	adds	r7, #32
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	0800de85 	.word	0x0800de85

0800de70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f7ff ffe5 	bl	800de70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dea6:	bf00      	nop
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b084      	sub	sp, #16
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	603b      	str	r3, [r7, #0]
 800deba:	4613      	mov	r3, r2
 800debc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800debe:	e04c      	b.n	800df5a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec6:	d048      	beq.n	800df5a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dec8:	f7fb fd9c 	bl	8009a04 <HAL_GetTick>
 800decc:	4602      	mov	r2, r0
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d902      	bls.n	800dede <SPI_WaitFlagStateUntilTimeout+0x30>
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d13d      	bne.n	800df5a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	685a      	ldr	r2, [r3, #4]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800deec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800def6:	d111      	bne.n	800df1c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df00:	d004      	beq.n	800df0c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df0a:	d107      	bne.n	800df1c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df24:	d10f      	bne.n	800df46 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e00f      	b.n	800df7a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	689a      	ldr	r2, [r3, #8]
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	4013      	ands	r3, r2
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	429a      	cmp	r2, r3
 800df68:	bf0c      	ite	eq
 800df6a:	2301      	moveq	r3, #1
 800df6c:	2300      	movne	r3, #0
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	461a      	mov	r2, r3
 800df72:	79fb      	ldrb	r3, [r7, #7]
 800df74:	429a      	cmp	r2, r3
 800df76:	d1a3      	bne.n	800dec0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b084      	sub	sp, #16
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	607a      	str	r2, [r7, #4]
 800df8e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800df90:	e057      	b.n	800e042 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800df98:	d106      	bne.n	800dfa8 <SPI_WaitFifoStateUntilTimeout+0x26>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d103      	bne.n	800dfa8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	330c      	adds	r3, #12
 800dfa6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfae:	d048      	beq.n	800e042 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dfb0:	f7fb fd28 	bl	8009a04 <HAL_GetTick>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d902      	bls.n	800dfc6 <SPI_WaitFifoStateUntilTimeout+0x44>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d13d      	bne.n	800e042 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dfd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfde:	d111      	bne.n	800e004 <SPI_WaitFifoStateUntilTimeout+0x82>
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfe8:	d004      	beq.n	800dff4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dff2:	d107      	bne.n	800e004 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e00c:	d10f      	bne.n	800e02e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e02c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2201      	movs	r2, #1
 800e032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e03e:	2303      	movs	r3, #3
 800e040:	e008      	b.n	800e054 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	689a      	ldr	r2, [r3, #8]
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	4013      	ands	r3, r2
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d19f      	bne.n	800df92 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af02      	add	r7, sp, #8
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2200      	movs	r2, #0
 800e070:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f7ff ff84 	bl	800df82 <SPI_WaitFifoStateUntilTimeout>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d007      	beq.n	800e090 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e084:	f043 0220 	orr.w	r2, r3, #32
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e08c:	2303      	movs	r3, #3
 800e08e:	e027      	b.n	800e0e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	2200      	movs	r2, #0
 800e098:	2180      	movs	r1, #128	; 0x80
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f7ff ff07 	bl	800deae <SPI_WaitFlagStateUntilTimeout>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d007      	beq.n	800e0b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0aa:	f043 0220 	orr.w	r2, r3, #32
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	e014      	b.n	800e0e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f7ff ff5d 	bl	800df82 <SPI_WaitFifoStateUntilTimeout>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d007      	beq.n	800e0de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0d2:	f043 0220 	orr.w	r2, r3, #32
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e0da:	2303      	movs	r3, #3
 800e0dc:	e000      	b.n	800e0e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d101      	bne.n	800e0fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e01d      	b.n	800e136 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d106      	bne.n	800e114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7fa fce0 	bl	8008ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2202      	movs	r2, #2
 800e118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	3304      	adds	r3, #4
 800e124:	4619      	mov	r1, r3
 800e126:	4610      	mov	r0, r2
 800e128:	f000 fb82 	bl	800e830 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
	...

0800e140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e140:	b480      	push	{r7}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68da      	ldr	r2, [r3, #12]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f042 0201 	orr.w	r2, r2, #1
 800e156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	689a      	ldr	r2, [r3, #8]
 800e15e:	4b0c      	ldr	r3, [pc, #48]	; (800e190 <HAL_TIM_Base_Start_IT+0x50>)
 800e160:	4013      	ands	r3, r2
 800e162:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b06      	cmp	r3, #6
 800e168:	d00b      	beq.n	800e182 <HAL_TIM_Base_Start_IT+0x42>
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e170:	d007      	beq.n	800e182 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f042 0201 	orr.w	r2, r2, #1
 800e180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	00010007 	.word	0x00010007

0800e194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e01d      	b.n	800e1e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 f815 	bl	800e1ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f000 fb2c 	bl	800e830 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b083      	sub	sp, #12
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e1f2:	bf00      	nop
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b082      	sub	sp, #8
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	691b      	ldr	r3, [r3, #16]
 800e20c:	f003 0302 	and.w	r3, r3, #2
 800e210:	2b02      	cmp	r3, #2
 800e212:	d122      	bne.n	800e25a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f003 0302 	and.w	r3, r3, #2
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d11b      	bne.n	800e25a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f06f 0202 	mvn.w	r2, #2
 800e22a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	f003 0303 	and.w	r3, r3, #3
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d003      	beq.n	800e248 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fad7 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e246:	e005      	b.n	800e254 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fac9 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fada 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	691b      	ldr	r3, [r3, #16]
 800e260:	f003 0304 	and.w	r3, r3, #4
 800e264:	2b04      	cmp	r3, #4
 800e266:	d122      	bne.n	800e2ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	f003 0304 	and.w	r3, r3, #4
 800e272:	2b04      	cmp	r3, #4
 800e274:	d11b      	bne.n	800e2ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f06f 0204 	mvn.w	r2, #4
 800e27e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2202      	movs	r2, #2
 800e284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 faad 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e29a:	e005      	b.n	800e2a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fa9f 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 fab0 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	f003 0308 	and.w	r3, r3, #8
 800e2b8:	2b08      	cmp	r3, #8
 800e2ba:	d122      	bne.n	800e302 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	f003 0308 	and.w	r3, r3, #8
 800e2c6:	2b08      	cmp	r3, #8
 800e2c8:	d11b      	bne.n	800e302 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f06f 0208 	mvn.w	r2, #8
 800e2d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2204      	movs	r2, #4
 800e2d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	69db      	ldr	r3, [r3, #28]
 800e2e0:	f003 0303 	and.w	r3, r3, #3
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 fa83 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e2ee:	e005      	b.n	800e2fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 fa75 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 fa86 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2200      	movs	r2, #0
 800e300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	f003 0310 	and.w	r3, r3, #16
 800e30c:	2b10      	cmp	r3, #16
 800e30e:	d122      	bne.n	800e356 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	f003 0310 	and.w	r3, r3, #16
 800e31a:	2b10      	cmp	r3, #16
 800e31c:	d11b      	bne.n	800e356 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f06f 0210 	mvn.w	r2, #16
 800e326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2208      	movs	r2, #8
 800e32c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	69db      	ldr	r3, [r3, #28]
 800e334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d003      	beq.n	800e344 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fa59 	bl	800e7f4 <HAL_TIM_IC_CaptureCallback>
 800e342:	e005      	b.n	800e350 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fa4b 	bl	800e7e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fa5c 	bl	800e808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	2b01      	cmp	r3, #1
 800e362:	d10e      	bne.n	800e382 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	f003 0301 	and.w	r3, r3, #1
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d107      	bne.n	800e382 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f06f 0201 	mvn.w	r2, #1
 800e37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7f7 f89b 	bl	80054b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	691b      	ldr	r3, [r3, #16]
 800e388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e38c:	2b80      	cmp	r3, #128	; 0x80
 800e38e:	d10e      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e39a:	2b80      	cmp	r3, #128	; 0x80
 800e39c:	d107      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fe71 	bl	800f090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3bc:	d10e      	bne.n	800e3dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3c8:	2b80      	cmp	r3, #128	; 0x80
 800e3ca:	d107      	bne.n	800e3dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fe64 	bl	800f0a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e6:	2b40      	cmp	r3, #64	; 0x40
 800e3e8:	d10e      	bne.n	800e408 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3f4:	2b40      	cmp	r3, #64	; 0x40
 800e3f6:	d107      	bne.n	800e408 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 fa0a 	bl	800e81c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	691b      	ldr	r3, [r3, #16]
 800e40e:	f003 0320 	and.w	r3, r3, #32
 800e412:	2b20      	cmp	r3, #32
 800e414:	d10e      	bne.n	800e434 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	f003 0320 	and.w	r3, r3, #32
 800e420:	2b20      	cmp	r3, #32
 800e422:	d107      	bne.n	800e434 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f06f 0220 	mvn.w	r2, #32
 800e42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fe24 	bl	800f07c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e434:	bf00      	nop
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d101      	bne.n	800e456 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e452:	2302      	movs	r3, #2
 800e454:	e105      	b.n	800e662 <HAL_TIM_PWM_ConfigChannel+0x226>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2201      	movs	r2, #1
 800e45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2202      	movs	r2, #2
 800e462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b14      	cmp	r3, #20
 800e46a:	f200 80f0 	bhi.w	800e64e <HAL_TIM_PWM_ConfigChannel+0x212>
 800e46e:	a201      	add	r2, pc, #4	; (adr r2, 800e474 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e474:	0800e4c9 	.word	0x0800e4c9
 800e478:	0800e64f 	.word	0x0800e64f
 800e47c:	0800e64f 	.word	0x0800e64f
 800e480:	0800e64f 	.word	0x0800e64f
 800e484:	0800e509 	.word	0x0800e509
 800e488:	0800e64f 	.word	0x0800e64f
 800e48c:	0800e64f 	.word	0x0800e64f
 800e490:	0800e64f 	.word	0x0800e64f
 800e494:	0800e54b 	.word	0x0800e54b
 800e498:	0800e64f 	.word	0x0800e64f
 800e49c:	0800e64f 	.word	0x0800e64f
 800e4a0:	0800e64f 	.word	0x0800e64f
 800e4a4:	0800e58b 	.word	0x0800e58b
 800e4a8:	0800e64f 	.word	0x0800e64f
 800e4ac:	0800e64f 	.word	0x0800e64f
 800e4b0:	0800e64f 	.word	0x0800e64f
 800e4b4:	0800e5cd 	.word	0x0800e5cd
 800e4b8:	0800e64f 	.word	0x0800e64f
 800e4bc:	0800e64f 	.word	0x0800e64f
 800e4c0:	0800e64f 	.word	0x0800e64f
 800e4c4:	0800e60d 	.word	0x0800e60d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68b9      	ldr	r1, [r7, #8]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f000 fa4e 	bl	800e970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	699a      	ldr	r2, [r3, #24]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f042 0208 	orr.w	r2, r2, #8
 800e4e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	699a      	ldr	r2, [r3, #24]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f022 0204 	bic.w	r2, r2, #4
 800e4f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6999      	ldr	r1, [r3, #24]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	691a      	ldr	r2, [r3, #16]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	430a      	orrs	r2, r1
 800e504:	619a      	str	r2, [r3, #24]
      break;
 800e506:	e0a3      	b.n	800e650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 faa0 	bl	800ea54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	699a      	ldr	r2, [r3, #24]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	699a      	ldr	r2, [r3, #24]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6999      	ldr	r1, [r3, #24]
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	691b      	ldr	r3, [r3, #16]
 800e53e:	021a      	lsls	r2, r3, #8
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	430a      	orrs	r2, r1
 800e546:	619a      	str	r2, [r3, #24]
      break;
 800e548:	e082      	b.n	800e650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68b9      	ldr	r1, [r7, #8]
 800e550:	4618      	mov	r0, r3
 800e552:	f000 faf7 	bl	800eb44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	69da      	ldr	r2, [r3, #28]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f042 0208 	orr.w	r2, r2, #8
 800e564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	69da      	ldr	r2, [r3, #28]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f022 0204 	bic.w	r2, r2, #4
 800e574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	69d9      	ldr	r1, [r3, #28]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	691a      	ldr	r2, [r3, #16]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	430a      	orrs	r2, r1
 800e586:	61da      	str	r2, [r3, #28]
      break;
 800e588:	e062      	b.n	800e650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	68b9      	ldr	r1, [r7, #8]
 800e590:	4618      	mov	r0, r3
 800e592:	f000 fb4d 	bl	800ec30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	69da      	ldr	r2, [r3, #28]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	69da      	ldr	r2, [r3, #28]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	69d9      	ldr	r1, [r3, #28]
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	691b      	ldr	r3, [r3, #16]
 800e5c0:	021a      	lsls	r2, r3, #8
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	430a      	orrs	r2, r1
 800e5c8:	61da      	str	r2, [r3, #28]
      break;
 800e5ca:	e041      	b.n	800e650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68b9      	ldr	r1, [r7, #8]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 fb84 	bl	800ece0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f042 0208 	orr.w	r2, r2, #8
 800e5e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f022 0204 	bic.w	r2, r2, #4
 800e5f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	691a      	ldr	r2, [r3, #16]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	430a      	orrs	r2, r1
 800e608:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e60a:	e021      	b.n	800e650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 fbb6 	bl	800ed84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e626:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e636:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	021a      	lsls	r2, r3, #8
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	430a      	orrs	r2, r1
 800e64a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e64c:	e000      	b.n	800e650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800e64e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2201      	movs	r2, #1
 800e654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop

0800e66c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d101      	bne.n	800e684 <HAL_TIM_ConfigClockSource+0x18>
 800e680:	2302      	movs	r3, #2
 800e682:	e0a6      	b.n	800e7d2 <HAL_TIM_ConfigClockSource+0x166>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2202      	movs	r2, #2
 800e690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	4b4f      	ldr	r3, [pc, #316]	; (800e7dc <HAL_TIM_ConfigClockSource+0x170>)
 800e6a0:	4013      	ands	r3, r2
 800e6a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e6aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b40      	cmp	r3, #64	; 0x40
 800e6ba:	d067      	beq.n	800e78c <HAL_TIM_ConfigClockSource+0x120>
 800e6bc:	2b40      	cmp	r3, #64	; 0x40
 800e6be:	d80b      	bhi.n	800e6d8 <HAL_TIM_ConfigClockSource+0x6c>
 800e6c0:	2b10      	cmp	r3, #16
 800e6c2:	d073      	beq.n	800e7ac <HAL_TIM_ConfigClockSource+0x140>
 800e6c4:	2b10      	cmp	r3, #16
 800e6c6:	d802      	bhi.n	800e6ce <HAL_TIM_ConfigClockSource+0x62>
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d06f      	beq.n	800e7ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e6cc:	e078      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e6ce:	2b20      	cmp	r3, #32
 800e6d0:	d06c      	beq.n	800e7ac <HAL_TIM_ConfigClockSource+0x140>
 800e6d2:	2b30      	cmp	r3, #48	; 0x30
 800e6d4:	d06a      	beq.n	800e7ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e6d6:	e073      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e6d8:	2b70      	cmp	r3, #112	; 0x70
 800e6da:	d00d      	beq.n	800e6f8 <HAL_TIM_ConfigClockSource+0x8c>
 800e6dc:	2b70      	cmp	r3, #112	; 0x70
 800e6de:	d804      	bhi.n	800e6ea <HAL_TIM_ConfigClockSource+0x7e>
 800e6e0:	2b50      	cmp	r3, #80	; 0x50
 800e6e2:	d033      	beq.n	800e74c <HAL_TIM_ConfigClockSource+0xe0>
 800e6e4:	2b60      	cmp	r3, #96	; 0x60
 800e6e6:	d041      	beq.n	800e76c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e6e8:	e06a      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e6ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6ee:	d066      	beq.n	800e7be <HAL_TIM_ConfigClockSource+0x152>
 800e6f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6f4:	d017      	beq.n	800e726 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e6f6:	e063      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6818      	ldr	r0, [r3, #0]
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	6899      	ldr	r1, [r3, #8]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	f000 fc0a 	bl	800ef20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e71a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	609a      	str	r2, [r3, #8]
      break;
 800e724:	e04c      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6818      	ldr	r0, [r3, #0]
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	6899      	ldr	r1, [r3, #8]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	68db      	ldr	r3, [r3, #12]
 800e736:	f000 fbf3 	bl	800ef20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e748:	609a      	str	r2, [r3, #8]
      break;
 800e74a:	e039      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	6859      	ldr	r1, [r3, #4]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	461a      	mov	r2, r3
 800e75a:	f000 fb67 	bl	800ee2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2150      	movs	r1, #80	; 0x50
 800e764:	4618      	mov	r0, r3
 800e766:	f000 fbc0 	bl	800eeea <TIM_ITRx_SetConfig>
      break;
 800e76a:	e029      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6818      	ldr	r0, [r3, #0]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	6859      	ldr	r1, [r3, #4]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	461a      	mov	r2, r3
 800e77a:	f000 fb86 	bl	800ee8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2160      	movs	r1, #96	; 0x60
 800e784:	4618      	mov	r0, r3
 800e786:	f000 fbb0 	bl	800eeea <TIM_ITRx_SetConfig>
      break;
 800e78a:	e019      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6818      	ldr	r0, [r3, #0]
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	6859      	ldr	r1, [r3, #4]
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	461a      	mov	r2, r3
 800e79a:	f000 fb47 	bl	800ee2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2140      	movs	r1, #64	; 0x40
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 fba0 	bl	800eeea <TIM_ITRx_SetConfig>
      break;
 800e7aa:	e009      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	4610      	mov	r0, r2
 800e7b8:	f000 fb97 	bl	800eeea <TIM_ITRx_SetConfig>
      break;
 800e7bc:	e000      	b.n	800e7c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e7be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	fffeff88 	.word	0xfffeff88

0800e7e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a40      	ldr	r2, [pc, #256]	; (800e944 <TIM_Base_SetConfig+0x114>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d013      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e84e:	d00f      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a3d      	ldr	r2, [pc, #244]	; (800e948 <TIM_Base_SetConfig+0x118>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d00b      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a3c      	ldr	r2, [pc, #240]	; (800e94c <TIM_Base_SetConfig+0x11c>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d007      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a3b      	ldr	r2, [pc, #236]	; (800e950 <TIM_Base_SetConfig+0x120>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d003      	beq.n	800e870 <TIM_Base_SetConfig+0x40>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4a3a      	ldr	r2, [pc, #232]	; (800e954 <TIM_Base_SetConfig+0x124>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d108      	bne.n	800e882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	68fa      	ldr	r2, [r7, #12]
 800e87e:	4313      	orrs	r3, r2
 800e880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a2f      	ldr	r2, [pc, #188]	; (800e944 <TIM_Base_SetConfig+0x114>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d02b      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e890:	d027      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a2c      	ldr	r2, [pc, #176]	; (800e948 <TIM_Base_SetConfig+0x118>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d023      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a2b      	ldr	r2, [pc, #172]	; (800e94c <TIM_Base_SetConfig+0x11c>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d01f      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a2a      	ldr	r2, [pc, #168]	; (800e950 <TIM_Base_SetConfig+0x120>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d01b      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a29      	ldr	r2, [pc, #164]	; (800e954 <TIM_Base_SetConfig+0x124>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d017      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a28      	ldr	r2, [pc, #160]	; (800e958 <TIM_Base_SetConfig+0x128>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d013      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4a27      	ldr	r2, [pc, #156]	; (800e95c <TIM_Base_SetConfig+0x12c>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d00f      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4a26      	ldr	r2, [pc, #152]	; (800e960 <TIM_Base_SetConfig+0x130>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d00b      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a25      	ldr	r2, [pc, #148]	; (800e964 <TIM_Base_SetConfig+0x134>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d007      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4a24      	ldr	r2, [pc, #144]	; (800e968 <TIM_Base_SetConfig+0x138>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d003      	beq.n	800e8e2 <TIM_Base_SetConfig+0xb2>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4a23      	ldr	r2, [pc, #140]	; (800e96c <TIM_Base_SetConfig+0x13c>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d108      	bne.n	800e8f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	68fa      	ldr	r2, [r7, #12]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	689a      	ldr	r2, [r3, #8]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a0a      	ldr	r2, [pc, #40]	; (800e944 <TIM_Base_SetConfig+0x114>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d003      	beq.n	800e928 <TIM_Base_SetConfig+0xf8>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a0c      	ldr	r2, [pc, #48]	; (800e954 <TIM_Base_SetConfig+0x124>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d103      	bne.n	800e930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	691a      	ldr	r2, [r3, #16]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2201      	movs	r2, #1
 800e934:	615a      	str	r2, [r3, #20]
}
 800e936:	bf00      	nop
 800e938:	3714      	adds	r7, #20
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	40010000 	.word	0x40010000
 800e948:	40000400 	.word	0x40000400
 800e94c:	40000800 	.word	0x40000800
 800e950:	40000c00 	.word	0x40000c00
 800e954:	40010400 	.word	0x40010400
 800e958:	40014000 	.word	0x40014000
 800e95c:	40014400 	.word	0x40014400
 800e960:	40014800 	.word	0x40014800
 800e964:	40001800 	.word	0x40001800
 800e968:	40001c00 	.word	0x40001c00
 800e96c:	40002000 	.word	0x40002000

0800e970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e970:	b480      	push	{r7}
 800e972:	b087      	sub	sp, #28
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	f023 0201 	bic.w	r2, r3, #1
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a1b      	ldr	r3, [r3, #32]
 800e98a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	4b2b      	ldr	r3, [pc, #172]	; (800ea48 <TIM_OC1_SetConfig+0xd8>)
 800e99c:	4013      	ands	r3, r2
 800e99e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f023 0303 	bic.w	r3, r3, #3
 800e9a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	f023 0302 	bic.w	r3, r3, #2
 800e9b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	697a      	ldr	r2, [r7, #20]
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4a21      	ldr	r2, [pc, #132]	; (800ea4c <TIM_OC1_SetConfig+0xdc>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d003      	beq.n	800e9d4 <TIM_OC1_SetConfig+0x64>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a20      	ldr	r2, [pc, #128]	; (800ea50 <TIM_OC1_SetConfig+0xe0>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d10c      	bne.n	800e9ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	f023 0308 	bic.w	r3, r3, #8
 800e9da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	697a      	ldr	r2, [r7, #20]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	f023 0304 	bic.w	r3, r3, #4
 800e9ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4a16      	ldr	r2, [pc, #88]	; (800ea4c <TIM_OC1_SetConfig+0xdc>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d003      	beq.n	800e9fe <TIM_OC1_SetConfig+0x8e>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a15      	ldr	r2, [pc, #84]	; (800ea50 <TIM_OC1_SetConfig+0xe0>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d111      	bne.n	800ea22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	695b      	ldr	r3, [r3, #20]
 800ea12:	693a      	ldr	r2, [r7, #16]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	699b      	ldr	r3, [r3, #24]
 800ea1c:	693a      	ldr	r2, [r7, #16]
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	693a      	ldr	r2, [r7, #16]
 800ea26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	685a      	ldr	r2, [r3, #4]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	697a      	ldr	r2, [r7, #20]
 800ea3a:	621a      	str	r2, [r3, #32]
}
 800ea3c:	bf00      	nop
 800ea3e:	371c      	adds	r7, #28
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	fffeff8f 	.word	0xfffeff8f
 800ea4c:	40010000 	.word	0x40010000
 800ea50:	40010400 	.word	0x40010400

0800ea54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b087      	sub	sp, #28
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a1b      	ldr	r3, [r3, #32]
 800ea62:	f023 0210 	bic.w	r2, r3, #16
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a1b      	ldr	r3, [r3, #32]
 800ea6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	699b      	ldr	r3, [r3, #24]
 800ea7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	4b2e      	ldr	r3, [pc, #184]	; (800eb38 <TIM_OC2_SetConfig+0xe4>)
 800ea80:	4013      	ands	r3, r2
 800ea82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	021b      	lsls	r3, r3, #8
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	4313      	orrs	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f023 0320 	bic.w	r3, r3, #32
 800ea9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	011b      	lsls	r3, r3, #4
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a23      	ldr	r2, [pc, #140]	; (800eb3c <TIM_OC2_SetConfig+0xe8>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d003      	beq.n	800eabc <TIM_OC2_SetConfig+0x68>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a22      	ldr	r2, [pc, #136]	; (800eb40 <TIM_OC2_SetConfig+0xec>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d10d      	bne.n	800ead8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	011b      	lsls	r3, r3, #4
 800eaca:	697a      	ldr	r2, [r7, #20]
 800eacc:	4313      	orrs	r3, r2
 800eace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ead6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4a18      	ldr	r2, [pc, #96]	; (800eb3c <TIM_OC2_SetConfig+0xe8>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d003      	beq.n	800eae8 <TIM_OC2_SetConfig+0x94>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	4a17      	ldr	r2, [pc, #92]	; (800eb40 <TIM_OC2_SetConfig+0xec>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d113      	bne.n	800eb10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eaee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eaf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	693a      	ldr	r2, [r7, #16]
 800eb00:	4313      	orrs	r3, r2
 800eb02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	699b      	ldr	r3, [r3, #24]
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	693a      	ldr	r2, [r7, #16]
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	685a      	ldr	r2, [r3, #4]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	621a      	str	r2, [r3, #32]
}
 800eb2a:	bf00      	nop
 800eb2c:	371c      	adds	r7, #28
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	feff8fff 	.word	0xfeff8fff
 800eb3c:	40010000 	.word	0x40010000
 800eb40:	40010400 	.word	0x40010400

0800eb44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a1b      	ldr	r3, [r3, #32]
 800eb5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	69db      	ldr	r3, [r3, #28]
 800eb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	4b2d      	ldr	r3, [pc, #180]	; (800ec24 <TIM_OC3_SetConfig+0xe0>)
 800eb70:	4013      	ands	r3, r2
 800eb72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f023 0303 	bic.w	r3, r3, #3
 800eb7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	021b      	lsls	r3, r3, #8
 800eb94:	697a      	ldr	r2, [r7, #20]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a22      	ldr	r2, [pc, #136]	; (800ec28 <TIM_OC3_SetConfig+0xe4>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d003      	beq.n	800ebaa <TIM_OC3_SetConfig+0x66>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a21      	ldr	r2, [pc, #132]	; (800ec2c <TIM_OC3_SetConfig+0xe8>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d10d      	bne.n	800ebc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	021b      	lsls	r3, r3, #8
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ebc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a17      	ldr	r2, [pc, #92]	; (800ec28 <TIM_OC3_SetConfig+0xe4>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d003      	beq.n	800ebd6 <TIM_OC3_SetConfig+0x92>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4a16      	ldr	r2, [pc, #88]	; (800ec2c <TIM_OC3_SetConfig+0xe8>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d113      	bne.n	800ebfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	695b      	ldr	r3, [r3, #20]
 800ebea:	011b      	lsls	r3, r3, #4
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	699b      	ldr	r3, [r3, #24]
 800ebf6:	011b      	lsls	r3, r3, #4
 800ebf8:	693a      	ldr	r2, [r7, #16]
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	693a      	ldr	r2, [r7, #16]
 800ec02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	685a      	ldr	r2, [r3, #4]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	621a      	str	r2, [r3, #32]
}
 800ec18:	bf00      	nop
 800ec1a:	371c      	adds	r7, #28
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr
 800ec24:	fffeff8f 	.word	0xfffeff8f
 800ec28:	40010000 	.word	0x40010000
 800ec2c:	40010400 	.word	0x40010400

0800ec30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a1b      	ldr	r3, [r3, #32]
 800ec3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6a1b      	ldr	r3, [r3, #32]
 800ec4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	69db      	ldr	r3, [r3, #28]
 800ec56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	4b1e      	ldr	r3, [pc, #120]	; (800ecd4 <TIM_OC4_SetConfig+0xa4>)
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	021b      	lsls	r3, r3, #8
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	4313      	orrs	r3, r2
 800ec72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	031b      	lsls	r3, r3, #12
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	4313      	orrs	r3, r2
 800ec86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a13      	ldr	r2, [pc, #76]	; (800ecd8 <TIM_OC4_SetConfig+0xa8>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d003      	beq.n	800ec98 <TIM_OC4_SetConfig+0x68>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a12      	ldr	r2, [pc, #72]	; (800ecdc <TIM_OC4_SetConfig+0xac>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d109      	bne.n	800ecac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	695b      	ldr	r3, [r3, #20]
 800eca4:	019b      	lsls	r3, r3, #6
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	685a      	ldr	r2, [r3, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	693a      	ldr	r2, [r7, #16]
 800ecc4:	621a      	str	r2, [r3, #32]
}
 800ecc6:	bf00      	nop
 800ecc8:	371c      	adds	r7, #28
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	feff8fff 	.word	0xfeff8fff
 800ecd8:	40010000 	.word	0x40010000
 800ecdc:	40010400 	.word	0x40010400

0800ece0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b087      	sub	sp, #28
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a1b      	ldr	r3, [r3, #32]
 800ecee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6a1b      	ldr	r3, [r3, #32]
 800ecfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	4b1b      	ldr	r3, [pc, #108]	; (800ed78 <TIM_OC5_SetConfig+0x98>)
 800ed0c:	4013      	ands	r3, r2
 800ed0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	4313      	orrs	r3, r2
 800ed18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ed20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	041b      	lsls	r3, r3, #16
 800ed28:	693a      	ldr	r2, [r7, #16]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a12      	ldr	r2, [pc, #72]	; (800ed7c <TIM_OC5_SetConfig+0x9c>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d003      	beq.n	800ed3e <TIM_OC5_SetConfig+0x5e>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a11      	ldr	r2, [pc, #68]	; (800ed80 <TIM_OC5_SetConfig+0xa0>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d109      	bne.n	800ed52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	695b      	ldr	r3, [r3, #20]
 800ed4a:	021b      	lsls	r3, r3, #8
 800ed4c:	697a      	ldr	r2, [r7, #20]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	621a      	str	r2, [r3, #32]
}
 800ed6c:	bf00      	nop
 800ed6e:	371c      	adds	r7, #28
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr
 800ed78:	fffeff8f 	.word	0xfffeff8f
 800ed7c:	40010000 	.word	0x40010000
 800ed80:	40010400 	.word	0x40010400

0800ed84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b087      	sub	sp, #28
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6a1b      	ldr	r3, [r3, #32]
 800ed92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	4b1c      	ldr	r3, [pc, #112]	; (800ee20 <TIM_OC6_SetConfig+0x9c>)
 800edb0:	4013      	ands	r3, r2
 800edb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	021b      	lsls	r3, r3, #8
 800edba:	68fa      	ldr	r2, [r7, #12]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	051b      	lsls	r3, r3, #20
 800edce:	693a      	ldr	r2, [r7, #16]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a13      	ldr	r2, [pc, #76]	; (800ee24 <TIM_OC6_SetConfig+0xa0>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d003      	beq.n	800ede4 <TIM_OC6_SetConfig+0x60>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a12      	ldr	r2, [pc, #72]	; (800ee28 <TIM_OC6_SetConfig+0xa4>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d109      	bne.n	800edf8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800edea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	029b      	lsls	r3, r3, #10
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	685a      	ldr	r2, [r3, #4]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	693a      	ldr	r2, [r7, #16]
 800ee10:	621a      	str	r2, [r3, #32]
}
 800ee12:	bf00      	nop
 800ee14:	371c      	adds	r7, #28
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	feff8fff 	.word	0xfeff8fff
 800ee24:	40010000 	.word	0x40010000
 800ee28:	40010400 	.word	0x40010400

0800ee2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b087      	sub	sp, #28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6a1b      	ldr	r3, [r3, #32]
 800ee3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	f023 0201 	bic.w	r2, r3, #1
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	011b      	lsls	r3, r3, #4
 800ee5c:	693a      	ldr	r2, [r7, #16]
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	f023 030a 	bic.w	r3, r3, #10
 800ee68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	693a      	ldr	r2, [r7, #16]
 800ee76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	621a      	str	r2, [r3, #32]
}
 800ee7e:	bf00      	nop
 800ee80:	371c      	adds	r7, #28
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee8a:	b480      	push	{r7}
 800ee8c:	b087      	sub	sp, #28
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	60b9      	str	r1, [r7, #8]
 800ee94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	f023 0210 	bic.w	r2, r3, #16
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	699b      	ldr	r3, [r3, #24]
 800eea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6a1b      	ldr	r3, [r3, #32]
 800eeac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eeb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	031b      	lsls	r3, r3, #12
 800eeba:	697a      	ldr	r2, [r7, #20]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800eec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	011b      	lsls	r3, r3, #4
 800eecc:	693a      	ldr	r2, [r7, #16]
 800eece:	4313      	orrs	r3, r2
 800eed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	697a      	ldr	r2, [r7, #20]
 800eed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	621a      	str	r2, [r3, #32]
}
 800eede:	bf00      	nop
 800eee0:	371c      	adds	r7, #28
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b085      	sub	sp, #20
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ef02:	683a      	ldr	r2, [r7, #0]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	f043 0307 	orr.w	r3, r3, #7
 800ef0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	609a      	str	r2, [r3, #8]
}
 800ef14:	bf00      	nop
 800ef16:	3714      	adds	r7, #20
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b087      	sub	sp, #28
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
 800ef2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	689b      	ldr	r3, [r3, #8]
 800ef32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ef3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	021a      	lsls	r2, r3, #8
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	431a      	orrs	r2, r3
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	4313      	orrs	r3, r2
 800ef48:	697a      	ldr	r2, [r7, #20]
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	697a      	ldr	r2, [r7, #20]
 800ef52:	609a      	str	r2, [r3, #8]
}
 800ef54:	bf00      	nop
 800ef56:	371c      	adds	r7, #28
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b085      	sub	sp, #20
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d101      	bne.n	800ef78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef74:	2302      	movs	r3, #2
 800ef76:	e06d      	b.n	800f054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2202      	movs	r2, #2
 800ef84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a30      	ldr	r2, [pc, #192]	; (800f060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d004      	beq.n	800efac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a2f      	ldr	r2, [pc, #188]	; (800f064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d108      	bne.n	800efbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800efb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	4313      	orrs	r3, r2
 800efbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	4313      	orrs	r3, r2
 800efce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a20      	ldr	r2, [pc, #128]	; (800f060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d022      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efea:	d01d      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a1d      	ldr	r2, [pc, #116]	; (800f068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d018      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a1c      	ldr	r2, [pc, #112]	; (800f06c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d013      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a1a      	ldr	r2, [pc, #104]	; (800f070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d00e      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4a15      	ldr	r2, [pc, #84]	; (800f064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d009      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a16      	ldr	r2, [pc, #88]	; (800f074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d004      	beq.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4a15      	ldr	r2, [pc, #84]	; (800f078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d10c      	bne.n	800f042 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f02e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	4313      	orrs	r3, r2
 800f038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	40010000 	.word	0x40010000
 800f064:	40010400 	.word	0x40010400
 800f068:	40000400 	.word	0x40000400
 800f06c:	40000800 	.word	0x40000800
 800f070:	40000c00 	.word	0x40000c00
 800f074:	40014000 	.word	0x40014000
 800f078:	40001800 	.word	0x40001800

0800f07c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f084:	bf00      	nop
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f098:	bf00      	nop
 800f09a:	370c      	adds	r7, #12
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f0ac:	bf00      	nop
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d101      	bne.n	800f0ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e040      	b.n	800f14c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d106      	bne.n	800f0e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f7f9 fd8c 	bl	8008bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2224      	movs	r2, #36	; 0x24
 800f0e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f022 0201 	bic.w	r2, r2, #1
 800f0f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 f960 	bl	800f3bc <UART_SetConfig>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d101      	bne.n	800f106 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	e022      	b.n	800f14c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d002      	beq.n	800f114 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 fbfe 	bl	800f910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	681a      	ldr	r2, [r3, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f042 0201 	orr.w	r2, r2, #1
 800f142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 fc85 	bl	800fa54 <UART_CheckIdleState>
 800f14a:	4603      	mov	r3, r0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08a      	sub	sp, #40	; 0x28
 800f158:	af02      	add	r7, sp, #8
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	4613      	mov	r3, r2
 800f162:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f168:	2b20      	cmp	r3, #32
 800f16a:	d17f      	bne.n	800f26c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d002      	beq.n	800f178 <HAL_UART_Transmit+0x24>
 800f172:	88fb      	ldrh	r3, [r7, #6]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d101      	bne.n	800f17c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f178:	2301      	movs	r3, #1
 800f17a:	e078      	b.n	800f26e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f182:	2b01      	cmp	r3, #1
 800f184:	d101      	bne.n	800f18a <HAL_UART_Transmit+0x36>
 800f186:	2302      	movs	r3, #2
 800f188:	e071      	b.n	800f26e <HAL_UART_Transmit+0x11a>
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2201      	movs	r2, #1
 800f18e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2200      	movs	r2, #0
 800f196:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2221      	movs	r2, #33	; 0x21
 800f19c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f19e:	f7fa fc31 	bl	8009a04 <HAL_GetTick>
 800f1a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	88fa      	ldrh	r2, [r7, #6]
 800f1a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	88fa      	ldrh	r2, [r7, #6]
 800f1b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1bc:	d108      	bne.n	800f1d0 <HAL_UART_Transmit+0x7c>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d104      	bne.n	800f1d0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	61bb      	str	r3, [r7, #24]
 800f1ce:	e003      	b.n	800f1d8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f1e0:	e02c      	b.n	800f23c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	2180      	movs	r1, #128	; 0x80
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f000 fc76 	bl	800fade <UART_WaitOnFlagUntilTimeout>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e038      	b.n	800f26e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d10b      	bne.n	800f21a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	461a      	mov	r2, r3
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	3302      	adds	r3, #2
 800f216:	61bb      	str	r3, [r7, #24]
 800f218:	e007      	b.n	800f22a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	781a      	ldrb	r2, [r3, #0]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	3301      	adds	r3, #1
 800f228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f230:	b29b      	uxth	r3, r3
 800f232:	3b01      	subs	r3, #1
 800f234:	b29a      	uxth	r2, r3
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f242:	b29b      	uxth	r3, r3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1cc      	bne.n	800f1e2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	2200      	movs	r2, #0
 800f250:	2140      	movs	r1, #64	; 0x40
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f000 fc43 	bl	800fade <UART_WaitOnFlagUntilTimeout>
 800f258:	4603      	mov	r3, r0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d001      	beq.n	800f262 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800f25e:	2303      	movs	r3, #3
 800f260:	e005      	b.n	800f26e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2220      	movs	r2, #32
 800f266:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f268:	2300      	movs	r3, #0
 800f26a:	e000      	b.n	800f26e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800f26c:	2302      	movs	r3, #2
  }
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3720      	adds	r7, #32
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
	...

0800f278 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	4613      	mov	r3, r2
 800f284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f28a:	2b20      	cmp	r3, #32
 800f28c:	d16c      	bne.n	800f368 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d002      	beq.n	800f29a <HAL_UART_Receive_DMA+0x22>
 800f294:	88fb      	ldrh	r3, [r7, #6]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800f29a:	2301      	movs	r3, #1
 800f29c:	e065      	b.n	800f36a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d101      	bne.n	800f2ac <HAL_UART_Receive_DMA+0x34>
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	e05e      	b.n	800f36a <HAL_UART_Receive_DMA+0xf2>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	88fa      	ldrh	r2, [r7, #6]
 800f2be:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2222      	movs	r2, #34	; 0x22
 800f2cc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d02a      	beq.n	800f32c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2da:	4a26      	ldr	r2, [pc, #152]	; (800f374 <HAL_UART_Receive_DMA+0xfc>)
 800f2dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e2:	4a25      	ldr	r2, [pc, #148]	; (800f378 <HAL_UART_Receive_DMA+0x100>)
 800f2e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ea:	4a24      	ldr	r2, [pc, #144]	; (800f37c <HAL_UART_Receive_DMA+0x104>)
 800f2ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	3324      	adds	r3, #36	; 0x24
 800f300:	4619      	mov	r1, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f306:	461a      	mov	r2, r3
 800f308:	88fb      	ldrh	r3, [r7, #6]
 800f30a:	f7fb fae5 	bl	800a8d8 <HAL_DMA_Start_IT>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00b      	beq.n	800f32c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2210      	movs	r2, #16
 800f318:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2220      	movs	r2, #32
 800f326:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800f328:	2301      	movs	r3, #1
 800f32a:	e01e      	b.n	800f36a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2200      	movs	r2, #0
 800f330:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f342:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689a      	ldr	r2, [r3, #8]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f042 0201 	orr.w	r2, r2, #1
 800f352:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	689a      	ldr	r2, [r3, #8]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f362:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	e000      	b.n	800f36a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800f368:	2302      	movs	r3, #2
  }
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	0800fc3f 	.word	0x0800fc3f
 800f378:	0800fca3 	.word	0x0800fca3
 800f37c:	0800fcbf 	.word	0x0800fcbf

0800f380 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f39c:	bf00      	nop
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f3b0:	bf00      	nop
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b088      	sub	sp, #32
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	689a      	ldr	r2, [r3, #8]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	431a      	orrs	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	695b      	ldr	r3, [r3, #20]
 800f3da:	431a      	orrs	r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	69db      	ldr	r3, [r3, #28]
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	4bb1      	ldr	r3, [pc, #708]	; (800f6b0 <UART_SetConfig+0x2f4>)
 800f3ec:	4013      	ands	r3, r2
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	6812      	ldr	r2, [r2, #0]
 800f3f2:	6939      	ldr	r1, [r7, #16]
 800f3f4:	430b      	orrs	r3, r1
 800f3f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	68da      	ldr	r2, [r3, #12]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	430a      	orrs	r2, r1
 800f40c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	699b      	ldr	r3, [r3, #24]
 800f412:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6a1b      	ldr	r3, [r3, #32]
 800f418:	693a      	ldr	r2, [r7, #16]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	693a      	ldr	r2, [r7, #16]
 800f42e:	430a      	orrs	r2, r1
 800f430:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a9f      	ldr	r2, [pc, #636]	; (800f6b4 <UART_SetConfig+0x2f8>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d121      	bne.n	800f480 <UART_SetConfig+0xc4>
 800f43c:	4b9e      	ldr	r3, [pc, #632]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f442:	f003 0303 	and.w	r3, r3, #3
 800f446:	2b03      	cmp	r3, #3
 800f448:	d816      	bhi.n	800f478 <UART_SetConfig+0xbc>
 800f44a:	a201      	add	r2, pc, #4	; (adr r2, 800f450 <UART_SetConfig+0x94>)
 800f44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f450:	0800f461 	.word	0x0800f461
 800f454:	0800f46d 	.word	0x0800f46d
 800f458:	0800f467 	.word	0x0800f467
 800f45c:	0800f473 	.word	0x0800f473
 800f460:	2301      	movs	r3, #1
 800f462:	77fb      	strb	r3, [r7, #31]
 800f464:	e151      	b.n	800f70a <UART_SetConfig+0x34e>
 800f466:	2302      	movs	r3, #2
 800f468:	77fb      	strb	r3, [r7, #31]
 800f46a:	e14e      	b.n	800f70a <UART_SetConfig+0x34e>
 800f46c:	2304      	movs	r3, #4
 800f46e:	77fb      	strb	r3, [r7, #31]
 800f470:	e14b      	b.n	800f70a <UART_SetConfig+0x34e>
 800f472:	2308      	movs	r3, #8
 800f474:	77fb      	strb	r3, [r7, #31]
 800f476:	e148      	b.n	800f70a <UART_SetConfig+0x34e>
 800f478:	2310      	movs	r3, #16
 800f47a:	77fb      	strb	r3, [r7, #31]
 800f47c:	bf00      	nop
 800f47e:	e144      	b.n	800f70a <UART_SetConfig+0x34e>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a8d      	ldr	r2, [pc, #564]	; (800f6bc <UART_SetConfig+0x300>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d134      	bne.n	800f4f4 <UART_SetConfig+0x138>
 800f48a:	4b8b      	ldr	r3, [pc, #556]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f490:	f003 030c 	and.w	r3, r3, #12
 800f494:	2b0c      	cmp	r3, #12
 800f496:	d829      	bhi.n	800f4ec <UART_SetConfig+0x130>
 800f498:	a201      	add	r2, pc, #4	; (adr r2, 800f4a0 <UART_SetConfig+0xe4>)
 800f49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f49e:	bf00      	nop
 800f4a0:	0800f4d5 	.word	0x0800f4d5
 800f4a4:	0800f4ed 	.word	0x0800f4ed
 800f4a8:	0800f4ed 	.word	0x0800f4ed
 800f4ac:	0800f4ed 	.word	0x0800f4ed
 800f4b0:	0800f4e1 	.word	0x0800f4e1
 800f4b4:	0800f4ed 	.word	0x0800f4ed
 800f4b8:	0800f4ed 	.word	0x0800f4ed
 800f4bc:	0800f4ed 	.word	0x0800f4ed
 800f4c0:	0800f4db 	.word	0x0800f4db
 800f4c4:	0800f4ed 	.word	0x0800f4ed
 800f4c8:	0800f4ed 	.word	0x0800f4ed
 800f4cc:	0800f4ed 	.word	0x0800f4ed
 800f4d0:	0800f4e7 	.word	0x0800f4e7
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	77fb      	strb	r3, [r7, #31]
 800f4d8:	e117      	b.n	800f70a <UART_SetConfig+0x34e>
 800f4da:	2302      	movs	r3, #2
 800f4dc:	77fb      	strb	r3, [r7, #31]
 800f4de:	e114      	b.n	800f70a <UART_SetConfig+0x34e>
 800f4e0:	2304      	movs	r3, #4
 800f4e2:	77fb      	strb	r3, [r7, #31]
 800f4e4:	e111      	b.n	800f70a <UART_SetConfig+0x34e>
 800f4e6:	2308      	movs	r3, #8
 800f4e8:	77fb      	strb	r3, [r7, #31]
 800f4ea:	e10e      	b.n	800f70a <UART_SetConfig+0x34e>
 800f4ec:	2310      	movs	r3, #16
 800f4ee:	77fb      	strb	r3, [r7, #31]
 800f4f0:	bf00      	nop
 800f4f2:	e10a      	b.n	800f70a <UART_SetConfig+0x34e>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4a71      	ldr	r2, [pc, #452]	; (800f6c0 <UART_SetConfig+0x304>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d120      	bne.n	800f540 <UART_SetConfig+0x184>
 800f4fe:	4b6e      	ldr	r3, [pc, #440]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f504:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f508:	2b10      	cmp	r3, #16
 800f50a:	d00f      	beq.n	800f52c <UART_SetConfig+0x170>
 800f50c:	2b10      	cmp	r3, #16
 800f50e:	d802      	bhi.n	800f516 <UART_SetConfig+0x15a>
 800f510:	2b00      	cmp	r3, #0
 800f512:	d005      	beq.n	800f520 <UART_SetConfig+0x164>
 800f514:	e010      	b.n	800f538 <UART_SetConfig+0x17c>
 800f516:	2b20      	cmp	r3, #32
 800f518:	d005      	beq.n	800f526 <UART_SetConfig+0x16a>
 800f51a:	2b30      	cmp	r3, #48	; 0x30
 800f51c:	d009      	beq.n	800f532 <UART_SetConfig+0x176>
 800f51e:	e00b      	b.n	800f538 <UART_SetConfig+0x17c>
 800f520:	2300      	movs	r3, #0
 800f522:	77fb      	strb	r3, [r7, #31]
 800f524:	e0f1      	b.n	800f70a <UART_SetConfig+0x34e>
 800f526:	2302      	movs	r3, #2
 800f528:	77fb      	strb	r3, [r7, #31]
 800f52a:	e0ee      	b.n	800f70a <UART_SetConfig+0x34e>
 800f52c:	2304      	movs	r3, #4
 800f52e:	77fb      	strb	r3, [r7, #31]
 800f530:	e0eb      	b.n	800f70a <UART_SetConfig+0x34e>
 800f532:	2308      	movs	r3, #8
 800f534:	77fb      	strb	r3, [r7, #31]
 800f536:	e0e8      	b.n	800f70a <UART_SetConfig+0x34e>
 800f538:	2310      	movs	r3, #16
 800f53a:	77fb      	strb	r3, [r7, #31]
 800f53c:	bf00      	nop
 800f53e:	e0e4      	b.n	800f70a <UART_SetConfig+0x34e>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a5f      	ldr	r2, [pc, #380]	; (800f6c4 <UART_SetConfig+0x308>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d120      	bne.n	800f58c <UART_SetConfig+0x1d0>
 800f54a:	4b5b      	ldr	r3, [pc, #364]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f550:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f554:	2b40      	cmp	r3, #64	; 0x40
 800f556:	d00f      	beq.n	800f578 <UART_SetConfig+0x1bc>
 800f558:	2b40      	cmp	r3, #64	; 0x40
 800f55a:	d802      	bhi.n	800f562 <UART_SetConfig+0x1a6>
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d005      	beq.n	800f56c <UART_SetConfig+0x1b0>
 800f560:	e010      	b.n	800f584 <UART_SetConfig+0x1c8>
 800f562:	2b80      	cmp	r3, #128	; 0x80
 800f564:	d005      	beq.n	800f572 <UART_SetConfig+0x1b6>
 800f566:	2bc0      	cmp	r3, #192	; 0xc0
 800f568:	d009      	beq.n	800f57e <UART_SetConfig+0x1c2>
 800f56a:	e00b      	b.n	800f584 <UART_SetConfig+0x1c8>
 800f56c:	2300      	movs	r3, #0
 800f56e:	77fb      	strb	r3, [r7, #31]
 800f570:	e0cb      	b.n	800f70a <UART_SetConfig+0x34e>
 800f572:	2302      	movs	r3, #2
 800f574:	77fb      	strb	r3, [r7, #31]
 800f576:	e0c8      	b.n	800f70a <UART_SetConfig+0x34e>
 800f578:	2304      	movs	r3, #4
 800f57a:	77fb      	strb	r3, [r7, #31]
 800f57c:	e0c5      	b.n	800f70a <UART_SetConfig+0x34e>
 800f57e:	2308      	movs	r3, #8
 800f580:	77fb      	strb	r3, [r7, #31]
 800f582:	e0c2      	b.n	800f70a <UART_SetConfig+0x34e>
 800f584:	2310      	movs	r3, #16
 800f586:	77fb      	strb	r3, [r7, #31]
 800f588:	bf00      	nop
 800f58a:	e0be      	b.n	800f70a <UART_SetConfig+0x34e>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4a4d      	ldr	r2, [pc, #308]	; (800f6c8 <UART_SetConfig+0x30c>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d124      	bne.n	800f5e0 <UART_SetConfig+0x224>
 800f596:	4b48      	ldr	r3, [pc, #288]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f59c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5a4:	d012      	beq.n	800f5cc <UART_SetConfig+0x210>
 800f5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5aa:	d802      	bhi.n	800f5b2 <UART_SetConfig+0x1f6>
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d007      	beq.n	800f5c0 <UART_SetConfig+0x204>
 800f5b0:	e012      	b.n	800f5d8 <UART_SetConfig+0x21c>
 800f5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5b6:	d006      	beq.n	800f5c6 <UART_SetConfig+0x20a>
 800f5b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5bc:	d009      	beq.n	800f5d2 <UART_SetConfig+0x216>
 800f5be:	e00b      	b.n	800f5d8 <UART_SetConfig+0x21c>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	77fb      	strb	r3, [r7, #31]
 800f5c4:	e0a1      	b.n	800f70a <UART_SetConfig+0x34e>
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	77fb      	strb	r3, [r7, #31]
 800f5ca:	e09e      	b.n	800f70a <UART_SetConfig+0x34e>
 800f5cc:	2304      	movs	r3, #4
 800f5ce:	77fb      	strb	r3, [r7, #31]
 800f5d0:	e09b      	b.n	800f70a <UART_SetConfig+0x34e>
 800f5d2:	2308      	movs	r3, #8
 800f5d4:	77fb      	strb	r3, [r7, #31]
 800f5d6:	e098      	b.n	800f70a <UART_SetConfig+0x34e>
 800f5d8:	2310      	movs	r3, #16
 800f5da:	77fb      	strb	r3, [r7, #31]
 800f5dc:	bf00      	nop
 800f5de:	e094      	b.n	800f70a <UART_SetConfig+0x34e>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a39      	ldr	r2, [pc, #228]	; (800f6cc <UART_SetConfig+0x310>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d124      	bne.n	800f634 <UART_SetConfig+0x278>
 800f5ea:	4b33      	ldr	r3, [pc, #204]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5f8:	d012      	beq.n	800f620 <UART_SetConfig+0x264>
 800f5fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5fe:	d802      	bhi.n	800f606 <UART_SetConfig+0x24a>
 800f600:	2b00      	cmp	r3, #0
 800f602:	d007      	beq.n	800f614 <UART_SetConfig+0x258>
 800f604:	e012      	b.n	800f62c <UART_SetConfig+0x270>
 800f606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f60a:	d006      	beq.n	800f61a <UART_SetConfig+0x25e>
 800f60c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f610:	d009      	beq.n	800f626 <UART_SetConfig+0x26a>
 800f612:	e00b      	b.n	800f62c <UART_SetConfig+0x270>
 800f614:	2301      	movs	r3, #1
 800f616:	77fb      	strb	r3, [r7, #31]
 800f618:	e077      	b.n	800f70a <UART_SetConfig+0x34e>
 800f61a:	2302      	movs	r3, #2
 800f61c:	77fb      	strb	r3, [r7, #31]
 800f61e:	e074      	b.n	800f70a <UART_SetConfig+0x34e>
 800f620:	2304      	movs	r3, #4
 800f622:	77fb      	strb	r3, [r7, #31]
 800f624:	e071      	b.n	800f70a <UART_SetConfig+0x34e>
 800f626:	2308      	movs	r3, #8
 800f628:	77fb      	strb	r3, [r7, #31]
 800f62a:	e06e      	b.n	800f70a <UART_SetConfig+0x34e>
 800f62c:	2310      	movs	r3, #16
 800f62e:	77fb      	strb	r3, [r7, #31]
 800f630:	bf00      	nop
 800f632:	e06a      	b.n	800f70a <UART_SetConfig+0x34e>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a25      	ldr	r2, [pc, #148]	; (800f6d0 <UART_SetConfig+0x314>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d124      	bne.n	800f688 <UART_SetConfig+0x2cc>
 800f63e:	4b1e      	ldr	r3, [pc, #120]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f644:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f64c:	d012      	beq.n	800f674 <UART_SetConfig+0x2b8>
 800f64e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f652:	d802      	bhi.n	800f65a <UART_SetConfig+0x29e>
 800f654:	2b00      	cmp	r3, #0
 800f656:	d007      	beq.n	800f668 <UART_SetConfig+0x2ac>
 800f658:	e012      	b.n	800f680 <UART_SetConfig+0x2c4>
 800f65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f65e:	d006      	beq.n	800f66e <UART_SetConfig+0x2b2>
 800f660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f664:	d009      	beq.n	800f67a <UART_SetConfig+0x2be>
 800f666:	e00b      	b.n	800f680 <UART_SetConfig+0x2c4>
 800f668:	2300      	movs	r3, #0
 800f66a:	77fb      	strb	r3, [r7, #31]
 800f66c:	e04d      	b.n	800f70a <UART_SetConfig+0x34e>
 800f66e:	2302      	movs	r3, #2
 800f670:	77fb      	strb	r3, [r7, #31]
 800f672:	e04a      	b.n	800f70a <UART_SetConfig+0x34e>
 800f674:	2304      	movs	r3, #4
 800f676:	77fb      	strb	r3, [r7, #31]
 800f678:	e047      	b.n	800f70a <UART_SetConfig+0x34e>
 800f67a:	2308      	movs	r3, #8
 800f67c:	77fb      	strb	r3, [r7, #31]
 800f67e:	e044      	b.n	800f70a <UART_SetConfig+0x34e>
 800f680:	2310      	movs	r3, #16
 800f682:	77fb      	strb	r3, [r7, #31]
 800f684:	bf00      	nop
 800f686:	e040      	b.n	800f70a <UART_SetConfig+0x34e>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a11      	ldr	r2, [pc, #68]	; (800f6d4 <UART_SetConfig+0x318>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d139      	bne.n	800f706 <UART_SetConfig+0x34a>
 800f692:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <UART_SetConfig+0x2fc>)
 800f694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f69c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6a0:	d027      	beq.n	800f6f2 <UART_SetConfig+0x336>
 800f6a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6a6:	d817      	bhi.n	800f6d8 <UART_SetConfig+0x31c>
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d01c      	beq.n	800f6e6 <UART_SetConfig+0x32a>
 800f6ac:	e027      	b.n	800f6fe <UART_SetConfig+0x342>
 800f6ae:	bf00      	nop
 800f6b0:	efff69f3 	.word	0xefff69f3
 800f6b4:	40011000 	.word	0x40011000
 800f6b8:	40023800 	.word	0x40023800
 800f6bc:	40004400 	.word	0x40004400
 800f6c0:	40004800 	.word	0x40004800
 800f6c4:	40004c00 	.word	0x40004c00
 800f6c8:	40005000 	.word	0x40005000
 800f6cc:	40011400 	.word	0x40011400
 800f6d0:	40007800 	.word	0x40007800
 800f6d4:	40007c00 	.word	0x40007c00
 800f6d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6dc:	d006      	beq.n	800f6ec <UART_SetConfig+0x330>
 800f6de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f6e2:	d009      	beq.n	800f6f8 <UART_SetConfig+0x33c>
 800f6e4:	e00b      	b.n	800f6fe <UART_SetConfig+0x342>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	77fb      	strb	r3, [r7, #31]
 800f6ea:	e00e      	b.n	800f70a <UART_SetConfig+0x34e>
 800f6ec:	2302      	movs	r3, #2
 800f6ee:	77fb      	strb	r3, [r7, #31]
 800f6f0:	e00b      	b.n	800f70a <UART_SetConfig+0x34e>
 800f6f2:	2304      	movs	r3, #4
 800f6f4:	77fb      	strb	r3, [r7, #31]
 800f6f6:	e008      	b.n	800f70a <UART_SetConfig+0x34e>
 800f6f8:	2308      	movs	r3, #8
 800f6fa:	77fb      	strb	r3, [r7, #31]
 800f6fc:	e005      	b.n	800f70a <UART_SetConfig+0x34e>
 800f6fe:	2310      	movs	r3, #16
 800f700:	77fb      	strb	r3, [r7, #31]
 800f702:	bf00      	nop
 800f704:	e001      	b.n	800f70a <UART_SetConfig+0x34e>
 800f706:	2310      	movs	r3, #16
 800f708:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	69db      	ldr	r3, [r3, #28]
 800f70e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f712:	d17f      	bne.n	800f814 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800f714:	7ffb      	ldrb	r3, [r7, #31]
 800f716:	2b08      	cmp	r3, #8
 800f718:	d85c      	bhi.n	800f7d4 <UART_SetConfig+0x418>
 800f71a:	a201      	add	r2, pc, #4	; (adr r2, 800f720 <UART_SetConfig+0x364>)
 800f71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f720:	0800f745 	.word	0x0800f745
 800f724:	0800f765 	.word	0x0800f765
 800f728:	0800f785 	.word	0x0800f785
 800f72c:	0800f7d5 	.word	0x0800f7d5
 800f730:	0800f79d 	.word	0x0800f79d
 800f734:	0800f7d5 	.word	0x0800f7d5
 800f738:	0800f7d5 	.word	0x0800f7d5
 800f73c:	0800f7d5 	.word	0x0800f7d5
 800f740:	0800f7bd 	.word	0x0800f7bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f744:	f7fd fb74 	bl	800ce30 <HAL_RCC_GetPCLK1Freq>
 800f748:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	005a      	lsls	r2, r3, #1
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	085b      	lsrs	r3, r3, #1
 800f754:	441a      	add	r2, r3
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f75e:	b29b      	uxth	r3, r3
 800f760:	61bb      	str	r3, [r7, #24]
        break;
 800f762:	e03a      	b.n	800f7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f764:	f7fd fb78 	bl	800ce58 <HAL_RCC_GetPCLK2Freq>
 800f768:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	005a      	lsls	r2, r3, #1
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	085b      	lsrs	r3, r3, #1
 800f774:	441a      	add	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f77e:	b29b      	uxth	r3, r3
 800f780:	61bb      	str	r3, [r7, #24]
        break;
 800f782:	e02a      	b.n	800f7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	085a      	lsrs	r2, r3, #1
 800f78a:	4b5f      	ldr	r3, [pc, #380]	; (800f908 <UART_SetConfig+0x54c>)
 800f78c:	4413      	add	r3, r2
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	6852      	ldr	r2, [r2, #4]
 800f792:	fbb3 f3f2 	udiv	r3, r3, r2
 800f796:	b29b      	uxth	r3, r3
 800f798:	61bb      	str	r3, [r7, #24]
        break;
 800f79a:	e01e      	b.n	800f7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f79c:	f7fd fa8a 	bl	800ccb4 <HAL_RCC_GetSysClockFreq>
 800f7a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	005a      	lsls	r2, r3, #1
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	085b      	lsrs	r3, r3, #1
 800f7ac:	441a      	add	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	61bb      	str	r3, [r7, #24]
        break;
 800f7ba:	e00e      	b.n	800f7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	085b      	lsrs	r3, r3, #1
 800f7c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	61bb      	str	r3, [r7, #24]
        break;
 800f7d2:	e002      	b.n	800f7da <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	75fb      	strb	r3, [r7, #23]
        break;
 800f7d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	2b0f      	cmp	r3, #15
 800f7de:	d916      	bls.n	800f80e <UART_SetConfig+0x452>
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7e6:	d212      	bcs.n	800f80e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	f023 030f 	bic.w	r3, r3, #15
 800f7f0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f7f2:	69bb      	ldr	r3, [r7, #24]
 800f7f4:	085b      	lsrs	r3, r3, #1
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	f003 0307 	and.w	r3, r3, #7
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	897b      	ldrh	r3, [r7, #10]
 800f800:	4313      	orrs	r3, r2
 800f802:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	897a      	ldrh	r2, [r7, #10]
 800f80a:	60da      	str	r2, [r3, #12]
 800f80c:	e070      	b.n	800f8f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f80e:	2301      	movs	r3, #1
 800f810:	75fb      	strb	r3, [r7, #23]
 800f812:	e06d      	b.n	800f8f0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800f814:	7ffb      	ldrb	r3, [r7, #31]
 800f816:	2b08      	cmp	r3, #8
 800f818:	d859      	bhi.n	800f8ce <UART_SetConfig+0x512>
 800f81a:	a201      	add	r2, pc, #4	; (adr r2, 800f820 <UART_SetConfig+0x464>)
 800f81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f820:	0800f845 	.word	0x0800f845
 800f824:	0800f863 	.word	0x0800f863
 800f828:	0800f881 	.word	0x0800f881
 800f82c:	0800f8cf 	.word	0x0800f8cf
 800f830:	0800f899 	.word	0x0800f899
 800f834:	0800f8cf 	.word	0x0800f8cf
 800f838:	0800f8cf 	.word	0x0800f8cf
 800f83c:	0800f8cf 	.word	0x0800f8cf
 800f840:	0800f8b7 	.word	0x0800f8b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f844:	f7fd faf4 	bl	800ce30 <HAL_RCC_GetPCLK1Freq>
 800f848:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	085a      	lsrs	r2, r3, #1
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	441a      	add	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	fbb2 f3f3 	udiv	r3, r2, r3
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	61bb      	str	r3, [r7, #24]
        break;
 800f860:	e038      	b.n	800f8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f862:	f7fd faf9 	bl	800ce58 <HAL_RCC_GetPCLK2Freq>
 800f866:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	085a      	lsrs	r2, r3, #1
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	441a      	add	r2, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	fbb2 f3f3 	udiv	r3, r2, r3
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	61bb      	str	r3, [r7, #24]
        break;
 800f87e:	e029      	b.n	800f8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	085a      	lsrs	r2, r3, #1
 800f886:	4b21      	ldr	r3, [pc, #132]	; (800f90c <UART_SetConfig+0x550>)
 800f888:	4413      	add	r3, r2
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	6852      	ldr	r2, [r2, #4]
 800f88e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f892:	b29b      	uxth	r3, r3
 800f894:	61bb      	str	r3, [r7, #24]
        break;
 800f896:	e01d      	b.n	800f8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f898:	f7fd fa0c 	bl	800ccb4 <HAL_RCC_GetSysClockFreq>
 800f89c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	085a      	lsrs	r2, r3, #1
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	441a      	add	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	61bb      	str	r3, [r7, #24]
        break;
 800f8b4:	e00e      	b.n	800f8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	085b      	lsrs	r3, r3, #1
 800f8bc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	61bb      	str	r3, [r7, #24]
        break;
 800f8cc:	e002      	b.n	800f8d4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	75fb      	strb	r3, [r7, #23]
        break;
 800f8d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	2b0f      	cmp	r3, #15
 800f8d8:	d908      	bls.n	800f8ec <UART_SetConfig+0x530>
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8e0:	d204      	bcs.n	800f8ec <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	69ba      	ldr	r2, [r7, #24]
 800f8e8:	60da      	str	r2, [r3, #12]
 800f8ea:	e001      	b.n	800f8f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3720      	adds	r7, #32
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	01e84800 	.word	0x01e84800
 800f90c:	00f42400 	.word	0x00f42400

0800f910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91c:	f003 0301 	and.w	r3, r3, #1
 800f920:	2b00      	cmp	r3, #0
 800f922:	d00a      	beq.n	800f93a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	430a      	orrs	r2, r1
 800f938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93e:	f003 0302 	and.w	r3, r3, #2
 800f942:	2b00      	cmp	r3, #0
 800f944:	d00a      	beq.n	800f95c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	430a      	orrs	r2, r1
 800f95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f960:	f003 0304 	and.w	r3, r3, #4
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00a      	beq.n	800f97e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	430a      	orrs	r2, r1
 800f97c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f982:	f003 0308 	and.w	r3, r3, #8
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00a      	beq.n	800f9a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	430a      	orrs	r2, r1
 800f99e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a4:	f003 0310 	and.w	r3, r3, #16
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d00a      	beq.n	800f9c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	689b      	ldr	r3, [r3, #8]
 800f9b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	430a      	orrs	r2, r1
 800f9c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c6:	f003 0320 	and.w	r3, r3, #32
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00a      	beq.n	800f9e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	430a      	orrs	r2, r1
 800f9e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d01a      	beq.n	800fa26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	430a      	orrs	r2, r1
 800fa04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa0e:	d10a      	bne.n	800fa26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	430a      	orrs	r2, r1
 800fa24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00a      	beq.n	800fa48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	685b      	ldr	r3, [r3, #4]
 800fa38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	430a      	orrs	r2, r1
 800fa46:	605a      	str	r2, [r3, #4]
  }
}
 800fa48:	bf00      	nop
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fa62:	f7f9 ffcf 	bl	8009a04 <HAL_GetTick>
 800fa66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f003 0308 	and.w	r3, r3, #8
 800fa72:	2b08      	cmp	r3, #8
 800fa74:	d10e      	bne.n	800fa94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 f82a 	bl	800fade <UART_WaitOnFlagUntilTimeout>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d001      	beq.n	800fa94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa90:	2303      	movs	r3, #3
 800fa92:	e020      	b.n	800fad6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f003 0304 	and.w	r3, r3, #4
 800fa9e:	2b04      	cmp	r3, #4
 800faa0:	d10e      	bne.n	800fac0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800faa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800faa6:	9300      	str	r3, [sp, #0]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2200      	movs	r2, #0
 800faac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 f814 	bl	800fade <UART_WaitOnFlagUntilTimeout>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fabc:	2303      	movs	r3, #3
 800fabe:	e00a      	b.n	800fad6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2220      	movs	r2, #32
 800fac4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2220      	movs	r2, #32
 800faca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800fad4:	2300      	movs	r3, #0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b084      	sub	sp, #16
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	60f8      	str	r0, [r7, #12]
 800fae6:	60b9      	str	r1, [r7, #8]
 800fae8:	603b      	str	r3, [r7, #0]
 800faea:	4613      	mov	r3, r2
 800faec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800faee:	e05d      	b.n	800fbac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf6:	d059      	beq.n	800fbac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800faf8:	f7f9 ff84 	bl	8009a04 <HAL_GetTick>
 800fafc:	4602      	mov	r2, r0
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	69ba      	ldr	r2, [r7, #24]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d302      	bcc.n	800fb0e <UART_WaitOnFlagUntilTimeout+0x30>
 800fb08:	69bb      	ldr	r3, [r7, #24]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d11b      	bne.n	800fb46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	689a      	ldr	r2, [r3, #8]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f022 0201 	bic.w	r2, r2, #1
 800fb2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2220      	movs	r2, #32
 800fb32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2220      	movs	r2, #32
 800fb38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800fb42:	2303      	movs	r3, #3
 800fb44:	e042      	b.n	800fbcc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f003 0304 	and.w	r3, r3, #4
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d02b      	beq.n	800fbac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb62:	d123      	bne.n	800fbac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fb7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	689a      	ldr	r2, [r3, #8]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f022 0201 	bic.w	r2, r2, #1
 800fb8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2220      	movs	r2, #32
 800fb92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2220      	movs	r2, #32
 800fb98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2220      	movs	r2, #32
 800fb9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800fba8:	2303      	movs	r3, #3
 800fbaa:	e00f      	b.n	800fbcc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	69da      	ldr	r2, [r3, #28]
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	4013      	ands	r3, r2
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	bf0c      	ite	eq
 800fbbc:	2301      	moveq	r3, #1
 800fbbe:	2300      	movne	r3, #0
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d092      	beq.n	800faf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800fbea:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2220      	movs	r2, #32
 800fbf0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fbf2:	bf00      	nop
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b083      	sub	sp, #12
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fc14:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	689a      	ldr	r2, [r3, #8]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f022 0201 	bic.w	r2, r2, #1
 800fc24:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2220      	movs	r2, #32
 800fc2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	661a      	str	r2, [r3, #96]	; 0x60
}
 800fc32:	bf00      	nop
 800fc34:	370c      	adds	r7, #12
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr

0800fc3e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b084      	sub	sp, #16
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc4a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	69db      	ldr	r3, [r3, #28]
 800fc50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc54:	d01e      	beq.n	800fc94 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc6c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	689a      	ldr	r2, [r3, #8]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f022 0201 	bic.w	r2, r2, #1
 800fc7c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	689a      	ldr	r2, [r3, #8]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc8c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2220      	movs	r2, #32
 800fc92:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f7ff fb73 	bl	800f380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc9a:	bf00      	nop
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b084      	sub	sp, #16
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f7ff fb6f 	bl	800f394 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcb6:	bf00      	nop
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b086      	sub	sp, #24
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fce2:	2b80      	cmp	r3, #128	; 0x80
 800fce4:	d109      	bne.n	800fcfa <UART_DMAError+0x3c>
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	2b21      	cmp	r3, #33	; 0x21
 800fcea:	d106      	bne.n	800fcfa <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800fcf4:	6978      	ldr	r0, [r7, #20]
 800fcf6:	f7ff ff6d 	bl	800fbd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	689b      	ldr	r3, [r3, #8]
 800fd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd04:	2b40      	cmp	r3, #64	; 0x40
 800fd06:	d109      	bne.n	800fd1c <UART_DMAError+0x5e>
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2b22      	cmp	r3, #34	; 0x22
 800fd0c:	d106      	bne.n	800fd1c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	2200      	movs	r2, #0
 800fd12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800fd16:	6978      	ldr	r0, [r7, #20]
 800fd18:	f7ff ff71 	bl	800fbfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd20:	f043 0210 	orr.w	r2, r3, #16
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd28:	6978      	ldr	r0, [r7, #20]
 800fd2a:	f7ff fb3d 	bl	800f3a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd2e:	bf00      	nop
 800fd30:	3718      	adds	r7, #24
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
	...

0800fd38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd38:	b084      	sub	sp, #16
 800fd3a:	b580      	push	{r7, lr}
 800fd3c:	b084      	sub	sp, #16
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
 800fd42:	f107 001c 	add.w	r0, r7, #28
 800fd46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d120      	bne.n	800fd92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	68da      	ldr	r2, [r3, #12]
 800fd60:	4b20      	ldr	r3, [pc, #128]	; (800fde4 <USB_CoreInit+0xac>)
 800fd62:	4013      	ands	r3, r2
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fd74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d105      	bne.n	800fd86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fa52 	bl	8010230 <USB_CoreReset>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	73fb      	strb	r3, [r7, #15]
 800fd90:	e010      	b.n	800fdb4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fa46 	bl	8010230 <USB_CoreReset>
 800fda4:	4603      	mov	r3, r0
 800fda6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800fdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d10b      	bne.n	800fdd2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	689b      	ldr	r3, [r3, #8]
 800fdbe:	f043 0206 	orr.w	r2, r3, #6
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	f043 0220 	orr.w	r2, r3, #32
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fdde:	b004      	add	sp, #16
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	ffbdffbf 	.word	0xffbdffbf

0800fde8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	f023 0201 	bic.w	r2, r3, #1
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	370c      	adds	r7, #12
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr

0800fe0a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b082      	sub	sp, #8
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
 800fe12:	460b      	mov	r3, r1
 800fe14:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fe22:	78fb      	ldrb	r3, [r7, #3]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d106      	bne.n	800fe36 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	60da      	str	r2, [r3, #12]
 800fe34:	e00b      	b.n	800fe4e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fe36:	78fb      	ldrb	r3, [r7, #3]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d106      	bne.n	800fe4a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	60da      	str	r2, [r3, #12]
 800fe48:	e001      	b.n	800fe4e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e003      	b.n	800fe56 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fe4e:	2032      	movs	r0, #50	; 0x32
 800fe50:	f7f9 fde4 	bl	8009a1c <HAL_Delay>

  return HAL_OK;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe60:	b084      	sub	sp, #16
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b086      	sub	sp, #24
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	613b      	str	r3, [r7, #16]
 800fe7e:	e009      	b.n	800fe94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	3340      	adds	r3, #64	; 0x40
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	4413      	add	r3, r2
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	3301      	adds	r3, #1
 800fe92:	613b      	str	r3, [r7, #16]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2b0e      	cmp	r3, #14
 800fe98:	d9f2      	bls.n	800fe80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d11c      	bne.n	800feda <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feae:	f043 0302 	orr.w	r3, r3, #2
 800feb2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	e005      	b.n	800fee6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fede:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800feec:	461a      	mov	r2, r3
 800feee:	2300      	movs	r3, #0
 800fef0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fef8:	4619      	mov	r1, r3
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff00:	461a      	mov	r2, r3
 800ff02:	680b      	ldr	r3, [r1, #0]
 800ff04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d10c      	bne.n	800ff26 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d104      	bne.n	800ff1c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff12:	2100      	movs	r1, #0
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 f959 	bl	80101cc <USB_SetDevSpeed>
 800ff1a:	e018      	b.n	800ff4e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 f954 	bl	80101cc <USB_SetDevSpeed>
 800ff24:	e013      	b.n	800ff4e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff28:	2b03      	cmp	r3, #3
 800ff2a:	d10c      	bne.n	800ff46 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d104      	bne.n	800ff3c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff32:	2100      	movs	r1, #0
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 f949 	bl	80101cc <USB_SetDevSpeed>
 800ff3a:	e008      	b.n	800ff4e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 f944 	bl	80101cc <USB_SetDevSpeed>
 800ff44:	e003      	b.n	800ff4e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ff46:	2103      	movs	r1, #3
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 f93f 	bl	80101cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ff4e:	2110      	movs	r1, #16
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f8f3 	bl	801013c <USB_FlushTxFifo>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f911 	bl	8010188 <USB_FlushRxFifo>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d001      	beq.n	800ff70 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff76:	461a      	mov	r2, r3
 800ff78:	2300      	movs	r3, #0
 800ff7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff82:	461a      	mov	r2, r3
 800ff84:	2300      	movs	r3, #0
 800ff86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff8e:	461a      	mov	r2, r3
 800ff90:	2300      	movs	r3, #0
 800ff92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff94:	2300      	movs	r3, #0
 800ff96:	613b      	str	r3, [r7, #16]
 800ff98:	e043      	b.n	8010022 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	015a      	lsls	r2, r3, #5
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffb0:	d118      	bne.n	800ffe4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10a      	bne.n	800ffce <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	015a      	lsls	r2, r3, #5
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ffca:	6013      	str	r3, [r2, #0]
 800ffcc:	e013      	b.n	800fff6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	015a      	lsls	r2, r3, #5
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffda:	461a      	mov	r2, r3
 800ffdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ffe0:	6013      	str	r3, [r2, #0]
 800ffe2:	e008      	b.n	800fff6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	015a      	lsls	r2, r3, #5
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	4413      	add	r3, r2
 800ffec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff0:	461a      	mov	r2, r3
 800fff2:	2300      	movs	r3, #0
 800fff4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	015a      	lsls	r2, r3, #5
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	4413      	add	r3, r2
 800fffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010002:	461a      	mov	r2, r3
 8010004:	2300      	movs	r3, #0
 8010006:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	015a      	lsls	r2, r3, #5
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	4413      	add	r3, r2
 8010010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010014:	461a      	mov	r2, r3
 8010016:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801001a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	3301      	adds	r3, #1
 8010020:	613b      	str	r3, [r7, #16]
 8010022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010024:	693a      	ldr	r2, [r7, #16]
 8010026:	429a      	cmp	r2, r3
 8010028:	d3b7      	bcc.n	800ff9a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801002a:	2300      	movs	r3, #0
 801002c:	613b      	str	r3, [r7, #16]
 801002e:	e043      	b.n	80100b8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	015a      	lsls	r2, r3, #5
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	4413      	add	r3, r2
 8010038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010046:	d118      	bne.n	801007a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10a      	bne.n	8010064 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	015a      	lsls	r2, r3, #5
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	4413      	add	r3, r2
 8010056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005a:	461a      	mov	r2, r3
 801005c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010060:	6013      	str	r3, [r2, #0]
 8010062:	e013      	b.n	801008c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	015a      	lsls	r2, r3, #5
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	4413      	add	r3, r2
 801006c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010070:	461a      	mov	r2, r3
 8010072:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010076:	6013      	str	r3, [r2, #0]
 8010078:	e008      	b.n	801008c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	015a      	lsls	r2, r3, #5
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	4413      	add	r3, r2
 8010082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010086:	461a      	mov	r2, r3
 8010088:	2300      	movs	r3, #0
 801008a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	015a      	lsls	r2, r3, #5
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4413      	add	r3, r2
 8010094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010098:	461a      	mov	r2, r3
 801009a:	2300      	movs	r3, #0
 801009c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	015a      	lsls	r2, r3, #5
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	4413      	add	r3, r2
 80100a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100aa:	461a      	mov	r2, r3
 80100ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80100b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	3301      	adds	r3, #1
 80100b6:	613b      	str	r3, [r7, #16]
 80100b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ba:	693a      	ldr	r2, [r7, #16]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d3b7      	bcc.n	8010030 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80100e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80100e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d105      	bne.n	80100f4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	699b      	ldr	r3, [r3, #24]
 80100ec:	f043 0210 	orr.w	r2, r3, #16
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	699a      	ldr	r2, [r3, #24]
 80100f8:	4b0e      	ldr	r3, [pc, #56]	; (8010134 <USB_DevInit+0x2d4>)
 80100fa:	4313      	orrs	r3, r2
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010102:	2b00      	cmp	r3, #0
 8010104:	d005      	beq.n	8010112 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	699b      	ldr	r3, [r3, #24]
 801010a:	f043 0208 	orr.w	r2, r3, #8
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010114:	2b01      	cmp	r3, #1
 8010116:	d105      	bne.n	8010124 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	699a      	ldr	r2, [r3, #24]
 801011c:	4b06      	ldr	r3, [pc, #24]	; (8010138 <USB_DevInit+0x2d8>)
 801011e:	4313      	orrs	r3, r2
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010124:	7dfb      	ldrb	r3, [r7, #23]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010130:	b004      	add	sp, #16
 8010132:	4770      	bx	lr
 8010134:	803c3800 	.word	0x803c3800
 8010138:	40000004 	.word	0x40000004

0801013c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801013c:	b480      	push	{r7}
 801013e:	b085      	sub	sp, #20
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010146:	2300      	movs	r3, #0
 8010148:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	019b      	lsls	r3, r3, #6
 801014e:	f043 0220 	orr.w	r2, r3, #32
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	3301      	adds	r3, #1
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	4a09      	ldr	r2, [pc, #36]	; (8010184 <USB_FlushTxFifo+0x48>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d901      	bls.n	8010168 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010164:	2303      	movs	r3, #3
 8010166:	e006      	b.n	8010176 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	f003 0320 	and.w	r3, r3, #32
 8010170:	2b20      	cmp	r3, #32
 8010172:	d0f0      	beq.n	8010156 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3714      	adds	r7, #20
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	00030d40 	.word	0x00030d40

08010188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010188:	b480      	push	{r7}
 801018a:	b085      	sub	sp, #20
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8010190:	2300      	movs	r3, #0
 8010192:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2210      	movs	r2, #16
 8010198:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	3301      	adds	r3, #1
 801019e:	60fb      	str	r3, [r7, #12]
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	4a09      	ldr	r2, [pc, #36]	; (80101c8 <USB_FlushRxFifo+0x40>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d901      	bls.n	80101ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80101a8:	2303      	movs	r3, #3
 80101aa:	e006      	b.n	80101ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	691b      	ldr	r3, [r3, #16]
 80101b0:	f003 0310 	and.w	r3, r3, #16
 80101b4:	2b10      	cmp	r3, #16
 80101b6:	d0f0      	beq.n	801019a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80101b8:	2300      	movs	r3, #0
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3714      	adds	r7, #20
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr
 80101c6:	bf00      	nop
 80101c8:	00030d40 	.word	0x00030d40

080101cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b085      	sub	sp, #20
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	460b      	mov	r3, r1
 80101d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	78fb      	ldrb	r3, [r7, #3]
 80101e6:	68f9      	ldr	r1, [r7, #12]
 80101e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101ec:	4313      	orrs	r3, r2
 80101ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80101f0:	2300      	movs	r3, #0
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3714      	adds	r7, #20
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr

080101fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b084      	sub	sp, #16
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	68fa      	ldr	r2, [r7, #12]
 8010214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010218:	f043 0302 	orr.w	r3, r3, #2
 801021c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801021e:	2003      	movs	r0, #3
 8010220:	f7f9 fbfc 	bl	8009a1c <HAL_Delay>

  return HAL_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
	...

08010230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010238:	2300      	movs	r3, #0
 801023a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3301      	adds	r3, #1
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	4a13      	ldr	r2, [pc, #76]	; (8010294 <USB_CoreReset+0x64>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d901      	bls.n	801024e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801024a:	2303      	movs	r3, #3
 801024c:	e01b      	b.n	8010286 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	2b00      	cmp	r3, #0
 8010254:	daf2      	bge.n	801023c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010256:	2300      	movs	r3, #0
 8010258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	f043 0201 	orr.w	r2, r3, #1
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	3301      	adds	r3, #1
 801026a:	60fb      	str	r3, [r7, #12]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	4a09      	ldr	r2, [pc, #36]	; (8010294 <USB_CoreReset+0x64>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d901      	bls.n	8010278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010274:	2303      	movs	r3, #3
 8010276:	e006      	b.n	8010286 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	f003 0301 	and.w	r3, r3, #1
 8010280:	2b01      	cmp	r3, #1
 8010282:	d0f0      	beq.n	8010266 <USB_CoreReset+0x36>

  return HAL_OK;
 8010284:	2300      	movs	r3, #0
}
 8010286:	4618      	mov	r0, r3
 8010288:	3714      	adds	r7, #20
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	00030d40 	.word	0x00030d40

08010298 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010298:	b480      	push	{r7}
 801029a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801029c:	bf00      	nop
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
	...

080102a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102ae:	f3ef 8305 	mrs	r3, IPSR
 80102b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80102b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10f      	bne.n	80102da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102ba:	f3ef 8310 	mrs	r3, PRIMASK
 80102be:	607b      	str	r3, [r7, #4]
  return(result);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d105      	bne.n	80102d2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102c6:	f3ef 8311 	mrs	r3, BASEPRI
 80102ca:	603b      	str	r3, [r7, #0]
  return(result);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d007      	beq.n	80102e2 <osKernelInitialize+0x3a>
 80102d2:	4b0e      	ldr	r3, [pc, #56]	; (801030c <osKernelInitialize+0x64>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	d103      	bne.n	80102e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80102da:	f06f 0305 	mvn.w	r3, #5
 80102de:	60fb      	str	r3, [r7, #12]
 80102e0:	e00c      	b.n	80102fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80102e2:	4b0a      	ldr	r3, [pc, #40]	; (801030c <osKernelInitialize+0x64>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d105      	bne.n	80102f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80102ea:	4b08      	ldr	r3, [pc, #32]	; (801030c <osKernelInitialize+0x64>)
 80102ec:	2201      	movs	r2, #1
 80102ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80102f0:	2300      	movs	r3, #0
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	e002      	b.n	80102fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80102f6:	f04f 33ff 	mov.w	r3, #4294967295
 80102fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80102fc:	68fb      	ldr	r3, [r7, #12]
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3714      	adds	r7, #20
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr
 801030a:	bf00      	nop
 801030c:	200033a4 	.word	0x200033a4

08010310 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010316:	f3ef 8305 	mrs	r3, IPSR
 801031a:	60bb      	str	r3, [r7, #8]
  return(result);
 801031c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10f      	bne.n	8010342 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010322:	f3ef 8310 	mrs	r3, PRIMASK
 8010326:	607b      	str	r3, [r7, #4]
  return(result);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d105      	bne.n	801033a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801032e:	f3ef 8311 	mrs	r3, BASEPRI
 8010332:	603b      	str	r3, [r7, #0]
  return(result);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d007      	beq.n	801034a <osKernelStart+0x3a>
 801033a:	4b0f      	ldr	r3, [pc, #60]	; (8010378 <osKernelStart+0x68>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b02      	cmp	r3, #2
 8010340:	d103      	bne.n	801034a <osKernelStart+0x3a>
    stat = osErrorISR;
 8010342:	f06f 0305 	mvn.w	r3, #5
 8010346:	60fb      	str	r3, [r7, #12]
 8010348:	e010      	b.n	801036c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801034a:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <osKernelStart+0x68>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b01      	cmp	r3, #1
 8010350:	d109      	bne.n	8010366 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010352:	f7ff ffa1 	bl	8010298 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010356:	4b08      	ldr	r3, [pc, #32]	; (8010378 <osKernelStart+0x68>)
 8010358:	2202      	movs	r2, #2
 801035a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801035c:	f001 fa80 	bl	8011860 <vTaskStartScheduler>
      stat = osOK;
 8010360:	2300      	movs	r3, #0
 8010362:	60fb      	str	r3, [r7, #12]
 8010364:	e002      	b.n	801036c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010366:	f04f 33ff 	mov.w	r3, #4294967295
 801036a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801036c:	68fb      	ldr	r3, [r7, #12]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	200033a4 	.word	0x200033a4

0801037c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801037c:	b580      	push	{r7, lr}
 801037e:	b090      	sub	sp, #64	; 0x40
 8010380:	af04      	add	r7, sp, #16
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010388:	2300      	movs	r3, #0
 801038a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801038c:	f3ef 8305 	mrs	r3, IPSR
 8010390:	61fb      	str	r3, [r7, #28]
  return(result);
 8010392:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010394:	2b00      	cmp	r3, #0
 8010396:	f040 808f 	bne.w	80104b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801039a:	f3ef 8310 	mrs	r3, PRIMASK
 801039e:	61bb      	str	r3, [r7, #24]
  return(result);
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d105      	bne.n	80103b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103a6:	f3ef 8311 	mrs	r3, BASEPRI
 80103aa:	617b      	str	r3, [r7, #20]
  return(result);
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d003      	beq.n	80103ba <osThreadNew+0x3e>
 80103b2:	4b44      	ldr	r3, [pc, #272]	; (80104c4 <osThreadNew+0x148>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b02      	cmp	r3, #2
 80103b8:	d07e      	beq.n	80104b8 <osThreadNew+0x13c>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d07b      	beq.n	80104b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80103c0:	2380      	movs	r3, #128	; 0x80
 80103c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80103c4:	2318      	movs	r3, #24
 80103c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80103c8:	2300      	movs	r3, #0
 80103ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80103cc:	f04f 33ff 	mov.w	r3, #4294967295
 80103d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d045      	beq.n	8010464 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <osThreadNew+0x6a>
        name = attr->name;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	699b      	ldr	r3, [r3, #24]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d002      	beq.n	80103f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	699b      	ldr	r3, [r3, #24]
 80103f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80103f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d008      	beq.n	801040c <osThreadNew+0x90>
 80103fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fc:	2b38      	cmp	r3, #56	; 0x38
 80103fe:	d805      	bhi.n	801040c <osThreadNew+0x90>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	f003 0301 	and.w	r3, r3, #1
 8010408:	2b00      	cmp	r3, #0
 801040a:	d001      	beq.n	8010410 <osThreadNew+0x94>
        return (NULL);
 801040c:	2300      	movs	r3, #0
 801040e:	e054      	b.n	80104ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d003      	beq.n	8010420 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	695b      	ldr	r3, [r3, #20]
 801041c:	089b      	lsrs	r3, r3, #2
 801041e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d00e      	beq.n	8010446 <osThreadNew+0xca>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	2b5b      	cmp	r3, #91	; 0x5b
 801042e:	d90a      	bls.n	8010446 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010434:	2b00      	cmp	r3, #0
 8010436:	d006      	beq.n	8010446 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	695b      	ldr	r3, [r3, #20]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d002      	beq.n	8010446 <osThreadNew+0xca>
        mem = 1;
 8010440:	2301      	movs	r3, #1
 8010442:	623b      	str	r3, [r7, #32]
 8010444:	e010      	b.n	8010468 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d10c      	bne.n	8010468 <osThreadNew+0xec>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d108      	bne.n	8010468 <osThreadNew+0xec>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d104      	bne.n	8010468 <osThreadNew+0xec>
          mem = 0;
 801045e:	2300      	movs	r3, #0
 8010460:	623b      	str	r3, [r7, #32]
 8010462:	e001      	b.n	8010468 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010464:	2300      	movs	r3, #0
 8010466:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010468:	6a3b      	ldr	r3, [r7, #32]
 801046a:	2b01      	cmp	r3, #1
 801046c:	d110      	bne.n	8010490 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010476:	9202      	str	r2, [sp, #8]
 8010478:	9301      	str	r3, [sp, #4]
 801047a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047c:	9300      	str	r3, [sp, #0]
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010484:	68f8      	ldr	r0, [r7, #12]
 8010486:	f000 ff9b 	bl	80113c0 <xTaskCreateStatic>
 801048a:	4603      	mov	r3, r0
 801048c:	613b      	str	r3, [r7, #16]
 801048e:	e013      	b.n	80104b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010490:	6a3b      	ldr	r3, [r7, #32]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d110      	bne.n	80104b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010498:	b29a      	uxth	r2, r3
 801049a:	f107 0310 	add.w	r3, r7, #16
 801049e:	9301      	str	r3, [sp, #4]
 80104a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f000 ffe9 	bl	8011480 <xTaskCreate>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d001      	beq.n	80104b8 <osThreadNew+0x13c>
          hTask = NULL;
 80104b4:	2300      	movs	r3, #0
 80104b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80104b8:	693b      	ldr	r3, [r7, #16]
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3730      	adds	r7, #48	; 0x30
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop
 80104c4:	200033a4 	.word	0x200033a4

080104c8 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 80104c8:	b580      	push	{r7, lr}
 80104ca:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80104cc:	2000      	movs	r0, #0
 80104ce:	f001 f91d 	bl	801170c <vTaskDelete>
#endif
  for (;;);
 80104d2:	e7fe      	b.n	80104d2 <osThreadExit+0xa>

080104d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b086      	sub	sp, #24
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104dc:	f3ef 8305 	mrs	r3, IPSR
 80104e0:	613b      	str	r3, [r7, #16]
  return(result);
 80104e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10f      	bne.n	8010508 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104e8:	f3ef 8310 	mrs	r3, PRIMASK
 80104ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d105      	bne.n	8010500 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104f4:	f3ef 8311 	mrs	r3, BASEPRI
 80104f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d007      	beq.n	8010510 <osDelay+0x3c>
 8010500:	4b0a      	ldr	r3, [pc, #40]	; (801052c <osDelay+0x58>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b02      	cmp	r3, #2
 8010506:	d103      	bne.n	8010510 <osDelay+0x3c>
    stat = osErrorISR;
 8010508:	f06f 0305 	mvn.w	r3, #5
 801050c:	617b      	str	r3, [r7, #20]
 801050e:	e007      	b.n	8010520 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010510:	2300      	movs	r3, #0
 8010512:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d002      	beq.n	8010520 <osDelay+0x4c>
      vTaskDelay(ticks);
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f001 f96a 	bl	80117f4 <vTaskDelay>
    }
  }

  return (stat);
 8010520:	697b      	ldr	r3, [r7, #20]
}
 8010522:	4618      	mov	r0, r3
 8010524:	3718      	adds	r7, #24
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	200033a4 	.word	0x200033a4

08010530 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010530:	b580      	push	{r7, lr}
 8010532:	b088      	sub	sp, #32
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010538:	2300      	movs	r3, #0
 801053a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801053c:	f3ef 8305 	mrs	r3, IPSR
 8010540:	617b      	str	r3, [r7, #20]
  return(result);
 8010542:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8010544:	2b00      	cmp	r3, #0
 8010546:	d13d      	bne.n	80105c4 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010548:	f3ef 8310 	mrs	r3, PRIMASK
 801054c:	613b      	str	r3, [r7, #16]
  return(result);
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d105      	bne.n	8010560 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010554:	f3ef 8311 	mrs	r3, BASEPRI
 8010558:	60fb      	str	r3, [r7, #12]
  return(result);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d003      	beq.n	8010568 <osEventFlagsNew+0x38>
 8010560:	4b1b      	ldr	r3, [pc, #108]	; (80105d0 <osEventFlagsNew+0xa0>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b02      	cmp	r3, #2
 8010566:	d02d      	beq.n	80105c4 <osEventFlagsNew+0x94>
    mem = -1;
 8010568:	f04f 33ff 	mov.w	r3, #4294967295
 801056c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d015      	beq.n	80105a0 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d006      	beq.n	801058a <osEventFlagsNew+0x5a>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	2b1f      	cmp	r3, #31
 8010582:	d902      	bls.n	801058a <osEventFlagsNew+0x5a>
        mem = 1;
 8010584:	2301      	movs	r3, #1
 8010586:	61bb      	str	r3, [r7, #24]
 8010588:	e00c      	b.n	80105a4 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d108      	bne.n	80105a4 <osEventFlagsNew+0x74>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d104      	bne.n	80105a4 <osEventFlagsNew+0x74>
          mem = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	61bb      	str	r3, [r7, #24]
 801059e:	e001      	b.n	80105a4 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80105a0:	2300      	movs	r3, #0
 80105a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d106      	bne.n	80105b8 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f000 f888 	bl	80106c4 <xEventGroupCreateStatic>
 80105b4:	61f8      	str	r0, [r7, #28]
 80105b6:	e005      	b.n	80105c4 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d102      	bne.n	80105c4 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80105be:	f000 f8ba 	bl	8010736 <xEventGroupCreate>
 80105c2:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80105c4:	69fb      	ldr	r3, [r7, #28]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3720      	adds	r7, #32
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	200033a4 	.word	0x200033a4

080105d4 <osEventFlagsClear>:
  }

  return (rflags);
}

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b088      	sub	sp, #32
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d004      	beq.n	80105f2 <osEventFlagsClear+0x1e>
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d003      	beq.n	80105fa <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80105f2:	f06f 0303 	mvn.w	r3, #3
 80105f6:	61fb      	str	r3, [r7, #28]
 80105f8:	e029      	b.n	801064e <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105fa:	f3ef 8305 	mrs	r3, IPSR
 80105fe:	617b      	str	r3, [r7, #20]
  return(result);
 8010600:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010602:	2b00      	cmp	r3, #0
 8010604:	d10f      	bne.n	8010626 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010606:	f3ef 8310 	mrs	r3, PRIMASK
 801060a:	613b      	str	r3, [r7, #16]
  return(result);
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d105      	bne.n	801061e <osEventFlagsClear+0x4a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010612:	f3ef 8311 	mrs	r3, BASEPRI
 8010616:	60fb      	str	r3, [r7, #12]
  return(result);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d012      	beq.n	8010644 <osEventFlagsClear+0x70>
 801061e:	4b0e      	ldr	r3, [pc, #56]	; (8010658 <osEventFlagsClear+0x84>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	2b02      	cmp	r3, #2
 8010624:	d10e      	bne.n	8010644 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8010626:	69b8      	ldr	r0, [r7, #24]
 8010628:	f000 f8ee 	bl	8010808 <xEventGroupGetBitsFromISR>
 801062c:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801062e:	6839      	ldr	r1, [r7, #0]
 8010630:	69b8      	ldr	r0, [r7, #24]
 8010632:	f000 f8d5 	bl	80107e0 <xEventGroupClearBitsFromISR>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d108      	bne.n	801064e <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 801063c:	f06f 0302 	mvn.w	r3, #2
 8010640:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8010642:	e004      	b.n	801064e <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8010644:	6839      	ldr	r1, [r7, #0]
 8010646:	69b8      	ldr	r0, [r7, #24]
 8010648:	f000 f88f 	bl	801076a <xEventGroupClearBits>
 801064c:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 801064e:	69fb      	ldr	r3, [r7, #28]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	200033a4 	.word	0x200033a4

0801065c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4a07      	ldr	r2, [pc, #28]	; (8010688 <vApplicationGetIdleTaskMemory+0x2c>)
 801066c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	4a06      	ldr	r2, [pc, #24]	; (801068c <vApplicationGetIdleTaskMemory+0x30>)
 8010672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2280      	movs	r2, #128	; 0x80
 8010678:	601a      	str	r2, [r3, #0]
}
 801067a:	bf00      	nop
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	200033a8 	.word	0x200033a8
 801068c:	20003404 	.word	0x20003404

08010690 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
 8010696:	60f8      	str	r0, [r7, #12]
 8010698:	60b9      	str	r1, [r7, #8]
 801069a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	4a07      	ldr	r2, [pc, #28]	; (80106bc <vApplicationGetTimerTaskMemory+0x2c>)
 80106a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	4a06      	ldr	r2, [pc, #24]	; (80106c0 <vApplicationGetTimerTaskMemory+0x30>)
 80106a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80106ae:	601a      	str	r2, [r3, #0]
}
 80106b0:	bf00      	nop
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	20003604 	.word	0x20003604
 80106c0:	20003660 	.word	0x20003660

080106c4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10b      	bne.n	80106ea <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80106d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d6:	b672      	cpsid	i
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	b662      	cpsie	i
 80106e6:	613b      	str	r3, [r7, #16]
 80106e8:	e7fe      	b.n	80106e8 <xEventGroupCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80106ea:	2320      	movs	r3, #32
 80106ec:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	2b20      	cmp	r3, #32
 80106f2:	d00b      	beq.n	801070c <xEventGroupCreateStatic+0x48>
 80106f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f8:	b672      	cpsid	i
 80106fa:	f383 8811 	msr	BASEPRI, r3
 80106fe:	f3bf 8f6f 	isb	sy
 8010702:	f3bf 8f4f 	dsb	sy
 8010706:	b662      	cpsie	i
 8010708:	60fb      	str	r3, [r7, #12]
 801070a:	e7fe      	b.n	801070a <xEventGroupCreateStatic+0x46>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00a      	beq.n	801072c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	2200      	movs	r2, #0
 801071a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	3304      	adds	r3, #4
 8010720:	4618      	mov	r0, r3
 8010722:	f000 f8a3 	bl	801086c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	2201      	movs	r2, #1
 801072a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 801072c:	697b      	ldr	r3, [r7, #20]
	}
 801072e:	4618      	mov	r0, r3
 8010730:	3718      	adds	r7, #24
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8010736:	b580      	push	{r7, lr}
 8010738:	b082      	sub	sp, #8
 801073a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801073c:	2020      	movs	r0, #32
 801073e:	f002 fc6d 	bl	801301c <pvPortMalloc>
 8010742:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00a      	beq.n	8010760 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	3304      	adds	r3, #4
 8010754:	4618      	mov	r0, r3
 8010756:	f000 f889 	bl	801086c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010760:	687b      	ldr	r3, [r7, #4]
	}
 8010762:	4618      	mov	r0, r3
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}

0801076a <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801076a:	b580      	push	{r7, lr}
 801076c:	b086      	sub	sp, #24
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d10b      	bne.n	8010796 <xEventGroupClearBits+0x2c>
 801077e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010782:	b672      	cpsid	i
 8010784:	f383 8811 	msr	BASEPRI, r3
 8010788:	f3bf 8f6f 	isb	sy
 801078c:	f3bf 8f4f 	dsb	sy
 8010790:	b662      	cpsie	i
 8010792:	60fb      	str	r3, [r7, #12]
 8010794:	e7fe      	b.n	8010794 <xEventGroupClearBits+0x2a>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00b      	beq.n	80107b8 <xEventGroupClearBits+0x4e>
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	b672      	cpsid	i
 80107a6:	f383 8811 	msr	BASEPRI, r3
 80107aa:	f3bf 8f6f 	isb	sy
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	b662      	cpsie	i
 80107b4:	60bb      	str	r3, [r7, #8]
 80107b6:	e7fe      	b.n	80107b6 <xEventGroupClearBits+0x4c>

	taskENTER_CRITICAL();
 80107b8:	f002 fb0e 	bl	8012dd8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	43db      	mvns	r3, r3
 80107ca:	401a      	ands	r2, r3
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80107d0:	f002 fb34 	bl	8012e3c <vPortExitCritical>

	return uxReturn;
 80107d4:	693b      	ldr	r3, [r7, #16]
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3718      	adds	r7, #24
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
	...

080107e0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80107ea:	2300      	movs	r3, #0
 80107ec:	683a      	ldr	r2, [r7, #0]
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	4804      	ldr	r0, [pc, #16]	; (8010804 <xEventGroupClearBitsFromISR+0x24>)
 80107f2:	f002 f9cb 	bl	8012b8c <xTimerPendFunctionCallFromISR>
 80107f6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80107f8:	68fb      	ldr	r3, [r7, #12]
	}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	08010853 	.word	0x08010853

08010808 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8010808:	b480      	push	{r7}
 801080a:	b089      	sub	sp, #36	; 0x24
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010814:	f3ef 8211 	mrs	r2, BASEPRI
 8010818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081c:	b672      	cpsid	i
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	b662      	cpsie	i
 801082c:	60fa      	str	r2, [r7, #12]
 801082e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010830:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010832:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	617b      	str	r3, [r7, #20]
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8010844:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8010846:	4618      	mov	r0, r3
 8010848:	3724      	adds	r7, #36	; 0x24
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr

08010852 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8010852:	b580      	push	{r7, lr}
 8010854:	b082      	sub	sp, #8
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
 801085a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff ff83 	bl	801076a <xEventGroupClearBits>
}
 8010864:	bf00      	nop
 8010866:	3708      	adds	r7, #8
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f103 0208 	add.w	r2, r3, #8
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f04f 32ff 	mov.w	r2, #4294967295
 8010884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f103 0208 	add.w	r2, r3, #8
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f103 0208 	add.w	r2, r3, #8
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80108a0:	bf00      	nop
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80108ba:	bf00      	nop
 80108bc:	370c      	adds	r7, #12
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80108c6:	b480      	push	{r7}
 80108c8:	b085      	sub	sp, #20
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	689a      	ldr	r2, [r3, #8]
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	689b      	ldr	r3, [r3, #8]
 80108e8:	683a      	ldr	r2, [r7, #0]
 80108ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	683a      	ldr	r2, [r7, #0]
 80108f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	1c5a      	adds	r2, r3, #1
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	601a      	str	r2, [r3, #0]
}
 8010902:	bf00      	nop
 8010904:	3714      	adds	r7, #20
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr

0801090e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801090e:	b480      	push	{r7}
 8010910:	b085      	sub	sp, #20
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
 8010916:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010924:	d103      	bne.n	801092e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	e00c      	b.n	8010948 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	3308      	adds	r3, #8
 8010932:	60fb      	str	r3, [r7, #12]
 8010934:	e002      	b.n	801093c <vListInsert+0x2e>
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	60fb      	str	r3, [r7, #12]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	429a      	cmp	r2, r3
 8010946:	d2f6      	bcs.n	8010936 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	683a      	ldr	r2, [r7, #0]
 8010956:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	683a      	ldr	r2, [r7, #0]
 8010962:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	1c5a      	adds	r2, r3, #1
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	601a      	str	r2, [r3, #0]
}
 8010974:	bf00      	nop
 8010976:	3714      	adds	r7, #20
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	691b      	ldr	r3, [r3, #16]
 801098c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	6892      	ldr	r2, [r2, #8]
 8010996:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	689b      	ldr	r3, [r3, #8]
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	6852      	ldr	r2, [r2, #4]
 80109a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	685b      	ldr	r3, [r3, #4]
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d103      	bne.n	80109b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	689a      	ldr	r2, [r3, #8]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	1e5a      	subs	r2, r3, #1
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3714      	adds	r7, #20
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10b      	bne.n	8010a00 <xQueueGenericReset+0x2c>
	__asm volatile
 80109e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ec:	b672      	cpsid	i
 80109ee:	f383 8811 	msr	BASEPRI, r3
 80109f2:	f3bf 8f6f 	isb	sy
 80109f6:	f3bf 8f4f 	dsb	sy
 80109fa:	b662      	cpsie	i
 80109fc:	60bb      	str	r3, [r7, #8]
 80109fe:	e7fe      	b.n	80109fe <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010a00:	f002 f9ea 	bl	8012dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a0c:	68f9      	ldr	r1, [r7, #12]
 8010a0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010a10:	fb01 f303 	mul.w	r3, r1, r3
 8010a14:	441a      	add	r2, r3
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a30:	3b01      	subs	r3, #1
 8010a32:	68f9      	ldr	r1, [r7, #12]
 8010a34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010a36:	fb01 f303 	mul.w	r3, r1, r3
 8010a3a:	441a      	add	r2, r3
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	22ff      	movs	r2, #255	; 0xff
 8010a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	22ff      	movs	r2, #255	; 0xff
 8010a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d114      	bne.n	8010a80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	691b      	ldr	r3, [r3, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d01a      	beq.n	8010a94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	3310      	adds	r3, #16
 8010a62:	4618      	mov	r0, r3
 8010a64:	f001 f98a 	bl	8011d7c <xTaskRemoveFromEventList>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d012      	beq.n	8010a94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a6e:	4b0d      	ldr	r3, [pc, #52]	; (8010aa4 <xQueueGenericReset+0xd0>)
 8010a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a74:	601a      	str	r2, [r3, #0]
 8010a76:	f3bf 8f4f 	dsb	sy
 8010a7a:	f3bf 8f6f 	isb	sy
 8010a7e:	e009      	b.n	8010a94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	3310      	adds	r3, #16
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff fef1 	bl	801086c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	3324      	adds	r3, #36	; 0x24
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7ff feec 	bl	801086c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a94:	f002 f9d2 	bl	8012e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a98:	2301      	movs	r3, #1
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	e000ed04 	.word	0xe000ed04

08010aa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b08e      	sub	sp, #56	; 0x38
 8010aac:	af02      	add	r7, sp, #8
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	607a      	str	r2, [r7, #4]
 8010ab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d10b      	bne.n	8010ad4 <xQueueGenericCreateStatic+0x2c>
 8010abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac0:	b672      	cpsid	i
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	b662      	cpsie	i
 8010ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ad2:	e7fe      	b.n	8010ad2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d10b      	bne.n	8010af2 <xQueueGenericCreateStatic+0x4a>
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	b672      	cpsid	i
 8010ae0:	f383 8811 	msr	BASEPRI, r3
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	b662      	cpsie	i
 8010aee:	627b      	str	r3, [r7, #36]	; 0x24
 8010af0:	e7fe      	b.n	8010af0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d002      	beq.n	8010afe <xQueueGenericCreateStatic+0x56>
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d001      	beq.n	8010b02 <xQueueGenericCreateStatic+0x5a>
 8010afe:	2301      	movs	r3, #1
 8010b00:	e000      	b.n	8010b04 <xQueueGenericCreateStatic+0x5c>
 8010b02:	2300      	movs	r3, #0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10b      	bne.n	8010b20 <xQueueGenericCreateStatic+0x78>
 8010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0c:	b672      	cpsid	i
 8010b0e:	f383 8811 	msr	BASEPRI, r3
 8010b12:	f3bf 8f6f 	isb	sy
 8010b16:	f3bf 8f4f 	dsb	sy
 8010b1a:	b662      	cpsie	i
 8010b1c:	623b      	str	r3, [r7, #32]
 8010b1e:	e7fe      	b.n	8010b1e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d102      	bne.n	8010b2c <xQueueGenericCreateStatic+0x84>
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d101      	bne.n	8010b30 <xQueueGenericCreateStatic+0x88>
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e000      	b.n	8010b32 <xQueueGenericCreateStatic+0x8a>
 8010b30:	2300      	movs	r3, #0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d10b      	bne.n	8010b4e <xQueueGenericCreateStatic+0xa6>
 8010b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3a:	b672      	cpsid	i
 8010b3c:	f383 8811 	msr	BASEPRI, r3
 8010b40:	f3bf 8f6f 	isb	sy
 8010b44:	f3bf 8f4f 	dsb	sy
 8010b48:	b662      	cpsie	i
 8010b4a:	61fb      	str	r3, [r7, #28]
 8010b4c:	e7fe      	b.n	8010b4c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010b4e:	2350      	movs	r3, #80	; 0x50
 8010b50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	2b50      	cmp	r3, #80	; 0x50
 8010b56:	d00b      	beq.n	8010b70 <xQueueGenericCreateStatic+0xc8>
 8010b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5c:	b672      	cpsid	i
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	b662      	cpsie	i
 8010b6c:	61bb      	str	r3, [r7, #24]
 8010b6e:	e7fe      	b.n	8010b6e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010b70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d00d      	beq.n	8010b98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7e:	2201      	movs	r2, #1
 8010b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	68b9      	ldr	r1, [r7, #8]
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f000 f805 	bl	8010ba2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3730      	adds	r7, #48	; 0x30
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	60f8      	str	r0, [r7, #12]
 8010baa:	60b9      	str	r1, [r7, #8]
 8010bac:	607a      	str	r2, [r7, #4]
 8010bae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d103      	bne.n	8010bbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	69ba      	ldr	r2, [r7, #24]
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	e002      	b.n	8010bc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010bbe:	69bb      	ldr	r3, [r7, #24]
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	68fa      	ldr	r2, [r7, #12]
 8010bc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	68ba      	ldr	r2, [r7, #8]
 8010bce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010bd0:	2101      	movs	r1, #1
 8010bd2:	69b8      	ldr	r0, [r7, #24]
 8010bd4:	f7ff fefe 	bl	80109d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	78fa      	ldrb	r2, [r7, #3]
 8010bdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010be0:	bf00      	nop
 8010be2:	3710      	adds	r7, #16
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b08e      	sub	sp, #56	; 0x38
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	607a      	str	r2, [r7, #4]
 8010bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10b      	bne.n	8010c1c <xQueueGenericSend+0x34>
 8010c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c08:	b672      	cpsid	i
 8010c0a:	f383 8811 	msr	BASEPRI, r3
 8010c0e:	f3bf 8f6f 	isb	sy
 8010c12:	f3bf 8f4f 	dsb	sy
 8010c16:	b662      	cpsie	i
 8010c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c1a:	e7fe      	b.n	8010c1a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d103      	bne.n	8010c2a <xQueueGenericSend+0x42>
 8010c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d101      	bne.n	8010c2e <xQueueGenericSend+0x46>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e000      	b.n	8010c30 <xQueueGenericSend+0x48>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d10b      	bne.n	8010c4c <xQueueGenericSend+0x64>
 8010c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c38:	b672      	cpsid	i
 8010c3a:	f383 8811 	msr	BASEPRI, r3
 8010c3e:	f3bf 8f6f 	isb	sy
 8010c42:	f3bf 8f4f 	dsb	sy
 8010c46:	b662      	cpsie	i
 8010c48:	627b      	str	r3, [r7, #36]	; 0x24
 8010c4a:	e7fe      	b.n	8010c4a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	d103      	bne.n	8010c5a <xQueueGenericSend+0x72>
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d101      	bne.n	8010c5e <xQueueGenericSend+0x76>
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e000      	b.n	8010c60 <xQueueGenericSend+0x78>
 8010c5e:	2300      	movs	r3, #0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10b      	bne.n	8010c7c <xQueueGenericSend+0x94>
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	b672      	cpsid	i
 8010c6a:	f383 8811 	msr	BASEPRI, r3
 8010c6e:	f3bf 8f6f 	isb	sy
 8010c72:	f3bf 8f4f 	dsb	sy
 8010c76:	b662      	cpsie	i
 8010c78:	623b      	str	r3, [r7, #32]
 8010c7a:	e7fe      	b.n	8010c7a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c7c:	f001 fa3c 	bl	80120f8 <xTaskGetSchedulerState>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d102      	bne.n	8010c8c <xQueueGenericSend+0xa4>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d101      	bne.n	8010c90 <xQueueGenericSend+0xa8>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e000      	b.n	8010c92 <xQueueGenericSend+0xaa>
 8010c90:	2300      	movs	r3, #0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d10b      	bne.n	8010cae <xQueueGenericSend+0xc6>
 8010c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9a:	b672      	cpsid	i
 8010c9c:	f383 8811 	msr	BASEPRI, r3
 8010ca0:	f3bf 8f6f 	isb	sy
 8010ca4:	f3bf 8f4f 	dsb	sy
 8010ca8:	b662      	cpsie	i
 8010caa:	61fb      	str	r3, [r7, #28]
 8010cac:	e7fe      	b.n	8010cac <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cae:	f002 f893 	bl	8012dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d302      	bcc.n	8010cc4 <xQueueGenericSend+0xdc>
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	2b02      	cmp	r3, #2
 8010cc2:	d129      	bne.n	8010d18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010cc4:	683a      	ldr	r2, [r7, #0]
 8010cc6:	68b9      	ldr	r1, [r7, #8]
 8010cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cca:	f000 fa0d 	bl	80110e8 <prvCopyDataToQueue>
 8010cce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d010      	beq.n	8010cfa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cda:	3324      	adds	r3, #36	; 0x24
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f001 f84d 	bl	8011d7c <xTaskRemoveFromEventList>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d013      	beq.n	8010d10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010ce8:	4b3f      	ldr	r3, [pc, #252]	; (8010de8 <xQueueGenericSend+0x200>)
 8010cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cee:	601a      	str	r2, [r3, #0]
 8010cf0:	f3bf 8f4f 	dsb	sy
 8010cf4:	f3bf 8f6f 	isb	sy
 8010cf8:	e00a      	b.n	8010d10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d007      	beq.n	8010d10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010d00:	4b39      	ldr	r3, [pc, #228]	; (8010de8 <xQueueGenericSend+0x200>)
 8010d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d06:	601a      	str	r2, [r3, #0]
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010d10:	f002 f894 	bl	8012e3c <vPortExitCritical>
				return pdPASS;
 8010d14:	2301      	movs	r3, #1
 8010d16:	e063      	b.n	8010de0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d103      	bne.n	8010d26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d1e:	f002 f88d 	bl	8012e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010d22:	2300      	movs	r3, #0
 8010d24:	e05c      	b.n	8010de0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d106      	bne.n	8010d3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d2c:	f107 0314 	add.w	r3, r7, #20
 8010d30:	4618      	mov	r0, r3
 8010d32:	f001 f887 	bl	8011e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d36:	2301      	movs	r3, #1
 8010d38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d3a:	f002 f87f 	bl	8012e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d3e:	f000 fdf7 	bl	8011930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d42:	f002 f849 	bl	8012dd8 <vPortEnterCritical>
 8010d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d4c:	b25b      	sxtb	r3, r3
 8010d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d52:	d103      	bne.n	8010d5c <xQueueGenericSend+0x174>
 8010d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d62:	b25b      	sxtb	r3, r3
 8010d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d68:	d103      	bne.n	8010d72 <xQueueGenericSend+0x18a>
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d72:	f002 f863 	bl	8012e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d76:	1d3a      	adds	r2, r7, #4
 8010d78:	f107 0314 	add.w	r3, r7, #20
 8010d7c:	4611      	mov	r1, r2
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f001 f876 	bl	8011e70 <xTaskCheckForTimeOut>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d124      	bne.n	8010dd4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d8c:	f000 faa4 	bl	80112d8 <prvIsQueueFull>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d018      	beq.n	8010dc8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d98:	3310      	adds	r3, #16
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	4611      	mov	r1, r2
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 ff9a 	bl	8011cd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010da6:	f000 fa2f 	bl	8011208 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010daa:	f000 fdcf 	bl	801194c <xTaskResumeAll>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f47f af7c 	bne.w	8010cae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010db6:	4b0c      	ldr	r3, [pc, #48]	; (8010de8 <xQueueGenericSend+0x200>)
 8010db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dbc:	601a      	str	r2, [r3, #0]
 8010dbe:	f3bf 8f4f 	dsb	sy
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	e772      	b.n	8010cae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dca:	f000 fa1d 	bl	8011208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010dce:	f000 fdbd 	bl	801194c <xTaskResumeAll>
 8010dd2:	e76c      	b.n	8010cae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd6:	f000 fa17 	bl	8011208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010dda:	f000 fdb7 	bl	801194c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010dde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3738      	adds	r7, #56	; 0x38
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	e000ed04 	.word	0xe000ed04

08010dec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b08e      	sub	sp, #56	; 0x38
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	607a      	str	r2, [r7, #4]
 8010df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10b      	bne.n	8010e1c <xQueueGenericSendFromISR+0x30>
 8010e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e08:	b672      	cpsid	i
 8010e0a:	f383 8811 	msr	BASEPRI, r3
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	f3bf 8f4f 	dsb	sy
 8010e16:	b662      	cpsie	i
 8010e18:	627b      	str	r3, [r7, #36]	; 0x24
 8010e1a:	e7fe      	b.n	8010e1a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d103      	bne.n	8010e2a <xQueueGenericSendFromISR+0x3e>
 8010e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d101      	bne.n	8010e2e <xQueueGenericSendFromISR+0x42>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	e000      	b.n	8010e30 <xQueueGenericSendFromISR+0x44>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d10b      	bne.n	8010e4c <xQueueGenericSendFromISR+0x60>
 8010e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e38:	b672      	cpsid	i
 8010e3a:	f383 8811 	msr	BASEPRI, r3
 8010e3e:	f3bf 8f6f 	isb	sy
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	b662      	cpsie	i
 8010e48:	623b      	str	r3, [r7, #32]
 8010e4a:	e7fe      	b.n	8010e4a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	2b02      	cmp	r3, #2
 8010e50:	d103      	bne.n	8010e5a <xQueueGenericSendFromISR+0x6e>
 8010e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d101      	bne.n	8010e5e <xQueueGenericSendFromISR+0x72>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e000      	b.n	8010e60 <xQueueGenericSendFromISR+0x74>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d10b      	bne.n	8010e7c <xQueueGenericSendFromISR+0x90>
 8010e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e68:	b672      	cpsid	i
 8010e6a:	f383 8811 	msr	BASEPRI, r3
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	f3bf 8f4f 	dsb	sy
 8010e76:	b662      	cpsie	i
 8010e78:	61fb      	str	r3, [r7, #28]
 8010e7a:	e7fe      	b.n	8010e7a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e7c:	f002 f88c 	bl	8012f98 <vPortValidateInterruptPriority>
	__asm volatile
 8010e80:	f3ef 8211 	mrs	r2, BASEPRI
 8010e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e88:	b672      	cpsid	i
 8010e8a:	f383 8811 	msr	BASEPRI, r3
 8010e8e:	f3bf 8f6f 	isb	sy
 8010e92:	f3bf 8f4f 	dsb	sy
 8010e96:	b662      	cpsie	i
 8010e98:	61ba      	str	r2, [r7, #24]
 8010e9a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010e9c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d302      	bcc.n	8010eb2 <xQueueGenericSendFromISR+0xc6>
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d12c      	bne.n	8010f0c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ebc:	683a      	ldr	r2, [r7, #0]
 8010ebe:	68b9      	ldr	r1, [r7, #8]
 8010ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ec2:	f000 f911 	bl	80110e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ec6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ece:	d112      	bne.n	8010ef6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d016      	beq.n	8010f06 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eda:	3324      	adds	r3, #36	; 0x24
 8010edc:	4618      	mov	r0, r3
 8010ede:	f000 ff4d 	bl	8011d7c <xTaskRemoveFromEventList>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d00e      	beq.n	8010f06 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d00b      	beq.n	8010f06 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	601a      	str	r2, [r3, #0]
 8010ef4:	e007      	b.n	8010f06 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010efa:	3301      	adds	r3, #1
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	b25a      	sxtb	r2, r3
 8010f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010f06:	2301      	movs	r3, #1
 8010f08:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010f0a:	e001      	b.n	8010f10 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f12:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3738      	adds	r7, #56	; 0x38
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b08c      	sub	sp, #48	; 0x30
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f30:	2300      	movs	r3, #0
 8010f32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d10b      	bne.n	8010f56 <xQueueReceive+0x32>
	__asm volatile
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	b672      	cpsid	i
 8010f44:	f383 8811 	msr	BASEPRI, r3
 8010f48:	f3bf 8f6f 	isb	sy
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	b662      	cpsie	i
 8010f52:	623b      	str	r3, [r7, #32]
 8010f54:	e7fe      	b.n	8010f54 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d103      	bne.n	8010f64 <xQueueReceive+0x40>
 8010f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d101      	bne.n	8010f68 <xQueueReceive+0x44>
 8010f64:	2301      	movs	r3, #1
 8010f66:	e000      	b.n	8010f6a <xQueueReceive+0x46>
 8010f68:	2300      	movs	r3, #0
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d10b      	bne.n	8010f86 <xQueueReceive+0x62>
 8010f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f72:	b672      	cpsid	i
 8010f74:	f383 8811 	msr	BASEPRI, r3
 8010f78:	f3bf 8f6f 	isb	sy
 8010f7c:	f3bf 8f4f 	dsb	sy
 8010f80:	b662      	cpsie	i
 8010f82:	61fb      	str	r3, [r7, #28]
 8010f84:	e7fe      	b.n	8010f84 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f86:	f001 f8b7 	bl	80120f8 <xTaskGetSchedulerState>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d102      	bne.n	8010f96 <xQueueReceive+0x72>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d101      	bne.n	8010f9a <xQueueReceive+0x76>
 8010f96:	2301      	movs	r3, #1
 8010f98:	e000      	b.n	8010f9c <xQueueReceive+0x78>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d10b      	bne.n	8010fb8 <xQueueReceive+0x94>
 8010fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa4:	b672      	cpsid	i
 8010fa6:	f383 8811 	msr	BASEPRI, r3
 8010faa:	f3bf 8f6f 	isb	sy
 8010fae:	f3bf 8f4f 	dsb	sy
 8010fb2:	b662      	cpsie	i
 8010fb4:	61bb      	str	r3, [r7, #24]
 8010fb6:	e7fe      	b.n	8010fb6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010fb8:	f001 ff0e 	bl	8012dd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fc0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d01f      	beq.n	8011008 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010fc8:	68b9      	ldr	r1, [r7, #8]
 8010fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fcc:	f000 f8f6 	bl	80111bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	1e5a      	subs	r2, r3, #1
 8010fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00f      	beq.n	8011000 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe2:	3310      	adds	r3, #16
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f000 fec9 	bl	8011d7c <xTaskRemoveFromEventList>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d007      	beq.n	8011000 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010ff0:	4b3c      	ldr	r3, [pc, #240]	; (80110e4 <xQueueReceive+0x1c0>)
 8010ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ff6:	601a      	str	r2, [r3, #0]
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011000:	f001 ff1c 	bl	8012e3c <vPortExitCritical>
				return pdPASS;
 8011004:	2301      	movs	r3, #1
 8011006:	e069      	b.n	80110dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d103      	bne.n	8011016 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801100e:	f001 ff15 	bl	8012e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011012:	2300      	movs	r3, #0
 8011014:	e062      	b.n	80110dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011018:	2b00      	cmp	r3, #0
 801101a:	d106      	bne.n	801102a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801101c:	f107 0310 	add.w	r3, r7, #16
 8011020:	4618      	mov	r0, r3
 8011022:	f000 ff0f 	bl	8011e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011026:	2301      	movs	r3, #1
 8011028:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801102a:	f001 ff07 	bl	8012e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801102e:	f000 fc7f 	bl	8011930 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011032:	f001 fed1 	bl	8012dd8 <vPortEnterCritical>
 8011036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801103c:	b25b      	sxtb	r3, r3
 801103e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011042:	d103      	bne.n	801104c <xQueueReceive+0x128>
 8011044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011046:	2200      	movs	r2, #0
 8011048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011052:	b25b      	sxtb	r3, r3
 8011054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011058:	d103      	bne.n	8011062 <xQueueReceive+0x13e>
 801105a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801105c:	2200      	movs	r2, #0
 801105e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011062:	f001 feeb 	bl	8012e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011066:	1d3a      	adds	r2, r7, #4
 8011068:	f107 0310 	add.w	r3, r7, #16
 801106c:	4611      	mov	r1, r2
 801106e:	4618      	mov	r0, r3
 8011070:	f000 fefe 	bl	8011e70 <xTaskCheckForTimeOut>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d123      	bne.n	80110c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801107a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801107c:	f000 f916 	bl	80112ac <prvIsQueueEmpty>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d017      	beq.n	80110b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011088:	3324      	adds	r3, #36	; 0x24
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	4611      	mov	r1, r2
 801108e:	4618      	mov	r0, r3
 8011090:	f000 fe22 	bl	8011cd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011096:	f000 f8b7 	bl	8011208 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801109a:	f000 fc57 	bl	801194c <xTaskResumeAll>
 801109e:	4603      	mov	r3, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d189      	bne.n	8010fb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80110a4:	4b0f      	ldr	r3, [pc, #60]	; (80110e4 <xQueueReceive+0x1c0>)
 80110a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110aa:	601a      	str	r2, [r3, #0]
 80110ac:	f3bf 8f4f 	dsb	sy
 80110b0:	f3bf 8f6f 	isb	sy
 80110b4:	e780      	b.n	8010fb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80110b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110b8:	f000 f8a6 	bl	8011208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110bc:	f000 fc46 	bl	801194c <xTaskResumeAll>
 80110c0:	e77a      	b.n	8010fb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80110c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110c4:	f000 f8a0 	bl	8011208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110c8:	f000 fc40 	bl	801194c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110ce:	f000 f8ed 	bl	80112ac <prvIsQueueEmpty>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	f43f af6f 	beq.w	8010fb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80110da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3730      	adds	r7, #48	; 0x30
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	e000ed04 	.word	0xe000ed04

080110e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b086      	sub	sp, #24
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80110f4:	2300      	movs	r3, #0
 80110f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011102:	2b00      	cmp	r3, #0
 8011104:	d10d      	bne.n	8011122 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d14d      	bne.n	80111aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	4618      	mov	r0, r3
 8011114:	f001 f80e 	bl	8012134 <xTaskPriorityDisinherit>
 8011118:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2200      	movs	r2, #0
 801111e:	609a      	str	r2, [r3, #8]
 8011120:	e043      	b.n	80111aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d119      	bne.n	801115c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	6858      	ldr	r0, [r3, #4]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011130:	461a      	mov	r2, r3
 8011132:	68b9      	ldr	r1, [r7, #8]
 8011134:	f002 f97e 	bl	8013434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	685a      	ldr	r2, [r3, #4]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011140:	441a      	add	r2, r3
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	685a      	ldr	r2, [r3, #4]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	429a      	cmp	r2, r3
 8011150:	d32b      	bcc.n	80111aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	605a      	str	r2, [r3, #4]
 801115a:	e026      	b.n	80111aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	68d8      	ldr	r0, [r3, #12]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011164:	461a      	mov	r2, r3
 8011166:	68b9      	ldr	r1, [r7, #8]
 8011168:	f002 f964 	bl	8013434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	68da      	ldr	r2, [r3, #12]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011174:	425b      	negs	r3, r3
 8011176:	441a      	add	r2, r3
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	68da      	ldr	r2, [r3, #12]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	429a      	cmp	r2, r3
 8011186:	d207      	bcs.n	8011198 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	689a      	ldr	r2, [r3, #8]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011190:	425b      	negs	r3, r3
 8011192:	441a      	add	r2, r3
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2b02      	cmp	r3, #2
 801119c:	d105      	bne.n	80111aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d002      	beq.n	80111aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	3b01      	subs	r3, #1
 80111a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80111aa:	693b      	ldr	r3, [r7, #16]
 80111ac:	1c5a      	adds	r2, r3, #1
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80111b2:	697b      	ldr	r3, [r7, #20]
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3718      	adds	r7, #24
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d018      	beq.n	8011200 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	68da      	ldr	r2, [r3, #12]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111d6:	441a      	add	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	68da      	ldr	r2, [r3, #12]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d303      	bcc.n	80111f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	68d9      	ldr	r1, [r3, #12]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111f8:	461a      	mov	r2, r3
 80111fa:	6838      	ldr	r0, [r7, #0]
 80111fc:	f002 f91a 	bl	8013434 <memcpy>
	}
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011210:	f001 fde2 	bl	8012dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801121a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801121c:	e011      	b.n	8011242 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011222:	2b00      	cmp	r3, #0
 8011224:	d012      	beq.n	801124c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3324      	adds	r3, #36	; 0x24
 801122a:	4618      	mov	r0, r3
 801122c:	f000 fda6 	bl	8011d7c <xTaskRemoveFromEventList>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d001      	beq.n	801123a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011236:	f000 fe7f 	bl	8011f38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801123a:	7bfb      	ldrb	r3, [r7, #15]
 801123c:	3b01      	subs	r3, #1
 801123e:	b2db      	uxtb	r3, r3
 8011240:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011246:	2b00      	cmp	r3, #0
 8011248:	dce9      	bgt.n	801121e <prvUnlockQueue+0x16>
 801124a:	e000      	b.n	801124e <prvUnlockQueue+0x46>
					break;
 801124c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	22ff      	movs	r2, #255	; 0xff
 8011252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011256:	f001 fdf1 	bl	8012e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801125a:	f001 fdbd 	bl	8012dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011264:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011266:	e011      	b.n	801128c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	691b      	ldr	r3, [r3, #16]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d012      	beq.n	8011296 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	3310      	adds	r3, #16
 8011274:	4618      	mov	r0, r3
 8011276:	f000 fd81 	bl	8011d7c <xTaskRemoveFromEventList>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d001      	beq.n	8011284 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011280:	f000 fe5a 	bl	8011f38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011284:	7bbb      	ldrb	r3, [r7, #14]
 8011286:	3b01      	subs	r3, #1
 8011288:	b2db      	uxtb	r3, r3
 801128a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801128c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011290:	2b00      	cmp	r3, #0
 8011292:	dce9      	bgt.n	8011268 <prvUnlockQueue+0x60>
 8011294:	e000      	b.n	8011298 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011296:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	22ff      	movs	r2, #255	; 0xff
 801129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80112a0:	f001 fdcc 	bl	8012e3c <vPortExitCritical>
}
 80112a4:	bf00      	nop
 80112a6:	3710      	adds	r7, #16
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112b4:	f001 fd90 	bl	8012dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d102      	bne.n	80112c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80112c0:	2301      	movs	r3, #1
 80112c2:	60fb      	str	r3, [r7, #12]
 80112c4:	e001      	b.n	80112ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80112c6:	2300      	movs	r3, #0
 80112c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112ca:	f001 fdb7 	bl	8012e3c <vPortExitCritical>

	return xReturn;
 80112ce:	68fb      	ldr	r3, [r7, #12]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112e0:	f001 fd7a 	bl	8012dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d102      	bne.n	80112f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80112f0:	2301      	movs	r3, #1
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	e001      	b.n	80112fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80112f6:	2300      	movs	r3, #0
 80112f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112fa:	f001 fd9f 	bl	8012e3c <vPortExitCritical>

	return xReturn;
 80112fe:	68fb      	ldr	r3, [r7, #12]
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011308:	b480      	push	{r7}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011312:	2300      	movs	r3, #0
 8011314:	60fb      	str	r3, [r7, #12]
 8011316:	e014      	b.n	8011342 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011318:	4a0e      	ldr	r2, [pc, #56]	; (8011354 <vQueueAddToRegistry+0x4c>)
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d10b      	bne.n	801133c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011324:	490b      	ldr	r1, [pc, #44]	; (8011354 <vQueueAddToRegistry+0x4c>)
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	683a      	ldr	r2, [r7, #0]
 801132a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801132e:	4a09      	ldr	r2, [pc, #36]	; (8011354 <vQueueAddToRegistry+0x4c>)
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	00db      	lsls	r3, r3, #3
 8011334:	4413      	add	r3, r2
 8011336:	687a      	ldr	r2, [r7, #4]
 8011338:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801133a:	e005      	b.n	8011348 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	3301      	adds	r3, #1
 8011340:	60fb      	str	r3, [r7, #12]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2b07      	cmp	r3, #7
 8011346:	d9e7      	bls.n	8011318 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011348:	bf00      	nop
 801134a:	3714      	adds	r7, #20
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr
 8011354:	20031178 	.word	0x20031178

08011358 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011358:	b580      	push	{r7, lr}
 801135a:	b086      	sub	sp, #24
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011368:	f001 fd36 	bl	8012dd8 <vPortEnterCritical>
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011372:	b25b      	sxtb	r3, r3
 8011374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011378:	d103      	bne.n	8011382 <vQueueWaitForMessageRestricted+0x2a>
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	2200      	movs	r2, #0
 801137e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011388:	b25b      	sxtb	r3, r3
 801138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801138e:	d103      	bne.n	8011398 <vQueueWaitForMessageRestricted+0x40>
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	2200      	movs	r2, #0
 8011394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011398:	f001 fd50 	bl	8012e3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d106      	bne.n	80113b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	3324      	adds	r3, #36	; 0x24
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	68b9      	ldr	r1, [r7, #8]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f000 fcb9 	bl	8011d24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80113b2:	6978      	ldr	r0, [r7, #20]
 80113b4:	f7ff ff28 	bl	8011208 <prvUnlockQueue>
	}
 80113b8:	bf00      	nop
 80113ba:	3718      	adds	r7, #24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b08e      	sub	sp, #56	; 0x38
 80113c4:	af04      	add	r7, sp, #16
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80113ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10b      	bne.n	80113ec <xTaskCreateStatic+0x2c>
 80113d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d8:	b672      	cpsid	i
 80113da:	f383 8811 	msr	BASEPRI, r3
 80113de:	f3bf 8f6f 	isb	sy
 80113e2:	f3bf 8f4f 	dsb	sy
 80113e6:	b662      	cpsie	i
 80113e8:	623b      	str	r3, [r7, #32]
 80113ea:	e7fe      	b.n	80113ea <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80113ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d10b      	bne.n	801140a <xTaskCreateStatic+0x4a>
 80113f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f6:	b672      	cpsid	i
 80113f8:	f383 8811 	msr	BASEPRI, r3
 80113fc:	f3bf 8f6f 	isb	sy
 8011400:	f3bf 8f4f 	dsb	sy
 8011404:	b662      	cpsie	i
 8011406:	61fb      	str	r3, [r7, #28]
 8011408:	e7fe      	b.n	8011408 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801140a:	235c      	movs	r3, #92	; 0x5c
 801140c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	2b5c      	cmp	r3, #92	; 0x5c
 8011412:	d00b      	beq.n	801142c <xTaskCreateStatic+0x6c>
 8011414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011418:	b672      	cpsid	i
 801141a:	f383 8811 	msr	BASEPRI, r3
 801141e:	f3bf 8f6f 	isb	sy
 8011422:	f3bf 8f4f 	dsb	sy
 8011426:	b662      	cpsie	i
 8011428:	61bb      	str	r3, [r7, #24]
 801142a:	e7fe      	b.n	801142a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801142c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801142e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011430:	2b00      	cmp	r3, #0
 8011432:	d01e      	beq.n	8011472 <xTaskCreateStatic+0xb2>
 8011434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011436:	2b00      	cmp	r3, #0
 8011438:	d01b      	beq.n	8011472 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011442:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011446:	2202      	movs	r2, #2
 8011448:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801144c:	2300      	movs	r3, #0
 801144e:	9303      	str	r3, [sp, #12]
 8011450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011452:	9302      	str	r3, [sp, #8]
 8011454:	f107 0314 	add.w	r3, r7, #20
 8011458:	9301      	str	r3, [sp, #4]
 801145a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	687a      	ldr	r2, [r7, #4]
 8011462:	68b9      	ldr	r1, [r7, #8]
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	f000 f850 	bl	801150a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801146a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801146c:	f000 f8de 	bl	801162c <prvAddNewTaskToReadyList>
 8011470:	e001      	b.n	8011476 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011472:	2300      	movs	r3, #0
 8011474:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011476:	697b      	ldr	r3, [r7, #20]
	}
 8011478:	4618      	mov	r0, r3
 801147a:	3728      	adds	r7, #40	; 0x28
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011480:	b580      	push	{r7, lr}
 8011482:	b08c      	sub	sp, #48	; 0x30
 8011484:	af04      	add	r7, sp, #16
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	603b      	str	r3, [r7, #0]
 801148c:	4613      	mov	r3, r2
 801148e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011490:	88fb      	ldrh	r3, [r7, #6]
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4618      	mov	r0, r3
 8011496:	f001 fdc1 	bl	801301c <pvPortMalloc>
 801149a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00e      	beq.n	80114c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80114a2:	205c      	movs	r0, #92	; 0x5c
 80114a4:	f001 fdba 	bl	801301c <pvPortMalloc>
 80114a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d003      	beq.n	80114b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	697a      	ldr	r2, [r7, #20]
 80114b4:	631a      	str	r2, [r3, #48]	; 0x30
 80114b6:	e005      	b.n	80114c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80114b8:	6978      	ldr	r0, [r7, #20]
 80114ba:	f001 fe77 	bl	80131ac <vPortFree>
 80114be:	e001      	b.n	80114c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80114c0:	2300      	movs	r3, #0
 80114c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d017      	beq.n	80114fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80114d2:	88fa      	ldrh	r2, [r7, #6]
 80114d4:	2300      	movs	r3, #0
 80114d6:	9303      	str	r3, [sp, #12]
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	9302      	str	r3, [sp, #8]
 80114dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114de:	9301      	str	r3, [sp, #4]
 80114e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	68b9      	ldr	r1, [r7, #8]
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f000 f80e 	bl	801150a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80114ee:	69f8      	ldr	r0, [r7, #28]
 80114f0:	f000 f89c 	bl	801162c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80114f4:	2301      	movs	r3, #1
 80114f6:	61bb      	str	r3, [r7, #24]
 80114f8:	e002      	b.n	8011500 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80114fa:	f04f 33ff 	mov.w	r3, #4294967295
 80114fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011500:	69bb      	ldr	r3, [r7, #24]
	}
 8011502:	4618      	mov	r0, r3
 8011504:	3720      	adds	r7, #32
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b088      	sub	sp, #32
 801150e:	af00      	add	r7, sp, #0
 8011510:	60f8      	str	r0, [r7, #12]
 8011512:	60b9      	str	r1, [r7, #8]
 8011514:	607a      	str	r2, [r7, #4]
 8011516:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	461a      	mov	r2, r3
 8011522:	21a5      	movs	r1, #165	; 0xa5
 8011524:	f001 ff91 	bl	801344a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801152c:	6879      	ldr	r1, [r7, #4]
 801152e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011532:	440b      	add	r3, r1
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	4413      	add	r3, r2
 8011538:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801153a:	69bb      	ldr	r3, [r7, #24]
 801153c:	f023 0307 	bic.w	r3, r3, #7
 8011540:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	f003 0307 	and.w	r3, r3, #7
 8011548:	2b00      	cmp	r3, #0
 801154a:	d00b      	beq.n	8011564 <prvInitialiseNewTask+0x5a>
 801154c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011550:	b672      	cpsid	i
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	b662      	cpsie	i
 8011560:	617b      	str	r3, [r7, #20]
 8011562:	e7fe      	b.n	8011562 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d01f      	beq.n	80115aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801156a:	2300      	movs	r3, #0
 801156c:	61fb      	str	r3, [r7, #28]
 801156e:	e012      	b.n	8011596 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	4413      	add	r3, r2
 8011576:	7819      	ldrb	r1, [r3, #0]
 8011578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	4413      	add	r3, r2
 801157e:	3334      	adds	r3, #52	; 0x34
 8011580:	460a      	mov	r2, r1
 8011582:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	4413      	add	r3, r2
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d006      	beq.n	801159e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	3301      	adds	r3, #1
 8011594:	61fb      	str	r3, [r7, #28]
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	2b0f      	cmp	r3, #15
 801159a:	d9e9      	bls.n	8011570 <prvInitialiseNewTask+0x66>
 801159c:	e000      	b.n	80115a0 <prvInitialiseNewTask+0x96>
			{
				break;
 801159e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80115a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80115a8:	e003      	b.n	80115b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80115aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ac:	2200      	movs	r2, #0
 80115ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	2b37      	cmp	r3, #55	; 0x37
 80115b6:	d901      	bls.n	80115bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80115b8:	2337      	movs	r3, #55	; 0x37
 80115ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80115bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80115c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80115c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ca:	2200      	movs	r2, #0
 80115cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80115ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d0:	3304      	adds	r3, #4
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff f96a 	bl	80108ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80115d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115da:	3318      	adds	r3, #24
 80115dc:	4618      	mov	r0, r3
 80115de:	f7ff f965 	bl	80108ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80115e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80115ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80115f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80115f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fa:	2200      	movs	r2, #0
 80115fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011600:	2200      	movs	r2, #0
 8011602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011606:	683a      	ldr	r2, [r7, #0]
 8011608:	68f9      	ldr	r1, [r7, #12]
 801160a:	69b8      	ldr	r0, [r7, #24]
 801160c:	f001 fade 	bl	8012bcc <pxPortInitialiseStack>
 8011610:	4602      	mov	r2, r0
 8011612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011614:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011618:	2b00      	cmp	r3, #0
 801161a:	d002      	beq.n	8011622 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011622:	bf00      	nop
 8011624:	3720      	adds	r7, #32
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
	...

0801162c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011634:	f001 fbd0 	bl	8012dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011638:	4b2d      	ldr	r3, [pc, #180]	; (80116f0 <prvAddNewTaskToReadyList+0xc4>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	3301      	adds	r3, #1
 801163e:	4a2c      	ldr	r2, [pc, #176]	; (80116f0 <prvAddNewTaskToReadyList+0xc4>)
 8011640:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011642:	4b2c      	ldr	r3, [pc, #176]	; (80116f4 <prvAddNewTaskToReadyList+0xc8>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d109      	bne.n	801165e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801164a:	4a2a      	ldr	r2, [pc, #168]	; (80116f4 <prvAddNewTaskToReadyList+0xc8>)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011650:	4b27      	ldr	r3, [pc, #156]	; (80116f0 <prvAddNewTaskToReadyList+0xc4>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d110      	bne.n	801167a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011658:	f000 fc92 	bl	8011f80 <prvInitialiseTaskLists>
 801165c:	e00d      	b.n	801167a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801165e:	4b26      	ldr	r3, [pc, #152]	; (80116f8 <prvAddNewTaskToReadyList+0xcc>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d109      	bne.n	801167a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011666:	4b23      	ldr	r3, [pc, #140]	; (80116f4 <prvAddNewTaskToReadyList+0xc8>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011670:	429a      	cmp	r2, r3
 8011672:	d802      	bhi.n	801167a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011674:	4a1f      	ldr	r2, [pc, #124]	; (80116f4 <prvAddNewTaskToReadyList+0xc8>)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801167a:	4b20      	ldr	r3, [pc, #128]	; (80116fc <prvAddNewTaskToReadyList+0xd0>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	3301      	adds	r3, #1
 8011680:	4a1e      	ldr	r2, [pc, #120]	; (80116fc <prvAddNewTaskToReadyList+0xd0>)
 8011682:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011684:	4b1d      	ldr	r3, [pc, #116]	; (80116fc <prvAddNewTaskToReadyList+0xd0>)
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011690:	4b1b      	ldr	r3, [pc, #108]	; (8011700 <prvAddNewTaskToReadyList+0xd4>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	429a      	cmp	r2, r3
 8011696:	d903      	bls.n	80116a0 <prvAddNewTaskToReadyList+0x74>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169c:	4a18      	ldr	r2, [pc, #96]	; (8011700 <prvAddNewTaskToReadyList+0xd4>)
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116a4:	4613      	mov	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4a15      	ldr	r2, [pc, #84]	; (8011704 <prvAddNewTaskToReadyList+0xd8>)
 80116ae:	441a      	add	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	3304      	adds	r3, #4
 80116b4:	4619      	mov	r1, r3
 80116b6:	4610      	mov	r0, r2
 80116b8:	f7ff f905 	bl	80108c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80116bc:	f001 fbbe 	bl	8012e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80116c0:	4b0d      	ldr	r3, [pc, #52]	; (80116f8 <prvAddNewTaskToReadyList+0xcc>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d00e      	beq.n	80116e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80116c8:	4b0a      	ldr	r3, [pc, #40]	; (80116f4 <prvAddNewTaskToReadyList+0xc8>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d207      	bcs.n	80116e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80116d6:	4b0c      	ldr	r3, [pc, #48]	; (8011708 <prvAddNewTaskToReadyList+0xdc>)
 80116d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116dc:	601a      	str	r2, [r3, #0]
 80116de:	f3bf 8f4f 	dsb	sy
 80116e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116e6:	bf00      	nop
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	20003f34 	.word	0x20003f34
 80116f4:	20003a60 	.word	0x20003a60
 80116f8:	20003f40 	.word	0x20003f40
 80116fc:	20003f50 	.word	0x20003f50
 8011700:	20003f3c 	.word	0x20003f3c
 8011704:	20003a64 	.word	0x20003a64
 8011708:	e000ed04 	.word	0xe000ed04

0801170c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011714:	f001 fb60 	bl	8012dd8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d102      	bne.n	8011724 <vTaskDelete+0x18>
 801171e:	4b2d      	ldr	r3, [pc, #180]	; (80117d4 <vTaskDelete+0xc8>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	e000      	b.n	8011726 <vTaskDelete+0x1a>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	3304      	adds	r3, #4
 801172c:	4618      	mov	r0, r3
 801172e:	f7ff f927 	bl	8010980 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011736:	2b00      	cmp	r3, #0
 8011738:	d004      	beq.n	8011744 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	3318      	adds	r3, #24
 801173e:	4618      	mov	r0, r3
 8011740:	f7ff f91e 	bl	8010980 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011744:	4b24      	ldr	r3, [pc, #144]	; (80117d8 <vTaskDelete+0xcc>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	3301      	adds	r3, #1
 801174a:	4a23      	ldr	r2, [pc, #140]	; (80117d8 <vTaskDelete+0xcc>)
 801174c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801174e:	4b21      	ldr	r3, [pc, #132]	; (80117d4 <vTaskDelete+0xc8>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	68fa      	ldr	r2, [r7, #12]
 8011754:	429a      	cmp	r2, r3
 8011756:	d10b      	bne.n	8011770 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	3304      	adds	r3, #4
 801175c:	4619      	mov	r1, r3
 801175e:	481f      	ldr	r0, [pc, #124]	; (80117dc <vTaskDelete+0xd0>)
 8011760:	f7ff f8b1 	bl	80108c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011764:	4b1e      	ldr	r3, [pc, #120]	; (80117e0 <vTaskDelete+0xd4>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	3301      	adds	r3, #1
 801176a:	4a1d      	ldr	r2, [pc, #116]	; (80117e0 <vTaskDelete+0xd4>)
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	e009      	b.n	8011784 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011770:	4b1c      	ldr	r3, [pc, #112]	; (80117e4 <vTaskDelete+0xd8>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	3b01      	subs	r3, #1
 8011776:	4a1b      	ldr	r2, [pc, #108]	; (80117e4 <vTaskDelete+0xd8>)
 8011778:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f000 fc6c 	bl	8012058 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011780:	f000 fc9a 	bl	80120b8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8011784:	f001 fb5a 	bl	8012e3c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011788:	4b17      	ldr	r3, [pc, #92]	; (80117e8 <vTaskDelete+0xdc>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d01c      	beq.n	80117ca <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8011790:	4b10      	ldr	r3, [pc, #64]	; (80117d4 <vTaskDelete+0xc8>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	68fa      	ldr	r2, [r7, #12]
 8011796:	429a      	cmp	r2, r3
 8011798:	d117      	bne.n	80117ca <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801179a:	4b14      	ldr	r3, [pc, #80]	; (80117ec <vTaskDelete+0xe0>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d00b      	beq.n	80117ba <vTaskDelete+0xae>
 80117a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a6:	b672      	cpsid	i
 80117a8:	f383 8811 	msr	BASEPRI, r3
 80117ac:	f3bf 8f6f 	isb	sy
 80117b0:	f3bf 8f4f 	dsb	sy
 80117b4:	b662      	cpsie	i
 80117b6:	60bb      	str	r3, [r7, #8]
 80117b8:	e7fe      	b.n	80117b8 <vTaskDelete+0xac>
				portYIELD_WITHIN_API();
 80117ba:	4b0d      	ldr	r3, [pc, #52]	; (80117f0 <vTaskDelete+0xe4>)
 80117bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117c0:	601a      	str	r2, [r3, #0]
 80117c2:	f3bf 8f4f 	dsb	sy
 80117c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80117ca:	bf00      	nop
 80117cc:	3710      	adds	r7, #16
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	20003a60 	.word	0x20003a60
 80117d8:	20003f50 	.word	0x20003f50
 80117dc:	20003f08 	.word	0x20003f08
 80117e0:	20003f1c 	.word	0x20003f1c
 80117e4:	20003f34 	.word	0x20003f34
 80117e8:	20003f40 	.word	0x20003f40
 80117ec:	20003f5c 	.word	0x20003f5c
 80117f0:	e000ed04 	.word	0xe000ed04

080117f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80117fc:	2300      	movs	r3, #0
 80117fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d018      	beq.n	8011838 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011806:	4b14      	ldr	r3, [pc, #80]	; (8011858 <vTaskDelay+0x64>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d00b      	beq.n	8011826 <vTaskDelay+0x32>
 801180e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011812:	b672      	cpsid	i
 8011814:	f383 8811 	msr	BASEPRI, r3
 8011818:	f3bf 8f6f 	isb	sy
 801181c:	f3bf 8f4f 	dsb	sy
 8011820:	b662      	cpsie	i
 8011822:	60bb      	str	r3, [r7, #8]
 8011824:	e7fe      	b.n	8011824 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011826:	f000 f883 	bl	8011930 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801182a:	2100      	movs	r1, #0
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 fe05 	bl	801243c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011832:	f000 f88b 	bl	801194c <xTaskResumeAll>
 8011836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d107      	bne.n	801184e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801183e:	4b07      	ldr	r3, [pc, #28]	; (801185c <vTaskDelay+0x68>)
 8011840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011844:	601a      	str	r2, [r3, #0]
 8011846:	f3bf 8f4f 	dsb	sy
 801184a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801184e:	bf00      	nop
 8011850:	3710      	adds	r7, #16
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	20003f5c 	.word	0x20003f5c
 801185c:	e000ed04 	.word	0xe000ed04

08011860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08a      	sub	sp, #40	; 0x28
 8011864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011866:	2300      	movs	r3, #0
 8011868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801186a:	2300      	movs	r3, #0
 801186c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801186e:	463a      	mov	r2, r7
 8011870:	1d39      	adds	r1, r7, #4
 8011872:	f107 0308 	add.w	r3, r7, #8
 8011876:	4618      	mov	r0, r3
 8011878:	f7fe fef0 	bl	801065c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801187c:	6839      	ldr	r1, [r7, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	68ba      	ldr	r2, [r7, #8]
 8011882:	9202      	str	r2, [sp, #8]
 8011884:	9301      	str	r3, [sp, #4]
 8011886:	2300      	movs	r3, #0
 8011888:	9300      	str	r3, [sp, #0]
 801188a:	2300      	movs	r3, #0
 801188c:	460a      	mov	r2, r1
 801188e:	4922      	ldr	r1, [pc, #136]	; (8011918 <vTaskStartScheduler+0xb8>)
 8011890:	4822      	ldr	r0, [pc, #136]	; (801191c <vTaskStartScheduler+0xbc>)
 8011892:	f7ff fd95 	bl	80113c0 <xTaskCreateStatic>
 8011896:	4602      	mov	r2, r0
 8011898:	4b21      	ldr	r3, [pc, #132]	; (8011920 <vTaskStartScheduler+0xc0>)
 801189a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801189c:	4b20      	ldr	r3, [pc, #128]	; (8011920 <vTaskStartScheduler+0xc0>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d002      	beq.n	80118aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80118a4:	2301      	movs	r3, #1
 80118a6:	617b      	str	r3, [r7, #20]
 80118a8:	e001      	b.n	80118ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80118aa:	2300      	movs	r3, #0
 80118ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d102      	bne.n	80118ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80118b4:	f000 fe16 	bl	80124e4 <xTimerCreateTimerTask>
 80118b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d117      	bne.n	80118f0 <vTaskStartScheduler+0x90>
 80118c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c4:	b672      	cpsid	i
 80118c6:	f383 8811 	msr	BASEPRI, r3
 80118ca:	f3bf 8f6f 	isb	sy
 80118ce:	f3bf 8f4f 	dsb	sy
 80118d2:	b662      	cpsie	i
 80118d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80118d6:	4b13      	ldr	r3, [pc, #76]	; (8011924 <vTaskStartScheduler+0xc4>)
 80118d8:	f04f 32ff 	mov.w	r2, #4294967295
 80118dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80118de:	4b12      	ldr	r3, [pc, #72]	; (8011928 <vTaskStartScheduler+0xc8>)
 80118e0:	2201      	movs	r2, #1
 80118e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80118e4:	4b11      	ldr	r3, [pc, #68]	; (801192c <vTaskStartScheduler+0xcc>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80118ea:	f001 f9f9 	bl	8012ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80118ee:	e00f      	b.n	8011910 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f6:	d10b      	bne.n	8011910 <vTaskStartScheduler+0xb0>
 80118f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fc:	b672      	cpsid	i
 80118fe:	f383 8811 	msr	BASEPRI, r3
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	f3bf 8f4f 	dsb	sy
 801190a:	b662      	cpsie	i
 801190c:	60fb      	str	r3, [r7, #12]
 801190e:	e7fe      	b.n	801190e <vTaskStartScheduler+0xae>
}
 8011910:	bf00      	nop
 8011912:	3718      	adds	r7, #24
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	08018094 	.word	0x08018094
 801191c:	08011f51 	.word	0x08011f51
 8011920:	20003f58 	.word	0x20003f58
 8011924:	20003f54 	.word	0x20003f54
 8011928:	20003f40 	.word	0x20003f40
 801192c:	20003f38 	.word	0x20003f38

08011930 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011930:	b480      	push	{r7}
 8011932:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011934:	4b04      	ldr	r3, [pc, #16]	; (8011948 <vTaskSuspendAll+0x18>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	3301      	adds	r3, #1
 801193a:	4a03      	ldr	r2, [pc, #12]	; (8011948 <vTaskSuspendAll+0x18>)
 801193c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801193e:	bf00      	nop
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr
 8011948:	20003f5c 	.word	0x20003f5c

0801194c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011952:	2300      	movs	r3, #0
 8011954:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011956:	2300      	movs	r3, #0
 8011958:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801195a:	4b42      	ldr	r3, [pc, #264]	; (8011a64 <xTaskResumeAll+0x118>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10b      	bne.n	801197a <xTaskResumeAll+0x2e>
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	b672      	cpsid	i
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	b662      	cpsie	i
 8011976:	603b      	str	r3, [r7, #0]
 8011978:	e7fe      	b.n	8011978 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801197a:	f001 fa2d 	bl	8012dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801197e:	4b39      	ldr	r3, [pc, #228]	; (8011a64 <xTaskResumeAll+0x118>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	3b01      	subs	r3, #1
 8011984:	4a37      	ldr	r2, [pc, #220]	; (8011a64 <xTaskResumeAll+0x118>)
 8011986:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011988:	4b36      	ldr	r3, [pc, #216]	; (8011a64 <xTaskResumeAll+0x118>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d162      	bne.n	8011a56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011990:	4b35      	ldr	r3, [pc, #212]	; (8011a68 <xTaskResumeAll+0x11c>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d05e      	beq.n	8011a56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011998:	e02f      	b.n	80119fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801199a:	4b34      	ldr	r3, [pc, #208]	; (8011a6c <xTaskResumeAll+0x120>)
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	68db      	ldr	r3, [r3, #12]
 80119a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	3318      	adds	r3, #24
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fe ffea 	bl	8010980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	3304      	adds	r3, #4
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fe ffe5 	bl	8010980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ba:	4b2d      	ldr	r3, [pc, #180]	; (8011a70 <xTaskResumeAll+0x124>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d903      	bls.n	80119ca <xTaskResumeAll+0x7e>
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c6:	4a2a      	ldr	r2, [pc, #168]	; (8011a70 <xTaskResumeAll+0x124>)
 80119c8:	6013      	str	r3, [r2, #0]
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ce:	4613      	mov	r3, r2
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4413      	add	r3, r2
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	4a27      	ldr	r2, [pc, #156]	; (8011a74 <xTaskResumeAll+0x128>)
 80119d8:	441a      	add	r2, r3
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	3304      	adds	r3, #4
 80119de:	4619      	mov	r1, r3
 80119e0:	4610      	mov	r0, r2
 80119e2:	f7fe ff70 	bl	80108c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ea:	4b23      	ldr	r3, [pc, #140]	; (8011a78 <xTaskResumeAll+0x12c>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d302      	bcc.n	80119fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80119f4:	4b21      	ldr	r3, [pc, #132]	; (8011a7c <xTaskResumeAll+0x130>)
 80119f6:	2201      	movs	r2, #1
 80119f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80119fa:	4b1c      	ldr	r3, [pc, #112]	; (8011a6c <xTaskResumeAll+0x120>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1cb      	bne.n	801199a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d001      	beq.n	8011a0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011a08:	f000 fb56 	bl	80120b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011a0c:	4b1c      	ldr	r3, [pc, #112]	; (8011a80 <xTaskResumeAll+0x134>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d010      	beq.n	8011a3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011a18:	f000 f846 	bl	8011aa8 <xTaskIncrementTick>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d002      	beq.n	8011a28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011a22:	4b16      	ldr	r3, [pc, #88]	; (8011a7c <xTaskResumeAll+0x130>)
 8011a24:	2201      	movs	r2, #1
 8011a26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1f1      	bne.n	8011a18 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8011a34:	4b12      	ldr	r3, [pc, #72]	; (8011a80 <xTaskResumeAll+0x134>)
 8011a36:	2200      	movs	r2, #0
 8011a38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011a3a:	4b10      	ldr	r3, [pc, #64]	; (8011a7c <xTaskResumeAll+0x130>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d009      	beq.n	8011a56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011a42:	2301      	movs	r3, #1
 8011a44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011a46:	4b0f      	ldr	r3, [pc, #60]	; (8011a84 <xTaskResumeAll+0x138>)
 8011a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a4c:	601a      	str	r2, [r3, #0]
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011a56:	f001 f9f1 	bl	8012e3c <vPortExitCritical>

	return xAlreadyYielded;
 8011a5a:	68bb      	ldr	r3, [r7, #8]
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	20003f5c 	.word	0x20003f5c
 8011a68:	20003f34 	.word	0x20003f34
 8011a6c:	20003ef4 	.word	0x20003ef4
 8011a70:	20003f3c 	.word	0x20003f3c
 8011a74:	20003a64 	.word	0x20003a64
 8011a78:	20003a60 	.word	0x20003a60
 8011a7c:	20003f48 	.word	0x20003f48
 8011a80:	20003f44 	.word	0x20003f44
 8011a84:	e000ed04 	.word	0xe000ed04

08011a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011a8e:	4b05      	ldr	r3, [pc, #20]	; (8011aa4 <xTaskGetTickCount+0x1c>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011a94:	687b      	ldr	r3, [r7, #4]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	370c      	adds	r7, #12
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	20003f38 	.word	0x20003f38

08011aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b086      	sub	sp, #24
 8011aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ab2:	4b4f      	ldr	r3, [pc, #316]	; (8011bf0 <xTaskIncrementTick+0x148>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	f040 808a 	bne.w	8011bd0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011abc:	4b4d      	ldr	r3, [pc, #308]	; (8011bf4 <xTaskIncrementTick+0x14c>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011ac4:	4a4b      	ldr	r2, [pc, #300]	; (8011bf4 <xTaskIncrementTick+0x14c>)
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d121      	bne.n	8011b14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011ad0:	4b49      	ldr	r3, [pc, #292]	; (8011bf8 <xTaskIncrementTick+0x150>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00b      	beq.n	8011af2 <xTaskIncrementTick+0x4a>
 8011ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ade:	b672      	cpsid	i
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	b662      	cpsie	i
 8011aee:	603b      	str	r3, [r7, #0]
 8011af0:	e7fe      	b.n	8011af0 <xTaskIncrementTick+0x48>
 8011af2:	4b41      	ldr	r3, [pc, #260]	; (8011bf8 <xTaskIncrementTick+0x150>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	60fb      	str	r3, [r7, #12]
 8011af8:	4b40      	ldr	r3, [pc, #256]	; (8011bfc <xTaskIncrementTick+0x154>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	4a3e      	ldr	r2, [pc, #248]	; (8011bf8 <xTaskIncrementTick+0x150>)
 8011afe:	6013      	str	r3, [r2, #0]
 8011b00:	4a3e      	ldr	r2, [pc, #248]	; (8011bfc <xTaskIncrementTick+0x154>)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	6013      	str	r3, [r2, #0]
 8011b06:	4b3e      	ldr	r3, [pc, #248]	; (8011c00 <xTaskIncrementTick+0x158>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	4a3c      	ldr	r2, [pc, #240]	; (8011c00 <xTaskIncrementTick+0x158>)
 8011b0e:	6013      	str	r3, [r2, #0]
 8011b10:	f000 fad2 	bl	80120b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b14:	4b3b      	ldr	r3, [pc, #236]	; (8011c04 <xTaskIncrementTick+0x15c>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	693a      	ldr	r2, [r7, #16]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d349      	bcc.n	8011bb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b1e:	4b36      	ldr	r3, [pc, #216]	; (8011bf8 <xTaskIncrementTick+0x150>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d104      	bne.n	8011b32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b28:	4b36      	ldr	r3, [pc, #216]	; (8011c04 <xTaskIncrementTick+0x15c>)
 8011b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b2e:	601a      	str	r2, [r3, #0]
					break;
 8011b30:	e03f      	b.n	8011bb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b32:	4b31      	ldr	r3, [pc, #196]	; (8011bf8 <xTaskIncrementTick+0x150>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011b42:	693a      	ldr	r2, [r7, #16]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d203      	bcs.n	8011b52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011b4a:	4a2e      	ldr	r2, [pc, #184]	; (8011c04 <xTaskIncrementTick+0x15c>)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011b50:	e02f      	b.n	8011bb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	3304      	adds	r3, #4
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fe ff12 	bl	8010980 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d004      	beq.n	8011b6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	3318      	adds	r3, #24
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7fe ff09 	bl	8010980 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b72:	4b25      	ldr	r3, [pc, #148]	; (8011c08 <xTaskIncrementTick+0x160>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d903      	bls.n	8011b82 <xTaskIncrementTick+0xda>
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7e:	4a22      	ldr	r2, [pc, #136]	; (8011c08 <xTaskIncrementTick+0x160>)
 8011b80:	6013      	str	r3, [r2, #0]
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b86:	4613      	mov	r3, r2
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	4413      	add	r3, r2
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4a1f      	ldr	r2, [pc, #124]	; (8011c0c <xTaskIncrementTick+0x164>)
 8011b90:	441a      	add	r2, r3
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	3304      	adds	r3, #4
 8011b96:	4619      	mov	r1, r3
 8011b98:	4610      	mov	r0, r2
 8011b9a:	f7fe fe94 	bl	80108c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ba2:	4b1b      	ldr	r3, [pc, #108]	; (8011c10 <xTaskIncrementTick+0x168>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d3b8      	bcc.n	8011b1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011bac:	2301      	movs	r3, #1
 8011bae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bb0:	e7b5      	b.n	8011b1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011bb2:	4b17      	ldr	r3, [pc, #92]	; (8011c10 <xTaskIncrementTick+0x168>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bb8:	4914      	ldr	r1, [pc, #80]	; (8011c0c <xTaskIncrementTick+0x164>)
 8011bba:	4613      	mov	r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	4413      	add	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	440b      	add	r3, r1
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d907      	bls.n	8011bda <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	617b      	str	r3, [r7, #20]
 8011bce:	e004      	b.n	8011bda <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011bd0:	4b10      	ldr	r3, [pc, #64]	; (8011c14 <xTaskIncrementTick+0x16c>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	4a0f      	ldr	r2, [pc, #60]	; (8011c14 <xTaskIncrementTick+0x16c>)
 8011bd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011bda:	4b0f      	ldr	r3, [pc, #60]	; (8011c18 <xTaskIncrementTick+0x170>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d001      	beq.n	8011be6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8011be2:	2301      	movs	r3, #1
 8011be4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011be6:	697b      	ldr	r3, [r7, #20]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3718      	adds	r7, #24
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	20003f5c 	.word	0x20003f5c
 8011bf4:	20003f38 	.word	0x20003f38
 8011bf8:	20003eec 	.word	0x20003eec
 8011bfc:	20003ef0 	.word	0x20003ef0
 8011c00:	20003f4c 	.word	0x20003f4c
 8011c04:	20003f54 	.word	0x20003f54
 8011c08:	20003f3c 	.word	0x20003f3c
 8011c0c:	20003a64 	.word	0x20003a64
 8011c10:	20003a60 	.word	0x20003a60
 8011c14:	20003f44 	.word	0x20003f44
 8011c18:	20003f48 	.word	0x20003f48

08011c1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b085      	sub	sp, #20
 8011c20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011c22:	4b28      	ldr	r3, [pc, #160]	; (8011cc4 <vTaskSwitchContext+0xa8>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d003      	beq.n	8011c32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011c2a:	4b27      	ldr	r3, [pc, #156]	; (8011cc8 <vTaskSwitchContext+0xac>)
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011c30:	e042      	b.n	8011cb8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8011c32:	4b25      	ldr	r3, [pc, #148]	; (8011cc8 <vTaskSwitchContext+0xac>)
 8011c34:	2200      	movs	r2, #0
 8011c36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c38:	4b24      	ldr	r3, [pc, #144]	; (8011ccc <vTaskSwitchContext+0xb0>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	60fb      	str	r3, [r7, #12]
 8011c3e:	e011      	b.n	8011c64 <vTaskSwitchContext+0x48>
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d10b      	bne.n	8011c5e <vTaskSwitchContext+0x42>
 8011c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4a:	b672      	cpsid	i
 8011c4c:	f383 8811 	msr	BASEPRI, r3
 8011c50:	f3bf 8f6f 	isb	sy
 8011c54:	f3bf 8f4f 	dsb	sy
 8011c58:	b662      	cpsie	i
 8011c5a:	607b      	str	r3, [r7, #4]
 8011c5c:	e7fe      	b.n	8011c5c <vTaskSwitchContext+0x40>
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	491a      	ldr	r1, [pc, #104]	; (8011cd0 <vTaskSwitchContext+0xb4>)
 8011c66:	68fa      	ldr	r2, [r7, #12]
 8011c68:	4613      	mov	r3, r2
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	4413      	add	r3, r2
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	440b      	add	r3, r1
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d0e3      	beq.n	8011c40 <vTaskSwitchContext+0x24>
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	4413      	add	r3, r2
 8011c80:	009b      	lsls	r3, r3, #2
 8011c82:	4a13      	ldr	r2, [pc, #76]	; (8011cd0 <vTaskSwitchContext+0xb4>)
 8011c84:	4413      	add	r3, r2
 8011c86:	60bb      	str	r3, [r7, #8]
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	685a      	ldr	r2, [r3, #4]
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	605a      	str	r2, [r3, #4]
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	685a      	ldr	r2, [r3, #4]
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	3308      	adds	r3, #8
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d104      	bne.n	8011ca8 <vTaskSwitchContext+0x8c>
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	685a      	ldr	r2, [r3, #4]
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	605a      	str	r2, [r3, #4]
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	4a09      	ldr	r2, [pc, #36]	; (8011cd4 <vTaskSwitchContext+0xb8>)
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	4a06      	ldr	r2, [pc, #24]	; (8011ccc <vTaskSwitchContext+0xb0>)
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	6013      	str	r3, [r2, #0]
}
 8011cb8:	bf00      	nop
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr
 8011cc4:	20003f5c 	.word	0x20003f5c
 8011cc8:	20003f48 	.word	0x20003f48
 8011ccc:	20003f3c 	.word	0x20003f3c
 8011cd0:	20003a64 	.word	0x20003a64
 8011cd4:	20003a60 	.word	0x20003a60

08011cd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10b      	bne.n	8011d00 <vTaskPlaceOnEventList+0x28>
 8011ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cec:	b672      	cpsid	i
 8011cee:	f383 8811 	msr	BASEPRI, r3
 8011cf2:	f3bf 8f6f 	isb	sy
 8011cf6:	f3bf 8f4f 	dsb	sy
 8011cfa:	b662      	cpsie	i
 8011cfc:	60fb      	str	r3, [r7, #12]
 8011cfe:	e7fe      	b.n	8011cfe <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011d00:	4b07      	ldr	r3, [pc, #28]	; (8011d20 <vTaskPlaceOnEventList+0x48>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	3318      	adds	r3, #24
 8011d06:	4619      	mov	r1, r3
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7fe fe00 	bl	801090e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011d0e:	2101      	movs	r1, #1
 8011d10:	6838      	ldr	r0, [r7, #0]
 8011d12:	f000 fb93 	bl	801243c <prvAddCurrentTaskToDelayedList>
}
 8011d16:	bf00      	nop
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	20003a60 	.word	0x20003a60

08011d24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b086      	sub	sp, #24
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d10b      	bne.n	8011d4e <vTaskPlaceOnEventListRestricted+0x2a>
 8011d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3a:	b672      	cpsid	i
 8011d3c:	f383 8811 	msr	BASEPRI, r3
 8011d40:	f3bf 8f6f 	isb	sy
 8011d44:	f3bf 8f4f 	dsb	sy
 8011d48:	b662      	cpsie	i
 8011d4a:	617b      	str	r3, [r7, #20]
 8011d4c:	e7fe      	b.n	8011d4c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011d4e:	4b0a      	ldr	r3, [pc, #40]	; (8011d78 <vTaskPlaceOnEventListRestricted+0x54>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	3318      	adds	r3, #24
 8011d54:	4619      	mov	r1, r3
 8011d56:	68f8      	ldr	r0, [r7, #12]
 8011d58:	f7fe fdb5 	bl	80108c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d002      	beq.n	8011d68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011d62:	f04f 33ff 	mov.w	r3, #4294967295
 8011d66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011d68:	6879      	ldr	r1, [r7, #4]
 8011d6a:	68b8      	ldr	r0, [r7, #8]
 8011d6c:	f000 fb66 	bl	801243c <prvAddCurrentTaskToDelayedList>
	}
 8011d70:	bf00      	nop
 8011d72:	3718      	adds	r7, #24
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	20003a60 	.word	0x20003a60

08011d7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d10b      	bne.n	8011daa <xTaskRemoveFromEventList+0x2e>
 8011d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d96:	b672      	cpsid	i
 8011d98:	f383 8811 	msr	BASEPRI, r3
 8011d9c:	f3bf 8f6f 	isb	sy
 8011da0:	f3bf 8f4f 	dsb	sy
 8011da4:	b662      	cpsie	i
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	e7fe      	b.n	8011da8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	3318      	adds	r3, #24
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7fe fde6 	bl	8010980 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011db4:	4b1d      	ldr	r3, [pc, #116]	; (8011e2c <xTaskRemoveFromEventList+0xb0>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d11d      	bne.n	8011df8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	3304      	adds	r3, #4
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fe fddd 	bl	8010980 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dca:	4b19      	ldr	r3, [pc, #100]	; (8011e30 <xTaskRemoveFromEventList+0xb4>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d903      	bls.n	8011dda <xTaskRemoveFromEventList+0x5e>
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd6:	4a16      	ldr	r2, [pc, #88]	; (8011e30 <xTaskRemoveFromEventList+0xb4>)
 8011dd8:	6013      	str	r3, [r2, #0]
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dde:	4613      	mov	r3, r2
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	4413      	add	r3, r2
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4a13      	ldr	r2, [pc, #76]	; (8011e34 <xTaskRemoveFromEventList+0xb8>)
 8011de8:	441a      	add	r2, r3
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	3304      	adds	r3, #4
 8011dee:	4619      	mov	r1, r3
 8011df0:	4610      	mov	r0, r2
 8011df2:	f7fe fd68 	bl	80108c6 <vListInsertEnd>
 8011df6:	e005      	b.n	8011e04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	3318      	adds	r3, #24
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	480e      	ldr	r0, [pc, #56]	; (8011e38 <xTaskRemoveFromEventList+0xbc>)
 8011e00:	f7fe fd61 	bl	80108c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e08:	4b0c      	ldr	r3, [pc, #48]	; (8011e3c <xTaskRemoveFromEventList+0xc0>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d905      	bls.n	8011e1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011e12:	2301      	movs	r3, #1
 8011e14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011e16:	4b0a      	ldr	r3, [pc, #40]	; (8011e40 <xTaskRemoveFromEventList+0xc4>)
 8011e18:	2201      	movs	r2, #1
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	e001      	b.n	8011e22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011e22:	697b      	ldr	r3, [r7, #20]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3718      	adds	r7, #24
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	20003f5c 	.word	0x20003f5c
 8011e30:	20003f3c 	.word	0x20003f3c
 8011e34:	20003a64 	.word	0x20003a64
 8011e38:	20003ef4 	.word	0x20003ef4
 8011e3c:	20003a60 	.word	0x20003a60
 8011e40:	20003f48 	.word	0x20003f48

08011e44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011e44:	b480      	push	{r7}
 8011e46:	b083      	sub	sp, #12
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e4c:	4b06      	ldr	r3, [pc, #24]	; (8011e68 <vTaskInternalSetTimeOutState+0x24>)
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e54:	4b05      	ldr	r3, [pc, #20]	; (8011e6c <vTaskInternalSetTimeOutState+0x28>)
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	605a      	str	r2, [r3, #4]
}
 8011e5c:	bf00      	nop
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr
 8011e68:	20003f4c 	.word	0x20003f4c
 8011e6c:	20003f38 	.word	0x20003f38

08011e70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b088      	sub	sp, #32
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d10b      	bne.n	8011e98 <xTaskCheckForTimeOut+0x28>
 8011e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e84:	b672      	cpsid	i
 8011e86:	f383 8811 	msr	BASEPRI, r3
 8011e8a:	f3bf 8f6f 	isb	sy
 8011e8e:	f3bf 8f4f 	dsb	sy
 8011e92:	b662      	cpsie	i
 8011e94:	613b      	str	r3, [r7, #16]
 8011e96:	e7fe      	b.n	8011e96 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d10b      	bne.n	8011eb6 <xTaskCheckForTimeOut+0x46>
 8011e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea2:	b672      	cpsid	i
 8011ea4:	f383 8811 	msr	BASEPRI, r3
 8011ea8:	f3bf 8f6f 	isb	sy
 8011eac:	f3bf 8f4f 	dsb	sy
 8011eb0:	b662      	cpsie	i
 8011eb2:	60fb      	str	r3, [r7, #12]
 8011eb4:	e7fe      	b.n	8011eb4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011eb6:	f000 ff8f 	bl	8012dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011eba:	4b1d      	ldr	r3, [pc, #116]	; (8011f30 <xTaskCheckForTimeOut+0xc0>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	69ba      	ldr	r2, [r7, #24]
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed2:	d102      	bne.n	8011eda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	61fb      	str	r3, [r7, #28]
 8011ed8:	e023      	b.n	8011f22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	4b15      	ldr	r3, [pc, #84]	; (8011f34 <xTaskCheckForTimeOut+0xc4>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d007      	beq.n	8011ef6 <xTaskCheckForTimeOut+0x86>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	69ba      	ldr	r2, [r7, #24]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d302      	bcc.n	8011ef6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	61fb      	str	r3, [r7, #28]
 8011ef4:	e015      	b.n	8011f22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	697a      	ldr	r2, [r7, #20]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d20b      	bcs.n	8011f18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	1ad2      	subs	r2, r2, r3
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7ff ff99 	bl	8011e44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011f12:	2300      	movs	r3, #0
 8011f14:	61fb      	str	r3, [r7, #28]
 8011f16:	e004      	b.n	8011f22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011f22:	f000 ff8b 	bl	8012e3c <vPortExitCritical>

	return xReturn;
 8011f26:	69fb      	ldr	r3, [r7, #28]
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3720      	adds	r7, #32
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}
 8011f30:	20003f38 	.word	0x20003f38
 8011f34:	20003f4c 	.word	0x20003f4c

08011f38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011f38:	b480      	push	{r7}
 8011f3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011f3c:	4b03      	ldr	r3, [pc, #12]	; (8011f4c <vTaskMissedYield+0x14>)
 8011f3e:	2201      	movs	r2, #1
 8011f40:	601a      	str	r2, [r3, #0]
}
 8011f42:	bf00      	nop
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr
 8011f4c:	20003f48 	.word	0x20003f48

08011f50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011f58:	f000 f852 	bl	8012000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011f5c:	4b06      	ldr	r3, [pc, #24]	; (8011f78 <prvIdleTask+0x28>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d9f9      	bls.n	8011f58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011f64:	4b05      	ldr	r3, [pc, #20]	; (8011f7c <prvIdleTask+0x2c>)
 8011f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f6a:	601a      	str	r2, [r3, #0]
 8011f6c:	f3bf 8f4f 	dsb	sy
 8011f70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011f74:	e7f0      	b.n	8011f58 <prvIdleTask+0x8>
 8011f76:	bf00      	nop
 8011f78:	20003a64 	.word	0x20003a64
 8011f7c:	e000ed04 	.word	0xe000ed04

08011f80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f86:	2300      	movs	r3, #0
 8011f88:	607b      	str	r3, [r7, #4]
 8011f8a:	e00c      	b.n	8011fa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	4613      	mov	r3, r2
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	4413      	add	r3, r2
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	4a12      	ldr	r2, [pc, #72]	; (8011fe0 <prvInitialiseTaskLists+0x60>)
 8011f98:	4413      	add	r3, r2
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7fe fc66 	bl	801086c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	607b      	str	r3, [r7, #4]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b37      	cmp	r3, #55	; 0x37
 8011faa:	d9ef      	bls.n	8011f8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011fac:	480d      	ldr	r0, [pc, #52]	; (8011fe4 <prvInitialiseTaskLists+0x64>)
 8011fae:	f7fe fc5d 	bl	801086c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011fb2:	480d      	ldr	r0, [pc, #52]	; (8011fe8 <prvInitialiseTaskLists+0x68>)
 8011fb4:	f7fe fc5a 	bl	801086c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011fb8:	480c      	ldr	r0, [pc, #48]	; (8011fec <prvInitialiseTaskLists+0x6c>)
 8011fba:	f7fe fc57 	bl	801086c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011fbe:	480c      	ldr	r0, [pc, #48]	; (8011ff0 <prvInitialiseTaskLists+0x70>)
 8011fc0:	f7fe fc54 	bl	801086c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011fc4:	480b      	ldr	r0, [pc, #44]	; (8011ff4 <prvInitialiseTaskLists+0x74>)
 8011fc6:	f7fe fc51 	bl	801086c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011fca:	4b0b      	ldr	r3, [pc, #44]	; (8011ff8 <prvInitialiseTaskLists+0x78>)
 8011fcc:	4a05      	ldr	r2, [pc, #20]	; (8011fe4 <prvInitialiseTaskLists+0x64>)
 8011fce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011fd0:	4b0a      	ldr	r3, [pc, #40]	; (8011ffc <prvInitialiseTaskLists+0x7c>)
 8011fd2:	4a05      	ldr	r2, [pc, #20]	; (8011fe8 <prvInitialiseTaskLists+0x68>)
 8011fd4:	601a      	str	r2, [r3, #0]
}
 8011fd6:	bf00      	nop
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	20003a64 	.word	0x20003a64
 8011fe4:	20003ec4 	.word	0x20003ec4
 8011fe8:	20003ed8 	.word	0x20003ed8
 8011fec:	20003ef4 	.word	0x20003ef4
 8011ff0:	20003f08 	.word	0x20003f08
 8011ff4:	20003f20 	.word	0x20003f20
 8011ff8:	20003eec 	.word	0x20003eec
 8011ffc:	20003ef0 	.word	0x20003ef0

08012000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012006:	e019      	b.n	801203c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012008:	f000 fee6 	bl	8012dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801200c:	4b0f      	ldr	r3, [pc, #60]	; (801204c <prvCheckTasksWaitingTermination+0x4c>)
 801200e:	68db      	ldr	r3, [r3, #12]
 8012010:	68db      	ldr	r3, [r3, #12]
 8012012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	3304      	adds	r3, #4
 8012018:	4618      	mov	r0, r3
 801201a:	f7fe fcb1 	bl	8010980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801201e:	4b0c      	ldr	r3, [pc, #48]	; (8012050 <prvCheckTasksWaitingTermination+0x50>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	3b01      	subs	r3, #1
 8012024:	4a0a      	ldr	r2, [pc, #40]	; (8012050 <prvCheckTasksWaitingTermination+0x50>)
 8012026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012028:	4b0a      	ldr	r3, [pc, #40]	; (8012054 <prvCheckTasksWaitingTermination+0x54>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	3b01      	subs	r3, #1
 801202e:	4a09      	ldr	r2, [pc, #36]	; (8012054 <prvCheckTasksWaitingTermination+0x54>)
 8012030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012032:	f000 ff03 	bl	8012e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f000 f80e 	bl	8012058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801203c:	4b05      	ldr	r3, [pc, #20]	; (8012054 <prvCheckTasksWaitingTermination+0x54>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1e1      	bne.n	8012008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012044:	bf00      	nop
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20003f08 	.word	0x20003f08
 8012050:	20003f34 	.word	0x20003f34
 8012054:	20003f1c 	.word	0x20003f1c

08012058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012066:	2b00      	cmp	r3, #0
 8012068:	d108      	bne.n	801207c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801206e:	4618      	mov	r0, r3
 8012070:	f001 f89c 	bl	80131ac <vPortFree>
				vPortFree( pxTCB );
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f001 f899 	bl	80131ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801207a:	e019      	b.n	80120b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012082:	2b01      	cmp	r3, #1
 8012084:	d103      	bne.n	801208e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f001 f890 	bl	80131ac <vPortFree>
	}
 801208c:	e010      	b.n	80120b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012094:	2b02      	cmp	r3, #2
 8012096:	d00b      	beq.n	80120b0 <prvDeleteTCB+0x58>
 8012098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209c:	b672      	cpsid	i
 801209e:	f383 8811 	msr	BASEPRI, r3
 80120a2:	f3bf 8f6f 	isb	sy
 80120a6:	f3bf 8f4f 	dsb	sy
 80120aa:	b662      	cpsie	i
 80120ac:	60fb      	str	r3, [r7, #12]
 80120ae:	e7fe      	b.n	80120ae <prvDeleteTCB+0x56>
	}
 80120b0:	bf00      	nop
 80120b2:	3710      	adds	r7, #16
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80120be:	4b0c      	ldr	r3, [pc, #48]	; (80120f0 <prvResetNextTaskUnblockTime+0x38>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d104      	bne.n	80120d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80120c8:	4b0a      	ldr	r3, [pc, #40]	; (80120f4 <prvResetNextTaskUnblockTime+0x3c>)
 80120ca:	f04f 32ff 	mov.w	r2, #4294967295
 80120ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80120d0:	e008      	b.n	80120e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120d2:	4b07      	ldr	r3, [pc, #28]	; (80120f0 <prvResetNextTaskUnblockTime+0x38>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	4a04      	ldr	r2, [pc, #16]	; (80120f4 <prvResetNextTaskUnblockTime+0x3c>)
 80120e2:	6013      	str	r3, [r2, #0]
}
 80120e4:	bf00      	nop
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr
 80120f0:	20003eec 	.word	0x20003eec
 80120f4:	20003f54 	.word	0x20003f54

080120f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80120fe:	4b0b      	ldr	r3, [pc, #44]	; (801212c <xTaskGetSchedulerState+0x34>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d102      	bne.n	801210c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012106:	2301      	movs	r3, #1
 8012108:	607b      	str	r3, [r7, #4]
 801210a:	e008      	b.n	801211e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801210c:	4b08      	ldr	r3, [pc, #32]	; (8012130 <xTaskGetSchedulerState+0x38>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d102      	bne.n	801211a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012114:	2302      	movs	r3, #2
 8012116:	607b      	str	r3, [r7, #4]
 8012118:	e001      	b.n	801211e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801211a:	2300      	movs	r3, #0
 801211c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801211e:	687b      	ldr	r3, [r7, #4]
	}
 8012120:	4618      	mov	r0, r3
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr
 801212c:	20003f40 	.word	0x20003f40
 8012130:	20003f5c 	.word	0x20003f5c

08012134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012140:	2300      	movs	r3, #0
 8012142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d058      	beq.n	80121fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801214a:	4b2f      	ldr	r3, [pc, #188]	; (8012208 <xTaskPriorityDisinherit+0xd4>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	693a      	ldr	r2, [r7, #16]
 8012150:	429a      	cmp	r2, r3
 8012152:	d00b      	beq.n	801216c <xTaskPriorityDisinherit+0x38>
 8012154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012158:	b672      	cpsid	i
 801215a:	f383 8811 	msr	BASEPRI, r3
 801215e:	f3bf 8f6f 	isb	sy
 8012162:	f3bf 8f4f 	dsb	sy
 8012166:	b662      	cpsie	i
 8012168:	60fb      	str	r3, [r7, #12]
 801216a:	e7fe      	b.n	801216a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10b      	bne.n	801218c <xTaskPriorityDisinherit+0x58>
 8012174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012178:	b672      	cpsid	i
 801217a:	f383 8811 	msr	BASEPRI, r3
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	f3bf 8f4f 	dsb	sy
 8012186:	b662      	cpsie	i
 8012188:	60bb      	str	r3, [r7, #8]
 801218a:	e7fe      	b.n	801218a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012190:	1e5a      	subs	r2, r3, #1
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801219e:	429a      	cmp	r2, r3
 80121a0:	d02c      	beq.n	80121fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d128      	bne.n	80121fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	3304      	adds	r3, #4
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fe fbe6 	bl	8010980 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121cc:	4b0f      	ldr	r3, [pc, #60]	; (801220c <xTaskPriorityDisinherit+0xd8>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d903      	bls.n	80121dc <xTaskPriorityDisinherit+0xa8>
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d8:	4a0c      	ldr	r2, [pc, #48]	; (801220c <xTaskPriorityDisinherit+0xd8>)
 80121da:	6013      	str	r3, [r2, #0]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121e0:	4613      	mov	r3, r2
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	4413      	add	r3, r2
 80121e6:	009b      	lsls	r3, r3, #2
 80121e8:	4a09      	ldr	r2, [pc, #36]	; (8012210 <xTaskPriorityDisinherit+0xdc>)
 80121ea:	441a      	add	r2, r3
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	3304      	adds	r3, #4
 80121f0:	4619      	mov	r1, r3
 80121f2:	4610      	mov	r0, r2
 80121f4:	f7fe fb67 	bl	80108c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80121f8:	2301      	movs	r3, #1
 80121fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121fc:	697b      	ldr	r3, [r7, #20]
	}
 80121fe:	4618      	mov	r0, r3
 8012200:	3718      	adds	r7, #24
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
 8012206:	bf00      	nop
 8012208:	20003a60 	.word	0x20003a60
 801220c:	20003f3c 	.word	0x20003f3c
 8012210:	20003a64 	.word	0x20003a64

08012214 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012214:	b580      	push	{r7, lr}
 8012216:	b086      	sub	sp, #24
 8012218:	af00      	add	r7, sp, #0
 801221a:	60f8      	str	r0, [r7, #12]
 801221c:	60b9      	str	r1, [r7, #8]
 801221e:	607a      	str	r2, [r7, #4]
 8012220:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012222:	f000 fdd9 	bl	8012dd8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012226:	4b26      	ldr	r3, [pc, #152]	; (80122c0 <xTaskNotifyWait+0xac>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801222e:	b2db      	uxtb	r3, r3
 8012230:	2b02      	cmp	r3, #2
 8012232:	d01a      	beq.n	801226a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012234:	4b22      	ldr	r3, [pc, #136]	; (80122c0 <xTaskNotifyWait+0xac>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801223a:	68fa      	ldr	r2, [r7, #12]
 801223c:	43d2      	mvns	r2, r2
 801223e:	400a      	ands	r2, r1
 8012240:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012242:	4b1f      	ldr	r3, [pc, #124]	; (80122c0 <xTaskNotifyWait+0xac>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2201      	movs	r2, #1
 8012248:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d00b      	beq.n	801226a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012252:	2101      	movs	r1, #1
 8012254:	6838      	ldr	r0, [r7, #0]
 8012256:	f000 f8f1 	bl	801243c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801225a:	4b1a      	ldr	r3, [pc, #104]	; (80122c4 <xTaskNotifyWait+0xb0>)
 801225c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012260:	601a      	str	r2, [r3, #0]
 8012262:	f3bf 8f4f 	dsb	sy
 8012266:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801226a:	f000 fde7 	bl	8012e3c <vPortExitCritical>

		taskENTER_CRITICAL();
 801226e:	f000 fdb3 	bl	8012dd8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d004      	beq.n	8012282 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012278:	4b11      	ldr	r3, [pc, #68]	; (80122c0 <xTaskNotifyWait+0xac>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012282:	4b0f      	ldr	r3, [pc, #60]	; (80122c0 <xTaskNotifyWait+0xac>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b02      	cmp	r3, #2
 801228e:	d002      	beq.n	8012296 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012290:	2300      	movs	r3, #0
 8012292:	617b      	str	r3, [r7, #20]
 8012294:	e008      	b.n	80122a8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012296:	4b0a      	ldr	r3, [pc, #40]	; (80122c0 <xTaskNotifyWait+0xac>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801229c:	68ba      	ldr	r2, [r7, #8]
 801229e:	43d2      	mvns	r2, r2
 80122a0:	400a      	ands	r2, r1
 80122a2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80122a4:	2301      	movs	r3, #1
 80122a6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80122a8:	4b05      	ldr	r3, [pc, #20]	; (80122c0 <xTaskNotifyWait+0xac>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	2200      	movs	r2, #0
 80122ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80122b2:	f000 fdc3 	bl	8012e3c <vPortExitCritical>

		return xReturn;
 80122b6:	697b      	ldr	r3, [r7, #20]
	}
 80122b8:	4618      	mov	r0, r3
 80122ba:	3718      	adds	r7, #24
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	20003a60 	.word	0x20003a60
 80122c4:	e000ed04 	.word	0xe000ed04

080122c8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b08a      	sub	sp, #40	; 0x28
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	603b      	str	r3, [r7, #0]
 80122d4:	4613      	mov	r3, r2
 80122d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80122d8:	2301      	movs	r3, #1
 80122da:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d10b      	bne.n	80122fa <xTaskGenericNotify+0x32>
 80122e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e6:	b672      	cpsid	i
 80122e8:	f383 8811 	msr	BASEPRI, r3
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	f3bf 8f4f 	dsb	sy
 80122f4:	b662      	cpsie	i
 80122f6:	61bb      	str	r3, [r7, #24]
 80122f8:	e7fe      	b.n	80122f8 <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80122fe:	f000 fd6b 	bl	8012dd8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d003      	beq.n	8012310 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012310:	6a3b      	ldr	r3, [r7, #32]
 8012312:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012316:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012318:	6a3b      	ldr	r3, [r7, #32]
 801231a:	2202      	movs	r2, #2
 801231c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8012320:	79fb      	ldrb	r3, [r7, #7]
 8012322:	2b04      	cmp	r3, #4
 8012324:	d827      	bhi.n	8012376 <xTaskGenericNotify+0xae>
 8012326:	a201      	add	r2, pc, #4	; (adr r2, 801232c <xTaskGenericNotify+0x64>)
 8012328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801232c:	08012399 	.word	0x08012399
 8012330:	08012341 	.word	0x08012341
 8012334:	0801234f 	.word	0x0801234f
 8012338:	0801235b 	.word	0x0801235b
 801233c:	08012363 	.word	0x08012363
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012340:	6a3b      	ldr	r3, [r7, #32]
 8012342:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	431a      	orrs	r2, r3
 8012348:	6a3b      	ldr	r3, [r7, #32]
 801234a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801234c:	e027      	b.n	801239e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801234e:	6a3b      	ldr	r3, [r7, #32]
 8012350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012352:	1c5a      	adds	r2, r3, #1
 8012354:	6a3b      	ldr	r3, [r7, #32]
 8012356:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012358:	e021      	b.n	801239e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801235a:	6a3b      	ldr	r3, [r7, #32]
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8012360:	e01d      	b.n	801239e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012362:	7ffb      	ldrb	r3, [r7, #31]
 8012364:	2b02      	cmp	r3, #2
 8012366:	d003      	beq.n	8012370 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012368:	6a3b      	ldr	r3, [r7, #32]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801236e:	e016      	b.n	801239e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8012370:	2300      	movs	r3, #0
 8012372:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012374:	e013      	b.n	801239e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012376:	6a3b      	ldr	r3, [r7, #32]
 8012378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801237e:	d00d      	beq.n	801239c <xTaskGenericNotify+0xd4>
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	b672      	cpsid	i
 8012386:	f383 8811 	msr	BASEPRI, r3
 801238a:	f3bf 8f6f 	isb	sy
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	b662      	cpsie	i
 8012394:	617b      	str	r3, [r7, #20]
 8012396:	e7fe      	b.n	8012396 <xTaskGenericNotify+0xce>
					break;
 8012398:	bf00      	nop
 801239a:	e000      	b.n	801239e <xTaskGenericNotify+0xd6>

					break;
 801239c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801239e:	7ffb      	ldrb	r3, [r7, #31]
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d13b      	bne.n	801241c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123a4:	6a3b      	ldr	r3, [r7, #32]
 80123a6:	3304      	adds	r3, #4
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fe fae9 	bl	8010980 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80123ae:	6a3b      	ldr	r3, [r7, #32]
 80123b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123b2:	4b1e      	ldr	r3, [pc, #120]	; (801242c <xTaskGenericNotify+0x164>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d903      	bls.n	80123c2 <xTaskGenericNotify+0xfa>
 80123ba:	6a3b      	ldr	r3, [r7, #32]
 80123bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123be:	4a1b      	ldr	r2, [pc, #108]	; (801242c <xTaskGenericNotify+0x164>)
 80123c0:	6013      	str	r3, [r2, #0]
 80123c2:	6a3b      	ldr	r3, [r7, #32]
 80123c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c6:	4613      	mov	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	4413      	add	r3, r2
 80123cc:	009b      	lsls	r3, r3, #2
 80123ce:	4a18      	ldr	r2, [pc, #96]	; (8012430 <xTaskGenericNotify+0x168>)
 80123d0:	441a      	add	r2, r3
 80123d2:	6a3b      	ldr	r3, [r7, #32]
 80123d4:	3304      	adds	r3, #4
 80123d6:	4619      	mov	r1, r3
 80123d8:	4610      	mov	r0, r2
 80123da:	f7fe fa74 	bl	80108c6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80123de:	6a3b      	ldr	r3, [r7, #32]
 80123e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d00b      	beq.n	80123fe <xTaskGenericNotify+0x136>
 80123e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ea:	b672      	cpsid	i
 80123ec:	f383 8811 	msr	BASEPRI, r3
 80123f0:	f3bf 8f6f 	isb	sy
 80123f4:	f3bf 8f4f 	dsb	sy
 80123f8:	b662      	cpsie	i
 80123fa:	613b      	str	r3, [r7, #16]
 80123fc:	e7fe      	b.n	80123fc <xTaskGenericNotify+0x134>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80123fe:	6a3b      	ldr	r3, [r7, #32]
 8012400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012402:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <xTaskGenericNotify+0x16c>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012408:	429a      	cmp	r2, r3
 801240a:	d907      	bls.n	801241c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801240c:	4b0a      	ldr	r3, [pc, #40]	; (8012438 <xTaskGenericNotify+0x170>)
 801240e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012412:	601a      	str	r2, [r3, #0]
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801241c:	f000 fd0e 	bl	8012e3c <vPortExitCritical>

		return xReturn;
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012422:	4618      	mov	r0, r3
 8012424:	3728      	adds	r7, #40	; 0x28
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
 801242a:	bf00      	nop
 801242c:	20003f3c 	.word	0x20003f3c
 8012430:	20003a64 	.word	0x20003a64
 8012434:	20003a60 	.word	0x20003a60
 8012438:	e000ed04 	.word	0xe000ed04

0801243c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012446:	4b21      	ldr	r3, [pc, #132]	; (80124cc <prvAddCurrentTaskToDelayedList+0x90>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801244c:	4b20      	ldr	r3, [pc, #128]	; (80124d0 <prvAddCurrentTaskToDelayedList+0x94>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	3304      	adds	r3, #4
 8012452:	4618      	mov	r0, r3
 8012454:	f7fe fa94 	bl	8010980 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801245e:	d10a      	bne.n	8012476 <prvAddCurrentTaskToDelayedList+0x3a>
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d007      	beq.n	8012476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012466:	4b1a      	ldr	r3, [pc, #104]	; (80124d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	3304      	adds	r3, #4
 801246c:	4619      	mov	r1, r3
 801246e:	4819      	ldr	r0, [pc, #100]	; (80124d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8012470:	f7fe fa29 	bl	80108c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012474:	e026      	b.n	80124c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012476:	68fa      	ldr	r2, [r7, #12]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	4413      	add	r3, r2
 801247c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801247e:	4b14      	ldr	r3, [pc, #80]	; (80124d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	429a      	cmp	r2, r3
 801248c:	d209      	bcs.n	80124a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801248e:	4b12      	ldr	r3, [pc, #72]	; (80124d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	4b0f      	ldr	r3, [pc, #60]	; (80124d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3304      	adds	r3, #4
 8012498:	4619      	mov	r1, r3
 801249a:	4610      	mov	r0, r2
 801249c:	f7fe fa37 	bl	801090e <vListInsert>
}
 80124a0:	e010      	b.n	80124c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124a2:	4b0e      	ldr	r3, [pc, #56]	; (80124dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	4b0a      	ldr	r3, [pc, #40]	; (80124d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	3304      	adds	r3, #4
 80124ac:	4619      	mov	r1, r3
 80124ae:	4610      	mov	r0, r2
 80124b0:	f7fe fa2d 	bl	801090e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80124b4:	4b0a      	ldr	r3, [pc, #40]	; (80124e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	68ba      	ldr	r2, [r7, #8]
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d202      	bcs.n	80124c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80124be:	4a08      	ldr	r2, [pc, #32]	; (80124e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	6013      	str	r3, [r2, #0]
}
 80124c4:	bf00      	nop
 80124c6:	3710      	adds	r7, #16
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	20003f38 	.word	0x20003f38
 80124d0:	20003a60 	.word	0x20003a60
 80124d4:	20003f20 	.word	0x20003f20
 80124d8:	20003ef0 	.word	0x20003ef0
 80124dc:	20003eec 	.word	0x20003eec
 80124e0:	20003f54 	.word	0x20003f54

080124e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b08a      	sub	sp, #40	; 0x28
 80124e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80124ea:	2300      	movs	r3, #0
 80124ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80124ee:	f000 fb0d 	bl	8012b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80124f2:	4b1d      	ldr	r3, [pc, #116]	; (8012568 <xTimerCreateTimerTask+0x84>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d021      	beq.n	801253e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80124fa:	2300      	movs	r3, #0
 80124fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80124fe:	2300      	movs	r3, #0
 8012500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012502:	1d3a      	adds	r2, r7, #4
 8012504:	f107 0108 	add.w	r1, r7, #8
 8012508:	f107 030c 	add.w	r3, r7, #12
 801250c:	4618      	mov	r0, r3
 801250e:	f7fe f8bf 	bl	8010690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012512:	6879      	ldr	r1, [r7, #4]
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	68fa      	ldr	r2, [r7, #12]
 8012518:	9202      	str	r2, [sp, #8]
 801251a:	9301      	str	r3, [sp, #4]
 801251c:	2302      	movs	r3, #2
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	2300      	movs	r3, #0
 8012522:	460a      	mov	r2, r1
 8012524:	4911      	ldr	r1, [pc, #68]	; (801256c <xTimerCreateTimerTask+0x88>)
 8012526:	4812      	ldr	r0, [pc, #72]	; (8012570 <xTimerCreateTimerTask+0x8c>)
 8012528:	f7fe ff4a 	bl	80113c0 <xTaskCreateStatic>
 801252c:	4602      	mov	r2, r0
 801252e:	4b11      	ldr	r3, [pc, #68]	; (8012574 <xTimerCreateTimerTask+0x90>)
 8012530:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012532:	4b10      	ldr	r3, [pc, #64]	; (8012574 <xTimerCreateTimerTask+0x90>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d001      	beq.n	801253e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801253a:	2301      	movs	r3, #1
 801253c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d10b      	bne.n	801255c <xTimerCreateTimerTask+0x78>
 8012544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012548:	b672      	cpsid	i
 801254a:	f383 8811 	msr	BASEPRI, r3
 801254e:	f3bf 8f6f 	isb	sy
 8012552:	f3bf 8f4f 	dsb	sy
 8012556:	b662      	cpsie	i
 8012558:	613b      	str	r3, [r7, #16]
 801255a:	e7fe      	b.n	801255a <xTimerCreateTimerTask+0x76>
	return xReturn;
 801255c:	697b      	ldr	r3, [r7, #20]
}
 801255e:	4618      	mov	r0, r3
 8012560:	3718      	adds	r7, #24
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	20003f90 	.word	0x20003f90
 801256c:	0801809c 	.word	0x0801809c
 8012570:	080126b1 	.word	0x080126b1
 8012574:	20003f94 	.word	0x20003f94

08012578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b08a      	sub	sp, #40	; 0x28
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
 8012584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012586:	2300      	movs	r3, #0
 8012588:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d10b      	bne.n	80125a8 <xTimerGenericCommand+0x30>
 8012590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012594:	b672      	cpsid	i
 8012596:	f383 8811 	msr	BASEPRI, r3
 801259a:	f3bf 8f6f 	isb	sy
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	b662      	cpsie	i
 80125a4:	623b      	str	r3, [r7, #32]
 80125a6:	e7fe      	b.n	80125a6 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80125a8:	4b19      	ldr	r3, [pc, #100]	; (8012610 <xTimerGenericCommand+0x98>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d02a      	beq.n	8012606 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	2b05      	cmp	r3, #5
 80125c0:	dc18      	bgt.n	80125f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80125c2:	f7ff fd99 	bl	80120f8 <xTaskGetSchedulerState>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	d109      	bne.n	80125e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80125cc:	4b10      	ldr	r3, [pc, #64]	; (8012610 <xTimerGenericCommand+0x98>)
 80125ce:	6818      	ldr	r0, [r3, #0]
 80125d0:	f107 0110 	add.w	r1, r7, #16
 80125d4:	2300      	movs	r3, #0
 80125d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d8:	f7fe fb06 	bl	8010be8 <xQueueGenericSend>
 80125dc:	6278      	str	r0, [r7, #36]	; 0x24
 80125de:	e012      	b.n	8012606 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80125e0:	4b0b      	ldr	r3, [pc, #44]	; (8012610 <xTimerGenericCommand+0x98>)
 80125e2:	6818      	ldr	r0, [r3, #0]
 80125e4:	f107 0110 	add.w	r1, r7, #16
 80125e8:	2300      	movs	r3, #0
 80125ea:	2200      	movs	r2, #0
 80125ec:	f7fe fafc 	bl	8010be8 <xQueueGenericSend>
 80125f0:	6278      	str	r0, [r7, #36]	; 0x24
 80125f2:	e008      	b.n	8012606 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80125f4:	4b06      	ldr	r3, [pc, #24]	; (8012610 <xTimerGenericCommand+0x98>)
 80125f6:	6818      	ldr	r0, [r3, #0]
 80125f8:	f107 0110 	add.w	r1, r7, #16
 80125fc:	2300      	movs	r3, #0
 80125fe:	683a      	ldr	r2, [r7, #0]
 8012600:	f7fe fbf4 	bl	8010dec <xQueueGenericSendFromISR>
 8012604:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012608:	4618      	mov	r0, r3
 801260a:	3728      	adds	r7, #40	; 0x28
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	20003f90 	.word	0x20003f90

08012614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b088      	sub	sp, #32
 8012618:	af02      	add	r7, sp, #8
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801261e:	4b23      	ldr	r3, [pc, #140]	; (80126ac <prvProcessExpiredTimer+0x98>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	3304      	adds	r3, #4
 801262c:	4618      	mov	r0, r3
 801262e:	f7fe f9a7 	bl	8010980 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012638:	f003 0304 	and.w	r3, r3, #4
 801263c:	2b00      	cmp	r3, #0
 801263e:	d023      	beq.n	8012688 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	699a      	ldr	r2, [r3, #24]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	18d1      	adds	r1, r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	683a      	ldr	r2, [r7, #0]
 801264c:	6978      	ldr	r0, [r7, #20]
 801264e:	f000 f8d3 	bl	80127f8 <prvInsertTimerInActiveList>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d020      	beq.n	801269a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012658:	2300      	movs	r3, #0
 801265a:	9300      	str	r3, [sp, #0]
 801265c:	2300      	movs	r3, #0
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	2100      	movs	r1, #0
 8012662:	6978      	ldr	r0, [r7, #20]
 8012664:	f7ff ff88 	bl	8012578 <xTimerGenericCommand>
 8012668:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d114      	bne.n	801269a <prvProcessExpiredTimer+0x86>
 8012670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012674:	b672      	cpsid	i
 8012676:	f383 8811 	msr	BASEPRI, r3
 801267a:	f3bf 8f6f 	isb	sy
 801267e:	f3bf 8f4f 	dsb	sy
 8012682:	b662      	cpsie	i
 8012684:	60fb      	str	r3, [r7, #12]
 8012686:	e7fe      	b.n	8012686 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801268e:	f023 0301 	bic.w	r3, r3, #1
 8012692:	b2da      	uxtb	r2, r3
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	6a1b      	ldr	r3, [r3, #32]
 801269e:	6978      	ldr	r0, [r7, #20]
 80126a0:	4798      	blx	r3
}
 80126a2:	bf00      	nop
 80126a4:	3718      	adds	r7, #24
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	20003f88 	.word	0x20003f88

080126b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80126b8:	f107 0308 	add.w	r3, r7, #8
 80126bc:	4618      	mov	r0, r3
 80126be:	f000 f857 	bl	8012770 <prvGetNextExpireTime>
 80126c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	4619      	mov	r1, r3
 80126c8:	68f8      	ldr	r0, [r7, #12]
 80126ca:	f000 f803 	bl	80126d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80126ce:	f000 f8d5 	bl	801287c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80126d2:	e7f1      	b.n	80126b8 <prvTimerTask+0x8>

080126d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b084      	sub	sp, #16
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80126de:	f7ff f927 	bl	8011930 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80126e2:	f107 0308 	add.w	r3, r7, #8
 80126e6:	4618      	mov	r0, r3
 80126e8:	f000 f866 	bl	80127b8 <prvSampleTimeNow>
 80126ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d130      	bne.n	8012756 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10a      	bne.n	8012710 <prvProcessTimerOrBlockTask+0x3c>
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d806      	bhi.n	8012710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012702:	f7ff f923 	bl	801194c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012706:	68f9      	ldr	r1, [r7, #12]
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f7ff ff83 	bl	8012614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801270e:	e024      	b.n	801275a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d008      	beq.n	8012728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012716:	4b13      	ldr	r3, [pc, #76]	; (8012764 <prvProcessTimerOrBlockTask+0x90>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d101      	bne.n	8012724 <prvProcessTimerOrBlockTask+0x50>
 8012720:	2301      	movs	r3, #1
 8012722:	e000      	b.n	8012726 <prvProcessTimerOrBlockTask+0x52>
 8012724:	2300      	movs	r3, #0
 8012726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012728:	4b0f      	ldr	r3, [pc, #60]	; (8012768 <prvProcessTimerOrBlockTask+0x94>)
 801272a:	6818      	ldr	r0, [r3, #0]
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	1ad3      	subs	r3, r2, r3
 8012732:	683a      	ldr	r2, [r7, #0]
 8012734:	4619      	mov	r1, r3
 8012736:	f7fe fe0f 	bl	8011358 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801273a:	f7ff f907 	bl	801194c <xTaskResumeAll>
 801273e:	4603      	mov	r3, r0
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10a      	bne.n	801275a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012744:	4b09      	ldr	r3, [pc, #36]	; (801276c <prvProcessTimerOrBlockTask+0x98>)
 8012746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801274a:	601a      	str	r2, [r3, #0]
 801274c:	f3bf 8f4f 	dsb	sy
 8012750:	f3bf 8f6f 	isb	sy
}
 8012754:	e001      	b.n	801275a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012756:	f7ff f8f9 	bl	801194c <xTaskResumeAll>
}
 801275a:	bf00      	nop
 801275c:	3710      	adds	r7, #16
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	20003f8c 	.word	0x20003f8c
 8012768:	20003f90 	.word	0x20003f90
 801276c:	e000ed04 	.word	0xe000ed04

08012770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012770:	b480      	push	{r7}
 8012772:	b085      	sub	sp, #20
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012778:	4b0e      	ldr	r3, [pc, #56]	; (80127b4 <prvGetNextExpireTime+0x44>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d101      	bne.n	8012786 <prvGetNextExpireTime+0x16>
 8012782:	2201      	movs	r2, #1
 8012784:	e000      	b.n	8012788 <prvGetNextExpireTime+0x18>
 8012786:	2200      	movs	r2, #0
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d105      	bne.n	80127a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012794:	4b07      	ldr	r3, [pc, #28]	; (80127b4 <prvGetNextExpireTime+0x44>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	60fb      	str	r3, [r7, #12]
 801279e:	e001      	b.n	80127a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80127a0:	2300      	movs	r3, #0
 80127a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80127a4:	68fb      	ldr	r3, [r7, #12]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3714      	adds	r7, #20
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr
 80127b2:	bf00      	nop
 80127b4:	20003f88 	.word	0x20003f88

080127b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b084      	sub	sp, #16
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80127c0:	f7ff f962 	bl	8011a88 <xTaskGetTickCount>
 80127c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80127c6:	4b0b      	ldr	r3, [pc, #44]	; (80127f4 <prvSampleTimeNow+0x3c>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	68fa      	ldr	r2, [r7, #12]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d205      	bcs.n	80127dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80127d0:	f000 f936 	bl	8012a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2201      	movs	r2, #1
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	e002      	b.n	80127e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80127e2:	4a04      	ldr	r2, [pc, #16]	; (80127f4 <prvSampleTimeNow+0x3c>)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80127e8:	68fb      	ldr	r3, [r7, #12]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	20003f98 	.word	0x20003f98

080127f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b086      	sub	sp, #24
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	607a      	str	r2, [r7, #4]
 8012804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012806:	2300      	movs	r3, #0
 8012808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	68fa      	ldr	r2, [r7, #12]
 8012814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012816:	68ba      	ldr	r2, [r7, #8]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	429a      	cmp	r2, r3
 801281c:	d812      	bhi.n	8012844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	1ad2      	subs	r2, r2, r3
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	699b      	ldr	r3, [r3, #24]
 8012828:	429a      	cmp	r2, r3
 801282a:	d302      	bcc.n	8012832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801282c:	2301      	movs	r3, #1
 801282e:	617b      	str	r3, [r7, #20]
 8012830:	e01b      	b.n	801286a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012832:	4b10      	ldr	r3, [pc, #64]	; (8012874 <prvInsertTimerInActiveList+0x7c>)
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	3304      	adds	r3, #4
 801283a:	4619      	mov	r1, r3
 801283c:	4610      	mov	r0, r2
 801283e:	f7fe f866 	bl	801090e <vListInsert>
 8012842:	e012      	b.n	801286a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012844:	687a      	ldr	r2, [r7, #4]
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	429a      	cmp	r2, r3
 801284a:	d206      	bcs.n	801285a <prvInsertTimerInActiveList+0x62>
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	429a      	cmp	r2, r3
 8012852:	d302      	bcc.n	801285a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012854:	2301      	movs	r3, #1
 8012856:	617b      	str	r3, [r7, #20]
 8012858:	e007      	b.n	801286a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801285a:	4b07      	ldr	r3, [pc, #28]	; (8012878 <prvInsertTimerInActiveList+0x80>)
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	3304      	adds	r3, #4
 8012862:	4619      	mov	r1, r3
 8012864:	4610      	mov	r0, r2
 8012866:	f7fe f852 	bl	801090e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801286a:	697b      	ldr	r3, [r7, #20]
}
 801286c:	4618      	mov	r0, r3
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	20003f8c 	.word	0x20003f8c
 8012878:	20003f88 	.word	0x20003f88

0801287c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b08e      	sub	sp, #56	; 0x38
 8012880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012882:	e0cc      	b.n	8012a1e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	da19      	bge.n	80128be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801288a:	1d3b      	adds	r3, r7, #4
 801288c:	3304      	adds	r3, #4
 801288e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012892:	2b00      	cmp	r3, #0
 8012894:	d10b      	bne.n	80128ae <prvProcessReceivedCommands+0x32>
 8012896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289a:	b672      	cpsid	i
 801289c:	f383 8811 	msr	BASEPRI, r3
 80128a0:	f3bf 8f6f 	isb	sy
 80128a4:	f3bf 8f4f 	dsb	sy
 80128a8:	b662      	cpsie	i
 80128aa:	61fb      	str	r3, [r7, #28]
 80128ac:	e7fe      	b.n	80128ac <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80128ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128b4:	6850      	ldr	r0, [r2, #4]
 80128b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128b8:	6892      	ldr	r2, [r2, #8]
 80128ba:	4611      	mov	r1, r2
 80128bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f2c0 80ab 	blt.w	8012a1c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80128ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d004      	beq.n	80128dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80128d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d4:	3304      	adds	r3, #4
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fe f852 	bl	8010980 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80128dc:	463b      	mov	r3, r7
 80128de:	4618      	mov	r0, r3
 80128e0:	f7ff ff6a 	bl	80127b8 <prvSampleTimeNow>
 80128e4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2b09      	cmp	r3, #9
 80128ea:	f200 8098 	bhi.w	8012a1e <prvProcessReceivedCommands+0x1a2>
 80128ee:	a201      	add	r2, pc, #4	; (adr r2, 80128f4 <prvProcessReceivedCommands+0x78>)
 80128f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128f4:	0801291d 	.word	0x0801291d
 80128f8:	0801291d 	.word	0x0801291d
 80128fc:	0801291d 	.word	0x0801291d
 8012900:	08012993 	.word	0x08012993
 8012904:	080129a7 	.word	0x080129a7
 8012908:	080129f3 	.word	0x080129f3
 801290c:	0801291d 	.word	0x0801291d
 8012910:	0801291d 	.word	0x0801291d
 8012914:	08012993 	.word	0x08012993
 8012918:	080129a7 	.word	0x080129a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801291e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012922:	f043 0301 	orr.w	r3, r3, #1
 8012926:	b2da      	uxtb	r2, r3
 8012928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801292e:	68ba      	ldr	r2, [r7, #8]
 8012930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012932:	699b      	ldr	r3, [r3, #24]
 8012934:	18d1      	adds	r1, r2, r3
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801293a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801293c:	f7ff ff5c 	bl	80127f8 <prvInsertTimerInActiveList>
 8012940:	4603      	mov	r3, r0
 8012942:	2b00      	cmp	r3, #0
 8012944:	d06b      	beq.n	8012a1e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012948:	6a1b      	ldr	r3, [r3, #32]
 801294a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801294c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012954:	f003 0304 	and.w	r3, r3, #4
 8012958:	2b00      	cmp	r3, #0
 801295a:	d060      	beq.n	8012a1e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801295c:	68ba      	ldr	r2, [r7, #8]
 801295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012960:	699b      	ldr	r3, [r3, #24]
 8012962:	441a      	add	r2, r3
 8012964:	2300      	movs	r3, #0
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	2300      	movs	r3, #0
 801296a:	2100      	movs	r1, #0
 801296c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801296e:	f7ff fe03 	bl	8012578 <xTimerGenericCommand>
 8012972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012974:	6a3b      	ldr	r3, [r7, #32]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d151      	bne.n	8012a1e <prvProcessReceivedCommands+0x1a2>
 801297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297e:	b672      	cpsid	i
 8012980:	f383 8811 	msr	BASEPRI, r3
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	b662      	cpsie	i
 801298e:	61bb      	str	r3, [r7, #24]
 8012990:	e7fe      	b.n	8012990 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012998:	f023 0301 	bic.w	r3, r3, #1
 801299c:	b2da      	uxtb	r2, r3
 801299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80129a4:	e03b      	b.n	8012a1e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80129a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129ac:	f043 0301 	orr.w	r3, r3, #1
 80129b0:	b2da      	uxtb	r2, r3
 80129b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80129b8:	68ba      	ldr	r2, [r7, #8]
 80129ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80129be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c0:	699b      	ldr	r3, [r3, #24]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d10b      	bne.n	80129de <prvProcessReceivedCommands+0x162>
 80129c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ca:	b672      	cpsid	i
 80129cc:	f383 8811 	msr	BASEPRI, r3
 80129d0:	f3bf 8f6f 	isb	sy
 80129d4:	f3bf 8f4f 	dsb	sy
 80129d8:	b662      	cpsie	i
 80129da:	617b      	str	r3, [r7, #20]
 80129dc:	e7fe      	b.n	80129dc <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80129de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e0:	699a      	ldr	r2, [r3, #24]
 80129e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e4:	18d1      	adds	r1, r2, r3
 80129e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129ec:	f7ff ff04 	bl	80127f8 <prvInsertTimerInActiveList>
					break;
 80129f0:	e015      	b.n	8012a1e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80129f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129f8:	f003 0302 	and.w	r3, r3, #2
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d103      	bne.n	8012a08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a02:	f000 fbd3 	bl	80131ac <vPortFree>
 8012a06:	e00a      	b.n	8012a1e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a0e:	f023 0301 	bic.w	r3, r3, #1
 8012a12:	b2da      	uxtb	r2, r3
 8012a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012a1a:	e000      	b.n	8012a1e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012a1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a1e:	4b07      	ldr	r3, [pc, #28]	; (8012a3c <prvProcessReceivedCommands+0x1c0>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	1d39      	adds	r1, r7, #4
 8012a24:	2200      	movs	r2, #0
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fe fa7c 	bl	8010f24 <xQueueReceive>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	f47f af28 	bne.w	8012884 <prvProcessReceivedCommands+0x8>
	}
}
 8012a34:	bf00      	nop
 8012a36:	3730      	adds	r7, #48	; 0x30
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	20003f90 	.word	0x20003f90

08012a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b088      	sub	sp, #32
 8012a44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012a46:	e049      	b.n	8012adc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012a48:	4b2e      	ldr	r3, [pc, #184]	; (8012b04 <prvSwitchTimerLists+0xc4>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a52:	4b2c      	ldr	r3, [pc, #176]	; (8012b04 <prvSwitchTimerLists+0xc4>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	68db      	ldr	r3, [r3, #12]
 8012a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	3304      	adds	r3, #4
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7fd ff8d 	bl	8010980 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a74:	f003 0304 	and.w	r3, r3, #4
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d02f      	beq.n	8012adc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	699b      	ldr	r3, [r3, #24]
 8012a80:	693a      	ldr	r2, [r7, #16]
 8012a82:	4413      	add	r3, r2
 8012a84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012a86:	68ba      	ldr	r2, [r7, #8]
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d90e      	bls.n	8012aac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	68ba      	ldr	r2, [r7, #8]
 8012a92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012a9a:	4b1a      	ldr	r3, [pc, #104]	; (8012b04 <prvSwitchTimerLists+0xc4>)
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	4610      	mov	r0, r2
 8012aa6:	f7fd ff32 	bl	801090e <vListInsert>
 8012aaa:	e017      	b.n	8012adc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012aac:	2300      	movs	r3, #0
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	693a      	ldr	r2, [r7, #16]
 8012ab4:	2100      	movs	r1, #0
 8012ab6:	68f8      	ldr	r0, [r7, #12]
 8012ab8:	f7ff fd5e 	bl	8012578 <xTimerGenericCommand>
 8012abc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d10b      	bne.n	8012adc <prvSwitchTimerLists+0x9c>
 8012ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac8:	b672      	cpsid	i
 8012aca:	f383 8811 	msr	BASEPRI, r3
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f3bf 8f4f 	dsb	sy
 8012ad6:	b662      	cpsie	i
 8012ad8:	603b      	str	r3, [r7, #0]
 8012ada:	e7fe      	b.n	8012ada <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012adc:	4b09      	ldr	r3, [pc, #36]	; (8012b04 <prvSwitchTimerLists+0xc4>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d1b0      	bne.n	8012a48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012ae6:	4b07      	ldr	r3, [pc, #28]	; (8012b04 <prvSwitchTimerLists+0xc4>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012aec:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <prvSwitchTimerLists+0xc8>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4a04      	ldr	r2, [pc, #16]	; (8012b04 <prvSwitchTimerLists+0xc4>)
 8012af2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012af4:	4a04      	ldr	r2, [pc, #16]	; (8012b08 <prvSwitchTimerLists+0xc8>)
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	6013      	str	r3, [r2, #0]
}
 8012afa:	bf00      	nop
 8012afc:	3718      	adds	r7, #24
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	20003f88 	.word	0x20003f88
 8012b08:	20003f8c 	.word	0x20003f8c

08012b0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012b12:	f000 f961 	bl	8012dd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012b16:	4b15      	ldr	r3, [pc, #84]	; (8012b6c <prvCheckForValidListAndQueue+0x60>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d120      	bne.n	8012b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012b1e:	4814      	ldr	r0, [pc, #80]	; (8012b70 <prvCheckForValidListAndQueue+0x64>)
 8012b20:	f7fd fea4 	bl	801086c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012b24:	4813      	ldr	r0, [pc, #76]	; (8012b74 <prvCheckForValidListAndQueue+0x68>)
 8012b26:	f7fd fea1 	bl	801086c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012b2a:	4b13      	ldr	r3, [pc, #76]	; (8012b78 <prvCheckForValidListAndQueue+0x6c>)
 8012b2c:	4a10      	ldr	r2, [pc, #64]	; (8012b70 <prvCheckForValidListAndQueue+0x64>)
 8012b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012b30:	4b12      	ldr	r3, [pc, #72]	; (8012b7c <prvCheckForValidListAndQueue+0x70>)
 8012b32:	4a10      	ldr	r2, [pc, #64]	; (8012b74 <prvCheckForValidListAndQueue+0x68>)
 8012b34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012b36:	2300      	movs	r3, #0
 8012b38:	9300      	str	r3, [sp, #0]
 8012b3a:	4b11      	ldr	r3, [pc, #68]	; (8012b80 <prvCheckForValidListAndQueue+0x74>)
 8012b3c:	4a11      	ldr	r2, [pc, #68]	; (8012b84 <prvCheckForValidListAndQueue+0x78>)
 8012b3e:	2110      	movs	r1, #16
 8012b40:	200a      	movs	r0, #10
 8012b42:	f7fd ffb1 	bl	8010aa8 <xQueueGenericCreateStatic>
 8012b46:	4602      	mov	r2, r0
 8012b48:	4b08      	ldr	r3, [pc, #32]	; (8012b6c <prvCheckForValidListAndQueue+0x60>)
 8012b4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012b4c:	4b07      	ldr	r3, [pc, #28]	; (8012b6c <prvCheckForValidListAndQueue+0x60>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d005      	beq.n	8012b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012b54:	4b05      	ldr	r3, [pc, #20]	; (8012b6c <prvCheckForValidListAndQueue+0x60>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	490b      	ldr	r1, [pc, #44]	; (8012b88 <prvCheckForValidListAndQueue+0x7c>)
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fe fbd4 	bl	8011308 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012b60:	f000 f96c 	bl	8012e3c <vPortExitCritical>
}
 8012b64:	bf00      	nop
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	20003f90 	.word	0x20003f90
 8012b70:	20003f60 	.word	0x20003f60
 8012b74:	20003f74 	.word	0x20003f74
 8012b78:	20003f88 	.word	0x20003f88
 8012b7c:	20003f8c 	.word	0x20003f8c
 8012b80:	2000403c 	.word	0x2000403c
 8012b84:	20003f9c 	.word	0x20003f9c
 8012b88:	080180a4 	.word	0x080180a4

08012b8c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b08a      	sub	sp, #40	; 0x28
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012b9a:	f06f 0301 	mvn.w	r3, #1
 8012b9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012bac:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <xTimerPendFunctionCallFromISR+0x3c>)
 8012bae:	6818      	ldr	r0, [r3, #0]
 8012bb0:	f107 0114 	add.w	r1, r7, #20
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	683a      	ldr	r2, [r7, #0]
 8012bb8:	f7fe f918 	bl	8010dec <xQueueGenericSendFromISR>
 8012bbc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3728      	adds	r7, #40	; 0x28
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	20003f90 	.word	0x20003f90

08012bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	3b04      	subs	r3, #4
 8012bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	3b04      	subs	r3, #4
 8012bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	f023 0201 	bic.w	r2, r3, #1
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	3b04      	subs	r3, #4
 8012bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012bfc:	4a0c      	ldr	r2, [pc, #48]	; (8012c30 <pxPortInitialiseStack+0x64>)
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	3b14      	subs	r3, #20
 8012c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	3b04      	subs	r3, #4
 8012c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	f06f 0202 	mvn.w	r2, #2
 8012c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	3b20      	subs	r3, #32
 8012c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c22:	68fb      	ldr	r3, [r7, #12]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3714      	adds	r7, #20
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr
 8012c30:	08012c35 	.word	0x08012c35

08012c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c34:	b480      	push	{r7}
 8012c36:	b085      	sub	sp, #20
 8012c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c3e:	4b13      	ldr	r3, [pc, #76]	; (8012c8c <prvTaskExitError+0x58>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c46:	d00b      	beq.n	8012c60 <prvTaskExitError+0x2c>
 8012c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4c:	b672      	cpsid	i
 8012c4e:	f383 8811 	msr	BASEPRI, r3
 8012c52:	f3bf 8f6f 	isb	sy
 8012c56:	f3bf 8f4f 	dsb	sy
 8012c5a:	b662      	cpsie	i
 8012c5c:	60fb      	str	r3, [r7, #12]
 8012c5e:	e7fe      	b.n	8012c5e <prvTaskExitError+0x2a>
 8012c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c64:	b672      	cpsid	i
 8012c66:	f383 8811 	msr	BASEPRI, r3
 8012c6a:	f3bf 8f6f 	isb	sy
 8012c6e:	f3bf 8f4f 	dsb	sy
 8012c72:	b662      	cpsie	i
 8012c74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c76:	bf00      	nop
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d0fc      	beq.n	8012c78 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012c7e:	bf00      	nop
 8012c80:	3714      	adds	r7, #20
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	200001a4 	.word	0x200001a4

08012c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c90:	4b07      	ldr	r3, [pc, #28]	; (8012cb0 <pxCurrentTCBConst2>)
 8012c92:	6819      	ldr	r1, [r3, #0]
 8012c94:	6808      	ldr	r0, [r1, #0]
 8012c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c9a:	f380 8809 	msr	PSP, r0
 8012c9e:	f3bf 8f6f 	isb	sy
 8012ca2:	f04f 0000 	mov.w	r0, #0
 8012ca6:	f380 8811 	msr	BASEPRI, r0
 8012caa:	4770      	bx	lr
 8012cac:	f3af 8000 	nop.w

08012cb0 <pxCurrentTCBConst2>:
 8012cb0:	20003a60 	.word	0x20003a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012cb4:	bf00      	nop
 8012cb6:	bf00      	nop

08012cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012cb8:	4808      	ldr	r0, [pc, #32]	; (8012cdc <prvPortStartFirstTask+0x24>)
 8012cba:	6800      	ldr	r0, [r0, #0]
 8012cbc:	6800      	ldr	r0, [r0, #0]
 8012cbe:	f380 8808 	msr	MSP, r0
 8012cc2:	f04f 0000 	mov.w	r0, #0
 8012cc6:	f380 8814 	msr	CONTROL, r0
 8012cca:	b662      	cpsie	i
 8012ccc:	b661      	cpsie	f
 8012cce:	f3bf 8f4f 	dsb	sy
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	df00      	svc	0
 8012cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012cda:	bf00      	nop
 8012cdc:	e000ed08 	.word	0xe000ed08

08012ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012ce6:	4b36      	ldr	r3, [pc, #216]	; (8012dc0 <xPortStartScheduler+0xe0>)
 8012ce8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	22ff      	movs	r2, #255	; 0xff
 8012cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d00:	78fb      	ldrb	r3, [r7, #3]
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d08:	b2da      	uxtb	r2, r3
 8012d0a:	4b2e      	ldr	r3, [pc, #184]	; (8012dc4 <xPortStartScheduler+0xe4>)
 8012d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d0e:	4b2e      	ldr	r3, [pc, #184]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d10:	2207      	movs	r2, #7
 8012d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d14:	e009      	b.n	8012d2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012d16:	4b2c      	ldr	r3, [pc, #176]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	3b01      	subs	r3, #1
 8012d1c:	4a2a      	ldr	r2, [pc, #168]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d20:	78fb      	ldrb	r3, [r7, #3]
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	005b      	lsls	r3, r3, #1
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d2a:	78fb      	ldrb	r3, [r7, #3]
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d32:	2b80      	cmp	r3, #128	; 0x80
 8012d34:	d0ef      	beq.n	8012d16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012d36:	4b24      	ldr	r3, [pc, #144]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f1c3 0307 	rsb	r3, r3, #7
 8012d3e:	2b04      	cmp	r3, #4
 8012d40:	d00b      	beq.n	8012d5a <xPortStartScheduler+0x7a>
 8012d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d46:	b672      	cpsid	i
 8012d48:	f383 8811 	msr	BASEPRI, r3
 8012d4c:	f3bf 8f6f 	isb	sy
 8012d50:	f3bf 8f4f 	dsb	sy
 8012d54:	b662      	cpsie	i
 8012d56:	60bb      	str	r3, [r7, #8]
 8012d58:	e7fe      	b.n	8012d58 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012d5a:	4b1b      	ldr	r3, [pc, #108]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	021b      	lsls	r3, r3, #8
 8012d60:	4a19      	ldr	r2, [pc, #100]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d62:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012d64:	4b18      	ldr	r3, [pc, #96]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012d6c:	4a16      	ldr	r2, [pc, #88]	; (8012dc8 <xPortStartScheduler+0xe8>)
 8012d6e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	b2da      	uxtb	r2, r3
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012d78:	4b14      	ldr	r3, [pc, #80]	; (8012dcc <xPortStartScheduler+0xec>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a13      	ldr	r2, [pc, #76]	; (8012dcc <xPortStartScheduler+0xec>)
 8012d7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d82:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012d84:	4b11      	ldr	r3, [pc, #68]	; (8012dcc <xPortStartScheduler+0xec>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a10      	ldr	r2, [pc, #64]	; (8012dcc <xPortStartScheduler+0xec>)
 8012d8a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012d8e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012d90:	f000 f8d4 	bl	8012f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012d94:	4b0e      	ldr	r3, [pc, #56]	; (8012dd0 <xPortStartScheduler+0xf0>)
 8012d96:	2200      	movs	r2, #0
 8012d98:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012d9a:	f000 f8f3 	bl	8012f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012d9e:	4b0d      	ldr	r3, [pc, #52]	; (8012dd4 <xPortStartScheduler+0xf4>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a0c      	ldr	r2, [pc, #48]	; (8012dd4 <xPortStartScheduler+0xf4>)
 8012da4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012da8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012daa:	f7ff ff85 	bl	8012cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012dae:	f7fe ff35 	bl	8011c1c <vTaskSwitchContext>
	prvTaskExitError();
 8012db2:	f7ff ff3f 	bl	8012c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012db6:	2300      	movs	r3, #0
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3710      	adds	r7, #16
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}
 8012dc0:	e000e400 	.word	0xe000e400
 8012dc4:	2000408c 	.word	0x2000408c
 8012dc8:	20004090 	.word	0x20004090
 8012dcc:	e000ed20 	.word	0xe000ed20
 8012dd0:	200001a4 	.word	0x200001a4
 8012dd4:	e000ef34 	.word	0xe000ef34

08012dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b083      	sub	sp, #12
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de2:	b672      	cpsid	i
 8012de4:	f383 8811 	msr	BASEPRI, r3
 8012de8:	f3bf 8f6f 	isb	sy
 8012dec:	f3bf 8f4f 	dsb	sy
 8012df0:	b662      	cpsie	i
 8012df2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012df4:	4b0f      	ldr	r3, [pc, #60]	; (8012e34 <vPortEnterCritical+0x5c>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	4a0e      	ldr	r2, [pc, #56]	; (8012e34 <vPortEnterCritical+0x5c>)
 8012dfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012dfe:	4b0d      	ldr	r3, [pc, #52]	; (8012e34 <vPortEnterCritical+0x5c>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d110      	bne.n	8012e28 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e06:	4b0c      	ldr	r3, [pc, #48]	; (8012e38 <vPortEnterCritical+0x60>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00b      	beq.n	8012e28 <vPortEnterCritical+0x50>
 8012e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e14:	b672      	cpsid	i
 8012e16:	f383 8811 	msr	BASEPRI, r3
 8012e1a:	f3bf 8f6f 	isb	sy
 8012e1e:	f3bf 8f4f 	dsb	sy
 8012e22:	b662      	cpsie	i
 8012e24:	603b      	str	r3, [r7, #0]
 8012e26:	e7fe      	b.n	8012e26 <vPortEnterCritical+0x4e>
	}
}
 8012e28:	bf00      	nop
 8012e2a:	370c      	adds	r7, #12
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr
 8012e34:	200001a4 	.word	0x200001a4
 8012e38:	e000ed04 	.word	0xe000ed04

08012e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012e42:	4b12      	ldr	r3, [pc, #72]	; (8012e8c <vPortExitCritical+0x50>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10b      	bne.n	8012e62 <vPortExitCritical+0x26>
 8012e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4e:	b672      	cpsid	i
 8012e50:	f383 8811 	msr	BASEPRI, r3
 8012e54:	f3bf 8f6f 	isb	sy
 8012e58:	f3bf 8f4f 	dsb	sy
 8012e5c:	b662      	cpsie	i
 8012e5e:	607b      	str	r3, [r7, #4]
 8012e60:	e7fe      	b.n	8012e60 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012e62:	4b0a      	ldr	r3, [pc, #40]	; (8012e8c <vPortExitCritical+0x50>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	3b01      	subs	r3, #1
 8012e68:	4a08      	ldr	r2, [pc, #32]	; (8012e8c <vPortExitCritical+0x50>)
 8012e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012e6c:	4b07      	ldr	r3, [pc, #28]	; (8012e8c <vPortExitCritical+0x50>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d104      	bne.n	8012e7e <vPortExitCritical+0x42>
 8012e74:	2300      	movs	r3, #0
 8012e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012e7e:	bf00      	nop
 8012e80:	370c      	adds	r7, #12
 8012e82:	46bd      	mov	sp, r7
 8012e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e88:	4770      	bx	lr
 8012e8a:	bf00      	nop
 8012e8c:	200001a4 	.word	0x200001a4

08012e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012e90:	f3ef 8009 	mrs	r0, PSP
 8012e94:	f3bf 8f6f 	isb	sy
 8012e98:	4b15      	ldr	r3, [pc, #84]	; (8012ef0 <pxCurrentTCBConst>)
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	f01e 0f10 	tst.w	lr, #16
 8012ea0:	bf08      	it	eq
 8012ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eaa:	6010      	str	r0, [r2, #0]
 8012eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012eb4:	b672      	cpsid	i
 8012eb6:	f380 8811 	msr	BASEPRI, r0
 8012eba:	f3bf 8f4f 	dsb	sy
 8012ebe:	f3bf 8f6f 	isb	sy
 8012ec2:	b662      	cpsie	i
 8012ec4:	f7fe feaa 	bl	8011c1c <vTaskSwitchContext>
 8012ec8:	f04f 0000 	mov.w	r0, #0
 8012ecc:	f380 8811 	msr	BASEPRI, r0
 8012ed0:	bc09      	pop	{r0, r3}
 8012ed2:	6819      	ldr	r1, [r3, #0]
 8012ed4:	6808      	ldr	r0, [r1, #0]
 8012ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eda:	f01e 0f10 	tst.w	lr, #16
 8012ede:	bf08      	it	eq
 8012ee0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012ee4:	f380 8809 	msr	PSP, r0
 8012ee8:	f3bf 8f6f 	isb	sy
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop

08012ef0 <pxCurrentTCBConst>:
 8012ef0:	20003a60 	.word	0x20003a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ef4:	bf00      	nop
 8012ef6:	bf00      	nop

08012ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
	__asm volatile
 8012efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f02:	b672      	cpsid	i
 8012f04:	f383 8811 	msr	BASEPRI, r3
 8012f08:	f3bf 8f6f 	isb	sy
 8012f0c:	f3bf 8f4f 	dsb	sy
 8012f10:	b662      	cpsie	i
 8012f12:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f14:	f7fe fdc8 	bl	8011aa8 <xTaskIncrementTick>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d003      	beq.n	8012f26 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f1e:	4b06      	ldr	r3, [pc, #24]	; (8012f38 <SysTick_Handler+0x40>)
 8012f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f24:	601a      	str	r2, [r3, #0]
 8012f26:	2300      	movs	r3, #0
 8012f28:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f30:	bf00      	nop
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	e000ed04 	.word	0xe000ed04

08012f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012f40:	4b0b      	ldr	r3, [pc, #44]	; (8012f70 <vPortSetupTimerInterrupt+0x34>)
 8012f42:	2200      	movs	r2, #0
 8012f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012f46:	4b0b      	ldr	r3, [pc, #44]	; (8012f74 <vPortSetupTimerInterrupt+0x38>)
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012f4c:	4b0a      	ldr	r3, [pc, #40]	; (8012f78 <vPortSetupTimerInterrupt+0x3c>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4a0a      	ldr	r2, [pc, #40]	; (8012f7c <vPortSetupTimerInterrupt+0x40>)
 8012f52:	fba2 2303 	umull	r2, r3, r2, r3
 8012f56:	099b      	lsrs	r3, r3, #6
 8012f58:	4a09      	ldr	r2, [pc, #36]	; (8012f80 <vPortSetupTimerInterrupt+0x44>)
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012f5e:	4b04      	ldr	r3, [pc, #16]	; (8012f70 <vPortSetupTimerInterrupt+0x34>)
 8012f60:	2207      	movs	r2, #7
 8012f62:	601a      	str	r2, [r3, #0]
}
 8012f64:	bf00      	nop
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	e000e010 	.word	0xe000e010
 8012f74:	e000e018 	.word	0xe000e018
 8012f78:	20000198 	.word	0x20000198
 8012f7c:	10624dd3 	.word	0x10624dd3
 8012f80:	e000e014 	.word	0xe000e014

08012f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012f94 <vPortEnableVFP+0x10>
 8012f88:	6801      	ldr	r1, [r0, #0]
 8012f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012f8e:	6001      	str	r1, [r0, #0]
 8012f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012f92:	bf00      	nop
 8012f94:	e000ed88 	.word	0xe000ed88

08012f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012f98:	b480      	push	{r7}
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012f9e:	f3ef 8305 	mrs	r3, IPSR
 8012fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2b0f      	cmp	r3, #15
 8012fa8:	d915      	bls.n	8012fd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012faa:	4a18      	ldr	r2, [pc, #96]	; (801300c <vPortValidateInterruptPriority+0x74>)
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	4413      	add	r3, r2
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012fb4:	4b16      	ldr	r3, [pc, #88]	; (8013010 <vPortValidateInterruptPriority+0x78>)
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	7afa      	ldrb	r2, [r7, #11]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d20b      	bcs.n	8012fd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc2:	b672      	cpsid	i
 8012fc4:	f383 8811 	msr	BASEPRI, r3
 8012fc8:	f3bf 8f6f 	isb	sy
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	b662      	cpsie	i
 8012fd2:	607b      	str	r3, [r7, #4]
 8012fd4:	e7fe      	b.n	8012fd4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012fd6:	4b0f      	ldr	r3, [pc, #60]	; (8013014 <vPortValidateInterruptPriority+0x7c>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012fde:	4b0e      	ldr	r3, [pc, #56]	; (8013018 <vPortValidateInterruptPriority+0x80>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d90b      	bls.n	8012ffe <vPortValidateInterruptPriority+0x66>
 8012fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fea:	b672      	cpsid	i
 8012fec:	f383 8811 	msr	BASEPRI, r3
 8012ff0:	f3bf 8f6f 	isb	sy
 8012ff4:	f3bf 8f4f 	dsb	sy
 8012ff8:	b662      	cpsie	i
 8012ffa:	603b      	str	r3, [r7, #0]
 8012ffc:	e7fe      	b.n	8012ffc <vPortValidateInterruptPriority+0x64>
	}
 8012ffe:	bf00      	nop
 8013000:	3714      	adds	r7, #20
 8013002:	46bd      	mov	sp, r7
 8013004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013008:	4770      	bx	lr
 801300a:	bf00      	nop
 801300c:	e000e3f0 	.word	0xe000e3f0
 8013010:	2000408c 	.word	0x2000408c
 8013014:	e000ed0c 	.word	0xe000ed0c
 8013018:	20004090 	.word	0x20004090

0801301c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b08a      	sub	sp, #40	; 0x28
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013024:	2300      	movs	r3, #0
 8013026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013028:	f7fe fc82 	bl	8011930 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801302c:	4b5a      	ldr	r3, [pc, #360]	; (8013198 <pvPortMalloc+0x17c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d101      	bne.n	8013038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013034:	f000 f916 	bl	8013264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013038:	4b58      	ldr	r3, [pc, #352]	; (801319c <pvPortMalloc+0x180>)
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	4013      	ands	r3, r2
 8013040:	2b00      	cmp	r3, #0
 8013042:	f040 8090 	bne.w	8013166 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d01e      	beq.n	801308a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801304c:	2208      	movs	r2, #8
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4413      	add	r3, r2
 8013052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f003 0307 	and.w	r3, r3, #7
 801305a:	2b00      	cmp	r3, #0
 801305c:	d015      	beq.n	801308a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f023 0307 	bic.w	r3, r3, #7
 8013064:	3308      	adds	r3, #8
 8013066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f003 0307 	and.w	r3, r3, #7
 801306e:	2b00      	cmp	r3, #0
 8013070:	d00b      	beq.n	801308a <pvPortMalloc+0x6e>
 8013072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013076:	b672      	cpsid	i
 8013078:	f383 8811 	msr	BASEPRI, r3
 801307c:	f3bf 8f6f 	isb	sy
 8013080:	f3bf 8f4f 	dsb	sy
 8013084:	b662      	cpsie	i
 8013086:	617b      	str	r3, [r7, #20]
 8013088:	e7fe      	b.n	8013088 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d06a      	beq.n	8013166 <pvPortMalloc+0x14a>
 8013090:	4b43      	ldr	r3, [pc, #268]	; (80131a0 <pvPortMalloc+0x184>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	429a      	cmp	r2, r3
 8013098:	d865      	bhi.n	8013166 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801309a:	4b42      	ldr	r3, [pc, #264]	; (80131a4 <pvPortMalloc+0x188>)
 801309c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801309e:	4b41      	ldr	r3, [pc, #260]	; (80131a4 <pvPortMalloc+0x188>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130a4:	e004      	b.n	80130b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80130a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	687a      	ldr	r2, [r7, #4]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d903      	bls.n	80130c2 <pvPortMalloc+0xa6>
 80130ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d1f1      	bne.n	80130a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80130c2:	4b35      	ldr	r3, [pc, #212]	; (8013198 <pvPortMalloc+0x17c>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d04c      	beq.n	8013166 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80130cc:	6a3b      	ldr	r3, [r7, #32]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	2208      	movs	r2, #8
 80130d2:	4413      	add	r3, r2
 80130d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	6a3b      	ldr	r3, [r7, #32]
 80130dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80130de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e0:	685a      	ldr	r2, [r3, #4]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	1ad2      	subs	r2, r2, r3
 80130e6:	2308      	movs	r3, #8
 80130e8:	005b      	lsls	r3, r3, #1
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d920      	bls.n	8013130 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80130ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	4413      	add	r3, r2
 80130f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	f003 0307 	and.w	r3, r3, #7
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d00b      	beq.n	8013118 <pvPortMalloc+0xfc>
 8013100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013104:	b672      	cpsid	i
 8013106:	f383 8811 	msr	BASEPRI, r3
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	f3bf 8f4f 	dsb	sy
 8013112:	b662      	cpsie	i
 8013114:	613b      	str	r3, [r7, #16]
 8013116:	e7fe      	b.n	8013116 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311a:	685a      	ldr	r2, [r3, #4]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	1ad2      	subs	r2, r2, r3
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801312a:	69b8      	ldr	r0, [r7, #24]
 801312c:	f000 f8fe 	bl	801332c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013130:	4b1b      	ldr	r3, [pc, #108]	; (80131a0 <pvPortMalloc+0x184>)
 8013132:	681a      	ldr	r2, [r3, #0]
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	4a19      	ldr	r2, [pc, #100]	; (80131a0 <pvPortMalloc+0x184>)
 801313c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801313e:	4b18      	ldr	r3, [pc, #96]	; (80131a0 <pvPortMalloc+0x184>)
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	4b19      	ldr	r3, [pc, #100]	; (80131a8 <pvPortMalloc+0x18c>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d203      	bcs.n	8013152 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801314a:	4b15      	ldr	r3, [pc, #84]	; (80131a0 <pvPortMalloc+0x184>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	4a16      	ldr	r2, [pc, #88]	; (80131a8 <pvPortMalloc+0x18c>)
 8013150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013154:	685a      	ldr	r2, [r3, #4]
 8013156:	4b11      	ldr	r3, [pc, #68]	; (801319c <pvPortMalloc+0x180>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	431a      	orrs	r2, r3
 801315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	2200      	movs	r2, #0
 8013164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013166:	f7fe fbf1 	bl	801194c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801316a:	69fb      	ldr	r3, [r7, #28]
 801316c:	f003 0307 	and.w	r3, r3, #7
 8013170:	2b00      	cmp	r3, #0
 8013172:	d00b      	beq.n	801318c <pvPortMalloc+0x170>
 8013174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013178:	b672      	cpsid	i
 801317a:	f383 8811 	msr	BASEPRI, r3
 801317e:	f3bf 8f6f 	isb	sy
 8013182:	f3bf 8f4f 	dsb	sy
 8013186:	b662      	cpsie	i
 8013188:	60fb      	str	r3, [r7, #12]
 801318a:	e7fe      	b.n	801318a <pvPortMalloc+0x16e>
	return pvReturn;
 801318c:	69fb      	ldr	r3, [r7, #28]
}
 801318e:	4618      	mov	r0, r3
 8013190:	3728      	adds	r7, #40	; 0x28
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	20028a8c 	.word	0x20028a8c
 801319c:	20028a98 	.word	0x20028a98
 80131a0:	20028a90 	.word	0x20028a90
 80131a4:	20028a84 	.word	0x20028a84
 80131a8:	20028a94 	.word	0x20028a94

080131ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b086      	sub	sp, #24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d04a      	beq.n	8013254 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80131be:	2308      	movs	r3, #8
 80131c0:	425b      	negs	r3, r3
 80131c2:	697a      	ldr	r2, [r7, #20]
 80131c4:	4413      	add	r3, r2
 80131c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	685a      	ldr	r2, [r3, #4]
 80131d0:	4b22      	ldr	r3, [pc, #136]	; (801325c <vPortFree+0xb0>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4013      	ands	r3, r2
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d10b      	bne.n	80131f2 <vPortFree+0x46>
 80131da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131de:	b672      	cpsid	i
 80131e0:	f383 8811 	msr	BASEPRI, r3
 80131e4:	f3bf 8f6f 	isb	sy
 80131e8:	f3bf 8f4f 	dsb	sy
 80131ec:	b662      	cpsie	i
 80131ee:	60fb      	str	r3, [r7, #12]
 80131f0:	e7fe      	b.n	80131f0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00b      	beq.n	8013212 <vPortFree+0x66>
 80131fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fe:	b672      	cpsid	i
 8013200:	f383 8811 	msr	BASEPRI, r3
 8013204:	f3bf 8f6f 	isb	sy
 8013208:	f3bf 8f4f 	dsb	sy
 801320c:	b662      	cpsie	i
 801320e:	60bb      	str	r3, [r7, #8]
 8013210:	e7fe      	b.n	8013210 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	685a      	ldr	r2, [r3, #4]
 8013216:	4b11      	ldr	r3, [pc, #68]	; (801325c <vPortFree+0xb0>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	4013      	ands	r3, r2
 801321c:	2b00      	cmp	r3, #0
 801321e:	d019      	beq.n	8013254 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d115      	bne.n	8013254 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	685a      	ldr	r2, [r3, #4]
 801322c:	4b0b      	ldr	r3, [pc, #44]	; (801325c <vPortFree+0xb0>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	43db      	mvns	r3, r3
 8013232:	401a      	ands	r2, r3
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013238:	f7fe fb7a 	bl	8011930 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	685a      	ldr	r2, [r3, #4]
 8013240:	4b07      	ldr	r3, [pc, #28]	; (8013260 <vPortFree+0xb4>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	4413      	add	r3, r2
 8013246:	4a06      	ldr	r2, [pc, #24]	; (8013260 <vPortFree+0xb4>)
 8013248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801324a:	6938      	ldr	r0, [r7, #16]
 801324c:	f000 f86e 	bl	801332c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013250:	f7fe fb7c 	bl	801194c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013254:	bf00      	nop
 8013256:	3718      	adds	r7, #24
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	20028a98 	.word	0x20028a98
 8013260:	20028a90 	.word	0x20028a90

08013264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801326a:	4b29      	ldr	r3, [pc, #164]	; (8013310 <prvHeapInit+0xac>)
 801326c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801326e:	4b29      	ldr	r3, [pc, #164]	; (8013314 <prvHeapInit+0xb0>)
 8013270:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f003 0307 	and.w	r3, r3, #7
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00c      	beq.n	8013296 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	3307      	adds	r3, #7
 8013280:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	f023 0307 	bic.w	r3, r3, #7
 8013288:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801328a:	68ba      	ldr	r2, [r7, #8]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	1ad3      	subs	r3, r2, r3
 8013290:	4a20      	ldr	r2, [pc, #128]	; (8013314 <prvHeapInit+0xb0>)
 8013292:	4413      	add	r3, r2
 8013294:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801329a:	4a1f      	ldr	r2, [pc, #124]	; (8013318 <prvHeapInit+0xb4>)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80132a0:	4b1d      	ldr	r3, [pc, #116]	; (8013318 <prvHeapInit+0xb4>)
 80132a2:	2200      	movs	r2, #0
 80132a4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	68ba      	ldr	r2, [r7, #8]
 80132aa:	4413      	add	r3, r2
 80132ac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80132ae:	2208      	movs	r2, #8
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	1a9b      	subs	r3, r3, r2
 80132b4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f023 0307 	bic.w	r3, r3, #7
 80132bc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	4a16      	ldr	r2, [pc, #88]	; (801331c <prvHeapInit+0xb8>)
 80132c2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80132c4:	4b15      	ldr	r3, [pc, #84]	; (801331c <prvHeapInit+0xb8>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2200      	movs	r2, #0
 80132ca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80132cc:	4b13      	ldr	r3, [pc, #76]	; (801331c <prvHeapInit+0xb8>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	2200      	movs	r2, #0
 80132d2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	68fa      	ldr	r2, [r7, #12]
 80132dc:	1ad2      	subs	r2, r2, r3
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80132e2:	4b0e      	ldr	r3, [pc, #56]	; (801331c <prvHeapInit+0xb8>)
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	4a0c      	ldr	r2, [pc, #48]	; (8013320 <prvHeapInit+0xbc>)
 80132f0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	4a0b      	ldr	r2, [pc, #44]	; (8013324 <prvHeapInit+0xc0>)
 80132f8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80132fa:	4b0b      	ldr	r3, [pc, #44]	; (8013328 <prvHeapInit+0xc4>)
 80132fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013300:	601a      	str	r2, [r3, #0]
}
 8013302:	bf00      	nop
 8013304:	3714      	adds	r7, #20
 8013306:	46bd      	mov	sp, r7
 8013308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330c:	4770      	bx	lr
 801330e:	bf00      	nop
 8013310:	000249f0 	.word	0x000249f0
 8013314:	20004094 	.word	0x20004094
 8013318:	20028a84 	.word	0x20028a84
 801331c:	20028a8c 	.word	0x20028a8c
 8013320:	20028a94 	.word	0x20028a94
 8013324:	20028a90 	.word	0x20028a90
 8013328:	20028a98 	.word	0x20028a98

0801332c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801332c:	b480      	push	{r7}
 801332e:	b085      	sub	sp, #20
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013334:	4b28      	ldr	r3, [pc, #160]	; (80133d8 <prvInsertBlockIntoFreeList+0xac>)
 8013336:	60fb      	str	r3, [r7, #12]
 8013338:	e002      	b.n	8013340 <prvInsertBlockIntoFreeList+0x14>
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	60fb      	str	r3, [r7, #12]
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	429a      	cmp	r2, r3
 8013348:	d8f7      	bhi.n	801333a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	4413      	add	r3, r2
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	429a      	cmp	r2, r3
 801335a:	d108      	bne.n	801336e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	685a      	ldr	r2, [r3, #4]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	441a      	add	r2, r3
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	68ba      	ldr	r2, [r7, #8]
 8013378:	441a      	add	r2, r3
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	429a      	cmp	r2, r3
 8013380:	d118      	bne.n	80133b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	4b15      	ldr	r3, [pc, #84]	; (80133dc <prvInsertBlockIntoFreeList+0xb0>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	429a      	cmp	r2, r3
 801338c:	d00d      	beq.n	80133aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	685a      	ldr	r2, [r3, #4]
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	441a      	add	r2, r3
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	601a      	str	r2, [r3, #0]
 80133a8:	e008      	b.n	80133bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80133aa:	4b0c      	ldr	r3, [pc, #48]	; (80133dc <prvInsertBlockIntoFreeList+0xb0>)
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	601a      	str	r2, [r3, #0]
 80133b2:	e003      	b.n	80133bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681a      	ldr	r2, [r3, #0]
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80133bc:	68fa      	ldr	r2, [r7, #12]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d002      	beq.n	80133ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133ca:	bf00      	nop
 80133cc:	3714      	adds	r7, #20
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	20028a84 	.word	0x20028a84
 80133dc:	20028a8c 	.word	0x20028a8c

080133e0 <__errno>:
 80133e0:	4b01      	ldr	r3, [pc, #4]	; (80133e8 <__errno+0x8>)
 80133e2:	6818      	ldr	r0, [r3, #0]
 80133e4:	4770      	bx	lr
 80133e6:	bf00      	nop
 80133e8:	200001a8 	.word	0x200001a8

080133ec <__libc_init_array>:
 80133ec:	b570      	push	{r4, r5, r6, lr}
 80133ee:	4e0d      	ldr	r6, [pc, #52]	; (8013424 <__libc_init_array+0x38>)
 80133f0:	4c0d      	ldr	r4, [pc, #52]	; (8013428 <__libc_init_array+0x3c>)
 80133f2:	1ba4      	subs	r4, r4, r6
 80133f4:	10a4      	asrs	r4, r4, #2
 80133f6:	2500      	movs	r5, #0
 80133f8:	42a5      	cmp	r5, r4
 80133fa:	d109      	bne.n	8013410 <__libc_init_array+0x24>
 80133fc:	4e0b      	ldr	r6, [pc, #44]	; (801342c <__libc_init_array+0x40>)
 80133fe:	4c0c      	ldr	r4, [pc, #48]	; (8013430 <__libc_init_array+0x44>)
 8013400:	f004 f936 	bl	8017670 <_init>
 8013404:	1ba4      	subs	r4, r4, r6
 8013406:	10a4      	asrs	r4, r4, #2
 8013408:	2500      	movs	r5, #0
 801340a:	42a5      	cmp	r5, r4
 801340c:	d105      	bne.n	801341a <__libc_init_array+0x2e>
 801340e:	bd70      	pop	{r4, r5, r6, pc}
 8013410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013414:	4798      	blx	r3
 8013416:	3501      	adds	r5, #1
 8013418:	e7ee      	b.n	80133f8 <__libc_init_array+0xc>
 801341a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801341e:	4798      	blx	r3
 8013420:	3501      	adds	r5, #1
 8013422:	e7f2      	b.n	801340a <__libc_init_array+0x1e>
 8013424:	08018c10 	.word	0x08018c10
 8013428:	08018c10 	.word	0x08018c10
 801342c:	08018c10 	.word	0x08018c10
 8013430:	08018c14 	.word	0x08018c14

08013434 <memcpy>:
 8013434:	b510      	push	{r4, lr}
 8013436:	1e43      	subs	r3, r0, #1
 8013438:	440a      	add	r2, r1
 801343a:	4291      	cmp	r1, r2
 801343c:	d100      	bne.n	8013440 <memcpy+0xc>
 801343e:	bd10      	pop	{r4, pc}
 8013440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013448:	e7f7      	b.n	801343a <memcpy+0x6>

0801344a <memset>:
 801344a:	4402      	add	r2, r0
 801344c:	4603      	mov	r3, r0
 801344e:	4293      	cmp	r3, r2
 8013450:	d100      	bne.n	8013454 <memset+0xa>
 8013452:	4770      	bx	lr
 8013454:	f803 1b01 	strb.w	r1, [r3], #1
 8013458:	e7f9      	b.n	801344e <memset+0x4>

0801345a <__cvt>:
 801345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801345c:	ed2d 8b02 	vpush	{d8}
 8013460:	eeb0 8b40 	vmov.f64	d8, d0
 8013464:	b085      	sub	sp, #20
 8013466:	4617      	mov	r7, r2
 8013468:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801346a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801346c:	ee18 2a90 	vmov	r2, s17
 8013470:	f025 0520 	bic.w	r5, r5, #32
 8013474:	2a00      	cmp	r2, #0
 8013476:	bfb6      	itet	lt
 8013478:	222d      	movlt	r2, #45	; 0x2d
 801347a:	2200      	movge	r2, #0
 801347c:	eeb1 8b40 	vneglt.f64	d8, d0
 8013480:	2d46      	cmp	r5, #70	; 0x46
 8013482:	460c      	mov	r4, r1
 8013484:	701a      	strb	r2, [r3, #0]
 8013486:	d004      	beq.n	8013492 <__cvt+0x38>
 8013488:	2d45      	cmp	r5, #69	; 0x45
 801348a:	d100      	bne.n	801348e <__cvt+0x34>
 801348c:	3401      	adds	r4, #1
 801348e:	2102      	movs	r1, #2
 8013490:	e000      	b.n	8013494 <__cvt+0x3a>
 8013492:	2103      	movs	r1, #3
 8013494:	ab03      	add	r3, sp, #12
 8013496:	9301      	str	r3, [sp, #4]
 8013498:	ab02      	add	r3, sp, #8
 801349a:	9300      	str	r3, [sp, #0]
 801349c:	4622      	mov	r2, r4
 801349e:	4633      	mov	r3, r6
 80134a0:	eeb0 0b48 	vmov.f64	d0, d8
 80134a4:	f001 fd38 	bl	8014f18 <_dtoa_r>
 80134a8:	2d47      	cmp	r5, #71	; 0x47
 80134aa:	d101      	bne.n	80134b0 <__cvt+0x56>
 80134ac:	07fb      	lsls	r3, r7, #31
 80134ae:	d51e      	bpl.n	80134ee <__cvt+0x94>
 80134b0:	2d46      	cmp	r5, #70	; 0x46
 80134b2:	eb00 0304 	add.w	r3, r0, r4
 80134b6:	d10c      	bne.n	80134d2 <__cvt+0x78>
 80134b8:	7802      	ldrb	r2, [r0, #0]
 80134ba:	2a30      	cmp	r2, #48	; 0x30
 80134bc:	d107      	bne.n	80134ce <__cvt+0x74>
 80134be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80134c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c6:	bf1c      	itt	ne
 80134c8:	f1c4 0401 	rsbne	r4, r4, #1
 80134cc:	6034      	strne	r4, [r6, #0]
 80134ce:	6832      	ldr	r2, [r6, #0]
 80134d0:	4413      	add	r3, r2
 80134d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80134d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134da:	d007      	beq.n	80134ec <__cvt+0x92>
 80134dc:	2130      	movs	r1, #48	; 0x30
 80134de:	9a03      	ldr	r2, [sp, #12]
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d204      	bcs.n	80134ee <__cvt+0x94>
 80134e4:	1c54      	adds	r4, r2, #1
 80134e6:	9403      	str	r4, [sp, #12]
 80134e8:	7011      	strb	r1, [r2, #0]
 80134ea:	e7f8      	b.n	80134de <__cvt+0x84>
 80134ec:	9303      	str	r3, [sp, #12]
 80134ee:	9b03      	ldr	r3, [sp, #12]
 80134f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134f2:	1a1b      	subs	r3, r3, r0
 80134f4:	6013      	str	r3, [r2, #0]
 80134f6:	b005      	add	sp, #20
 80134f8:	ecbd 8b02 	vpop	{d8}
 80134fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134fe <__exponent>:
 80134fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013500:	2900      	cmp	r1, #0
 8013502:	4604      	mov	r4, r0
 8013504:	bfba      	itte	lt
 8013506:	4249      	neglt	r1, r1
 8013508:	232d      	movlt	r3, #45	; 0x2d
 801350a:	232b      	movge	r3, #43	; 0x2b
 801350c:	2909      	cmp	r1, #9
 801350e:	f804 2b02 	strb.w	r2, [r4], #2
 8013512:	7043      	strb	r3, [r0, #1]
 8013514:	dd20      	ble.n	8013558 <__exponent+0x5a>
 8013516:	f10d 0307 	add.w	r3, sp, #7
 801351a:	461f      	mov	r7, r3
 801351c:	260a      	movs	r6, #10
 801351e:	fb91 f5f6 	sdiv	r5, r1, r6
 8013522:	fb06 1115 	mls	r1, r6, r5, r1
 8013526:	3130      	adds	r1, #48	; 0x30
 8013528:	2d09      	cmp	r5, #9
 801352a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801352e:	f103 32ff 	add.w	r2, r3, #4294967295
 8013532:	4629      	mov	r1, r5
 8013534:	dc09      	bgt.n	801354a <__exponent+0x4c>
 8013536:	3130      	adds	r1, #48	; 0x30
 8013538:	3b02      	subs	r3, #2
 801353a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801353e:	42bb      	cmp	r3, r7
 8013540:	4622      	mov	r2, r4
 8013542:	d304      	bcc.n	801354e <__exponent+0x50>
 8013544:	1a10      	subs	r0, r2, r0
 8013546:	b003      	add	sp, #12
 8013548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801354a:	4613      	mov	r3, r2
 801354c:	e7e7      	b.n	801351e <__exponent+0x20>
 801354e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013552:	f804 2b01 	strb.w	r2, [r4], #1
 8013556:	e7f2      	b.n	801353e <__exponent+0x40>
 8013558:	2330      	movs	r3, #48	; 0x30
 801355a:	4419      	add	r1, r3
 801355c:	7083      	strb	r3, [r0, #2]
 801355e:	1d02      	adds	r2, r0, #4
 8013560:	70c1      	strb	r1, [r0, #3]
 8013562:	e7ef      	b.n	8013544 <__exponent+0x46>
 8013564:	0000      	movs	r0, r0
	...

08013568 <_printf_float>:
 8013568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801356c:	b08d      	sub	sp, #52	; 0x34
 801356e:	460c      	mov	r4, r1
 8013570:	4616      	mov	r6, r2
 8013572:	461f      	mov	r7, r3
 8013574:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013578:	4605      	mov	r5, r0
 801357a:	f002 fe0f 	bl	801619c <_localeconv_r>
 801357e:	f8d0 b000 	ldr.w	fp, [r0]
 8013582:	4658      	mov	r0, fp
 8013584:	f7ec fe5c 	bl	8000240 <strlen>
 8013588:	2300      	movs	r3, #0
 801358a:	930a      	str	r3, [sp, #40]	; 0x28
 801358c:	f8d8 3000 	ldr.w	r3, [r8]
 8013590:	9005      	str	r0, [sp, #20]
 8013592:	3307      	adds	r3, #7
 8013594:	f023 0307 	bic.w	r3, r3, #7
 8013598:	f103 0108 	add.w	r1, r3, #8
 801359c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80135a0:	6822      	ldr	r2, [r4, #0]
 80135a2:	f8c8 1000 	str.w	r1, [r8]
 80135a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80135aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80135ae:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8013838 <_printf_float+0x2d0>
 80135b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80135b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80135ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80135be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c2:	dd24      	ble.n	801360e <_printf_float+0xa6>
 80135c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80135c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135cc:	d502      	bpl.n	80135d4 <_printf_float+0x6c>
 80135ce:	232d      	movs	r3, #45	; 0x2d
 80135d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135d4:	499a      	ldr	r1, [pc, #616]	; (8013840 <_printf_float+0x2d8>)
 80135d6:	4b9b      	ldr	r3, [pc, #620]	; (8013844 <_printf_float+0x2dc>)
 80135d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80135dc:	bf8c      	ite	hi
 80135de:	4688      	movhi	r8, r1
 80135e0:	4698      	movls	r8, r3
 80135e2:	f022 0204 	bic.w	r2, r2, #4
 80135e6:	2303      	movs	r3, #3
 80135e8:	6123      	str	r3, [r4, #16]
 80135ea:	6022      	str	r2, [r4, #0]
 80135ec:	f04f 0a00 	mov.w	sl, #0
 80135f0:	9700      	str	r7, [sp, #0]
 80135f2:	4633      	mov	r3, r6
 80135f4:	aa0b      	add	r2, sp, #44	; 0x2c
 80135f6:	4621      	mov	r1, r4
 80135f8:	4628      	mov	r0, r5
 80135fa:	f000 f9e1 	bl	80139c0 <_printf_common>
 80135fe:	3001      	adds	r0, #1
 8013600:	f040 8089 	bne.w	8013716 <_printf_float+0x1ae>
 8013604:	f04f 30ff 	mov.w	r0, #4294967295
 8013608:	b00d      	add	sp, #52	; 0x34
 801360a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013616:	d702      	bvc.n	801361e <_printf_float+0xb6>
 8013618:	498b      	ldr	r1, [pc, #556]	; (8013848 <_printf_float+0x2e0>)
 801361a:	4b8c      	ldr	r3, [pc, #560]	; (801384c <_printf_float+0x2e4>)
 801361c:	e7dc      	b.n	80135d8 <_printf_float+0x70>
 801361e:	6861      	ldr	r1, [r4, #4]
 8013620:	1c4b      	adds	r3, r1, #1
 8013622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013626:	ab0a      	add	r3, sp, #40	; 0x28
 8013628:	a809      	add	r0, sp, #36	; 0x24
 801362a:	d13b      	bne.n	80136a4 <_printf_float+0x13c>
 801362c:	2106      	movs	r1, #6
 801362e:	6061      	str	r1, [r4, #4]
 8013630:	f04f 0c00 	mov.w	ip, #0
 8013634:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8013638:	e9cd 0900 	strd	r0, r9, [sp]
 801363c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013640:	6022      	str	r2, [r4, #0]
 8013642:	6861      	ldr	r1, [r4, #4]
 8013644:	4628      	mov	r0, r5
 8013646:	f7ff ff08 	bl	801345a <__cvt>
 801364a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801364e:	2b47      	cmp	r3, #71	; 0x47
 8013650:	4680      	mov	r8, r0
 8013652:	d109      	bne.n	8013668 <_printf_float+0x100>
 8013654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013656:	1cd8      	adds	r0, r3, #3
 8013658:	db02      	blt.n	8013660 <_printf_float+0xf8>
 801365a:	6862      	ldr	r2, [r4, #4]
 801365c:	4293      	cmp	r3, r2
 801365e:	dd47      	ble.n	80136f0 <_printf_float+0x188>
 8013660:	f1a9 0902 	sub.w	r9, r9, #2
 8013664:	fa5f f989 	uxtb.w	r9, r9
 8013668:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801366c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801366e:	d824      	bhi.n	80136ba <_printf_float+0x152>
 8013670:	3901      	subs	r1, #1
 8013672:	464a      	mov	r2, r9
 8013674:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013678:	9109      	str	r1, [sp, #36]	; 0x24
 801367a:	f7ff ff40 	bl	80134fe <__exponent>
 801367e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013680:	1813      	adds	r3, r2, r0
 8013682:	2a01      	cmp	r2, #1
 8013684:	4682      	mov	sl, r0
 8013686:	6123      	str	r3, [r4, #16]
 8013688:	dc02      	bgt.n	8013690 <_printf_float+0x128>
 801368a:	6822      	ldr	r2, [r4, #0]
 801368c:	07d1      	lsls	r1, r2, #31
 801368e:	d501      	bpl.n	8013694 <_printf_float+0x12c>
 8013690:	3301      	adds	r3, #1
 8013692:	6123      	str	r3, [r4, #16]
 8013694:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013698:	2b00      	cmp	r3, #0
 801369a:	d0a9      	beq.n	80135f0 <_printf_float+0x88>
 801369c:	232d      	movs	r3, #45	; 0x2d
 801369e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136a2:	e7a5      	b.n	80135f0 <_printf_float+0x88>
 80136a4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80136a8:	f000 8178 	beq.w	801399c <_printf_float+0x434>
 80136ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80136b0:	d1be      	bne.n	8013630 <_printf_float+0xc8>
 80136b2:	2900      	cmp	r1, #0
 80136b4:	d1bc      	bne.n	8013630 <_printf_float+0xc8>
 80136b6:	2101      	movs	r1, #1
 80136b8:	e7b9      	b.n	801362e <_printf_float+0xc6>
 80136ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80136be:	d119      	bne.n	80136f4 <_printf_float+0x18c>
 80136c0:	2900      	cmp	r1, #0
 80136c2:	6863      	ldr	r3, [r4, #4]
 80136c4:	dd0c      	ble.n	80136e0 <_printf_float+0x178>
 80136c6:	6121      	str	r1, [r4, #16]
 80136c8:	b913      	cbnz	r3, 80136d0 <_printf_float+0x168>
 80136ca:	6822      	ldr	r2, [r4, #0]
 80136cc:	07d2      	lsls	r2, r2, #31
 80136ce:	d502      	bpl.n	80136d6 <_printf_float+0x16e>
 80136d0:	3301      	adds	r3, #1
 80136d2:	440b      	add	r3, r1
 80136d4:	6123      	str	r3, [r4, #16]
 80136d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80136da:	f04f 0a00 	mov.w	sl, #0
 80136de:	e7d9      	b.n	8013694 <_printf_float+0x12c>
 80136e0:	b913      	cbnz	r3, 80136e8 <_printf_float+0x180>
 80136e2:	6822      	ldr	r2, [r4, #0]
 80136e4:	07d0      	lsls	r0, r2, #31
 80136e6:	d501      	bpl.n	80136ec <_printf_float+0x184>
 80136e8:	3302      	adds	r3, #2
 80136ea:	e7f3      	b.n	80136d4 <_printf_float+0x16c>
 80136ec:	2301      	movs	r3, #1
 80136ee:	e7f1      	b.n	80136d4 <_printf_float+0x16c>
 80136f0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80136f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80136f8:	4293      	cmp	r3, r2
 80136fa:	db05      	blt.n	8013708 <_printf_float+0x1a0>
 80136fc:	6822      	ldr	r2, [r4, #0]
 80136fe:	6123      	str	r3, [r4, #16]
 8013700:	07d1      	lsls	r1, r2, #31
 8013702:	d5e8      	bpl.n	80136d6 <_printf_float+0x16e>
 8013704:	3301      	adds	r3, #1
 8013706:	e7e5      	b.n	80136d4 <_printf_float+0x16c>
 8013708:	2b00      	cmp	r3, #0
 801370a:	bfd4      	ite	le
 801370c:	f1c3 0302 	rsble	r3, r3, #2
 8013710:	2301      	movgt	r3, #1
 8013712:	4413      	add	r3, r2
 8013714:	e7de      	b.n	80136d4 <_printf_float+0x16c>
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	055a      	lsls	r2, r3, #21
 801371a:	d407      	bmi.n	801372c <_printf_float+0x1c4>
 801371c:	6923      	ldr	r3, [r4, #16]
 801371e:	4642      	mov	r2, r8
 8013720:	4631      	mov	r1, r6
 8013722:	4628      	mov	r0, r5
 8013724:	47b8      	blx	r7
 8013726:	3001      	adds	r0, #1
 8013728:	d12a      	bne.n	8013780 <_printf_float+0x218>
 801372a:	e76b      	b.n	8013604 <_printf_float+0x9c>
 801372c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013730:	f240 80de 	bls.w	80138f0 <_printf_float+0x388>
 8013734:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013738:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013740:	d133      	bne.n	80137aa <_printf_float+0x242>
 8013742:	2301      	movs	r3, #1
 8013744:	4a42      	ldr	r2, [pc, #264]	; (8013850 <_printf_float+0x2e8>)
 8013746:	4631      	mov	r1, r6
 8013748:	4628      	mov	r0, r5
 801374a:	47b8      	blx	r7
 801374c:	3001      	adds	r0, #1
 801374e:	f43f af59 	beq.w	8013604 <_printf_float+0x9c>
 8013752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013756:	429a      	cmp	r2, r3
 8013758:	db02      	blt.n	8013760 <_printf_float+0x1f8>
 801375a:	6823      	ldr	r3, [r4, #0]
 801375c:	07d8      	lsls	r0, r3, #31
 801375e:	d50f      	bpl.n	8013780 <_printf_float+0x218>
 8013760:	9b05      	ldr	r3, [sp, #20]
 8013762:	465a      	mov	r2, fp
 8013764:	4631      	mov	r1, r6
 8013766:	4628      	mov	r0, r5
 8013768:	47b8      	blx	r7
 801376a:	3001      	adds	r0, #1
 801376c:	f43f af4a 	beq.w	8013604 <_printf_float+0x9c>
 8013770:	f04f 0800 	mov.w	r8, #0
 8013774:	f104 091a 	add.w	r9, r4, #26
 8013778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801377a:	3b01      	subs	r3, #1
 801377c:	4543      	cmp	r3, r8
 801377e:	dc09      	bgt.n	8013794 <_printf_float+0x22c>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	079b      	lsls	r3, r3, #30
 8013784:	f100 8105 	bmi.w	8013992 <_printf_float+0x42a>
 8013788:	68e0      	ldr	r0, [r4, #12]
 801378a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801378c:	4298      	cmp	r0, r3
 801378e:	bfb8      	it	lt
 8013790:	4618      	movlt	r0, r3
 8013792:	e739      	b.n	8013608 <_printf_float+0xa0>
 8013794:	2301      	movs	r3, #1
 8013796:	464a      	mov	r2, r9
 8013798:	4631      	mov	r1, r6
 801379a:	4628      	mov	r0, r5
 801379c:	47b8      	blx	r7
 801379e:	3001      	adds	r0, #1
 80137a0:	f43f af30 	beq.w	8013604 <_printf_float+0x9c>
 80137a4:	f108 0801 	add.w	r8, r8, #1
 80137a8:	e7e6      	b.n	8013778 <_printf_float+0x210>
 80137aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	dc2b      	bgt.n	8013808 <_printf_float+0x2a0>
 80137b0:	2301      	movs	r3, #1
 80137b2:	4a27      	ldr	r2, [pc, #156]	; (8013850 <_printf_float+0x2e8>)
 80137b4:	4631      	mov	r1, r6
 80137b6:	4628      	mov	r0, r5
 80137b8:	47b8      	blx	r7
 80137ba:	3001      	adds	r0, #1
 80137bc:	f43f af22 	beq.w	8013604 <_printf_float+0x9c>
 80137c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137c2:	b923      	cbnz	r3, 80137ce <_printf_float+0x266>
 80137c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137c6:	b913      	cbnz	r3, 80137ce <_printf_float+0x266>
 80137c8:	6823      	ldr	r3, [r4, #0]
 80137ca:	07d9      	lsls	r1, r3, #31
 80137cc:	d5d8      	bpl.n	8013780 <_printf_float+0x218>
 80137ce:	9b05      	ldr	r3, [sp, #20]
 80137d0:	465a      	mov	r2, fp
 80137d2:	4631      	mov	r1, r6
 80137d4:	4628      	mov	r0, r5
 80137d6:	47b8      	blx	r7
 80137d8:	3001      	adds	r0, #1
 80137da:	f43f af13 	beq.w	8013604 <_printf_float+0x9c>
 80137de:	f04f 0900 	mov.w	r9, #0
 80137e2:	f104 0a1a 	add.w	sl, r4, #26
 80137e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e8:	425b      	negs	r3, r3
 80137ea:	454b      	cmp	r3, r9
 80137ec:	dc01      	bgt.n	80137f2 <_printf_float+0x28a>
 80137ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f0:	e795      	b.n	801371e <_printf_float+0x1b6>
 80137f2:	2301      	movs	r3, #1
 80137f4:	4652      	mov	r2, sl
 80137f6:	4631      	mov	r1, r6
 80137f8:	4628      	mov	r0, r5
 80137fa:	47b8      	blx	r7
 80137fc:	3001      	adds	r0, #1
 80137fe:	f43f af01 	beq.w	8013604 <_printf_float+0x9c>
 8013802:	f109 0901 	add.w	r9, r9, #1
 8013806:	e7ee      	b.n	80137e6 <_printf_float+0x27e>
 8013808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801380a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801380c:	429a      	cmp	r2, r3
 801380e:	bfa8      	it	ge
 8013810:	461a      	movge	r2, r3
 8013812:	2a00      	cmp	r2, #0
 8013814:	4691      	mov	r9, r2
 8013816:	dd07      	ble.n	8013828 <_printf_float+0x2c0>
 8013818:	4613      	mov	r3, r2
 801381a:	4631      	mov	r1, r6
 801381c:	4642      	mov	r2, r8
 801381e:	4628      	mov	r0, r5
 8013820:	47b8      	blx	r7
 8013822:	3001      	adds	r0, #1
 8013824:	f43f aeee 	beq.w	8013604 <_printf_float+0x9c>
 8013828:	f104 031a 	add.w	r3, r4, #26
 801382c:	f04f 0a00 	mov.w	sl, #0
 8013830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013834:	9307      	str	r3, [sp, #28]
 8013836:	e017      	b.n	8013868 <_printf_float+0x300>
 8013838:	ffffffff 	.word	0xffffffff
 801383c:	7fefffff 	.word	0x7fefffff
 8013840:	080188ec 	.word	0x080188ec
 8013844:	080188e8 	.word	0x080188e8
 8013848:	080188f4 	.word	0x080188f4
 801384c:	080188f0 	.word	0x080188f0
 8013850:	080188f8 	.word	0x080188f8
 8013854:	2301      	movs	r3, #1
 8013856:	9a07      	ldr	r2, [sp, #28]
 8013858:	4631      	mov	r1, r6
 801385a:	4628      	mov	r0, r5
 801385c:	47b8      	blx	r7
 801385e:	3001      	adds	r0, #1
 8013860:	f43f aed0 	beq.w	8013604 <_printf_float+0x9c>
 8013864:	f10a 0a01 	add.w	sl, sl, #1
 8013868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801386a:	9306      	str	r3, [sp, #24]
 801386c:	eba3 0309 	sub.w	r3, r3, r9
 8013870:	4553      	cmp	r3, sl
 8013872:	dcef      	bgt.n	8013854 <_printf_float+0x2ec>
 8013874:	9b06      	ldr	r3, [sp, #24]
 8013876:	4498      	add	r8, r3
 8013878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801387c:	429a      	cmp	r2, r3
 801387e:	db15      	blt.n	80138ac <_printf_float+0x344>
 8013880:	6823      	ldr	r3, [r4, #0]
 8013882:	07da      	lsls	r2, r3, #31
 8013884:	d412      	bmi.n	80138ac <_printf_float+0x344>
 8013886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013888:	9a06      	ldr	r2, [sp, #24]
 801388a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801388c:	1a9a      	subs	r2, r3, r2
 801388e:	eba3 0a01 	sub.w	sl, r3, r1
 8013892:	4592      	cmp	sl, r2
 8013894:	bfa8      	it	ge
 8013896:	4692      	movge	sl, r2
 8013898:	f1ba 0f00 	cmp.w	sl, #0
 801389c:	dc0e      	bgt.n	80138bc <_printf_float+0x354>
 801389e:	f04f 0800 	mov.w	r8, #0
 80138a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80138a6:	f104 091a 	add.w	r9, r4, #26
 80138aa:	e019      	b.n	80138e0 <_printf_float+0x378>
 80138ac:	9b05      	ldr	r3, [sp, #20]
 80138ae:	465a      	mov	r2, fp
 80138b0:	4631      	mov	r1, r6
 80138b2:	4628      	mov	r0, r5
 80138b4:	47b8      	blx	r7
 80138b6:	3001      	adds	r0, #1
 80138b8:	d1e5      	bne.n	8013886 <_printf_float+0x31e>
 80138ba:	e6a3      	b.n	8013604 <_printf_float+0x9c>
 80138bc:	4653      	mov	r3, sl
 80138be:	4642      	mov	r2, r8
 80138c0:	4631      	mov	r1, r6
 80138c2:	4628      	mov	r0, r5
 80138c4:	47b8      	blx	r7
 80138c6:	3001      	adds	r0, #1
 80138c8:	d1e9      	bne.n	801389e <_printf_float+0x336>
 80138ca:	e69b      	b.n	8013604 <_printf_float+0x9c>
 80138cc:	2301      	movs	r3, #1
 80138ce:	464a      	mov	r2, r9
 80138d0:	4631      	mov	r1, r6
 80138d2:	4628      	mov	r0, r5
 80138d4:	47b8      	blx	r7
 80138d6:	3001      	adds	r0, #1
 80138d8:	f43f ae94 	beq.w	8013604 <_printf_float+0x9c>
 80138dc:	f108 0801 	add.w	r8, r8, #1
 80138e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80138e4:	1a9b      	subs	r3, r3, r2
 80138e6:	eba3 030a 	sub.w	r3, r3, sl
 80138ea:	4543      	cmp	r3, r8
 80138ec:	dcee      	bgt.n	80138cc <_printf_float+0x364>
 80138ee:	e747      	b.n	8013780 <_printf_float+0x218>
 80138f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138f2:	2a01      	cmp	r2, #1
 80138f4:	dc01      	bgt.n	80138fa <_printf_float+0x392>
 80138f6:	07db      	lsls	r3, r3, #31
 80138f8:	d539      	bpl.n	801396e <_printf_float+0x406>
 80138fa:	2301      	movs	r3, #1
 80138fc:	4642      	mov	r2, r8
 80138fe:	4631      	mov	r1, r6
 8013900:	4628      	mov	r0, r5
 8013902:	47b8      	blx	r7
 8013904:	3001      	adds	r0, #1
 8013906:	f43f ae7d 	beq.w	8013604 <_printf_float+0x9c>
 801390a:	9b05      	ldr	r3, [sp, #20]
 801390c:	465a      	mov	r2, fp
 801390e:	4631      	mov	r1, r6
 8013910:	4628      	mov	r0, r5
 8013912:	47b8      	blx	r7
 8013914:	3001      	adds	r0, #1
 8013916:	f108 0801 	add.w	r8, r8, #1
 801391a:	f43f ae73 	beq.w	8013604 <_printf_float+0x9c>
 801391e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013924:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801392c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013930:	d018      	beq.n	8013964 <_printf_float+0x3fc>
 8013932:	4642      	mov	r2, r8
 8013934:	4631      	mov	r1, r6
 8013936:	4628      	mov	r0, r5
 8013938:	47b8      	blx	r7
 801393a:	3001      	adds	r0, #1
 801393c:	d10e      	bne.n	801395c <_printf_float+0x3f4>
 801393e:	e661      	b.n	8013604 <_printf_float+0x9c>
 8013940:	2301      	movs	r3, #1
 8013942:	464a      	mov	r2, r9
 8013944:	4631      	mov	r1, r6
 8013946:	4628      	mov	r0, r5
 8013948:	47b8      	blx	r7
 801394a:	3001      	adds	r0, #1
 801394c:	f43f ae5a 	beq.w	8013604 <_printf_float+0x9c>
 8013950:	f108 0801 	add.w	r8, r8, #1
 8013954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013956:	3b01      	subs	r3, #1
 8013958:	4543      	cmp	r3, r8
 801395a:	dcf1      	bgt.n	8013940 <_printf_float+0x3d8>
 801395c:	4653      	mov	r3, sl
 801395e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013962:	e6dd      	b.n	8013720 <_printf_float+0x1b8>
 8013964:	f04f 0800 	mov.w	r8, #0
 8013968:	f104 091a 	add.w	r9, r4, #26
 801396c:	e7f2      	b.n	8013954 <_printf_float+0x3ec>
 801396e:	2301      	movs	r3, #1
 8013970:	e7df      	b.n	8013932 <_printf_float+0x3ca>
 8013972:	2301      	movs	r3, #1
 8013974:	464a      	mov	r2, r9
 8013976:	4631      	mov	r1, r6
 8013978:	4628      	mov	r0, r5
 801397a:	47b8      	blx	r7
 801397c:	3001      	adds	r0, #1
 801397e:	f43f ae41 	beq.w	8013604 <_printf_float+0x9c>
 8013982:	f108 0801 	add.w	r8, r8, #1
 8013986:	68e3      	ldr	r3, [r4, #12]
 8013988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801398a:	1a9b      	subs	r3, r3, r2
 801398c:	4543      	cmp	r3, r8
 801398e:	dcf0      	bgt.n	8013972 <_printf_float+0x40a>
 8013990:	e6fa      	b.n	8013788 <_printf_float+0x220>
 8013992:	f04f 0800 	mov.w	r8, #0
 8013996:	f104 0919 	add.w	r9, r4, #25
 801399a:	e7f4      	b.n	8013986 <_printf_float+0x41e>
 801399c:	2900      	cmp	r1, #0
 801399e:	f43f ae8a 	beq.w	80136b6 <_printf_float+0x14e>
 80139a2:	f04f 0c00 	mov.w	ip, #0
 80139a6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80139aa:	e9cd 0900 	strd	r0, r9, [sp]
 80139ae:	6022      	str	r2, [r4, #0]
 80139b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80139b4:	4628      	mov	r0, r5
 80139b6:	f7ff fd50 	bl	801345a <__cvt>
 80139ba:	4680      	mov	r8, r0
 80139bc:	e64a      	b.n	8013654 <_printf_float+0xec>
 80139be:	bf00      	nop

080139c0 <_printf_common>:
 80139c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c4:	4691      	mov	r9, r2
 80139c6:	461f      	mov	r7, r3
 80139c8:	688a      	ldr	r2, [r1, #8]
 80139ca:	690b      	ldr	r3, [r1, #16]
 80139cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80139d0:	4293      	cmp	r3, r2
 80139d2:	bfb8      	it	lt
 80139d4:	4613      	movlt	r3, r2
 80139d6:	f8c9 3000 	str.w	r3, [r9]
 80139da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80139de:	4606      	mov	r6, r0
 80139e0:	460c      	mov	r4, r1
 80139e2:	b112      	cbz	r2, 80139ea <_printf_common+0x2a>
 80139e4:	3301      	adds	r3, #1
 80139e6:	f8c9 3000 	str.w	r3, [r9]
 80139ea:	6823      	ldr	r3, [r4, #0]
 80139ec:	0699      	lsls	r1, r3, #26
 80139ee:	bf42      	ittt	mi
 80139f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80139f4:	3302      	addmi	r3, #2
 80139f6:	f8c9 3000 	strmi.w	r3, [r9]
 80139fa:	6825      	ldr	r5, [r4, #0]
 80139fc:	f015 0506 	ands.w	r5, r5, #6
 8013a00:	d107      	bne.n	8013a12 <_printf_common+0x52>
 8013a02:	f104 0a19 	add.w	sl, r4, #25
 8013a06:	68e3      	ldr	r3, [r4, #12]
 8013a08:	f8d9 2000 	ldr.w	r2, [r9]
 8013a0c:	1a9b      	subs	r3, r3, r2
 8013a0e:	42ab      	cmp	r3, r5
 8013a10:	dc28      	bgt.n	8013a64 <_printf_common+0xa4>
 8013a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013a16:	6822      	ldr	r2, [r4, #0]
 8013a18:	3300      	adds	r3, #0
 8013a1a:	bf18      	it	ne
 8013a1c:	2301      	movne	r3, #1
 8013a1e:	0692      	lsls	r2, r2, #26
 8013a20:	d42d      	bmi.n	8013a7e <_printf_common+0xbe>
 8013a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a26:	4639      	mov	r1, r7
 8013a28:	4630      	mov	r0, r6
 8013a2a:	47c0      	blx	r8
 8013a2c:	3001      	adds	r0, #1
 8013a2e:	d020      	beq.n	8013a72 <_printf_common+0xb2>
 8013a30:	6823      	ldr	r3, [r4, #0]
 8013a32:	68e5      	ldr	r5, [r4, #12]
 8013a34:	f8d9 2000 	ldr.w	r2, [r9]
 8013a38:	f003 0306 	and.w	r3, r3, #6
 8013a3c:	2b04      	cmp	r3, #4
 8013a3e:	bf08      	it	eq
 8013a40:	1aad      	subeq	r5, r5, r2
 8013a42:	68a3      	ldr	r3, [r4, #8]
 8013a44:	6922      	ldr	r2, [r4, #16]
 8013a46:	bf0c      	ite	eq
 8013a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a4c:	2500      	movne	r5, #0
 8013a4e:	4293      	cmp	r3, r2
 8013a50:	bfc4      	itt	gt
 8013a52:	1a9b      	subgt	r3, r3, r2
 8013a54:	18ed      	addgt	r5, r5, r3
 8013a56:	f04f 0900 	mov.w	r9, #0
 8013a5a:	341a      	adds	r4, #26
 8013a5c:	454d      	cmp	r5, r9
 8013a5e:	d11a      	bne.n	8013a96 <_printf_common+0xd6>
 8013a60:	2000      	movs	r0, #0
 8013a62:	e008      	b.n	8013a76 <_printf_common+0xb6>
 8013a64:	2301      	movs	r3, #1
 8013a66:	4652      	mov	r2, sl
 8013a68:	4639      	mov	r1, r7
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	47c0      	blx	r8
 8013a6e:	3001      	adds	r0, #1
 8013a70:	d103      	bne.n	8013a7a <_printf_common+0xba>
 8013a72:	f04f 30ff 	mov.w	r0, #4294967295
 8013a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a7a:	3501      	adds	r5, #1
 8013a7c:	e7c3      	b.n	8013a06 <_printf_common+0x46>
 8013a7e:	18e1      	adds	r1, r4, r3
 8013a80:	1c5a      	adds	r2, r3, #1
 8013a82:	2030      	movs	r0, #48	; 0x30
 8013a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a88:	4422      	add	r2, r4
 8013a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013a92:	3302      	adds	r3, #2
 8013a94:	e7c5      	b.n	8013a22 <_printf_common+0x62>
 8013a96:	2301      	movs	r3, #1
 8013a98:	4622      	mov	r2, r4
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	47c0      	blx	r8
 8013aa0:	3001      	adds	r0, #1
 8013aa2:	d0e6      	beq.n	8013a72 <_printf_common+0xb2>
 8013aa4:	f109 0901 	add.w	r9, r9, #1
 8013aa8:	e7d8      	b.n	8013a5c <_printf_common+0x9c>
	...

08013aac <_printf_i>:
 8013aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ab0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013ab4:	460c      	mov	r4, r1
 8013ab6:	7e09      	ldrb	r1, [r1, #24]
 8013ab8:	b085      	sub	sp, #20
 8013aba:	296e      	cmp	r1, #110	; 0x6e
 8013abc:	4617      	mov	r7, r2
 8013abe:	4606      	mov	r6, r0
 8013ac0:	4698      	mov	r8, r3
 8013ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ac4:	f000 80b3 	beq.w	8013c2e <_printf_i+0x182>
 8013ac8:	d822      	bhi.n	8013b10 <_printf_i+0x64>
 8013aca:	2963      	cmp	r1, #99	; 0x63
 8013acc:	d036      	beq.n	8013b3c <_printf_i+0x90>
 8013ace:	d80a      	bhi.n	8013ae6 <_printf_i+0x3a>
 8013ad0:	2900      	cmp	r1, #0
 8013ad2:	f000 80b9 	beq.w	8013c48 <_printf_i+0x19c>
 8013ad6:	2958      	cmp	r1, #88	; 0x58
 8013ad8:	f000 8083 	beq.w	8013be2 <_printf_i+0x136>
 8013adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ae0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013ae4:	e032      	b.n	8013b4c <_printf_i+0xa0>
 8013ae6:	2964      	cmp	r1, #100	; 0x64
 8013ae8:	d001      	beq.n	8013aee <_printf_i+0x42>
 8013aea:	2969      	cmp	r1, #105	; 0x69
 8013aec:	d1f6      	bne.n	8013adc <_printf_i+0x30>
 8013aee:	6820      	ldr	r0, [r4, #0]
 8013af0:	6813      	ldr	r3, [r2, #0]
 8013af2:	0605      	lsls	r5, r0, #24
 8013af4:	f103 0104 	add.w	r1, r3, #4
 8013af8:	d52a      	bpl.n	8013b50 <_printf_i+0xa4>
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	6011      	str	r1, [r2, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	da03      	bge.n	8013b0a <_printf_i+0x5e>
 8013b02:	222d      	movs	r2, #45	; 0x2d
 8013b04:	425b      	negs	r3, r3
 8013b06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013b0a:	486f      	ldr	r0, [pc, #444]	; (8013cc8 <_printf_i+0x21c>)
 8013b0c:	220a      	movs	r2, #10
 8013b0e:	e039      	b.n	8013b84 <_printf_i+0xd8>
 8013b10:	2973      	cmp	r1, #115	; 0x73
 8013b12:	f000 809d 	beq.w	8013c50 <_printf_i+0x1a4>
 8013b16:	d808      	bhi.n	8013b2a <_printf_i+0x7e>
 8013b18:	296f      	cmp	r1, #111	; 0x6f
 8013b1a:	d020      	beq.n	8013b5e <_printf_i+0xb2>
 8013b1c:	2970      	cmp	r1, #112	; 0x70
 8013b1e:	d1dd      	bne.n	8013adc <_printf_i+0x30>
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	f043 0320 	orr.w	r3, r3, #32
 8013b26:	6023      	str	r3, [r4, #0]
 8013b28:	e003      	b.n	8013b32 <_printf_i+0x86>
 8013b2a:	2975      	cmp	r1, #117	; 0x75
 8013b2c:	d017      	beq.n	8013b5e <_printf_i+0xb2>
 8013b2e:	2978      	cmp	r1, #120	; 0x78
 8013b30:	d1d4      	bne.n	8013adc <_printf_i+0x30>
 8013b32:	2378      	movs	r3, #120	; 0x78
 8013b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b38:	4864      	ldr	r0, [pc, #400]	; (8013ccc <_printf_i+0x220>)
 8013b3a:	e055      	b.n	8013be8 <_printf_i+0x13c>
 8013b3c:	6813      	ldr	r3, [r2, #0]
 8013b3e:	1d19      	adds	r1, r3, #4
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	6011      	str	r1, [r2, #0]
 8013b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	e08c      	b.n	8013c6a <_printf_i+0x1be>
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	6011      	str	r1, [r2, #0]
 8013b54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013b58:	bf18      	it	ne
 8013b5a:	b21b      	sxthne	r3, r3
 8013b5c:	e7cf      	b.n	8013afe <_printf_i+0x52>
 8013b5e:	6813      	ldr	r3, [r2, #0]
 8013b60:	6825      	ldr	r5, [r4, #0]
 8013b62:	1d18      	adds	r0, r3, #4
 8013b64:	6010      	str	r0, [r2, #0]
 8013b66:	0628      	lsls	r0, r5, #24
 8013b68:	d501      	bpl.n	8013b6e <_printf_i+0xc2>
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	e002      	b.n	8013b74 <_printf_i+0xc8>
 8013b6e:	0668      	lsls	r0, r5, #25
 8013b70:	d5fb      	bpl.n	8013b6a <_printf_i+0xbe>
 8013b72:	881b      	ldrh	r3, [r3, #0]
 8013b74:	4854      	ldr	r0, [pc, #336]	; (8013cc8 <_printf_i+0x21c>)
 8013b76:	296f      	cmp	r1, #111	; 0x6f
 8013b78:	bf14      	ite	ne
 8013b7a:	220a      	movne	r2, #10
 8013b7c:	2208      	moveq	r2, #8
 8013b7e:	2100      	movs	r1, #0
 8013b80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b84:	6865      	ldr	r5, [r4, #4]
 8013b86:	60a5      	str	r5, [r4, #8]
 8013b88:	2d00      	cmp	r5, #0
 8013b8a:	f2c0 8095 	blt.w	8013cb8 <_printf_i+0x20c>
 8013b8e:	6821      	ldr	r1, [r4, #0]
 8013b90:	f021 0104 	bic.w	r1, r1, #4
 8013b94:	6021      	str	r1, [r4, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d13d      	bne.n	8013c16 <_printf_i+0x16a>
 8013b9a:	2d00      	cmp	r5, #0
 8013b9c:	f040 808e 	bne.w	8013cbc <_printf_i+0x210>
 8013ba0:	4665      	mov	r5, ip
 8013ba2:	2a08      	cmp	r2, #8
 8013ba4:	d10b      	bne.n	8013bbe <_printf_i+0x112>
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	07db      	lsls	r3, r3, #31
 8013baa:	d508      	bpl.n	8013bbe <_printf_i+0x112>
 8013bac:	6923      	ldr	r3, [r4, #16]
 8013bae:	6862      	ldr	r2, [r4, #4]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	bfde      	ittt	le
 8013bb4:	2330      	movle	r3, #48	; 0x30
 8013bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013bba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013bbe:	ebac 0305 	sub.w	r3, ip, r5
 8013bc2:	6123      	str	r3, [r4, #16]
 8013bc4:	f8cd 8000 	str.w	r8, [sp]
 8013bc8:	463b      	mov	r3, r7
 8013bca:	aa03      	add	r2, sp, #12
 8013bcc:	4621      	mov	r1, r4
 8013bce:	4630      	mov	r0, r6
 8013bd0:	f7ff fef6 	bl	80139c0 <_printf_common>
 8013bd4:	3001      	adds	r0, #1
 8013bd6:	d14d      	bne.n	8013c74 <_printf_i+0x1c8>
 8013bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8013bdc:	b005      	add	sp, #20
 8013bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013be2:	4839      	ldr	r0, [pc, #228]	; (8013cc8 <_printf_i+0x21c>)
 8013be4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013be8:	6813      	ldr	r3, [r2, #0]
 8013bea:	6821      	ldr	r1, [r4, #0]
 8013bec:	1d1d      	adds	r5, r3, #4
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	6015      	str	r5, [r2, #0]
 8013bf2:	060a      	lsls	r2, r1, #24
 8013bf4:	d50b      	bpl.n	8013c0e <_printf_i+0x162>
 8013bf6:	07ca      	lsls	r2, r1, #31
 8013bf8:	bf44      	itt	mi
 8013bfa:	f041 0120 	orrmi.w	r1, r1, #32
 8013bfe:	6021      	strmi	r1, [r4, #0]
 8013c00:	b91b      	cbnz	r3, 8013c0a <_printf_i+0x15e>
 8013c02:	6822      	ldr	r2, [r4, #0]
 8013c04:	f022 0220 	bic.w	r2, r2, #32
 8013c08:	6022      	str	r2, [r4, #0]
 8013c0a:	2210      	movs	r2, #16
 8013c0c:	e7b7      	b.n	8013b7e <_printf_i+0xd2>
 8013c0e:	064d      	lsls	r5, r1, #25
 8013c10:	bf48      	it	mi
 8013c12:	b29b      	uxthmi	r3, r3
 8013c14:	e7ef      	b.n	8013bf6 <_printf_i+0x14a>
 8013c16:	4665      	mov	r5, ip
 8013c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c1c:	fb02 3311 	mls	r3, r2, r1, r3
 8013c20:	5cc3      	ldrb	r3, [r0, r3]
 8013c22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013c26:	460b      	mov	r3, r1
 8013c28:	2900      	cmp	r1, #0
 8013c2a:	d1f5      	bne.n	8013c18 <_printf_i+0x16c>
 8013c2c:	e7b9      	b.n	8013ba2 <_printf_i+0xf6>
 8013c2e:	6813      	ldr	r3, [r2, #0]
 8013c30:	6825      	ldr	r5, [r4, #0]
 8013c32:	6961      	ldr	r1, [r4, #20]
 8013c34:	1d18      	adds	r0, r3, #4
 8013c36:	6010      	str	r0, [r2, #0]
 8013c38:	0628      	lsls	r0, r5, #24
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	d501      	bpl.n	8013c42 <_printf_i+0x196>
 8013c3e:	6019      	str	r1, [r3, #0]
 8013c40:	e002      	b.n	8013c48 <_printf_i+0x19c>
 8013c42:	066a      	lsls	r2, r5, #25
 8013c44:	d5fb      	bpl.n	8013c3e <_printf_i+0x192>
 8013c46:	8019      	strh	r1, [r3, #0]
 8013c48:	2300      	movs	r3, #0
 8013c4a:	6123      	str	r3, [r4, #16]
 8013c4c:	4665      	mov	r5, ip
 8013c4e:	e7b9      	b.n	8013bc4 <_printf_i+0x118>
 8013c50:	6813      	ldr	r3, [r2, #0]
 8013c52:	1d19      	adds	r1, r3, #4
 8013c54:	6011      	str	r1, [r2, #0]
 8013c56:	681d      	ldr	r5, [r3, #0]
 8013c58:	6862      	ldr	r2, [r4, #4]
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	4628      	mov	r0, r5
 8013c5e:	f7ec faf7 	bl	8000250 <memchr>
 8013c62:	b108      	cbz	r0, 8013c68 <_printf_i+0x1bc>
 8013c64:	1b40      	subs	r0, r0, r5
 8013c66:	6060      	str	r0, [r4, #4]
 8013c68:	6863      	ldr	r3, [r4, #4]
 8013c6a:	6123      	str	r3, [r4, #16]
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c72:	e7a7      	b.n	8013bc4 <_printf_i+0x118>
 8013c74:	6923      	ldr	r3, [r4, #16]
 8013c76:	462a      	mov	r2, r5
 8013c78:	4639      	mov	r1, r7
 8013c7a:	4630      	mov	r0, r6
 8013c7c:	47c0      	blx	r8
 8013c7e:	3001      	adds	r0, #1
 8013c80:	d0aa      	beq.n	8013bd8 <_printf_i+0x12c>
 8013c82:	6823      	ldr	r3, [r4, #0]
 8013c84:	079b      	lsls	r3, r3, #30
 8013c86:	d413      	bmi.n	8013cb0 <_printf_i+0x204>
 8013c88:	68e0      	ldr	r0, [r4, #12]
 8013c8a:	9b03      	ldr	r3, [sp, #12]
 8013c8c:	4298      	cmp	r0, r3
 8013c8e:	bfb8      	it	lt
 8013c90:	4618      	movlt	r0, r3
 8013c92:	e7a3      	b.n	8013bdc <_printf_i+0x130>
 8013c94:	2301      	movs	r3, #1
 8013c96:	464a      	mov	r2, r9
 8013c98:	4639      	mov	r1, r7
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	47c0      	blx	r8
 8013c9e:	3001      	adds	r0, #1
 8013ca0:	d09a      	beq.n	8013bd8 <_printf_i+0x12c>
 8013ca2:	3501      	adds	r5, #1
 8013ca4:	68e3      	ldr	r3, [r4, #12]
 8013ca6:	9a03      	ldr	r2, [sp, #12]
 8013ca8:	1a9b      	subs	r3, r3, r2
 8013caa:	42ab      	cmp	r3, r5
 8013cac:	dcf2      	bgt.n	8013c94 <_printf_i+0x1e8>
 8013cae:	e7eb      	b.n	8013c88 <_printf_i+0x1dc>
 8013cb0:	2500      	movs	r5, #0
 8013cb2:	f104 0919 	add.w	r9, r4, #25
 8013cb6:	e7f5      	b.n	8013ca4 <_printf_i+0x1f8>
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d1ac      	bne.n	8013c16 <_printf_i+0x16a>
 8013cbc:	7803      	ldrb	r3, [r0, #0]
 8013cbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cc6:	e76c      	b.n	8013ba2 <_printf_i+0xf6>
 8013cc8:	080188fa 	.word	0x080188fa
 8013ccc:	0801890b 	.word	0x0801890b

08013cd0 <_scanf_float>:
 8013cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd4:	469a      	mov	sl, r3
 8013cd6:	688b      	ldr	r3, [r1, #8]
 8013cd8:	4616      	mov	r6, r2
 8013cda:	1e5a      	subs	r2, r3, #1
 8013cdc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013ce0:	b087      	sub	sp, #28
 8013ce2:	bf83      	ittte	hi
 8013ce4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013ce8:	189b      	addhi	r3, r3, r2
 8013cea:	9301      	strhi	r3, [sp, #4]
 8013cec:	2300      	movls	r3, #0
 8013cee:	bf86      	itte	hi
 8013cf0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013cf4:	608b      	strhi	r3, [r1, #8]
 8013cf6:	9301      	strls	r3, [sp, #4]
 8013cf8:	680b      	ldr	r3, [r1, #0]
 8013cfa:	4688      	mov	r8, r1
 8013cfc:	f04f 0b00 	mov.w	fp, #0
 8013d00:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013d04:	f848 3b1c 	str.w	r3, [r8], #28
 8013d08:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013d0c:	4607      	mov	r7, r0
 8013d0e:	460c      	mov	r4, r1
 8013d10:	4645      	mov	r5, r8
 8013d12:	465a      	mov	r2, fp
 8013d14:	46d9      	mov	r9, fp
 8013d16:	f8cd b008 	str.w	fp, [sp, #8]
 8013d1a:	68a1      	ldr	r1, [r4, #8]
 8013d1c:	b181      	cbz	r1, 8013d40 <_scanf_float+0x70>
 8013d1e:	6833      	ldr	r3, [r6, #0]
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	2b49      	cmp	r3, #73	; 0x49
 8013d24:	d071      	beq.n	8013e0a <_scanf_float+0x13a>
 8013d26:	d84d      	bhi.n	8013dc4 <_scanf_float+0xf4>
 8013d28:	2b39      	cmp	r3, #57	; 0x39
 8013d2a:	d840      	bhi.n	8013dae <_scanf_float+0xde>
 8013d2c:	2b31      	cmp	r3, #49	; 0x31
 8013d2e:	f080 8088 	bcs.w	8013e42 <_scanf_float+0x172>
 8013d32:	2b2d      	cmp	r3, #45	; 0x2d
 8013d34:	f000 8090 	beq.w	8013e58 <_scanf_float+0x188>
 8013d38:	d815      	bhi.n	8013d66 <_scanf_float+0x96>
 8013d3a:	2b2b      	cmp	r3, #43	; 0x2b
 8013d3c:	f000 808c 	beq.w	8013e58 <_scanf_float+0x188>
 8013d40:	f1b9 0f00 	cmp.w	r9, #0
 8013d44:	d003      	beq.n	8013d4e <_scanf_float+0x7e>
 8013d46:	6823      	ldr	r3, [r4, #0]
 8013d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013d4c:	6023      	str	r3, [r4, #0]
 8013d4e:	3a01      	subs	r2, #1
 8013d50:	2a01      	cmp	r2, #1
 8013d52:	f200 80ea 	bhi.w	8013f2a <_scanf_float+0x25a>
 8013d56:	4545      	cmp	r5, r8
 8013d58:	f200 80dc 	bhi.w	8013f14 <_scanf_float+0x244>
 8013d5c:	2601      	movs	r6, #1
 8013d5e:	4630      	mov	r0, r6
 8013d60:	b007      	add	sp, #28
 8013d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d66:	2b2e      	cmp	r3, #46	; 0x2e
 8013d68:	f000 809f 	beq.w	8013eaa <_scanf_float+0x1da>
 8013d6c:	2b30      	cmp	r3, #48	; 0x30
 8013d6e:	d1e7      	bne.n	8013d40 <_scanf_float+0x70>
 8013d70:	6820      	ldr	r0, [r4, #0]
 8013d72:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013d76:	d064      	beq.n	8013e42 <_scanf_float+0x172>
 8013d78:	9b01      	ldr	r3, [sp, #4]
 8013d7a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013d7e:	6020      	str	r0, [r4, #0]
 8013d80:	f109 0901 	add.w	r9, r9, #1
 8013d84:	b11b      	cbz	r3, 8013d8e <_scanf_float+0xbe>
 8013d86:	3b01      	subs	r3, #1
 8013d88:	3101      	adds	r1, #1
 8013d8a:	9301      	str	r3, [sp, #4]
 8013d8c:	60a1      	str	r1, [r4, #8]
 8013d8e:	68a3      	ldr	r3, [r4, #8]
 8013d90:	3b01      	subs	r3, #1
 8013d92:	60a3      	str	r3, [r4, #8]
 8013d94:	6923      	ldr	r3, [r4, #16]
 8013d96:	3301      	adds	r3, #1
 8013d98:	6123      	str	r3, [r4, #16]
 8013d9a:	6873      	ldr	r3, [r6, #4]
 8013d9c:	3b01      	subs	r3, #1
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	6073      	str	r3, [r6, #4]
 8013da2:	f340 80ac 	ble.w	8013efe <_scanf_float+0x22e>
 8013da6:	6833      	ldr	r3, [r6, #0]
 8013da8:	3301      	adds	r3, #1
 8013daa:	6033      	str	r3, [r6, #0]
 8013dac:	e7b5      	b.n	8013d1a <_scanf_float+0x4a>
 8013dae:	2b45      	cmp	r3, #69	; 0x45
 8013db0:	f000 8085 	beq.w	8013ebe <_scanf_float+0x1ee>
 8013db4:	2b46      	cmp	r3, #70	; 0x46
 8013db6:	d06a      	beq.n	8013e8e <_scanf_float+0x1be>
 8013db8:	2b41      	cmp	r3, #65	; 0x41
 8013dba:	d1c1      	bne.n	8013d40 <_scanf_float+0x70>
 8013dbc:	2a01      	cmp	r2, #1
 8013dbe:	d1bf      	bne.n	8013d40 <_scanf_float+0x70>
 8013dc0:	2202      	movs	r2, #2
 8013dc2:	e046      	b.n	8013e52 <_scanf_float+0x182>
 8013dc4:	2b65      	cmp	r3, #101	; 0x65
 8013dc6:	d07a      	beq.n	8013ebe <_scanf_float+0x1ee>
 8013dc8:	d818      	bhi.n	8013dfc <_scanf_float+0x12c>
 8013dca:	2b54      	cmp	r3, #84	; 0x54
 8013dcc:	d066      	beq.n	8013e9c <_scanf_float+0x1cc>
 8013dce:	d811      	bhi.n	8013df4 <_scanf_float+0x124>
 8013dd0:	2b4e      	cmp	r3, #78	; 0x4e
 8013dd2:	d1b5      	bne.n	8013d40 <_scanf_float+0x70>
 8013dd4:	2a00      	cmp	r2, #0
 8013dd6:	d146      	bne.n	8013e66 <_scanf_float+0x196>
 8013dd8:	f1b9 0f00 	cmp.w	r9, #0
 8013ddc:	d145      	bne.n	8013e6a <_scanf_float+0x19a>
 8013dde:	6821      	ldr	r1, [r4, #0]
 8013de0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013de4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013de8:	d13f      	bne.n	8013e6a <_scanf_float+0x19a>
 8013dea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013dee:	6021      	str	r1, [r4, #0]
 8013df0:	2201      	movs	r2, #1
 8013df2:	e02e      	b.n	8013e52 <_scanf_float+0x182>
 8013df4:	2b59      	cmp	r3, #89	; 0x59
 8013df6:	d01e      	beq.n	8013e36 <_scanf_float+0x166>
 8013df8:	2b61      	cmp	r3, #97	; 0x61
 8013dfa:	e7de      	b.n	8013dba <_scanf_float+0xea>
 8013dfc:	2b6e      	cmp	r3, #110	; 0x6e
 8013dfe:	d0e9      	beq.n	8013dd4 <_scanf_float+0x104>
 8013e00:	d815      	bhi.n	8013e2e <_scanf_float+0x15e>
 8013e02:	2b66      	cmp	r3, #102	; 0x66
 8013e04:	d043      	beq.n	8013e8e <_scanf_float+0x1be>
 8013e06:	2b69      	cmp	r3, #105	; 0x69
 8013e08:	d19a      	bne.n	8013d40 <_scanf_float+0x70>
 8013e0a:	f1bb 0f00 	cmp.w	fp, #0
 8013e0e:	d138      	bne.n	8013e82 <_scanf_float+0x1b2>
 8013e10:	f1b9 0f00 	cmp.w	r9, #0
 8013e14:	d197      	bne.n	8013d46 <_scanf_float+0x76>
 8013e16:	6821      	ldr	r1, [r4, #0]
 8013e18:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013e1c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013e20:	d195      	bne.n	8013d4e <_scanf_float+0x7e>
 8013e22:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013e26:	6021      	str	r1, [r4, #0]
 8013e28:	f04f 0b01 	mov.w	fp, #1
 8013e2c:	e011      	b.n	8013e52 <_scanf_float+0x182>
 8013e2e:	2b74      	cmp	r3, #116	; 0x74
 8013e30:	d034      	beq.n	8013e9c <_scanf_float+0x1cc>
 8013e32:	2b79      	cmp	r3, #121	; 0x79
 8013e34:	d184      	bne.n	8013d40 <_scanf_float+0x70>
 8013e36:	f1bb 0f07 	cmp.w	fp, #7
 8013e3a:	d181      	bne.n	8013d40 <_scanf_float+0x70>
 8013e3c:	f04f 0b08 	mov.w	fp, #8
 8013e40:	e007      	b.n	8013e52 <_scanf_float+0x182>
 8013e42:	eb12 0f0b 	cmn.w	r2, fp
 8013e46:	f47f af7b 	bne.w	8013d40 <_scanf_float+0x70>
 8013e4a:	6821      	ldr	r1, [r4, #0]
 8013e4c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013e50:	6021      	str	r1, [r4, #0]
 8013e52:	702b      	strb	r3, [r5, #0]
 8013e54:	3501      	adds	r5, #1
 8013e56:	e79a      	b.n	8013d8e <_scanf_float+0xbe>
 8013e58:	6821      	ldr	r1, [r4, #0]
 8013e5a:	0608      	lsls	r0, r1, #24
 8013e5c:	f57f af70 	bpl.w	8013d40 <_scanf_float+0x70>
 8013e60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013e64:	e7f4      	b.n	8013e50 <_scanf_float+0x180>
 8013e66:	2a02      	cmp	r2, #2
 8013e68:	d047      	beq.n	8013efa <_scanf_float+0x22a>
 8013e6a:	f1bb 0f01 	cmp.w	fp, #1
 8013e6e:	d003      	beq.n	8013e78 <_scanf_float+0x1a8>
 8013e70:	f1bb 0f04 	cmp.w	fp, #4
 8013e74:	f47f af64 	bne.w	8013d40 <_scanf_float+0x70>
 8013e78:	f10b 0b01 	add.w	fp, fp, #1
 8013e7c:	fa5f fb8b 	uxtb.w	fp, fp
 8013e80:	e7e7      	b.n	8013e52 <_scanf_float+0x182>
 8013e82:	f1bb 0f03 	cmp.w	fp, #3
 8013e86:	d0f7      	beq.n	8013e78 <_scanf_float+0x1a8>
 8013e88:	f1bb 0f05 	cmp.w	fp, #5
 8013e8c:	e7f2      	b.n	8013e74 <_scanf_float+0x1a4>
 8013e8e:	f1bb 0f02 	cmp.w	fp, #2
 8013e92:	f47f af55 	bne.w	8013d40 <_scanf_float+0x70>
 8013e96:	f04f 0b03 	mov.w	fp, #3
 8013e9a:	e7da      	b.n	8013e52 <_scanf_float+0x182>
 8013e9c:	f1bb 0f06 	cmp.w	fp, #6
 8013ea0:	f47f af4e 	bne.w	8013d40 <_scanf_float+0x70>
 8013ea4:	f04f 0b07 	mov.w	fp, #7
 8013ea8:	e7d3      	b.n	8013e52 <_scanf_float+0x182>
 8013eaa:	6821      	ldr	r1, [r4, #0]
 8013eac:	0588      	lsls	r0, r1, #22
 8013eae:	f57f af47 	bpl.w	8013d40 <_scanf_float+0x70>
 8013eb2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013eb6:	6021      	str	r1, [r4, #0]
 8013eb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8013ebc:	e7c9      	b.n	8013e52 <_scanf_float+0x182>
 8013ebe:	6821      	ldr	r1, [r4, #0]
 8013ec0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013ec4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013ec8:	d006      	beq.n	8013ed8 <_scanf_float+0x208>
 8013eca:	0548      	lsls	r0, r1, #21
 8013ecc:	f57f af38 	bpl.w	8013d40 <_scanf_float+0x70>
 8013ed0:	f1b9 0f00 	cmp.w	r9, #0
 8013ed4:	f43f af3b 	beq.w	8013d4e <_scanf_float+0x7e>
 8013ed8:	0588      	lsls	r0, r1, #22
 8013eda:	bf58      	it	pl
 8013edc:	9802      	ldrpl	r0, [sp, #8]
 8013ede:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013ee2:	bf58      	it	pl
 8013ee4:	eba9 0000 	subpl.w	r0, r9, r0
 8013ee8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013eec:	bf58      	it	pl
 8013eee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013ef2:	6021      	str	r1, [r4, #0]
 8013ef4:	f04f 0900 	mov.w	r9, #0
 8013ef8:	e7ab      	b.n	8013e52 <_scanf_float+0x182>
 8013efa:	2203      	movs	r2, #3
 8013efc:	e7a9      	b.n	8013e52 <_scanf_float+0x182>
 8013efe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013f02:	9205      	str	r2, [sp, #20]
 8013f04:	4631      	mov	r1, r6
 8013f06:	4638      	mov	r0, r7
 8013f08:	4798      	blx	r3
 8013f0a:	9a05      	ldr	r2, [sp, #20]
 8013f0c:	2800      	cmp	r0, #0
 8013f0e:	f43f af04 	beq.w	8013d1a <_scanf_float+0x4a>
 8013f12:	e715      	b.n	8013d40 <_scanf_float+0x70>
 8013f14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013f1c:	4632      	mov	r2, r6
 8013f1e:	4638      	mov	r0, r7
 8013f20:	4798      	blx	r3
 8013f22:	6923      	ldr	r3, [r4, #16]
 8013f24:	3b01      	subs	r3, #1
 8013f26:	6123      	str	r3, [r4, #16]
 8013f28:	e715      	b.n	8013d56 <_scanf_float+0x86>
 8013f2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013f2e:	2b06      	cmp	r3, #6
 8013f30:	d80a      	bhi.n	8013f48 <_scanf_float+0x278>
 8013f32:	f1bb 0f02 	cmp.w	fp, #2
 8013f36:	d966      	bls.n	8014006 <_scanf_float+0x336>
 8013f38:	f1ab 0b03 	sub.w	fp, fp, #3
 8013f3c:	fa5f fb8b 	uxtb.w	fp, fp
 8013f40:	eba5 0b0b 	sub.w	fp, r5, fp
 8013f44:	455d      	cmp	r5, fp
 8013f46:	d149      	bne.n	8013fdc <_scanf_float+0x30c>
 8013f48:	6823      	ldr	r3, [r4, #0]
 8013f4a:	05da      	lsls	r2, r3, #23
 8013f4c:	d51f      	bpl.n	8013f8e <_scanf_float+0x2be>
 8013f4e:	055b      	lsls	r3, r3, #21
 8013f50:	d466      	bmi.n	8014020 <_scanf_float+0x350>
 8013f52:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013f56:	6923      	ldr	r3, [r4, #16]
 8013f58:	2965      	cmp	r1, #101	; 0x65
 8013f5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f5e:	f105 3bff 	add.w	fp, r5, #4294967295
 8013f62:	6123      	str	r3, [r4, #16]
 8013f64:	d00d      	beq.n	8013f82 <_scanf_float+0x2b2>
 8013f66:	2945      	cmp	r1, #69	; 0x45
 8013f68:	d00b      	beq.n	8013f82 <_scanf_float+0x2b2>
 8013f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f6e:	4632      	mov	r2, r6
 8013f70:	4638      	mov	r0, r7
 8013f72:	4798      	blx	r3
 8013f74:	6923      	ldr	r3, [r4, #16]
 8013f76:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013f7a:	3b01      	subs	r3, #1
 8013f7c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013f80:	6123      	str	r3, [r4, #16]
 8013f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f86:	4632      	mov	r2, r6
 8013f88:	4638      	mov	r0, r7
 8013f8a:	4798      	blx	r3
 8013f8c:	465d      	mov	r5, fp
 8013f8e:	6826      	ldr	r6, [r4, #0]
 8013f90:	f016 0610 	ands.w	r6, r6, #16
 8013f94:	d170      	bne.n	8014078 <_scanf_float+0x3a8>
 8013f96:	702e      	strb	r6, [r5, #0]
 8013f98:	6823      	ldr	r3, [r4, #0]
 8013f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013fa2:	d140      	bne.n	8014026 <_scanf_float+0x356>
 8013fa4:	9b02      	ldr	r3, [sp, #8]
 8013fa6:	eba9 0303 	sub.w	r3, r9, r3
 8013faa:	425a      	negs	r2, r3
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d147      	bne.n	8014040 <_scanf_float+0x370>
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	4638      	mov	r0, r7
 8013fb4:	4641      	mov	r1, r8
 8013fb6:	f000 fe83 	bl	8014cc0 <_strtod_r>
 8013fba:	6820      	ldr	r0, [r4, #0]
 8013fbc:	f8da 3000 	ldr.w	r3, [sl]
 8013fc0:	f010 0f02 	tst.w	r0, #2
 8013fc4:	f103 0204 	add.w	r2, r3, #4
 8013fc8:	f8ca 2000 	str.w	r2, [sl]
 8013fcc:	d043      	beq.n	8014056 <_scanf_float+0x386>
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	ed83 0b00 	vstr	d0, [r3]
 8013fd4:	68e3      	ldr	r3, [r4, #12]
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	60e3      	str	r3, [r4, #12]
 8013fda:	e6c0      	b.n	8013d5e <_scanf_float+0x8e>
 8013fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013fe0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013fe4:	4632      	mov	r2, r6
 8013fe6:	4638      	mov	r0, r7
 8013fe8:	4798      	blx	r3
 8013fea:	6923      	ldr	r3, [r4, #16]
 8013fec:	3b01      	subs	r3, #1
 8013fee:	6123      	str	r3, [r4, #16]
 8013ff0:	e7a8      	b.n	8013f44 <_scanf_float+0x274>
 8013ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ff6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013ffa:	4632      	mov	r2, r6
 8013ffc:	4638      	mov	r0, r7
 8013ffe:	4798      	blx	r3
 8014000:	6923      	ldr	r3, [r4, #16]
 8014002:	3b01      	subs	r3, #1
 8014004:	6123      	str	r3, [r4, #16]
 8014006:	4545      	cmp	r5, r8
 8014008:	d8f3      	bhi.n	8013ff2 <_scanf_float+0x322>
 801400a:	e6a7      	b.n	8013d5c <_scanf_float+0x8c>
 801400c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014010:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014014:	4632      	mov	r2, r6
 8014016:	4638      	mov	r0, r7
 8014018:	4798      	blx	r3
 801401a:	6923      	ldr	r3, [r4, #16]
 801401c:	3b01      	subs	r3, #1
 801401e:	6123      	str	r3, [r4, #16]
 8014020:	4545      	cmp	r5, r8
 8014022:	d8f3      	bhi.n	801400c <_scanf_float+0x33c>
 8014024:	e69a      	b.n	8013d5c <_scanf_float+0x8c>
 8014026:	9b03      	ldr	r3, [sp, #12]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d0c1      	beq.n	8013fb0 <_scanf_float+0x2e0>
 801402c:	9904      	ldr	r1, [sp, #16]
 801402e:	230a      	movs	r3, #10
 8014030:	4632      	mov	r2, r6
 8014032:	3101      	adds	r1, #1
 8014034:	4638      	mov	r0, r7
 8014036:	f000 fecf 	bl	8014dd8 <_strtol_r>
 801403a:	9b03      	ldr	r3, [sp, #12]
 801403c:	9d04      	ldr	r5, [sp, #16]
 801403e:	1ac2      	subs	r2, r0, r3
 8014040:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014044:	429d      	cmp	r5, r3
 8014046:	bf28      	it	cs
 8014048:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801404c:	490b      	ldr	r1, [pc, #44]	; (801407c <_scanf_float+0x3ac>)
 801404e:	4628      	mov	r0, r5
 8014050:	f000 f834 	bl	80140bc <siprintf>
 8014054:	e7ac      	b.n	8013fb0 <_scanf_float+0x2e0>
 8014056:	f010 0004 	ands.w	r0, r0, #4
 801405a:	d1b8      	bne.n	8013fce <_scanf_float+0x2fe>
 801405c:	eeb4 0b40 	vcmp.f64	d0, d0
 8014060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014064:	681d      	ldr	r5, [r3, #0]
 8014066:	d704      	bvc.n	8014072 <_scanf_float+0x3a2>
 8014068:	f000 f822 	bl	80140b0 <nanf>
 801406c:	ed85 0a00 	vstr	s0, [r5]
 8014070:	e7b0      	b.n	8013fd4 <_scanf_float+0x304>
 8014072:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014076:	e7f9      	b.n	801406c <_scanf_float+0x39c>
 8014078:	2600      	movs	r6, #0
 801407a:	e670      	b.n	8013d5e <_scanf_float+0x8e>
 801407c:	0801891c 	.word	0x0801891c

08014080 <iprintf>:
 8014080:	b40f      	push	{r0, r1, r2, r3}
 8014082:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <iprintf+0x2c>)
 8014084:	b513      	push	{r0, r1, r4, lr}
 8014086:	681c      	ldr	r4, [r3, #0]
 8014088:	b124      	cbz	r4, 8014094 <iprintf+0x14>
 801408a:	69a3      	ldr	r3, [r4, #24]
 801408c:	b913      	cbnz	r3, 8014094 <iprintf+0x14>
 801408e:	4620      	mov	r0, r4
 8014090:	f001 fcce 	bl	8015a30 <__sinit>
 8014094:	ab05      	add	r3, sp, #20
 8014096:	9a04      	ldr	r2, [sp, #16]
 8014098:	68a1      	ldr	r1, [r4, #8]
 801409a:	9301      	str	r3, [sp, #4]
 801409c:	4620      	mov	r0, r4
 801409e:	f002 fed7 	bl	8016e50 <_vfiprintf_r>
 80140a2:	b002      	add	sp, #8
 80140a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140a8:	b004      	add	sp, #16
 80140aa:	4770      	bx	lr
 80140ac:	200001a8 	.word	0x200001a8

080140b0 <nanf>:
 80140b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140b8 <nanf+0x8>
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop
 80140b8:	7fc00000 	.word	0x7fc00000

080140bc <siprintf>:
 80140bc:	b40e      	push	{r1, r2, r3}
 80140be:	b500      	push	{lr}
 80140c0:	b09c      	sub	sp, #112	; 0x70
 80140c2:	ab1d      	add	r3, sp, #116	; 0x74
 80140c4:	9002      	str	r0, [sp, #8]
 80140c6:	9006      	str	r0, [sp, #24]
 80140c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80140cc:	4809      	ldr	r0, [pc, #36]	; (80140f4 <siprintf+0x38>)
 80140ce:	9107      	str	r1, [sp, #28]
 80140d0:	9104      	str	r1, [sp, #16]
 80140d2:	4909      	ldr	r1, [pc, #36]	; (80140f8 <siprintf+0x3c>)
 80140d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80140d8:	9105      	str	r1, [sp, #20]
 80140da:	6800      	ldr	r0, [r0, #0]
 80140dc:	9301      	str	r3, [sp, #4]
 80140de:	a902      	add	r1, sp, #8
 80140e0:	f002 fd94 	bl	8016c0c <_svfiprintf_r>
 80140e4:	9b02      	ldr	r3, [sp, #8]
 80140e6:	2200      	movs	r2, #0
 80140e8:	701a      	strb	r2, [r3, #0]
 80140ea:	b01c      	add	sp, #112	; 0x70
 80140ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80140f0:	b003      	add	sp, #12
 80140f2:	4770      	bx	lr
 80140f4:	200001a8 	.word	0x200001a8
 80140f8:	ffff0208 	.word	0xffff0208

080140fc <sulp>:
 80140fc:	b570      	push	{r4, r5, r6, lr}
 80140fe:	4604      	mov	r4, r0
 8014100:	460d      	mov	r5, r1
 8014102:	4616      	mov	r6, r2
 8014104:	ec45 4b10 	vmov	d0, r4, r5
 8014108:	f002 fb3c 	bl	8016784 <__ulp>
 801410c:	b17e      	cbz	r6, 801412e <sulp+0x32>
 801410e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014116:	2b00      	cmp	r3, #0
 8014118:	dd09      	ble.n	801412e <sulp+0x32>
 801411a:	051b      	lsls	r3, r3, #20
 801411c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8014120:	2000      	movs	r0, #0
 8014122:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8014126:	ec41 0b17 	vmov	d7, r0, r1
 801412a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801412e:	bd70      	pop	{r4, r5, r6, pc}

08014130 <_strtod_l>:
 8014130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014134:	ed2d 8b0c 	vpush	{d8-d13}
 8014138:	4698      	mov	r8, r3
 801413a:	b09d      	sub	sp, #116	; 0x74
 801413c:	2300      	movs	r3, #0
 801413e:	4604      	mov	r4, r0
 8014140:	4640      	mov	r0, r8
 8014142:	460e      	mov	r6, r1
 8014144:	9214      	str	r2, [sp, #80]	; 0x50
 8014146:	9318      	str	r3, [sp, #96]	; 0x60
 8014148:	f002 f825 	bl	8016196 <__localeconv_l>
 801414c:	4681      	mov	r9, r0
 801414e:	6800      	ldr	r0, [r0, #0]
 8014150:	f7ec f876 	bl	8000240 <strlen>
 8014154:	f04f 0a00 	mov.w	sl, #0
 8014158:	4607      	mov	r7, r0
 801415a:	f04f 0b00 	mov.w	fp, #0
 801415e:	9617      	str	r6, [sp, #92]	; 0x5c
 8014160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014162:	781a      	ldrb	r2, [r3, #0]
 8014164:	2a0d      	cmp	r2, #13
 8014166:	d834      	bhi.n	80141d2 <_strtod_l+0xa2>
 8014168:	2a09      	cmp	r2, #9
 801416a:	d238      	bcs.n	80141de <_strtod_l+0xae>
 801416c:	2a00      	cmp	r2, #0
 801416e:	d040      	beq.n	80141f2 <_strtod_l+0xc2>
 8014170:	2300      	movs	r3, #0
 8014172:	930d      	str	r3, [sp, #52]	; 0x34
 8014174:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014176:	782b      	ldrb	r3, [r5, #0]
 8014178:	2b30      	cmp	r3, #48	; 0x30
 801417a:	f040 80b3 	bne.w	80142e4 <_strtod_l+0x1b4>
 801417e:	786b      	ldrb	r3, [r5, #1]
 8014180:	2b58      	cmp	r3, #88	; 0x58
 8014182:	d001      	beq.n	8014188 <_strtod_l+0x58>
 8014184:	2b78      	cmp	r3, #120	; 0x78
 8014186:	d169      	bne.n	801425c <_strtod_l+0x12c>
 8014188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801418a:	9301      	str	r3, [sp, #4]
 801418c:	ab18      	add	r3, sp, #96	; 0x60
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	f8cd 8008 	str.w	r8, [sp, #8]
 8014194:	ab19      	add	r3, sp, #100	; 0x64
 8014196:	4a8f      	ldr	r2, [pc, #572]	; (80143d4 <_strtod_l+0x2a4>)
 8014198:	a917      	add	r1, sp, #92	; 0x5c
 801419a:	4620      	mov	r0, r4
 801419c:	f001 fd21 	bl	8015be2 <__gethex>
 80141a0:	f010 0607 	ands.w	r6, r0, #7
 80141a4:	4607      	mov	r7, r0
 80141a6:	d005      	beq.n	80141b4 <_strtod_l+0x84>
 80141a8:	2e06      	cmp	r6, #6
 80141aa:	d12c      	bne.n	8014206 <_strtod_l+0xd6>
 80141ac:	3501      	adds	r5, #1
 80141ae:	2300      	movs	r3, #0
 80141b0:	9517      	str	r5, [sp, #92]	; 0x5c
 80141b2:	930d      	str	r3, [sp, #52]	; 0x34
 80141b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	f040 855e 	bne.w	8014c78 <_strtod_l+0xb48>
 80141bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141be:	b1eb      	cbz	r3, 80141fc <_strtod_l+0xcc>
 80141c0:	ec4b ab17 	vmov	d7, sl, fp
 80141c4:	eeb1 0b47 	vneg.f64	d0, d7
 80141c8:	b01d      	add	sp, #116	; 0x74
 80141ca:	ecbd 8b0c 	vpop	{d8-d13}
 80141ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141d2:	2a2b      	cmp	r2, #43	; 0x2b
 80141d4:	d015      	beq.n	8014202 <_strtod_l+0xd2>
 80141d6:	2a2d      	cmp	r2, #45	; 0x2d
 80141d8:	d004      	beq.n	80141e4 <_strtod_l+0xb4>
 80141da:	2a20      	cmp	r2, #32
 80141dc:	d1c8      	bne.n	8014170 <_strtod_l+0x40>
 80141de:	3301      	adds	r3, #1
 80141e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80141e2:	e7bd      	b.n	8014160 <_strtod_l+0x30>
 80141e4:	2201      	movs	r2, #1
 80141e6:	920d      	str	r2, [sp, #52]	; 0x34
 80141e8:	1c5a      	adds	r2, r3, #1
 80141ea:	9217      	str	r2, [sp, #92]	; 0x5c
 80141ec:	785b      	ldrb	r3, [r3, #1]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d1c0      	bne.n	8014174 <_strtod_l+0x44>
 80141f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80141f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	f040 853c 	bne.w	8014c74 <_strtod_l+0xb44>
 80141fc:	ec4b ab10 	vmov	d0, sl, fp
 8014200:	e7e2      	b.n	80141c8 <_strtod_l+0x98>
 8014202:	2200      	movs	r2, #0
 8014204:	e7ef      	b.n	80141e6 <_strtod_l+0xb6>
 8014206:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014208:	b13a      	cbz	r2, 801421a <_strtod_l+0xea>
 801420a:	2135      	movs	r1, #53	; 0x35
 801420c:	a81a      	add	r0, sp, #104	; 0x68
 801420e:	f002 fbb2 	bl	8016976 <__copybits>
 8014212:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014214:	4620      	mov	r0, r4
 8014216:	f002 f81d 	bl	8016254 <_Bfree>
 801421a:	3e01      	subs	r6, #1
 801421c:	2e04      	cmp	r6, #4
 801421e:	d806      	bhi.n	801422e <_strtod_l+0xfe>
 8014220:	e8df f006 	tbb	[pc, r6]
 8014224:	1714030a 	.word	0x1714030a
 8014228:	0a          	.byte	0x0a
 8014229:	00          	.byte	0x00
 801422a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801422e:	073b      	lsls	r3, r7, #28
 8014230:	d5c0      	bpl.n	80141b4 <_strtod_l+0x84>
 8014232:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014236:	e7bd      	b.n	80141b4 <_strtod_l+0x84>
 8014238:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801423c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801423e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014242:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014246:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801424a:	e7f0      	b.n	801422e <_strtod_l+0xfe>
 801424c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80143d8 <_strtod_l+0x2a8>
 8014250:	e7ed      	b.n	801422e <_strtod_l+0xfe>
 8014252:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014256:	f04f 3aff 	mov.w	sl, #4294967295
 801425a:	e7e8      	b.n	801422e <_strtod_l+0xfe>
 801425c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801425e:	1c5a      	adds	r2, r3, #1
 8014260:	9217      	str	r2, [sp, #92]	; 0x5c
 8014262:	785b      	ldrb	r3, [r3, #1]
 8014264:	2b30      	cmp	r3, #48	; 0x30
 8014266:	d0f9      	beq.n	801425c <_strtod_l+0x12c>
 8014268:	2b00      	cmp	r3, #0
 801426a:	d0a3      	beq.n	80141b4 <_strtod_l+0x84>
 801426c:	2301      	movs	r3, #1
 801426e:	930a      	str	r3, [sp, #40]	; 0x28
 8014270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014272:	930c      	str	r3, [sp, #48]	; 0x30
 8014274:	2300      	movs	r3, #0
 8014276:	9306      	str	r3, [sp, #24]
 8014278:	9308      	str	r3, [sp, #32]
 801427a:	461d      	mov	r5, r3
 801427c:	220a      	movs	r2, #10
 801427e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014280:	f890 8000 	ldrb.w	r8, [r0]
 8014284:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8014288:	b2d9      	uxtb	r1, r3
 801428a:	2909      	cmp	r1, #9
 801428c:	d92c      	bls.n	80142e8 <_strtod_l+0x1b8>
 801428e:	463a      	mov	r2, r7
 8014290:	f8d9 1000 	ldr.w	r1, [r9]
 8014294:	f002 ff45 	bl	8017122 <strncmp>
 8014298:	2800      	cmp	r0, #0
 801429a:	d035      	beq.n	8014308 <_strtod_l+0x1d8>
 801429c:	2000      	movs	r0, #0
 801429e:	4642      	mov	r2, r8
 80142a0:	462b      	mov	r3, r5
 80142a2:	4601      	mov	r1, r0
 80142a4:	9004      	str	r0, [sp, #16]
 80142a6:	2a65      	cmp	r2, #101	; 0x65
 80142a8:	d001      	beq.n	80142ae <_strtod_l+0x17e>
 80142aa:	2a45      	cmp	r2, #69	; 0x45
 80142ac:	d117      	bne.n	80142de <_strtod_l+0x1ae>
 80142ae:	b923      	cbnz	r3, 80142ba <_strtod_l+0x18a>
 80142b0:	b910      	cbnz	r0, 80142b8 <_strtod_l+0x188>
 80142b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d09c      	beq.n	80141f2 <_strtod_l+0xc2>
 80142b8:	2300      	movs	r3, #0
 80142ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80142bc:	1c72      	adds	r2, r6, #1
 80142be:	9217      	str	r2, [sp, #92]	; 0x5c
 80142c0:	7872      	ldrb	r2, [r6, #1]
 80142c2:	2a2b      	cmp	r2, #43	; 0x2b
 80142c4:	f000 8082 	beq.w	80143cc <_strtod_l+0x29c>
 80142c8:	2a2d      	cmp	r2, #45	; 0x2d
 80142ca:	d079      	beq.n	80143c0 <_strtod_l+0x290>
 80142cc:	f04f 0e00 	mov.w	lr, #0
 80142d0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80142d4:	f1bc 0f09 	cmp.w	ip, #9
 80142d8:	f240 8086 	bls.w	80143e8 <_strtod_l+0x2b8>
 80142dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80142de:	f04f 0800 	mov.w	r8, #0
 80142e2:	e0a8      	b.n	8014436 <_strtod_l+0x306>
 80142e4:	2300      	movs	r3, #0
 80142e6:	e7c2      	b.n	801426e <_strtod_l+0x13e>
 80142e8:	2d08      	cmp	r5, #8
 80142ea:	bfd5      	itete	le
 80142ec:	9908      	ldrle	r1, [sp, #32]
 80142ee:	9906      	ldrgt	r1, [sp, #24]
 80142f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80142f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80142f8:	f100 0001 	add.w	r0, r0, #1
 80142fc:	bfd4      	ite	le
 80142fe:	9308      	strle	r3, [sp, #32]
 8014300:	9306      	strgt	r3, [sp, #24]
 8014302:	3501      	adds	r5, #1
 8014304:	9017      	str	r0, [sp, #92]	; 0x5c
 8014306:	e7ba      	b.n	801427e <_strtod_l+0x14e>
 8014308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801430a:	19da      	adds	r2, r3, r7
 801430c:	9217      	str	r2, [sp, #92]	; 0x5c
 801430e:	5dda      	ldrb	r2, [r3, r7]
 8014310:	2d00      	cmp	r5, #0
 8014312:	d038      	beq.n	8014386 <_strtod_l+0x256>
 8014314:	4601      	mov	r1, r0
 8014316:	462b      	mov	r3, r5
 8014318:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801431c:	2f09      	cmp	r7, #9
 801431e:	d913      	bls.n	8014348 <_strtod_l+0x218>
 8014320:	2701      	movs	r7, #1
 8014322:	9704      	str	r7, [sp, #16]
 8014324:	e7bf      	b.n	80142a6 <_strtod_l+0x176>
 8014326:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014328:	1c5a      	adds	r2, r3, #1
 801432a:	9217      	str	r2, [sp, #92]	; 0x5c
 801432c:	785a      	ldrb	r2, [r3, #1]
 801432e:	3001      	adds	r0, #1
 8014330:	2a30      	cmp	r2, #48	; 0x30
 8014332:	d0f8      	beq.n	8014326 <_strtod_l+0x1f6>
 8014334:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014338:	2b08      	cmp	r3, #8
 801433a:	f200 84a2 	bhi.w	8014c82 <_strtod_l+0xb52>
 801433e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014340:	930c      	str	r3, [sp, #48]	; 0x30
 8014342:	4601      	mov	r1, r0
 8014344:	2000      	movs	r0, #0
 8014346:	4603      	mov	r3, r0
 8014348:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 801434c:	f100 0701 	add.w	r7, r0, #1
 8014350:	d013      	beq.n	801437a <_strtod_l+0x24a>
 8014352:	4439      	add	r1, r7
 8014354:	eb00 0e03 	add.w	lr, r0, r3
 8014358:	461f      	mov	r7, r3
 801435a:	f04f 0c0a 	mov.w	ip, #10
 801435e:	45be      	cmp	lr, r7
 8014360:	d113      	bne.n	801438a <_strtod_l+0x25a>
 8014362:	181f      	adds	r7, r3, r0
 8014364:	2f08      	cmp	r7, #8
 8014366:	f103 0301 	add.w	r3, r3, #1
 801436a:	4403      	add	r3, r0
 801436c:	dc1d      	bgt.n	80143aa <_strtod_l+0x27a>
 801436e:	9a08      	ldr	r2, [sp, #32]
 8014370:	200a      	movs	r0, #10
 8014372:	fb00 8202 	mla	r2, r0, r2, r8
 8014376:	9208      	str	r2, [sp, #32]
 8014378:	2700      	movs	r7, #0
 801437a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801437c:	1c50      	adds	r0, r2, #1
 801437e:	9017      	str	r0, [sp, #92]	; 0x5c
 8014380:	7852      	ldrb	r2, [r2, #1]
 8014382:	4638      	mov	r0, r7
 8014384:	e7c8      	b.n	8014318 <_strtod_l+0x1e8>
 8014386:	4628      	mov	r0, r5
 8014388:	e7d2      	b.n	8014330 <_strtod_l+0x200>
 801438a:	2f08      	cmp	r7, #8
 801438c:	f107 0701 	add.w	r7, r7, #1
 8014390:	dc04      	bgt.n	801439c <_strtod_l+0x26c>
 8014392:	9a08      	ldr	r2, [sp, #32]
 8014394:	fb0c f202 	mul.w	r2, ip, r2
 8014398:	9208      	str	r2, [sp, #32]
 801439a:	e7e0      	b.n	801435e <_strtod_l+0x22e>
 801439c:	2f10      	cmp	r7, #16
 801439e:	bfde      	ittt	le
 80143a0:	9a06      	ldrle	r2, [sp, #24]
 80143a2:	fb0c f202 	mulle.w	r2, ip, r2
 80143a6:	9206      	strle	r2, [sp, #24]
 80143a8:	e7d9      	b.n	801435e <_strtod_l+0x22e>
 80143aa:	2b10      	cmp	r3, #16
 80143ac:	bfdf      	itttt	le
 80143ae:	9a06      	ldrle	r2, [sp, #24]
 80143b0:	200a      	movle	r0, #10
 80143b2:	fb00 8202 	mlale	r2, r0, r2, r8
 80143b6:	9206      	strle	r2, [sp, #24]
 80143b8:	e7de      	b.n	8014378 <_strtod_l+0x248>
 80143ba:	2301      	movs	r3, #1
 80143bc:	9304      	str	r3, [sp, #16]
 80143be:	e777      	b.n	80142b0 <_strtod_l+0x180>
 80143c0:	f04f 0e01 	mov.w	lr, #1
 80143c4:	1cb2      	adds	r2, r6, #2
 80143c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80143c8:	78b2      	ldrb	r2, [r6, #2]
 80143ca:	e781      	b.n	80142d0 <_strtod_l+0x1a0>
 80143cc:	f04f 0e00 	mov.w	lr, #0
 80143d0:	e7f8      	b.n	80143c4 <_strtod_l+0x294>
 80143d2:	bf00      	nop
 80143d4:	08018924 	.word	0x08018924
 80143d8:	7ff00000 	.word	0x7ff00000
 80143dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80143de:	f102 0c01 	add.w	ip, r2, #1
 80143e2:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80143e6:	7852      	ldrb	r2, [r2, #1]
 80143e8:	2a30      	cmp	r2, #48	; 0x30
 80143ea:	d0f7      	beq.n	80143dc <_strtod_l+0x2ac>
 80143ec:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80143f0:	f1bc 0f08 	cmp.w	ip, #8
 80143f4:	f63f af73 	bhi.w	80142de <_strtod_l+0x1ae>
 80143f8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80143fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80143fe:	920e      	str	r2, [sp, #56]	; 0x38
 8014400:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014402:	f102 0c01 	add.w	ip, r2, #1
 8014406:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 801440a:	7852      	ldrb	r2, [r2, #1]
 801440c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8014410:	f1b9 0f09 	cmp.w	r9, #9
 8014414:	d939      	bls.n	801448a <_strtod_l+0x35a>
 8014416:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8014418:	ebac 0c07 	sub.w	ip, ip, r7
 801441c:	f1bc 0f08 	cmp.w	ip, #8
 8014420:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8014424:	dc37      	bgt.n	8014496 <_strtod_l+0x366>
 8014426:	45e0      	cmp	r8, ip
 8014428:	bfa8      	it	ge
 801442a:	46e0      	movge	r8, ip
 801442c:	f1be 0f00 	cmp.w	lr, #0
 8014430:	d001      	beq.n	8014436 <_strtod_l+0x306>
 8014432:	f1c8 0800 	rsb	r8, r8, #0
 8014436:	2b00      	cmp	r3, #0
 8014438:	d151      	bne.n	80144de <_strtod_l+0x3ae>
 801443a:	2800      	cmp	r0, #0
 801443c:	f47f aeba 	bne.w	80141b4 <_strtod_l+0x84>
 8014440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014442:	2b00      	cmp	r3, #0
 8014444:	f47f aeb6 	bne.w	80141b4 <_strtod_l+0x84>
 8014448:	9b04      	ldr	r3, [sp, #16]
 801444a:	2b00      	cmp	r3, #0
 801444c:	f47f aed1 	bne.w	80141f2 <_strtod_l+0xc2>
 8014450:	2a4e      	cmp	r2, #78	; 0x4e
 8014452:	d027      	beq.n	80144a4 <_strtod_l+0x374>
 8014454:	dc21      	bgt.n	801449a <_strtod_l+0x36a>
 8014456:	2a49      	cmp	r2, #73	; 0x49
 8014458:	f47f aecb 	bne.w	80141f2 <_strtod_l+0xc2>
 801445c:	499a      	ldr	r1, [pc, #616]	; (80146c8 <_strtod_l+0x598>)
 801445e:	a817      	add	r0, sp, #92	; 0x5c
 8014460:	f001 fdf2 	bl	8016048 <__match>
 8014464:	2800      	cmp	r0, #0
 8014466:	f43f aec4 	beq.w	80141f2 <_strtod_l+0xc2>
 801446a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801446c:	4997      	ldr	r1, [pc, #604]	; (80146cc <_strtod_l+0x59c>)
 801446e:	3b01      	subs	r3, #1
 8014470:	a817      	add	r0, sp, #92	; 0x5c
 8014472:	9317      	str	r3, [sp, #92]	; 0x5c
 8014474:	f001 fde8 	bl	8016048 <__match>
 8014478:	b910      	cbnz	r0, 8014480 <_strtod_l+0x350>
 801447a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801447c:	3301      	adds	r3, #1
 801447e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014480:	f8df b260 	ldr.w	fp, [pc, #608]	; 80146e4 <_strtod_l+0x5b4>
 8014484:	f04f 0a00 	mov.w	sl, #0
 8014488:	e694      	b.n	80141b4 <_strtod_l+0x84>
 801448a:	270a      	movs	r7, #10
 801448c:	fb07 2808 	mla	r8, r7, r8, r2
 8014490:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8014494:	e7b4      	b.n	8014400 <_strtod_l+0x2d0>
 8014496:	46e0      	mov	r8, ip
 8014498:	e7c8      	b.n	801442c <_strtod_l+0x2fc>
 801449a:	2a69      	cmp	r2, #105	; 0x69
 801449c:	d0de      	beq.n	801445c <_strtod_l+0x32c>
 801449e:	2a6e      	cmp	r2, #110	; 0x6e
 80144a0:	f47f aea7 	bne.w	80141f2 <_strtod_l+0xc2>
 80144a4:	498a      	ldr	r1, [pc, #552]	; (80146d0 <_strtod_l+0x5a0>)
 80144a6:	a817      	add	r0, sp, #92	; 0x5c
 80144a8:	f001 fdce 	bl	8016048 <__match>
 80144ac:	2800      	cmp	r0, #0
 80144ae:	f43f aea0 	beq.w	80141f2 <_strtod_l+0xc2>
 80144b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	2b28      	cmp	r3, #40	; 0x28
 80144b8:	d10e      	bne.n	80144d8 <_strtod_l+0x3a8>
 80144ba:	aa1a      	add	r2, sp, #104	; 0x68
 80144bc:	4985      	ldr	r1, [pc, #532]	; (80146d4 <_strtod_l+0x5a4>)
 80144be:	a817      	add	r0, sp, #92	; 0x5c
 80144c0:	f001 fdd6 	bl	8016070 <__hexnan>
 80144c4:	2805      	cmp	r0, #5
 80144c6:	d107      	bne.n	80144d8 <_strtod_l+0x3a8>
 80144c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144ca:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80144ce:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80144d2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80144d6:	e66d      	b.n	80141b4 <_strtod_l+0x84>
 80144d8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80146e8 <_strtod_l+0x5b8>
 80144dc:	e7d2      	b.n	8014484 <_strtod_l+0x354>
 80144de:	eddd 7a08 	vldr	s15, [sp, #32]
 80144e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80144e6:	eba8 0201 	sub.w	r2, r8, r1
 80144ea:	2d00      	cmp	r5, #0
 80144ec:	bf08      	it	eq
 80144ee:	461d      	moveq	r5, r3
 80144f0:	2b10      	cmp	r3, #16
 80144f2:	9204      	str	r2, [sp, #16]
 80144f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80144f8:	461a      	mov	r2, r3
 80144fa:	bfa8      	it	ge
 80144fc:	2210      	movge	r2, #16
 80144fe:	2b09      	cmp	r3, #9
 8014500:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014504:	dc14      	bgt.n	8014530 <_strtod_l+0x400>
 8014506:	9904      	ldr	r1, [sp, #16]
 8014508:	2900      	cmp	r1, #0
 801450a:	f43f ae53 	beq.w	80141b4 <_strtod_l+0x84>
 801450e:	9904      	ldr	r1, [sp, #16]
 8014510:	dd72      	ble.n	80145f8 <_strtod_l+0x4c8>
 8014512:	2916      	cmp	r1, #22
 8014514:	dc5a      	bgt.n	80145cc <_strtod_l+0x49c>
 8014516:	4970      	ldr	r1, [pc, #448]	; (80146d8 <_strtod_l+0x5a8>)
 8014518:	9b04      	ldr	r3, [sp, #16]
 801451a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801451e:	ed91 7b00 	vldr	d7, [r1]
 8014522:	ec4b ab16 	vmov	d6, sl, fp
 8014526:	ee27 7b06 	vmul.f64	d7, d7, d6
 801452a:	ec5b ab17 	vmov	sl, fp, d7
 801452e:	e641      	b.n	80141b4 <_strtod_l+0x84>
 8014530:	4969      	ldr	r1, [pc, #420]	; (80146d8 <_strtod_l+0x5a8>)
 8014532:	eddd 7a06 	vldr	s15, [sp, #24]
 8014536:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801453a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801453e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8014542:	2b0f      	cmp	r3, #15
 8014544:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014548:	eea5 7b06 	vfma.f64	d7, d5, d6
 801454c:	ec5b ab17 	vmov	sl, fp, d7
 8014550:	ddd9      	ble.n	8014506 <_strtod_l+0x3d6>
 8014552:	9904      	ldr	r1, [sp, #16]
 8014554:	1a9a      	subs	r2, r3, r2
 8014556:	440a      	add	r2, r1
 8014558:	2a00      	cmp	r2, #0
 801455a:	f340 8096 	ble.w	801468a <_strtod_l+0x55a>
 801455e:	f012 000f 	ands.w	r0, r2, #15
 8014562:	d00a      	beq.n	801457a <_strtod_l+0x44a>
 8014564:	495c      	ldr	r1, [pc, #368]	; (80146d8 <_strtod_l+0x5a8>)
 8014566:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801456a:	ed91 7b00 	vldr	d7, [r1]
 801456e:	ec4b ab16 	vmov	d6, sl, fp
 8014572:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014576:	ec5b ab17 	vmov	sl, fp, d7
 801457a:	f032 020f 	bics.w	r2, r2, #15
 801457e:	d072      	beq.n	8014666 <_strtod_l+0x536>
 8014580:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014584:	dd45      	ble.n	8014612 <_strtod_l+0x4e2>
 8014586:	2500      	movs	r5, #0
 8014588:	46a8      	mov	r8, r5
 801458a:	9506      	str	r5, [sp, #24]
 801458c:	46a9      	mov	r9, r5
 801458e:	2322      	movs	r3, #34	; 0x22
 8014590:	f8df b150 	ldr.w	fp, [pc, #336]	; 80146e4 <_strtod_l+0x5b4>
 8014594:	6023      	str	r3, [r4, #0]
 8014596:	f04f 0a00 	mov.w	sl, #0
 801459a:	9b06      	ldr	r3, [sp, #24]
 801459c:	2b00      	cmp	r3, #0
 801459e:	f43f ae09 	beq.w	80141b4 <_strtod_l+0x84>
 80145a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80145a4:	4620      	mov	r0, r4
 80145a6:	f001 fe55 	bl	8016254 <_Bfree>
 80145aa:	4649      	mov	r1, r9
 80145ac:	4620      	mov	r0, r4
 80145ae:	f001 fe51 	bl	8016254 <_Bfree>
 80145b2:	4641      	mov	r1, r8
 80145b4:	4620      	mov	r0, r4
 80145b6:	f001 fe4d 	bl	8016254 <_Bfree>
 80145ba:	9906      	ldr	r1, [sp, #24]
 80145bc:	4620      	mov	r0, r4
 80145be:	f001 fe49 	bl	8016254 <_Bfree>
 80145c2:	4629      	mov	r1, r5
 80145c4:	4620      	mov	r0, r4
 80145c6:	f001 fe45 	bl	8016254 <_Bfree>
 80145ca:	e5f3      	b.n	80141b4 <_strtod_l+0x84>
 80145cc:	9804      	ldr	r0, [sp, #16]
 80145ce:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80145d2:	4281      	cmp	r1, r0
 80145d4:	dbbd      	blt.n	8014552 <_strtod_l+0x422>
 80145d6:	4a40      	ldr	r2, [pc, #256]	; (80146d8 <_strtod_l+0x5a8>)
 80145d8:	f1c3 030f 	rsb	r3, r3, #15
 80145dc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80145e0:	ed91 7b00 	vldr	d7, [r1]
 80145e4:	ec4b ab16 	vmov	d6, sl, fp
 80145e8:	1ac3      	subs	r3, r0, r3
 80145ea:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80145ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80145f2:	ed92 6b00 	vldr	d6, [r2]
 80145f6:	e796      	b.n	8014526 <_strtod_l+0x3f6>
 80145f8:	3116      	adds	r1, #22
 80145fa:	dbaa      	blt.n	8014552 <_strtod_l+0x422>
 80145fc:	4936      	ldr	r1, [pc, #216]	; (80146d8 <_strtod_l+0x5a8>)
 80145fe:	9b04      	ldr	r3, [sp, #16]
 8014600:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8014604:	ed91 7b00 	vldr	d7, [r1]
 8014608:	ec4b ab16 	vmov	d6, sl, fp
 801460c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014610:	e78b      	b.n	801452a <_strtod_l+0x3fa>
 8014612:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8014616:	2000      	movs	r0, #0
 8014618:	4e30      	ldr	r6, [pc, #192]	; (80146dc <_strtod_l+0x5ac>)
 801461a:	1112      	asrs	r2, r2, #4
 801461c:	4601      	mov	r1, r0
 801461e:	2a01      	cmp	r2, #1
 8014620:	dc23      	bgt.n	801466a <_strtod_l+0x53a>
 8014622:	b108      	cbz	r0, 8014628 <_strtod_l+0x4f8>
 8014624:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8014628:	4a2c      	ldr	r2, [pc, #176]	; (80146dc <_strtod_l+0x5ac>)
 801462a:	482d      	ldr	r0, [pc, #180]	; (80146e0 <_strtod_l+0x5b0>)
 801462c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014630:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014634:	ed91 7b00 	vldr	d7, [r1]
 8014638:	ec4b ab16 	vmov	d6, sl, fp
 801463c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014640:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014644:	9907      	ldr	r1, [sp, #28]
 8014646:	4a27      	ldr	r2, [pc, #156]	; (80146e4 <_strtod_l+0x5b4>)
 8014648:	400a      	ands	r2, r1
 801464a:	4282      	cmp	r2, r0
 801464c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8014650:	d899      	bhi.n	8014586 <_strtod_l+0x456>
 8014652:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8014656:	4282      	cmp	r2, r0
 8014658:	bf86      	itte	hi
 801465a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80146ec <_strtod_l+0x5bc>
 801465e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014662:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8014666:	2700      	movs	r7, #0
 8014668:	e070      	b.n	801474c <_strtod_l+0x61c>
 801466a:	07d7      	lsls	r7, r2, #31
 801466c:	d50a      	bpl.n	8014684 <_strtod_l+0x554>
 801466e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8014672:	ed90 7b00 	vldr	d7, [r0]
 8014676:	ed9d 6b06 	vldr	d6, [sp, #24]
 801467a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801467e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014682:	2001      	movs	r0, #1
 8014684:	3101      	adds	r1, #1
 8014686:	1052      	asrs	r2, r2, #1
 8014688:	e7c9      	b.n	801461e <_strtod_l+0x4ee>
 801468a:	d0ec      	beq.n	8014666 <_strtod_l+0x536>
 801468c:	4252      	negs	r2, r2
 801468e:	f012 000f 	ands.w	r0, r2, #15
 8014692:	d00a      	beq.n	80146aa <_strtod_l+0x57a>
 8014694:	4910      	ldr	r1, [pc, #64]	; (80146d8 <_strtod_l+0x5a8>)
 8014696:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801469a:	ed91 7b00 	vldr	d7, [r1]
 801469e:	ec4b ab16 	vmov	d6, sl, fp
 80146a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80146a6:	ec5b ab17 	vmov	sl, fp, d7
 80146aa:	1112      	asrs	r2, r2, #4
 80146ac:	d0db      	beq.n	8014666 <_strtod_l+0x536>
 80146ae:	2a1f      	cmp	r2, #31
 80146b0:	dd1e      	ble.n	80146f0 <_strtod_l+0x5c0>
 80146b2:	2500      	movs	r5, #0
 80146b4:	46a8      	mov	r8, r5
 80146b6:	9506      	str	r5, [sp, #24]
 80146b8:	46a9      	mov	r9, r5
 80146ba:	2322      	movs	r3, #34	; 0x22
 80146bc:	f04f 0a00 	mov.w	sl, #0
 80146c0:	f04f 0b00 	mov.w	fp, #0
 80146c4:	6023      	str	r3, [r4, #0]
 80146c6:	e768      	b.n	801459a <_strtod_l+0x46a>
 80146c8:	080188ed 	.word	0x080188ed
 80146cc:	0801897b 	.word	0x0801897b
 80146d0:	080188f5 	.word	0x080188f5
 80146d4:	08018938 	.word	0x08018938
 80146d8:	08018a20 	.word	0x08018a20
 80146dc:	080189f8 	.word	0x080189f8
 80146e0:	7ca00000 	.word	0x7ca00000
 80146e4:	7ff00000 	.word	0x7ff00000
 80146e8:	fff80000 	.word	0xfff80000
 80146ec:	7fefffff 	.word	0x7fefffff
 80146f0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80146f4:	f012 0710 	ands.w	r7, r2, #16
 80146f8:	49ab      	ldr	r1, [pc, #684]	; (80149a8 <_strtod_l+0x878>)
 80146fa:	bf18      	it	ne
 80146fc:	276a      	movne	r7, #106	; 0x6a
 80146fe:	2000      	movs	r0, #0
 8014700:	2a00      	cmp	r2, #0
 8014702:	f300 8113 	bgt.w	801492c <_strtod_l+0x7fc>
 8014706:	b108      	cbz	r0, 801470c <_strtod_l+0x5dc>
 8014708:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801470c:	b1bf      	cbz	r7, 801473e <_strtod_l+0x60e>
 801470e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014712:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8014716:	2a00      	cmp	r2, #0
 8014718:	4659      	mov	r1, fp
 801471a:	dd10      	ble.n	801473e <_strtod_l+0x60e>
 801471c:	2a1f      	cmp	r2, #31
 801471e:	f340 8113 	ble.w	8014948 <_strtod_l+0x818>
 8014722:	2a34      	cmp	r2, #52	; 0x34
 8014724:	bfde      	ittt	le
 8014726:	3a20      	suble	r2, #32
 8014728:	f04f 30ff 	movle.w	r0, #4294967295
 801472c:	fa00 f202 	lslle.w	r2, r0, r2
 8014730:	f04f 0a00 	mov.w	sl, #0
 8014734:	bfcc      	ite	gt
 8014736:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801473a:	ea02 0b01 	andle.w	fp, r2, r1
 801473e:	ec4b ab17 	vmov	d7, sl, fp
 8014742:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801474a:	d0b2      	beq.n	80146b2 <_strtod_l+0x582>
 801474c:	9a08      	ldr	r2, [sp, #32]
 801474e:	9200      	str	r2, [sp, #0]
 8014750:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014752:	462a      	mov	r2, r5
 8014754:	4620      	mov	r0, r4
 8014756:	f001 fdcf 	bl	80162f8 <__s2b>
 801475a:	9006      	str	r0, [sp, #24]
 801475c:	2800      	cmp	r0, #0
 801475e:	f43f af12 	beq.w	8014586 <_strtod_l+0x456>
 8014762:	9a04      	ldr	r2, [sp, #16]
 8014764:	9b04      	ldr	r3, [sp, #16]
 8014766:	2a00      	cmp	r2, #0
 8014768:	f1c3 0300 	rsb	r3, r3, #0
 801476c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8014990 <_strtod_l+0x860>
 8014770:	bfa8      	it	ge
 8014772:	2300      	movge	r3, #0
 8014774:	ed9f ab88 	vldr	d10, [pc, #544]	; 8014998 <_strtod_l+0x868>
 8014778:	ed9f bb89 	vldr	d11, [pc, #548]	; 80149a0 <_strtod_l+0x870>
 801477c:	930e      	str	r3, [sp, #56]	; 0x38
 801477e:	2500      	movs	r5, #0
 8014780:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014784:	9310      	str	r3, [sp, #64]	; 0x40
 8014786:	46a8      	mov	r8, r5
 8014788:	9b06      	ldr	r3, [sp, #24]
 801478a:	4620      	mov	r0, r4
 801478c:	6859      	ldr	r1, [r3, #4]
 801478e:	f001 fd2d 	bl	80161ec <_Balloc>
 8014792:	4681      	mov	r9, r0
 8014794:	2800      	cmp	r0, #0
 8014796:	f43f aefa 	beq.w	801458e <_strtod_l+0x45e>
 801479a:	9b06      	ldr	r3, [sp, #24]
 801479c:	691a      	ldr	r2, [r3, #16]
 801479e:	3202      	adds	r2, #2
 80147a0:	f103 010c 	add.w	r1, r3, #12
 80147a4:	0092      	lsls	r2, r2, #2
 80147a6:	300c      	adds	r0, #12
 80147a8:	f7fe fe44 	bl	8013434 <memcpy>
 80147ac:	aa1a      	add	r2, sp, #104	; 0x68
 80147ae:	a919      	add	r1, sp, #100	; 0x64
 80147b0:	ec4b ab10 	vmov	d0, sl, fp
 80147b4:	4620      	mov	r0, r4
 80147b6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80147ba:	f002 f859 	bl	8016870 <__d2b>
 80147be:	9018      	str	r0, [sp, #96]	; 0x60
 80147c0:	2800      	cmp	r0, #0
 80147c2:	f43f aee4 	beq.w	801458e <_strtod_l+0x45e>
 80147c6:	2101      	movs	r1, #1
 80147c8:	4620      	mov	r0, r4
 80147ca:	f001 fe21 	bl	8016410 <__i2b>
 80147ce:	4680      	mov	r8, r0
 80147d0:	2800      	cmp	r0, #0
 80147d2:	f43f aedc 	beq.w	801458e <_strtod_l+0x45e>
 80147d6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80147d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80147da:	2e00      	cmp	r6, #0
 80147dc:	bfb1      	iteee	lt
 80147de:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80147e0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80147e2:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80147e4:	18f3      	addge	r3, r6, r3
 80147e6:	bfba      	itte	lt
 80147e8:	1b98      	sublt	r0, r3, r6
 80147ea:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80147ec:	9308      	strge	r3, [sp, #32]
 80147ee:	eba6 0607 	sub.w	r6, r6, r7
 80147f2:	bfb8      	it	lt
 80147f4:	9308      	strlt	r3, [sp, #32]
 80147f6:	4416      	add	r6, r2
 80147f8:	4b6c      	ldr	r3, [pc, #432]	; (80149ac <_strtod_l+0x87c>)
 80147fa:	3e01      	subs	r6, #1
 80147fc:	429e      	cmp	r6, r3
 80147fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014802:	f280 80b4 	bge.w	801496e <_strtod_l+0x83e>
 8014806:	1b9b      	subs	r3, r3, r6
 8014808:	2b1f      	cmp	r3, #31
 801480a:	eba2 0203 	sub.w	r2, r2, r3
 801480e:	f04f 0101 	mov.w	r1, #1
 8014812:	f300 80a0 	bgt.w	8014956 <_strtod_l+0x826>
 8014816:	fa01 f303 	lsl.w	r3, r1, r3
 801481a:	9311      	str	r3, [sp, #68]	; 0x44
 801481c:	2300      	movs	r3, #0
 801481e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014820:	9b08      	ldr	r3, [sp, #32]
 8014822:	4413      	add	r3, r2
 8014824:	4402      	add	r2, r0
 8014826:	18be      	adds	r6, r7, r2
 8014828:	9a08      	ldr	r2, [sp, #32]
 801482a:	429a      	cmp	r2, r3
 801482c:	bfa8      	it	ge
 801482e:	461a      	movge	r2, r3
 8014830:	42b2      	cmp	r2, r6
 8014832:	bfa8      	it	ge
 8014834:	4632      	movge	r2, r6
 8014836:	2a00      	cmp	r2, #0
 8014838:	dd04      	ble.n	8014844 <_strtod_l+0x714>
 801483a:	9908      	ldr	r1, [sp, #32]
 801483c:	1a9b      	subs	r3, r3, r2
 801483e:	1ab6      	subs	r6, r6, r2
 8014840:	1a8a      	subs	r2, r1, r2
 8014842:	9208      	str	r2, [sp, #32]
 8014844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014846:	b1c2      	cbz	r2, 801487a <_strtod_l+0x74a>
 8014848:	4641      	mov	r1, r8
 801484a:	4620      	mov	r0, r4
 801484c:	9315      	str	r3, [sp, #84]	; 0x54
 801484e:	f001 fe7f 	bl	8016550 <__pow5mult>
 8014852:	4680      	mov	r8, r0
 8014854:	2800      	cmp	r0, #0
 8014856:	f43f ae9a 	beq.w	801458e <_strtod_l+0x45e>
 801485a:	4601      	mov	r1, r0
 801485c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801485e:	4620      	mov	r0, r4
 8014860:	f001 fddf 	bl	8016422 <__multiply>
 8014864:	900c      	str	r0, [sp, #48]	; 0x30
 8014866:	2800      	cmp	r0, #0
 8014868:	f43f ae91 	beq.w	801458e <_strtod_l+0x45e>
 801486c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801486e:	4620      	mov	r0, r4
 8014870:	f001 fcf0 	bl	8016254 <_Bfree>
 8014874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014878:	9218      	str	r2, [sp, #96]	; 0x60
 801487a:	2b00      	cmp	r3, #0
 801487c:	dc7c      	bgt.n	8014978 <_strtod_l+0x848>
 801487e:	9b04      	ldr	r3, [sp, #16]
 8014880:	2b00      	cmp	r3, #0
 8014882:	dd08      	ble.n	8014896 <_strtod_l+0x766>
 8014884:	4649      	mov	r1, r9
 8014886:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014888:	4620      	mov	r0, r4
 801488a:	f001 fe61 	bl	8016550 <__pow5mult>
 801488e:	4681      	mov	r9, r0
 8014890:	2800      	cmp	r0, #0
 8014892:	f43f ae7c 	beq.w	801458e <_strtod_l+0x45e>
 8014896:	2e00      	cmp	r6, #0
 8014898:	dd08      	ble.n	80148ac <_strtod_l+0x77c>
 801489a:	4649      	mov	r1, r9
 801489c:	4632      	mov	r2, r6
 801489e:	4620      	mov	r0, r4
 80148a0:	f001 fea4 	bl	80165ec <__lshift>
 80148a4:	4681      	mov	r9, r0
 80148a6:	2800      	cmp	r0, #0
 80148a8:	f43f ae71 	beq.w	801458e <_strtod_l+0x45e>
 80148ac:	9b08      	ldr	r3, [sp, #32]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	dd08      	ble.n	80148c4 <_strtod_l+0x794>
 80148b2:	4641      	mov	r1, r8
 80148b4:	461a      	mov	r2, r3
 80148b6:	4620      	mov	r0, r4
 80148b8:	f001 fe98 	bl	80165ec <__lshift>
 80148bc:	4680      	mov	r8, r0
 80148be:	2800      	cmp	r0, #0
 80148c0:	f43f ae65 	beq.w	801458e <_strtod_l+0x45e>
 80148c4:	464a      	mov	r2, r9
 80148c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80148c8:	4620      	mov	r0, r4
 80148ca:	f001 fefd 	bl	80166c8 <__mdiff>
 80148ce:	4605      	mov	r5, r0
 80148d0:	2800      	cmp	r0, #0
 80148d2:	f43f ae5c 	beq.w	801458e <_strtod_l+0x45e>
 80148d6:	68c3      	ldr	r3, [r0, #12]
 80148d8:	930c      	str	r3, [sp, #48]	; 0x30
 80148da:	2300      	movs	r3, #0
 80148dc:	60c3      	str	r3, [r0, #12]
 80148de:	4641      	mov	r1, r8
 80148e0:	f001 fed8 	bl	8016694 <__mcmp>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	da63      	bge.n	80149b0 <_strtod_l+0x880>
 80148e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148ea:	b9e3      	cbnz	r3, 8014926 <_strtod_l+0x7f6>
 80148ec:	f1ba 0f00 	cmp.w	sl, #0
 80148f0:	d119      	bne.n	8014926 <_strtod_l+0x7f6>
 80148f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148f6:	b9b3      	cbnz	r3, 8014926 <_strtod_l+0x7f6>
 80148f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80148fc:	0d1b      	lsrs	r3, r3, #20
 80148fe:	051b      	lsls	r3, r3, #20
 8014900:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014904:	d90f      	bls.n	8014926 <_strtod_l+0x7f6>
 8014906:	696b      	ldr	r3, [r5, #20]
 8014908:	b913      	cbnz	r3, 8014910 <_strtod_l+0x7e0>
 801490a:	692b      	ldr	r3, [r5, #16]
 801490c:	2b01      	cmp	r3, #1
 801490e:	dd0a      	ble.n	8014926 <_strtod_l+0x7f6>
 8014910:	4629      	mov	r1, r5
 8014912:	2201      	movs	r2, #1
 8014914:	4620      	mov	r0, r4
 8014916:	f001 fe69 	bl	80165ec <__lshift>
 801491a:	4641      	mov	r1, r8
 801491c:	4605      	mov	r5, r0
 801491e:	f001 feb9 	bl	8016694 <__mcmp>
 8014922:	2800      	cmp	r0, #0
 8014924:	dc75      	bgt.n	8014a12 <_strtod_l+0x8e2>
 8014926:	2f00      	cmp	r7, #0
 8014928:	d17f      	bne.n	8014a2a <_strtod_l+0x8fa>
 801492a:	e63a      	b.n	80145a2 <_strtod_l+0x472>
 801492c:	07d6      	lsls	r6, r2, #31
 801492e:	d508      	bpl.n	8014942 <_strtod_l+0x812>
 8014930:	ed9d 6b06 	vldr	d6, [sp, #24]
 8014934:	ed91 7b00 	vldr	d7, [r1]
 8014938:	ee26 7b07 	vmul.f64	d7, d6, d7
 801493c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014940:	2001      	movs	r0, #1
 8014942:	1052      	asrs	r2, r2, #1
 8014944:	3108      	adds	r1, #8
 8014946:	e6db      	b.n	8014700 <_strtod_l+0x5d0>
 8014948:	f04f 31ff 	mov.w	r1, #4294967295
 801494c:	fa01 f202 	lsl.w	r2, r1, r2
 8014950:	ea02 0a0a 	and.w	sl, r2, sl
 8014954:	e6f3      	b.n	801473e <_strtod_l+0x60e>
 8014956:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801495a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801495e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014962:	36e2      	adds	r6, #226	; 0xe2
 8014964:	fa01 f306 	lsl.w	r3, r1, r6
 8014968:	930f      	str	r3, [sp, #60]	; 0x3c
 801496a:	9111      	str	r1, [sp, #68]	; 0x44
 801496c:	e758      	b.n	8014820 <_strtod_l+0x6f0>
 801496e:	2300      	movs	r3, #0
 8014970:	930f      	str	r3, [sp, #60]	; 0x3c
 8014972:	2301      	movs	r3, #1
 8014974:	9311      	str	r3, [sp, #68]	; 0x44
 8014976:	e753      	b.n	8014820 <_strtod_l+0x6f0>
 8014978:	461a      	mov	r2, r3
 801497a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801497c:	4620      	mov	r0, r4
 801497e:	f001 fe35 	bl	80165ec <__lshift>
 8014982:	9018      	str	r0, [sp, #96]	; 0x60
 8014984:	2800      	cmp	r0, #0
 8014986:	f47f af7a 	bne.w	801487e <_strtod_l+0x74e>
 801498a:	e600      	b.n	801458e <_strtod_l+0x45e>
 801498c:	f3af 8000 	nop.w
 8014990:	94a03595 	.word	0x94a03595
 8014994:	3fdfffff 	.word	0x3fdfffff
 8014998:	35afe535 	.word	0x35afe535
 801499c:	3fe00000 	.word	0x3fe00000
 80149a0:	94a03595 	.word	0x94a03595
 80149a4:	3fcfffff 	.word	0x3fcfffff
 80149a8:	08018950 	.word	0x08018950
 80149ac:	fffffc02 	.word	0xfffffc02
 80149b0:	f8cd b020 	str.w	fp, [sp, #32]
 80149b4:	f040 8085 	bne.w	8014ac2 <_strtod_l+0x992>
 80149b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149be:	b322      	cbz	r2, 8014a0a <_strtod_l+0x8da>
 80149c0:	4ab7      	ldr	r2, [pc, #732]	; (8014ca0 <_strtod_l+0xb70>)
 80149c2:	4293      	cmp	r3, r2
 80149c4:	d154      	bne.n	8014a70 <_strtod_l+0x940>
 80149c6:	4651      	mov	r1, sl
 80149c8:	b1e7      	cbz	r7, 8014a04 <_strtod_l+0x8d4>
 80149ca:	4bb6      	ldr	r3, [pc, #728]	; (8014ca4 <_strtod_l+0xb74>)
 80149cc:	465a      	mov	r2, fp
 80149ce:	4013      	ands	r3, r2
 80149d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80149d4:	f04f 32ff 	mov.w	r2, #4294967295
 80149d8:	d803      	bhi.n	80149e2 <_strtod_l+0x8b2>
 80149da:	0d1b      	lsrs	r3, r3, #20
 80149dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80149e0:	409a      	lsls	r2, r3
 80149e2:	4291      	cmp	r1, r2
 80149e4:	d144      	bne.n	8014a70 <_strtod_l+0x940>
 80149e6:	4bb0      	ldr	r3, [pc, #704]	; (8014ca8 <_strtod_l+0xb78>)
 80149e8:	9a08      	ldr	r2, [sp, #32]
 80149ea:	429a      	cmp	r2, r3
 80149ec:	d102      	bne.n	80149f4 <_strtod_l+0x8c4>
 80149ee:	3101      	adds	r1, #1
 80149f0:	f43f adcd 	beq.w	801458e <_strtod_l+0x45e>
 80149f4:	4bab      	ldr	r3, [pc, #684]	; (8014ca4 <_strtod_l+0xb74>)
 80149f6:	9a08      	ldr	r2, [sp, #32]
 80149f8:	401a      	ands	r2, r3
 80149fa:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80149fe:	f04f 0a00 	mov.w	sl, #0
 8014a02:	e790      	b.n	8014926 <_strtod_l+0x7f6>
 8014a04:	f04f 32ff 	mov.w	r2, #4294967295
 8014a08:	e7eb      	b.n	80149e2 <_strtod_l+0x8b2>
 8014a0a:	bb8b      	cbnz	r3, 8014a70 <_strtod_l+0x940>
 8014a0c:	f1ba 0f00 	cmp.w	sl, #0
 8014a10:	d12e      	bne.n	8014a70 <_strtod_l+0x940>
 8014a12:	465b      	mov	r3, fp
 8014a14:	4aa3      	ldr	r2, [pc, #652]	; (8014ca4 <_strtod_l+0xb74>)
 8014a16:	b30f      	cbz	r7, 8014a5c <_strtod_l+0x92c>
 8014a18:	ea02 010b 	and.w	r1, r2, fp
 8014a1c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014a20:	dc1c      	bgt.n	8014a5c <_strtod_l+0x92c>
 8014a22:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014a26:	f77f ae48 	ble.w	80146ba <_strtod_l+0x58a>
 8014a2a:	4aa0      	ldr	r2, [pc, #640]	; (8014cac <_strtod_l+0xb7c>)
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8014a32:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8014a36:	ec4b ab17 	vmov	d7, sl, fp
 8014a3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014a3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014a42:	9b05      	ldr	r3, [sp, #20]
 8014a44:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	f47f adaa 	bne.w	80145a2 <_strtod_l+0x472>
 8014a4e:	9b04      	ldr	r3, [sp, #16]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	f47f ada6 	bne.w	80145a2 <_strtod_l+0x472>
 8014a56:	2322      	movs	r3, #34	; 0x22
 8014a58:	6023      	str	r3, [r4, #0]
 8014a5a:	e5a2      	b.n	80145a2 <_strtod_l+0x472>
 8014a5c:	4013      	ands	r3, r2
 8014a5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014a62:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014a66:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014a6a:	f04f 3aff 	mov.w	sl, #4294967295
 8014a6e:	e75a      	b.n	8014926 <_strtod_l+0x7f6>
 8014a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a72:	b18b      	cbz	r3, 8014a98 <_strtod_l+0x968>
 8014a74:	9a08      	ldr	r2, [sp, #32]
 8014a76:	4213      	tst	r3, r2
 8014a78:	f43f af55 	beq.w	8014926 <_strtod_l+0x7f6>
 8014a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a7e:	463a      	mov	r2, r7
 8014a80:	4650      	mov	r0, sl
 8014a82:	4659      	mov	r1, fp
 8014a84:	b163      	cbz	r3, 8014aa0 <_strtod_l+0x970>
 8014a86:	f7ff fb39 	bl	80140fc <sulp>
 8014a8a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014a8e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8014a92:	ec5b ab17 	vmov	sl, fp, d7
 8014a96:	e746      	b.n	8014926 <_strtod_l+0x7f6>
 8014a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a9a:	ea13 0f0a 	tst.w	r3, sl
 8014a9e:	e7eb      	b.n	8014a78 <_strtod_l+0x948>
 8014aa0:	f7ff fb2c 	bl	80140fc <sulp>
 8014aa4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014aa8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8014aac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014ab0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014abc:	f43f adfd 	beq.w	80146ba <_strtod_l+0x58a>
 8014ac0:	e731      	b.n	8014926 <_strtod_l+0x7f6>
 8014ac2:	4641      	mov	r1, r8
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	f001 ff22 	bl	801690e <__ratio>
 8014aca:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014ace:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad6:	d869      	bhi.n	8014bac <_strtod_l+0xa7c>
 8014ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d045      	beq.n	8014b6a <_strtod_l+0xa3a>
 8014ade:	4b74      	ldr	r3, [pc, #464]	; (8014cb0 <_strtod_l+0xb80>)
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8014ae6:	9808      	ldr	r0, [sp, #32]
 8014ae8:	496e      	ldr	r1, [pc, #440]	; (8014ca4 <_strtod_l+0xb74>)
 8014aea:	ea00 0601 	and.w	r6, r0, r1
 8014aee:	4871      	ldr	r0, [pc, #452]	; (8014cb4 <_strtod_l+0xb84>)
 8014af0:	4286      	cmp	r6, r0
 8014af2:	f040 8089 	bne.w	8014c08 <_strtod_l+0xad8>
 8014af6:	910f      	str	r1, [sp, #60]	; 0x3c
 8014af8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014afc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8014b00:	9908      	ldr	r1, [sp, #32]
 8014b02:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8014b06:	ec4b ab10 	vmov	d0, sl, fp
 8014b0a:	ec43 2b1c 	vmov	d12, r2, r3
 8014b0e:	f001 fe39 	bl	8016784 <__ulp>
 8014b12:	ec4b ab1d 	vmov	d13, sl, fp
 8014b16:	eeac db00 	vfma.f64	d13, d12, d0
 8014b1a:	ed8d db08 	vstr	d13, [sp, #32]
 8014b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014b22:	4a65      	ldr	r2, [pc, #404]	; (8014cb8 <_strtod_l+0xb88>)
 8014b24:	4019      	ands	r1, r3
 8014b26:	4291      	cmp	r1, r2
 8014b28:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8014b2c:	d948      	bls.n	8014bc0 <_strtod_l+0xa90>
 8014b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b30:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014b34:	4293      	cmp	r3, r2
 8014b36:	d103      	bne.n	8014b40 <_strtod_l+0xa10>
 8014b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	f43f ad27 	beq.w	801458e <_strtod_l+0x45e>
 8014b40:	f8df b164 	ldr.w	fp, [pc, #356]	; 8014ca8 <_strtod_l+0xb78>
 8014b44:	f04f 3aff 	mov.w	sl, #4294967295
 8014b48:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f001 fb82 	bl	8016254 <_Bfree>
 8014b50:	4649      	mov	r1, r9
 8014b52:	4620      	mov	r0, r4
 8014b54:	f001 fb7e 	bl	8016254 <_Bfree>
 8014b58:	4641      	mov	r1, r8
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f001 fb7a 	bl	8016254 <_Bfree>
 8014b60:	4629      	mov	r1, r5
 8014b62:	4620      	mov	r0, r4
 8014b64:	f001 fb76 	bl	8016254 <_Bfree>
 8014b68:	e60e      	b.n	8014788 <_strtod_l+0x658>
 8014b6a:	f1ba 0f00 	cmp.w	sl, #0
 8014b6e:	d113      	bne.n	8014b98 <_strtod_l+0xa68>
 8014b70:	9b08      	ldr	r3, [sp, #32]
 8014b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b76:	b9b3      	cbnz	r3, 8014ba6 <_strtod_l+0xa76>
 8014b78:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014b7c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b84:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8014b88:	d401      	bmi.n	8014b8e <_strtod_l+0xa5e>
 8014b8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014b8e:	eeb1 7b48 	vneg.f64	d7, d8
 8014b92:	ec53 2b17 	vmov	r2, r3, d7
 8014b96:	e7a6      	b.n	8014ae6 <_strtod_l+0x9b6>
 8014b98:	f1ba 0f01 	cmp.w	sl, #1
 8014b9c:	d103      	bne.n	8014ba6 <_strtod_l+0xa76>
 8014b9e:	9b08      	ldr	r3, [sp, #32]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	f43f ad8a 	beq.w	80146ba <_strtod_l+0x58a>
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	4b44      	ldr	r3, [pc, #272]	; (8014cbc <_strtod_l+0xb8c>)
 8014baa:	e79a      	b.n	8014ae2 <_strtod_l+0x9b2>
 8014bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bae:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8014bb2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d0e9      	beq.n	8014b8e <_strtod_l+0xa5e>
 8014bba:	ec53 2b18 	vmov	r2, r3, d8
 8014bbe:	e792      	b.n	8014ae6 <_strtod_l+0x9b6>
 8014bc0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014bc4:	2f00      	cmp	r7, #0
 8014bc6:	d1bf      	bne.n	8014b48 <_strtod_l+0xa18>
 8014bc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014bcc:	0d1b      	lsrs	r3, r3, #20
 8014bce:	051b      	lsls	r3, r3, #20
 8014bd0:	429e      	cmp	r6, r3
 8014bd2:	d1b9      	bne.n	8014b48 <_strtod_l+0xa18>
 8014bd4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8014bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bda:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8014bde:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014be2:	b92b      	cbnz	r3, 8014bf0 <_strtod_l+0xac0>
 8014be4:	f1ba 0f00 	cmp.w	sl, #0
 8014be8:	d102      	bne.n	8014bf0 <_strtod_l+0xac0>
 8014bea:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8014bee:	b3d2      	cbz	r2, 8014c66 <_strtod_l+0xb36>
 8014bf0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf8:	f53f acd3 	bmi.w	80145a2 <_strtod_l+0x472>
 8014bfc:	eeb4 8bca 	vcmpe.f64	d8, d10
 8014c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c04:	dda0      	ble.n	8014b48 <_strtod_l+0xa18>
 8014c06:	e4cc      	b.n	80145a2 <_strtod_l+0x472>
 8014c08:	b1ef      	cbz	r7, 8014c46 <_strtod_l+0xb16>
 8014c0a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8014c0e:	d81a      	bhi.n	8014c46 <_strtod_l+0xb16>
 8014c10:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014c98 <_strtod_l+0xb68>
 8014c14:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c1c:	d810      	bhi.n	8014c40 <_strtod_l+0xb10>
 8014c1e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8014c22:	ee17 3a90 	vmov	r3, s15
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	bf08      	it	eq
 8014c2a:	2301      	moveq	r3, #1
 8014c2c:	ee07 3a90 	vmov	s15, r3
 8014c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c32:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8014c36:	b99b      	cbnz	r3, 8014c60 <_strtod_l+0xb30>
 8014c38:	eeb1 7b48 	vneg.f64	d7, d8
 8014c3c:	ec53 2b17 	vmov	r2, r3, d7
 8014c40:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8014c44:	1b8b      	subs	r3, r1, r6
 8014c46:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014c4a:	ec43 2b1c 	vmov	d12, r2, r3
 8014c4e:	f001 fd99 	bl	8016784 <__ulp>
 8014c52:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8014c56:	eeac 7b00 	vfma.f64	d7, d12, d0
 8014c5a:	ec5b ab17 	vmov	sl, fp, d7
 8014c5e:	e7b1      	b.n	8014bc4 <_strtod_l+0xa94>
 8014c60:	ec53 2b18 	vmov	r2, r3, d8
 8014c64:	e7ec      	b.n	8014c40 <_strtod_l+0xb10>
 8014c66:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8014c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6e:	f57f af6b 	bpl.w	8014b48 <_strtod_l+0xa18>
 8014c72:	e496      	b.n	80145a2 <_strtod_l+0x472>
 8014c74:	2300      	movs	r3, #0
 8014c76:	930d      	str	r3, [sp, #52]	; 0x34
 8014c78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c7c:	6013      	str	r3, [r2, #0]
 8014c7e:	f7ff ba9d 	b.w	80141bc <_strtod_l+0x8c>
 8014c82:	2a65      	cmp	r2, #101	; 0x65
 8014c84:	f04f 0100 	mov.w	r1, #0
 8014c88:	f43f ab97 	beq.w	80143ba <_strtod_l+0x28a>
 8014c8c:	2701      	movs	r7, #1
 8014c8e:	460b      	mov	r3, r1
 8014c90:	9704      	str	r7, [sp, #16]
 8014c92:	f7ff bb0a 	b.w	80142aa <_strtod_l+0x17a>
 8014c96:	bf00      	nop
 8014c98:	ffc00000 	.word	0xffc00000
 8014c9c:	41dfffff 	.word	0x41dfffff
 8014ca0:	000fffff 	.word	0x000fffff
 8014ca4:	7ff00000 	.word	0x7ff00000
 8014ca8:	7fefffff 	.word	0x7fefffff
 8014cac:	39500000 	.word	0x39500000
 8014cb0:	3ff00000 	.word	0x3ff00000
 8014cb4:	7fe00000 	.word	0x7fe00000
 8014cb8:	7c9fffff 	.word	0x7c9fffff
 8014cbc:	bff00000 	.word	0xbff00000

08014cc0 <_strtod_r>:
 8014cc0:	4b05      	ldr	r3, [pc, #20]	; (8014cd8 <_strtod_r+0x18>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	b410      	push	{r4}
 8014cc6:	6a1b      	ldr	r3, [r3, #32]
 8014cc8:	4c04      	ldr	r4, [pc, #16]	; (8014cdc <_strtod_r+0x1c>)
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	bf08      	it	eq
 8014cce:	4623      	moveq	r3, r4
 8014cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cd4:	f7ff ba2c 	b.w	8014130 <_strtod_l>
 8014cd8:	200001a8 	.word	0x200001a8
 8014cdc:	2000020c 	.word	0x2000020c

08014ce0 <_strtol_l.isra.0>:
 8014ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ce4:	4680      	mov	r8, r0
 8014ce6:	4689      	mov	r9, r1
 8014ce8:	4692      	mov	sl, r2
 8014cea:	461e      	mov	r6, r3
 8014cec:	460f      	mov	r7, r1
 8014cee:	463d      	mov	r5, r7
 8014cf0:	9808      	ldr	r0, [sp, #32]
 8014cf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014cf6:	f001 fa4b 	bl	8016190 <__locale_ctype_ptr_l>
 8014cfa:	4420      	add	r0, r4
 8014cfc:	7843      	ldrb	r3, [r0, #1]
 8014cfe:	f013 0308 	ands.w	r3, r3, #8
 8014d02:	d132      	bne.n	8014d6a <_strtol_l.isra.0+0x8a>
 8014d04:	2c2d      	cmp	r4, #45	; 0x2d
 8014d06:	d132      	bne.n	8014d6e <_strtol_l.isra.0+0x8e>
 8014d08:	787c      	ldrb	r4, [r7, #1]
 8014d0a:	1cbd      	adds	r5, r7, #2
 8014d0c:	2201      	movs	r2, #1
 8014d0e:	2e00      	cmp	r6, #0
 8014d10:	d05d      	beq.n	8014dce <_strtol_l.isra.0+0xee>
 8014d12:	2e10      	cmp	r6, #16
 8014d14:	d109      	bne.n	8014d2a <_strtol_l.isra.0+0x4a>
 8014d16:	2c30      	cmp	r4, #48	; 0x30
 8014d18:	d107      	bne.n	8014d2a <_strtol_l.isra.0+0x4a>
 8014d1a:	782b      	ldrb	r3, [r5, #0]
 8014d1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014d20:	2b58      	cmp	r3, #88	; 0x58
 8014d22:	d14f      	bne.n	8014dc4 <_strtol_l.isra.0+0xe4>
 8014d24:	786c      	ldrb	r4, [r5, #1]
 8014d26:	2610      	movs	r6, #16
 8014d28:	3502      	adds	r5, #2
 8014d2a:	2a00      	cmp	r2, #0
 8014d2c:	bf14      	ite	ne
 8014d2e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014d32:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014d36:	2700      	movs	r7, #0
 8014d38:	fbb1 fcf6 	udiv	ip, r1, r6
 8014d3c:	4638      	mov	r0, r7
 8014d3e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014d42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014d46:	2b09      	cmp	r3, #9
 8014d48:	d817      	bhi.n	8014d7a <_strtol_l.isra.0+0x9a>
 8014d4a:	461c      	mov	r4, r3
 8014d4c:	42a6      	cmp	r6, r4
 8014d4e:	dd23      	ble.n	8014d98 <_strtol_l.isra.0+0xb8>
 8014d50:	1c7b      	adds	r3, r7, #1
 8014d52:	d007      	beq.n	8014d64 <_strtol_l.isra.0+0x84>
 8014d54:	4584      	cmp	ip, r0
 8014d56:	d31c      	bcc.n	8014d92 <_strtol_l.isra.0+0xb2>
 8014d58:	d101      	bne.n	8014d5e <_strtol_l.isra.0+0x7e>
 8014d5a:	45a6      	cmp	lr, r4
 8014d5c:	db19      	blt.n	8014d92 <_strtol_l.isra.0+0xb2>
 8014d5e:	fb00 4006 	mla	r0, r0, r6, r4
 8014d62:	2701      	movs	r7, #1
 8014d64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d68:	e7eb      	b.n	8014d42 <_strtol_l.isra.0+0x62>
 8014d6a:	462f      	mov	r7, r5
 8014d6c:	e7bf      	b.n	8014cee <_strtol_l.isra.0+0xe>
 8014d6e:	2c2b      	cmp	r4, #43	; 0x2b
 8014d70:	bf04      	itt	eq
 8014d72:	1cbd      	addeq	r5, r7, #2
 8014d74:	787c      	ldrbeq	r4, [r7, #1]
 8014d76:	461a      	mov	r2, r3
 8014d78:	e7c9      	b.n	8014d0e <_strtol_l.isra.0+0x2e>
 8014d7a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014d7e:	2b19      	cmp	r3, #25
 8014d80:	d801      	bhi.n	8014d86 <_strtol_l.isra.0+0xa6>
 8014d82:	3c37      	subs	r4, #55	; 0x37
 8014d84:	e7e2      	b.n	8014d4c <_strtol_l.isra.0+0x6c>
 8014d86:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014d8a:	2b19      	cmp	r3, #25
 8014d8c:	d804      	bhi.n	8014d98 <_strtol_l.isra.0+0xb8>
 8014d8e:	3c57      	subs	r4, #87	; 0x57
 8014d90:	e7dc      	b.n	8014d4c <_strtol_l.isra.0+0x6c>
 8014d92:	f04f 37ff 	mov.w	r7, #4294967295
 8014d96:	e7e5      	b.n	8014d64 <_strtol_l.isra.0+0x84>
 8014d98:	1c7b      	adds	r3, r7, #1
 8014d9a:	d108      	bne.n	8014dae <_strtol_l.isra.0+0xce>
 8014d9c:	2322      	movs	r3, #34	; 0x22
 8014d9e:	f8c8 3000 	str.w	r3, [r8]
 8014da2:	4608      	mov	r0, r1
 8014da4:	f1ba 0f00 	cmp.w	sl, #0
 8014da8:	d107      	bne.n	8014dba <_strtol_l.isra.0+0xda>
 8014daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dae:	b102      	cbz	r2, 8014db2 <_strtol_l.isra.0+0xd2>
 8014db0:	4240      	negs	r0, r0
 8014db2:	f1ba 0f00 	cmp.w	sl, #0
 8014db6:	d0f8      	beq.n	8014daa <_strtol_l.isra.0+0xca>
 8014db8:	b10f      	cbz	r7, 8014dbe <_strtol_l.isra.0+0xde>
 8014dba:	f105 39ff 	add.w	r9, r5, #4294967295
 8014dbe:	f8ca 9000 	str.w	r9, [sl]
 8014dc2:	e7f2      	b.n	8014daa <_strtol_l.isra.0+0xca>
 8014dc4:	2430      	movs	r4, #48	; 0x30
 8014dc6:	2e00      	cmp	r6, #0
 8014dc8:	d1af      	bne.n	8014d2a <_strtol_l.isra.0+0x4a>
 8014dca:	2608      	movs	r6, #8
 8014dcc:	e7ad      	b.n	8014d2a <_strtol_l.isra.0+0x4a>
 8014dce:	2c30      	cmp	r4, #48	; 0x30
 8014dd0:	d0a3      	beq.n	8014d1a <_strtol_l.isra.0+0x3a>
 8014dd2:	260a      	movs	r6, #10
 8014dd4:	e7a9      	b.n	8014d2a <_strtol_l.isra.0+0x4a>
	...

08014dd8 <_strtol_r>:
 8014dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014dda:	4c06      	ldr	r4, [pc, #24]	; (8014df4 <_strtol_r+0x1c>)
 8014ddc:	4d06      	ldr	r5, [pc, #24]	; (8014df8 <_strtol_r+0x20>)
 8014dde:	6824      	ldr	r4, [r4, #0]
 8014de0:	6a24      	ldr	r4, [r4, #32]
 8014de2:	2c00      	cmp	r4, #0
 8014de4:	bf08      	it	eq
 8014de6:	462c      	moveq	r4, r5
 8014de8:	9400      	str	r4, [sp, #0]
 8014dea:	f7ff ff79 	bl	8014ce0 <_strtol_l.isra.0>
 8014dee:	b003      	add	sp, #12
 8014df0:	bd30      	pop	{r4, r5, pc}
 8014df2:	bf00      	nop
 8014df4:	200001a8 	.word	0x200001a8
 8014df8:	2000020c 	.word	0x2000020c

08014dfc <quorem>:
 8014dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e00:	6903      	ldr	r3, [r0, #16]
 8014e02:	690c      	ldr	r4, [r1, #16]
 8014e04:	42a3      	cmp	r3, r4
 8014e06:	4680      	mov	r8, r0
 8014e08:	f2c0 8082 	blt.w	8014f10 <quorem+0x114>
 8014e0c:	3c01      	subs	r4, #1
 8014e0e:	f101 0714 	add.w	r7, r1, #20
 8014e12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014e16:	f100 0614 	add.w	r6, r0, #20
 8014e1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014e1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014e22:	eb06 030c 	add.w	r3, r6, ip
 8014e26:	3501      	adds	r5, #1
 8014e28:	eb07 090c 	add.w	r9, r7, ip
 8014e2c:	9301      	str	r3, [sp, #4]
 8014e2e:	fbb0 f5f5 	udiv	r5, r0, r5
 8014e32:	b395      	cbz	r5, 8014e9a <quorem+0x9e>
 8014e34:	f04f 0a00 	mov.w	sl, #0
 8014e38:	4638      	mov	r0, r7
 8014e3a:	46b6      	mov	lr, r6
 8014e3c:	46d3      	mov	fp, sl
 8014e3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8014e42:	b293      	uxth	r3, r2
 8014e44:	fb05 a303 	mla	r3, r5, r3, sl
 8014e48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	ebab 0303 	sub.w	r3, fp, r3
 8014e52:	0c12      	lsrs	r2, r2, #16
 8014e54:	f8de b000 	ldr.w	fp, [lr]
 8014e58:	fb05 a202 	mla	r2, r5, r2, sl
 8014e5c:	fa13 f38b 	uxtah	r3, r3, fp
 8014e60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014e64:	fa1f fb82 	uxth.w	fp, r2
 8014e68:	f8de 2000 	ldr.w	r2, [lr]
 8014e6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e7a:	4581      	cmp	r9, r0
 8014e7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014e80:	f84e 3b04 	str.w	r3, [lr], #4
 8014e84:	d2db      	bcs.n	8014e3e <quorem+0x42>
 8014e86:	f856 300c 	ldr.w	r3, [r6, ip]
 8014e8a:	b933      	cbnz	r3, 8014e9a <quorem+0x9e>
 8014e8c:	9b01      	ldr	r3, [sp, #4]
 8014e8e:	3b04      	subs	r3, #4
 8014e90:	429e      	cmp	r6, r3
 8014e92:	461a      	mov	r2, r3
 8014e94:	d330      	bcc.n	8014ef8 <quorem+0xfc>
 8014e96:	f8c8 4010 	str.w	r4, [r8, #16]
 8014e9a:	4640      	mov	r0, r8
 8014e9c:	f001 fbfa 	bl	8016694 <__mcmp>
 8014ea0:	2800      	cmp	r0, #0
 8014ea2:	db25      	blt.n	8014ef0 <quorem+0xf4>
 8014ea4:	3501      	adds	r5, #1
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f04f 0c00 	mov.w	ip, #0
 8014eac:	f857 2b04 	ldr.w	r2, [r7], #4
 8014eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8014eb4:	b293      	uxth	r3, r2
 8014eb6:	ebac 0303 	sub.w	r3, ip, r3
 8014eba:	0c12      	lsrs	r2, r2, #16
 8014ebc:	fa13 f38e 	uxtah	r3, r3, lr
 8014ec0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ece:	45b9      	cmp	r9, r7
 8014ed0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014ed4:	f840 3b04 	str.w	r3, [r0], #4
 8014ed8:	d2e8      	bcs.n	8014eac <quorem+0xb0>
 8014eda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014ede:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014ee2:	b92a      	cbnz	r2, 8014ef0 <quorem+0xf4>
 8014ee4:	3b04      	subs	r3, #4
 8014ee6:	429e      	cmp	r6, r3
 8014ee8:	461a      	mov	r2, r3
 8014eea:	d30b      	bcc.n	8014f04 <quorem+0x108>
 8014eec:	f8c8 4010 	str.w	r4, [r8, #16]
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	b003      	add	sp, #12
 8014ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef8:	6812      	ldr	r2, [r2, #0]
 8014efa:	3b04      	subs	r3, #4
 8014efc:	2a00      	cmp	r2, #0
 8014efe:	d1ca      	bne.n	8014e96 <quorem+0x9a>
 8014f00:	3c01      	subs	r4, #1
 8014f02:	e7c5      	b.n	8014e90 <quorem+0x94>
 8014f04:	6812      	ldr	r2, [r2, #0]
 8014f06:	3b04      	subs	r3, #4
 8014f08:	2a00      	cmp	r2, #0
 8014f0a:	d1ef      	bne.n	8014eec <quorem+0xf0>
 8014f0c:	3c01      	subs	r4, #1
 8014f0e:	e7ea      	b.n	8014ee6 <quorem+0xea>
 8014f10:	2000      	movs	r0, #0
 8014f12:	e7ee      	b.n	8014ef2 <quorem+0xf6>
 8014f14:	0000      	movs	r0, r0
	...

08014f18 <_dtoa_r>:
 8014f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f1c:	ec57 6b10 	vmov	r6, r7, d0
 8014f20:	b095      	sub	sp, #84	; 0x54
 8014f22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014f24:	9108      	str	r1, [sp, #32]
 8014f26:	4604      	mov	r4, r0
 8014f28:	920a      	str	r2, [sp, #40]	; 0x28
 8014f2a:	9311      	str	r3, [sp, #68]	; 0x44
 8014f2c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8014f30:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014f34:	b93d      	cbnz	r5, 8014f46 <_dtoa_r+0x2e>
 8014f36:	2010      	movs	r0, #16
 8014f38:	f001 f93e 	bl	80161b8 <malloc>
 8014f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8014f3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014f42:	6005      	str	r5, [r0, #0]
 8014f44:	60c5      	str	r5, [r0, #12]
 8014f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f48:	6819      	ldr	r1, [r3, #0]
 8014f4a:	b151      	cbz	r1, 8014f62 <_dtoa_r+0x4a>
 8014f4c:	685a      	ldr	r2, [r3, #4]
 8014f4e:	604a      	str	r2, [r1, #4]
 8014f50:	2301      	movs	r3, #1
 8014f52:	4093      	lsls	r3, r2
 8014f54:	608b      	str	r3, [r1, #8]
 8014f56:	4620      	mov	r0, r4
 8014f58:	f001 f97c 	bl	8016254 <_Bfree>
 8014f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f5e:	2200      	movs	r2, #0
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	1e3b      	subs	r3, r7, #0
 8014f64:	bfb9      	ittee	lt
 8014f66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014f6a:	9303      	strlt	r3, [sp, #12]
 8014f6c:	2300      	movge	r3, #0
 8014f6e:	f8c8 3000 	strge.w	r3, [r8]
 8014f72:	9d03      	ldr	r5, [sp, #12]
 8014f74:	4bac      	ldr	r3, [pc, #688]	; (8015228 <_dtoa_r+0x310>)
 8014f76:	bfbc      	itt	lt
 8014f78:	2201      	movlt	r2, #1
 8014f7a:	f8c8 2000 	strlt.w	r2, [r8]
 8014f7e:	43ab      	bics	r3, r5
 8014f80:	d11b      	bne.n	8014fba <_dtoa_r+0xa2>
 8014f82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014f84:	f242 730f 	movw	r3, #9999	; 0x270f
 8014f88:	6013      	str	r3, [r2, #0]
 8014f8a:	9b02      	ldr	r3, [sp, #8]
 8014f8c:	b923      	cbnz	r3, 8014f98 <_dtoa_r+0x80>
 8014f8e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014f92:	2d00      	cmp	r5, #0
 8014f94:	f000 84dd 	beq.w	8015952 <_dtoa_r+0xa3a>
 8014f98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f9a:	b953      	cbnz	r3, 8014fb2 <_dtoa_r+0x9a>
 8014f9c:	4ba3      	ldr	r3, [pc, #652]	; (801522c <_dtoa_r+0x314>)
 8014f9e:	e020      	b.n	8014fe2 <_dtoa_r+0xca>
 8014fa0:	4ba3      	ldr	r3, [pc, #652]	; (8015230 <_dtoa_r+0x318>)
 8014fa2:	9304      	str	r3, [sp, #16]
 8014fa4:	3308      	adds	r3, #8
 8014fa6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014fa8:	6013      	str	r3, [r2, #0]
 8014faa:	9804      	ldr	r0, [sp, #16]
 8014fac:	b015      	add	sp, #84	; 0x54
 8014fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb2:	4b9e      	ldr	r3, [pc, #632]	; (801522c <_dtoa_r+0x314>)
 8014fb4:	9304      	str	r3, [sp, #16]
 8014fb6:	3303      	adds	r3, #3
 8014fb8:	e7f5      	b.n	8014fa6 <_dtoa_r+0x8e>
 8014fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014fbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014fca:	d10c      	bne.n	8014fe6 <_dtoa_r+0xce>
 8014fcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014fce:	2301      	movs	r3, #1
 8014fd0:	6013      	str	r3, [r2, #0]
 8014fd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	f000 84b9 	beq.w	801594c <_dtoa_r+0xa34>
 8014fda:	4b96      	ldr	r3, [pc, #600]	; (8015234 <_dtoa_r+0x31c>)
 8014fdc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014fde:	6013      	str	r3, [r2, #0]
 8014fe0:	3b01      	subs	r3, #1
 8014fe2:	9304      	str	r3, [sp, #16]
 8014fe4:	e7e1      	b.n	8014faa <_dtoa_r+0x92>
 8014fe6:	a913      	add	r1, sp, #76	; 0x4c
 8014fe8:	aa12      	add	r2, sp, #72	; 0x48
 8014fea:	ed9d 0b04 	vldr	d0, [sp, #16]
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f001 fc3e 	bl	8016870 <__d2b>
 8014ff4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8014ff8:	9001      	str	r0, [sp, #4]
 8014ffa:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014ffc:	2e00      	cmp	r6, #0
 8014ffe:	d046      	beq.n	801508e <_dtoa_r+0x176>
 8015000:	9805      	ldr	r0, [sp, #20]
 8015002:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8015006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801500a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801500e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015012:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8015016:	2700      	movs	r7, #0
 8015018:	ee07 aa90 	vmov	s15, sl
 801501c:	ec43 2b16 	vmov	d6, r2, r3
 8015020:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015024:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8015210 <_dtoa_r+0x2f8>
 8015028:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801502c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8015030:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8015218 <_dtoa_r+0x300>
 8015034:	eea7 6b04 	vfma.f64	d6, d7, d4
 8015038:	eeb0 7b46 	vmov.f64	d7, d6
 801503c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8015220 <_dtoa_r+0x308>
 8015040:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015044:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015048:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801504c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015050:	ee16 ba90 	vmov	fp, s13
 8015054:	d508      	bpl.n	8015068 <_dtoa_r+0x150>
 8015056:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801505a:	eeb4 6b47 	vcmp.f64	d6, d7
 801505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015062:	bf18      	it	ne
 8015064:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8015068:	f1bb 0f16 	cmp.w	fp, #22
 801506c:	d834      	bhi.n	80150d8 <_dtoa_r+0x1c0>
 801506e:	4b72      	ldr	r3, [pc, #456]	; (8015238 <_dtoa_r+0x320>)
 8015070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015074:	ed93 7b00 	vldr	d7, [r3]
 8015078:	ed9d 6b02 	vldr	d6, [sp, #8]
 801507c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015084:	dd01      	ble.n	801508a <_dtoa_r+0x172>
 8015086:	f10b 3bff 	add.w	fp, fp, #4294967295
 801508a:	2300      	movs	r3, #0
 801508c:	e025      	b.n	80150da <_dtoa_r+0x1c2>
 801508e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015090:	eb01 0a03 	add.w	sl, r1, r3
 8015094:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8015098:	2b20      	cmp	r3, #32
 801509a:	dd17      	ble.n	80150cc <_dtoa_r+0x1b4>
 801509c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80150a0:	9a02      	ldr	r2, [sp, #8]
 80150a2:	409d      	lsls	r5, r3
 80150a4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80150a8:	fa22 f303 	lsr.w	r3, r2, r3
 80150ac:	432b      	orrs	r3, r5
 80150ae:	ee07 3a90 	vmov	s15, r3
 80150b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80150b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80150ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80150be:	9805      	ldr	r0, [sp, #20]
 80150c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150c4:	2701      	movs	r7, #1
 80150c6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80150ca:	e7a5      	b.n	8015018 <_dtoa_r+0x100>
 80150cc:	9a02      	ldr	r2, [sp, #8]
 80150ce:	f1c3 0320 	rsb	r3, r3, #32
 80150d2:	fa02 f303 	lsl.w	r3, r2, r3
 80150d6:	e7ea      	b.n	80150ae <_dtoa_r+0x196>
 80150d8:	2301      	movs	r3, #1
 80150da:	eba1 0a0a 	sub.w	sl, r1, sl
 80150de:	9310      	str	r3, [sp, #64]	; 0x40
 80150e0:	f1ba 0301 	subs.w	r3, sl, #1
 80150e4:	9307      	str	r3, [sp, #28]
 80150e6:	bf43      	ittte	mi
 80150e8:	2300      	movmi	r3, #0
 80150ea:	f1ca 0a01 	rsbmi	sl, sl, #1
 80150ee:	9307      	strmi	r3, [sp, #28]
 80150f0:	f04f 0a00 	movpl.w	sl, #0
 80150f4:	f1bb 0f00 	cmp.w	fp, #0
 80150f8:	db19      	blt.n	801512e <_dtoa_r+0x216>
 80150fa:	9b07      	ldr	r3, [sp, #28]
 80150fc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015100:	445b      	add	r3, fp
 8015102:	9307      	str	r3, [sp, #28]
 8015104:	f04f 0800 	mov.w	r8, #0
 8015108:	9b08      	ldr	r3, [sp, #32]
 801510a:	2b09      	cmp	r3, #9
 801510c:	d866      	bhi.n	80151dc <_dtoa_r+0x2c4>
 801510e:	2b05      	cmp	r3, #5
 8015110:	bfc4      	itt	gt
 8015112:	3b04      	subgt	r3, #4
 8015114:	9308      	strgt	r3, [sp, #32]
 8015116:	9b08      	ldr	r3, [sp, #32]
 8015118:	f1a3 0302 	sub.w	r3, r3, #2
 801511c:	bfcc      	ite	gt
 801511e:	2500      	movgt	r5, #0
 8015120:	2501      	movle	r5, #1
 8015122:	2b03      	cmp	r3, #3
 8015124:	d866      	bhi.n	80151f4 <_dtoa_r+0x2dc>
 8015126:	e8df f003 	tbb	[pc, r3]
 801512a:	5755      	.short	0x5755
 801512c:	4909      	.short	0x4909
 801512e:	2300      	movs	r3, #0
 8015130:	ebaa 0a0b 	sub.w	sl, sl, fp
 8015134:	f1cb 0800 	rsb	r8, fp, #0
 8015138:	930b      	str	r3, [sp, #44]	; 0x2c
 801513a:	e7e5      	b.n	8015108 <_dtoa_r+0x1f0>
 801513c:	2301      	movs	r3, #1
 801513e:	9309      	str	r3, [sp, #36]	; 0x24
 8015140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015142:	2b00      	cmp	r3, #0
 8015144:	dd59      	ble.n	80151fa <_dtoa_r+0x2e2>
 8015146:	9306      	str	r3, [sp, #24]
 8015148:	4699      	mov	r9, r3
 801514a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801514c:	2200      	movs	r2, #0
 801514e:	6072      	str	r2, [r6, #4]
 8015150:	2204      	movs	r2, #4
 8015152:	f102 0014 	add.w	r0, r2, #20
 8015156:	4298      	cmp	r0, r3
 8015158:	6871      	ldr	r1, [r6, #4]
 801515a:	d953      	bls.n	8015204 <_dtoa_r+0x2ec>
 801515c:	4620      	mov	r0, r4
 801515e:	f001 f845 	bl	80161ec <_Balloc>
 8015162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015164:	6030      	str	r0, [r6, #0]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	9304      	str	r3, [sp, #16]
 801516a:	f1b9 0f0e 	cmp.w	r9, #14
 801516e:	f200 80c2 	bhi.w	80152f6 <_dtoa_r+0x3de>
 8015172:	2d00      	cmp	r5, #0
 8015174:	f000 80bf 	beq.w	80152f6 <_dtoa_r+0x3de>
 8015178:	ed9d 7b02 	vldr	d7, [sp, #8]
 801517c:	f1bb 0f00 	cmp.w	fp, #0
 8015180:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8015184:	f340 80e6 	ble.w	8015354 <_dtoa_r+0x43c>
 8015188:	4a2b      	ldr	r2, [pc, #172]	; (8015238 <_dtoa_r+0x320>)
 801518a:	f00b 030f 	and.w	r3, fp, #15
 801518e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015192:	ed93 7b00 	vldr	d7, [r3]
 8015196:	ea4f 132b 	mov.w	r3, fp, asr #4
 801519a:	06da      	lsls	r2, r3, #27
 801519c:	f140 80d8 	bpl.w	8015350 <_dtoa_r+0x438>
 80151a0:	4a26      	ldr	r2, [pc, #152]	; (801523c <_dtoa_r+0x324>)
 80151a2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80151a6:	ed92 6b08 	vldr	d6, [r2, #32]
 80151aa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80151ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80151b2:	f003 030f 	and.w	r3, r3, #15
 80151b6:	2203      	movs	r2, #3
 80151b8:	4920      	ldr	r1, [pc, #128]	; (801523c <_dtoa_r+0x324>)
 80151ba:	e04a      	b.n	8015252 <_dtoa_r+0x33a>
 80151bc:	2301      	movs	r3, #1
 80151be:	9309      	str	r3, [sp, #36]	; 0x24
 80151c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151c2:	445b      	add	r3, fp
 80151c4:	f103 0901 	add.w	r9, r3, #1
 80151c8:	9306      	str	r3, [sp, #24]
 80151ca:	464b      	mov	r3, r9
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	bfb8      	it	lt
 80151d0:	2301      	movlt	r3, #1
 80151d2:	e7ba      	b.n	801514a <_dtoa_r+0x232>
 80151d4:	2300      	movs	r3, #0
 80151d6:	e7b2      	b.n	801513e <_dtoa_r+0x226>
 80151d8:	2300      	movs	r3, #0
 80151da:	e7f0      	b.n	80151be <_dtoa_r+0x2a6>
 80151dc:	2501      	movs	r5, #1
 80151de:	2300      	movs	r3, #0
 80151e0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80151e4:	f04f 33ff 	mov.w	r3, #4294967295
 80151e8:	9306      	str	r3, [sp, #24]
 80151ea:	4699      	mov	r9, r3
 80151ec:	2200      	movs	r2, #0
 80151ee:	2312      	movs	r3, #18
 80151f0:	920a      	str	r2, [sp, #40]	; 0x28
 80151f2:	e7aa      	b.n	801514a <_dtoa_r+0x232>
 80151f4:	2301      	movs	r3, #1
 80151f6:	9309      	str	r3, [sp, #36]	; 0x24
 80151f8:	e7f4      	b.n	80151e4 <_dtoa_r+0x2cc>
 80151fa:	2301      	movs	r3, #1
 80151fc:	9306      	str	r3, [sp, #24]
 80151fe:	4699      	mov	r9, r3
 8015200:	461a      	mov	r2, r3
 8015202:	e7f5      	b.n	80151f0 <_dtoa_r+0x2d8>
 8015204:	3101      	adds	r1, #1
 8015206:	6071      	str	r1, [r6, #4]
 8015208:	0052      	lsls	r2, r2, #1
 801520a:	e7a2      	b.n	8015152 <_dtoa_r+0x23a>
 801520c:	f3af 8000 	nop.w
 8015210:	636f4361 	.word	0x636f4361
 8015214:	3fd287a7 	.word	0x3fd287a7
 8015218:	8b60c8b3 	.word	0x8b60c8b3
 801521c:	3fc68a28 	.word	0x3fc68a28
 8015220:	509f79fb 	.word	0x509f79fb
 8015224:	3fd34413 	.word	0x3fd34413
 8015228:	7ff00000 	.word	0x7ff00000
 801522c:	08018981 	.word	0x08018981
 8015230:	08018978 	.word	0x08018978
 8015234:	080188f9 	.word	0x080188f9
 8015238:	08018a20 	.word	0x08018a20
 801523c:	080189f8 	.word	0x080189f8
 8015240:	07de      	lsls	r6, r3, #31
 8015242:	d504      	bpl.n	801524e <_dtoa_r+0x336>
 8015244:	ed91 6b00 	vldr	d6, [r1]
 8015248:	3201      	adds	r2, #1
 801524a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801524e:	105b      	asrs	r3, r3, #1
 8015250:	3108      	adds	r1, #8
 8015252:	2b00      	cmp	r3, #0
 8015254:	d1f4      	bne.n	8015240 <_dtoa_r+0x328>
 8015256:	ed9d 6b02 	vldr	d6, [sp, #8]
 801525a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801525e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015262:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015264:	2b00      	cmp	r3, #0
 8015266:	f000 80a7 	beq.w	80153b8 <_dtoa_r+0x4a0>
 801526a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801526e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015272:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527a:	f140 809d 	bpl.w	80153b8 <_dtoa_r+0x4a0>
 801527e:	f1b9 0f00 	cmp.w	r9, #0
 8015282:	f000 8099 	beq.w	80153b8 <_dtoa_r+0x4a0>
 8015286:	9b06      	ldr	r3, [sp, #24]
 8015288:	2b00      	cmp	r3, #0
 801528a:	dd30      	ble.n	80152ee <_dtoa_r+0x3d6>
 801528c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015290:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015294:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015298:	9d06      	ldr	r5, [sp, #24]
 801529a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801529e:	3201      	adds	r2, #1
 80152a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80152a4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80152a8:	ee07 2a90 	vmov	s15, r2
 80152ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80152b0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80152b4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80152b8:	9a03      	ldr	r2, [sp, #12]
 80152ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152be:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80152c2:	2d00      	cmp	r5, #0
 80152c4:	d17b      	bne.n	80153be <_dtoa_r+0x4a6>
 80152c6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80152ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80152ce:	ec41 0b17 	vmov	d7, r0, r1
 80152d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80152d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152da:	f300 8253 	bgt.w	8015784 <_dtoa_r+0x86c>
 80152de:	eeb1 7b47 	vneg.f64	d7, d7
 80152e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80152e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ea:	f100 8249 	bmi.w	8015780 <_dtoa_r+0x868>
 80152ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80152f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80152f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	f2c0 8119 	blt.w	8015530 <_dtoa_r+0x618>
 80152fe:	f1bb 0f0e 	cmp.w	fp, #14
 8015302:	f300 8115 	bgt.w	8015530 <_dtoa_r+0x618>
 8015306:	4bc3      	ldr	r3, [pc, #780]	; (8015614 <_dtoa_r+0x6fc>)
 8015308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801530c:	ed93 6b00 	vldr	d6, [r3]
 8015310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015312:	2b00      	cmp	r3, #0
 8015314:	f280 80ba 	bge.w	801548c <_dtoa_r+0x574>
 8015318:	f1b9 0f00 	cmp.w	r9, #0
 801531c:	f300 80b6 	bgt.w	801548c <_dtoa_r+0x574>
 8015320:	f040 822d 	bne.w	801577e <_dtoa_r+0x866>
 8015324:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015328:	ee26 6b07 	vmul.f64	d6, d6, d7
 801532c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015330:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015338:	464d      	mov	r5, r9
 801533a:	464f      	mov	r7, r9
 801533c:	f280 8204 	bge.w	8015748 <_dtoa_r+0x830>
 8015340:	9b04      	ldr	r3, [sp, #16]
 8015342:	9a04      	ldr	r2, [sp, #16]
 8015344:	1c5e      	adds	r6, r3, #1
 8015346:	2331      	movs	r3, #49	; 0x31
 8015348:	7013      	strb	r3, [r2, #0]
 801534a:	f10b 0b01 	add.w	fp, fp, #1
 801534e:	e1ff      	b.n	8015750 <_dtoa_r+0x838>
 8015350:	2202      	movs	r2, #2
 8015352:	e731      	b.n	80151b8 <_dtoa_r+0x2a0>
 8015354:	d02e      	beq.n	80153b4 <_dtoa_r+0x49c>
 8015356:	f1cb 0300 	rsb	r3, fp, #0
 801535a:	4aae      	ldr	r2, [pc, #696]	; (8015614 <_dtoa_r+0x6fc>)
 801535c:	f003 010f 	and.w	r1, r3, #15
 8015360:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015364:	ed92 7b00 	vldr	d7, [r2]
 8015368:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801536c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015370:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015374:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8015378:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801537c:	49a6      	ldr	r1, [pc, #664]	; (8015618 <_dtoa_r+0x700>)
 801537e:	111b      	asrs	r3, r3, #4
 8015380:	2000      	movs	r0, #0
 8015382:	2202      	movs	r2, #2
 8015384:	b93b      	cbnz	r3, 8015396 <_dtoa_r+0x47e>
 8015386:	2800      	cmp	r0, #0
 8015388:	f43f af6b 	beq.w	8015262 <_dtoa_r+0x34a>
 801538c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015394:	e765      	b.n	8015262 <_dtoa_r+0x34a>
 8015396:	07dd      	lsls	r5, r3, #31
 8015398:	d509      	bpl.n	80153ae <_dtoa_r+0x496>
 801539a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801539e:	ed91 7b00 	vldr	d7, [r1]
 80153a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80153a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80153aa:	3201      	adds	r2, #1
 80153ac:	2001      	movs	r0, #1
 80153ae:	105b      	asrs	r3, r3, #1
 80153b0:	3108      	adds	r1, #8
 80153b2:	e7e7      	b.n	8015384 <_dtoa_r+0x46c>
 80153b4:	2202      	movs	r2, #2
 80153b6:	e754      	b.n	8015262 <_dtoa_r+0x34a>
 80153b8:	465b      	mov	r3, fp
 80153ba:	464d      	mov	r5, r9
 80153bc:	e770      	b.n	80152a0 <_dtoa_r+0x388>
 80153be:	4a95      	ldr	r2, [pc, #596]	; (8015614 <_dtoa_r+0x6fc>)
 80153c0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80153c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80153c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153ca:	ec41 0b17 	vmov	d7, r0, r1
 80153ce:	b35a      	cbz	r2, 8015428 <_dtoa_r+0x510>
 80153d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80153d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80153d8:	9e04      	ldr	r6, [sp, #16]
 80153da:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80153de:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80153e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80153e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80153ea:	ee14 2a90 	vmov	r2, s9
 80153ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80153f2:	3230      	adds	r2, #48	; 0x30
 80153f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80153f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80153fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015400:	f806 2b01 	strb.w	r2, [r6], #1
 8015404:	d43b      	bmi.n	801547e <_dtoa_r+0x566>
 8015406:	ee32 5b46 	vsub.f64	d5, d2, d6
 801540a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015412:	d472      	bmi.n	80154fa <_dtoa_r+0x5e2>
 8015414:	9a04      	ldr	r2, [sp, #16]
 8015416:	1ab2      	subs	r2, r6, r2
 8015418:	4295      	cmp	r5, r2
 801541a:	f77f af68 	ble.w	80152ee <_dtoa_r+0x3d6>
 801541e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015422:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015426:	e7de      	b.n	80153e6 <_dtoa_r+0x4ce>
 8015428:	9a04      	ldr	r2, [sp, #16]
 801542a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801542e:	1956      	adds	r6, r2, r5
 8015430:	4611      	mov	r1, r2
 8015432:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015436:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801543a:	ee14 2a90 	vmov	r2, s9
 801543e:	3230      	adds	r2, #48	; 0x30
 8015440:	f801 2b01 	strb.w	r2, [r1], #1
 8015444:	42b1      	cmp	r1, r6
 8015446:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801544a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801544e:	d11a      	bne.n	8015486 <_dtoa_r+0x56e>
 8015450:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015454:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015458:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801545c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015460:	dc4b      	bgt.n	80154fa <_dtoa_r+0x5e2>
 8015462:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015466:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546e:	f57f af3e 	bpl.w	80152ee <_dtoa_r+0x3d6>
 8015472:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015476:	2a30      	cmp	r2, #48	; 0x30
 8015478:	f106 31ff 	add.w	r1, r6, #4294967295
 801547c:	d001      	beq.n	8015482 <_dtoa_r+0x56a>
 801547e:	469b      	mov	fp, r3
 8015480:	e02a      	b.n	80154d8 <_dtoa_r+0x5c0>
 8015482:	460e      	mov	r6, r1
 8015484:	e7f5      	b.n	8015472 <_dtoa_r+0x55a>
 8015486:	ee26 6b03 	vmul.f64	d6, d6, d3
 801548a:	e7d4      	b.n	8015436 <_dtoa_r+0x51e>
 801548c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015490:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015494:	9e04      	ldr	r6, [sp, #16]
 8015496:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801549a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801549e:	ee15 3a10 	vmov	r3, s10
 80154a2:	3330      	adds	r3, #48	; 0x30
 80154a4:	f806 3b01 	strb.w	r3, [r6], #1
 80154a8:	9b04      	ldr	r3, [sp, #16]
 80154aa:	1af3      	subs	r3, r6, r3
 80154ac:	4599      	cmp	r9, r3
 80154ae:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80154b2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80154b6:	d133      	bne.n	8015520 <_dtoa_r+0x608>
 80154b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80154bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80154c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c4:	dc18      	bgt.n	80154f8 <_dtoa_r+0x5e0>
 80154c6:	eeb4 7b46 	vcmp.f64	d7, d6
 80154ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ce:	d103      	bne.n	80154d8 <_dtoa_r+0x5c0>
 80154d0:	ee15 3a10 	vmov	r3, s10
 80154d4:	07db      	lsls	r3, r3, #31
 80154d6:	d40f      	bmi.n	80154f8 <_dtoa_r+0x5e0>
 80154d8:	9901      	ldr	r1, [sp, #4]
 80154da:	4620      	mov	r0, r4
 80154dc:	f000 feba 	bl	8016254 <_Bfree>
 80154e0:	2300      	movs	r3, #0
 80154e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80154e4:	7033      	strb	r3, [r6, #0]
 80154e6:	f10b 0301 	add.w	r3, fp, #1
 80154ea:	6013      	str	r3, [r2, #0]
 80154ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	f43f ad5b 	beq.w	8014faa <_dtoa_r+0x92>
 80154f4:	601e      	str	r6, [r3, #0]
 80154f6:	e558      	b.n	8014faa <_dtoa_r+0x92>
 80154f8:	465b      	mov	r3, fp
 80154fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80154fe:	2939      	cmp	r1, #57	; 0x39
 8015500:	f106 32ff 	add.w	r2, r6, #4294967295
 8015504:	d106      	bne.n	8015514 <_dtoa_r+0x5fc>
 8015506:	9904      	ldr	r1, [sp, #16]
 8015508:	4291      	cmp	r1, r2
 801550a:	d107      	bne.n	801551c <_dtoa_r+0x604>
 801550c:	2230      	movs	r2, #48	; 0x30
 801550e:	700a      	strb	r2, [r1, #0]
 8015510:	3301      	adds	r3, #1
 8015512:	460a      	mov	r2, r1
 8015514:	7811      	ldrb	r1, [r2, #0]
 8015516:	3101      	adds	r1, #1
 8015518:	7011      	strb	r1, [r2, #0]
 801551a:	e7b0      	b.n	801547e <_dtoa_r+0x566>
 801551c:	4616      	mov	r6, r2
 801551e:	e7ec      	b.n	80154fa <_dtoa_r+0x5e2>
 8015520:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015524:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801552c:	d1b3      	bne.n	8015496 <_dtoa_r+0x57e>
 801552e:	e7d3      	b.n	80154d8 <_dtoa_r+0x5c0>
 8015530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015532:	2a00      	cmp	r2, #0
 8015534:	f000 808d 	beq.w	8015652 <_dtoa_r+0x73a>
 8015538:	9a08      	ldr	r2, [sp, #32]
 801553a:	2a01      	cmp	r2, #1
 801553c:	dc72      	bgt.n	8015624 <_dtoa_r+0x70c>
 801553e:	2f00      	cmp	r7, #0
 8015540:	d06c      	beq.n	801561c <_dtoa_r+0x704>
 8015542:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015546:	4645      	mov	r5, r8
 8015548:	4656      	mov	r6, sl
 801554a:	9a07      	ldr	r2, [sp, #28]
 801554c:	2101      	movs	r1, #1
 801554e:	441a      	add	r2, r3
 8015550:	4620      	mov	r0, r4
 8015552:	449a      	add	sl, r3
 8015554:	9207      	str	r2, [sp, #28]
 8015556:	f000 ff5b 	bl	8016410 <__i2b>
 801555a:	4607      	mov	r7, r0
 801555c:	2e00      	cmp	r6, #0
 801555e:	dd0b      	ble.n	8015578 <_dtoa_r+0x660>
 8015560:	9b07      	ldr	r3, [sp, #28]
 8015562:	2b00      	cmp	r3, #0
 8015564:	dd08      	ble.n	8015578 <_dtoa_r+0x660>
 8015566:	42b3      	cmp	r3, r6
 8015568:	9a07      	ldr	r2, [sp, #28]
 801556a:	bfa8      	it	ge
 801556c:	4633      	movge	r3, r6
 801556e:	ebaa 0a03 	sub.w	sl, sl, r3
 8015572:	1af6      	subs	r6, r6, r3
 8015574:	1ad3      	subs	r3, r2, r3
 8015576:	9307      	str	r3, [sp, #28]
 8015578:	f1b8 0f00 	cmp.w	r8, #0
 801557c:	d01d      	beq.n	80155ba <_dtoa_r+0x6a2>
 801557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015580:	2b00      	cmp	r3, #0
 8015582:	d06a      	beq.n	801565a <_dtoa_r+0x742>
 8015584:	b18d      	cbz	r5, 80155aa <_dtoa_r+0x692>
 8015586:	4639      	mov	r1, r7
 8015588:	462a      	mov	r2, r5
 801558a:	4620      	mov	r0, r4
 801558c:	f000 ffe0 	bl	8016550 <__pow5mult>
 8015590:	9a01      	ldr	r2, [sp, #4]
 8015592:	4601      	mov	r1, r0
 8015594:	4607      	mov	r7, r0
 8015596:	4620      	mov	r0, r4
 8015598:	f000 ff43 	bl	8016422 <__multiply>
 801559c:	9901      	ldr	r1, [sp, #4]
 801559e:	900c      	str	r0, [sp, #48]	; 0x30
 80155a0:	4620      	mov	r0, r4
 80155a2:	f000 fe57 	bl	8016254 <_Bfree>
 80155a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155a8:	9301      	str	r3, [sp, #4]
 80155aa:	ebb8 0205 	subs.w	r2, r8, r5
 80155ae:	d004      	beq.n	80155ba <_dtoa_r+0x6a2>
 80155b0:	9901      	ldr	r1, [sp, #4]
 80155b2:	4620      	mov	r0, r4
 80155b4:	f000 ffcc 	bl	8016550 <__pow5mult>
 80155b8:	9001      	str	r0, [sp, #4]
 80155ba:	2101      	movs	r1, #1
 80155bc:	4620      	mov	r0, r4
 80155be:	f000 ff27 	bl	8016410 <__i2b>
 80155c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155c4:	4605      	mov	r5, r0
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f000 81ca 	beq.w	8015960 <_dtoa_r+0xa48>
 80155cc:	461a      	mov	r2, r3
 80155ce:	4601      	mov	r1, r0
 80155d0:	4620      	mov	r0, r4
 80155d2:	f000 ffbd 	bl	8016550 <__pow5mult>
 80155d6:	9b08      	ldr	r3, [sp, #32]
 80155d8:	2b01      	cmp	r3, #1
 80155da:	4605      	mov	r5, r0
 80155dc:	dc44      	bgt.n	8015668 <_dtoa_r+0x750>
 80155de:	9b02      	ldr	r3, [sp, #8]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d13c      	bne.n	801565e <_dtoa_r+0x746>
 80155e4:	9b03      	ldr	r3, [sp, #12]
 80155e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d137      	bne.n	801565e <_dtoa_r+0x746>
 80155ee:	9b03      	ldr	r3, [sp, #12]
 80155f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155f4:	0d1b      	lsrs	r3, r3, #20
 80155f6:	051b      	lsls	r3, r3, #20
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d033      	beq.n	8015664 <_dtoa_r+0x74c>
 80155fc:	9b07      	ldr	r3, [sp, #28]
 80155fe:	3301      	adds	r3, #1
 8015600:	f10a 0a01 	add.w	sl, sl, #1
 8015604:	9307      	str	r3, [sp, #28]
 8015606:	f04f 0801 	mov.w	r8, #1
 801560a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801560c:	bb73      	cbnz	r3, 801566c <_dtoa_r+0x754>
 801560e:	2001      	movs	r0, #1
 8015610:	e034      	b.n	801567c <_dtoa_r+0x764>
 8015612:	bf00      	nop
 8015614:	08018a20 	.word	0x08018a20
 8015618:	080189f8 	.word	0x080189f8
 801561c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801561e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015622:	e790      	b.n	8015546 <_dtoa_r+0x62e>
 8015624:	f109 35ff 	add.w	r5, r9, #4294967295
 8015628:	45a8      	cmp	r8, r5
 801562a:	bfbf      	itttt	lt
 801562c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801562e:	eba5 0808 	sublt.w	r8, r5, r8
 8015632:	4443      	addlt	r3, r8
 8015634:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8015636:	bfb6      	itet	lt
 8015638:	46a8      	movlt	r8, r5
 801563a:	eba8 0505 	subge.w	r5, r8, r5
 801563e:	2500      	movlt	r5, #0
 8015640:	f1b9 0f00 	cmp.w	r9, #0
 8015644:	bfb9      	ittee	lt
 8015646:	ebaa 0609 	sublt.w	r6, sl, r9
 801564a:	2300      	movlt	r3, #0
 801564c:	4656      	movge	r6, sl
 801564e:	464b      	movge	r3, r9
 8015650:	e77b      	b.n	801554a <_dtoa_r+0x632>
 8015652:	4645      	mov	r5, r8
 8015654:	4656      	mov	r6, sl
 8015656:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015658:	e780      	b.n	801555c <_dtoa_r+0x644>
 801565a:	4642      	mov	r2, r8
 801565c:	e7a8      	b.n	80155b0 <_dtoa_r+0x698>
 801565e:	f04f 0800 	mov.w	r8, #0
 8015662:	e7d2      	b.n	801560a <_dtoa_r+0x6f2>
 8015664:	4698      	mov	r8, r3
 8015666:	e7d0      	b.n	801560a <_dtoa_r+0x6f2>
 8015668:	f04f 0800 	mov.w	r8, #0
 801566c:	692b      	ldr	r3, [r5, #16]
 801566e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015672:	6918      	ldr	r0, [r3, #16]
 8015674:	f000 fe7e 	bl	8016374 <__hi0bits>
 8015678:	f1c0 0020 	rsb	r0, r0, #32
 801567c:	9b07      	ldr	r3, [sp, #28]
 801567e:	4418      	add	r0, r3
 8015680:	f010 001f 	ands.w	r0, r0, #31
 8015684:	d047      	beq.n	8015716 <_dtoa_r+0x7fe>
 8015686:	f1c0 0320 	rsb	r3, r0, #32
 801568a:	2b04      	cmp	r3, #4
 801568c:	dd3b      	ble.n	8015706 <_dtoa_r+0x7ee>
 801568e:	9b07      	ldr	r3, [sp, #28]
 8015690:	f1c0 001c 	rsb	r0, r0, #28
 8015694:	4482      	add	sl, r0
 8015696:	4406      	add	r6, r0
 8015698:	4403      	add	r3, r0
 801569a:	9307      	str	r3, [sp, #28]
 801569c:	f1ba 0f00 	cmp.w	sl, #0
 80156a0:	dd05      	ble.n	80156ae <_dtoa_r+0x796>
 80156a2:	4652      	mov	r2, sl
 80156a4:	9901      	ldr	r1, [sp, #4]
 80156a6:	4620      	mov	r0, r4
 80156a8:	f000 ffa0 	bl	80165ec <__lshift>
 80156ac:	9001      	str	r0, [sp, #4]
 80156ae:	9b07      	ldr	r3, [sp, #28]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	dd05      	ble.n	80156c0 <_dtoa_r+0x7a8>
 80156b4:	4629      	mov	r1, r5
 80156b6:	461a      	mov	r2, r3
 80156b8:	4620      	mov	r0, r4
 80156ba:	f000 ff97 	bl	80165ec <__lshift>
 80156be:	4605      	mov	r5, r0
 80156c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156c2:	b353      	cbz	r3, 801571a <_dtoa_r+0x802>
 80156c4:	4629      	mov	r1, r5
 80156c6:	9801      	ldr	r0, [sp, #4]
 80156c8:	f000 ffe4 	bl	8016694 <__mcmp>
 80156cc:	2800      	cmp	r0, #0
 80156ce:	da24      	bge.n	801571a <_dtoa_r+0x802>
 80156d0:	2300      	movs	r3, #0
 80156d2:	220a      	movs	r2, #10
 80156d4:	9901      	ldr	r1, [sp, #4]
 80156d6:	4620      	mov	r0, r4
 80156d8:	f000 fdd3 	bl	8016282 <__multadd>
 80156dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156de:	9001      	str	r0, [sp, #4]
 80156e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	f000 8142 	beq.w	801596e <_dtoa_r+0xa56>
 80156ea:	2300      	movs	r3, #0
 80156ec:	4639      	mov	r1, r7
 80156ee:	220a      	movs	r2, #10
 80156f0:	4620      	mov	r0, r4
 80156f2:	f000 fdc6 	bl	8016282 <__multadd>
 80156f6:	9b06      	ldr	r3, [sp, #24]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	4607      	mov	r7, r0
 80156fc:	dc4b      	bgt.n	8015796 <_dtoa_r+0x87e>
 80156fe:	9b08      	ldr	r3, [sp, #32]
 8015700:	2b02      	cmp	r3, #2
 8015702:	dd48      	ble.n	8015796 <_dtoa_r+0x87e>
 8015704:	e011      	b.n	801572a <_dtoa_r+0x812>
 8015706:	d0c9      	beq.n	801569c <_dtoa_r+0x784>
 8015708:	9a07      	ldr	r2, [sp, #28]
 801570a:	331c      	adds	r3, #28
 801570c:	441a      	add	r2, r3
 801570e:	449a      	add	sl, r3
 8015710:	441e      	add	r6, r3
 8015712:	4613      	mov	r3, r2
 8015714:	e7c1      	b.n	801569a <_dtoa_r+0x782>
 8015716:	4603      	mov	r3, r0
 8015718:	e7f6      	b.n	8015708 <_dtoa_r+0x7f0>
 801571a:	f1b9 0f00 	cmp.w	r9, #0
 801571e:	dc34      	bgt.n	801578a <_dtoa_r+0x872>
 8015720:	9b08      	ldr	r3, [sp, #32]
 8015722:	2b02      	cmp	r3, #2
 8015724:	dd31      	ble.n	801578a <_dtoa_r+0x872>
 8015726:	f8cd 9018 	str.w	r9, [sp, #24]
 801572a:	9b06      	ldr	r3, [sp, #24]
 801572c:	b963      	cbnz	r3, 8015748 <_dtoa_r+0x830>
 801572e:	4629      	mov	r1, r5
 8015730:	2205      	movs	r2, #5
 8015732:	4620      	mov	r0, r4
 8015734:	f000 fda5 	bl	8016282 <__multadd>
 8015738:	4601      	mov	r1, r0
 801573a:	4605      	mov	r5, r0
 801573c:	9801      	ldr	r0, [sp, #4]
 801573e:	f000 ffa9 	bl	8016694 <__mcmp>
 8015742:	2800      	cmp	r0, #0
 8015744:	f73f adfc 	bgt.w	8015340 <_dtoa_r+0x428>
 8015748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801574a:	9e04      	ldr	r6, [sp, #16]
 801574c:	ea6f 0b03 	mvn.w	fp, r3
 8015750:	f04f 0900 	mov.w	r9, #0
 8015754:	4629      	mov	r1, r5
 8015756:	4620      	mov	r0, r4
 8015758:	f000 fd7c 	bl	8016254 <_Bfree>
 801575c:	2f00      	cmp	r7, #0
 801575e:	f43f aebb 	beq.w	80154d8 <_dtoa_r+0x5c0>
 8015762:	f1b9 0f00 	cmp.w	r9, #0
 8015766:	d005      	beq.n	8015774 <_dtoa_r+0x85c>
 8015768:	45b9      	cmp	r9, r7
 801576a:	d003      	beq.n	8015774 <_dtoa_r+0x85c>
 801576c:	4649      	mov	r1, r9
 801576e:	4620      	mov	r0, r4
 8015770:	f000 fd70 	bl	8016254 <_Bfree>
 8015774:	4639      	mov	r1, r7
 8015776:	4620      	mov	r0, r4
 8015778:	f000 fd6c 	bl	8016254 <_Bfree>
 801577c:	e6ac      	b.n	80154d8 <_dtoa_r+0x5c0>
 801577e:	2500      	movs	r5, #0
 8015780:	462f      	mov	r7, r5
 8015782:	e7e1      	b.n	8015748 <_dtoa_r+0x830>
 8015784:	469b      	mov	fp, r3
 8015786:	462f      	mov	r7, r5
 8015788:	e5da      	b.n	8015340 <_dtoa_r+0x428>
 801578a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578c:	f8cd 9018 	str.w	r9, [sp, #24]
 8015790:	2b00      	cmp	r3, #0
 8015792:	f000 80f3 	beq.w	801597c <_dtoa_r+0xa64>
 8015796:	2e00      	cmp	r6, #0
 8015798:	dd05      	ble.n	80157a6 <_dtoa_r+0x88e>
 801579a:	4639      	mov	r1, r7
 801579c:	4632      	mov	r2, r6
 801579e:	4620      	mov	r0, r4
 80157a0:	f000 ff24 	bl	80165ec <__lshift>
 80157a4:	4607      	mov	r7, r0
 80157a6:	f1b8 0f00 	cmp.w	r8, #0
 80157aa:	d04c      	beq.n	8015846 <_dtoa_r+0x92e>
 80157ac:	6879      	ldr	r1, [r7, #4]
 80157ae:	4620      	mov	r0, r4
 80157b0:	f000 fd1c 	bl	80161ec <_Balloc>
 80157b4:	693a      	ldr	r2, [r7, #16]
 80157b6:	3202      	adds	r2, #2
 80157b8:	4606      	mov	r6, r0
 80157ba:	0092      	lsls	r2, r2, #2
 80157bc:	f107 010c 	add.w	r1, r7, #12
 80157c0:	300c      	adds	r0, #12
 80157c2:	f7fd fe37 	bl	8013434 <memcpy>
 80157c6:	2201      	movs	r2, #1
 80157c8:	4631      	mov	r1, r6
 80157ca:	4620      	mov	r0, r4
 80157cc:	f000 ff0e 	bl	80165ec <__lshift>
 80157d0:	9b02      	ldr	r3, [sp, #8]
 80157d2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80157d6:	f003 0301 	and.w	r3, r3, #1
 80157da:	46b9      	mov	r9, r7
 80157dc:	9307      	str	r3, [sp, #28]
 80157de:	4607      	mov	r7, r0
 80157e0:	4629      	mov	r1, r5
 80157e2:	9801      	ldr	r0, [sp, #4]
 80157e4:	f7ff fb0a 	bl	8014dfc <quorem>
 80157e8:	4649      	mov	r1, r9
 80157ea:	4606      	mov	r6, r0
 80157ec:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80157f0:	9801      	ldr	r0, [sp, #4]
 80157f2:	f000 ff4f 	bl	8016694 <__mcmp>
 80157f6:	463a      	mov	r2, r7
 80157f8:	9002      	str	r0, [sp, #8]
 80157fa:	4629      	mov	r1, r5
 80157fc:	4620      	mov	r0, r4
 80157fe:	f000 ff63 	bl	80166c8 <__mdiff>
 8015802:	68c3      	ldr	r3, [r0, #12]
 8015804:	4602      	mov	r2, r0
 8015806:	bb03      	cbnz	r3, 801584a <_dtoa_r+0x932>
 8015808:	4601      	mov	r1, r0
 801580a:	9009      	str	r0, [sp, #36]	; 0x24
 801580c:	9801      	ldr	r0, [sp, #4]
 801580e:	f000 ff41 	bl	8016694 <__mcmp>
 8015812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015814:	4603      	mov	r3, r0
 8015816:	4611      	mov	r1, r2
 8015818:	4620      	mov	r0, r4
 801581a:	9309      	str	r3, [sp, #36]	; 0x24
 801581c:	f000 fd1a 	bl	8016254 <_Bfree>
 8015820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015822:	b9a3      	cbnz	r3, 801584e <_dtoa_r+0x936>
 8015824:	9a08      	ldr	r2, [sp, #32]
 8015826:	b992      	cbnz	r2, 801584e <_dtoa_r+0x936>
 8015828:	9a07      	ldr	r2, [sp, #28]
 801582a:	b982      	cbnz	r2, 801584e <_dtoa_r+0x936>
 801582c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015830:	d029      	beq.n	8015886 <_dtoa_r+0x96e>
 8015832:	9b02      	ldr	r3, [sp, #8]
 8015834:	2b00      	cmp	r3, #0
 8015836:	dd01      	ble.n	801583c <_dtoa_r+0x924>
 8015838:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801583c:	f10a 0601 	add.w	r6, sl, #1
 8015840:	f88a 8000 	strb.w	r8, [sl]
 8015844:	e786      	b.n	8015754 <_dtoa_r+0x83c>
 8015846:	4638      	mov	r0, r7
 8015848:	e7c2      	b.n	80157d0 <_dtoa_r+0x8b8>
 801584a:	2301      	movs	r3, #1
 801584c:	e7e3      	b.n	8015816 <_dtoa_r+0x8fe>
 801584e:	9a02      	ldr	r2, [sp, #8]
 8015850:	2a00      	cmp	r2, #0
 8015852:	db04      	blt.n	801585e <_dtoa_r+0x946>
 8015854:	d124      	bne.n	80158a0 <_dtoa_r+0x988>
 8015856:	9a08      	ldr	r2, [sp, #32]
 8015858:	bb12      	cbnz	r2, 80158a0 <_dtoa_r+0x988>
 801585a:	9a07      	ldr	r2, [sp, #28]
 801585c:	bb02      	cbnz	r2, 80158a0 <_dtoa_r+0x988>
 801585e:	2b00      	cmp	r3, #0
 8015860:	ddec      	ble.n	801583c <_dtoa_r+0x924>
 8015862:	2201      	movs	r2, #1
 8015864:	9901      	ldr	r1, [sp, #4]
 8015866:	4620      	mov	r0, r4
 8015868:	f000 fec0 	bl	80165ec <__lshift>
 801586c:	4629      	mov	r1, r5
 801586e:	9001      	str	r0, [sp, #4]
 8015870:	f000 ff10 	bl	8016694 <__mcmp>
 8015874:	2800      	cmp	r0, #0
 8015876:	dc03      	bgt.n	8015880 <_dtoa_r+0x968>
 8015878:	d1e0      	bne.n	801583c <_dtoa_r+0x924>
 801587a:	f018 0f01 	tst.w	r8, #1
 801587e:	d0dd      	beq.n	801583c <_dtoa_r+0x924>
 8015880:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015884:	d1d8      	bne.n	8015838 <_dtoa_r+0x920>
 8015886:	2339      	movs	r3, #57	; 0x39
 8015888:	f10a 0601 	add.w	r6, sl, #1
 801588c:	f88a 3000 	strb.w	r3, [sl]
 8015890:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015894:	2b39      	cmp	r3, #57	; 0x39
 8015896:	f106 32ff 	add.w	r2, r6, #4294967295
 801589a:	d04c      	beq.n	8015936 <_dtoa_r+0xa1e>
 801589c:	3301      	adds	r3, #1
 801589e:	e051      	b.n	8015944 <_dtoa_r+0xa2c>
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	f10a 0601 	add.w	r6, sl, #1
 80158a6:	dd05      	ble.n	80158b4 <_dtoa_r+0x99c>
 80158a8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80158ac:	d0eb      	beq.n	8015886 <_dtoa_r+0x96e>
 80158ae:	f108 0801 	add.w	r8, r8, #1
 80158b2:	e7c5      	b.n	8015840 <_dtoa_r+0x928>
 80158b4:	9b04      	ldr	r3, [sp, #16]
 80158b6:	9a06      	ldr	r2, [sp, #24]
 80158b8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80158bc:	1af3      	subs	r3, r6, r3
 80158be:	4293      	cmp	r3, r2
 80158c0:	d021      	beq.n	8015906 <_dtoa_r+0x9ee>
 80158c2:	2300      	movs	r3, #0
 80158c4:	220a      	movs	r2, #10
 80158c6:	9901      	ldr	r1, [sp, #4]
 80158c8:	4620      	mov	r0, r4
 80158ca:	f000 fcda 	bl	8016282 <__multadd>
 80158ce:	45b9      	cmp	r9, r7
 80158d0:	9001      	str	r0, [sp, #4]
 80158d2:	f04f 0300 	mov.w	r3, #0
 80158d6:	f04f 020a 	mov.w	r2, #10
 80158da:	4649      	mov	r1, r9
 80158dc:	4620      	mov	r0, r4
 80158de:	d105      	bne.n	80158ec <_dtoa_r+0x9d4>
 80158e0:	f000 fccf 	bl	8016282 <__multadd>
 80158e4:	4681      	mov	r9, r0
 80158e6:	4607      	mov	r7, r0
 80158e8:	46b2      	mov	sl, r6
 80158ea:	e779      	b.n	80157e0 <_dtoa_r+0x8c8>
 80158ec:	f000 fcc9 	bl	8016282 <__multadd>
 80158f0:	4639      	mov	r1, r7
 80158f2:	4681      	mov	r9, r0
 80158f4:	2300      	movs	r3, #0
 80158f6:	220a      	movs	r2, #10
 80158f8:	4620      	mov	r0, r4
 80158fa:	f000 fcc2 	bl	8016282 <__multadd>
 80158fe:	4607      	mov	r7, r0
 8015900:	e7f2      	b.n	80158e8 <_dtoa_r+0x9d0>
 8015902:	f04f 0900 	mov.w	r9, #0
 8015906:	2201      	movs	r2, #1
 8015908:	9901      	ldr	r1, [sp, #4]
 801590a:	4620      	mov	r0, r4
 801590c:	f000 fe6e 	bl	80165ec <__lshift>
 8015910:	4629      	mov	r1, r5
 8015912:	9001      	str	r0, [sp, #4]
 8015914:	f000 febe 	bl	8016694 <__mcmp>
 8015918:	2800      	cmp	r0, #0
 801591a:	dcb9      	bgt.n	8015890 <_dtoa_r+0x978>
 801591c:	d102      	bne.n	8015924 <_dtoa_r+0xa0c>
 801591e:	f018 0f01 	tst.w	r8, #1
 8015922:	d1b5      	bne.n	8015890 <_dtoa_r+0x978>
 8015924:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015928:	2b30      	cmp	r3, #48	; 0x30
 801592a:	f106 32ff 	add.w	r2, r6, #4294967295
 801592e:	f47f af11 	bne.w	8015754 <_dtoa_r+0x83c>
 8015932:	4616      	mov	r6, r2
 8015934:	e7f6      	b.n	8015924 <_dtoa_r+0xa0c>
 8015936:	9b04      	ldr	r3, [sp, #16]
 8015938:	4293      	cmp	r3, r2
 801593a:	d105      	bne.n	8015948 <_dtoa_r+0xa30>
 801593c:	9a04      	ldr	r2, [sp, #16]
 801593e:	f10b 0b01 	add.w	fp, fp, #1
 8015942:	2331      	movs	r3, #49	; 0x31
 8015944:	7013      	strb	r3, [r2, #0]
 8015946:	e705      	b.n	8015754 <_dtoa_r+0x83c>
 8015948:	4616      	mov	r6, r2
 801594a:	e7a1      	b.n	8015890 <_dtoa_r+0x978>
 801594c:	4b16      	ldr	r3, [pc, #88]	; (80159a8 <_dtoa_r+0xa90>)
 801594e:	f7ff bb48 	b.w	8014fe2 <_dtoa_r+0xca>
 8015952:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015954:	2b00      	cmp	r3, #0
 8015956:	f47f ab23 	bne.w	8014fa0 <_dtoa_r+0x88>
 801595a:	4b14      	ldr	r3, [pc, #80]	; (80159ac <_dtoa_r+0xa94>)
 801595c:	f7ff bb41 	b.w	8014fe2 <_dtoa_r+0xca>
 8015960:	9b08      	ldr	r3, [sp, #32]
 8015962:	2b01      	cmp	r3, #1
 8015964:	f77f ae3b 	ble.w	80155de <_dtoa_r+0x6c6>
 8015968:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801596c:	e64f      	b.n	801560e <_dtoa_r+0x6f6>
 801596e:	9b06      	ldr	r3, [sp, #24]
 8015970:	2b00      	cmp	r3, #0
 8015972:	dc03      	bgt.n	801597c <_dtoa_r+0xa64>
 8015974:	9b08      	ldr	r3, [sp, #32]
 8015976:	2b02      	cmp	r3, #2
 8015978:	f73f aed7 	bgt.w	801572a <_dtoa_r+0x812>
 801597c:	9e04      	ldr	r6, [sp, #16]
 801597e:	9801      	ldr	r0, [sp, #4]
 8015980:	4629      	mov	r1, r5
 8015982:	f7ff fa3b 	bl	8014dfc <quorem>
 8015986:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801598a:	f806 8b01 	strb.w	r8, [r6], #1
 801598e:	9b04      	ldr	r3, [sp, #16]
 8015990:	9a06      	ldr	r2, [sp, #24]
 8015992:	1af3      	subs	r3, r6, r3
 8015994:	429a      	cmp	r2, r3
 8015996:	ddb4      	ble.n	8015902 <_dtoa_r+0x9ea>
 8015998:	2300      	movs	r3, #0
 801599a:	220a      	movs	r2, #10
 801599c:	9901      	ldr	r1, [sp, #4]
 801599e:	4620      	mov	r0, r4
 80159a0:	f000 fc6f 	bl	8016282 <__multadd>
 80159a4:	9001      	str	r0, [sp, #4]
 80159a6:	e7ea      	b.n	801597e <_dtoa_r+0xa66>
 80159a8:	080188f8 	.word	0x080188f8
 80159ac:	08018978 	.word	0x08018978

080159b0 <std>:
 80159b0:	2300      	movs	r3, #0
 80159b2:	b510      	push	{r4, lr}
 80159b4:	4604      	mov	r4, r0
 80159b6:	e9c0 3300 	strd	r3, r3, [r0]
 80159ba:	6083      	str	r3, [r0, #8]
 80159bc:	8181      	strh	r1, [r0, #12]
 80159be:	6643      	str	r3, [r0, #100]	; 0x64
 80159c0:	81c2      	strh	r2, [r0, #14]
 80159c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80159c6:	6183      	str	r3, [r0, #24]
 80159c8:	4619      	mov	r1, r3
 80159ca:	2208      	movs	r2, #8
 80159cc:	305c      	adds	r0, #92	; 0x5c
 80159ce:	f7fd fd3c 	bl	801344a <memset>
 80159d2:	4b05      	ldr	r3, [pc, #20]	; (80159e8 <std+0x38>)
 80159d4:	6263      	str	r3, [r4, #36]	; 0x24
 80159d6:	4b05      	ldr	r3, [pc, #20]	; (80159ec <std+0x3c>)
 80159d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80159da:	4b05      	ldr	r3, [pc, #20]	; (80159f0 <std+0x40>)
 80159dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80159de:	4b05      	ldr	r3, [pc, #20]	; (80159f4 <std+0x44>)
 80159e0:	6224      	str	r4, [r4, #32]
 80159e2:	6323      	str	r3, [r4, #48]	; 0x30
 80159e4:	bd10      	pop	{r4, pc}
 80159e6:	bf00      	nop
 80159e8:	0801709d 	.word	0x0801709d
 80159ec:	080170bf 	.word	0x080170bf
 80159f0:	080170f7 	.word	0x080170f7
 80159f4:	0801711b 	.word	0x0801711b

080159f8 <_cleanup_r>:
 80159f8:	4901      	ldr	r1, [pc, #4]	; (8015a00 <_cleanup_r+0x8>)
 80159fa:	f000 b885 	b.w	8015b08 <_fwalk_reent>
 80159fe:	bf00      	nop
 8015a00:	08017435 	.word	0x08017435

08015a04 <__sfmoreglue>:
 8015a04:	b570      	push	{r4, r5, r6, lr}
 8015a06:	1e4a      	subs	r2, r1, #1
 8015a08:	2568      	movs	r5, #104	; 0x68
 8015a0a:	4355      	muls	r5, r2
 8015a0c:	460e      	mov	r6, r1
 8015a0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015a12:	f001 f847 	bl	8016aa4 <_malloc_r>
 8015a16:	4604      	mov	r4, r0
 8015a18:	b140      	cbz	r0, 8015a2c <__sfmoreglue+0x28>
 8015a1a:	2100      	movs	r1, #0
 8015a1c:	e9c0 1600 	strd	r1, r6, [r0]
 8015a20:	300c      	adds	r0, #12
 8015a22:	60a0      	str	r0, [r4, #8]
 8015a24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015a28:	f7fd fd0f 	bl	801344a <memset>
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}

08015a30 <__sinit>:
 8015a30:	6983      	ldr	r3, [r0, #24]
 8015a32:	b510      	push	{r4, lr}
 8015a34:	4604      	mov	r4, r0
 8015a36:	bb33      	cbnz	r3, 8015a86 <__sinit+0x56>
 8015a38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015a3c:	6503      	str	r3, [r0, #80]	; 0x50
 8015a3e:	4b12      	ldr	r3, [pc, #72]	; (8015a88 <__sinit+0x58>)
 8015a40:	4a12      	ldr	r2, [pc, #72]	; (8015a8c <__sinit+0x5c>)
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	6282      	str	r2, [r0, #40]	; 0x28
 8015a46:	4298      	cmp	r0, r3
 8015a48:	bf04      	itt	eq
 8015a4a:	2301      	moveq	r3, #1
 8015a4c:	6183      	streq	r3, [r0, #24]
 8015a4e:	f000 f81f 	bl	8015a90 <__sfp>
 8015a52:	6060      	str	r0, [r4, #4]
 8015a54:	4620      	mov	r0, r4
 8015a56:	f000 f81b 	bl	8015a90 <__sfp>
 8015a5a:	60a0      	str	r0, [r4, #8]
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	f000 f817 	bl	8015a90 <__sfp>
 8015a62:	2200      	movs	r2, #0
 8015a64:	60e0      	str	r0, [r4, #12]
 8015a66:	2104      	movs	r1, #4
 8015a68:	6860      	ldr	r0, [r4, #4]
 8015a6a:	f7ff ffa1 	bl	80159b0 <std>
 8015a6e:	2201      	movs	r2, #1
 8015a70:	2109      	movs	r1, #9
 8015a72:	68a0      	ldr	r0, [r4, #8]
 8015a74:	f7ff ff9c 	bl	80159b0 <std>
 8015a78:	2202      	movs	r2, #2
 8015a7a:	2112      	movs	r1, #18
 8015a7c:	68e0      	ldr	r0, [r4, #12]
 8015a7e:	f7ff ff97 	bl	80159b0 <std>
 8015a82:	2301      	movs	r3, #1
 8015a84:	61a3      	str	r3, [r4, #24]
 8015a86:	bd10      	pop	{r4, pc}
 8015a88:	080188e4 	.word	0x080188e4
 8015a8c:	080159f9 	.word	0x080159f9

08015a90 <__sfp>:
 8015a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a92:	4b1b      	ldr	r3, [pc, #108]	; (8015b00 <__sfp+0x70>)
 8015a94:	681e      	ldr	r6, [r3, #0]
 8015a96:	69b3      	ldr	r3, [r6, #24]
 8015a98:	4607      	mov	r7, r0
 8015a9a:	b913      	cbnz	r3, 8015aa2 <__sfp+0x12>
 8015a9c:	4630      	mov	r0, r6
 8015a9e:	f7ff ffc7 	bl	8015a30 <__sinit>
 8015aa2:	3648      	adds	r6, #72	; 0x48
 8015aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015aa8:	3b01      	subs	r3, #1
 8015aaa:	d503      	bpl.n	8015ab4 <__sfp+0x24>
 8015aac:	6833      	ldr	r3, [r6, #0]
 8015aae:	b133      	cbz	r3, 8015abe <__sfp+0x2e>
 8015ab0:	6836      	ldr	r6, [r6, #0]
 8015ab2:	e7f7      	b.n	8015aa4 <__sfp+0x14>
 8015ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015ab8:	b16d      	cbz	r5, 8015ad6 <__sfp+0x46>
 8015aba:	3468      	adds	r4, #104	; 0x68
 8015abc:	e7f4      	b.n	8015aa8 <__sfp+0x18>
 8015abe:	2104      	movs	r1, #4
 8015ac0:	4638      	mov	r0, r7
 8015ac2:	f7ff ff9f 	bl	8015a04 <__sfmoreglue>
 8015ac6:	6030      	str	r0, [r6, #0]
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d1f1      	bne.n	8015ab0 <__sfp+0x20>
 8015acc:	230c      	movs	r3, #12
 8015ace:	603b      	str	r3, [r7, #0]
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ad6:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <__sfp+0x74>)
 8015ad8:	6665      	str	r5, [r4, #100]	; 0x64
 8015ada:	e9c4 5500 	strd	r5, r5, [r4]
 8015ade:	60a5      	str	r5, [r4, #8]
 8015ae0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015ae4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015ae8:	2208      	movs	r2, #8
 8015aea:	4629      	mov	r1, r5
 8015aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015af0:	f7fd fcab 	bl	801344a <memset>
 8015af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015afc:	e7e9      	b.n	8015ad2 <__sfp+0x42>
 8015afe:	bf00      	nop
 8015b00:	080188e4 	.word	0x080188e4
 8015b04:	ffff0001 	.word	0xffff0001

08015b08 <_fwalk_reent>:
 8015b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b0c:	4680      	mov	r8, r0
 8015b0e:	4689      	mov	r9, r1
 8015b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b14:	2600      	movs	r6, #0
 8015b16:	b914      	cbnz	r4, 8015b1e <_fwalk_reent+0x16>
 8015b18:	4630      	mov	r0, r6
 8015b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015b22:	3f01      	subs	r7, #1
 8015b24:	d501      	bpl.n	8015b2a <_fwalk_reent+0x22>
 8015b26:	6824      	ldr	r4, [r4, #0]
 8015b28:	e7f5      	b.n	8015b16 <_fwalk_reent+0xe>
 8015b2a:	89ab      	ldrh	r3, [r5, #12]
 8015b2c:	2b01      	cmp	r3, #1
 8015b2e:	d907      	bls.n	8015b40 <_fwalk_reent+0x38>
 8015b30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b34:	3301      	adds	r3, #1
 8015b36:	d003      	beq.n	8015b40 <_fwalk_reent+0x38>
 8015b38:	4629      	mov	r1, r5
 8015b3a:	4640      	mov	r0, r8
 8015b3c:	47c8      	blx	r9
 8015b3e:	4306      	orrs	r6, r0
 8015b40:	3568      	adds	r5, #104	; 0x68
 8015b42:	e7ee      	b.n	8015b22 <_fwalk_reent+0x1a>

08015b44 <rshift>:
 8015b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b46:	6906      	ldr	r6, [r0, #16]
 8015b48:	114b      	asrs	r3, r1, #5
 8015b4a:	429e      	cmp	r6, r3
 8015b4c:	f100 0414 	add.w	r4, r0, #20
 8015b50:	dd30      	ble.n	8015bb4 <rshift+0x70>
 8015b52:	f011 011f 	ands.w	r1, r1, #31
 8015b56:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015b5a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015b5e:	d108      	bne.n	8015b72 <rshift+0x2e>
 8015b60:	4621      	mov	r1, r4
 8015b62:	42b2      	cmp	r2, r6
 8015b64:	460b      	mov	r3, r1
 8015b66:	d211      	bcs.n	8015b8c <rshift+0x48>
 8015b68:	f852 3b04 	ldr.w	r3, [r2], #4
 8015b6c:	f841 3b04 	str.w	r3, [r1], #4
 8015b70:	e7f7      	b.n	8015b62 <rshift+0x1e>
 8015b72:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015b76:	f1c1 0c20 	rsb	ip, r1, #32
 8015b7a:	40cd      	lsrs	r5, r1
 8015b7c:	3204      	adds	r2, #4
 8015b7e:	4623      	mov	r3, r4
 8015b80:	42b2      	cmp	r2, r6
 8015b82:	4617      	mov	r7, r2
 8015b84:	d30c      	bcc.n	8015ba0 <rshift+0x5c>
 8015b86:	601d      	str	r5, [r3, #0]
 8015b88:	b105      	cbz	r5, 8015b8c <rshift+0x48>
 8015b8a:	3304      	adds	r3, #4
 8015b8c:	1b1a      	subs	r2, r3, r4
 8015b8e:	42a3      	cmp	r3, r4
 8015b90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015b94:	bf08      	it	eq
 8015b96:	2300      	moveq	r3, #0
 8015b98:	6102      	str	r2, [r0, #16]
 8015b9a:	bf08      	it	eq
 8015b9c:	6143      	streq	r3, [r0, #20]
 8015b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ba0:	683f      	ldr	r7, [r7, #0]
 8015ba2:	fa07 f70c 	lsl.w	r7, r7, ip
 8015ba6:	433d      	orrs	r5, r7
 8015ba8:	f843 5b04 	str.w	r5, [r3], #4
 8015bac:	f852 5b04 	ldr.w	r5, [r2], #4
 8015bb0:	40cd      	lsrs	r5, r1
 8015bb2:	e7e5      	b.n	8015b80 <rshift+0x3c>
 8015bb4:	4623      	mov	r3, r4
 8015bb6:	e7e9      	b.n	8015b8c <rshift+0x48>

08015bb8 <__hexdig_fun>:
 8015bb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015bbc:	2b09      	cmp	r3, #9
 8015bbe:	d802      	bhi.n	8015bc6 <__hexdig_fun+0xe>
 8015bc0:	3820      	subs	r0, #32
 8015bc2:	b2c0      	uxtb	r0, r0
 8015bc4:	4770      	bx	lr
 8015bc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015bca:	2b05      	cmp	r3, #5
 8015bcc:	d801      	bhi.n	8015bd2 <__hexdig_fun+0x1a>
 8015bce:	3847      	subs	r0, #71	; 0x47
 8015bd0:	e7f7      	b.n	8015bc2 <__hexdig_fun+0xa>
 8015bd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015bd6:	2b05      	cmp	r3, #5
 8015bd8:	d801      	bhi.n	8015bde <__hexdig_fun+0x26>
 8015bda:	3827      	subs	r0, #39	; 0x27
 8015bdc:	e7f1      	b.n	8015bc2 <__hexdig_fun+0xa>
 8015bde:	2000      	movs	r0, #0
 8015be0:	4770      	bx	lr

08015be2 <__gethex>:
 8015be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015be6:	b08b      	sub	sp, #44	; 0x2c
 8015be8:	468a      	mov	sl, r1
 8015bea:	9002      	str	r0, [sp, #8]
 8015bec:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015bee:	9306      	str	r3, [sp, #24]
 8015bf0:	4690      	mov	r8, r2
 8015bf2:	f000 fad0 	bl	8016196 <__localeconv_l>
 8015bf6:	6803      	ldr	r3, [r0, #0]
 8015bf8:	9303      	str	r3, [sp, #12]
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ea fb20 	bl	8000240 <strlen>
 8015c00:	9b03      	ldr	r3, [sp, #12]
 8015c02:	9001      	str	r0, [sp, #4]
 8015c04:	4403      	add	r3, r0
 8015c06:	f04f 0b00 	mov.w	fp, #0
 8015c0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015c0e:	9307      	str	r3, [sp, #28]
 8015c10:	f8da 3000 	ldr.w	r3, [sl]
 8015c14:	3302      	adds	r3, #2
 8015c16:	461f      	mov	r7, r3
 8015c18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015c1c:	2830      	cmp	r0, #48	; 0x30
 8015c1e:	d06c      	beq.n	8015cfa <__gethex+0x118>
 8015c20:	f7ff ffca 	bl	8015bb8 <__hexdig_fun>
 8015c24:	4604      	mov	r4, r0
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d16a      	bne.n	8015d00 <__gethex+0x11e>
 8015c2a:	9a01      	ldr	r2, [sp, #4]
 8015c2c:	9903      	ldr	r1, [sp, #12]
 8015c2e:	4638      	mov	r0, r7
 8015c30:	f001 fa77 	bl	8017122 <strncmp>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d166      	bne.n	8015d06 <__gethex+0x124>
 8015c38:	9b01      	ldr	r3, [sp, #4]
 8015c3a:	5cf8      	ldrb	r0, [r7, r3]
 8015c3c:	18fe      	adds	r6, r7, r3
 8015c3e:	f7ff ffbb 	bl	8015bb8 <__hexdig_fun>
 8015c42:	2800      	cmp	r0, #0
 8015c44:	d062      	beq.n	8015d0c <__gethex+0x12a>
 8015c46:	4633      	mov	r3, r6
 8015c48:	7818      	ldrb	r0, [r3, #0]
 8015c4a:	2830      	cmp	r0, #48	; 0x30
 8015c4c:	461f      	mov	r7, r3
 8015c4e:	f103 0301 	add.w	r3, r3, #1
 8015c52:	d0f9      	beq.n	8015c48 <__gethex+0x66>
 8015c54:	f7ff ffb0 	bl	8015bb8 <__hexdig_fun>
 8015c58:	fab0 f580 	clz	r5, r0
 8015c5c:	096d      	lsrs	r5, r5, #5
 8015c5e:	4634      	mov	r4, r6
 8015c60:	f04f 0b01 	mov.w	fp, #1
 8015c64:	463a      	mov	r2, r7
 8015c66:	4616      	mov	r6, r2
 8015c68:	3201      	adds	r2, #1
 8015c6a:	7830      	ldrb	r0, [r6, #0]
 8015c6c:	f7ff ffa4 	bl	8015bb8 <__hexdig_fun>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d1f8      	bne.n	8015c66 <__gethex+0x84>
 8015c74:	9a01      	ldr	r2, [sp, #4]
 8015c76:	9903      	ldr	r1, [sp, #12]
 8015c78:	4630      	mov	r0, r6
 8015c7a:	f001 fa52 	bl	8017122 <strncmp>
 8015c7e:	b950      	cbnz	r0, 8015c96 <__gethex+0xb4>
 8015c80:	b954      	cbnz	r4, 8015c98 <__gethex+0xb6>
 8015c82:	9b01      	ldr	r3, [sp, #4]
 8015c84:	18f4      	adds	r4, r6, r3
 8015c86:	4622      	mov	r2, r4
 8015c88:	4616      	mov	r6, r2
 8015c8a:	3201      	adds	r2, #1
 8015c8c:	7830      	ldrb	r0, [r6, #0]
 8015c8e:	f7ff ff93 	bl	8015bb8 <__hexdig_fun>
 8015c92:	2800      	cmp	r0, #0
 8015c94:	d1f8      	bne.n	8015c88 <__gethex+0xa6>
 8015c96:	b10c      	cbz	r4, 8015c9c <__gethex+0xba>
 8015c98:	1ba4      	subs	r4, r4, r6
 8015c9a:	00a4      	lsls	r4, r4, #2
 8015c9c:	7833      	ldrb	r3, [r6, #0]
 8015c9e:	2b50      	cmp	r3, #80	; 0x50
 8015ca0:	d001      	beq.n	8015ca6 <__gethex+0xc4>
 8015ca2:	2b70      	cmp	r3, #112	; 0x70
 8015ca4:	d140      	bne.n	8015d28 <__gethex+0x146>
 8015ca6:	7873      	ldrb	r3, [r6, #1]
 8015ca8:	2b2b      	cmp	r3, #43	; 0x2b
 8015caa:	d031      	beq.n	8015d10 <__gethex+0x12e>
 8015cac:	2b2d      	cmp	r3, #45	; 0x2d
 8015cae:	d033      	beq.n	8015d18 <__gethex+0x136>
 8015cb0:	1c71      	adds	r1, r6, #1
 8015cb2:	f04f 0900 	mov.w	r9, #0
 8015cb6:	7808      	ldrb	r0, [r1, #0]
 8015cb8:	f7ff ff7e 	bl	8015bb8 <__hexdig_fun>
 8015cbc:	1e43      	subs	r3, r0, #1
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	2b18      	cmp	r3, #24
 8015cc2:	d831      	bhi.n	8015d28 <__gethex+0x146>
 8015cc4:	f1a0 0210 	sub.w	r2, r0, #16
 8015cc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015ccc:	f7ff ff74 	bl	8015bb8 <__hexdig_fun>
 8015cd0:	1e43      	subs	r3, r0, #1
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	2b18      	cmp	r3, #24
 8015cd6:	d922      	bls.n	8015d1e <__gethex+0x13c>
 8015cd8:	f1b9 0f00 	cmp.w	r9, #0
 8015cdc:	d000      	beq.n	8015ce0 <__gethex+0xfe>
 8015cde:	4252      	negs	r2, r2
 8015ce0:	4414      	add	r4, r2
 8015ce2:	f8ca 1000 	str.w	r1, [sl]
 8015ce6:	b30d      	cbz	r5, 8015d2c <__gethex+0x14a>
 8015ce8:	f1bb 0f00 	cmp.w	fp, #0
 8015cec:	bf0c      	ite	eq
 8015cee:	2706      	moveq	r7, #6
 8015cf0:	2700      	movne	r7, #0
 8015cf2:	4638      	mov	r0, r7
 8015cf4:	b00b      	add	sp, #44	; 0x2c
 8015cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cfa:	f10b 0b01 	add.w	fp, fp, #1
 8015cfe:	e78a      	b.n	8015c16 <__gethex+0x34>
 8015d00:	2500      	movs	r5, #0
 8015d02:	462c      	mov	r4, r5
 8015d04:	e7ae      	b.n	8015c64 <__gethex+0x82>
 8015d06:	463e      	mov	r6, r7
 8015d08:	2501      	movs	r5, #1
 8015d0a:	e7c7      	b.n	8015c9c <__gethex+0xba>
 8015d0c:	4604      	mov	r4, r0
 8015d0e:	e7fb      	b.n	8015d08 <__gethex+0x126>
 8015d10:	f04f 0900 	mov.w	r9, #0
 8015d14:	1cb1      	adds	r1, r6, #2
 8015d16:	e7ce      	b.n	8015cb6 <__gethex+0xd4>
 8015d18:	f04f 0901 	mov.w	r9, #1
 8015d1c:	e7fa      	b.n	8015d14 <__gethex+0x132>
 8015d1e:	230a      	movs	r3, #10
 8015d20:	fb03 0202 	mla	r2, r3, r2, r0
 8015d24:	3a10      	subs	r2, #16
 8015d26:	e7cf      	b.n	8015cc8 <__gethex+0xe6>
 8015d28:	4631      	mov	r1, r6
 8015d2a:	e7da      	b.n	8015ce2 <__gethex+0x100>
 8015d2c:	1bf3      	subs	r3, r6, r7
 8015d2e:	3b01      	subs	r3, #1
 8015d30:	4629      	mov	r1, r5
 8015d32:	2b07      	cmp	r3, #7
 8015d34:	dc49      	bgt.n	8015dca <__gethex+0x1e8>
 8015d36:	9802      	ldr	r0, [sp, #8]
 8015d38:	f000 fa58 	bl	80161ec <_Balloc>
 8015d3c:	9b01      	ldr	r3, [sp, #4]
 8015d3e:	f100 0914 	add.w	r9, r0, #20
 8015d42:	f04f 0b00 	mov.w	fp, #0
 8015d46:	f1c3 0301 	rsb	r3, r3, #1
 8015d4a:	4605      	mov	r5, r0
 8015d4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8015d50:	46da      	mov	sl, fp
 8015d52:	9308      	str	r3, [sp, #32]
 8015d54:	42b7      	cmp	r7, r6
 8015d56:	d33b      	bcc.n	8015dd0 <__gethex+0x1ee>
 8015d58:	9804      	ldr	r0, [sp, #16]
 8015d5a:	f840 ab04 	str.w	sl, [r0], #4
 8015d5e:	eba0 0009 	sub.w	r0, r0, r9
 8015d62:	1080      	asrs	r0, r0, #2
 8015d64:	6128      	str	r0, [r5, #16]
 8015d66:	0147      	lsls	r7, r0, #5
 8015d68:	4650      	mov	r0, sl
 8015d6a:	f000 fb03 	bl	8016374 <__hi0bits>
 8015d6e:	f8d8 6000 	ldr.w	r6, [r8]
 8015d72:	1a3f      	subs	r7, r7, r0
 8015d74:	42b7      	cmp	r7, r6
 8015d76:	dd64      	ble.n	8015e42 <__gethex+0x260>
 8015d78:	1bbf      	subs	r7, r7, r6
 8015d7a:	4639      	mov	r1, r7
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	f000 fe14 	bl	80169aa <__any_on>
 8015d82:	4682      	mov	sl, r0
 8015d84:	b178      	cbz	r0, 8015da6 <__gethex+0x1c4>
 8015d86:	1e7b      	subs	r3, r7, #1
 8015d88:	1159      	asrs	r1, r3, #5
 8015d8a:	f003 021f 	and.w	r2, r3, #31
 8015d8e:	f04f 0a01 	mov.w	sl, #1
 8015d92:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015d96:	fa0a f202 	lsl.w	r2, sl, r2
 8015d9a:	420a      	tst	r2, r1
 8015d9c:	d003      	beq.n	8015da6 <__gethex+0x1c4>
 8015d9e:	4553      	cmp	r3, sl
 8015da0:	dc46      	bgt.n	8015e30 <__gethex+0x24e>
 8015da2:	f04f 0a02 	mov.w	sl, #2
 8015da6:	4639      	mov	r1, r7
 8015da8:	4628      	mov	r0, r5
 8015daa:	f7ff fecb 	bl	8015b44 <rshift>
 8015dae:	443c      	add	r4, r7
 8015db0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015db4:	42a3      	cmp	r3, r4
 8015db6:	da52      	bge.n	8015e5e <__gethex+0x27c>
 8015db8:	4629      	mov	r1, r5
 8015dba:	9802      	ldr	r0, [sp, #8]
 8015dbc:	f000 fa4a 	bl	8016254 <_Bfree>
 8015dc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	6013      	str	r3, [r2, #0]
 8015dc6:	27a3      	movs	r7, #163	; 0xa3
 8015dc8:	e793      	b.n	8015cf2 <__gethex+0x110>
 8015dca:	3101      	adds	r1, #1
 8015dcc:	105b      	asrs	r3, r3, #1
 8015dce:	e7b0      	b.n	8015d32 <__gethex+0x150>
 8015dd0:	1e73      	subs	r3, r6, #1
 8015dd2:	9305      	str	r3, [sp, #20]
 8015dd4:	9a07      	ldr	r2, [sp, #28]
 8015dd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015dda:	4293      	cmp	r3, r2
 8015ddc:	d018      	beq.n	8015e10 <__gethex+0x22e>
 8015dde:	f1bb 0f20 	cmp.w	fp, #32
 8015de2:	d107      	bne.n	8015df4 <__gethex+0x212>
 8015de4:	9b04      	ldr	r3, [sp, #16]
 8015de6:	f8c3 a000 	str.w	sl, [r3]
 8015dea:	3304      	adds	r3, #4
 8015dec:	f04f 0a00 	mov.w	sl, #0
 8015df0:	9304      	str	r3, [sp, #16]
 8015df2:	46d3      	mov	fp, sl
 8015df4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015df8:	f7ff fede 	bl	8015bb8 <__hexdig_fun>
 8015dfc:	f000 000f 	and.w	r0, r0, #15
 8015e00:	fa00 f00b 	lsl.w	r0, r0, fp
 8015e04:	ea4a 0a00 	orr.w	sl, sl, r0
 8015e08:	f10b 0b04 	add.w	fp, fp, #4
 8015e0c:	9b05      	ldr	r3, [sp, #20]
 8015e0e:	e00d      	b.n	8015e2c <__gethex+0x24a>
 8015e10:	9b05      	ldr	r3, [sp, #20]
 8015e12:	9a08      	ldr	r2, [sp, #32]
 8015e14:	4413      	add	r3, r2
 8015e16:	42bb      	cmp	r3, r7
 8015e18:	d3e1      	bcc.n	8015dde <__gethex+0x1fc>
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	9a01      	ldr	r2, [sp, #4]
 8015e1e:	9903      	ldr	r1, [sp, #12]
 8015e20:	9309      	str	r3, [sp, #36]	; 0x24
 8015e22:	f001 f97e 	bl	8017122 <strncmp>
 8015e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d1d8      	bne.n	8015dde <__gethex+0x1fc>
 8015e2c:	461e      	mov	r6, r3
 8015e2e:	e791      	b.n	8015d54 <__gethex+0x172>
 8015e30:	1eb9      	subs	r1, r7, #2
 8015e32:	4628      	mov	r0, r5
 8015e34:	f000 fdb9 	bl	80169aa <__any_on>
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	d0b2      	beq.n	8015da2 <__gethex+0x1c0>
 8015e3c:	f04f 0a03 	mov.w	sl, #3
 8015e40:	e7b1      	b.n	8015da6 <__gethex+0x1c4>
 8015e42:	da09      	bge.n	8015e58 <__gethex+0x276>
 8015e44:	1bf7      	subs	r7, r6, r7
 8015e46:	4629      	mov	r1, r5
 8015e48:	463a      	mov	r2, r7
 8015e4a:	9802      	ldr	r0, [sp, #8]
 8015e4c:	f000 fbce 	bl	80165ec <__lshift>
 8015e50:	1be4      	subs	r4, r4, r7
 8015e52:	4605      	mov	r5, r0
 8015e54:	f100 0914 	add.w	r9, r0, #20
 8015e58:	f04f 0a00 	mov.w	sl, #0
 8015e5c:	e7a8      	b.n	8015db0 <__gethex+0x1ce>
 8015e5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015e62:	42a0      	cmp	r0, r4
 8015e64:	dd6a      	ble.n	8015f3c <__gethex+0x35a>
 8015e66:	1b04      	subs	r4, r0, r4
 8015e68:	42a6      	cmp	r6, r4
 8015e6a:	dc2e      	bgt.n	8015eca <__gethex+0x2e8>
 8015e6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e70:	2b02      	cmp	r3, #2
 8015e72:	d022      	beq.n	8015eba <__gethex+0x2d8>
 8015e74:	2b03      	cmp	r3, #3
 8015e76:	d024      	beq.n	8015ec2 <__gethex+0x2e0>
 8015e78:	2b01      	cmp	r3, #1
 8015e7a:	d115      	bne.n	8015ea8 <__gethex+0x2c6>
 8015e7c:	42a6      	cmp	r6, r4
 8015e7e:	d113      	bne.n	8015ea8 <__gethex+0x2c6>
 8015e80:	2e01      	cmp	r6, #1
 8015e82:	dc0b      	bgt.n	8015e9c <__gethex+0x2ba>
 8015e84:	9a06      	ldr	r2, [sp, #24]
 8015e86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015e8a:	6013      	str	r3, [r2, #0]
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	612b      	str	r3, [r5, #16]
 8015e90:	f8c9 3000 	str.w	r3, [r9]
 8015e94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e96:	2762      	movs	r7, #98	; 0x62
 8015e98:	601d      	str	r5, [r3, #0]
 8015e9a:	e72a      	b.n	8015cf2 <__gethex+0x110>
 8015e9c:	1e71      	subs	r1, r6, #1
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	f000 fd83 	bl	80169aa <__any_on>
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	d1ed      	bne.n	8015e84 <__gethex+0x2a2>
 8015ea8:	4629      	mov	r1, r5
 8015eaa:	9802      	ldr	r0, [sp, #8]
 8015eac:	f000 f9d2 	bl	8016254 <_Bfree>
 8015eb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	6013      	str	r3, [r2, #0]
 8015eb6:	2750      	movs	r7, #80	; 0x50
 8015eb8:	e71b      	b.n	8015cf2 <__gethex+0x110>
 8015eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d0e1      	beq.n	8015e84 <__gethex+0x2a2>
 8015ec0:	e7f2      	b.n	8015ea8 <__gethex+0x2c6>
 8015ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d1dd      	bne.n	8015e84 <__gethex+0x2a2>
 8015ec8:	e7ee      	b.n	8015ea8 <__gethex+0x2c6>
 8015eca:	1e67      	subs	r7, r4, #1
 8015ecc:	f1ba 0f00 	cmp.w	sl, #0
 8015ed0:	d131      	bne.n	8015f36 <__gethex+0x354>
 8015ed2:	b127      	cbz	r7, 8015ede <__gethex+0x2fc>
 8015ed4:	4639      	mov	r1, r7
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	f000 fd67 	bl	80169aa <__any_on>
 8015edc:	4682      	mov	sl, r0
 8015ede:	117a      	asrs	r2, r7, #5
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	f007 071f 	and.w	r7, r7, #31
 8015ee6:	fa03 f707 	lsl.w	r7, r3, r7
 8015eea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015eee:	4621      	mov	r1, r4
 8015ef0:	421f      	tst	r7, r3
 8015ef2:	4628      	mov	r0, r5
 8015ef4:	bf18      	it	ne
 8015ef6:	f04a 0a02 	orrne.w	sl, sl, #2
 8015efa:	1b36      	subs	r6, r6, r4
 8015efc:	f7ff fe22 	bl	8015b44 <rshift>
 8015f00:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015f04:	2702      	movs	r7, #2
 8015f06:	f1ba 0f00 	cmp.w	sl, #0
 8015f0a:	d048      	beq.n	8015f9e <__gethex+0x3bc>
 8015f0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f10:	2b02      	cmp	r3, #2
 8015f12:	d015      	beq.n	8015f40 <__gethex+0x35e>
 8015f14:	2b03      	cmp	r3, #3
 8015f16:	d017      	beq.n	8015f48 <__gethex+0x366>
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d109      	bne.n	8015f30 <__gethex+0x34e>
 8015f1c:	f01a 0f02 	tst.w	sl, #2
 8015f20:	d006      	beq.n	8015f30 <__gethex+0x34e>
 8015f22:	f8d9 3000 	ldr.w	r3, [r9]
 8015f26:	ea4a 0a03 	orr.w	sl, sl, r3
 8015f2a:	f01a 0f01 	tst.w	sl, #1
 8015f2e:	d10e      	bne.n	8015f4e <__gethex+0x36c>
 8015f30:	f047 0710 	orr.w	r7, r7, #16
 8015f34:	e033      	b.n	8015f9e <__gethex+0x3bc>
 8015f36:	f04f 0a01 	mov.w	sl, #1
 8015f3a:	e7d0      	b.n	8015ede <__gethex+0x2fc>
 8015f3c:	2701      	movs	r7, #1
 8015f3e:	e7e2      	b.n	8015f06 <__gethex+0x324>
 8015f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f42:	f1c3 0301 	rsb	r3, r3, #1
 8015f46:	9315      	str	r3, [sp, #84]	; 0x54
 8015f48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d0f0      	beq.n	8015f30 <__gethex+0x34e>
 8015f4e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015f52:	f105 0314 	add.w	r3, r5, #20
 8015f56:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015f5a:	eb03 010a 	add.w	r1, r3, sl
 8015f5e:	f04f 0c00 	mov.w	ip, #0
 8015f62:	4618      	mov	r0, r3
 8015f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f68:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015f6c:	d01c      	beq.n	8015fa8 <__gethex+0x3c6>
 8015f6e:	3201      	adds	r2, #1
 8015f70:	6002      	str	r2, [r0, #0]
 8015f72:	2f02      	cmp	r7, #2
 8015f74:	f105 0314 	add.w	r3, r5, #20
 8015f78:	d138      	bne.n	8015fec <__gethex+0x40a>
 8015f7a:	f8d8 2000 	ldr.w	r2, [r8]
 8015f7e:	3a01      	subs	r2, #1
 8015f80:	42b2      	cmp	r2, r6
 8015f82:	d10a      	bne.n	8015f9a <__gethex+0x3b8>
 8015f84:	1171      	asrs	r1, r6, #5
 8015f86:	2201      	movs	r2, #1
 8015f88:	f006 061f 	and.w	r6, r6, #31
 8015f8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015f90:	fa02 f606 	lsl.w	r6, r2, r6
 8015f94:	421e      	tst	r6, r3
 8015f96:	bf18      	it	ne
 8015f98:	4617      	movne	r7, r2
 8015f9a:	f047 0720 	orr.w	r7, r7, #32
 8015f9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fa0:	601d      	str	r5, [r3, #0]
 8015fa2:	9b06      	ldr	r3, [sp, #24]
 8015fa4:	601c      	str	r4, [r3, #0]
 8015fa6:	e6a4      	b.n	8015cf2 <__gethex+0x110>
 8015fa8:	4299      	cmp	r1, r3
 8015faa:	f843 cc04 	str.w	ip, [r3, #-4]
 8015fae:	d8d8      	bhi.n	8015f62 <__gethex+0x380>
 8015fb0:	68ab      	ldr	r3, [r5, #8]
 8015fb2:	4599      	cmp	r9, r3
 8015fb4:	db12      	blt.n	8015fdc <__gethex+0x3fa>
 8015fb6:	6869      	ldr	r1, [r5, #4]
 8015fb8:	9802      	ldr	r0, [sp, #8]
 8015fba:	3101      	adds	r1, #1
 8015fbc:	f000 f916 	bl	80161ec <_Balloc>
 8015fc0:	692a      	ldr	r2, [r5, #16]
 8015fc2:	3202      	adds	r2, #2
 8015fc4:	f105 010c 	add.w	r1, r5, #12
 8015fc8:	4683      	mov	fp, r0
 8015fca:	0092      	lsls	r2, r2, #2
 8015fcc:	300c      	adds	r0, #12
 8015fce:	f7fd fa31 	bl	8013434 <memcpy>
 8015fd2:	4629      	mov	r1, r5
 8015fd4:	9802      	ldr	r0, [sp, #8]
 8015fd6:	f000 f93d 	bl	8016254 <_Bfree>
 8015fda:	465d      	mov	r5, fp
 8015fdc:	692b      	ldr	r3, [r5, #16]
 8015fde:	1c5a      	adds	r2, r3, #1
 8015fe0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015fe4:	612a      	str	r2, [r5, #16]
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	615a      	str	r2, [r3, #20]
 8015fea:	e7c2      	b.n	8015f72 <__gethex+0x390>
 8015fec:	692a      	ldr	r2, [r5, #16]
 8015fee:	454a      	cmp	r2, r9
 8015ff0:	dd0b      	ble.n	801600a <__gethex+0x428>
 8015ff2:	2101      	movs	r1, #1
 8015ff4:	4628      	mov	r0, r5
 8015ff6:	f7ff fda5 	bl	8015b44 <rshift>
 8015ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ffe:	3401      	adds	r4, #1
 8016000:	42a3      	cmp	r3, r4
 8016002:	f6ff aed9 	blt.w	8015db8 <__gethex+0x1d6>
 8016006:	2701      	movs	r7, #1
 8016008:	e7c7      	b.n	8015f9a <__gethex+0x3b8>
 801600a:	f016 061f 	ands.w	r6, r6, #31
 801600e:	d0fa      	beq.n	8016006 <__gethex+0x424>
 8016010:	449a      	add	sl, r3
 8016012:	f1c6 0620 	rsb	r6, r6, #32
 8016016:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801601a:	f000 f9ab 	bl	8016374 <__hi0bits>
 801601e:	42b0      	cmp	r0, r6
 8016020:	dbe7      	blt.n	8015ff2 <__gethex+0x410>
 8016022:	e7f0      	b.n	8016006 <__gethex+0x424>

08016024 <L_shift>:
 8016024:	f1c2 0208 	rsb	r2, r2, #8
 8016028:	0092      	lsls	r2, r2, #2
 801602a:	b570      	push	{r4, r5, r6, lr}
 801602c:	f1c2 0620 	rsb	r6, r2, #32
 8016030:	6843      	ldr	r3, [r0, #4]
 8016032:	6804      	ldr	r4, [r0, #0]
 8016034:	fa03 f506 	lsl.w	r5, r3, r6
 8016038:	432c      	orrs	r4, r5
 801603a:	40d3      	lsrs	r3, r2
 801603c:	6004      	str	r4, [r0, #0]
 801603e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016042:	4288      	cmp	r0, r1
 8016044:	d3f4      	bcc.n	8016030 <L_shift+0xc>
 8016046:	bd70      	pop	{r4, r5, r6, pc}

08016048 <__match>:
 8016048:	b530      	push	{r4, r5, lr}
 801604a:	6803      	ldr	r3, [r0, #0]
 801604c:	3301      	adds	r3, #1
 801604e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016052:	b914      	cbnz	r4, 801605a <__match+0x12>
 8016054:	6003      	str	r3, [r0, #0]
 8016056:	2001      	movs	r0, #1
 8016058:	bd30      	pop	{r4, r5, pc}
 801605a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801605e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016062:	2d19      	cmp	r5, #25
 8016064:	bf98      	it	ls
 8016066:	3220      	addls	r2, #32
 8016068:	42a2      	cmp	r2, r4
 801606a:	d0f0      	beq.n	801604e <__match+0x6>
 801606c:	2000      	movs	r0, #0
 801606e:	e7f3      	b.n	8016058 <__match+0x10>

08016070 <__hexnan>:
 8016070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016074:	680b      	ldr	r3, [r1, #0]
 8016076:	6801      	ldr	r1, [r0, #0]
 8016078:	115f      	asrs	r7, r3, #5
 801607a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801607e:	f013 031f 	ands.w	r3, r3, #31
 8016082:	b087      	sub	sp, #28
 8016084:	bf18      	it	ne
 8016086:	3704      	addne	r7, #4
 8016088:	2500      	movs	r5, #0
 801608a:	1f3e      	subs	r6, r7, #4
 801608c:	4682      	mov	sl, r0
 801608e:	4690      	mov	r8, r2
 8016090:	9301      	str	r3, [sp, #4]
 8016092:	f847 5c04 	str.w	r5, [r7, #-4]
 8016096:	46b1      	mov	r9, r6
 8016098:	4634      	mov	r4, r6
 801609a:	9502      	str	r5, [sp, #8]
 801609c:	46ab      	mov	fp, r5
 801609e:	784a      	ldrb	r2, [r1, #1]
 80160a0:	1c4b      	adds	r3, r1, #1
 80160a2:	9303      	str	r3, [sp, #12]
 80160a4:	b342      	cbz	r2, 80160f8 <__hexnan+0x88>
 80160a6:	4610      	mov	r0, r2
 80160a8:	9105      	str	r1, [sp, #20]
 80160aa:	9204      	str	r2, [sp, #16]
 80160ac:	f7ff fd84 	bl	8015bb8 <__hexdig_fun>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d143      	bne.n	801613c <__hexnan+0xcc>
 80160b4:	9a04      	ldr	r2, [sp, #16]
 80160b6:	9905      	ldr	r1, [sp, #20]
 80160b8:	2a20      	cmp	r2, #32
 80160ba:	d818      	bhi.n	80160ee <__hexnan+0x7e>
 80160bc:	9b02      	ldr	r3, [sp, #8]
 80160be:	459b      	cmp	fp, r3
 80160c0:	dd13      	ble.n	80160ea <__hexnan+0x7a>
 80160c2:	454c      	cmp	r4, r9
 80160c4:	d206      	bcs.n	80160d4 <__hexnan+0x64>
 80160c6:	2d07      	cmp	r5, #7
 80160c8:	dc04      	bgt.n	80160d4 <__hexnan+0x64>
 80160ca:	462a      	mov	r2, r5
 80160cc:	4649      	mov	r1, r9
 80160ce:	4620      	mov	r0, r4
 80160d0:	f7ff ffa8 	bl	8016024 <L_shift>
 80160d4:	4544      	cmp	r4, r8
 80160d6:	d944      	bls.n	8016162 <__hexnan+0xf2>
 80160d8:	2300      	movs	r3, #0
 80160da:	f1a4 0904 	sub.w	r9, r4, #4
 80160de:	f844 3c04 	str.w	r3, [r4, #-4]
 80160e2:	f8cd b008 	str.w	fp, [sp, #8]
 80160e6:	464c      	mov	r4, r9
 80160e8:	461d      	mov	r5, r3
 80160ea:	9903      	ldr	r1, [sp, #12]
 80160ec:	e7d7      	b.n	801609e <__hexnan+0x2e>
 80160ee:	2a29      	cmp	r2, #41	; 0x29
 80160f0:	d14a      	bne.n	8016188 <__hexnan+0x118>
 80160f2:	3102      	adds	r1, #2
 80160f4:	f8ca 1000 	str.w	r1, [sl]
 80160f8:	f1bb 0f00 	cmp.w	fp, #0
 80160fc:	d044      	beq.n	8016188 <__hexnan+0x118>
 80160fe:	454c      	cmp	r4, r9
 8016100:	d206      	bcs.n	8016110 <__hexnan+0xa0>
 8016102:	2d07      	cmp	r5, #7
 8016104:	dc04      	bgt.n	8016110 <__hexnan+0xa0>
 8016106:	462a      	mov	r2, r5
 8016108:	4649      	mov	r1, r9
 801610a:	4620      	mov	r0, r4
 801610c:	f7ff ff8a 	bl	8016024 <L_shift>
 8016110:	4544      	cmp	r4, r8
 8016112:	d928      	bls.n	8016166 <__hexnan+0xf6>
 8016114:	4643      	mov	r3, r8
 8016116:	f854 2b04 	ldr.w	r2, [r4], #4
 801611a:	f843 2b04 	str.w	r2, [r3], #4
 801611e:	42a6      	cmp	r6, r4
 8016120:	d2f9      	bcs.n	8016116 <__hexnan+0xa6>
 8016122:	2200      	movs	r2, #0
 8016124:	f843 2b04 	str.w	r2, [r3], #4
 8016128:	429e      	cmp	r6, r3
 801612a:	d2fb      	bcs.n	8016124 <__hexnan+0xb4>
 801612c:	6833      	ldr	r3, [r6, #0]
 801612e:	b91b      	cbnz	r3, 8016138 <__hexnan+0xc8>
 8016130:	4546      	cmp	r6, r8
 8016132:	d127      	bne.n	8016184 <__hexnan+0x114>
 8016134:	2301      	movs	r3, #1
 8016136:	6033      	str	r3, [r6, #0]
 8016138:	2005      	movs	r0, #5
 801613a:	e026      	b.n	801618a <__hexnan+0x11a>
 801613c:	3501      	adds	r5, #1
 801613e:	2d08      	cmp	r5, #8
 8016140:	f10b 0b01 	add.w	fp, fp, #1
 8016144:	dd06      	ble.n	8016154 <__hexnan+0xe4>
 8016146:	4544      	cmp	r4, r8
 8016148:	d9cf      	bls.n	80160ea <__hexnan+0x7a>
 801614a:	2300      	movs	r3, #0
 801614c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016150:	2501      	movs	r5, #1
 8016152:	3c04      	subs	r4, #4
 8016154:	6822      	ldr	r2, [r4, #0]
 8016156:	f000 000f 	and.w	r0, r0, #15
 801615a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801615e:	6020      	str	r0, [r4, #0]
 8016160:	e7c3      	b.n	80160ea <__hexnan+0x7a>
 8016162:	2508      	movs	r5, #8
 8016164:	e7c1      	b.n	80160ea <__hexnan+0x7a>
 8016166:	9b01      	ldr	r3, [sp, #4]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d0df      	beq.n	801612c <__hexnan+0xbc>
 801616c:	f04f 32ff 	mov.w	r2, #4294967295
 8016170:	f1c3 0320 	rsb	r3, r3, #32
 8016174:	fa22 f303 	lsr.w	r3, r2, r3
 8016178:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801617c:	401a      	ands	r2, r3
 801617e:	f847 2c04 	str.w	r2, [r7, #-4]
 8016182:	e7d3      	b.n	801612c <__hexnan+0xbc>
 8016184:	3e04      	subs	r6, #4
 8016186:	e7d1      	b.n	801612c <__hexnan+0xbc>
 8016188:	2004      	movs	r0, #4
 801618a:	b007      	add	sp, #28
 801618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016190 <__locale_ctype_ptr_l>:
 8016190:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016194:	4770      	bx	lr

08016196 <__localeconv_l>:
 8016196:	30f0      	adds	r0, #240	; 0xf0
 8016198:	4770      	bx	lr
	...

0801619c <_localeconv_r>:
 801619c:	4b04      	ldr	r3, [pc, #16]	; (80161b0 <_localeconv_r+0x14>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	6a18      	ldr	r0, [r3, #32]
 80161a2:	4b04      	ldr	r3, [pc, #16]	; (80161b4 <_localeconv_r+0x18>)
 80161a4:	2800      	cmp	r0, #0
 80161a6:	bf08      	it	eq
 80161a8:	4618      	moveq	r0, r3
 80161aa:	30f0      	adds	r0, #240	; 0xf0
 80161ac:	4770      	bx	lr
 80161ae:	bf00      	nop
 80161b0:	200001a8 	.word	0x200001a8
 80161b4:	2000020c 	.word	0x2000020c

080161b8 <malloc>:
 80161b8:	4b02      	ldr	r3, [pc, #8]	; (80161c4 <malloc+0xc>)
 80161ba:	4601      	mov	r1, r0
 80161bc:	6818      	ldr	r0, [r3, #0]
 80161be:	f000 bc71 	b.w	8016aa4 <_malloc_r>
 80161c2:	bf00      	nop
 80161c4:	200001a8 	.word	0x200001a8

080161c8 <__ascii_mbtowc>:
 80161c8:	b082      	sub	sp, #8
 80161ca:	b901      	cbnz	r1, 80161ce <__ascii_mbtowc+0x6>
 80161cc:	a901      	add	r1, sp, #4
 80161ce:	b142      	cbz	r2, 80161e2 <__ascii_mbtowc+0x1a>
 80161d0:	b14b      	cbz	r3, 80161e6 <__ascii_mbtowc+0x1e>
 80161d2:	7813      	ldrb	r3, [r2, #0]
 80161d4:	600b      	str	r3, [r1, #0]
 80161d6:	7812      	ldrb	r2, [r2, #0]
 80161d8:	1c10      	adds	r0, r2, #0
 80161da:	bf18      	it	ne
 80161dc:	2001      	movne	r0, #1
 80161de:	b002      	add	sp, #8
 80161e0:	4770      	bx	lr
 80161e2:	4610      	mov	r0, r2
 80161e4:	e7fb      	b.n	80161de <__ascii_mbtowc+0x16>
 80161e6:	f06f 0001 	mvn.w	r0, #1
 80161ea:	e7f8      	b.n	80161de <__ascii_mbtowc+0x16>

080161ec <_Balloc>:
 80161ec:	b570      	push	{r4, r5, r6, lr}
 80161ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80161f0:	4604      	mov	r4, r0
 80161f2:	460e      	mov	r6, r1
 80161f4:	b93d      	cbnz	r5, 8016206 <_Balloc+0x1a>
 80161f6:	2010      	movs	r0, #16
 80161f8:	f7ff ffde 	bl	80161b8 <malloc>
 80161fc:	6260      	str	r0, [r4, #36]	; 0x24
 80161fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016202:	6005      	str	r5, [r0, #0]
 8016204:	60c5      	str	r5, [r0, #12]
 8016206:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016208:	68eb      	ldr	r3, [r5, #12]
 801620a:	b183      	cbz	r3, 801622e <_Balloc+0x42>
 801620c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801620e:	68db      	ldr	r3, [r3, #12]
 8016210:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016214:	b9b8      	cbnz	r0, 8016246 <_Balloc+0x5a>
 8016216:	2101      	movs	r1, #1
 8016218:	fa01 f506 	lsl.w	r5, r1, r6
 801621c:	1d6a      	adds	r2, r5, #5
 801621e:	0092      	lsls	r2, r2, #2
 8016220:	4620      	mov	r0, r4
 8016222:	f000 fbe3 	bl	80169ec <_calloc_r>
 8016226:	b160      	cbz	r0, 8016242 <_Balloc+0x56>
 8016228:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801622c:	e00e      	b.n	801624c <_Balloc+0x60>
 801622e:	2221      	movs	r2, #33	; 0x21
 8016230:	2104      	movs	r1, #4
 8016232:	4620      	mov	r0, r4
 8016234:	f000 fbda 	bl	80169ec <_calloc_r>
 8016238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801623a:	60e8      	str	r0, [r5, #12]
 801623c:	68db      	ldr	r3, [r3, #12]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d1e4      	bne.n	801620c <_Balloc+0x20>
 8016242:	2000      	movs	r0, #0
 8016244:	bd70      	pop	{r4, r5, r6, pc}
 8016246:	6802      	ldr	r2, [r0, #0]
 8016248:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801624c:	2300      	movs	r3, #0
 801624e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016252:	e7f7      	b.n	8016244 <_Balloc+0x58>

08016254 <_Bfree>:
 8016254:	b570      	push	{r4, r5, r6, lr}
 8016256:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016258:	4606      	mov	r6, r0
 801625a:	460d      	mov	r5, r1
 801625c:	b93c      	cbnz	r4, 801626e <_Bfree+0x1a>
 801625e:	2010      	movs	r0, #16
 8016260:	f7ff ffaa 	bl	80161b8 <malloc>
 8016264:	6270      	str	r0, [r6, #36]	; 0x24
 8016266:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801626a:	6004      	str	r4, [r0, #0]
 801626c:	60c4      	str	r4, [r0, #12]
 801626e:	b13d      	cbz	r5, 8016280 <_Bfree+0x2c>
 8016270:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016272:	686a      	ldr	r2, [r5, #4]
 8016274:	68db      	ldr	r3, [r3, #12]
 8016276:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801627a:	6029      	str	r1, [r5, #0]
 801627c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016280:	bd70      	pop	{r4, r5, r6, pc}

08016282 <__multadd>:
 8016282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016286:	690d      	ldr	r5, [r1, #16]
 8016288:	461f      	mov	r7, r3
 801628a:	4606      	mov	r6, r0
 801628c:	460c      	mov	r4, r1
 801628e:	f101 0c14 	add.w	ip, r1, #20
 8016292:	2300      	movs	r3, #0
 8016294:	f8dc 0000 	ldr.w	r0, [ip]
 8016298:	b281      	uxth	r1, r0
 801629a:	fb02 7101 	mla	r1, r2, r1, r7
 801629e:	0c0f      	lsrs	r7, r1, #16
 80162a0:	0c00      	lsrs	r0, r0, #16
 80162a2:	fb02 7000 	mla	r0, r2, r0, r7
 80162a6:	b289      	uxth	r1, r1
 80162a8:	3301      	adds	r3, #1
 80162aa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80162ae:	429d      	cmp	r5, r3
 80162b0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80162b4:	f84c 1b04 	str.w	r1, [ip], #4
 80162b8:	dcec      	bgt.n	8016294 <__multadd+0x12>
 80162ba:	b1d7      	cbz	r7, 80162f2 <__multadd+0x70>
 80162bc:	68a3      	ldr	r3, [r4, #8]
 80162be:	42ab      	cmp	r3, r5
 80162c0:	dc12      	bgt.n	80162e8 <__multadd+0x66>
 80162c2:	6861      	ldr	r1, [r4, #4]
 80162c4:	4630      	mov	r0, r6
 80162c6:	3101      	adds	r1, #1
 80162c8:	f7ff ff90 	bl	80161ec <_Balloc>
 80162cc:	6922      	ldr	r2, [r4, #16]
 80162ce:	3202      	adds	r2, #2
 80162d0:	f104 010c 	add.w	r1, r4, #12
 80162d4:	4680      	mov	r8, r0
 80162d6:	0092      	lsls	r2, r2, #2
 80162d8:	300c      	adds	r0, #12
 80162da:	f7fd f8ab 	bl	8013434 <memcpy>
 80162de:	4621      	mov	r1, r4
 80162e0:	4630      	mov	r0, r6
 80162e2:	f7ff ffb7 	bl	8016254 <_Bfree>
 80162e6:	4644      	mov	r4, r8
 80162e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80162ec:	3501      	adds	r5, #1
 80162ee:	615f      	str	r7, [r3, #20]
 80162f0:	6125      	str	r5, [r4, #16]
 80162f2:	4620      	mov	r0, r4
 80162f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162f8 <__s2b>:
 80162f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162fc:	460c      	mov	r4, r1
 80162fe:	4615      	mov	r5, r2
 8016300:	461f      	mov	r7, r3
 8016302:	2209      	movs	r2, #9
 8016304:	3308      	adds	r3, #8
 8016306:	4606      	mov	r6, r0
 8016308:	fb93 f3f2 	sdiv	r3, r3, r2
 801630c:	2100      	movs	r1, #0
 801630e:	2201      	movs	r2, #1
 8016310:	429a      	cmp	r2, r3
 8016312:	db20      	blt.n	8016356 <__s2b+0x5e>
 8016314:	4630      	mov	r0, r6
 8016316:	f7ff ff69 	bl	80161ec <_Balloc>
 801631a:	9b08      	ldr	r3, [sp, #32]
 801631c:	6143      	str	r3, [r0, #20]
 801631e:	2d09      	cmp	r5, #9
 8016320:	f04f 0301 	mov.w	r3, #1
 8016324:	6103      	str	r3, [r0, #16]
 8016326:	dd19      	ble.n	801635c <__s2b+0x64>
 8016328:	f104 0809 	add.w	r8, r4, #9
 801632c:	46c1      	mov	r9, r8
 801632e:	442c      	add	r4, r5
 8016330:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016334:	4601      	mov	r1, r0
 8016336:	3b30      	subs	r3, #48	; 0x30
 8016338:	220a      	movs	r2, #10
 801633a:	4630      	mov	r0, r6
 801633c:	f7ff ffa1 	bl	8016282 <__multadd>
 8016340:	45a1      	cmp	r9, r4
 8016342:	d1f5      	bne.n	8016330 <__s2b+0x38>
 8016344:	eb08 0405 	add.w	r4, r8, r5
 8016348:	3c08      	subs	r4, #8
 801634a:	1b2d      	subs	r5, r5, r4
 801634c:	1963      	adds	r3, r4, r5
 801634e:	42bb      	cmp	r3, r7
 8016350:	db07      	blt.n	8016362 <__s2b+0x6a>
 8016352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016356:	0052      	lsls	r2, r2, #1
 8016358:	3101      	adds	r1, #1
 801635a:	e7d9      	b.n	8016310 <__s2b+0x18>
 801635c:	340a      	adds	r4, #10
 801635e:	2509      	movs	r5, #9
 8016360:	e7f3      	b.n	801634a <__s2b+0x52>
 8016362:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016366:	4601      	mov	r1, r0
 8016368:	3b30      	subs	r3, #48	; 0x30
 801636a:	220a      	movs	r2, #10
 801636c:	4630      	mov	r0, r6
 801636e:	f7ff ff88 	bl	8016282 <__multadd>
 8016372:	e7eb      	b.n	801634c <__s2b+0x54>

08016374 <__hi0bits>:
 8016374:	0c02      	lsrs	r2, r0, #16
 8016376:	0412      	lsls	r2, r2, #16
 8016378:	4603      	mov	r3, r0
 801637a:	b9b2      	cbnz	r2, 80163aa <__hi0bits+0x36>
 801637c:	0403      	lsls	r3, r0, #16
 801637e:	2010      	movs	r0, #16
 8016380:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016384:	bf04      	itt	eq
 8016386:	021b      	lsleq	r3, r3, #8
 8016388:	3008      	addeq	r0, #8
 801638a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801638e:	bf04      	itt	eq
 8016390:	011b      	lsleq	r3, r3, #4
 8016392:	3004      	addeq	r0, #4
 8016394:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016398:	bf04      	itt	eq
 801639a:	009b      	lsleq	r3, r3, #2
 801639c:	3002      	addeq	r0, #2
 801639e:	2b00      	cmp	r3, #0
 80163a0:	db06      	blt.n	80163b0 <__hi0bits+0x3c>
 80163a2:	005b      	lsls	r3, r3, #1
 80163a4:	d503      	bpl.n	80163ae <__hi0bits+0x3a>
 80163a6:	3001      	adds	r0, #1
 80163a8:	4770      	bx	lr
 80163aa:	2000      	movs	r0, #0
 80163ac:	e7e8      	b.n	8016380 <__hi0bits+0xc>
 80163ae:	2020      	movs	r0, #32
 80163b0:	4770      	bx	lr

080163b2 <__lo0bits>:
 80163b2:	6803      	ldr	r3, [r0, #0]
 80163b4:	f013 0207 	ands.w	r2, r3, #7
 80163b8:	4601      	mov	r1, r0
 80163ba:	d00b      	beq.n	80163d4 <__lo0bits+0x22>
 80163bc:	07da      	lsls	r2, r3, #31
 80163be:	d423      	bmi.n	8016408 <__lo0bits+0x56>
 80163c0:	0798      	lsls	r0, r3, #30
 80163c2:	bf49      	itett	mi
 80163c4:	085b      	lsrmi	r3, r3, #1
 80163c6:	089b      	lsrpl	r3, r3, #2
 80163c8:	2001      	movmi	r0, #1
 80163ca:	600b      	strmi	r3, [r1, #0]
 80163cc:	bf5c      	itt	pl
 80163ce:	600b      	strpl	r3, [r1, #0]
 80163d0:	2002      	movpl	r0, #2
 80163d2:	4770      	bx	lr
 80163d4:	b298      	uxth	r0, r3
 80163d6:	b9a8      	cbnz	r0, 8016404 <__lo0bits+0x52>
 80163d8:	0c1b      	lsrs	r3, r3, #16
 80163da:	2010      	movs	r0, #16
 80163dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80163e0:	bf04      	itt	eq
 80163e2:	0a1b      	lsreq	r3, r3, #8
 80163e4:	3008      	addeq	r0, #8
 80163e6:	071a      	lsls	r2, r3, #28
 80163e8:	bf04      	itt	eq
 80163ea:	091b      	lsreq	r3, r3, #4
 80163ec:	3004      	addeq	r0, #4
 80163ee:	079a      	lsls	r2, r3, #30
 80163f0:	bf04      	itt	eq
 80163f2:	089b      	lsreq	r3, r3, #2
 80163f4:	3002      	addeq	r0, #2
 80163f6:	07da      	lsls	r2, r3, #31
 80163f8:	d402      	bmi.n	8016400 <__lo0bits+0x4e>
 80163fa:	085b      	lsrs	r3, r3, #1
 80163fc:	d006      	beq.n	801640c <__lo0bits+0x5a>
 80163fe:	3001      	adds	r0, #1
 8016400:	600b      	str	r3, [r1, #0]
 8016402:	4770      	bx	lr
 8016404:	4610      	mov	r0, r2
 8016406:	e7e9      	b.n	80163dc <__lo0bits+0x2a>
 8016408:	2000      	movs	r0, #0
 801640a:	4770      	bx	lr
 801640c:	2020      	movs	r0, #32
 801640e:	4770      	bx	lr

08016410 <__i2b>:
 8016410:	b510      	push	{r4, lr}
 8016412:	460c      	mov	r4, r1
 8016414:	2101      	movs	r1, #1
 8016416:	f7ff fee9 	bl	80161ec <_Balloc>
 801641a:	2201      	movs	r2, #1
 801641c:	6144      	str	r4, [r0, #20]
 801641e:	6102      	str	r2, [r0, #16]
 8016420:	bd10      	pop	{r4, pc}

08016422 <__multiply>:
 8016422:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016426:	4614      	mov	r4, r2
 8016428:	690a      	ldr	r2, [r1, #16]
 801642a:	6923      	ldr	r3, [r4, #16]
 801642c:	429a      	cmp	r2, r3
 801642e:	bfb8      	it	lt
 8016430:	460b      	movlt	r3, r1
 8016432:	4688      	mov	r8, r1
 8016434:	bfbc      	itt	lt
 8016436:	46a0      	movlt	r8, r4
 8016438:	461c      	movlt	r4, r3
 801643a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801643e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016442:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016446:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801644a:	eb07 0609 	add.w	r6, r7, r9
 801644e:	42b3      	cmp	r3, r6
 8016450:	bfb8      	it	lt
 8016452:	3101      	addlt	r1, #1
 8016454:	f7ff feca 	bl	80161ec <_Balloc>
 8016458:	f100 0514 	add.w	r5, r0, #20
 801645c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016460:	462b      	mov	r3, r5
 8016462:	2200      	movs	r2, #0
 8016464:	4573      	cmp	r3, lr
 8016466:	d316      	bcc.n	8016496 <__multiply+0x74>
 8016468:	f104 0214 	add.w	r2, r4, #20
 801646c:	f108 0114 	add.w	r1, r8, #20
 8016470:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016474:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016478:	9300      	str	r3, [sp, #0]
 801647a:	9b00      	ldr	r3, [sp, #0]
 801647c:	9201      	str	r2, [sp, #4]
 801647e:	4293      	cmp	r3, r2
 8016480:	d80c      	bhi.n	801649c <__multiply+0x7a>
 8016482:	2e00      	cmp	r6, #0
 8016484:	dd03      	ble.n	801648e <__multiply+0x6c>
 8016486:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801648a:	2b00      	cmp	r3, #0
 801648c:	d05d      	beq.n	801654a <__multiply+0x128>
 801648e:	6106      	str	r6, [r0, #16]
 8016490:	b003      	add	sp, #12
 8016492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016496:	f843 2b04 	str.w	r2, [r3], #4
 801649a:	e7e3      	b.n	8016464 <__multiply+0x42>
 801649c:	f8b2 b000 	ldrh.w	fp, [r2]
 80164a0:	f1bb 0f00 	cmp.w	fp, #0
 80164a4:	d023      	beq.n	80164ee <__multiply+0xcc>
 80164a6:	4689      	mov	r9, r1
 80164a8:	46ac      	mov	ip, r5
 80164aa:	f04f 0800 	mov.w	r8, #0
 80164ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80164b2:	f8dc a000 	ldr.w	sl, [ip]
 80164b6:	b2a3      	uxth	r3, r4
 80164b8:	fa1f fa8a 	uxth.w	sl, sl
 80164bc:	fb0b a303 	mla	r3, fp, r3, sl
 80164c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80164c4:	f8dc 4000 	ldr.w	r4, [ip]
 80164c8:	4443      	add	r3, r8
 80164ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80164ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80164d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80164d6:	46e2      	mov	sl, ip
 80164d8:	b29b      	uxth	r3, r3
 80164da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80164de:	454f      	cmp	r7, r9
 80164e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80164e4:	f84a 3b04 	str.w	r3, [sl], #4
 80164e8:	d82b      	bhi.n	8016542 <__multiply+0x120>
 80164ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80164ee:	9b01      	ldr	r3, [sp, #4]
 80164f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80164f4:	3204      	adds	r2, #4
 80164f6:	f1ba 0f00 	cmp.w	sl, #0
 80164fa:	d020      	beq.n	801653e <__multiply+0x11c>
 80164fc:	682b      	ldr	r3, [r5, #0]
 80164fe:	4689      	mov	r9, r1
 8016500:	46a8      	mov	r8, r5
 8016502:	f04f 0b00 	mov.w	fp, #0
 8016506:	f8b9 c000 	ldrh.w	ip, [r9]
 801650a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801650e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016512:	445c      	add	r4, fp
 8016514:	46c4      	mov	ip, r8
 8016516:	b29b      	uxth	r3, r3
 8016518:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801651c:	f84c 3b04 	str.w	r3, [ip], #4
 8016520:	f859 3b04 	ldr.w	r3, [r9], #4
 8016524:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016528:	0c1b      	lsrs	r3, r3, #16
 801652a:	fb0a b303 	mla	r3, sl, r3, fp
 801652e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016532:	454f      	cmp	r7, r9
 8016534:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016538:	d805      	bhi.n	8016546 <__multiply+0x124>
 801653a:	f8c8 3004 	str.w	r3, [r8, #4]
 801653e:	3504      	adds	r5, #4
 8016540:	e79b      	b.n	801647a <__multiply+0x58>
 8016542:	46d4      	mov	ip, sl
 8016544:	e7b3      	b.n	80164ae <__multiply+0x8c>
 8016546:	46e0      	mov	r8, ip
 8016548:	e7dd      	b.n	8016506 <__multiply+0xe4>
 801654a:	3e01      	subs	r6, #1
 801654c:	e799      	b.n	8016482 <__multiply+0x60>
	...

08016550 <__pow5mult>:
 8016550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016554:	4615      	mov	r5, r2
 8016556:	f012 0203 	ands.w	r2, r2, #3
 801655a:	4606      	mov	r6, r0
 801655c:	460f      	mov	r7, r1
 801655e:	d007      	beq.n	8016570 <__pow5mult+0x20>
 8016560:	3a01      	subs	r2, #1
 8016562:	4c21      	ldr	r4, [pc, #132]	; (80165e8 <__pow5mult+0x98>)
 8016564:	2300      	movs	r3, #0
 8016566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801656a:	f7ff fe8a 	bl	8016282 <__multadd>
 801656e:	4607      	mov	r7, r0
 8016570:	10ad      	asrs	r5, r5, #2
 8016572:	d035      	beq.n	80165e0 <__pow5mult+0x90>
 8016574:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016576:	b93c      	cbnz	r4, 8016588 <__pow5mult+0x38>
 8016578:	2010      	movs	r0, #16
 801657a:	f7ff fe1d 	bl	80161b8 <malloc>
 801657e:	6270      	str	r0, [r6, #36]	; 0x24
 8016580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016584:	6004      	str	r4, [r0, #0]
 8016586:	60c4      	str	r4, [r0, #12]
 8016588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801658c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016590:	b94c      	cbnz	r4, 80165a6 <__pow5mult+0x56>
 8016592:	f240 2171 	movw	r1, #625	; 0x271
 8016596:	4630      	mov	r0, r6
 8016598:	f7ff ff3a 	bl	8016410 <__i2b>
 801659c:	2300      	movs	r3, #0
 801659e:	f8c8 0008 	str.w	r0, [r8, #8]
 80165a2:	4604      	mov	r4, r0
 80165a4:	6003      	str	r3, [r0, #0]
 80165a6:	f04f 0800 	mov.w	r8, #0
 80165aa:	07eb      	lsls	r3, r5, #31
 80165ac:	d50a      	bpl.n	80165c4 <__pow5mult+0x74>
 80165ae:	4639      	mov	r1, r7
 80165b0:	4622      	mov	r2, r4
 80165b2:	4630      	mov	r0, r6
 80165b4:	f7ff ff35 	bl	8016422 <__multiply>
 80165b8:	4639      	mov	r1, r7
 80165ba:	4681      	mov	r9, r0
 80165bc:	4630      	mov	r0, r6
 80165be:	f7ff fe49 	bl	8016254 <_Bfree>
 80165c2:	464f      	mov	r7, r9
 80165c4:	106d      	asrs	r5, r5, #1
 80165c6:	d00b      	beq.n	80165e0 <__pow5mult+0x90>
 80165c8:	6820      	ldr	r0, [r4, #0]
 80165ca:	b938      	cbnz	r0, 80165dc <__pow5mult+0x8c>
 80165cc:	4622      	mov	r2, r4
 80165ce:	4621      	mov	r1, r4
 80165d0:	4630      	mov	r0, r6
 80165d2:	f7ff ff26 	bl	8016422 <__multiply>
 80165d6:	6020      	str	r0, [r4, #0]
 80165d8:	f8c0 8000 	str.w	r8, [r0]
 80165dc:	4604      	mov	r4, r0
 80165de:	e7e4      	b.n	80165aa <__pow5mult+0x5a>
 80165e0:	4638      	mov	r0, r7
 80165e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165e6:	bf00      	nop
 80165e8:	08018ae8 	.word	0x08018ae8

080165ec <__lshift>:
 80165ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165f0:	460c      	mov	r4, r1
 80165f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80165f6:	6923      	ldr	r3, [r4, #16]
 80165f8:	6849      	ldr	r1, [r1, #4]
 80165fa:	eb0a 0903 	add.w	r9, sl, r3
 80165fe:	68a3      	ldr	r3, [r4, #8]
 8016600:	4607      	mov	r7, r0
 8016602:	4616      	mov	r6, r2
 8016604:	f109 0501 	add.w	r5, r9, #1
 8016608:	42ab      	cmp	r3, r5
 801660a:	db32      	blt.n	8016672 <__lshift+0x86>
 801660c:	4638      	mov	r0, r7
 801660e:	f7ff fded 	bl	80161ec <_Balloc>
 8016612:	2300      	movs	r3, #0
 8016614:	4680      	mov	r8, r0
 8016616:	f100 0114 	add.w	r1, r0, #20
 801661a:	461a      	mov	r2, r3
 801661c:	4553      	cmp	r3, sl
 801661e:	db2b      	blt.n	8016678 <__lshift+0x8c>
 8016620:	6920      	ldr	r0, [r4, #16]
 8016622:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016626:	f104 0314 	add.w	r3, r4, #20
 801662a:	f016 021f 	ands.w	r2, r6, #31
 801662e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016632:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016636:	d025      	beq.n	8016684 <__lshift+0x98>
 8016638:	f1c2 0e20 	rsb	lr, r2, #32
 801663c:	2000      	movs	r0, #0
 801663e:	681e      	ldr	r6, [r3, #0]
 8016640:	468a      	mov	sl, r1
 8016642:	4096      	lsls	r6, r2
 8016644:	4330      	orrs	r0, r6
 8016646:	f84a 0b04 	str.w	r0, [sl], #4
 801664a:	f853 0b04 	ldr.w	r0, [r3], #4
 801664e:	459c      	cmp	ip, r3
 8016650:	fa20 f00e 	lsr.w	r0, r0, lr
 8016654:	d814      	bhi.n	8016680 <__lshift+0x94>
 8016656:	6048      	str	r0, [r1, #4]
 8016658:	b108      	cbz	r0, 801665e <__lshift+0x72>
 801665a:	f109 0502 	add.w	r5, r9, #2
 801665e:	3d01      	subs	r5, #1
 8016660:	4638      	mov	r0, r7
 8016662:	f8c8 5010 	str.w	r5, [r8, #16]
 8016666:	4621      	mov	r1, r4
 8016668:	f7ff fdf4 	bl	8016254 <_Bfree>
 801666c:	4640      	mov	r0, r8
 801666e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016672:	3101      	adds	r1, #1
 8016674:	005b      	lsls	r3, r3, #1
 8016676:	e7c7      	b.n	8016608 <__lshift+0x1c>
 8016678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801667c:	3301      	adds	r3, #1
 801667e:	e7cd      	b.n	801661c <__lshift+0x30>
 8016680:	4651      	mov	r1, sl
 8016682:	e7dc      	b.n	801663e <__lshift+0x52>
 8016684:	3904      	subs	r1, #4
 8016686:	f853 2b04 	ldr.w	r2, [r3], #4
 801668a:	f841 2f04 	str.w	r2, [r1, #4]!
 801668e:	459c      	cmp	ip, r3
 8016690:	d8f9      	bhi.n	8016686 <__lshift+0x9a>
 8016692:	e7e4      	b.n	801665e <__lshift+0x72>

08016694 <__mcmp>:
 8016694:	6903      	ldr	r3, [r0, #16]
 8016696:	690a      	ldr	r2, [r1, #16]
 8016698:	1a9b      	subs	r3, r3, r2
 801669a:	b530      	push	{r4, r5, lr}
 801669c:	d10c      	bne.n	80166b8 <__mcmp+0x24>
 801669e:	0092      	lsls	r2, r2, #2
 80166a0:	3014      	adds	r0, #20
 80166a2:	3114      	adds	r1, #20
 80166a4:	1884      	adds	r4, r0, r2
 80166a6:	4411      	add	r1, r2
 80166a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80166ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80166b0:	4295      	cmp	r5, r2
 80166b2:	d003      	beq.n	80166bc <__mcmp+0x28>
 80166b4:	d305      	bcc.n	80166c2 <__mcmp+0x2e>
 80166b6:	2301      	movs	r3, #1
 80166b8:	4618      	mov	r0, r3
 80166ba:	bd30      	pop	{r4, r5, pc}
 80166bc:	42a0      	cmp	r0, r4
 80166be:	d3f3      	bcc.n	80166a8 <__mcmp+0x14>
 80166c0:	e7fa      	b.n	80166b8 <__mcmp+0x24>
 80166c2:	f04f 33ff 	mov.w	r3, #4294967295
 80166c6:	e7f7      	b.n	80166b8 <__mcmp+0x24>

080166c8 <__mdiff>:
 80166c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166cc:	460d      	mov	r5, r1
 80166ce:	4607      	mov	r7, r0
 80166d0:	4611      	mov	r1, r2
 80166d2:	4628      	mov	r0, r5
 80166d4:	4614      	mov	r4, r2
 80166d6:	f7ff ffdd 	bl	8016694 <__mcmp>
 80166da:	1e06      	subs	r6, r0, #0
 80166dc:	d108      	bne.n	80166f0 <__mdiff+0x28>
 80166de:	4631      	mov	r1, r6
 80166e0:	4638      	mov	r0, r7
 80166e2:	f7ff fd83 	bl	80161ec <_Balloc>
 80166e6:	2301      	movs	r3, #1
 80166e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80166ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166f0:	bfa4      	itt	ge
 80166f2:	4623      	movge	r3, r4
 80166f4:	462c      	movge	r4, r5
 80166f6:	4638      	mov	r0, r7
 80166f8:	6861      	ldr	r1, [r4, #4]
 80166fa:	bfa6      	itte	ge
 80166fc:	461d      	movge	r5, r3
 80166fe:	2600      	movge	r6, #0
 8016700:	2601      	movlt	r6, #1
 8016702:	f7ff fd73 	bl	80161ec <_Balloc>
 8016706:	692b      	ldr	r3, [r5, #16]
 8016708:	60c6      	str	r6, [r0, #12]
 801670a:	6926      	ldr	r6, [r4, #16]
 801670c:	f105 0914 	add.w	r9, r5, #20
 8016710:	f104 0214 	add.w	r2, r4, #20
 8016714:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016718:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801671c:	f100 0514 	add.w	r5, r0, #20
 8016720:	f04f 0e00 	mov.w	lr, #0
 8016724:	f852 ab04 	ldr.w	sl, [r2], #4
 8016728:	f859 4b04 	ldr.w	r4, [r9], #4
 801672c:	fa1e f18a 	uxtah	r1, lr, sl
 8016730:	b2a3      	uxth	r3, r4
 8016732:	1ac9      	subs	r1, r1, r3
 8016734:	0c23      	lsrs	r3, r4, #16
 8016736:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801673a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801673e:	b289      	uxth	r1, r1
 8016740:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016744:	45c8      	cmp	r8, r9
 8016746:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801674a:	4694      	mov	ip, r2
 801674c:	f845 3b04 	str.w	r3, [r5], #4
 8016750:	d8e8      	bhi.n	8016724 <__mdiff+0x5c>
 8016752:	45bc      	cmp	ip, r7
 8016754:	d304      	bcc.n	8016760 <__mdiff+0x98>
 8016756:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801675a:	b183      	cbz	r3, 801677e <__mdiff+0xb6>
 801675c:	6106      	str	r6, [r0, #16]
 801675e:	e7c5      	b.n	80166ec <__mdiff+0x24>
 8016760:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016764:	fa1e f381 	uxtah	r3, lr, r1
 8016768:	141a      	asrs	r2, r3, #16
 801676a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801676e:	b29b      	uxth	r3, r3
 8016770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016774:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016778:	f845 3b04 	str.w	r3, [r5], #4
 801677c:	e7e9      	b.n	8016752 <__mdiff+0x8a>
 801677e:	3e01      	subs	r6, #1
 8016780:	e7e9      	b.n	8016756 <__mdiff+0x8e>
	...

08016784 <__ulp>:
 8016784:	4b12      	ldr	r3, [pc, #72]	; (80167d0 <__ulp+0x4c>)
 8016786:	ee10 2a90 	vmov	r2, s1
 801678a:	401a      	ands	r2, r3
 801678c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016790:	2b00      	cmp	r3, #0
 8016792:	dd04      	ble.n	801679e <__ulp+0x1a>
 8016794:	2000      	movs	r0, #0
 8016796:	4619      	mov	r1, r3
 8016798:	ec41 0b10 	vmov	d0, r0, r1
 801679c:	4770      	bx	lr
 801679e:	425b      	negs	r3, r3
 80167a0:	151b      	asrs	r3, r3, #20
 80167a2:	2b13      	cmp	r3, #19
 80167a4:	f04f 0000 	mov.w	r0, #0
 80167a8:	f04f 0100 	mov.w	r1, #0
 80167ac:	dc04      	bgt.n	80167b8 <__ulp+0x34>
 80167ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80167b2:	fa42 f103 	asr.w	r1, r2, r3
 80167b6:	e7ef      	b.n	8016798 <__ulp+0x14>
 80167b8:	3b14      	subs	r3, #20
 80167ba:	2b1e      	cmp	r3, #30
 80167bc:	f04f 0201 	mov.w	r2, #1
 80167c0:	bfda      	itte	le
 80167c2:	f1c3 031f 	rsble	r3, r3, #31
 80167c6:	fa02 f303 	lslle.w	r3, r2, r3
 80167ca:	4613      	movgt	r3, r2
 80167cc:	4618      	mov	r0, r3
 80167ce:	e7e3      	b.n	8016798 <__ulp+0x14>
 80167d0:	7ff00000 	.word	0x7ff00000

080167d4 <__b2d>:
 80167d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167d6:	6905      	ldr	r5, [r0, #16]
 80167d8:	f100 0714 	add.w	r7, r0, #20
 80167dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80167e0:	1f2e      	subs	r6, r5, #4
 80167e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80167e6:	4620      	mov	r0, r4
 80167e8:	f7ff fdc4 	bl	8016374 <__hi0bits>
 80167ec:	f1c0 0320 	rsb	r3, r0, #32
 80167f0:	280a      	cmp	r0, #10
 80167f2:	600b      	str	r3, [r1, #0]
 80167f4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801686c <__b2d+0x98>
 80167f8:	dc14      	bgt.n	8016824 <__b2d+0x50>
 80167fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80167fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8016802:	42b7      	cmp	r7, r6
 8016804:	ea41 030c 	orr.w	r3, r1, ip
 8016808:	bf34      	ite	cc
 801680a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801680e:	2100      	movcs	r1, #0
 8016810:	3015      	adds	r0, #21
 8016812:	fa04 f000 	lsl.w	r0, r4, r0
 8016816:	fa21 f10e 	lsr.w	r1, r1, lr
 801681a:	ea40 0201 	orr.w	r2, r0, r1
 801681e:	ec43 2b10 	vmov	d0, r2, r3
 8016822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016824:	42b7      	cmp	r7, r6
 8016826:	bf3a      	itte	cc
 8016828:	f1a5 0608 	subcc.w	r6, r5, #8
 801682c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016830:	2100      	movcs	r1, #0
 8016832:	380b      	subs	r0, #11
 8016834:	d015      	beq.n	8016862 <__b2d+0x8e>
 8016836:	4084      	lsls	r4, r0
 8016838:	f1c0 0520 	rsb	r5, r0, #32
 801683c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016840:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016844:	42be      	cmp	r6, r7
 8016846:	fa21 fc05 	lsr.w	ip, r1, r5
 801684a:	ea44 030c 	orr.w	r3, r4, ip
 801684e:	bf8c      	ite	hi
 8016850:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016854:	2400      	movls	r4, #0
 8016856:	fa01 f000 	lsl.w	r0, r1, r0
 801685a:	40ec      	lsrs	r4, r5
 801685c:	ea40 0204 	orr.w	r2, r0, r4
 8016860:	e7dd      	b.n	801681e <__b2d+0x4a>
 8016862:	ea44 030c 	orr.w	r3, r4, ip
 8016866:	460a      	mov	r2, r1
 8016868:	e7d9      	b.n	801681e <__b2d+0x4a>
 801686a:	bf00      	nop
 801686c:	3ff00000 	.word	0x3ff00000

08016870 <__d2b>:
 8016870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016874:	460e      	mov	r6, r1
 8016876:	2101      	movs	r1, #1
 8016878:	ec59 8b10 	vmov	r8, r9, d0
 801687c:	4615      	mov	r5, r2
 801687e:	f7ff fcb5 	bl	80161ec <_Balloc>
 8016882:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016886:	4607      	mov	r7, r0
 8016888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801688c:	bb34      	cbnz	r4, 80168dc <__d2b+0x6c>
 801688e:	9301      	str	r3, [sp, #4]
 8016890:	f1b8 0300 	subs.w	r3, r8, #0
 8016894:	d027      	beq.n	80168e6 <__d2b+0x76>
 8016896:	a802      	add	r0, sp, #8
 8016898:	f840 3d08 	str.w	r3, [r0, #-8]!
 801689c:	f7ff fd89 	bl	80163b2 <__lo0bits>
 80168a0:	9900      	ldr	r1, [sp, #0]
 80168a2:	b1f0      	cbz	r0, 80168e2 <__d2b+0x72>
 80168a4:	9a01      	ldr	r2, [sp, #4]
 80168a6:	f1c0 0320 	rsb	r3, r0, #32
 80168aa:	fa02 f303 	lsl.w	r3, r2, r3
 80168ae:	430b      	orrs	r3, r1
 80168b0:	40c2      	lsrs	r2, r0
 80168b2:	617b      	str	r3, [r7, #20]
 80168b4:	9201      	str	r2, [sp, #4]
 80168b6:	9b01      	ldr	r3, [sp, #4]
 80168b8:	61bb      	str	r3, [r7, #24]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	bf14      	ite	ne
 80168be:	2102      	movne	r1, #2
 80168c0:	2101      	moveq	r1, #1
 80168c2:	6139      	str	r1, [r7, #16]
 80168c4:	b1c4      	cbz	r4, 80168f8 <__d2b+0x88>
 80168c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80168ca:	4404      	add	r4, r0
 80168cc:	6034      	str	r4, [r6, #0]
 80168ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80168d2:	6028      	str	r0, [r5, #0]
 80168d4:	4638      	mov	r0, r7
 80168d6:	b003      	add	sp, #12
 80168d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80168e0:	e7d5      	b.n	801688e <__d2b+0x1e>
 80168e2:	6179      	str	r1, [r7, #20]
 80168e4:	e7e7      	b.n	80168b6 <__d2b+0x46>
 80168e6:	a801      	add	r0, sp, #4
 80168e8:	f7ff fd63 	bl	80163b2 <__lo0bits>
 80168ec:	9b01      	ldr	r3, [sp, #4]
 80168ee:	617b      	str	r3, [r7, #20]
 80168f0:	2101      	movs	r1, #1
 80168f2:	6139      	str	r1, [r7, #16]
 80168f4:	3020      	adds	r0, #32
 80168f6:	e7e5      	b.n	80168c4 <__d2b+0x54>
 80168f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80168fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016900:	6030      	str	r0, [r6, #0]
 8016902:	6918      	ldr	r0, [r3, #16]
 8016904:	f7ff fd36 	bl	8016374 <__hi0bits>
 8016908:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801690c:	e7e1      	b.n	80168d2 <__d2b+0x62>

0801690e <__ratio>:
 801690e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016912:	4688      	mov	r8, r1
 8016914:	4669      	mov	r1, sp
 8016916:	4681      	mov	r9, r0
 8016918:	f7ff ff5c 	bl	80167d4 <__b2d>
 801691c:	a901      	add	r1, sp, #4
 801691e:	4640      	mov	r0, r8
 8016920:	ec57 6b10 	vmov	r6, r7, d0
 8016924:	ee10 4a10 	vmov	r4, s0
 8016928:	f7ff ff54 	bl	80167d4 <__b2d>
 801692c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016930:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016934:	eba3 0c02 	sub.w	ip, r3, r2
 8016938:	e9dd 3200 	ldrd	r3, r2, [sp]
 801693c:	1a9b      	subs	r3, r3, r2
 801693e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016942:	ec51 0b10 	vmov	r0, r1, d0
 8016946:	2b00      	cmp	r3, #0
 8016948:	ee10 aa10 	vmov	sl, s0
 801694c:	bfce      	itee	gt
 801694e:	463a      	movgt	r2, r7
 8016950:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016954:	460a      	movle	r2, r1
 8016956:	463d      	mov	r5, r7
 8016958:	468b      	mov	fp, r1
 801695a:	bfcc      	ite	gt
 801695c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016960:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016964:	ec45 4b17 	vmov	d7, r4, r5
 8016968:	ec4b ab16 	vmov	d6, sl, fp
 801696c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8016970:	b003      	add	sp, #12
 8016972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016976 <__copybits>:
 8016976:	3901      	subs	r1, #1
 8016978:	b510      	push	{r4, lr}
 801697a:	1149      	asrs	r1, r1, #5
 801697c:	6914      	ldr	r4, [r2, #16]
 801697e:	3101      	adds	r1, #1
 8016980:	f102 0314 	add.w	r3, r2, #20
 8016984:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801698c:	42a3      	cmp	r3, r4
 801698e:	4602      	mov	r2, r0
 8016990:	d303      	bcc.n	801699a <__copybits+0x24>
 8016992:	2300      	movs	r3, #0
 8016994:	428a      	cmp	r2, r1
 8016996:	d305      	bcc.n	80169a4 <__copybits+0x2e>
 8016998:	bd10      	pop	{r4, pc}
 801699a:	f853 2b04 	ldr.w	r2, [r3], #4
 801699e:	f840 2b04 	str.w	r2, [r0], #4
 80169a2:	e7f3      	b.n	801698c <__copybits+0x16>
 80169a4:	f842 3b04 	str.w	r3, [r2], #4
 80169a8:	e7f4      	b.n	8016994 <__copybits+0x1e>

080169aa <__any_on>:
 80169aa:	f100 0214 	add.w	r2, r0, #20
 80169ae:	6900      	ldr	r0, [r0, #16]
 80169b0:	114b      	asrs	r3, r1, #5
 80169b2:	4298      	cmp	r0, r3
 80169b4:	b510      	push	{r4, lr}
 80169b6:	db11      	blt.n	80169dc <__any_on+0x32>
 80169b8:	dd0a      	ble.n	80169d0 <__any_on+0x26>
 80169ba:	f011 011f 	ands.w	r1, r1, #31
 80169be:	d007      	beq.n	80169d0 <__any_on+0x26>
 80169c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80169c4:	fa24 f001 	lsr.w	r0, r4, r1
 80169c8:	fa00 f101 	lsl.w	r1, r0, r1
 80169cc:	428c      	cmp	r4, r1
 80169ce:	d10b      	bne.n	80169e8 <__any_on+0x3e>
 80169d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80169d4:	4293      	cmp	r3, r2
 80169d6:	d803      	bhi.n	80169e0 <__any_on+0x36>
 80169d8:	2000      	movs	r0, #0
 80169da:	bd10      	pop	{r4, pc}
 80169dc:	4603      	mov	r3, r0
 80169de:	e7f7      	b.n	80169d0 <__any_on+0x26>
 80169e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80169e4:	2900      	cmp	r1, #0
 80169e6:	d0f5      	beq.n	80169d4 <__any_on+0x2a>
 80169e8:	2001      	movs	r0, #1
 80169ea:	e7f6      	b.n	80169da <__any_on+0x30>

080169ec <_calloc_r>:
 80169ec:	b538      	push	{r3, r4, r5, lr}
 80169ee:	fb02 f401 	mul.w	r4, r2, r1
 80169f2:	4621      	mov	r1, r4
 80169f4:	f000 f856 	bl	8016aa4 <_malloc_r>
 80169f8:	4605      	mov	r5, r0
 80169fa:	b118      	cbz	r0, 8016a04 <_calloc_r+0x18>
 80169fc:	4622      	mov	r2, r4
 80169fe:	2100      	movs	r1, #0
 8016a00:	f7fc fd23 	bl	801344a <memset>
 8016a04:	4628      	mov	r0, r5
 8016a06:	bd38      	pop	{r3, r4, r5, pc}

08016a08 <_free_r>:
 8016a08:	b538      	push	{r3, r4, r5, lr}
 8016a0a:	4605      	mov	r5, r0
 8016a0c:	2900      	cmp	r1, #0
 8016a0e:	d045      	beq.n	8016a9c <_free_r+0x94>
 8016a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a14:	1f0c      	subs	r4, r1, #4
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	bfb8      	it	lt
 8016a1a:	18e4      	addlt	r4, r4, r3
 8016a1c:	f000 fdc3 	bl	80175a6 <__malloc_lock>
 8016a20:	4a1f      	ldr	r2, [pc, #124]	; (8016aa0 <_free_r+0x98>)
 8016a22:	6813      	ldr	r3, [r2, #0]
 8016a24:	4610      	mov	r0, r2
 8016a26:	b933      	cbnz	r3, 8016a36 <_free_r+0x2e>
 8016a28:	6063      	str	r3, [r4, #4]
 8016a2a:	6014      	str	r4, [r2, #0]
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a32:	f000 bdb9 	b.w	80175a8 <__malloc_unlock>
 8016a36:	42a3      	cmp	r3, r4
 8016a38:	d90c      	bls.n	8016a54 <_free_r+0x4c>
 8016a3a:	6821      	ldr	r1, [r4, #0]
 8016a3c:	1862      	adds	r2, r4, r1
 8016a3e:	4293      	cmp	r3, r2
 8016a40:	bf04      	itt	eq
 8016a42:	681a      	ldreq	r2, [r3, #0]
 8016a44:	685b      	ldreq	r3, [r3, #4]
 8016a46:	6063      	str	r3, [r4, #4]
 8016a48:	bf04      	itt	eq
 8016a4a:	1852      	addeq	r2, r2, r1
 8016a4c:	6022      	streq	r2, [r4, #0]
 8016a4e:	6004      	str	r4, [r0, #0]
 8016a50:	e7ec      	b.n	8016a2c <_free_r+0x24>
 8016a52:	4613      	mov	r3, r2
 8016a54:	685a      	ldr	r2, [r3, #4]
 8016a56:	b10a      	cbz	r2, 8016a5c <_free_r+0x54>
 8016a58:	42a2      	cmp	r2, r4
 8016a5a:	d9fa      	bls.n	8016a52 <_free_r+0x4a>
 8016a5c:	6819      	ldr	r1, [r3, #0]
 8016a5e:	1858      	adds	r0, r3, r1
 8016a60:	42a0      	cmp	r0, r4
 8016a62:	d10b      	bne.n	8016a7c <_free_r+0x74>
 8016a64:	6820      	ldr	r0, [r4, #0]
 8016a66:	4401      	add	r1, r0
 8016a68:	1858      	adds	r0, r3, r1
 8016a6a:	4282      	cmp	r2, r0
 8016a6c:	6019      	str	r1, [r3, #0]
 8016a6e:	d1dd      	bne.n	8016a2c <_free_r+0x24>
 8016a70:	6810      	ldr	r0, [r2, #0]
 8016a72:	6852      	ldr	r2, [r2, #4]
 8016a74:	605a      	str	r2, [r3, #4]
 8016a76:	4401      	add	r1, r0
 8016a78:	6019      	str	r1, [r3, #0]
 8016a7a:	e7d7      	b.n	8016a2c <_free_r+0x24>
 8016a7c:	d902      	bls.n	8016a84 <_free_r+0x7c>
 8016a7e:	230c      	movs	r3, #12
 8016a80:	602b      	str	r3, [r5, #0]
 8016a82:	e7d3      	b.n	8016a2c <_free_r+0x24>
 8016a84:	6820      	ldr	r0, [r4, #0]
 8016a86:	1821      	adds	r1, r4, r0
 8016a88:	428a      	cmp	r2, r1
 8016a8a:	bf04      	itt	eq
 8016a8c:	6811      	ldreq	r1, [r2, #0]
 8016a8e:	6852      	ldreq	r2, [r2, #4]
 8016a90:	6062      	str	r2, [r4, #4]
 8016a92:	bf04      	itt	eq
 8016a94:	1809      	addeq	r1, r1, r0
 8016a96:	6021      	streq	r1, [r4, #0]
 8016a98:	605c      	str	r4, [r3, #4]
 8016a9a:	e7c7      	b.n	8016a2c <_free_r+0x24>
 8016a9c:	bd38      	pop	{r3, r4, r5, pc}
 8016a9e:	bf00      	nop
 8016aa0:	20028a9c 	.word	0x20028a9c

08016aa4 <_malloc_r>:
 8016aa4:	b570      	push	{r4, r5, r6, lr}
 8016aa6:	1ccd      	adds	r5, r1, #3
 8016aa8:	f025 0503 	bic.w	r5, r5, #3
 8016aac:	3508      	adds	r5, #8
 8016aae:	2d0c      	cmp	r5, #12
 8016ab0:	bf38      	it	cc
 8016ab2:	250c      	movcc	r5, #12
 8016ab4:	2d00      	cmp	r5, #0
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	db01      	blt.n	8016abe <_malloc_r+0x1a>
 8016aba:	42a9      	cmp	r1, r5
 8016abc:	d903      	bls.n	8016ac6 <_malloc_r+0x22>
 8016abe:	230c      	movs	r3, #12
 8016ac0:	6033      	str	r3, [r6, #0]
 8016ac2:	2000      	movs	r0, #0
 8016ac4:	bd70      	pop	{r4, r5, r6, pc}
 8016ac6:	f000 fd6e 	bl	80175a6 <__malloc_lock>
 8016aca:	4a21      	ldr	r2, [pc, #132]	; (8016b50 <_malloc_r+0xac>)
 8016acc:	6814      	ldr	r4, [r2, #0]
 8016ace:	4621      	mov	r1, r4
 8016ad0:	b991      	cbnz	r1, 8016af8 <_malloc_r+0x54>
 8016ad2:	4c20      	ldr	r4, [pc, #128]	; (8016b54 <_malloc_r+0xb0>)
 8016ad4:	6823      	ldr	r3, [r4, #0]
 8016ad6:	b91b      	cbnz	r3, 8016ae0 <_malloc_r+0x3c>
 8016ad8:	4630      	mov	r0, r6
 8016ada:	f000 facf 	bl	801707c <_sbrk_r>
 8016ade:	6020      	str	r0, [r4, #0]
 8016ae0:	4629      	mov	r1, r5
 8016ae2:	4630      	mov	r0, r6
 8016ae4:	f000 faca 	bl	801707c <_sbrk_r>
 8016ae8:	1c43      	adds	r3, r0, #1
 8016aea:	d124      	bne.n	8016b36 <_malloc_r+0x92>
 8016aec:	230c      	movs	r3, #12
 8016aee:	6033      	str	r3, [r6, #0]
 8016af0:	4630      	mov	r0, r6
 8016af2:	f000 fd59 	bl	80175a8 <__malloc_unlock>
 8016af6:	e7e4      	b.n	8016ac2 <_malloc_r+0x1e>
 8016af8:	680b      	ldr	r3, [r1, #0]
 8016afa:	1b5b      	subs	r3, r3, r5
 8016afc:	d418      	bmi.n	8016b30 <_malloc_r+0x8c>
 8016afe:	2b0b      	cmp	r3, #11
 8016b00:	d90f      	bls.n	8016b22 <_malloc_r+0x7e>
 8016b02:	600b      	str	r3, [r1, #0]
 8016b04:	50cd      	str	r5, [r1, r3]
 8016b06:	18cc      	adds	r4, r1, r3
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f000 fd4d 	bl	80175a8 <__malloc_unlock>
 8016b0e:	f104 000b 	add.w	r0, r4, #11
 8016b12:	1d23      	adds	r3, r4, #4
 8016b14:	f020 0007 	bic.w	r0, r0, #7
 8016b18:	1ac3      	subs	r3, r0, r3
 8016b1a:	d0d3      	beq.n	8016ac4 <_malloc_r+0x20>
 8016b1c:	425a      	negs	r2, r3
 8016b1e:	50e2      	str	r2, [r4, r3]
 8016b20:	e7d0      	b.n	8016ac4 <_malloc_r+0x20>
 8016b22:	428c      	cmp	r4, r1
 8016b24:	684b      	ldr	r3, [r1, #4]
 8016b26:	bf16      	itet	ne
 8016b28:	6063      	strne	r3, [r4, #4]
 8016b2a:	6013      	streq	r3, [r2, #0]
 8016b2c:	460c      	movne	r4, r1
 8016b2e:	e7eb      	b.n	8016b08 <_malloc_r+0x64>
 8016b30:	460c      	mov	r4, r1
 8016b32:	6849      	ldr	r1, [r1, #4]
 8016b34:	e7cc      	b.n	8016ad0 <_malloc_r+0x2c>
 8016b36:	1cc4      	adds	r4, r0, #3
 8016b38:	f024 0403 	bic.w	r4, r4, #3
 8016b3c:	42a0      	cmp	r0, r4
 8016b3e:	d005      	beq.n	8016b4c <_malloc_r+0xa8>
 8016b40:	1a21      	subs	r1, r4, r0
 8016b42:	4630      	mov	r0, r6
 8016b44:	f000 fa9a 	bl	801707c <_sbrk_r>
 8016b48:	3001      	adds	r0, #1
 8016b4a:	d0cf      	beq.n	8016aec <_malloc_r+0x48>
 8016b4c:	6025      	str	r5, [r4, #0]
 8016b4e:	e7db      	b.n	8016b08 <_malloc_r+0x64>
 8016b50:	20028a9c 	.word	0x20028a9c
 8016b54:	20028aa0 	.word	0x20028aa0

08016b58 <__ssputs_r>:
 8016b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b5c:	688e      	ldr	r6, [r1, #8]
 8016b5e:	429e      	cmp	r6, r3
 8016b60:	4682      	mov	sl, r0
 8016b62:	460c      	mov	r4, r1
 8016b64:	4690      	mov	r8, r2
 8016b66:	4699      	mov	r9, r3
 8016b68:	d837      	bhi.n	8016bda <__ssputs_r+0x82>
 8016b6a:	898a      	ldrh	r2, [r1, #12]
 8016b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b70:	d031      	beq.n	8016bd6 <__ssputs_r+0x7e>
 8016b72:	6825      	ldr	r5, [r4, #0]
 8016b74:	6909      	ldr	r1, [r1, #16]
 8016b76:	1a6f      	subs	r7, r5, r1
 8016b78:	6965      	ldr	r5, [r4, #20]
 8016b7a:	2302      	movs	r3, #2
 8016b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b80:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b84:	f109 0301 	add.w	r3, r9, #1
 8016b88:	443b      	add	r3, r7
 8016b8a:	429d      	cmp	r5, r3
 8016b8c:	bf38      	it	cc
 8016b8e:	461d      	movcc	r5, r3
 8016b90:	0553      	lsls	r3, r2, #21
 8016b92:	d530      	bpl.n	8016bf6 <__ssputs_r+0x9e>
 8016b94:	4629      	mov	r1, r5
 8016b96:	f7ff ff85 	bl	8016aa4 <_malloc_r>
 8016b9a:	4606      	mov	r6, r0
 8016b9c:	b950      	cbnz	r0, 8016bb4 <__ssputs_r+0x5c>
 8016b9e:	230c      	movs	r3, #12
 8016ba0:	f8ca 3000 	str.w	r3, [sl]
 8016ba4:	89a3      	ldrh	r3, [r4, #12]
 8016ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016baa:	81a3      	strh	r3, [r4, #12]
 8016bac:	f04f 30ff 	mov.w	r0, #4294967295
 8016bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bb4:	463a      	mov	r2, r7
 8016bb6:	6921      	ldr	r1, [r4, #16]
 8016bb8:	f7fc fc3c 	bl	8013434 <memcpy>
 8016bbc:	89a3      	ldrh	r3, [r4, #12]
 8016bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bc6:	81a3      	strh	r3, [r4, #12]
 8016bc8:	6126      	str	r6, [r4, #16]
 8016bca:	6165      	str	r5, [r4, #20]
 8016bcc:	443e      	add	r6, r7
 8016bce:	1bed      	subs	r5, r5, r7
 8016bd0:	6026      	str	r6, [r4, #0]
 8016bd2:	60a5      	str	r5, [r4, #8]
 8016bd4:	464e      	mov	r6, r9
 8016bd6:	454e      	cmp	r6, r9
 8016bd8:	d900      	bls.n	8016bdc <__ssputs_r+0x84>
 8016bda:	464e      	mov	r6, r9
 8016bdc:	4632      	mov	r2, r6
 8016bde:	4641      	mov	r1, r8
 8016be0:	6820      	ldr	r0, [r4, #0]
 8016be2:	f000 fcc7 	bl	8017574 <memmove>
 8016be6:	68a3      	ldr	r3, [r4, #8]
 8016be8:	1b9b      	subs	r3, r3, r6
 8016bea:	60a3      	str	r3, [r4, #8]
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	441e      	add	r6, r3
 8016bf0:	6026      	str	r6, [r4, #0]
 8016bf2:	2000      	movs	r0, #0
 8016bf4:	e7dc      	b.n	8016bb0 <__ssputs_r+0x58>
 8016bf6:	462a      	mov	r2, r5
 8016bf8:	f000 fcd7 	bl	80175aa <_realloc_r>
 8016bfc:	4606      	mov	r6, r0
 8016bfe:	2800      	cmp	r0, #0
 8016c00:	d1e2      	bne.n	8016bc8 <__ssputs_r+0x70>
 8016c02:	6921      	ldr	r1, [r4, #16]
 8016c04:	4650      	mov	r0, sl
 8016c06:	f7ff feff 	bl	8016a08 <_free_r>
 8016c0a:	e7c8      	b.n	8016b9e <__ssputs_r+0x46>

08016c0c <_svfiprintf_r>:
 8016c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c10:	461d      	mov	r5, r3
 8016c12:	898b      	ldrh	r3, [r1, #12]
 8016c14:	061f      	lsls	r7, r3, #24
 8016c16:	b09d      	sub	sp, #116	; 0x74
 8016c18:	4680      	mov	r8, r0
 8016c1a:	460c      	mov	r4, r1
 8016c1c:	4616      	mov	r6, r2
 8016c1e:	d50f      	bpl.n	8016c40 <_svfiprintf_r+0x34>
 8016c20:	690b      	ldr	r3, [r1, #16]
 8016c22:	b96b      	cbnz	r3, 8016c40 <_svfiprintf_r+0x34>
 8016c24:	2140      	movs	r1, #64	; 0x40
 8016c26:	f7ff ff3d 	bl	8016aa4 <_malloc_r>
 8016c2a:	6020      	str	r0, [r4, #0]
 8016c2c:	6120      	str	r0, [r4, #16]
 8016c2e:	b928      	cbnz	r0, 8016c3c <_svfiprintf_r+0x30>
 8016c30:	230c      	movs	r3, #12
 8016c32:	f8c8 3000 	str.w	r3, [r8]
 8016c36:	f04f 30ff 	mov.w	r0, #4294967295
 8016c3a:	e0c8      	b.n	8016dce <_svfiprintf_r+0x1c2>
 8016c3c:	2340      	movs	r3, #64	; 0x40
 8016c3e:	6163      	str	r3, [r4, #20]
 8016c40:	2300      	movs	r3, #0
 8016c42:	9309      	str	r3, [sp, #36]	; 0x24
 8016c44:	2320      	movs	r3, #32
 8016c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c4a:	2330      	movs	r3, #48	; 0x30
 8016c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c50:	9503      	str	r5, [sp, #12]
 8016c52:	f04f 0b01 	mov.w	fp, #1
 8016c56:	4637      	mov	r7, r6
 8016c58:	463d      	mov	r5, r7
 8016c5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c5e:	b10b      	cbz	r3, 8016c64 <_svfiprintf_r+0x58>
 8016c60:	2b25      	cmp	r3, #37	; 0x25
 8016c62:	d13e      	bne.n	8016ce2 <_svfiprintf_r+0xd6>
 8016c64:	ebb7 0a06 	subs.w	sl, r7, r6
 8016c68:	d00b      	beq.n	8016c82 <_svfiprintf_r+0x76>
 8016c6a:	4653      	mov	r3, sl
 8016c6c:	4632      	mov	r2, r6
 8016c6e:	4621      	mov	r1, r4
 8016c70:	4640      	mov	r0, r8
 8016c72:	f7ff ff71 	bl	8016b58 <__ssputs_r>
 8016c76:	3001      	adds	r0, #1
 8016c78:	f000 80a4 	beq.w	8016dc4 <_svfiprintf_r+0x1b8>
 8016c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c7e:	4453      	add	r3, sl
 8016c80:	9309      	str	r3, [sp, #36]	; 0x24
 8016c82:	783b      	ldrb	r3, [r7, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	f000 809d 	beq.w	8016dc4 <_svfiprintf_r+0x1b8>
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8016c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c94:	9304      	str	r3, [sp, #16]
 8016c96:	9307      	str	r3, [sp, #28]
 8016c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8016c9e:	462f      	mov	r7, r5
 8016ca0:	2205      	movs	r2, #5
 8016ca2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016ca6:	4850      	ldr	r0, [pc, #320]	; (8016de8 <_svfiprintf_r+0x1dc>)
 8016ca8:	f7e9 fad2 	bl	8000250 <memchr>
 8016cac:	9b04      	ldr	r3, [sp, #16]
 8016cae:	b9d0      	cbnz	r0, 8016ce6 <_svfiprintf_r+0xda>
 8016cb0:	06d9      	lsls	r1, r3, #27
 8016cb2:	bf44      	itt	mi
 8016cb4:	2220      	movmi	r2, #32
 8016cb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cba:	071a      	lsls	r2, r3, #28
 8016cbc:	bf44      	itt	mi
 8016cbe:	222b      	movmi	r2, #43	; 0x2b
 8016cc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cc4:	782a      	ldrb	r2, [r5, #0]
 8016cc6:	2a2a      	cmp	r2, #42	; 0x2a
 8016cc8:	d015      	beq.n	8016cf6 <_svfiprintf_r+0xea>
 8016cca:	9a07      	ldr	r2, [sp, #28]
 8016ccc:	462f      	mov	r7, r5
 8016cce:	2000      	movs	r0, #0
 8016cd0:	250a      	movs	r5, #10
 8016cd2:	4639      	mov	r1, r7
 8016cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cd8:	3b30      	subs	r3, #48	; 0x30
 8016cda:	2b09      	cmp	r3, #9
 8016cdc:	d94d      	bls.n	8016d7a <_svfiprintf_r+0x16e>
 8016cde:	b1b8      	cbz	r0, 8016d10 <_svfiprintf_r+0x104>
 8016ce0:	e00f      	b.n	8016d02 <_svfiprintf_r+0xf6>
 8016ce2:	462f      	mov	r7, r5
 8016ce4:	e7b8      	b.n	8016c58 <_svfiprintf_r+0x4c>
 8016ce6:	4a40      	ldr	r2, [pc, #256]	; (8016de8 <_svfiprintf_r+0x1dc>)
 8016ce8:	1a80      	subs	r0, r0, r2
 8016cea:	fa0b f000 	lsl.w	r0, fp, r0
 8016cee:	4318      	orrs	r0, r3
 8016cf0:	9004      	str	r0, [sp, #16]
 8016cf2:	463d      	mov	r5, r7
 8016cf4:	e7d3      	b.n	8016c9e <_svfiprintf_r+0x92>
 8016cf6:	9a03      	ldr	r2, [sp, #12]
 8016cf8:	1d11      	adds	r1, r2, #4
 8016cfa:	6812      	ldr	r2, [r2, #0]
 8016cfc:	9103      	str	r1, [sp, #12]
 8016cfe:	2a00      	cmp	r2, #0
 8016d00:	db01      	blt.n	8016d06 <_svfiprintf_r+0xfa>
 8016d02:	9207      	str	r2, [sp, #28]
 8016d04:	e004      	b.n	8016d10 <_svfiprintf_r+0x104>
 8016d06:	4252      	negs	r2, r2
 8016d08:	f043 0302 	orr.w	r3, r3, #2
 8016d0c:	9207      	str	r2, [sp, #28]
 8016d0e:	9304      	str	r3, [sp, #16]
 8016d10:	783b      	ldrb	r3, [r7, #0]
 8016d12:	2b2e      	cmp	r3, #46	; 0x2e
 8016d14:	d10c      	bne.n	8016d30 <_svfiprintf_r+0x124>
 8016d16:	787b      	ldrb	r3, [r7, #1]
 8016d18:	2b2a      	cmp	r3, #42	; 0x2a
 8016d1a:	d133      	bne.n	8016d84 <_svfiprintf_r+0x178>
 8016d1c:	9b03      	ldr	r3, [sp, #12]
 8016d1e:	1d1a      	adds	r2, r3, #4
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	9203      	str	r2, [sp, #12]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	bfb8      	it	lt
 8016d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d2c:	3702      	adds	r7, #2
 8016d2e:	9305      	str	r3, [sp, #20]
 8016d30:	4d2e      	ldr	r5, [pc, #184]	; (8016dec <_svfiprintf_r+0x1e0>)
 8016d32:	7839      	ldrb	r1, [r7, #0]
 8016d34:	2203      	movs	r2, #3
 8016d36:	4628      	mov	r0, r5
 8016d38:	f7e9 fa8a 	bl	8000250 <memchr>
 8016d3c:	b138      	cbz	r0, 8016d4e <_svfiprintf_r+0x142>
 8016d3e:	2340      	movs	r3, #64	; 0x40
 8016d40:	1b40      	subs	r0, r0, r5
 8016d42:	fa03 f000 	lsl.w	r0, r3, r0
 8016d46:	9b04      	ldr	r3, [sp, #16]
 8016d48:	4303      	orrs	r3, r0
 8016d4a:	3701      	adds	r7, #1
 8016d4c:	9304      	str	r3, [sp, #16]
 8016d4e:	7839      	ldrb	r1, [r7, #0]
 8016d50:	4827      	ldr	r0, [pc, #156]	; (8016df0 <_svfiprintf_r+0x1e4>)
 8016d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d56:	2206      	movs	r2, #6
 8016d58:	1c7e      	adds	r6, r7, #1
 8016d5a:	f7e9 fa79 	bl	8000250 <memchr>
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d038      	beq.n	8016dd4 <_svfiprintf_r+0x1c8>
 8016d62:	4b24      	ldr	r3, [pc, #144]	; (8016df4 <_svfiprintf_r+0x1e8>)
 8016d64:	bb13      	cbnz	r3, 8016dac <_svfiprintf_r+0x1a0>
 8016d66:	9b03      	ldr	r3, [sp, #12]
 8016d68:	3307      	adds	r3, #7
 8016d6a:	f023 0307 	bic.w	r3, r3, #7
 8016d6e:	3308      	adds	r3, #8
 8016d70:	9303      	str	r3, [sp, #12]
 8016d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d74:	444b      	add	r3, r9
 8016d76:	9309      	str	r3, [sp, #36]	; 0x24
 8016d78:	e76d      	b.n	8016c56 <_svfiprintf_r+0x4a>
 8016d7a:	fb05 3202 	mla	r2, r5, r2, r3
 8016d7e:	2001      	movs	r0, #1
 8016d80:	460f      	mov	r7, r1
 8016d82:	e7a6      	b.n	8016cd2 <_svfiprintf_r+0xc6>
 8016d84:	2300      	movs	r3, #0
 8016d86:	3701      	adds	r7, #1
 8016d88:	9305      	str	r3, [sp, #20]
 8016d8a:	4619      	mov	r1, r3
 8016d8c:	250a      	movs	r5, #10
 8016d8e:	4638      	mov	r0, r7
 8016d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d94:	3a30      	subs	r2, #48	; 0x30
 8016d96:	2a09      	cmp	r2, #9
 8016d98:	d903      	bls.n	8016da2 <_svfiprintf_r+0x196>
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d0c8      	beq.n	8016d30 <_svfiprintf_r+0x124>
 8016d9e:	9105      	str	r1, [sp, #20]
 8016da0:	e7c6      	b.n	8016d30 <_svfiprintf_r+0x124>
 8016da2:	fb05 2101 	mla	r1, r5, r1, r2
 8016da6:	2301      	movs	r3, #1
 8016da8:	4607      	mov	r7, r0
 8016daa:	e7f0      	b.n	8016d8e <_svfiprintf_r+0x182>
 8016dac:	ab03      	add	r3, sp, #12
 8016dae:	9300      	str	r3, [sp, #0]
 8016db0:	4622      	mov	r2, r4
 8016db2:	4b11      	ldr	r3, [pc, #68]	; (8016df8 <_svfiprintf_r+0x1ec>)
 8016db4:	a904      	add	r1, sp, #16
 8016db6:	4640      	mov	r0, r8
 8016db8:	f7fc fbd6 	bl	8013568 <_printf_float>
 8016dbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016dc0:	4681      	mov	r9, r0
 8016dc2:	d1d6      	bne.n	8016d72 <_svfiprintf_r+0x166>
 8016dc4:	89a3      	ldrh	r3, [r4, #12]
 8016dc6:	065b      	lsls	r3, r3, #25
 8016dc8:	f53f af35 	bmi.w	8016c36 <_svfiprintf_r+0x2a>
 8016dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016dce:	b01d      	add	sp, #116	; 0x74
 8016dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dd4:	ab03      	add	r3, sp, #12
 8016dd6:	9300      	str	r3, [sp, #0]
 8016dd8:	4622      	mov	r2, r4
 8016dda:	4b07      	ldr	r3, [pc, #28]	; (8016df8 <_svfiprintf_r+0x1ec>)
 8016ddc:	a904      	add	r1, sp, #16
 8016dde:	4640      	mov	r0, r8
 8016de0:	f7fc fe64 	bl	8013aac <_printf_i>
 8016de4:	e7ea      	b.n	8016dbc <_svfiprintf_r+0x1b0>
 8016de6:	bf00      	nop
 8016de8:	08018af4 	.word	0x08018af4
 8016dec:	08018afa 	.word	0x08018afa
 8016df0:	08018afe 	.word	0x08018afe
 8016df4:	08013569 	.word	0x08013569
 8016df8:	08016b59 	.word	0x08016b59

08016dfc <__sfputc_r>:
 8016dfc:	6893      	ldr	r3, [r2, #8]
 8016dfe:	3b01      	subs	r3, #1
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	b410      	push	{r4}
 8016e04:	6093      	str	r3, [r2, #8]
 8016e06:	da08      	bge.n	8016e1a <__sfputc_r+0x1e>
 8016e08:	6994      	ldr	r4, [r2, #24]
 8016e0a:	42a3      	cmp	r3, r4
 8016e0c:	db01      	blt.n	8016e12 <__sfputc_r+0x16>
 8016e0e:	290a      	cmp	r1, #10
 8016e10:	d103      	bne.n	8016e1a <__sfputc_r+0x1e>
 8016e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e16:	f000 b997 	b.w	8017148 <__swbuf_r>
 8016e1a:	6813      	ldr	r3, [r2, #0]
 8016e1c:	1c58      	adds	r0, r3, #1
 8016e1e:	6010      	str	r0, [r2, #0]
 8016e20:	7019      	strb	r1, [r3, #0]
 8016e22:	4608      	mov	r0, r1
 8016e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e28:	4770      	bx	lr

08016e2a <__sfputs_r>:
 8016e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e2c:	4606      	mov	r6, r0
 8016e2e:	460f      	mov	r7, r1
 8016e30:	4614      	mov	r4, r2
 8016e32:	18d5      	adds	r5, r2, r3
 8016e34:	42ac      	cmp	r4, r5
 8016e36:	d101      	bne.n	8016e3c <__sfputs_r+0x12>
 8016e38:	2000      	movs	r0, #0
 8016e3a:	e007      	b.n	8016e4c <__sfputs_r+0x22>
 8016e3c:	463a      	mov	r2, r7
 8016e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e42:	4630      	mov	r0, r6
 8016e44:	f7ff ffda 	bl	8016dfc <__sfputc_r>
 8016e48:	1c43      	adds	r3, r0, #1
 8016e4a:	d1f3      	bne.n	8016e34 <__sfputs_r+0xa>
 8016e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e50 <_vfiprintf_r>:
 8016e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e54:	460c      	mov	r4, r1
 8016e56:	b09d      	sub	sp, #116	; 0x74
 8016e58:	4617      	mov	r7, r2
 8016e5a:	461d      	mov	r5, r3
 8016e5c:	4606      	mov	r6, r0
 8016e5e:	b118      	cbz	r0, 8016e68 <_vfiprintf_r+0x18>
 8016e60:	6983      	ldr	r3, [r0, #24]
 8016e62:	b90b      	cbnz	r3, 8016e68 <_vfiprintf_r+0x18>
 8016e64:	f7fe fde4 	bl	8015a30 <__sinit>
 8016e68:	4b7c      	ldr	r3, [pc, #496]	; (801705c <_vfiprintf_r+0x20c>)
 8016e6a:	429c      	cmp	r4, r3
 8016e6c:	d158      	bne.n	8016f20 <_vfiprintf_r+0xd0>
 8016e6e:	6874      	ldr	r4, [r6, #4]
 8016e70:	89a3      	ldrh	r3, [r4, #12]
 8016e72:	0718      	lsls	r0, r3, #28
 8016e74:	d55e      	bpl.n	8016f34 <_vfiprintf_r+0xe4>
 8016e76:	6923      	ldr	r3, [r4, #16]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d05b      	beq.n	8016f34 <_vfiprintf_r+0xe4>
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8016e80:	2320      	movs	r3, #32
 8016e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e86:	2330      	movs	r3, #48	; 0x30
 8016e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e8c:	9503      	str	r5, [sp, #12]
 8016e8e:	f04f 0b01 	mov.w	fp, #1
 8016e92:	46b8      	mov	r8, r7
 8016e94:	4645      	mov	r5, r8
 8016e96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016e9a:	b10b      	cbz	r3, 8016ea0 <_vfiprintf_r+0x50>
 8016e9c:	2b25      	cmp	r3, #37	; 0x25
 8016e9e:	d154      	bne.n	8016f4a <_vfiprintf_r+0xfa>
 8016ea0:	ebb8 0a07 	subs.w	sl, r8, r7
 8016ea4:	d00b      	beq.n	8016ebe <_vfiprintf_r+0x6e>
 8016ea6:	4653      	mov	r3, sl
 8016ea8:	463a      	mov	r2, r7
 8016eaa:	4621      	mov	r1, r4
 8016eac:	4630      	mov	r0, r6
 8016eae:	f7ff ffbc 	bl	8016e2a <__sfputs_r>
 8016eb2:	3001      	adds	r0, #1
 8016eb4:	f000 80c2 	beq.w	801703c <_vfiprintf_r+0x1ec>
 8016eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eba:	4453      	add	r3, sl
 8016ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8016ebe:	f898 3000 	ldrb.w	r3, [r8]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	f000 80ba 	beq.w	801703c <_vfiprintf_r+0x1ec>
 8016ec8:	2300      	movs	r3, #0
 8016eca:	f04f 32ff 	mov.w	r2, #4294967295
 8016ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ed2:	9304      	str	r3, [sp, #16]
 8016ed4:	9307      	str	r3, [sp, #28]
 8016ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016eda:	931a      	str	r3, [sp, #104]	; 0x68
 8016edc:	46a8      	mov	r8, r5
 8016ede:	2205      	movs	r2, #5
 8016ee0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016ee4:	485e      	ldr	r0, [pc, #376]	; (8017060 <_vfiprintf_r+0x210>)
 8016ee6:	f7e9 f9b3 	bl	8000250 <memchr>
 8016eea:	9b04      	ldr	r3, [sp, #16]
 8016eec:	bb78      	cbnz	r0, 8016f4e <_vfiprintf_r+0xfe>
 8016eee:	06d9      	lsls	r1, r3, #27
 8016ef0:	bf44      	itt	mi
 8016ef2:	2220      	movmi	r2, #32
 8016ef4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ef8:	071a      	lsls	r2, r3, #28
 8016efa:	bf44      	itt	mi
 8016efc:	222b      	movmi	r2, #43	; 0x2b
 8016efe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016f02:	782a      	ldrb	r2, [r5, #0]
 8016f04:	2a2a      	cmp	r2, #42	; 0x2a
 8016f06:	d02a      	beq.n	8016f5e <_vfiprintf_r+0x10e>
 8016f08:	9a07      	ldr	r2, [sp, #28]
 8016f0a:	46a8      	mov	r8, r5
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	250a      	movs	r5, #10
 8016f10:	4641      	mov	r1, r8
 8016f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f16:	3b30      	subs	r3, #48	; 0x30
 8016f18:	2b09      	cmp	r3, #9
 8016f1a:	d969      	bls.n	8016ff0 <_vfiprintf_r+0x1a0>
 8016f1c:	b360      	cbz	r0, 8016f78 <_vfiprintf_r+0x128>
 8016f1e:	e024      	b.n	8016f6a <_vfiprintf_r+0x11a>
 8016f20:	4b50      	ldr	r3, [pc, #320]	; (8017064 <_vfiprintf_r+0x214>)
 8016f22:	429c      	cmp	r4, r3
 8016f24:	d101      	bne.n	8016f2a <_vfiprintf_r+0xda>
 8016f26:	68b4      	ldr	r4, [r6, #8]
 8016f28:	e7a2      	b.n	8016e70 <_vfiprintf_r+0x20>
 8016f2a:	4b4f      	ldr	r3, [pc, #316]	; (8017068 <_vfiprintf_r+0x218>)
 8016f2c:	429c      	cmp	r4, r3
 8016f2e:	bf08      	it	eq
 8016f30:	68f4      	ldreq	r4, [r6, #12]
 8016f32:	e79d      	b.n	8016e70 <_vfiprintf_r+0x20>
 8016f34:	4621      	mov	r1, r4
 8016f36:	4630      	mov	r0, r6
 8016f38:	f000 f978 	bl	801722c <__swsetup_r>
 8016f3c:	2800      	cmp	r0, #0
 8016f3e:	d09d      	beq.n	8016e7c <_vfiprintf_r+0x2c>
 8016f40:	f04f 30ff 	mov.w	r0, #4294967295
 8016f44:	b01d      	add	sp, #116	; 0x74
 8016f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f4a:	46a8      	mov	r8, r5
 8016f4c:	e7a2      	b.n	8016e94 <_vfiprintf_r+0x44>
 8016f4e:	4a44      	ldr	r2, [pc, #272]	; (8017060 <_vfiprintf_r+0x210>)
 8016f50:	1a80      	subs	r0, r0, r2
 8016f52:	fa0b f000 	lsl.w	r0, fp, r0
 8016f56:	4318      	orrs	r0, r3
 8016f58:	9004      	str	r0, [sp, #16]
 8016f5a:	4645      	mov	r5, r8
 8016f5c:	e7be      	b.n	8016edc <_vfiprintf_r+0x8c>
 8016f5e:	9a03      	ldr	r2, [sp, #12]
 8016f60:	1d11      	adds	r1, r2, #4
 8016f62:	6812      	ldr	r2, [r2, #0]
 8016f64:	9103      	str	r1, [sp, #12]
 8016f66:	2a00      	cmp	r2, #0
 8016f68:	db01      	blt.n	8016f6e <_vfiprintf_r+0x11e>
 8016f6a:	9207      	str	r2, [sp, #28]
 8016f6c:	e004      	b.n	8016f78 <_vfiprintf_r+0x128>
 8016f6e:	4252      	negs	r2, r2
 8016f70:	f043 0302 	orr.w	r3, r3, #2
 8016f74:	9207      	str	r2, [sp, #28]
 8016f76:	9304      	str	r3, [sp, #16]
 8016f78:	f898 3000 	ldrb.w	r3, [r8]
 8016f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8016f7e:	d10e      	bne.n	8016f9e <_vfiprintf_r+0x14e>
 8016f80:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016f84:	2b2a      	cmp	r3, #42	; 0x2a
 8016f86:	d138      	bne.n	8016ffa <_vfiprintf_r+0x1aa>
 8016f88:	9b03      	ldr	r3, [sp, #12]
 8016f8a:	1d1a      	adds	r2, r3, #4
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	9203      	str	r2, [sp, #12]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	bfb8      	it	lt
 8016f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f98:	f108 0802 	add.w	r8, r8, #2
 8016f9c:	9305      	str	r3, [sp, #20]
 8016f9e:	4d33      	ldr	r5, [pc, #204]	; (801706c <_vfiprintf_r+0x21c>)
 8016fa0:	f898 1000 	ldrb.w	r1, [r8]
 8016fa4:	2203      	movs	r2, #3
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	f7e9 f952 	bl	8000250 <memchr>
 8016fac:	b140      	cbz	r0, 8016fc0 <_vfiprintf_r+0x170>
 8016fae:	2340      	movs	r3, #64	; 0x40
 8016fb0:	1b40      	subs	r0, r0, r5
 8016fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8016fb6:	9b04      	ldr	r3, [sp, #16]
 8016fb8:	4303      	orrs	r3, r0
 8016fba:	f108 0801 	add.w	r8, r8, #1
 8016fbe:	9304      	str	r3, [sp, #16]
 8016fc0:	f898 1000 	ldrb.w	r1, [r8]
 8016fc4:	482a      	ldr	r0, [pc, #168]	; (8017070 <_vfiprintf_r+0x220>)
 8016fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016fca:	2206      	movs	r2, #6
 8016fcc:	f108 0701 	add.w	r7, r8, #1
 8016fd0:	f7e9 f93e 	bl	8000250 <memchr>
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	d037      	beq.n	8017048 <_vfiprintf_r+0x1f8>
 8016fd8:	4b26      	ldr	r3, [pc, #152]	; (8017074 <_vfiprintf_r+0x224>)
 8016fda:	bb1b      	cbnz	r3, 8017024 <_vfiprintf_r+0x1d4>
 8016fdc:	9b03      	ldr	r3, [sp, #12]
 8016fde:	3307      	adds	r3, #7
 8016fe0:	f023 0307 	bic.w	r3, r3, #7
 8016fe4:	3308      	adds	r3, #8
 8016fe6:	9303      	str	r3, [sp, #12]
 8016fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fea:	444b      	add	r3, r9
 8016fec:	9309      	str	r3, [sp, #36]	; 0x24
 8016fee:	e750      	b.n	8016e92 <_vfiprintf_r+0x42>
 8016ff0:	fb05 3202 	mla	r2, r5, r2, r3
 8016ff4:	2001      	movs	r0, #1
 8016ff6:	4688      	mov	r8, r1
 8016ff8:	e78a      	b.n	8016f10 <_vfiprintf_r+0xc0>
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	f108 0801 	add.w	r8, r8, #1
 8017000:	9305      	str	r3, [sp, #20]
 8017002:	4619      	mov	r1, r3
 8017004:	250a      	movs	r5, #10
 8017006:	4640      	mov	r0, r8
 8017008:	f810 2b01 	ldrb.w	r2, [r0], #1
 801700c:	3a30      	subs	r2, #48	; 0x30
 801700e:	2a09      	cmp	r2, #9
 8017010:	d903      	bls.n	801701a <_vfiprintf_r+0x1ca>
 8017012:	2b00      	cmp	r3, #0
 8017014:	d0c3      	beq.n	8016f9e <_vfiprintf_r+0x14e>
 8017016:	9105      	str	r1, [sp, #20]
 8017018:	e7c1      	b.n	8016f9e <_vfiprintf_r+0x14e>
 801701a:	fb05 2101 	mla	r1, r5, r1, r2
 801701e:	2301      	movs	r3, #1
 8017020:	4680      	mov	r8, r0
 8017022:	e7f0      	b.n	8017006 <_vfiprintf_r+0x1b6>
 8017024:	ab03      	add	r3, sp, #12
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	4622      	mov	r2, r4
 801702a:	4b13      	ldr	r3, [pc, #76]	; (8017078 <_vfiprintf_r+0x228>)
 801702c:	a904      	add	r1, sp, #16
 801702e:	4630      	mov	r0, r6
 8017030:	f7fc fa9a 	bl	8013568 <_printf_float>
 8017034:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017038:	4681      	mov	r9, r0
 801703a:	d1d5      	bne.n	8016fe8 <_vfiprintf_r+0x198>
 801703c:	89a3      	ldrh	r3, [r4, #12]
 801703e:	065b      	lsls	r3, r3, #25
 8017040:	f53f af7e 	bmi.w	8016f40 <_vfiprintf_r+0xf0>
 8017044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017046:	e77d      	b.n	8016f44 <_vfiprintf_r+0xf4>
 8017048:	ab03      	add	r3, sp, #12
 801704a:	9300      	str	r3, [sp, #0]
 801704c:	4622      	mov	r2, r4
 801704e:	4b0a      	ldr	r3, [pc, #40]	; (8017078 <_vfiprintf_r+0x228>)
 8017050:	a904      	add	r1, sp, #16
 8017052:	4630      	mov	r0, r6
 8017054:	f7fc fd2a 	bl	8013aac <_printf_i>
 8017058:	e7ec      	b.n	8017034 <_vfiprintf_r+0x1e4>
 801705a:	bf00      	nop
 801705c:	080189a8 	.word	0x080189a8
 8017060:	08018af4 	.word	0x08018af4
 8017064:	080189c8 	.word	0x080189c8
 8017068:	08018988 	.word	0x08018988
 801706c:	08018afa 	.word	0x08018afa
 8017070:	08018afe 	.word	0x08018afe
 8017074:	08013569 	.word	0x08013569
 8017078:	08016e2b 	.word	0x08016e2b

0801707c <_sbrk_r>:
 801707c:	b538      	push	{r3, r4, r5, lr}
 801707e:	4c06      	ldr	r4, [pc, #24]	; (8017098 <_sbrk_r+0x1c>)
 8017080:	2300      	movs	r3, #0
 8017082:	4605      	mov	r5, r0
 8017084:	4608      	mov	r0, r1
 8017086:	6023      	str	r3, [r4, #0]
 8017088:	f7f2 f970 	bl	800936c <_sbrk>
 801708c:	1c43      	adds	r3, r0, #1
 801708e:	d102      	bne.n	8017096 <_sbrk_r+0x1a>
 8017090:	6823      	ldr	r3, [r4, #0]
 8017092:	b103      	cbz	r3, 8017096 <_sbrk_r+0x1a>
 8017094:	602b      	str	r3, [r5, #0]
 8017096:	bd38      	pop	{r3, r4, r5, pc}
 8017098:	200311b8 	.word	0x200311b8

0801709c <__sread>:
 801709c:	b510      	push	{r4, lr}
 801709e:	460c      	mov	r4, r1
 80170a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170a4:	f000 faa8 	bl	80175f8 <_read_r>
 80170a8:	2800      	cmp	r0, #0
 80170aa:	bfab      	itete	ge
 80170ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80170ae:	89a3      	ldrhlt	r3, [r4, #12]
 80170b0:	181b      	addge	r3, r3, r0
 80170b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80170b6:	bfac      	ite	ge
 80170b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80170ba:	81a3      	strhlt	r3, [r4, #12]
 80170bc:	bd10      	pop	{r4, pc}

080170be <__swrite>:
 80170be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170c2:	461f      	mov	r7, r3
 80170c4:	898b      	ldrh	r3, [r1, #12]
 80170c6:	05db      	lsls	r3, r3, #23
 80170c8:	4605      	mov	r5, r0
 80170ca:	460c      	mov	r4, r1
 80170cc:	4616      	mov	r6, r2
 80170ce:	d505      	bpl.n	80170dc <__swrite+0x1e>
 80170d0:	2302      	movs	r3, #2
 80170d2:	2200      	movs	r2, #0
 80170d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170d8:	f000 f9d6 	bl	8017488 <_lseek_r>
 80170dc:	89a3      	ldrh	r3, [r4, #12]
 80170de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80170e6:	81a3      	strh	r3, [r4, #12]
 80170e8:	4632      	mov	r2, r6
 80170ea:	463b      	mov	r3, r7
 80170ec:	4628      	mov	r0, r5
 80170ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170f2:	f000 b889 	b.w	8017208 <_write_r>

080170f6 <__sseek>:
 80170f6:	b510      	push	{r4, lr}
 80170f8:	460c      	mov	r4, r1
 80170fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170fe:	f000 f9c3 	bl	8017488 <_lseek_r>
 8017102:	1c43      	adds	r3, r0, #1
 8017104:	89a3      	ldrh	r3, [r4, #12]
 8017106:	bf15      	itete	ne
 8017108:	6560      	strne	r0, [r4, #84]	; 0x54
 801710a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801710e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017112:	81a3      	strheq	r3, [r4, #12]
 8017114:	bf18      	it	ne
 8017116:	81a3      	strhne	r3, [r4, #12]
 8017118:	bd10      	pop	{r4, pc}

0801711a <__sclose>:
 801711a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801711e:	f000 b8f3 	b.w	8017308 <_close_r>

08017122 <strncmp>:
 8017122:	b510      	push	{r4, lr}
 8017124:	b16a      	cbz	r2, 8017142 <strncmp+0x20>
 8017126:	3901      	subs	r1, #1
 8017128:	1884      	adds	r4, r0, r2
 801712a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801712e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017132:	4293      	cmp	r3, r2
 8017134:	d103      	bne.n	801713e <strncmp+0x1c>
 8017136:	42a0      	cmp	r0, r4
 8017138:	d001      	beq.n	801713e <strncmp+0x1c>
 801713a:	2b00      	cmp	r3, #0
 801713c:	d1f5      	bne.n	801712a <strncmp+0x8>
 801713e:	1a98      	subs	r0, r3, r2
 8017140:	bd10      	pop	{r4, pc}
 8017142:	4610      	mov	r0, r2
 8017144:	e7fc      	b.n	8017140 <strncmp+0x1e>
	...

08017148 <__swbuf_r>:
 8017148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801714a:	460e      	mov	r6, r1
 801714c:	4614      	mov	r4, r2
 801714e:	4605      	mov	r5, r0
 8017150:	b118      	cbz	r0, 801715a <__swbuf_r+0x12>
 8017152:	6983      	ldr	r3, [r0, #24]
 8017154:	b90b      	cbnz	r3, 801715a <__swbuf_r+0x12>
 8017156:	f7fe fc6b 	bl	8015a30 <__sinit>
 801715a:	4b21      	ldr	r3, [pc, #132]	; (80171e0 <__swbuf_r+0x98>)
 801715c:	429c      	cmp	r4, r3
 801715e:	d12a      	bne.n	80171b6 <__swbuf_r+0x6e>
 8017160:	686c      	ldr	r4, [r5, #4]
 8017162:	69a3      	ldr	r3, [r4, #24]
 8017164:	60a3      	str	r3, [r4, #8]
 8017166:	89a3      	ldrh	r3, [r4, #12]
 8017168:	071a      	lsls	r2, r3, #28
 801716a:	d52e      	bpl.n	80171ca <__swbuf_r+0x82>
 801716c:	6923      	ldr	r3, [r4, #16]
 801716e:	b363      	cbz	r3, 80171ca <__swbuf_r+0x82>
 8017170:	6923      	ldr	r3, [r4, #16]
 8017172:	6820      	ldr	r0, [r4, #0]
 8017174:	1ac0      	subs	r0, r0, r3
 8017176:	6963      	ldr	r3, [r4, #20]
 8017178:	b2f6      	uxtb	r6, r6
 801717a:	4283      	cmp	r3, r0
 801717c:	4637      	mov	r7, r6
 801717e:	dc04      	bgt.n	801718a <__swbuf_r+0x42>
 8017180:	4621      	mov	r1, r4
 8017182:	4628      	mov	r0, r5
 8017184:	f000 f956 	bl	8017434 <_fflush_r>
 8017188:	bb28      	cbnz	r0, 80171d6 <__swbuf_r+0x8e>
 801718a:	68a3      	ldr	r3, [r4, #8]
 801718c:	3b01      	subs	r3, #1
 801718e:	60a3      	str	r3, [r4, #8]
 8017190:	6823      	ldr	r3, [r4, #0]
 8017192:	1c5a      	adds	r2, r3, #1
 8017194:	6022      	str	r2, [r4, #0]
 8017196:	701e      	strb	r6, [r3, #0]
 8017198:	6963      	ldr	r3, [r4, #20]
 801719a:	3001      	adds	r0, #1
 801719c:	4283      	cmp	r3, r0
 801719e:	d004      	beq.n	80171aa <__swbuf_r+0x62>
 80171a0:	89a3      	ldrh	r3, [r4, #12]
 80171a2:	07db      	lsls	r3, r3, #31
 80171a4:	d519      	bpl.n	80171da <__swbuf_r+0x92>
 80171a6:	2e0a      	cmp	r6, #10
 80171a8:	d117      	bne.n	80171da <__swbuf_r+0x92>
 80171aa:	4621      	mov	r1, r4
 80171ac:	4628      	mov	r0, r5
 80171ae:	f000 f941 	bl	8017434 <_fflush_r>
 80171b2:	b190      	cbz	r0, 80171da <__swbuf_r+0x92>
 80171b4:	e00f      	b.n	80171d6 <__swbuf_r+0x8e>
 80171b6:	4b0b      	ldr	r3, [pc, #44]	; (80171e4 <__swbuf_r+0x9c>)
 80171b8:	429c      	cmp	r4, r3
 80171ba:	d101      	bne.n	80171c0 <__swbuf_r+0x78>
 80171bc:	68ac      	ldr	r4, [r5, #8]
 80171be:	e7d0      	b.n	8017162 <__swbuf_r+0x1a>
 80171c0:	4b09      	ldr	r3, [pc, #36]	; (80171e8 <__swbuf_r+0xa0>)
 80171c2:	429c      	cmp	r4, r3
 80171c4:	bf08      	it	eq
 80171c6:	68ec      	ldreq	r4, [r5, #12]
 80171c8:	e7cb      	b.n	8017162 <__swbuf_r+0x1a>
 80171ca:	4621      	mov	r1, r4
 80171cc:	4628      	mov	r0, r5
 80171ce:	f000 f82d 	bl	801722c <__swsetup_r>
 80171d2:	2800      	cmp	r0, #0
 80171d4:	d0cc      	beq.n	8017170 <__swbuf_r+0x28>
 80171d6:	f04f 37ff 	mov.w	r7, #4294967295
 80171da:	4638      	mov	r0, r7
 80171dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171de:	bf00      	nop
 80171e0:	080189a8 	.word	0x080189a8
 80171e4:	080189c8 	.word	0x080189c8
 80171e8:	08018988 	.word	0x08018988

080171ec <__ascii_wctomb>:
 80171ec:	b149      	cbz	r1, 8017202 <__ascii_wctomb+0x16>
 80171ee:	2aff      	cmp	r2, #255	; 0xff
 80171f0:	bf85      	ittet	hi
 80171f2:	238a      	movhi	r3, #138	; 0x8a
 80171f4:	6003      	strhi	r3, [r0, #0]
 80171f6:	700a      	strbls	r2, [r1, #0]
 80171f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80171fc:	bf98      	it	ls
 80171fe:	2001      	movls	r0, #1
 8017200:	4770      	bx	lr
 8017202:	4608      	mov	r0, r1
 8017204:	4770      	bx	lr
	...

08017208 <_write_r>:
 8017208:	b538      	push	{r3, r4, r5, lr}
 801720a:	4c07      	ldr	r4, [pc, #28]	; (8017228 <_write_r+0x20>)
 801720c:	4605      	mov	r5, r0
 801720e:	4608      	mov	r0, r1
 8017210:	4611      	mov	r1, r2
 8017212:	2200      	movs	r2, #0
 8017214:	6022      	str	r2, [r4, #0]
 8017216:	461a      	mov	r2, r3
 8017218:	f7f2 f857 	bl	80092ca <_write>
 801721c:	1c43      	adds	r3, r0, #1
 801721e:	d102      	bne.n	8017226 <_write_r+0x1e>
 8017220:	6823      	ldr	r3, [r4, #0]
 8017222:	b103      	cbz	r3, 8017226 <_write_r+0x1e>
 8017224:	602b      	str	r3, [r5, #0]
 8017226:	bd38      	pop	{r3, r4, r5, pc}
 8017228:	200311b8 	.word	0x200311b8

0801722c <__swsetup_r>:
 801722c:	4b32      	ldr	r3, [pc, #200]	; (80172f8 <__swsetup_r+0xcc>)
 801722e:	b570      	push	{r4, r5, r6, lr}
 8017230:	681d      	ldr	r5, [r3, #0]
 8017232:	4606      	mov	r6, r0
 8017234:	460c      	mov	r4, r1
 8017236:	b125      	cbz	r5, 8017242 <__swsetup_r+0x16>
 8017238:	69ab      	ldr	r3, [r5, #24]
 801723a:	b913      	cbnz	r3, 8017242 <__swsetup_r+0x16>
 801723c:	4628      	mov	r0, r5
 801723e:	f7fe fbf7 	bl	8015a30 <__sinit>
 8017242:	4b2e      	ldr	r3, [pc, #184]	; (80172fc <__swsetup_r+0xd0>)
 8017244:	429c      	cmp	r4, r3
 8017246:	d10f      	bne.n	8017268 <__swsetup_r+0x3c>
 8017248:	686c      	ldr	r4, [r5, #4]
 801724a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801724e:	b29a      	uxth	r2, r3
 8017250:	0715      	lsls	r5, r2, #28
 8017252:	d42c      	bmi.n	80172ae <__swsetup_r+0x82>
 8017254:	06d0      	lsls	r0, r2, #27
 8017256:	d411      	bmi.n	801727c <__swsetup_r+0x50>
 8017258:	2209      	movs	r2, #9
 801725a:	6032      	str	r2, [r6, #0]
 801725c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017260:	81a3      	strh	r3, [r4, #12]
 8017262:	f04f 30ff 	mov.w	r0, #4294967295
 8017266:	e03e      	b.n	80172e6 <__swsetup_r+0xba>
 8017268:	4b25      	ldr	r3, [pc, #148]	; (8017300 <__swsetup_r+0xd4>)
 801726a:	429c      	cmp	r4, r3
 801726c:	d101      	bne.n	8017272 <__swsetup_r+0x46>
 801726e:	68ac      	ldr	r4, [r5, #8]
 8017270:	e7eb      	b.n	801724a <__swsetup_r+0x1e>
 8017272:	4b24      	ldr	r3, [pc, #144]	; (8017304 <__swsetup_r+0xd8>)
 8017274:	429c      	cmp	r4, r3
 8017276:	bf08      	it	eq
 8017278:	68ec      	ldreq	r4, [r5, #12]
 801727a:	e7e6      	b.n	801724a <__swsetup_r+0x1e>
 801727c:	0751      	lsls	r1, r2, #29
 801727e:	d512      	bpl.n	80172a6 <__swsetup_r+0x7a>
 8017280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017282:	b141      	cbz	r1, 8017296 <__swsetup_r+0x6a>
 8017284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017288:	4299      	cmp	r1, r3
 801728a:	d002      	beq.n	8017292 <__swsetup_r+0x66>
 801728c:	4630      	mov	r0, r6
 801728e:	f7ff fbbb 	bl	8016a08 <_free_r>
 8017292:	2300      	movs	r3, #0
 8017294:	6363      	str	r3, [r4, #52]	; 0x34
 8017296:	89a3      	ldrh	r3, [r4, #12]
 8017298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801729c:	81a3      	strh	r3, [r4, #12]
 801729e:	2300      	movs	r3, #0
 80172a0:	6063      	str	r3, [r4, #4]
 80172a2:	6923      	ldr	r3, [r4, #16]
 80172a4:	6023      	str	r3, [r4, #0]
 80172a6:	89a3      	ldrh	r3, [r4, #12]
 80172a8:	f043 0308 	orr.w	r3, r3, #8
 80172ac:	81a3      	strh	r3, [r4, #12]
 80172ae:	6923      	ldr	r3, [r4, #16]
 80172b0:	b94b      	cbnz	r3, 80172c6 <__swsetup_r+0x9a>
 80172b2:	89a3      	ldrh	r3, [r4, #12]
 80172b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80172b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172bc:	d003      	beq.n	80172c6 <__swsetup_r+0x9a>
 80172be:	4621      	mov	r1, r4
 80172c0:	4630      	mov	r0, r6
 80172c2:	f000 f917 	bl	80174f4 <__smakebuf_r>
 80172c6:	89a2      	ldrh	r2, [r4, #12]
 80172c8:	f012 0301 	ands.w	r3, r2, #1
 80172cc:	d00c      	beq.n	80172e8 <__swsetup_r+0xbc>
 80172ce:	2300      	movs	r3, #0
 80172d0:	60a3      	str	r3, [r4, #8]
 80172d2:	6963      	ldr	r3, [r4, #20]
 80172d4:	425b      	negs	r3, r3
 80172d6:	61a3      	str	r3, [r4, #24]
 80172d8:	6923      	ldr	r3, [r4, #16]
 80172da:	b953      	cbnz	r3, 80172f2 <__swsetup_r+0xc6>
 80172dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80172e4:	d1ba      	bne.n	801725c <__swsetup_r+0x30>
 80172e6:	bd70      	pop	{r4, r5, r6, pc}
 80172e8:	0792      	lsls	r2, r2, #30
 80172ea:	bf58      	it	pl
 80172ec:	6963      	ldrpl	r3, [r4, #20]
 80172ee:	60a3      	str	r3, [r4, #8]
 80172f0:	e7f2      	b.n	80172d8 <__swsetup_r+0xac>
 80172f2:	2000      	movs	r0, #0
 80172f4:	e7f7      	b.n	80172e6 <__swsetup_r+0xba>
 80172f6:	bf00      	nop
 80172f8:	200001a8 	.word	0x200001a8
 80172fc:	080189a8 	.word	0x080189a8
 8017300:	080189c8 	.word	0x080189c8
 8017304:	08018988 	.word	0x08018988

08017308 <_close_r>:
 8017308:	b538      	push	{r3, r4, r5, lr}
 801730a:	4c06      	ldr	r4, [pc, #24]	; (8017324 <_close_r+0x1c>)
 801730c:	2300      	movs	r3, #0
 801730e:	4605      	mov	r5, r0
 8017310:	4608      	mov	r0, r1
 8017312:	6023      	str	r3, [r4, #0]
 8017314:	f7f1 fff5 	bl	8009302 <_close>
 8017318:	1c43      	adds	r3, r0, #1
 801731a:	d102      	bne.n	8017322 <_close_r+0x1a>
 801731c:	6823      	ldr	r3, [r4, #0]
 801731e:	b103      	cbz	r3, 8017322 <_close_r+0x1a>
 8017320:	602b      	str	r3, [r5, #0]
 8017322:	bd38      	pop	{r3, r4, r5, pc}
 8017324:	200311b8 	.word	0x200311b8

08017328 <__sflush_r>:
 8017328:	898a      	ldrh	r2, [r1, #12]
 801732a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801732e:	4605      	mov	r5, r0
 8017330:	0710      	lsls	r0, r2, #28
 8017332:	460c      	mov	r4, r1
 8017334:	d458      	bmi.n	80173e8 <__sflush_r+0xc0>
 8017336:	684b      	ldr	r3, [r1, #4]
 8017338:	2b00      	cmp	r3, #0
 801733a:	dc05      	bgt.n	8017348 <__sflush_r+0x20>
 801733c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801733e:	2b00      	cmp	r3, #0
 8017340:	dc02      	bgt.n	8017348 <__sflush_r+0x20>
 8017342:	2000      	movs	r0, #0
 8017344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801734a:	2e00      	cmp	r6, #0
 801734c:	d0f9      	beq.n	8017342 <__sflush_r+0x1a>
 801734e:	2300      	movs	r3, #0
 8017350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017354:	682f      	ldr	r7, [r5, #0]
 8017356:	6a21      	ldr	r1, [r4, #32]
 8017358:	602b      	str	r3, [r5, #0]
 801735a:	d032      	beq.n	80173c2 <__sflush_r+0x9a>
 801735c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801735e:	89a3      	ldrh	r3, [r4, #12]
 8017360:	075a      	lsls	r2, r3, #29
 8017362:	d505      	bpl.n	8017370 <__sflush_r+0x48>
 8017364:	6863      	ldr	r3, [r4, #4]
 8017366:	1ac0      	subs	r0, r0, r3
 8017368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801736a:	b10b      	cbz	r3, 8017370 <__sflush_r+0x48>
 801736c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801736e:	1ac0      	subs	r0, r0, r3
 8017370:	2300      	movs	r3, #0
 8017372:	4602      	mov	r2, r0
 8017374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017376:	6a21      	ldr	r1, [r4, #32]
 8017378:	4628      	mov	r0, r5
 801737a:	47b0      	blx	r6
 801737c:	1c43      	adds	r3, r0, #1
 801737e:	89a3      	ldrh	r3, [r4, #12]
 8017380:	d106      	bne.n	8017390 <__sflush_r+0x68>
 8017382:	6829      	ldr	r1, [r5, #0]
 8017384:	291d      	cmp	r1, #29
 8017386:	d848      	bhi.n	801741a <__sflush_r+0xf2>
 8017388:	4a29      	ldr	r2, [pc, #164]	; (8017430 <__sflush_r+0x108>)
 801738a:	40ca      	lsrs	r2, r1
 801738c:	07d6      	lsls	r6, r2, #31
 801738e:	d544      	bpl.n	801741a <__sflush_r+0xf2>
 8017390:	2200      	movs	r2, #0
 8017392:	6062      	str	r2, [r4, #4]
 8017394:	04d9      	lsls	r1, r3, #19
 8017396:	6922      	ldr	r2, [r4, #16]
 8017398:	6022      	str	r2, [r4, #0]
 801739a:	d504      	bpl.n	80173a6 <__sflush_r+0x7e>
 801739c:	1c42      	adds	r2, r0, #1
 801739e:	d101      	bne.n	80173a4 <__sflush_r+0x7c>
 80173a0:	682b      	ldr	r3, [r5, #0]
 80173a2:	b903      	cbnz	r3, 80173a6 <__sflush_r+0x7e>
 80173a4:	6560      	str	r0, [r4, #84]	; 0x54
 80173a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80173a8:	602f      	str	r7, [r5, #0]
 80173aa:	2900      	cmp	r1, #0
 80173ac:	d0c9      	beq.n	8017342 <__sflush_r+0x1a>
 80173ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173b2:	4299      	cmp	r1, r3
 80173b4:	d002      	beq.n	80173bc <__sflush_r+0x94>
 80173b6:	4628      	mov	r0, r5
 80173b8:	f7ff fb26 	bl	8016a08 <_free_r>
 80173bc:	2000      	movs	r0, #0
 80173be:	6360      	str	r0, [r4, #52]	; 0x34
 80173c0:	e7c0      	b.n	8017344 <__sflush_r+0x1c>
 80173c2:	2301      	movs	r3, #1
 80173c4:	4628      	mov	r0, r5
 80173c6:	47b0      	blx	r6
 80173c8:	1c41      	adds	r1, r0, #1
 80173ca:	d1c8      	bne.n	801735e <__sflush_r+0x36>
 80173cc:	682b      	ldr	r3, [r5, #0]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d0c5      	beq.n	801735e <__sflush_r+0x36>
 80173d2:	2b1d      	cmp	r3, #29
 80173d4:	d001      	beq.n	80173da <__sflush_r+0xb2>
 80173d6:	2b16      	cmp	r3, #22
 80173d8:	d101      	bne.n	80173de <__sflush_r+0xb6>
 80173da:	602f      	str	r7, [r5, #0]
 80173dc:	e7b1      	b.n	8017342 <__sflush_r+0x1a>
 80173de:	89a3      	ldrh	r3, [r4, #12]
 80173e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173e4:	81a3      	strh	r3, [r4, #12]
 80173e6:	e7ad      	b.n	8017344 <__sflush_r+0x1c>
 80173e8:	690f      	ldr	r7, [r1, #16]
 80173ea:	2f00      	cmp	r7, #0
 80173ec:	d0a9      	beq.n	8017342 <__sflush_r+0x1a>
 80173ee:	0793      	lsls	r3, r2, #30
 80173f0:	680e      	ldr	r6, [r1, #0]
 80173f2:	bf08      	it	eq
 80173f4:	694b      	ldreq	r3, [r1, #20]
 80173f6:	600f      	str	r7, [r1, #0]
 80173f8:	bf18      	it	ne
 80173fa:	2300      	movne	r3, #0
 80173fc:	eba6 0807 	sub.w	r8, r6, r7
 8017400:	608b      	str	r3, [r1, #8]
 8017402:	f1b8 0f00 	cmp.w	r8, #0
 8017406:	dd9c      	ble.n	8017342 <__sflush_r+0x1a>
 8017408:	4643      	mov	r3, r8
 801740a:	463a      	mov	r2, r7
 801740c:	6a21      	ldr	r1, [r4, #32]
 801740e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017410:	4628      	mov	r0, r5
 8017412:	47b0      	blx	r6
 8017414:	2800      	cmp	r0, #0
 8017416:	dc06      	bgt.n	8017426 <__sflush_r+0xfe>
 8017418:	89a3      	ldrh	r3, [r4, #12]
 801741a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801741e:	81a3      	strh	r3, [r4, #12]
 8017420:	f04f 30ff 	mov.w	r0, #4294967295
 8017424:	e78e      	b.n	8017344 <__sflush_r+0x1c>
 8017426:	4407      	add	r7, r0
 8017428:	eba8 0800 	sub.w	r8, r8, r0
 801742c:	e7e9      	b.n	8017402 <__sflush_r+0xda>
 801742e:	bf00      	nop
 8017430:	20400001 	.word	0x20400001

08017434 <_fflush_r>:
 8017434:	b538      	push	{r3, r4, r5, lr}
 8017436:	690b      	ldr	r3, [r1, #16]
 8017438:	4605      	mov	r5, r0
 801743a:	460c      	mov	r4, r1
 801743c:	b1db      	cbz	r3, 8017476 <_fflush_r+0x42>
 801743e:	b118      	cbz	r0, 8017448 <_fflush_r+0x14>
 8017440:	6983      	ldr	r3, [r0, #24]
 8017442:	b90b      	cbnz	r3, 8017448 <_fflush_r+0x14>
 8017444:	f7fe faf4 	bl	8015a30 <__sinit>
 8017448:	4b0c      	ldr	r3, [pc, #48]	; (801747c <_fflush_r+0x48>)
 801744a:	429c      	cmp	r4, r3
 801744c:	d109      	bne.n	8017462 <_fflush_r+0x2e>
 801744e:	686c      	ldr	r4, [r5, #4]
 8017450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017454:	b17b      	cbz	r3, 8017476 <_fflush_r+0x42>
 8017456:	4621      	mov	r1, r4
 8017458:	4628      	mov	r0, r5
 801745a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801745e:	f7ff bf63 	b.w	8017328 <__sflush_r>
 8017462:	4b07      	ldr	r3, [pc, #28]	; (8017480 <_fflush_r+0x4c>)
 8017464:	429c      	cmp	r4, r3
 8017466:	d101      	bne.n	801746c <_fflush_r+0x38>
 8017468:	68ac      	ldr	r4, [r5, #8]
 801746a:	e7f1      	b.n	8017450 <_fflush_r+0x1c>
 801746c:	4b05      	ldr	r3, [pc, #20]	; (8017484 <_fflush_r+0x50>)
 801746e:	429c      	cmp	r4, r3
 8017470:	bf08      	it	eq
 8017472:	68ec      	ldreq	r4, [r5, #12]
 8017474:	e7ec      	b.n	8017450 <_fflush_r+0x1c>
 8017476:	2000      	movs	r0, #0
 8017478:	bd38      	pop	{r3, r4, r5, pc}
 801747a:	bf00      	nop
 801747c:	080189a8 	.word	0x080189a8
 8017480:	080189c8 	.word	0x080189c8
 8017484:	08018988 	.word	0x08018988

08017488 <_lseek_r>:
 8017488:	b538      	push	{r3, r4, r5, lr}
 801748a:	4c07      	ldr	r4, [pc, #28]	; (80174a8 <_lseek_r+0x20>)
 801748c:	4605      	mov	r5, r0
 801748e:	4608      	mov	r0, r1
 8017490:	4611      	mov	r1, r2
 8017492:	2200      	movs	r2, #0
 8017494:	6022      	str	r2, [r4, #0]
 8017496:	461a      	mov	r2, r3
 8017498:	f7f1 ff5a 	bl	8009350 <_lseek>
 801749c:	1c43      	adds	r3, r0, #1
 801749e:	d102      	bne.n	80174a6 <_lseek_r+0x1e>
 80174a0:	6823      	ldr	r3, [r4, #0]
 80174a2:	b103      	cbz	r3, 80174a6 <_lseek_r+0x1e>
 80174a4:	602b      	str	r3, [r5, #0]
 80174a6:	bd38      	pop	{r3, r4, r5, pc}
 80174a8:	200311b8 	.word	0x200311b8

080174ac <__swhatbuf_r>:
 80174ac:	b570      	push	{r4, r5, r6, lr}
 80174ae:	460e      	mov	r6, r1
 80174b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174b4:	2900      	cmp	r1, #0
 80174b6:	b096      	sub	sp, #88	; 0x58
 80174b8:	4614      	mov	r4, r2
 80174ba:	461d      	mov	r5, r3
 80174bc:	da07      	bge.n	80174ce <__swhatbuf_r+0x22>
 80174be:	2300      	movs	r3, #0
 80174c0:	602b      	str	r3, [r5, #0]
 80174c2:	89b3      	ldrh	r3, [r6, #12]
 80174c4:	061a      	lsls	r2, r3, #24
 80174c6:	d410      	bmi.n	80174ea <__swhatbuf_r+0x3e>
 80174c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80174cc:	e00e      	b.n	80174ec <__swhatbuf_r+0x40>
 80174ce:	466a      	mov	r2, sp
 80174d0:	f000 f8a4 	bl	801761c <_fstat_r>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	dbf2      	blt.n	80174be <__swhatbuf_r+0x12>
 80174d8:	9a01      	ldr	r2, [sp, #4]
 80174da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80174de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80174e2:	425a      	negs	r2, r3
 80174e4:	415a      	adcs	r2, r3
 80174e6:	602a      	str	r2, [r5, #0]
 80174e8:	e7ee      	b.n	80174c8 <__swhatbuf_r+0x1c>
 80174ea:	2340      	movs	r3, #64	; 0x40
 80174ec:	2000      	movs	r0, #0
 80174ee:	6023      	str	r3, [r4, #0]
 80174f0:	b016      	add	sp, #88	; 0x58
 80174f2:	bd70      	pop	{r4, r5, r6, pc}

080174f4 <__smakebuf_r>:
 80174f4:	898b      	ldrh	r3, [r1, #12]
 80174f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80174f8:	079d      	lsls	r5, r3, #30
 80174fa:	4606      	mov	r6, r0
 80174fc:	460c      	mov	r4, r1
 80174fe:	d507      	bpl.n	8017510 <__smakebuf_r+0x1c>
 8017500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017504:	6023      	str	r3, [r4, #0]
 8017506:	6123      	str	r3, [r4, #16]
 8017508:	2301      	movs	r3, #1
 801750a:	6163      	str	r3, [r4, #20]
 801750c:	b002      	add	sp, #8
 801750e:	bd70      	pop	{r4, r5, r6, pc}
 8017510:	ab01      	add	r3, sp, #4
 8017512:	466a      	mov	r2, sp
 8017514:	f7ff ffca 	bl	80174ac <__swhatbuf_r>
 8017518:	9900      	ldr	r1, [sp, #0]
 801751a:	4605      	mov	r5, r0
 801751c:	4630      	mov	r0, r6
 801751e:	f7ff fac1 	bl	8016aa4 <_malloc_r>
 8017522:	b948      	cbnz	r0, 8017538 <__smakebuf_r+0x44>
 8017524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017528:	059a      	lsls	r2, r3, #22
 801752a:	d4ef      	bmi.n	801750c <__smakebuf_r+0x18>
 801752c:	f023 0303 	bic.w	r3, r3, #3
 8017530:	f043 0302 	orr.w	r3, r3, #2
 8017534:	81a3      	strh	r3, [r4, #12]
 8017536:	e7e3      	b.n	8017500 <__smakebuf_r+0xc>
 8017538:	4b0d      	ldr	r3, [pc, #52]	; (8017570 <__smakebuf_r+0x7c>)
 801753a:	62b3      	str	r3, [r6, #40]	; 0x28
 801753c:	89a3      	ldrh	r3, [r4, #12]
 801753e:	6020      	str	r0, [r4, #0]
 8017540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017544:	81a3      	strh	r3, [r4, #12]
 8017546:	9b00      	ldr	r3, [sp, #0]
 8017548:	6163      	str	r3, [r4, #20]
 801754a:	9b01      	ldr	r3, [sp, #4]
 801754c:	6120      	str	r0, [r4, #16]
 801754e:	b15b      	cbz	r3, 8017568 <__smakebuf_r+0x74>
 8017550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017554:	4630      	mov	r0, r6
 8017556:	f000 f873 	bl	8017640 <_isatty_r>
 801755a:	b128      	cbz	r0, 8017568 <__smakebuf_r+0x74>
 801755c:	89a3      	ldrh	r3, [r4, #12]
 801755e:	f023 0303 	bic.w	r3, r3, #3
 8017562:	f043 0301 	orr.w	r3, r3, #1
 8017566:	81a3      	strh	r3, [r4, #12]
 8017568:	89a3      	ldrh	r3, [r4, #12]
 801756a:	431d      	orrs	r5, r3
 801756c:	81a5      	strh	r5, [r4, #12]
 801756e:	e7cd      	b.n	801750c <__smakebuf_r+0x18>
 8017570:	080159f9 	.word	0x080159f9

08017574 <memmove>:
 8017574:	4288      	cmp	r0, r1
 8017576:	b510      	push	{r4, lr}
 8017578:	eb01 0302 	add.w	r3, r1, r2
 801757c:	d807      	bhi.n	801758e <memmove+0x1a>
 801757e:	1e42      	subs	r2, r0, #1
 8017580:	4299      	cmp	r1, r3
 8017582:	d00a      	beq.n	801759a <memmove+0x26>
 8017584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017588:	f802 4f01 	strb.w	r4, [r2, #1]!
 801758c:	e7f8      	b.n	8017580 <memmove+0xc>
 801758e:	4283      	cmp	r3, r0
 8017590:	d9f5      	bls.n	801757e <memmove+0xa>
 8017592:	1881      	adds	r1, r0, r2
 8017594:	1ad2      	subs	r2, r2, r3
 8017596:	42d3      	cmn	r3, r2
 8017598:	d100      	bne.n	801759c <memmove+0x28>
 801759a:	bd10      	pop	{r4, pc}
 801759c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80175a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80175a4:	e7f7      	b.n	8017596 <memmove+0x22>

080175a6 <__malloc_lock>:
 80175a6:	4770      	bx	lr

080175a8 <__malloc_unlock>:
 80175a8:	4770      	bx	lr

080175aa <_realloc_r>:
 80175aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ac:	4607      	mov	r7, r0
 80175ae:	4614      	mov	r4, r2
 80175b0:	460e      	mov	r6, r1
 80175b2:	b921      	cbnz	r1, 80175be <_realloc_r+0x14>
 80175b4:	4611      	mov	r1, r2
 80175b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80175ba:	f7ff ba73 	b.w	8016aa4 <_malloc_r>
 80175be:	b922      	cbnz	r2, 80175ca <_realloc_r+0x20>
 80175c0:	f7ff fa22 	bl	8016a08 <_free_r>
 80175c4:	4625      	mov	r5, r4
 80175c6:	4628      	mov	r0, r5
 80175c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175ca:	f000 f849 	bl	8017660 <_malloc_usable_size_r>
 80175ce:	42a0      	cmp	r0, r4
 80175d0:	d20f      	bcs.n	80175f2 <_realloc_r+0x48>
 80175d2:	4621      	mov	r1, r4
 80175d4:	4638      	mov	r0, r7
 80175d6:	f7ff fa65 	bl	8016aa4 <_malloc_r>
 80175da:	4605      	mov	r5, r0
 80175dc:	2800      	cmp	r0, #0
 80175de:	d0f2      	beq.n	80175c6 <_realloc_r+0x1c>
 80175e0:	4631      	mov	r1, r6
 80175e2:	4622      	mov	r2, r4
 80175e4:	f7fb ff26 	bl	8013434 <memcpy>
 80175e8:	4631      	mov	r1, r6
 80175ea:	4638      	mov	r0, r7
 80175ec:	f7ff fa0c 	bl	8016a08 <_free_r>
 80175f0:	e7e9      	b.n	80175c6 <_realloc_r+0x1c>
 80175f2:	4635      	mov	r5, r6
 80175f4:	e7e7      	b.n	80175c6 <_realloc_r+0x1c>
	...

080175f8 <_read_r>:
 80175f8:	b538      	push	{r3, r4, r5, lr}
 80175fa:	4c07      	ldr	r4, [pc, #28]	; (8017618 <_read_r+0x20>)
 80175fc:	4605      	mov	r5, r0
 80175fe:	4608      	mov	r0, r1
 8017600:	4611      	mov	r1, r2
 8017602:	2200      	movs	r2, #0
 8017604:	6022      	str	r2, [r4, #0]
 8017606:	461a      	mov	r2, r3
 8017608:	f7f1 fe42 	bl	8009290 <_read>
 801760c:	1c43      	adds	r3, r0, #1
 801760e:	d102      	bne.n	8017616 <_read_r+0x1e>
 8017610:	6823      	ldr	r3, [r4, #0]
 8017612:	b103      	cbz	r3, 8017616 <_read_r+0x1e>
 8017614:	602b      	str	r3, [r5, #0]
 8017616:	bd38      	pop	{r3, r4, r5, pc}
 8017618:	200311b8 	.word	0x200311b8

0801761c <_fstat_r>:
 801761c:	b538      	push	{r3, r4, r5, lr}
 801761e:	4c07      	ldr	r4, [pc, #28]	; (801763c <_fstat_r+0x20>)
 8017620:	2300      	movs	r3, #0
 8017622:	4605      	mov	r5, r0
 8017624:	4608      	mov	r0, r1
 8017626:	4611      	mov	r1, r2
 8017628:	6023      	str	r3, [r4, #0]
 801762a:	f7f1 fe76 	bl	800931a <_fstat>
 801762e:	1c43      	adds	r3, r0, #1
 8017630:	d102      	bne.n	8017638 <_fstat_r+0x1c>
 8017632:	6823      	ldr	r3, [r4, #0]
 8017634:	b103      	cbz	r3, 8017638 <_fstat_r+0x1c>
 8017636:	602b      	str	r3, [r5, #0]
 8017638:	bd38      	pop	{r3, r4, r5, pc}
 801763a:	bf00      	nop
 801763c:	200311b8 	.word	0x200311b8

08017640 <_isatty_r>:
 8017640:	b538      	push	{r3, r4, r5, lr}
 8017642:	4c06      	ldr	r4, [pc, #24]	; (801765c <_isatty_r+0x1c>)
 8017644:	2300      	movs	r3, #0
 8017646:	4605      	mov	r5, r0
 8017648:	4608      	mov	r0, r1
 801764a:	6023      	str	r3, [r4, #0]
 801764c:	f7f1 fe75 	bl	800933a <_isatty>
 8017650:	1c43      	adds	r3, r0, #1
 8017652:	d102      	bne.n	801765a <_isatty_r+0x1a>
 8017654:	6823      	ldr	r3, [r4, #0]
 8017656:	b103      	cbz	r3, 801765a <_isatty_r+0x1a>
 8017658:	602b      	str	r3, [r5, #0]
 801765a:	bd38      	pop	{r3, r4, r5, pc}
 801765c:	200311b8 	.word	0x200311b8

08017660 <_malloc_usable_size_r>:
 8017660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017664:	1f18      	subs	r0, r3, #4
 8017666:	2b00      	cmp	r3, #0
 8017668:	bfbc      	itt	lt
 801766a:	580b      	ldrlt	r3, [r1, r0]
 801766c:	18c0      	addlt	r0, r0, r3
 801766e:	4770      	bx	lr

08017670 <_init>:
 8017670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017672:	bf00      	nop
 8017674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017676:	bc08      	pop	{r3}
 8017678:	469e      	mov	lr, r3
 801767a:	4770      	bx	lr

0801767c <_fini>:
 801767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801767e:	bf00      	nop
 8017680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017682:	bc08      	pop	{r3}
 8017684:	469e      	mov	lr, r3
 8017686:	4770      	bx	lr
